{
	"next_topic_id": 1,
	"topic": [],
	"topic_vote": {
		"1_15XeFY67fYKCKxQPfeo246ELto2Gff1hAe": 1
	},
	"next_comment_id": 4,
	"comment": {
		"1_15XeFY67fYKCKxQPfeo246ELto2Gff1hAe": [
			{
				"comment_id": 1,
				"body": "SUHRVASOSP (Stream Ultra High Resolution Videos As Stripes Of Sparse Pixels)\n\nWhat Got My Head Cranking Gears\n\n16K resolution divides down to most lower resolutions multiple times. If 1 out of 144 pixels per frame of a 16K video were streamed, you'd have a 720p video that lower graphical performance devices can easily play, and hopefully the data the client needs to download and store would be 1/144 the size of the original file or at least be near that proximity, because of course a 16K video would be colossal. Again, most lower resolutions fit into 16K multiple times. Most of the video resolutions available on YouTube fit into 16K, but also fit into resolutions that are smaller than 16K but larger than (for one of many example resolutions) 1080p, a common target resolution until everyone switches to 4K, but 4K fits the scheme just as perfectly.\n\nIt's kind of mind blowing to find how the many small resolutions fit into large resolutions perfectly, but I'm guessing this was a design around perfect image scaling for ever increasing display resolutions. Take a few minutes here to see this for yourself on a calculator and digest this information. Take a nice, long break if you need to and really think about this, because there's more to read below.\n\n\n**INTERMISSION**\n\n16K was made as an extreme example, but to me it shows how we can take an ultra high resolution video and serve it as any number of lower resolution videos without needing multiple lower resolution copies, saving server/node storage space and doing away with having to encode those lower resolution copies. Win, win... maybe?\n\n\nThe Short and Easy Summary of the Idea\n(Possible wins for clients and P2P applications too)\n\nThe idea here is to stream just enough stripes of sparse pixels to suitably fit a client's/leecher's internet bandwidth and the maximum video resolution their device can handle by the client/leecher choosing from a list of resolution tiers. They would then have the instant gratification of streaming and not need to worry about video compatibility.\n\n\nHow My Feature With The Clusterfucked Acronym SUHRVASOSP Would Work\n\nSay a video's data is streamed over a P2P network as a stripe of sparse pixels that are enough to make up a 720p resolution, the client watches the whole video without any issue of buffering as most people can stream at 720p. It would be up to the client to tell the website or P2P app how many stripes to download (no more, no less) by selecting from a list of resolution tiers. If the client has beastly internet bandwidth, a powerful device and massive storage, then they can select a higher resolution tier... or the highest resolution tier and download all the stripes, becoming a larger or the largest possible seeder. Clients with less resources can seed fewer stripes and clients with more resources can seed more stripes. Clients in the same resolution tier would have the same stripes. Higher resolution tiers would have all the stripes of the lower resolution tiers to add up to their resolution or somewhere near it, because sometimes it's forgivable if clients with 720p displays are lumped into the 1080p tier and this would force them to seed more data. The resolution tier list won't have to be very granular with how devices can sometimes handle next higher standard resolutions, still reaping the benefit of higher quality output despite the video resolution being higher than their display resolution, thanks to downscaling.\n\nI don't care if this idea might be unworkable. I just needed to get it out there.",
				"added": 1509339352
			},
			{
				"comment_id": 2,
				"body": "Here's an image that illustrates sparse grid supersampling, but supersampling isn't part of this idea. It just provides a similar visual in the grids.\n\nhttps://mynameismjp.files.wordpress.com/2012/10/supersampling-patterns.png",
				"added": 1509342294
			},
			{
				"comment_id": 3,
				"body": "One thing that I forgot about...\n\nI think compressed video would be a challenge, if not impossible to work with, having this implemented. I think video would have to be uncompressed.\n\nAn I correct? Have I wasted my time with forgotten forethought?",
				"added": 1509354657
			}
		]
	},
	"comment_vote": {}
}