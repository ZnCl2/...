{
	"next_topic_id": 28,
	"topic": [
		{
			"topic_id": 1632720381,
			"title": "有没有能代替QQ的软件？",
			"body": "QQ越来越让人抵触了，QQ看点，好友热播（不能关闭），垃圾推送，广告……尤其是好友热播，大量的低质量，性暗示视频，QQ用户平均年龄偏小，这简直就是对三观还未健全的青少年的毒害！\n\n如果用轻聊版或是其他阉割版的QQ。软件需要用QQ登录，有东西要分享到QQ上，系统会显示“手机没有下载QQ软件”。",
			"added": 1632720380,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632721796,
			"title": "有哪些微信小程序值得推荐？",
			"body": "",
			"added": 1632721794,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632721874,
			"title": "全平台 & 轻量级：PWA 应用生态指南/应用推荐",
			"body": "大家好，我是 Alan，这里是《Android weekly update》专栏计划第二十四期。\n\n时至今日，不少智能手机用户对类似「小程序」或是「快应用」这样的轻便型应用都已经或多或少有所体验：这类大都主打「开袋即食」的应用，多是基于 html 网页打造而来，而说到基于网页实现的应用，就不得不提到这一领域最早发起的标准之一 —— PWA。\n\nPWA 是渐进式网页应用（Progressive Web Apps）的缩写，从 Google 2015 年推出这一技术标准以来，已经有不少应用服务推出了 PWA 版本应用，来让更多可以运行 web 网页的设备也能获得类似原生应用的使用体验，与此同时，也让很多已经有在使用原生应用的用户，多了一种更加轻量化的选择；同时，PWA 应用相比于内嵌于微信的小程序来讲，所能调用的系统权限更多，实现的效果也更加接近原生应用。\n\n\n如今，你已经很难单从图标来分辨 PWA 应用与原生应用，即使是进入主界面也难辨彼此\n由于 PWA 基于网页的本质，所以随之而来的 PWA 生态也有着轻量级、免安装、以及内容主导型服务的明显特征，我们能看到积极将 PWA 作为开发方向的应用/服务也多以以下几个方向为主：\n\n出行类（Uber / Lyft）\n外卖 / 点餐（星巴克 / 饿了么）\n新闻/阅读类（少数派 / Flipboard）\n笔记类（语雀 / Flomo）\n社交平台（微博 / Instagram）\n经过数年发展，PWA 生态也已经初具规模，同时在发展中也逐渐加入了响应速度提升、可以离线访问，支持后台通知/调用硬件接口等功能，在使用体验上更加轻量级的同时加入了更多体验优化。\n\n比如说在浏览网页时页面顶部弹出的推荐安装应用提示，这也是许多开发者引导用户下载应用的主要方式之一。\n\n\niOS 在浏览网页内容时所弹出的安装提示\n而当你打开支持 PWA 应用的网站时，PWA 应用同样也可以在底部弹出安装通知，提示你当前有可供安装的 PWA 版本应用，在此基础上，Google 还在今年 3 月推出了样式更加接近原生应用展示效果的 PWA 安装提示，让用户可以通过一个弹出界面，快速了解 PWA 版本应用的功能以及界面预览。\n\n\n多平台体验\n毋庸置疑，全平台运行可以说是 PWA 相比于其他形式容易受到平台限制的应用生态最大的优势之一：某种意义上来讲，你只要有一个能够运行图形化浏览器的设备，你就能用到一个 PWA 应用的基本功能。\n\n而这一优势，具现到我们的日常生活中，则是 PWA 更加容易快速实现「全平台覆盖」：随着 PWA 由 Google 发起，在数年中逐渐被微软与苹果作为一种新兴技术标准接纳到自家平台中，PWA 的全平台覆盖效果已经基本成型。只是在「接纳」PWA 在自家平台这件事上，三家平台基于利益/技术上的种种考虑，具体实现的效果也不尽相同。\n\n在 Android / Windows 上，得益于 Google / 微软对于 PWA 这一技术标准的强力推动，在 Windows 10 与 Android/Chrome OS 上，我们都能获得「PWA 应用最佳体验」：Google 希望更加轻量级的 PWA 能进一步覆盖以 Android Go 为主打平台的入门级智能机市场应用生态，以及仍然严重依赖 Chrome 浏览器的 Chrome OS 生态；而微软则有野心更大、且同样对标 Chrome OS 的 Windows 10 X系统需要 PWA 这样的应用来丰富其生态。\n\n\n比如 Twitter 的 Shortcuts，在 Windows 与 Android 上都有支持\n而在 iOS 端，虽然 iOS 很早便支持将书签直接放置在主界面，但如今对于体验更进一步的 PWA 应用体验 上，iOS 的支持只能说是不尽人意，用户想要安装 PWA 应用，仍然只有通过添加书签的方式来将 PWA 图标添加到桌面上。\n\n\n除此之外，Android 系统已经在数年的长期升级迭代中，为 PWA 开发者开放了不少 Android 系统原生特性，如系统硬件权限、Shortcuts 等，帮助开发者打造出更加接近原生应用的 PWA；而 iOS 在此方向上一直停滞不前，直接导致了 PWA 应用在 iOS 上部分体验缺失。\n\n\n这些在 iOS 上长期缺失的特性，也限制了 PWA 进一步在 iOS 上追平原生应用的使用体验。有人说这是苹果为了维护自家 App Store 应用生态「乐园」，从而钳制 PWA 生态的举措，不过这并非本文想要讨论的重点，暂且按下不表。\n\n不过，总体来讲，在 iOS 系统在 11.3 版本支持了 PWA 应用之后，目前所能实现的效果虽然不及 Android 端 PWA 的完善，但也获得了与原生应用接近的使用体验，PWA 应用所能实现的效果，也比传统的网页书签来得更加美观实用。\n\n\n说到这里，如果你要获得最佳的 PWA 应用体验的话，由于 Google 自家出品的 Chrome 内建 PWA 支持最为完整，在很多平台上，Chrome 都是体验 PWA 应用的最佳「载体」。\n\n但凡事还是有例外：比如，在 Windows 10 平台中，采用 Chromium 内核的新版 Edge 浏览器不仅支持 PWA 较为完善，而且还支持在不调起浏览器本身进程的同时启动 PWA 应用，相比于基于 Chrome 安装的 PWA 应用打开时还会同时唤起 Chrome 本体来讲，实际体验更接近原生应用。\n\n\n此外，桌面端还有 Stack 这样基于 Chromium 内核、但通过界面设计与快捷键使用，对 PWA 应用优化令人眼前一亮的浏览器，可以让你在桌面端的大屏幕上同时以最佳的屏幕比例运行多个 PWA 应用，也不失为 PWA 应用值得尝试的另一种打开方式。\n\n\n有鉴于此，Alan 在正式推荐 PWA 应用之前，先选出了不同平台分别最适合体验 PWA 应用的浏览器：\n\nAndroid：Chrome 浏览器\niOS：Safari 浏览器\nWindows 10：Edge 浏览器 / Chrome 浏览器 / Stack 浏览器\nmacOS：Chrome 浏览器 / Stack 浏览器\nLinux：Chrome 浏览器\nWindows 10 Mobile：随意\nPWA 应用去哪儿找\n了解系统生态是否完善，当然要先去应用商店看看。所以想要了解 PWA 并快速上手，当然不能只靠 Chrome 浏览器在你打开一个支持 PWA 应用时弹出的安装提示；更快速的方式是：通过「应用商店」来快速获取到你可能用得上的 PWA 应用。\n\n不出意外地，PWA 应用的应用商店本身自然也是 PWA 应用，而且由于 PWA 本身「免安装」的特征，PWA 应用更像是一个网站导航页面，即便如此，随着 PWA 优秀应用越来越多，PWA 应用商店还是起到了一个繁茂的应用生态中不可或缺的导航作用，并越发接近我们所熟知应用商店的模样。\n\nAppScope\n🔗 安装链接\n\nAppScope 就是近年来出现的 PWA 应用商店中最值得介绍的那一个：因为它无论是从 UI 界面设计、应用详情页、以及应用推荐机制（热门应用/新应用），以及应用详情页来看，都无愧于「应用商店」这一称号，甚至已经可以与 Play Store 或 App Store 相提并论。\n\n\n除了商店本身有着较高水准之外，AppScope 在上架应用审核上也相对最为严格，这样做的主要好处就是你在 AppScope 中找到的 PWA 应用，在适配程度上都更加完善，整体使用体验更好。如果你也在寻觅优秀的 PWA 应用，那 AppScope 一定是你不容错过的一个去处。\n\nPWA Directory\n🔗 安装链接\n\n而另一个较为知名的 PWA 应用获取渠道 PWA Directory 就相对更加「随性」，收录标准相对更低；所以你能在这里找到很多并非 PWA 的 web 应用。\n\n\n不过作为老牌 PWA 资源站，PWA Directory 还会在应用详情页展示应用的网页性能以及运行速度测试，你甚至还能在这里找到 PWA 应用的部分代码；此外 PWA Directory 也支持直接上传 PWA 应用，如果你也有自己的 PWA 应用想要推荐给更多人，你也可以在通过添加网址的方式将应用收录在这里；因此在 PWA Directory 中你偶尔还能看到做了 PWA 优化的个人 blog ……\n\nPWA 集散地\n🔗 安装链接\n\n对于国内用户，PWA AppStoreCN 可能也是一个额外值得一提的选择：这是一个界面与 App Scope 类似，但主要收录国内互联网 PWA 应用的站点，同时在应用详情页表明了此 PWA 对 iOS/Android 是否兼容。\n\n\n不足之处在于，此站点只对手机设备做了优化，同时收录的 PWA 资源素质也良莠不齐，但无论如何，仍然是一个值得探索一番的 PWA 应用站。\n\nPWA Stats\n除此之外，你还可以前往 PWA Stats 找到更多 PWA 应用；这个网站主要收录 PWA 应用的开发动态与实例，你还能从这里找到 Google 与 饿了么 合作开发 PWA 的相关细节以及「为什么应用开发商仍然想让你安装原生应用」的 文章，是一个偏开发者向的 PWA 资源站。\n\n\nPWA 应用推荐\nYouTube Music\n🔗 安装链接\n\nYouTube 与衍生音乐流媒体服务 YouTube Music 绝对很多用户在桌面端/移动端都经常使用的选择，但无论是在 Windows 还是在 macOS 都一直没有相应的桌面端应用，对于不少重度使用的用户来讲还是有些许不方便。\n\n其实，这一需求 YouTube 已经有对应的 PWA 应用来解决，并且也借助 PWA 全平台的特性，无论是在 Windows 还是在 macOS 上，都能获得相同的使用体验。\n\n\n作为一款基于网页的播放器，PWA 版 YouTube 的完成度可以说是非常高了，不足之处在于相比 Android 端 YouTube Music 。PWA 版本无法读取本地的音乐文件作为播放器来使用，但支持读取音乐文件并将其上传至 YouTube Music 中。\n\n同时，同样未发布 Windows 版的 Apple Music 其实也有 web 版本可供选择，只是 Apple Music 的 web 版并未针对 PWA 做出适配，在使用体验上自然也差了一些。\n\nGoogle News\n🔗 安装链接\n\n除了 YouTube 之外，PWA 作为 Google 自家技术，Google 旗下不少服务都有推出适用于 PWA 的版本，Google News 作为新闻阅读平台更适合 PWA 这种轻量级的应用模式。\n\n\n值得一提的是，其实 Google 自家的不少网页资源，例如往年 I/O 大会的现场指南网站、Google 开发者 等资源站点，都经常能看到其有做 PWA 的支持，方便用户快速将网页内容添加到手机上，以便更加快速的获取到相关信息。\n\nTwitter\n🔗 安装链接\n\nTwitter 毫无疑问是 PWA 领域中最早入局的玩家之一，并且也一直有在跟随 PWA 应用开发的各种新特征来迭代自己的 PWA 应用，使其成为了聊到 PWA 应用就不得不提的「模范应用」之一。\n\n\n和同样做了 PWA 首批适配的同类平台微博 Lite 相比，Twitter 除了率先适配前面提到的新 PWA 安装推荐样式之外，Twitter 的 PWA 应用在过去还适配了 Shortcuts 以及应用通知等功能（当然官方客户端时间线混乱等「特性」也被直接继承了过来），足以称得上是 PWA 应用中各项特性适配最完善的开发者。\n\nCrossNote\n🔗 安装链接\n\n一款 PWA 笔记应用，可以以浏览器的样式同时开启多个文档界面或是同时拆分屏幕显示多个文档；支持 Markdown 语法，以及借助关联图整理文档；同时提供了源代码/预览两种显示模式。\n\n\n此外，CrossNote 内所有笔记都只会在浏览器本地存储，不会上传到云端。\n\n语雀\n🔗 安装链接\n\n语雀是一个学习笔记整理服务，推出 PWA 应用作为一款在线编辑器来讲称得上功能强大，支持从本地导入多种格式的文档。\n\n\n值得一提的是，可以借助 PWA 离线功能这一特性，在离线编辑的情况下将编辑内容暂时保存至本地；不过相比于桌面端界面，PWA 应用的移动端编辑界面目前还较为简陋。\n\n\nFlomo 浮墨笔记\n🔗 安装链接\n\n和上面两款笔记 PWA 应用不太相同，Flomo 是一款主打「无压力记录」的笔记服务，帮助用户随时随地完成灵感碎片的记录，但要做到「随时随地」，自然是要尽可能覆盖到更多的平台，PWA 应用就是开发团队所选择的另一种补充方案。\n\n\nFlomo 开发团队也发布了 安装教程 来快速安装 PWA 应用，作为与功能理念的对应，Flomo 的功能非常简单，其「快速记录灵感」的目的也与 PWA 这一应用模式的初衷暗合，算是 PWA 笔记应用中相对特殊的一个存在。\n\nMicrosoft Office\n🔗 安装链接\n\n前面有提到，微软基于自身战略考虑，也一直在推动 PWA 生态发展，作为著名的「iOS/Android 开发者」，构建生态这种事微软自己下场其实也没什么奇怪的：Office PWA 版本就是这样的一个产物。\n\n\n在使用过程中，这个 PWA 版本的 Office 主要是借助各种组件的 web 版本，点击之后则会自动跳转到浏览器中开启新的窗口，来完成整套 Office 套件的使用，PWA 版 Office 应用本身更像是一个收纳了所有 Office 旗下服务的「中转站」。\n\n\n好在，微软对于 web 版 Office 本身在功能优化与完善上都值得称道，而 Android / iOS 等移动平台上 Office 套件对应的原生应用也非常成熟，PWA 应用在这样的情况下充当一个轻量级的补充应用，搭配 web 应用，覆盖更多原生应用无法使用的场景，也算是满足其设计目的了。\n\nNewsfeeder\n🔗 安装链接\n\nNewsfeeder 是基于 PWA 实现的一款 RSS 阅读器，UI 界面采用了 Material Design 设计语言，同时支持导入/导出 OPML 文件。\n\n\n除了直接搜索 RSS 订阅链接之外，Newsfeeder 还支持以 feed 的形式订阅 Twitter 推文、Reddit 动态等信息流内容，算是一款轻量级但仍然能高效聚合新闻的 RSS 阅读器。\n\n总结\n除了上述介绍这些 PWA 应用之外，少数派之前也有作者撰文介绍了一些如 Google Map、Telegram、Slack 等支持 PWA 较好的应用/服务，你可以在 这篇文章 找到它们的详细介绍与安装地址。\n\n最后，还有不少 PWA 游戏以各种的方式活跃在用户的各种设备上；但不要抱太高期待：因为这些 PWA 游戏本质上都是基于 HTML5 网页制作而成，所以基本上都难逃「小游戏」的范畴；但这不代表 PWA 游戏不值得一试。\n\n在这其中，知名度较高的有 Google 出品的 Doodle 小游戏《Cricket》以及难度略高的叠塔游戏《Tower Game》。\n\n\n还有判断出现在《Rick and Morty》中的角色「死或生」的小游戏 ……\n从过去数年 PWA 逐渐成熟的应用生态/开发环境可以看到；不少知名服务推出的 PWA 版本应用，或多或少地都存在「引导下载原生应用」的情况。\n\n不过这种情况本身无可厚非：因为开发者往往对原生应用开发投入了更多精力，且当前 PWA 应用可谓「成也轻量级，败也轻量级」，无论是从功能性还是运行性能上，当前的 PWA 仍然很难与大型原生应用相提并论。\n\n这种情况下，我们对于 PWA 这一相对仍然「新鲜」的应用种类，可以说已经有了更加清晰的定位：对于小开发者来讲，PWA 应用可能是其覆盖多平台乃至全平台的解决方案；对于大/中开发机构来讲，PWA 更多时候适合充当在原生应用覆盖不到的角落，作为一种备选方案来提供给用户。\n\n在 PWA 的优势与劣势非常明显地并存着的同时，PWA 在未来的发展中不会消失，但也会继续在「轻量级」这一擂台上继续存在下去，相信也会有更多开发者借助这一平台开发出更多轻量级但让人眼前一亮的 PWA 应用。",
			"added": 1632721871,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632721940,
			"title": "2022年Win11有哪些好用的UWP应用？",
			"body": "",
			"added": 1632721936,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632722028,
			"title": "内置WSL 2的Windows 10可以完全取代桌面版Linux吗？",
			"body": "65 个回答",
			"added": 1632722207,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632722651,
			"title": "Windows 11 “利好” Linux 发行版？",
			"body": "OMGUbuntu发表了一篇题为“Why Windows 11's Arrival is Good News for Ubuntu”的文章。文章指出，Windows 11 的硬件环境要求对于 Linux 发行版而言是一个好消息。其观点是相对于运行 Linux 的低门槛硬件环境，Windows 11 过高的要求会导致许多使用旧设备的用户无法升级，进而促使他们考虑使用可替代的 Linux 方案。\n\n先看一下升级到 Windows 11 所需要的最基本硬件环境。\n\n\n\n仅支持 64 位处理器、需支持 UEFI 安全启动、TPM 2.0。\n\nOMGUbuntu 的文章提到，上述这些要求基本上已经把 5、6 年前生产的设备拒绝在 Windows 11 的大门之外，哪怕是微软自家的电脑。因此文章作者认为这是 Linux 发行版的机会。他表示虽然可能会有许多人购买支持运行 Windows 11 的新设备，但仍有不少人会考虑更便宜的方案，例如切换到 Linux。\n\n毕竟过时的硬件不等于没用的硬件，文章作者举例称，他自己仍在使用于 2012 年生产的 MacBook Pro。虽然苹果公司已将此产品归类为过时设备（无法升级到 Big Sur），但它仍然可以运行，并且满足了他的工作需求。\n\n接着他又提到，像 Ubuntu 这样的 Linux 发行版能够让他能继续使用旧硬件，并运行最新的系统和软件，并且还会获得安全更新、错误修复等技术支持。这对于需要安全性但又不想强制升级硬件的人来说是一个很好的选择。\n\n用户可以使用电脑健康状况检查应用来查看当前的电脑是否满足运行 Windows 11 的要求。如果满足，则可在 Windows 11 推出时进行免费升级。",
			"added": 1632722645,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632723417,
			"title": "建议红旗下版基于ubuntu，这样可以和优麒麟的软件兼容了嘛，要不兼容veket也好呀",
			"body": "",
			"added": 1632723410,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632724040,
			"title": "FydeOS_for_PC_v13.0-SP1-stable.img.xz",
			"body": "版本号 13.0-SP1\n日期 2021-09-24\n\n架构 X86_64\n平台 release-R92-13982.B",
			"added": 1632724032,
			"parent_topic_uri": "1631265873_17eygZWLfGupqABZe2GxmHnq6WWaMGQtWi"
		},
		{
			"topic_id": 1632725292,
			"title": "有哪些很好的 Web App？",
			"body": "",
			"added": 1632725283,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632725723,
			"title": "WayDroid可以在 Linux 上运行 Android应用程序而不会降低速度",
			"body": "有很多方法可以在台式计算机上运行 Android 应用程序。BlueStacks 等桌面模拟器很流行，您可以在虚拟机中运行 Android x86（或双启动），或者您可以等待Windows 11 的 Android 应用程序兼容层。Anbox是另一种运行 Android 应用程序的解决方案，旨在支持 Linux 和基于 Linux 的智能手机，但它在低功耗设备上性能缓慢。现在还有另一个项目旨在将 Android 应用程序引入 Linux 设备，但Anbox没有常见的速度减慢和卡顿。\n\nWayDroid（通过Linux 智能手机和Tux 手机），以前称为 Anbox-Halium，是 Anbox 的重建版本，旨在使用比 Anbox 更多的主机设备的本机硬件——这意味着更快的性能。该项目的主要重点是在基于 Halium 的 Linux 手机上运行 Android 应用程序（Halium 在概念上与Android 的 GSI类似，但适用于标准 Linux），但它也可以在任何具有主线 Linux 内核的设备上运行。\n\nWayDroid 在 OnePlus 6 上运行在 PostmarketOS Linux 之上，因为 OnePlus 6 系列可以运行标准的 Linux 内核。当然，OnePlus 6 可以使用其原始操作系统运行 Android 应用程序，但 WayDroid 令人兴奋，因为它是完全开放的。你可以在你的手机上运行 Linux 发行版，加上 WayDroid 用于偶尔的 Android 应用程序，同时仍然可以完全控制你的设备（来自 Linux 社区的软件支持）。\n\n下面是 WayDroid 的另一个视频（当时它仍然被称为 Anbox 的重写），在带有 Ubuntu Touch 的 Moto Z2 Force 上运行。如果不是顶部的 Ubuntu 状态栏，很难知道 Android 应用程序没有在本机设备上运行。\n\nWayDroid 在 LXC 中渲染图形缓冲区，直接支持 Wayland（现在许多 Linux 发行版使用的显示服务器），这使它比原始 Anbox 项目更流畅。这种超级流畅的功能不仅适用于 Linux 手机——它也适用于桌面 Linux 发行版。下面是在桌面 Ubuntu 上运行的 WayDroid 的屏幕截图，具有与 Chrome OS 类似的窗口管理。\n很高兴看到 Linux 上的 Android 应用程序变得越来越好，特别是因为该功能将成为 Windows 11 中更重要的变化之一。这一变化可能最有利于 Linux 驱动的手机，因为许多重要的应用程序可能永远无法使用作为本机 Linux 软件，但它在某些情况下也linux可用于台式 PC。\n\n现在的主要问题是 WayDroid 中没有仿真层，因此 x86 设备（如大多数 PC）只能运行 x86 二进制文件，而 ARM64 设备（大多数手机和平板电脑）只能运行 ARM64 二进制文件。这类似于 Wine 兼容层的工作方式——尽管Wine 可用于 Android，但它无法在大多数 Android 设备上运行大多数 Windows 软件，因为手机通常是 ARM 并且大多数 Windows 软件仅适用于 x86。开发人员希望在未来通过使用Windows 11的Android 子系统中的组件来实现仿真。\n\n如果您想尝试一下 WayDroid，请查看项目的 GitHub 存储库以获取最新的安装说明。",
			"added": 1632725713,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632726678,
			"title": "软件隔离",
			"body": "万恶的流氓软件无孔不入，如何阻止?",
			"added": 1632726667,
			"parent_topic_uri": "1571187471_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9",
			"type": "group"
		},
		{
			"topic_id": 1632726791,
			"title": "文件系统权限",
			"body": "1 使用只读根文件系统\n2 所有软件都安装在虚拟机里",
			"added": 1632726779,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632726835,
			"title": "网络权限",
			"body": "电脑不联网",
			"added": 1632726822,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632726940,
			"title": "你同时运行几个软件？",
			"body": "操作系统\n输入法\n截图软件\n浏览器\n通讯软件",
			"added": 1632728548,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632727401,
			"title": "软件和数据隔离",
			"body": "软件工作站\n数据服务器",
			"added": 1632727386,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632727672,
			"title": "流氓软件类型",
			"body": "1 单机软件\n2 需要联网\n3 需要登陆账号",
			"added": 1632727656,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632728016,
			"title": "百度指数",
			"body": "关键词\t整体日均值\t移动日均值\t整体同比\t整体环比\t移动同比\t移动环比\n流氓软件\t650  \t546         \t25% \t       -19% \t         35% \t         -20%",
			"added": 1632727999,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632728357,
			"title": "给笔记本装上Windows Server 2019并改造为个人桌面系统初体验",
			"body": "",
			"added": 1632728339,
			"parent_topic_uri": "1571187408_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632728391,
			"title": "大家怎么看待最新的 windows LTSC 2019?",
			"body": "",
			"added": 1632728372,
			"parent_topic_uri": "1571187408_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632728848,
			"title": "开机还原软件",
			"body": "每次重新安装软件",
			"added": 1632728828,
			"parent_topic_uri": "1632726678_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7"
		},
		{
			"topic_id": 1632729174,
			"title": "在 Linux 下使用 unshare 和 pivot_root 搭建一个有限的沙盒应用",
			"body": "此文章最初是发布在开源中国的博客, 但不知由于何种原因, 导致发表的内容, 仅自己登\n\n录后可见, 所以为了让更多的人看见, 现在也发在知乎.\n\n\n\n\nunshare 和 nsenter 都是来自包 util-linux 的命令, 依靠它们可用于操控 Linux 的进\n\n程 namemspace, 以实现对特定系统对象或资源的隔离, 例如 /proc, uts, cgroup. 这样\n\n就可以实现 systemd-nspawn, systemd-chroot, bubblewrap, Docker/Podman 提供的大部\n\n分功能.\n\n\n\n不过由于自己最初只测试了 urxvt, 所以没有发现其中潜在的问题. 因为要跑的应用来自\n\n一个 OS 映像文件, 而不是来自宿主系统, 所以必须使用 nsenter 命令的 --root 参数.\n\n这个参数的核心功能用到 chroot syscal, 而这样做, 会导致在 chroot 环境的程序一旦\n\n用到 clone syscall, 会报 EPRM, 这会导致像 Chromium 和 GNOME Web(epiphany) 无\n\n法运行.\n\n\n\n发现问题后, 也尝试用 chroot 替换 nsenter, 以及先 chroot 然后在其内调用 unshare,\n\n但结果都一样. 由于 GNOME Web 运行需要用到 bubblewrap, 所以自己也用其进行测试,\n\n发现这个软件不受影响, 在通过 strace -c 以及阅读其源码后, 发现了 pivot_root,\n\n幸运的是, 在 util-linux 包有一个同名命令文件. 经过一系列尝试后, 只使用 unshare\n\n和 pivot_root 就可以达到 chroot 的效果, 同时成功运行 Chromium 和 GNOME Web.\n\n\n\n来自于 man 2 clone 的描述\n\nEPERM (since Linux 3.9)\n\nCLONE_NEWUSER was specified in flags and the caller is in a chroot\n\nenvironment (i.e., the caller's root directory does not match the root\n\ndirectory of the mount namespace in which it resides).\n\n\n\n验证方法\n\nChromium 在地址栏输入 chrome://sandbox. 可以看到其显示\n\n  Sandbox Status\n  Layer 1 Sandbox\tNamespace\n  PID namespaces\tYes\n  Network namespaces\tYes\n  Seccomp-BPF sandbox\tYes\n  Seccomp-BPF sandbox supports TSYNC\tYes\n  Ptrace Protection with Yama LSM (Broker)\tYes\n  Ptrace Protection with Yama LSM (Non-broker)\tNo\n  You are adequately sandboxed.\n\n\nGNOME Web\n\n从终端执行命令 epiphany, 输出的调试信息不会有 Crashed 字样, 同时浏览器可正常打\n\n开页面. 如果有问题, 选项卡页面只会显示一片空白.\n\n\n\n标题之所以提到的有限的沙盒应用, 是因为这个方案其用途是跑桌面应用. 而桌面应用由\n\n于各种各样的现实制约, 没法实现很严格的沙盒机制. 比如 Xorg 的自身缺陷, 没有用户\n\n访问资源的分离机制. 隔离 IPC 会导致明显的图形性能下降. 故本文介绍的方法, 是按照\n\n如下机制进行隔离:\n\n\n\n0. 隔离应用所依存的 OS 环境, 不使用宿主系统, 而是通过自制脚本搭建 OS 容器映像\n\n. 这样的好处是, 容器映像可通过 OS 对应的包管理器获得持续更新. 可控制宿主系\n\n统的包数量, 可以实现宿主系统是纯 64 位系统, 而容器内运行 32 位应用, 例如\n\nWINE.\n\n要获取自制脚本, 以及搭建 OS 容器方法, 请参见在开源中国的博客文章.\n\n1. UID/GID 是特定用户. 不与登录到桌面环境的用户一样, 也更不可能是 root 用户.\n\n自己之所做的 systemd-chroot, 就是依靠此来限制容器应用的宿主系统其他进程的\n\n探知.\n\n2. 隔离 /proc, 只能看到同一个 /proc 下的进程.\n\n3. 应用和数据分离. 程序文件所属的目录, 大部分被设置为 ro, 仅个别以及用户目录\n\n被设置为 rw.\n\n\n\n4. 隔离不同应用的用户目录. 出去潜在的安全考虑, 没有将应用所属的用户目录放在\n\n/home 下.\n\n\n\n由于本人时间有限, 所以目前的文章, 仅作为知识分享, 予以发布. 提供的内容, 并没有\n\n细细描述, 需要有一定基础. 文章也没有什么排版.\n\n如需转载, 务必注明出处.\n\n风险自担\n\n\n\n正文\n\n\n\n宿主系统\n\nUbuntu 18.04 + hwe 5.4 内核\n\n需要说明的是, 18.04 还有一个默认内核 4.15, 由 Canonical 反向移植和维护. 这个内\n\n核是否运行正常, 尚未测试, 不过预估没有问题, 因为之前用 systemd-nspawn 和\n\nsystemd-chroot 是正常的.\n\n这里提供的脚本还是属于概念验证.\n\n\n\n容器应用\n\n\n\n容器应用所属 OS 为 Arch Linux. 本身是用于运行 systemd-chroot 项目, 在此基础上,\n\n进行了微小的调整, 新建目录和放置脚本. 就使得同一个 OS 映像文件, 为两个项目服务.\n\n\n\n运行容器应用的用户\n\n这里假定, 用户名为 egret, 其 UID 和 GID 皆为 2015.\n\n大致说一下, 需要注意的地方. 同时在宿主系统和容器系统都创建该用户. 如果用户需要\n\n使用诸如 Intel 核显的设备文件 /dev/dri/{card0,renderD128}, 那么有三种方法.\n\n\n\n第一种是只在宿主系统, 将 egret 添加到设备文件所属的组(gpasswd). 但这种方法,\n\n由于未知原因, 不适用于 unshare 和 nsenter 方案.\n\n注: 在变更为 pivot_root 方案, 尚未测试是否有所改变.\n\n第二种, 使用 setfacl 为对应的设备文件添加 egret 的 ACL rw 权限. 这种方法的\n\n适用性最好, 但如果存在一种机制, 强制定时重置 /dev 下的 ACL 权限, 则此方法会\n\n带来问题.\n\n第三种, 如果设备文件所属的组不存在于容器内系统, 则使用 groupadd 添加该组,\n\n但不需要将 egret 也添加到这些组里. 不过这种方法存在潜在问题, 如果对应的\n\nGID 已存在于容器内系统, 但作用域不同, 比如是访问某种高权限资源, 则这个方法\n\n可能会导致容器内的用户, 发生权限提升的可能, 即便该提升是意外的.\n\n\n\n运行在宿主系统下的脚本 - control-sandbox-app\n\n#!/bin/bash\n\nset -o nounset\nexport IFS=$'\\n'\n\n[ ${#@} -ne 2 ] && exit 1\n\ndeclare -r  USER_NAME=$1\ndeclare -r  COMM=$2\ndeclare -r  D_IMG_D='/entry/arch/apps/rw'\ndeclare -r  J_IMG_D='/entry/arch/'${COMM}'/ro'\ndeclare -r  PUT_OLD='host'\ndeclare -r  D_USER_D='/data/arch/'${COMM}'/user'\ndeclare -r  J_USER_D='/entry/arch/'${COMM}'/user'\ndeclare -r  D_TMP_D='/data/arch/'${COMM}'/tmp'\ndeclare -r  J_TMP_D=${J_IMG_D}'/tmp'\ndeclare -r  D_X11_D='.X11-unix'\ndeclare -r  D_RUN_D='/run/arch.'${COMM}\ndeclare -r  D_PROC_D='/data/arch/'${COMM}'/sandbox/proc.d'\ndeclare -r  D_DEV_D='/data/arch/'${COMM}'/sandbox/dev.d'\ndeclare -r  J_RUN_D=${J_IMG_D}'/run'\ndeclare -r  HOST_NAME='arch-'${COMM}\ndeclare -r  J_HOME_D=${J_IMG_D}'/home/'${USER_NAME}\ndeclare -r  FIFO='/sandbox/arch-'${COMM}\ndeclare -r  DISPLAY=':0'\n\nfunction prepare()\n{\n  findmnt ${J_IMG_D} &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${D_IMG_D} ${J_IMG_D} --options=bind,private,ro\n\n  findmnt ${J_IMG_D}'/proc' &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${D_PROC_D} ${J_IMG_D}'/proc' --options=bind,private\n\n  findmnt ${J_IMG_D}'/dev' &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${D_DEV_D} ${J_IMG_D}'/dev' --options=bind,private\n\n  findmnt ${J_USER_D} &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${D_USER_D} ${J_USER_D} --options=bind,private\n\n  findmnt ${J_HOME_D} &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${J_USER_D} ${J_HOME_D} --options=bind,private \n\n  findmnt ${J_TMP_D} &> /nul\n  if [ $? -ne 0 ]; then\n    mount ${D_TMP_D} ${J_TMP_D} --options=bind,private\n    mkdir ${J_TMP_D}'/'${D_X11_D}\n    mount '/tmp/'${D_X11_D} ${J_TMP_D}'/'${D_X11_D} --options=bind,private\n  fi\n\n  if [ ! -d ${D_RUN_D} ]; then\n    mkdir --parent ${D_RUN_D}\n    chown ${USER_NAME}:${USER_NAME} ${D_RUN_D}\n  fi\n\n  findmnt ${J_RUN_D} &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${D_RUN_D} ${J_RUN_D} --options=bind,private\n  \n  findmnt ${FIFO} &> /nul\n  [ $? -ne 0 ] && \\\n    mount ${FIFO} ${J_IMG_D}${FIFO} --options=bind\n}\n\nfunction fin()\n{\n  umount ${J_IMG_D}${FIFO}\n  umount ${J_RUN_D}\n  umount ${J_TMP_D}'/'${D_X11_D}\n  umount ${J_TMP_D}\n  umount ${J_USER_D}\n  umount ${J_HOME_D}\n  umount ${J_IMG_D}'/proc'\n  umount ${J_IMG_D}'/dev'\n  umount ${J_IMG_D}\n}\n\ntrap fin EXIT\n\nfunction main()\n{\n  prepare\n\n  [ ! -e ${J_IMG_D}'/etc/os-release' ] && return 1\n\n  unshare --mount --uts --fork --pid --mount-proc \\\n    /usr/local/bin/ubuntu-pc.bin/enter-app ${J_IMG_D} ${USER_NAME} ${COMM}\n      \n  return 0\n}\n\nmain $1 $2\n\n\n/nul 是 /dev/null 的符号链接.\n\nPUT_OLD 变量对应的是位于容器 OS 根目录的空白子目录. 其用于临时存放宿主系统原根\n\n目录.\n\nD_X11_D 是用来重绑定宿主系统的 /tmp/.X11-unix . 当然可以绑定 socket 文件.\n\n本来这是不需要的, 但是在测试中发现, bubblewrap 会移除来自于父进程的环境变量\n\nDISPLAY, 导致 GNOME Web 无法运行.\n\n该脚本运行机制是, 启动 main 函数后, 先通过函数 prepare, 依靠 mount 命令的 bind\n\n参数, 以 ro 方式构建作为容器应用的根目录, 同时 private 参数, 使得该挂载不影响到\n\n宿主系统. 还有把用于在宿主系统向容器内应用传递指令的管道文件连接到指定位置.\n\n最后通过 unshare 命令来启动一个从宿主系统过度到容器应用的脚本.\n\n当 main 结束运行后, 会先自动结束所有自此脚本运行的进程. 然后通过 trap 的设置,\n\n自动调用 fin 函数, umount 之前 bind 的目录和文件.\n\n由于目前这个脚本主要是用来观察运行效果, 所以 prepare 和 fin 函数内, 是直接对需\n\n要进行的操作逐一罗列, 而没有采取从配置文件读取的方式.\n\n\n\n运行在宿主系统下的脚本 - enter-app\n\n#!/bin/bash\n\nset -o nounset\nexport IFS=$'\\n'\n\nfunction main()\n{\n  local -r J_IMG_D=$1\n  local -r PUT_OLD=host\n  local -r USER_NAME=$2\n  local -r COMM=$3\n\n  cd ${J_IMG_D}\n  pivot_root . ${PUT_OLD}\n  hostname arch-${COMM}\n  /usr/local/bin/arch-init\n  /usr/local/bin/arch-daemon ${USER_NAME} ${COMM}\n}\n\nmain $1 $2 $3\n该脚本实现 chroot 功能, 设置适当的容器名称, 构建属于容器的 /proc, /sys, /run 等\n\nVFS 目录, 以及启动位于容器内的脚本.\n\n\n\n容器内的脚本 - arch-init\n\n#!/bin/bash\n\nset -o nounset\nexport IFS=$'\\n'\n\nfindmnt /proc &> /nul\n[ $? -ne 0 ] && \\\n  mount proc /proc --types proc --options=rw,nosuid,nodev,noexec,relatime\n\nfindmnt /sys &> /nul\n[ $? -ne 0 ] && \\\n  mount sys /sys --types sysfs --options=ro,nosuid,nodev,noexec,relatime\n\nfindmnt /dev/pts &> /nul\nif [ $? -ne 0 ]; then\n  mount dev /dev --types devtmpfs --options=rw,nosuid,relatime,size=1003812k,nr_inodes=250953,mode=755,inode64\n  mkdir --parent /dev/pts\n  mount devpts /dev/pts --types devpts --options=rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=000\nfi\n\nfindmnt /dev/shm &> /nul\nif [ $? -ne 0 ]; then\n  mkdir --parent /dev/shm\n  mount tmpfs /dev/shm --types tmpfs --options=rw,nosuid,nodev\nfi\n\nfindmnt /proc/sys &> /nul\n[ $? -ne 0 ] && \\\n  mount /proc/sys /proc/sys --options=bind,private,ro\n\nfindmnt /proc/sysrq-trigger &> /nul\n[ $? -ne 0 ] && \\\n  mount /proc/sysrq-trigger /proc/sysrq-trigger --options=bind,private,ro\n\nfindmnt /sys/block &> /nul\n[ $? -ne 0 ] && \\\n\tmount /empty /sys/block --options=bind,private,ro \n\nmount /empty /host --options=bind,private,ro\n\n\n这个脚本如前所说, 就是为容器内的应用准备所需的 /proc, /dev, /sys 这些目录. 从\n\n自己的观察看, 虽然像 /dev 目录, 可以通过 mknod, chown 这些命令来进行构建, 但部\n\n分设备文件, 是不能被程序识别的. 比如 /dev/ptmx, urxvt 会报找不到文件. 同时对于\n\n/sys 的某些目录, 自己参考 systemd-nspawn 的说明, 对某些目录限制其写操作. 把目录\n\n/sys/block 目录被链接到一个空目录. 是不希望容器内的程序看到宿主系统的磁盘.\n\n这也保护临时存放宿主系统根目录的 /host, 必须对这个进行限制.\n\n\n\n容器内的脚本 - arch-daemon\n\n#!/bin/bash\n\nset -o nounset\nexport IFS=$'\\n'\nset -x\n\n[ ${#@} -ne 2 ] && exit 1\n\ndeclare -r  USER_NAME=$1\ndeclare -r  COMM=$2\ndeclare -r  FIFO='/sandbox/arch-'${COMM}\ndeclare -ri MAX=16\ndeclare -r  EXIT='exit'\ndeclare -r  DISPLAY=':0'\n\nfunction main()\n{\n\t[[ -e ${FIFO} && ! -p ${FIFO} ]] && return 1\n\n\tlocal value=''\n\n\twhile [ 0 ];\n\tdo\n\t\tvalue=$(head --bytes=16 ${FIFO})\t\n\t\tif [ ${value} == ${COMM} ]; then\n\t\t\t\tsu - ${USER_NAME} --command \"/usr/local/bin/start-${COMM}\" &\n\t\telif [ ${value} == ${EXIT} ]; then \n\t\t\tbreak\n\t\tfi\n\tdone\n\n\treturn 0\n}\n\nif [ ${#@} -ne 2 ]; then\n\texit 1\nelse\n\tmain $1 $2\n\texit 0\nfi\n\n这个脚本, 通过轮询读取管道文件, 来接收指令, 以运行程序, 或结束脚本运行.\n\n先说说管道文件. 这个管道文件, 需要同时位于宿主系统和容器内, 两个位置可以不一致.\n\n其访问权限, 除了 root 可以访问外, 通过 setfacl 命令设置为, 仅仅宿主系统的指定用\n\n户可以访问. 容器内运行程序的用户是不能访问的.\n\n由于自己考虑是一个实例, 只启动一个应用, 所以管道文件是每个应用有自己对应的文件.\n\n\n\n读取指令使用 head 命令的 byte 参数, 来限制读取长度, 不接受过长的字符串. 同时又\n\n由于当管道文件没有内容时, head 命令会自动挂起. 这样巧妙避免了轮询过程对 CPU 的\n\n占用. 当接收到的指令且符合预期, 则通过 su 命令, 以指用户身份运行特定程序, 同时\n\n由于程序运行被设置为后台运行, 则该程序自己没有限制的话, 可以运行多个实例.\n\n\n\n调用 control-sandbox-app 的 systemd service\n\n\n\n# /lib/systemd/system/control-sandbox-app.service\n\n[Unit]\nDescription=Arch: Example\nRequires=launch-arch-apps.service\nAfter=launch-arch-apps.service\n\n[Service]\nType=simple\nKillMode=control-group\n\n# SystemCallFilter=~umount2 \nSystemCallFilter=~ptrace\n\nProtectSystem=strict\n\nNoNewPrivileges=yes\nProtectKernelTunables=yes\nProtectKernelModules=yes\n\nReadWritePaths=/entry/arch/urxvt/user\nReadWritePaths=/entry/arch/urxvt/tmp\nReadWritePaths=/run/arch.urxvt\n\nRuntimeMaxSec=infinity\nExecStart=/usr/local/bin/ubuntu-pc.bin/control-sandbox-app egret urxvt\n\n\n这个服务简单展示了通过 systemd 管理脚本的方式, 同时该服务也对特定 syscall 进行\n\n了限制, 例如 ptrace. 如果在其内执行诸如 strace id, 会显示\n\nBad system call (core dumped)\n\n\n\n这里多说一句, 之前在 systemd-chroot 内希望启动 GNOME Web(epiphany), 但即便确认\n\n了 kernel.unprivileged_userns_clone = 1 的前提下, epiphany 依然无法正常运行,\n\n可以看到浏览器界面, 但输入网址, 页面一片空白. 经过排查, 发现是因为将 umount2\n\n过滤掉, 从而导致 epiphany 没法运行.\n\n\n\n运行容器应用\n\n\n\n自己目前只测试了 urxvt. 运行方式如下\n\n以宿主系统非 root 账户, 执行命令\n\necho urxvt > /sandbox/arch-urxvt\n\n\n\n可以看到, 每执行完成一次命令, urxvt 就启动一个. 这些 urxvt 都共享同一个 /proc,\n\n可以在其中一个 urxvt 里启动 top, 然后在其他 urxvt 都可以看到这个进程, 也可以用\n\nkill 结束其运行. 同时也可以从 top 看到, 里面运行的进程与宿主系统的截然不同. 此\n\n外, 执行 lsblk 是看不到, 机器所拥有的磁盘列表.\n\n\n\n可通过如下方式, 一次运行 100 个 urxvt 实例.\n\nfor i in {0..99}; do echo urxvt > /sandbox/arch-urxvt; sleep .1; done\n\n\n\n在使用 pivot_root 实现 chroot 后, Chromium 和 GNOME Web 运行都没有问题了.\n\n不过需要说明的是 Chromium 的 GPU 硬件加速(图形和视频解码)尚未测试, 但执行\n\ncat /dev/dri/card0\n\ncat /dev/dri/renderD128\n\n是没有问题的.\n\n\n\n执行\n\necho exit > /sandbox/arch-urxvt\n\n可使得该服务直接结束, 而不需要通过 systemctl 来进行. 即便是在终端运行脚本\n\ncontrol-sandbox-app, 用上述方式, 也可以快速结束 100 个 urxvt 实例.\n\n\n\n存在的缺陷和不足\n\n缺少对 syscall 的过滤, 虽然程序是以普通用户方式运行.\n\n没有 cgroup 支持, 就是说没有限制应用对系统资源的调用, 比如 CPU 使用情\n\n况. 不过 cgroup, 可以通过 mkdir 在 /sys/fs/cgroup 创建相关目录, 以生成对应的\n\n接口文件.\n\n缺少 SELinux/AppArmor 支持.\n\n由于需要保障 GUI 程序的运行性能, 或者说能够使用 X11 的一些扩展, 所以没有对\n\nIPC 进行隔离.\n\n出于访问网络的便捷性, 网络部分也缺少隔离.\n\n缺少针对多个桌面用户切换/运行的机制. 例如登录到桌面的用户 A 通过此方法运行一\n\n个应用后, 如果重新以用户 B 身份登录, 并也想运行应用, 则缺少对应的机制.",
			"added": 1632737463,
			"parent_topic_uri": "1571187408_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632730115,
			"title": "如果 Linux 像 Windows 这样流行了，会有那么多 “Linux 流氓软件/病毒” 吗？",
			"body": "",
			"added": 1632730093,
			"parent_topic_uri": "1571187408_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632737394,
			"title": "虚假繁荣",
			"body": "虚假繁荣是指由于人为地制造虚假的社会购买力而出现的表面经济繁荣。一般是指在进入资本主义工业生产高涨阶段后，市场扩大，存货增加，出现虚假的社会需求，进而使信用不断扩大，社会生产盲目扩大，物价不断上涨，生产迅速扩张，失业人数减少，出现表面上经济繁荣的景象。",
			"added": 1632737371,
			"parent_topic_uri": "1571187408_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1632737591,
			"title": "linux基础",
			"body": "挂载分区需要root权限\nlinux软件都是禁用自动更新的",
			"added": 1632740219,
			"parent_topic_uri": "1631265356_17eygZWLfGupqABZe2GxmHnq6WWaMGQtWi"
		},
		{
			"topic_id": 1632737993,
			"title": "高阶技巧",
			"body": "ccache\ndistcc\ndockerX11\n清真\n\nupstream 上游\npatch\ndiff\nchecksum\nCI/CD \nDevOps\nQA\nGitHub Actions 自动化\nworkflow",
			"added": 1632739593,
			"parent_topic_uri": "1631265356_17eygZWLfGupqABZe2GxmHnq6WWaMGQtWi"
		},
		{
			"topic_id": 1632738438,
			"title": "玄幻：高人，求求你快摊牌吧！ 作者：辉煌耀世",
			"body": "江尘穿越玄幻世界，觉醒‘神级书店’系统。\n\n书店的书会自动更新，而他就是要想办法把书租出去。\n\n可他不知道，从书店出去的书，每本都换了模样。\n\n《如何调养身体》变成《如何觉醒不死道凰体》\n\n《基础击剑术》变成《剑道之心》\n\n《养生大全》变成《活出第二世的方法》\n\n而江尘，也被所有人脑补为不出世的高人。\n\n某天，总以为自己是普通人的他，想拜师完成修仙梦时。\n\n众强者纷纷大喊：高人，别装了，求求你快摊牌吧！",
			"added": 1632738412,
			"parent_topic_uri": "1632362387_1AGPacovYHwLJEUVrzTuueVfVnDQPGjEYQ"
		},
		{
			"topic_id": 1632740437,
			"title": "DW 周刊",
			"body": "",
			"added": 1632740410,
			"parent_topic_uri": "1631265873_17eygZWLfGupqABZe2GxmHnq6WWaMGQtWi"
		}
	],
	"topic_vote": {},
	"next_comment_id": 11,
	"comment": {
		"1632720381_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7": [
			{
				"comment_id": 1,
				"body": "群聊人数超过100人，只可通过\n群成员邀请进群",
				"added": 1632720479
			},
			{
				"comment_id": 2,
				"body": "钉钉有没有可能成为仅次于微信QQ的社交软件？",
				"added": 1632721020
			},
			{
				"comment_id": 3,
				"body": "字节跳动能否通过抖音发展类似微信QQ的功能，然后取代腾讯？\n抖音那么火，是否可以把功能完善地像微信那样，是否可以蚕食腾讯的市场，最后吞并腾讯，想想很激动啊！虽然我知道实现起来不现实",
				"added": 1632721118
			}
		],
		"1632730115_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7": [
			{
				"comment_id": 4,
				"body": "我想请问下linux对.ssh目录下的私钥文件有没有什么防护措施。如果我装了一个闭源软件，但是却不太信任提供商，私钥有没有被窃取的风险。",
				"added": 1632730164
			}
		],
		"1631776143_125vWBHepSUHXMGnwoDtiteTo9AfNTCUXc": [
			{
				"comment_id": 5,
				"body": "\nYarn 是一个由 Facebook 贡献的 Javascript 包管理器。\n\n特性：\n离线模式：如果您之前下载了软件包，则可以在没有任何互联网连接的情况下安装。\n\n确定性：无论安装顺序如何，相同的依赖关系将以相同的方式安装在计算机上。\n\n网络性能：Yarn 有效地将请求排序，避免请求堆积，以最大限度地提高网络利用率。\n\n多个注册表：无论从 npm 或 Bower 安装任何包，能保持包工作流程相同。\n\n网络恢复：单个请求失败不会导致安装失败。 请求在失败时会自动重试。\n\n平面模式：将不兼容版本的依赖项解析为单个版本，以避免创建重复项。",
				"added": 1632738687
			},
			{
				"comment_id": 6,
				"body": "webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles，它们均为静态资源，用于展示你的内容。",
				"added": 1632738675
			},
			{
				"comment_id": 7,
				"body": "Bazel是一个类似于Make，Maven和Gradle的开源构建和测试工具。Bazel支持多种语言混编的项目并且可以根据不同的平台输出不同的构建结果。\n\n优势：\n\n加快构建和测试速度：Bazel只重建必要的东西，借助缓存，优化依赖关系分析和并行执行，可以获得快速的和增量的构建。\n支持多种语言：支持Java, C++, Android, iOS, Go和各种其他语言，可以运行在Windows，macOS和Linux上。\n可扩展：可以扩展Bazel以支持您选择的语言",
				"added": 1632738833
			}
		],
		"1631265524_17eygZWLfGupqABZe2GxmHnq6WWaMGQtWi": [
			{
				"comment_id": 8,
				"body": "Anki 是一个让记忆变得容易的程序。因为它比传统的学习方法效率高得多，你可以大大减少学习时间，或者大大增加学习量。\n\n任何需要记住日常生活中事物的人都可以从 Anki 中受益。由于它与内容无关并支持图像、音频、视频和科学标记（通过 LaTeX），因此可能性是无限的。\n例如：\n\n学习语言\n为医学和法律考试而学习\n记住人们的名字和面孔\n复习地理\n掌握长诗\n甚至练习吉他和弦！\n特征\n同步\n使用免费的 AnkiWeb 同步服务让您的卡片在多个设备之间保持同步。\n\n灵活性\n从卡片布局到复习时间，Anki 有丰富的选项供您自定义。\n\n富媒体\n在您的卡片上嵌入音频剪辑、图像、视频和科学标记，并对其显示方式进行精确控制。\n\n优化的\nAnki 可以毫无问题地处理 100,000 多张卡片。\n\n完全可扩展\n有大量可用的附加组件。\n\n开源\n因为代码和存储格式是开放的，所以您的重要数据是安全的。",
				"added": 1632739021
			},
			{
				"comment_id": 9,
				"body": "qBittorrent(Enhanced Edition)是一款开源轻量级BitTorrent客户端，自动过滤器基于UPnP/NAT-PMP端口映射，采用Vuze兼容协议加密，代理链接，电骡或者Peerguardian兼容IP过滤，激流排队和优先次序，支持DHT网络及RSS订阅，使用的Ajax技术，下载BT种子同时可以调用第三方播放器边下边播，此外具有强大的资源搜索引擎插件。",
				"added": 1632739945
			}
		],
		"1632740437_16eFRRQvAefbHzx4FffXFtreEWs4KsW4d7": [
			{
				"comment_id": 10,
				"body": "DistroWatch Weekly，第 936 期，2021 年 9 月 27 日\n艾瑞克斯 0.2.2\n该Airyx项目是另外一个它这几天做一些大胆的尝试。使用FreeBSD和helloSystem作为其基础，Airyx 试图将 macOS 风格的桌面带入在 x86_64 系统上运行的 FreeBSD 基础。据报道，该项目将尝试使用现有的开源软件来实现其大部分目标，并编写新代码来填补空白。\n\nAiryx 0.2.2 的下载量为 1.3GB。从实时媒体启动需要主机至少有 4GB 的可用 RAM，如果找不到所需的内存，将拒绝启动。这似乎是一项要求，因为活动文件系统已加载到 RAM 中，并且这是与 helloSystem 共享的限制。\n\n然后操作系统启动并向我们显示一个欢迎窗口，上面有多种语言的“欢迎”。一首曲子在后台循环播放，直到我们通过欢迎窗口的屏幕，这基本上只是告诉我们 Airyx 正在尝试完成什么。\n\n桌面由 Openbox 提供支持，并且看起来很像 macOS 桌面。屏幕顶部有一个面板，显示全局菜单栏和系统托盘。显示器底部的底座提供常用应用程序和设置面板的启动器。\n\n起初我找不到系统安装程序，因为桌面上没有任何启动程序。我最终在 Utilities 面板中找到了安装程序，可以通过 Dock 上的图标打开它。安装程序称为 Install FreeBSD。\n\n安装\n\nAiryx 使用图形安装程序，首先要求我们选择要擦除的磁盘。然后我们可以为自己编造一个用户名和密码。安装程序提供自动检测我们的时区（它成功做到了）。系统会询问我们是否希望启用 OpenSSH 服务，然后擦除我们的硬盘驱动器并将文件复制到磁盘。安装程序运行时会显示进度条，但默认情况下不显示任何详细信息。如果我们想更好地了解正在发生的事情，我们可以单击一个按钮来显示安装程序的日志。该过程完成后，安装程序会建议重新启动计算机。\n\n早期印象\n\n当 Airyx 首次启动时，我们会自动登录到桌面环境。据我所知，没有禁用自动登录的选项，至少不是通过图形环境。然后我们会看到与之前相同的欢迎窗口，这向我们保证了系统的设计是私密的和简单的。桌面上有一个图标，可打开文件管理器以显示根文件系统。似乎文件系统已被调整为仅显示经典的 macOS 文件夹名称，而不是更神秘的 FreeBSD 目录名称，如/usr和/etc。每次我们登录时，桌面角落都会打开一个小窗口，并以多种语言显示“欢迎”一词。它的黄色背景使它看起来像一张便签。\n\n欢迎辞\nAiryx 0.2.2 -- 欢迎说明\n（完整图像大小：357kB，分辨率：1920x1080 像素）\n\n统一应用程序菜单的一个不幸缺点是它不响应常用快捷键。例如，如果我按 Alt+F，文件菜单不会打开。当来自其他开源桌面环境时，这会使 Airyx 上的导航菜单不和谐。\n\n硬件\n\n我开始在操作系统运行良好的 VirtualBox 环境中使用 Airyx。桌面响应迅速，系统启动迅速，一切都感觉又快又轻。虽然 Airyx 没有自动调整桌面大小以匹配 VirtualBox 窗口的尺寸，但系统在虚拟机中的其他方面表现良好。\n\n当切换到在我的笔记本电脑上尝试 Airyx 时，性能再次良好。音频开箱即用，一切顺利。然而，虽然 Airyx 检测到我有无线网卡，但它无法使用我的网卡。尽管有六个可用，但尝试扫描本地网络并没有检测到任何网络。这意味着，在我的笔记本电脑上运行 Airyx 时，我使用的是独立计算机。\n\n操作系统的内存相对较少，使用大约 400MB 的活动内存和 310MB 的有线。这足以运行桌面和将 ZFS 作为根文件系统运行。全新安装消耗了 2GB 的磁盘空间。\n\n包含的应用程序\n\n虽然 Airyx 附带一个模仿 macOS 的桌面，但包含的软件主要由标准的开源应用程序组成。Falkon Web 浏览器与 FreeCAD 一起为我们安装。Blender 和 GNU 图像处理程序也包括在内。Krita 和 Scribus 应用程序与 QTerminal 虚拟终端一样提供。Qt Creator 软件与 Clang 编译器一起可供开发人员使用。\n\n包括 Audacity 音频编辑器、LMMS 播放器和mpv视频播放器。多媒体编解码器可用，但mpv无法运行。尝试运行mpv导致软件立即失败，报告它缺少依赖项。我安装了 VLC 并且它可以播放视频，但音频有时会失败，控制台会打印一条错误消息，说“oss 音频输出错误”。\n\n应用程序菜单中有一个 LibreOffice 启动器，但未安装。单击 LibreOffice 启动器会打开一个窗口，提供下载和安装生产力套件的服务。然后从 FreeBSD 存储库下载 LibreOffice。\n\n下载 LibreOffice\nAiryx 0.2.2 -- 下载 LibreOffice\n（完整图像大小：285kB，分辨率：1920x1080 像素）\n\nAiryx 中包含用于管理引导环境的实用程序（通过 ZFS 快照提供）。操作系统包括可用命令的手册页，并默认使用zsh命令行 shell。操作系统基于 FreeBSD 12.2，有时自称为 FreeBSD；其他时候它也标识为 helloSystem，因此您可以清楚地看到 Airyx 中最近几代的家谱。\n\n除了我在媒体播放器上遇到的问题之外，Airyx 附带的软件运行良好。该系统预装的应用程序和配置工具相对较少，但功能强大的应用程序和配置工具往往按预期工作。少数例外之一是用户帐户经理。我们可以创建新帐户，但不能编辑现有帐户（更改密码或自动登录选项）。单击“删除”按钮尝试删除现有帐户失败，并显示此选项尚未实施的警告。\n\n无法删除用户帐户\nAiryx 0.2.2 -- 无法删除用户帐户\n（完整图像大小：357kB，分辨率：1920x1080 像素）\n\n软件管理\n\nAiryx 中似乎没有任何软件管理的图形前端。的PKG命令行包管理器被包括，但它是相对于该版本的有些残废PKG被FreeBSD使用。\n\n尝试获取软件包更新\nAiryx 0.2.2 -- 尝试获取包更新\n（完整图像大小：320kB，分辨率：1920x1080 像素）\n\n我对pkg做的第一件事是尝试更新包管理器的存储库信息。执行“pkg update”会产生一个错误，提示“helloSystem 尚不支持 pkg update”。尝试使用“pkg upgrade”升级本地软件包时会出现同样的错误。因此，起初，Airyx 的pkg版本似乎无法获取存储库信息。但是，运行“pkg install”并提供软件包名称确实有效。包管理器下载存储库信息，检查我请求的软件的最新版本并安装它。\n\n这就是说Airyx上的pkg可以安装新软件，但是不能升级，\n\n结论\n\n我没有花很多时间在 Airyx 上，只有几天。这主要是由于操作系统无法与我的无线网卡配合使用，这是大多数 BSD 版本都会遇到的问题。然而，虽然我的经历很简短，但我会说我看到了 Airyx（以及扩展 helloSystem）的吸引力。对于喜欢 macOS 风格桌面的人来说，这种体验应该让人有宾至如归的感觉。顶部面板上的统一应用程序菜单、图标、实用程序和设置面板以及整体主题都与 macOS 具有很强的相似性。\n\n系统安装程序非常简单，只需点击几下鼠标即可导航，因此进入门槛相对较低，假设您的计算机至少有 4GB 的内存用于实时媒体。操作系统，即使运行 ZFS，内存也很轻，并包含一些标准的开源工具。\n\n我遇到了两个弱点。第一个是硬件支持，这通常是我在使用 BSD 版本时遇到的问题。尤其容易缺少无线和暂停支持。另一个问题是缺乏功能齐全的包管理器。我不确定为什么pkg在 Airyx 中受到阻碍，但它仍然刷新存储库信息并从 FreeBSD 安装软件包这一事实向我表明该限制是不必要的。",
				"added": 1632740457
			}
		]
	},
	"comment_vote": {}
}