{
	"next_topic_id": 41,
	"topic": [
		{
			"topic_id": 1581556743,
			"title": "有哪些神奇的电脑软件?",
			"body": "",
			"added": 1581556742,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581556814,
			"title": "有哪些神奇的编程语言？",
			"body": "",
			"added": 1581556812,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581557781,
			"title": "精通 linux ——— 从 LFS 开始",
			"body": "",
			"added": 1581557778,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581557837,
			"title": "有没有 LFS搭建过程？",
			"body": "用的什么宿主机，遇到了什么问题，是怎么解决的",
			"added": 1581557833,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581562330,
			"title": "怎么假装自己是一个黑客？",
			"body": "用到的软件尽可能是真实需要的，网上那些不符合要求",
			"added": 1581563251,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581579917,
			"title": "[ Win ] 它可能是史上效率最高的 [应用启动器]",
			"body": "**引入**\n\n自己用过很多启动器，比如 [ Wox ] [ Listary ] [ Cortana ] [ Windows 开始菜单] 和 [ Windows 任务栏] 等等，它们都各有各的优点，不过它们却总是 不能带给我 [直截了当、指哪打哪] 的感觉。\n\nWox、Listary 以及 Cortana 这类 搜索型启动器有个问题是，它们在启动常用项目时所需要的步骤太多。举个例子，如果我需要用它们启动 Google Chrome，那么我就必须先按下它们的快捷键拉起它们的输入框，比如 [ Alt + 空格 ] [ Windows 徽标键 ] [双击 Ctrl 键 ] 等等，然后我需要键入字母 [ g ] 以让它们搜索到 Google Chrome，最后我得再按个回车键以确认启动 Google Chrome，比用 [ Win + 数字键 ] 启动任务栏上的应用程序慢不少。\n\n然而用 [ Win + 数字键 ] 来启动应用程序的问题更大。 它不能打开任务栏上的第十一个应用程序，而且还不能开我最常去的文件夹以及控制面板项。最要命的是它会让任务栏变得非常杂乱。\n\n后来我又用传统的快捷键启动项目。 虽然我因此我找到了 [ 直截了当、指哪打哪 ] 的感觉。可是有个很大的问题是，快捷键前缀不够用且容易与现有快捷键冲突 。举个例子，我该怎么样给 V2EX、VS、VS Code、VMware、VirusTotal 这些都以 V 打头的项目分配快捷键呢？\n\n于是我又脑洞大开，把 [ F1 ~ F12 ] 当成快捷键前缀，这样我 哪怕我有十二个以 V 打头的常用应用程序，我都可以给它们分配一个独一无二的、不与任何现有快捷键冲突 的快捷键。能帮我做到这件事的只有 AutoHotkey。\n\n后来我又发现，用 AutoHotkey 脚本管理快捷键太麻烦了，每次都要编辑并重启脚本，还有很多启动项没法用文件路径表示出来，比如 UWP 应用程序和“电源计划”控制面板项等等。\n\n在上述客观问题的逼迫下，我创造了 Power Keys 这款超级简单易用的启动器，来帮我轻松管理以 F1 ~ F12 开头的快捷键。\n\n**介绍 Power Keys **\n\nPower Keys 能助您为任何需要极速启动的项目 [ 带启动参数的 Win 32 应用程序、UWP 应用程序、网站、文件、文件夹、命令行以及控制面板项均受支持 ] 分配格式为 [ F1 ~ F12 + 字母或数字 ] 的快捷键，可能是史上效率最高、应用范围最广的启动器。\n\n\n**如何配置快捷键？**\n\n非常简单，仅需将需要极速启动的项目的快捷方式丢进名为 [ F1 ] [ F2 ] …… 或者 [ F12 ] 的相应文件夹中，并将快捷方式重命名为相应的字母或者数字即可。\n\n按 [ F1 + 回车键 ] 即可打开 [ F1 ] 文件夹，按 [ F2 + 回车键 ] 即可打开 [ F2 ] 文件夹，以此类推。\n\n**示例**\n\n按下 [ F7 + 回车键 ] ，Power Keys 就会通过文件资源管理器展示以 [ F7 ] 开头的快捷键所对应的项目。\n\n您可能已经猜到了，在任何地方我都可以：\n\n    按 [ F7 + G ] 极速启动 Google Chrome\n    按 [ F7 + N ] 极速启动 OneNote UWP\n    按 [ F7 + 3 ] 极速启动 画图 3D UWP\n    按 [ F7 + V ] 极速前往 V2EX\n    按 [ F7 + D ] 极速打开 OneDrive 文件夹\n\n[添加、调整、删除快捷键]=[添加、重命名、删除快捷方式]\n\n**常见问题**\n\n这么多快捷键，记得住吗？\n\n按多了，手上就会形成肌肉记忆，就记住了，就像记 QWERTY 键盘布局一样。\n\nPower Keys 会影响我使用 [ F1 ~ F12 ] 原本的功能吗？\n\n不会。\n\n我不小心按错了快捷键，我该怎么办？\n\n按下 [ F1 ~ F12 + 空格键 ] 即可立即关闭错误启动的项目，无需按 [ Alt + F4 ] 。\n\nPower Keys 会影响我打游戏吗？\n\nPower Keys 自带了游戏模式。\n\n在哪里下载 Power Keys ？\n\n[Power Keys GitHub 页面](https://github.com/szzhiyang/PerfectWindows/wiki/Power-Keys)\n\nPower Keys 免费开源吗？\n\n是的。\n\nPower Keys 有 Mac 版本吗？\n\n我没有 Mac。\n\n**补充：**\n\n键盘流启动器和鼠标流启动器是不同的概念，鼠标流启动器爱好者请不要大惊小怪。\n\n本软件根本不会对您 F1 ~ F12 键的使用造成任何干扰，请不要云评测。\n\n按下 F1 + A 的意思是按住 F1 键的同时再按下 A 键，跟按 Ctrl + A 一样，并不是先按 F1 键再按 A 键。\n\n**重要补充：**\n\nPower Keys 并不指望取代您现有的应用启动方式，它最大的意义就是帮助您在最短的时间内直达您最常去或者最要紧的地方。在这点上，没有任何启动器能够取代它。\n\n**示例**\n\n    您不希望错过任何乍现的灵感，需要在最短的时间内启动您的绘图软件或者记事软件将灵感记录下来。\n    您会经常性地、不定时地启动浏览器、计算器、记事本、To-Do 应用或者日历应用。\n    您正在赶 DDL，需要以最快的速度发送邮件或者以最快的速度转至某个网站，分秒必争。\n    您正在跨多个文件夹整理或浏览素材，需要以最快的速度切换到指定的文件夹。\n    某些应用程序或脚本经常需要以管理员身份启动或者带特定的启动参数启动。\n\n示例所示的场景，只有 Power Keys 才能胜任。",
			"added": 1581580074,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581584283,
			"title": "linux 包管理器有哪些？",
			"body": "",
			"added": 1581584276,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581666893,
			"title": "为什么要学习 Linux？",
			"body": "以下内容转自 http://zhangzk.net/blog.html 。转载请注明出处。\n\n\n自由谈 (2014 年 3 月 15 日，科英布拉)\n\n\n起这么吓人的一个题目，其实只是想写一下 Linux。但我保证决不做标题党。 请注意，这是一篇充满正能量富有哲理的小清新鸡汤文，操作系统狂热分子请止步。\n\n\n用 Linux 五年多了，但此前我从来没有就此写过一句话。不过我倒是经常问别人：你用什么操作系统？尤其对刚认识的人。因为用 Linux 的人很可能跟我三观接近，比较容易成为朋友 (警告：逆命题不成立！)。一个无关痛痒的问题能提供如此重要的信息，何乐而不为之？\n\n\n“三观” 这个词眼下很流行。这原本是一个严肃的概念，现在也不可避免地被解构了。我说的是它的本意。一个人的三观是什么决定的？无非是她/他经历的人与事。正常情况下，能影响到三观的经历只占极少数。对于跟我一般固执的人，这个比例就更低。如果连中午吃馒头还是米饭都管用，这三观也忒不值钱了。\n\n\n那些重要的人恐怕在回忆录甚至遗书里才好写，重要的事倒是可以提前说道说道。对我而言，从 Windows 转向 Linux 可算是其中之一。\n\n\n一个操作系统而已，似乎跟馒头和米饭没多大差别，有这么重要吗？\n\n\n回答这个问题之前，我们先来看看 Linux 与 Windows 最本质的区别在哪里。有人会说前者免费，后者需要买 (或偷)。这只是对 “free software” 的曲解。在我看来，二者最重要的区别乃是它们对自己的用户所做的假设。对于 Linux，这个假设是：\n\n\n用户知道自己想要什么，也明白自己在做什么，并且会为自己的行为负责。\n\n\n而 Windows 则恰好相反：\n\n\n用户不知道自己想要什么，也不明白自己在做什么，更不打算为自己的行为负责。\n\n说得更直接一些，前者假定用户是负责任的聪明人，后者反之。Linux 用户不必沾沾自喜，Windows 用户先把刀放下。这些只是假设，它们的 (不是我的) 假设。\n\n\n这么滴吧，我讲个故事，一来呢，测验一下你的智商；二来呢，缓和一下尴尬的气氛。听好，可招笑了。说，要把大象装冰箱 … 呃，不，故事是这样的：\n\n\n    一位雕刻家爱上了自己创作的女神雕像。他每天对着雕像说话。最后，那座雕像真的变成了一位女神。\n\n\n这个故事还有另一个版本，你肯定听过：\n\n\n    在一所小学里，心理学家随机选择 20% 的学生，告诉老师他们比别人更聪明。一年之后，这些学生的 IQ 测验果然 (在统计意义上) 更佳。\n\n这个故事流传甚广，但很少有人给出参考文献。这是历史上真实存在的一个试验，1963 年由罗胜道与贾步升在美国加州南旧金山市橡树小学实施。罗是加州大学心理学家教授，而贾时任橡树小学校长。二人于 1968 年就此试验发表了《课堂上的毕马隆效应》，这里是 BibTeX：\n\n@book{pygmalion,\n    title={Pygmalion in the Classroom: Teacher Expectation and Pupils' Intellectual Development},\n    author={Rosenthal, R. and Jacobson, L.},\n    url={http://books.google.pt/books?id=9HbuAAAAMAAJ},\n    lccn={lc68019667},\n    year={1968},\n    publisher={Holt, Rinehart and Winston}\n}\n\n毕马隆是希腊神话里的一位雕刻家，就是爱上自己作品的那位。这 (两) 个故事告诉我们：第一，只要功夫深，不怕女神不动心；第二，如果有心理学家来你们学校做试验，躲得越远越安全 —— 80% 和 20%，你觉得哪个几率更大一些？\n\n细心的人可能注意到，上面的故事还告诉我们，他人的期望会在一定程度上影响我们的行为。这就是罗胜道与贾步升所说的 “毕马隆效应”。\n\n\nWindows 如何影响用户的行为我不清楚，而 Linux 对用户的影响倒是十分有意思。既然假定 “用户知道自己想要什么，也明白自己在做什么，并且会为自己的行为负责”， 如果发生毕马隆效应，那么相当一部分用户会慢慢学会用自己的脑袋思考，按自己的意志行事，并为自己的行为负责。这就是自由，也是 “free software” 之 “free” 的本意。\n\n\n说到自由，不能不提 John Stuart Mill (约翰·斯图亚特·穆勒) 的 On Liberty (《论自由》)。 我有一本严复先生译的《群己权界论》，买英文版赠的。由于是赠本，印刷装帧不免略显简陋。一次，我的一个同学拿起这本书看了两眼，问我，这是什么书，不是哪个邪教的教义吧？严复恐怕想不到，在他身后近百年，在他的国家二度成为共和国之后六十多年，一个受过良好教育的高级知识分子会把他的译著当做 “邪教教义”。\n\n可能有人要问，所谓的 “按自己的意志行事” 不容易发展为自私自利吗？的确如此，如果没有后面那句 “并为自己的行为负责” 的话。这就是严复把 “On Liberty” 译为“群己权界论” 的原因。任何一个人，只要不是离群索居，她/他的自由就有一定的界限，而所谓 “为自己的行为负责” 至少包括遵守界限并承担越界的一切后果。自由绝不等于为所欲为。如果有人说 “free software” 就是用户可以为所欲为的软件，那还不如认为它是 “免费软件”。\n\n\n前两天听到一个有意思的观点：全能型政府治理下的老百姓往往公德心不太好。比观点更有意思的是解释：如果家里来了一个保姆，请来之后才发现他什么都管，从头到脚为你立一堆规矩，更不幸的是这个保姆还辞不掉，那很多人可能会 “理性地” 选择与保姆对着干 —— 乱扔烟头、随地大小便、扰乱他干活。观点我同意，但解释我不敢苟同。在我看来，这种现象跟操作系统影响用户行为是一个道理，不过是毕马隆效应罢了。既然假定老百姓素质不高、无法自理，那么久而久之这可能会变成 (统计意义上的) 现实。与之相关的是陈港生的名言 “国人需要管”。这句话本身无可挑剔。“群己权界” 本来就暗示每个人都要为他人让渡自己的一部分自由；在社会上这需要通过管理来实现，所以 “每个社会人都需要管”，国人自然不例外。不过，如果陈先生的意思是 “国人比别人更需要管，因为国人比别人更不具备公民素质”，那可要小心了。一旦这种言论大行其道，其毕马隆效应将是非常可悲的。另外，不难注意到，这其实是一种种族歧视言论。在一个高级知识分子把《群己权界论》当邪教教义的社会里，即便有人堂而皇之散布这样的言论也不奇怪。当然，这都是诛心之论，陈先生是好的。\n\n好像越扯越远了，说好的 Linux 呢？其实我对 Linux 的了解十分有限，从来是现学现用，谷哥就是我的老师。所以，我没有资格在技术层面上谈论 Linux。不过有几个非技术问题倒是可以探讨一下。\n\n\n问题一：Linux 对用户友好吗？\n\n\n回答：“Linux is user-friendly. It's just very selective about who its friends are.” 这句话没有出处，主语本来是 Unix，但 Linux 是 Unix 的一种 (吗)，所以它对 Linux 也成立 (吧)。很多人把这句话当作笑话，但对照一下 Linux 对用户所做的假设，我们会发现这句话严肃至极，一点都不好笑。Linux 对用户很友好，但它对自己的用户是有假定的。如果你感觉不到他的友好，那说明你不满足假定。\n\n\n问题二：听你一说，Linux 好像很高大上的感觉。如果我弃 Windows 从 Linux，用不了多久就会升职加薪当上总经理出任 CEO 迎娶白富美走向人生巅峰吧？想想还有点小激动呢！\n\n回答：我不知道你是从哪里听出 Linux 高大上的。至于你的问题嘛，我还是再讲个故事吧：\n\n\n一个女生要从三个追求者中选择一个作为自己的白马王子。三人通过重重考验，来到最后一关。女生要求他们亮出自己的笔记本电脑，结果发现第一个追求者用的是 Windows，第二个用的是 Linux，而剩下那个用的当然是 Mac 了。最后她选了胸大，哦不，最有钱的那一个。\n\n\n对了，你不会天真到以为用 Mac 的就一定有钱吧？\n\n\n问题三：上面那个故事里的女生到底应该选哪个？\n\n\n回答：如果你对故事里给出的答案不满意，这个问题就难了。不过，如果这个女生想做女王大人，断不可选择第二个追求者。否则，根据毕马隆效应，白马王子可能会因抑郁而自尽。\n\n问题四：到底 Windows 和 Linux 哪个好？我该用哪一个？\n\n\n回答：Linux 和 Windows 哪个好？这个问题就跟纠缠豆腐脑该加糖还是加盐一样没有意义。操作系统只是一个工具，适合你的就是最好的。Linux 传教士们，省省吧！“自由即责任，世人多畏之。” 不论到什么时候，Linux 用户都将是相对少数，这是人性决定的。如果真的理解 Linux 的哲学，那你应该明白，每一个人都可以问 “我该用哪个”，但任何人都不应管 “她/他该用哪个”。Windows 支持者们，不要再说 “Linux 我试过，太难用，跟 Windows 差距太大”。这很可能是你的真实感受，但明智的做法是装作从来没试过，不要宣扬。原因很简单：“若无力驾驭，自由便是负担。”\n\n\n问题五：你怎么不说 Mac？\n\n\n回答：买不起。\n\n问题六：说好的哲理呢？说好的正能量呢？说好的小清新呢？说好的鸡汤呢？我看你就是一个 “操作系统狂热分子” 吧？\n\n\n回答：曾经是，但经过积极改造，现在已经重新做人，成为一个实用主义者了。只要满足以下三条，任何操作系统我都乐于接受：\n\n\n1. 用户自主。用户决定系统如何工作，而不是反之。任何提示用户 “正在安装更新，请不要关机” 的行为都跟不以结婚为目的的恋爱是一个性质。用户是机器的主人，操作系统只是用户请来的助手；用户知道自己想要什么，明白自己在做什么，也会为自己的行为负责；操作系统尽量少说话，更不要下命令。用户自主还蕴含系统的可定制性：用户可以对系统做任何配置或改造。\n\n\n2. 用户知情。如有必要，用户可以获知系统工作的任何细节，而不是仅仅被告知 “正在处理一些事情” —— 这比不以结婚为目的的恋爱还让人无法接受。\n\n\n3. 系统高效。在此系统下用户可以很方便地获得各种工具，并且不同工具能很容易地组装在一起完成复杂的工作。机器更多是用来干活的，所以这一点很重要。\n\n以此为标准，Linux 目前是个不错的选择，而 Windows 不满足任何一条。怎么，你仍然认为我是操作系统狂热分子？对不起，真不是，我只是选择了自由。Liberty means responsibility. That is why most men dread it.  —  George Bernard ShawUnless a man has talents to make something of himself, freedom is an irksome burden.  —  Eric Hoffer\n\n作者：ZHANG Zaikun\n链接：https://www.zhihu.com/question/20117703/answer/31850471\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
			"added": 1581666884,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581745562,
			"title": "软件仓库里需要连接外网，需要手动设置代理才能下载的软件有哪些？",
			"body": "",
			"added": 1581745552,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581753570,
			"title": "分配变得无关紧要：差异是我们的实力和我们的责任",
			"body": "原文地址：https://flameeyes.blog/tag/gentoo/\n\n对于过去十三年来一直将自己定义为Linux发行版开发人员的人（我确定我是否真的仍然是Gentoo Linux开发人员，我敢争论），必须写这样的标题显然很难。但是从我开始开发开源软件的那一天到现在，我成长了很多，而且我意识到过去在很多事情上都是错的。\n\n我最近意识到的一件事是，如今，发行失败了。就像这篇文章的标题所说，差异是我们的力量，但同时，它也是我们毁灭的种子。以发行版为例：Gentoo，Fedora，Debian，SuSE，Archlinux，Ubuntu。它们的外观和行为都不同，着眼于不同的目标用户，因此，它们在提供哪些软件，提供哪些版本以及在测试包本身和系统集成上花费了多少精力方面都存在很大差异。 。\n\n以这种方式进行描述时，没有什么叫“冲突！”，只是在这一点上我们都知道它们确实存在冲突，并且来自许多不同社区的解决方案一直只是忽略发行版：高级语言库的开发人员构建自己的包装（Ruby Gems，PyPI，甚至不要谈论Go），业务应用程序开发人员首先使用容器，最后使用Docker，现在用户应用程序开发人员已开始融合到Flatpak。\n\n为什么会发生冲突？很多时候，答案是在不同发行版的开发人员之间发生的争吵中找到的，而“我们比他们更好！” 态度，通常是“我们不需要您的帮助！”。有时，这一直到消极的一面，直到“哦，是Gentoo [或其他]开发人员抱怨，这都是他们的错和问题，请忽略它们。” 而且，别忘了fork之间的敌意（例如Gentoo，Funtoo和Exherbo），双方都在试图证明自己比对方更好。到处都有很多冲突。\n\n当然，至少有两次主要的尝试来标准化发行方式的一部分：Linux Standard Base和FreeDesktop.org。前者实际上是一场灾难，后者或多或少地被人们接受，但是问题就在这里：或多或少。让我们分别看看这两个。\n\nLSB实际上是一项商业活动，旨在（有效）仅取悦二进制软件包的分发者。确实，它并不能完全保证您可以在其中构建环境的环境，也从未邀请非商业实体讨论该标准背后的原因。在开放源代码等环境中，LSB成为ISO标准这一事实并不是荣誉的标志，而是担心它的规格过多且过于复杂。我认为大多数人都同意。指定二进制库的存在也存在很大的困难，而不是作为遵循发行版的一套准则。\n\n是的，尽管从技术上讲LSB仍然可以使用，但我在Wikipedia上找到的最新版本是2015年，我什至在第一次搜索时都找不到他们是否认证了任何发行版本。同样，由于认证的性质，不可能对滚动发行版进行认证，而滚动发行版正变得比以前更加普及。\n\n从采用和实用性的角度来看，我认为LSB的问题之一是，它完全侧重于为二进制和商业应用程序提供基础平台。早在开发之初，Linux的未来（尤其是在台式机上）就似乎完全依赖于可以在其上运行的专有软件应用程序的开发能力，就像它们在Windows和OS X上所做的那样。这些发行版并非真正旨在支持该特定环境，说服他们支持LSB显然是毫无意义的。\n\nFreeDesktop.org在这方面处于更好的状态。他们指出，他们写的不是标准，而是实际规范。由于它们的实际特性，他们首先有效地记下了GNOME和RedHat所做的一切，但是由于KDE和其他社区的支持，它们逐渐发展为跨桌面的公司。由于开源社区的性质，FD.o规范比“标准”被广泛采用。\n\n同样，如果您与我上面所说的相比，FD.o提供的规范使编写（而不是运行）应用程序更加容易。它为您提供了在哪里寻找文件，应该渲染哪些图标以及暴露了哪些接口的保证。它没有提供一个内部编写的应用程序将在接下来的20年中继续运行的环境（诚然，Windows已经提供了很长时间），而是为您提供了构建模块接口，以便您可以创建任何想要与其他桌面环境集成。\n\n碰巧的是，Lennart和他的systemd最终实现了比LSB或FD.o标准化得多的标准化发行版，如果没有别的办法，那就是接管它们中最大的定制点之一：init系统。现在，我对此有所抱怨，因为即使在系统化之前，对于标准来说，它可能也是一个不错的话题，并且独立于开发人员而应该遵循它，但这是另一个问题。归根结底，至少有一些交叉分发方式可以提供init系统支持，并且开发人员知道，如果他们以某种方式构建后台驻留程序，那么他们可以自己提供init系统集成，而不必依赖于包装者。\n\n我觉得我们应该拥有更多的东西。当我的工作ruby-ng.eclass和fakegem.eclass我试图让Debian的ruby队，谁之前类似的投诉过，和我一起在邮件列表上，这样我们就可以再次讨论runy开发商和Linux发行版，但之间的通用接口，这实际上并没有发生。我的想法是，我们应该对CPAN，CRAN，PyPI，Cargo等进行类似的讨论……这可能使我们免于打包的麻烦。\n\n\n问题不仅在于克服发行版在技术指导和市场营销方面的差异，而且还要求与构建和使用这些系统的人员坐在一起，并真正弄清楚他们要实现的目标。因为特别是在Gems和其他包装系统的情况下，您应该与之交谈的不仅是发行版的用户，而且最重要的是图书馆作者（其主要兴趣是运送东西以便人们使用）和开发人员。使用它们（其主要兴趣是无需等待数月即可获取和使用库）。对于大多数大型项目来说，发行用户是sysadmin。\n\n这意味着您需要解决一个多方面的问题，不同的人员角色和不同的需求。寻找一个不妥协的解决方案，并满足所有相关角色的100％需求，并且不需要任何工作流更改实际上是不可能的。您应该做的是集中精力为对环境至关重要的角色选择非常重要的功能（在上面的示例中，这些库的开发人员以及使用这些库的应用程序的开发人员），这些更改要求最少的更改他们的工作流程（但要说服他们在真正需要的地方更改工作流程，只要它不会比以前更笨拙且没有优势），并弄清楚可以做什么来满足或更改“次要重要性”的要求”角色（分配维护者通常是该角色）。\n\n再次回到Gems的示例：到现在为止，很明显，大多数开发人员从来都不关心将其库移植到发行版中。他们关心快速，无缝地推送其新版本代码的能力，而根本不必了解发行版。这些库的使用者不需要也不应该在乎如何打包它们以进行发行，或者甚至如何与之交互，他们只是希望能够使用测试的库版本来部署其应用程序。抛开对分发的信任，sysadmin只关心理智地处理依赖关系，并能够确定生产环境中正在运行哪个库的哪个版本，以在发生安全问题时进行升级。现在，分发维护者可以成为所有这些问题的纽带，并一劳永逸地解决……但是，他们将必须在工作流程中做出最大的改变-这就是我们所做的ruby-ng-否则它们将变得无关紧要。\n\n确实，Ruby Gems和Bundler，PyPI和VirtualEnv以及现在的Docker本身就是这些表达：分发本身由于彼此之间的差异太大而不能提供仅提供一个工作库的简便方法，因此成为主要的风险和成本点，并使用一个工作库。这些角色对环境至关重要：如果没有人发布库，那么使用者就没有库可以使用；如果没有人使用库，则发布它们毫无意义。如果没有人打包库，但是有发布和使用它们的方法，那么环境仍然存在。\n\n如果我可以回到过去，变得更具魅力，并改变事物的状态，该怎么办？（我说这是为了将来参考，因为如果它再次与我的生活有关，我会做到这一点。）\n\n我将试图说服人们，即使在技术指导上存在分歧，讨论和合作也是一件好事。没有一个想法是愚蠢的，愚蠢的或其他任意否定词集。整个观点是，您需要确保即使您不同意给定的方向，您也可以同意其他方向，但这并不是一场零和游戏！\n\n说到“过于复杂”是不接受一个方向而采取另一个方向的正当理由。“我们总是这样做”不是一个很好的理由。您可以继续使用它，但最终会得到的Solaris 一个非常停滞的项目。\n\n与绕过发行版的项目的利益相关者进行交谈，并找出他们这样做的原因。提供“标准”工具，或者至少提供关于如何以分发仍然满意的方式做事的建议，而不会造成不必要的负担。\n\n最重要的是，说话。无论是通过组织邮件列表，IRC频道，在会议上大放异彩还是任何其他方式。人们需要在构建工具和做出决策的人们面前清楚地谈论和讨论当前的问题。\n\n我过去没有做过任何事情。如果遇到这种情况，我会尽力而为。不幸的是，在我们目前谈论的这个领域中，这个职位比我以前需要更多的特权。不仅因为我的个人培训和经验了解应该做什么，而且因为这需要与人实际会面并组织现实生活的高峰会议。如今，尽管我确实成为了环球旅行者，但我再也负担不起。",
			"added": 1581753615,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581762153,
			"title": "为什么现在伸手党如此之多？",
			"body": "看到好多站在高点批评我的人。。。我觉得我有必要把这个问题补充一下。没问清楚是我不对，不爱看可以右上X掉，既然这么没水平就让它沉了吧，谢谢！\n不知道有没有豆瓣来的朋友，13年底14年初的的时候，豆瓣有很多活跃的喜欢分享美妆、手作、美食的达人，很多人也被伸手党弄得头疼，也有很多因为这些烦人的伸手党离开了豆瓣不再更新。我也是因为这个比较生气，在加上那会儿知乎刚刚兴起，就问这么个没营养的问题。\n\n我问题中的伸手党是指那些不经思考、不仔细看文章就随意求地址，求做法的，那些明明百度一下就能知道的还要问，让他去百度还要说“你好高傲，就你了不起啊”这种人。。。。\n不过自从很多大牛出走之后，现在已经很少见特别过分的伸手党了，所以这个问题时效性比较强，可能过了那个大家都喊讨厌伸手党的时期，这些伸手党也就学会自己百度而不见了。\n到现在我还是很讨厌这种人，乐于分享没有错，把别人乐于分享当做理所当然的就不太好了吧。。。。我也知道了他们只是懒惰和厚脸皮。\n\n看下面的答案可能有人觉得我诬陷了知乎所有问问题的人？我不是那个意思。我觉得“伸手党”是个贬义词，希望大家不要随便对号入座带着愤怒回复我。",
			"added": 1581762141,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581766848,
			"title": "用户友好的命令行是什么样的？",
			"body": "要有必要的信息提示",
			"added": 1581766965,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581766906,
			"title": "用户友好的编程语言是什么样的？",
			"body": "",
			"added": 1581766892,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581766928,
			"title": "用户友好的操作系统是什么样的？",
			"body": "",
			"added": 1581766913,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581767111,
			"title": "什么是“对用户友好”",
			"body": "当我提到一个工具“对用户不友好”(user-unfriendly)的时候，我总是被人“鄙视”。难道这就叫“以其人之道还治其人之身”？想当年有人对我抱怨 Linux 或者 TeX 对用户不友好的时候，我貌似也差不多的态度吧。现在当我指出 TeX 的各种缺点，提出新的解决方案的时候，往往会有美国同学眼角一抬，说：“菜鸟们抱怨工具不好用，那是因为他们不会用。LaTeX 是‘所想即所得’，所以不像 Word 之类的上手。”\n\n殊不知他面前这个“菜鸟”，其实早已把 TeX 的配置搞得滚瓜烂熟，把 TeXbook 翻来覆去看了两遍，\"double bend\" 的习题都全部完成，可以用 TeX 的语言来写宏包。而他被叫做“菜鸟”，这是一个非常有趣的问题。所以现在抛开个人感情不谈，我们来探讨一下这种“鄙视”现象产生的原因，以及什么叫做“对用户友好”。\n\n首先我们从心理的角度来分析一下为什么有人对这种“对用户不友好”的事实视而不见，而称抱怨的用户为“菜鸟”。这个似乎很明显，答案是“优越感”。如果每个人都会做一件事情，如何能体现出我的超群智力？所以我就是要专门选择那种最难用，最晦涩，最显得高深的东西，把它折腾会。这样我就可以被称为“高手”，就可以傲视群雄。我不得不承认，我以前也有类似的思想。从上本科以来我就一直在想，同样都会写程序，是什么让计算机系的学生与非计算机系的学生有所不同？经过多年之后的今天，我终于得到了答案（以后再告诉你）。可是在多年以前，我犯了跟很多人一样的错误：把“难度”与“智力”或者“专业程度”相等同。但是其实，一个人会用难用的工具，并不等于他智力超群或者更加专业。\n\n可惜的是，我发现世界上有非常少的人明白这个道理。在大学里，公司里，彰显自己对难用的工具的掌握程度的人比比皆是。这不只是对于计算机系统，这也针对数学以及逻辑等抽象的学科。经常听人很自豪的说：“我准备用XX逻辑设计一个公理化的系统……”可是这些人其实只知道这个逻辑的皮毛，他们会用这个逻辑，却不知道它里面所有含混晦涩的规则都可以用更简单更直观的方法推导出来。\n\n爱因斯坦说：“Any intelligent fool can make things bigger and more complex... It takes a touch of genius - and a lot of courage to move in the opposite direction.”我现在深深的体会到这句话的道理。想要简化一个东西，让它更“好用”，你确实需要很大的勇气。而且你必须故意的忽略这个东西的一些细节。但是由于你的身边都是不理解这个道理的人，他们会把你当成菜鸟或者白痴。即使你成功了，可能也很难说服他们去尝试这个简化后的东西。\n\n那么现在我们来谈一下什么是“对用户友好”。如何定义“对用户友好”？如何精确的判断一个东西是否对用户友好？我觉得这是一个现在仍然非常模糊的概念，但是程序语言的设计思想，特别是其中的类型理论(type theory)可以比较好的解释它。我们可以把机器和人看作同一个系统：\n\n    这个系统有多个模块，包括机器模块和人类模块。\n    机器模块之间的界面使用通常的程序接口。\n    人机交互的界面就是机器模块和人类模块之间的接口。\n    每个界面必须提供一定的抽象，用于防止使用者得到它不该知道的细节。这个使用者可能是机器模块，也可能是人类模块。\n    抽象使得系统具有可扩展性。因为只要界面不变，模块改动之后，它的使用者完全不用修改。\n\n在机器的各个模块间，抽象表现为函数或者方法的类型(type)，程序的模块(module)定义，操作系统的系统调用(system call)，等等。但是它们的本质都是一样的：他们告诉使用者“你能用我来干什么”。很多程序员都会注意到这些机器界面的抽象，让使用者尽量少的接触到实现细节。可是他们却往往忽视了人和机器之间的界面。也许他们没有忽视它，但是他们却用非常不一样的设计思想来考虑这个问题。他们没有真正把人当成这个系统的一部分，没有像对待其它机器模块一样，提供具有良好抽象的界面给人。他们貌似觉得人应该可以多做一些事情，所以把纷繁复杂的程序内部结构暴露给人（包括他们自己）。所以人对“我能用这个程序干什么”这个问题总是很糊涂。当程序被修改之后，还经常需要让人的操作发生改变，所以这个系统对于人的可扩展性就差。通常程序员都考虑到机器各界面之间的扩展性，却没有考虑到机器与人之间界面的可扩展性。\n\n举个例子。很多 Unix 程序都有配置文件，它们也设置环境变量，它们还有命令行参数。这样每个用户都得知道配置文件的名字，位置和格式，环境变量的名字以及意义，命令行参数的意义。一个程序还好，如果有很多程序，每个程序都在不同的位置放置不同名字的配置文件，每个配置文件的格式都不一样，这些配置会把人给搞糊涂。经常出现程序说找不到配置文件，看手册吧，手册说配置文件的位置是某某环境变量 FOO 决定的。改了环境变量却发现没有解决问题。没办法，只好上论坛问，终于发现配置文件起作用当且仅当在同一个目录里没有一个叫 \".bar\" 的文件。好不容易记住了这条规则，这个程序升级之后，又把规则给改了，所以这个用户又继续琢磨，继续上论坛，如此反复。也许这就叫做“折腾”？他何时才能干自己的事情？\n\nTeX 系统的配置就更为麻烦。成千上万个小文件，很少有人理解 kpathsea 的结构和用法，折腾好久才会明白。但是其实它只是解决一个非常微不足道的问题。TeX 的语言也有很大问题，使得扩展起来非常困难。这个以后再讲。\n\n一个良好的界面不应该是这样的。它给予用户的界面，应该只有一些简单的设定。用户应该用同样的方法来设置所有程序的所有参数，因为它们只不过是一个从变量到值的映射（map）。至于系统要在什么地方存储这些设定，如何找到它们，具体的格式，用户根本不应该知道。这跟高级语言的运行时系统(runtime system)的内存管理是一个道理。程序请求建立一个对象，系统收到指令后分配一块内存，进行初始化，然后把对象的引用(reference)返回给程序。程序并不知道对象存在于内存的哪个位置，而且不应该知道。程序不应该使用对象的地址来进行运算。\n\n所以我们看到，“对用户不友好”的背后，其实是程序设计的不合理使得它们缺少抽象，而不是用户的问题。这种对用户不友好的现象在 Windows，Mac，iPhone, Android 里也普遍存在。比如几乎所有 iPhone 用户都被洗脑的一个错误是“iPhone 只需要一个按钮”。一个按钮其实是不够的。还有就是像 Photoshop, Illustrator, Flash 之类的软件的菜单界面，其实把用户需要的功能和设置给掩藏了起来，分类也经常出现不合理现象，让他们很难找到这些功能。\n\n如何对用户更加友好，是一两句话说不清楚的事情。所以这里只粗略说一下我想到过的要点：\n\n    统一：随时注意，人是一个统一的系统的一部分，而不是什么古怪的神物。基本上可以把人想象成一个程序模块。\n\n    抽象：最大限度的掩盖程序内部的实现，尽量不让人知道他不必要知道的东西。不愿意暴露给其它程序模块的细节，也不要暴露给人。“机所不欲，勿施于人”。\n\n    充要：提供给人充分而必要（不多于）的机制来完成人想完成的任务。\n\n    正交：机制之间应该尽量减少冗余和重叠，保持正交(orthogonal)。\n\n    组合：机制之间应该可以组合(compose)，尽量使得干同一件事情只有一种组合。\n\n    理性：并不是所有人想要的功能都是应该有的，他们经常欺骗自己，要搞清楚那些是他们真正需要的功能。\n\n    信道：人的输入输出包括5种感官，虽然通常电脑只与人通过视觉和听觉交互。\n\n    直觉：人是靠直觉和模型(model)思考的，给人的信息不管是符号还是图形，应该容易在人脑中建立起直观的模型，这样人才能高效的操作它们。\n\n    上下文：人脑的“高速缓存”的容量是很小的。试试你能同时想起7个人的名字吗？所以在任一特定时刻，应该只提供与当前被关注对象相关的操作，而不是提供所有情况下的所有操作供人选择。上下文菜单和依据上下文的键盘操作提示，貌似不错的主意。\n\n转载自：http://www.yinwang.org/blog-cn/2012/05/18/user-friendliness/",
			"added": 1581767095,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581770203,
			"title": "改用 Linux 之后你最怀念 Windows 下的什么东西？",
			"body": "Listary\nbandizip",
			"added": 1581855601,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581770339,
			"title": "使用windows后你最怀念的linux下的什么东西？",
			"body": "",
			"added": 1581770321,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581842069,
			"title": "有哪些支持archlinux的监控面板？",
			"body": "",
			"added": 1581842050,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581859157,
			"title": "精通 LFS是什么样的体验？",
			"body": "",
			"added": 1581859136,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581859445,
			"title": "系统管理员都做哪些工作？",
			"body": "",
			"added": 1581859423,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581863746,
			"title": "linux 有哪些绿色软件？",
			"body": "（自带库）",
			"added": 1581863723,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581864461,
			"title": "玩 ZeroNet 的都是一些什么人？",
			"body": "",
			"added": 1581864437,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581866568,
			"title": "衍生发行版和父发行版有多大的区别？",
			"body": "",
			"added": 1581866543,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581946026,
			"title": "Linux高效使用的七个好习惯",
			"body": "简 介\n\n刚开始使用Linux时你也许会感到不习惯，许多高手也都有这样的经历。毕竟，曾经他们也都是新手。但是现在Linux团体已经在为新用户提供有关指南，手册和基本的技术文档来使他们尽快上手方面做的相当出色。三年前我首次接触Linux，很多人通过论坛，在线聊天和电子邮件等帮助我，这些“企鹅”们真是相当热心。\n\n对此，我深感应该为无私帮助我的团体做一些力所能及的贡献，我应该给刚使用Linux的朋友写点什么。这里我编译了七个当我刚入门时别人告诉我的七个习惯。我相信如果你运用了这七个习惯，在你使用Linux时你会感觉更安全，便利，学到很多实用的东西，最终你会发现使用Linux也是那样的愉悦。 \n\n 1-不要以根用户登录 \n\n　　这是你首先应该注意和遵守的。以前我们可能已经习惯了Windows，我们一直以为权限越高越好，所以我们喜欢以管理员帐户登录。但是这也许是Windows经常被病毒骚扰和不安全的重要原因，现在太多人都在用根用户登录。 \n\n　　权限越高责任越大，拥有管理员权限你需要谨慎对待你所做的任何事情，但是错误还是不可避免。我记得我最先使用的是Suse Linux，有很多事项需要管理但是没有图像用户界面我不知道如何做，于是我天真的注销并登录到了根用户的图形界面。根用户图形界面的默认壁纸是一排排的高亮地雷。这些符号在我脑海里盘旋，我很小心没有终于没有做错什么。 \n\n　　那么以根用户登录有那些危险那？ \n　　1.你可以想象你在没有保护网的情况下打秋千，会不会感到害怕？这和你以根用户登录的道理是一样的，你会不经意间毁掉你的系统。 \n　　2.你可能会不小心运行恶意软件。通常在根用户模式下任何程序的启动都默认给予所有权限的。 \n　　3.如果你的系统有安全漏洞没有修补，你就可能被别人完全控制。 \n　　4.这是使用Unix的惯例，除非必须那么不要轻易在根用户下运行任何东西。如果一个不是自己触发的程序请求根用户权限，那么你就要小心了。 \n\n　　通常，我们不必登录根用户界面，下面是几条技巧： \n　　*使用“sudo”或“su”命令，并在你完成管理时退出 \n　　*如果你不知道如何使用命令行完成这些，你可以使用“gksu”或“kdesu”。比如，按 Alt+F2并打出“gksu nautilus”，并在你完成时马上结束程序。 \n\n 2-合理的命名你的文件 \n\n　　Linux环境下，你可以按照你的意愿命名文件，但是以下两点是不允许的：1）“/”是根目录专用的；2）不要使用无效字符。其它的在技术上都是可以的，但是为了避免以后的麻烦这里有几点经验你可以遵守： \n\n　　*经验上，只使用字母、数字、连接符（-）和下划线（_） \n　　*避免使用美元符（$），括弧和百分号（%）等特殊字符，这些字符对于shell有着特殊意义，可能会引起冲突 \n　　*避免使用空格，在终端上处理含有空格的文件是很愚蠢的。你可以用连接符或下划线来代替空格。 \n\n　　这些已经基本上成为我的习惯，并且我在使用Windows和MAC时也不自觉的遵守这些准则。 \n\n 3-将你的home目录放在一个独立的分区上 \n\n　　这样做会给你很大的灵活性。将home目录放在一个独立的分区上，可以在你重装系统甚至升级你的整个版本而不会丢失你的数据和个人设置。你可以在根目录下重新设置你所需要的而保留home分区。现在你可以将你需要的随意分类而不必担心的数据和个人设置，你可以随时使用它们。 \n\n　　如果碰巧在你安装系统之后才懂得这一点，不要失望。你可以按照Carthik在ubantu Blog上的一片名为“Move /home to it’s own partition”的指导道一步步的完成。\n\n  4-合理的灾难管理 \n\n　　Linux是比较强大和稳定的，但是任何系统都会崩溃。在你CTRL-ALT-DEL,重启之前，你应该学会如何处理你遇到的事故。你需要知道如何在不重启的情况下轻松恢复你的系统。我个人认为这种情况分为几个不同的层次，如果前一步不奏效的话请转向下一步： \n\n　　1.我将“强制关闭”程序放在我的任务栏上，如果哪个程序出现问题可以单击“强制关闭”图标并结束该程序 \n　　2.如果上一步不奏效，调用终端，用“ps -A”，记下那个出问题程序的进程号，结束它 \n　　3.使用“killall”命令，比如“killall firefox-bin” \n　　4.如果整个图形界面都冻结，你已经不可能调用终端，按CTRL-ALT-F1，这样可以转到另一个终端，这样你就可以使用步骤2和3来结束出问题的程序。 \n　　5.还不行的话，你可以使用CTRL-ALT-Backspace组合重启你的图形界面，但是要注意的是，这样会结束你正在运行的GUI程序。 \n　　6.调用CTRL-ALT-F1再使用CTRL+ALT+DEL这样不会立即重启你的系统，只是按照正常模式重启，所以是安全的（假定你想要重启并且CTRL-ALT-F1可用）。 \n　　7.如果这一切都不管用，也不用记着按强制重启按钮，尝试Raise a Skinny Elephant 。 \n\n 5-主动尝试 \n\n　　你可能对朋友给你设置设计的当前版本和配置很满意，这适合你。这很好，但是可能会有比这更好的。为什么不尝试下Linux和开源的灵活性和丰富性呢？不要害怕尝试不同的程序，图形管理和桌面。实验直到你找到最适合你的。你可以这样想，你现在居住在世界上最好的地方，但是环球旅行也不会有什么坏处的？或许说不定你还可以找到一个更好的居住地，就算不能，你旅行的时间也值得好好品味，你对其它国家，它们的人和风俗，思考方式了解的更多，最终说不定你会喜欢上这样的尝试。你尝试的任何新事物都会增加你的学识，一年左右的时间你将会对Linux和开源世界有一个很好的把握。 \n\n　　我个人曾尝试过至少10种分配方式，4种桌面和五种桌面管理。我最近的文章《 Etymology of A Distro》使我对更多的分配感兴趣，象Zenwalk, Foresight和 Sabayon等。朋友，主动尝试，这对你有好处。 \n\n　　在你尝试之前，你可以参考以下几点： \n\n　　*设置好你感觉最舒服的系统，因为你需要一个时刻工作的系统。这样你就可以按照下面的几点进行尝试 \n　　*你可以利用虚拟机来完成。安装一个Vmware或Virtualbox，用它们来做测试 \n　　*如果你不知道如何运用虚拟机，你可以设置一个独立分区来尝试 \n　　*最好的，你可以用一个设置好的PC，再有一个当作测试用。这样你就可以随心所欲的进行尝试 \n\n 6-熟悉使用你的命令行 \n\n　　虽然我不提倡你一定要学习命令行，有太多的文章一直强调学习命令行的重要性。这里我假设你已经知道他的重要性并且已经知道怎样用它处理一些简单的管理任务。你可以按照指导书和手册做相应的配置。但是不要一味的复制和粘贴。就是说，不止不加思考的执行命令许多有自由天性的人劝诫你要尽量深刻的理解每条命令行的含义，它能做什么。为什么手册上这样做的,而不是那样做？理解你所做步骤的基本原理。 \n\n　　过了一段时间你就会感觉你已经能很好的运用它了。最后你会发现它仅仅是种伪装的语言。每条命令可能只是一些词语的首字母，或一个单词的缩写。你希望你的狗理解“Spike fetch ball”这样的长句，为什么不尝试理解下“sudo mv /file1 /file2”那？ \n\n 7-为你的用武之地做些准备 \n\n　　我有过很多这样的经历，当有个朋友请求我在他的电脑上做些东西，但是由于他所选择的操作系统会出现糗事。有时候我有急事但是仅有的电脑有很挫的操作系统。不必痛苦，随身戴上你的linux系统，不管是存储在U盘或CD上。有相当多的linux版本很方便的，象Knoppix, DSL和 Puppy Linux等。很惭愧，事实上我自己还没用上这个习惯，我想我也需要言行一致。",
			"added": 1581946000,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581999046,
			"title": "linux 有哪些好用的命令行软件？",
			"body": "wifi-menu\nncdu\ngenfstab",
			"added": 1581999019,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1581999987,
			"title": "Linux常用命令之 BackupYourSystem使用tar命令",
			"body": "本文讲述如何备份你的linux整个系统，这里采用tar命令的方式来备份\n\n**备份前准备工作**\n\n> 在做整个系统的备份前我们要做一些准备工作。\n> 删除所有的emails\n> 清空你的浏览器的一些历史\n> 取消挂载的硬盘等设备\n> 删除家目录里你不想要备份的文件\n\n**开始备份**\n\n> 备份需要使用root账号。我们执行sudo su - root 切换到root账号下面。\n> 切换目录到根目录\n> cd  /\n> 执行tar命令备份\n> tar -cvpzf backup.tar.gz --exclude=/backup.tar.gz --one-file-system / \n> \n> c 创建的意思- create a new backup archive.\n> v 显示详细信息- verbose mode, tar will print what it's doing to the screen.\n> p 保持文件权限- preserves the permissions of the files put in the archive for restoration later.\n> z 使用gzip压缩- compress the backup file with 'gzip' to make it smaller.\n> f <filename> 备份后生成的文件- specifies where to store the backup, backup.tar.gz is the filename used in this example. \n>                 It will be stored in the current working directory, the one you set when you used the cd command.\n> \n> --exclude=/example/path 排除某个路径不去备份- The options following this model instruct tar what directories NOT to backup. \n>                 We don't want to backup everything since some directories aren't very useful to include. \n>                 The first exclusion rule directs tar not to back itself up, this is important to avoid errors during the operation.\n> \n> --one-file-system 的意思是 不包含其他文件系统- Do not include files on a different filesystem\n\n\n**另外一种使用完全手动指定备份目录，不备份的目录**\n\n> cd / # THIS CD IS IMPORTANT THE FOLLOWING LONG COMMAND IS RUN FROM /\n> \n> tar -cvpzf backup.tar.gz \\\n> --exclude=/backup.tar.gz \\\n> --exclude=/proc \\\n> --exclude=/tmp \\\n> --exclude=/mnt \\\n> --exclude=/dev \\\n> --exclude=/sys \\\n> --exclude=/run \\ \n> --exclude=/media \\ \n> --exclude=/var/log \\\n> --exclude=/var/cache/apt/archives \\\n> --exclude=/usr/src/linux-headers* \\ \n> --exclude=/home/*/.gvfs \\\n> --exclude=/home/*/.cache \\ \n> --exclude=/home/*/.local/share/Trash /\n\n\n**备份后切分为小的文件**\n\n> 通过管道一次行的切分好文件\n> tar -cvpz <put options here> / | split -d -b 3900m - /name/of/backup.tar.gz. \n> \n> 这个是打包后在单独切分文件\n> split -d -b 3900m /path/to/backup.tar.gz /name/of/backup.tar.gz. \n> \n> 切分后的文件怎么解压\n> cat *tar.gz* | tar -xvpzf - -C /  \n\n\n**通过网络备份**\n\n> 接收端\n> nc -l 1024 > backup.tar.gz \n> \n> 发送端\n> tar -cvpz <all those other options like above> / | nc -q 0 <receiving host> 1024 \n> \n> \n> 更好的方式通过ssh传输\n> tar -cvpz <all those other options like above> / | ssh <backuphost> \"( cat > ssh_backup.tar.gz )\"\n\n\n**怎么恢复**\n\n> 把硬盘挂载到/media 下面\n> ls /media\n> sudo tar -xvpzf /path/to/backup.tar.gz -C /media/whatever --numeric-owner\n> \n> mkdir /proc /sys /mnt /media \n> \n> 恢复 grub\n> sudo -s\n> for f in dev dev/pts proc ; do mount --bind /$f /media/whatever/$f ; done\n> chroot /media/whatever\n> dpkg-reconfigure grub-pc\n> \n\n**我备份打包这个系统是准备作为一个docker image来使用的**\n\n> 使用docker导入我们刚刚备份的文件\n> docker import  /path/to/your.tar.gz\n> 最后可以导入成功的，然后还可以运行起来。这样里面的环境都是我们之前物理系统上的，之前安装好的软件，配置号的环境都是存在的。\n> \n> \n> docker import backup.tar.gz bs-ubuntu-14.04\n> \n> docker run -it bs-ubuntu-14.04 /bin/bash\n",
			"added": 1582000689,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582005300,
			"title": "让程序员梦寐以求的编程语言，实现编程的完美开发（上）",
			"body": "我的朋友曾对一位著名的操作系统专家说他想要设计一种真正优秀的编程语言。那位专家回答，这是浪费时间，优秀的语言不一定会被市场接受，很可能无人使用，因为语言的流行不取决于它本身。至少，那位专家设计的语言就遭遇到了这种情况。\n\n那么，语言的流行到底取决于什么因素呢？流行的语言是否真的值得流行呢？还有必要尝试设计一种更好的语言吗？如果有必要的话，怎样才能做到这一点呢？\n\n为了找到这些问题的答案，我想我们可以观察黑客，了解他们使用什么语言。编程语言本来就是为了满足黑客的需要而产生的，当且仅当黑客喜欢一种语言时，这种语言才能成为合格的编程语言，而不是被当作“指称语义”（denotational semantics）或者编译器设计。\n\n流行的秘诀\n没错，大多数人选择某一种编程语言，不是因为这种语言有什么独特的特点，而是因为听说其他人使用这种语言。但是我认为，外界因素对于编程语言的流行其实没有想象中那么大的影响力。我倒是觉得，问题出在对于什么是优秀编程语言，黑客的看法与大多数的语言设计者不一样。\n\n黑客的看法其实比语言设计者的更重要。编程语言不是数学定理，而是一种工具，为了便于使用，它们才被设计出来。所以，设计编程语言的时候必须考虑到人类的长处和短处，就像设计鞋子的时候必须符合人类的脚型。如果鞋子穿上去不舒服，无论它的外形多么优美，多么像一件艺术品，你也只能把它当作一双坏鞋。\n\n大多数程序员也许无法分辨语言的好坏。但是，这不代表优秀的编程语言会被埋没，专家级黑客一眼就能认出它们，并且会拿来使用。虽然他们人数很少，但就是这样一小群人写出了人类所有优秀软件。他们有着巨大的影响力，他们使用什么语言，其他程序员往往就会跟着使用。老实说，很多时候这种影响力更像是一种命令，对于其他程序员来说，专家级黑客就像自己的老板或导师，他们说哪种语言好用，自己就会乖乖地跟进。\n\n专家级黑客的看法不是决定一种语言流行程度的唯一因素，某些古老的软件（Fortran和Cobol的情况）和铺天盖地的广告宣传（Ada和Java的情况）也会起到作用。但是，我认为从长期来看，专家级黑客的看法是最重要的因素。只要有了达到“临界数量”（critical mass）的最初用户和足够长的时间，一种语言可能就会达到应有的流行程度。而流行本身又会使得这种优秀的语言更加优秀，进一步拉大它与平庸语言之间的好坏差异，因为使用者的反馈总是会导致语言的改进。你可以想一下，所有流行的编程语言从诞生至今的变化有多大。Perl和Fortran是极端的例子，除它们两个之外，甚至就连Lisp都发生了很大的变化。\n\n所以，即使不考虑语言本身的优秀是否能带动流行，我想单单流行本身就肯定会使得这种语言变得更好，只有流行才会让它保持优秀。编程语言的最高境界一直在发展之中。虽然语言的核心功能就像大海的深处，很少有变化，但是函数库和开发环境之类的东西就像大海的表面，一直在汹涌澎湃。\n\n当然，黑客必须先知道这种语言，才可能去用它。他们怎么才能知道呢？就是从其他黑客那里。所以不管怎样，一开始必须有一群黑客使用这种语言，然后其他人才会知道它。我不知道“一群”的最小数量是多少，多少个黑客才算达到“临界数量”呢？如果让我猜，我会说20人。如果一种语言有20个独立用户，就意味这20个人是自主决定使用这种语言的，我觉得这就说明这种语言真的有优点。\n\n达到这一步并非易事。如果说用户数从0到20比从20到1000更困难，我也不会感到惊讶。发展最早的20个用户的最好方法可能就是使用特洛伊木马：你让人们使用一种他们需要的应用程序，这个程序偏巧就是用某种新语言开发的。\n\n外部因素\n我们得先承认，确实有一个外部因素会影响到语言的流行。一种语言必须是某一个流行的计算机系统的脚本语言（scripting language），才会变得流行。Fortran和Cobol是早期IBM大型机的脚本语言。C是Unix的脚本语言，后来的Perl和Python也是如此。Tcl是Tk的脚本语言，Visual Basic是Windows的脚本语言，（某种形式的）Lisp是Emacs的脚本语言，PHP是网络服务器的脚本语言，Java和JavaScript是浏览器的脚本语言。\n\n编程语言不是存在于真空之中。“编程”其实是及物动词，黑客一般都是为某个系统编程，在现实中，编程语言总是与它们依附的系统联系在一起的。所以，如果你想设计一种流行的编程语言，就不能只是单纯地设计语言本身，还必须为它找到一个依附的系统，而这个系统也必须流行。除非你只想用自己设计的语言取代那个系统现有的脚本语言。\n\n这种情况导致的一个结果就是，无法以一种语言本身的优缺点评判这种语言。另一个结果则是，只有当一种语言是某个系统的脚本语言时，它才能真正成为编程语言。如果你对此很吃惊，觉得不公平，那么我会跟你说不必大惊小怪。这就好比大家都认为，如果一种编程语言只有语法规则，没有一个好的实现（implementation），那么它就不能算完整的编程语言。这些都是很正常很合理的事情，编程语言本来就该如此。\n\n当然，编程语言本来就需要一个好的实现，而且这个实现必须是免费的。商业公司愿意出钱购买软件，但是黑客作为个人不会愿意这样做，而你想让一种语言成功，恰恰就是需要吸引黑客。\n\n编程语言还需要有一本介绍它的书。这本书应该不厚，文笔流畅，而且包含大量优秀的范例。布赖恩 · 柯尼汉和丹尼斯 · 里奇合写的《C程序设计语言》（C Programming Language）就是这方面的典范。眼下，我大概还能再加一句，这一类书籍之中必须有一本由O'Reilly公司出版发行。这正在变成是否能吸引黑客的前提条件了。\n\n编程语言还应该有在线文档。事实上，在线文档可以当作一本书来写，但是目前它还无法取代实体书。实体书并没有过时，它们读起来很方便，而且出版社对书籍内容的审核是一种很有用的质量保证机制（虽然做得很不完美）。书店则是程序员发现和学习新语言的最重要的场所之一。\n\n简洁\n假定你的语言已经能够满足上面三项条件——一种免费的实现，一本相关书籍，以及语言所依附的计算机系统——那么还需要做什么才能使得黑客喜欢上你的语言？\n\n黑客欣赏的一个特点就是简洁。黑客都是懒人，他们同数学家和现代主义建筑师一样，痛恨任何冗余的东西或事情。有一个笑话说，黑客动手写程序之前，至少会在心里盘算一下哪种语言的打字工作量最小，然后就选择使用该语言。这个笑话其实与真实情况相差无几。就算这真的是个笑话，语言的设计者也必须把它当真，按照它的要求设计语言。\n\n简洁性最重要的方面就是要使得语言更抽象。为了达到这一点，首先你设计的必须是高级语言，然后把它设计得越抽象越好。语言设计者应该总是看着代码，问自己能不能使用更少的语法单位把它表达出来。如果你有办法让许多不同的程序都能更简短地表达出来，那么这很可能意味着你发现了一种很有用的新抽象方法。\n\n不要觉得为用户着想就是让他们使用像英语一样又长又啰嗦的语法。这是不正确的做法，Cobol就是因为这个毛病而声名狼藉。如果你让黑客像下面这样求和：\n\nadd x to y giving z\n\n而不是写成：\n\nz=x+y\n\n那么你就是在侮辱黑客的智商，或者自己作孽了。\n\n简洁性是静态类型语言的力所不及之处。不考虑其他因素时，没人愿意在程序的头部写上一大堆的声明语句。只要计算机可以自己推断出来的事情，都应该让计算机自己去推断。举例来说，hello-world本应该是一个很简单的程序，但是在Java语言中却要写上一大堆东西，这本身就差不多可以说明Java语言设计得有问题了。①\n\n\n① hello-world程序的唯一作用就是显示出“Hello, world!”这句话。使用Java语言，你需要这样写：\n\n\n public class Hello {\n public static void main(String[] args) {\n System.out.println(\"Hello, world!\");\n }\n }\n\n如果你从来没有接触过编程，看到上面的代码可能会很奇怪，让计算机显示一句话为什么要搞得这么复杂？有意思的是，资深程序员的反应与你一样。\n\n\n单个的语法单位也应该很简短。Perl和Common Lisp在这方面是两个不同的极端。Perl的语法单位很短，导致它的代码可以拥挤得让人无法理解，而Common Lisp内置运算符的名称则长得可笑。Common Lisp的设计者们可能觉得文本编辑器会帮助用户自动填写运算符的长名称。但是这样做的代价不仅是增加了打字的工作量，还包括提高了阅读代码的难度，以及占用了更多的显示器空间。\n\n可编程性（Hackability）\n对黑客来说，选择编程语言的时候，还有一个因素比简洁更重要，那就是这种语言必须能够帮助自己做到想做的事。在编程语言的历史上，防止程序员做出“错误”举动的措施多得惊人。这是语言设计者很自以为是的危险举动，他们怎么知道程序员该做什么不该做什么？我认为，语言设计者应该假定他们的目标用户是一个天才，会做出各种他们无法预知的举动，而不是假定目标用户是一个笨手笨脚的傻瓜，需要别人的保护才不会伤到自己。如果用户真的是傻瓜，不管你怎么保护他，他还是会搬起石头砸自己的脚。你也许能够阻止他引用另一个模块中的变量，但是你没法防止他日日夜夜不知疲倦地写出结构混乱的程序去解决完全错误的问题。\n\n优秀程序员经常想做一些既危险又令人恼火的事情。所谓“令人恼火”，我指的是他们会突破设计者提供给用户的外部语义层，试着控制某些高级抽象的语言内部接口。比如，黑客喜欢破解，而破解就意味着深入内部，揣测原始设计者的意图。\n\n你应该敞开胸怀，欢迎这种揣测。对于制造工具的人来说，总是会有用户以违背你本意的方式使用你的工具。如果你制造的是编程语言这样高度组合的系统，那就更是如此了。许多黑客会用你做梦也想不到的方式改动你的语法模型。我的建议就是，让他们这样干吧，而且应该为他们创造便利，尽可能多地把语言的内部暴露在他们面前。\n\n其实，黑客并不会彻底颠覆你的工具，在一个大型程序中，他可能只是对语言改造一两个地方。但是，改动多少地方并不重要，重要的是他能够对语言进行改动。这可能不仅有助于解决一些特殊的问题，还会让黑客觉得很好玩。黑客改造语言的乐趣就好比外科医生摆弄病人内脏的乐趣，或者青少年喜欢用手挤破青春痘的那种感觉。②至少对男生来说，某些类型的破坏非常刺激。针对青年男性读者的Maxim杂志每年出版一本特辑，里面一半是美女照片，另一半是各种严重事故的现场照片。这本杂志非常清楚它的读者想看什么。\n\n\n② 在《神经外科医生手记》（When the Air Hits Your Brain）一书中，神经外科医生弗托塞克讲述了住院总医生戈雷的一段话，内容关于外科医生与内科医生的区别。\n\n\n戈雷和我要了一个大比萨，找了一张空桌子坐下。他点起一根香烟，说：“那些内科医生真是令人讨厌，总是喜欢谈论一辈子只能遇到一次的病例。这就是他们的问题，他们只喜欢古怪的东西，讨厌普通的常见病例。这就是我们和他们的区别。你看，我们喜欢腰椎间盘突出，觉得像比萨一样又大又好吃，但是他们看到高血压就憎恨不已……”\n\n\n很难把腰椎间盘突出与又大又好吃联系在一起，但是，我想我知道他们指的是什么。我经常觉得某个bug非常诱人，一定要追踪下去。不是程序员的人很难想象bug有什么好玩的。一切正常当然很好，但是不可否认，能够抓到某些bug会让人兴奋到极点。\n\n\n一种真正优秀的编程语言应该既整洁又混乱。“整洁”的意思是设计得很清楚， 内核由数量不多的运算符构成，这些运算符易于理解，每一个都有很完整的独立用途。“混乱”的意思是它允许黑客以自己的方式使用。C语言就是这样的例子，早期的Lisp语言也是如此。真正的黑客语言总是稍微带一点放纵不羁、不服管教的个性。\n\n优秀的编程语言所具备的功能，应该会使得言必称“软件工程”的人感到非常不满、频频摇头。与黑客语言形成鲜明对照的就是像Pascal那样的语言，它是井然有序的模范，非常适合教学，但是除此之外就没有很大用处了。\n\n一次性程序\n为了吸引黑客，一种编程语言必须善于完成黑客想要完成的各种任务。这意味着它必须很适合开发一次性程序。这一点可能出乎很多人的意料。\n\n所谓一次性程序，就是指为了完成某些很简单的临时性任务而在很短时间内写出来的程序。比如，自动完成某些系统管理任务的程序，或者（为了某项模拟任务）自动生成测试数据的程序，以及在不同格式之间转化数据的程序等。令人吃惊的是，一次性程序往往不是真的只用一次，就像二战期间很多美国大学造的一大批临时建筑后来都成了永久建筑。许多一次性程序后来也都变成了正式的程序，具备了正式的功能和外部用户。\n\n我有一种预感，最优秀的那些大型程序就是这样发展起来的，而不是像胡佛水坝那样从一开始就作为大型工程来设计。一下子从无到有做出一个大项目是很恐怖的一件事。当人们接手一个巨型项目时，很容易被它搞得一蹶不振。最后，要么是项目陷入僵局，要么是做出来一个规模小、性能差的东西。你想造一片闹市，却只做出一家商场；你想建一个罗马，却只造出一个巴西利亚；你想发明C语言，却只开发出Ada。\n\n开发大型程序的另一个方法就是从一次性程序开始，然后不断地改进。这种方法比较不会让人望而生畏，程序在不断的开发之中逐渐进步。一般来说，使用这种方法开发程序，一开始用什么编程语言，就会一直用到最后，因为除非有外部政治因素的干预，程序员很少会中途更换编程语言。所以，我们就有了一个看似矛盾的结论：如果你想设计一种适合开发大型项目的编程语言，就必须使得这种语言也适合开发一次性程序，因为大型项目就是从一次性程序演变而来的。\n\nPerl就是一个鲜明的例子。它不仅仅设计成适合开发一次性程序，而且它本身就很像一次性程序。最初的Perl只是好几个生成表格的工具收集在一起而已。后来程序员用它写一次性程序，当那些程序逐渐发展壮大后，Perl才随之发展成了一种正式的编程语言。到了Perl 5，这种语言才适合开发重要的程序，但是在此之前它已经广为流行了。\n\n什么样的语言适合写一次性程序？首先，它必须很容易装备。一次性程序是你只想在一小时内写出来的程序，所以它不应该耗费很多时间安装和配置，最好已经安装在你的电脑上了。它必须是想用就用的。C语言可以想用就用，因为它是操作系统的一部分；Perl可以想用就用，因为它本来就是一种系统管理工具，操作系统已经默认安装它了。\n\n很容易装备不仅仅指很容易安装或者已经安装，还指很容易与使用者互动。一种有命令行界面、可以实时反馈的语言就具有互动性，那些必须先编译后使用的语言就不具备互动性。受欢迎的编程语言应该是前者，具有良好的互动性，可以快速得到运行结果。\n\n一次性程序的另一个特点就是简洁。对黑客来说，这一点永远有吸引力。如果考虑到你最多只打算在这个程序上耗费一个小时，这一点就更重要了。\n\n函数库\n简性的最高形式当然是有人已经帮你把程序写好，你只要运行就可以了。函数库就是别人帮你写好的程序，所以它是编程语言的另一个重要特点，并且我认为正在变得越来越重要。Perl就赢在它具有操作字符串的巨大函数库。这类函数库对一次性程序特别重要，因为开发一次性程序的原始目的往往就是转化或提取字符串。许多Perl程序的原型可能就是把几个函数库调用放在一起。\n\n我认为，未来50年中，编程语言的进步很大一部分与函数库有关。未来的函数库将像语言内核一样精心设计。优秀函数库的重要性将超过语言本身。某种语言到底是静态类型还是动态类型、是面向对象还是函数式编程，这些都不如函数库重要。那些习惯用变量类型考虑问题的语言设计者可能会对这种趋势感到不寒而栗。这不等于把语言设计降到开发应用程序的层次吗？哦，真是太糟了。但是别忘了，编程语言是供程序员使用的，而函数库就是程序员需要的东西。\n\n设计优秀的函数库是很难的，并不只是写一大堆代码而已。一旦函数库数量变得太多，找到一个你需要的函数有时候还不如自己动手写来得快。函数库的设计基础与语言内核一样，都是一个小规模的正交集合。函数库的使用应该符合程序员的直觉，让他可以猜得出哪个函数能满足自己的需要",
			"added": 1582005271,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582005366,
			"title": "符合直觉的编程语言",
			"body": "Common Lisp",
			"added": 1582005336,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582009415,
			"title": "有像 Q-Dir 那样的默认四等分的 linux终端吗？",
			"body": "",
			"added": 1582009384,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582036051,
			"title": "怎么提高 linux桌面用户体验？",
			"body": "右键集成\n创建快捷方式",
			"added": 1582036019,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582079792,
			"title": "linux 怎么硬盘安装windows ？",
			"body": "",
			"added": 1582079759,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582182419,
			"title": "如何评价加班文化？",
			"body": "",
			"added": 1582182385,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582193605,
			"title": "Linux 给我的七个宝贵教训",
			"body": "在日常使用过程中，作为时下主流操作系统之一的 Linux，还存在哪些坑？以及从它的应用过程中，我们还可以挖掘出哪些鲜为人知的奥秘？\n\n在日常使用过程中，作为时下主流操作系统之一的 Linux，还存在哪些坑？以及从它的应用过程中，我们还可以挖掘出哪些鲜为人知的奥秘？\n\n作者 | Nebojsa.todorovic\n\n译者 | 苏本如，责编 | 屠敏\n\n以下为译文：\n\n孩子们，当你看到一个拥有法律学位的自由撰稿人写了这篇关于Linux的文章，你会不会觉得这是件很有趣的事情？\n\n有时候，你不能选择老师，也不能选择会学到什么经验教训。但是，归根结底，这真的重要吗？只要你得到宝贵的教训，你就可以从中受益，对吧？然而，谁又能想到我决定从Windows切换到Linux后，会给我一些令人惊讶的结论呢？\n\n我认为我们的天性会让我们看到我们周围的“迹象”，从最不寻常和最不期望的情况中学到关于商业和生活的重要“教训”。说实话，我对Linux的历史和它的创始人都一无所知，我是一个不想给自己找麻烦的用户。我在想，我学到的教训可能也适合用任何其他操作系统来取代Windows的情况。\n\n这些教训一定有其原因，我把它们称为我应该记住的教训，而且我会试着在今后的很长一段时间都会应用它们。\n\n教训1：创造性思考,打破常规，此路不通就走一条新路。\n\n因为笔记本电脑上的驱动程序出了问题，我正处于神经崩溃的边缘。我绞尽脑汁想把它修好。我陷入了一个恶性循环。我只有Windows 10可以工作，但是它没有合适的驱动程序。\n\n最终，在浪费了那么多时间和金钱却一无所获之后，我决定要么扔掉它，要么免费送给我的一些朋友或堂兄弟们。想象一下你正在工作，比如说打字的时候，突然间你的电脑无预警地重新重启了，而且这种情况，有时候一周一次，有时候一天五次，你能忍受吗？反正我受不了了。忍无可忍之下，我切换到了Linux。\n\n从那以后一切风平浪静。Linux证明了它对于那些不是特别强大的机器是非常有用的。我相信我的成功的关键在于换了一个新的角度和方法。既然这条路走不通，那就换条路走。\n\n我知道这听起来像是一个众所周知的名言，但是有时候，下决心离开安全的道路而进入未知领域的决定，是非常不容易做出的。\n\n教训2：生活中容不得偏见\n\n你们猜得到是谁推荐我使用Linux的吗？是我的邻居，一个水管工。他在我家附近修理东西，他肯定注意到了我的焦头烂额的状况，然后他和我提到了Linux。但我根本没有注意。为什么？因为他是个水管工，能对电脑和其他东西了解多少？但是结果我发现，和我交谈的竟然是一个了不起的Linux专家业余爱好者。然而，我却是在忍受了六个月的煎熬后才给他打了一个关于Linux的电话。六个月无休无止的痛苦，都是因为我又笨又瞎。\n\n如果你想向前迈进，那么你就必须丢掉偏见。因为你不知道谁或者什么可以帮助你克服困难。\n\n教训3：总是能找到免费软件，作为替代品。\n\nLinux非常容易安装和使用。尽管我乐意为一个能帮助我完成工作的解决方案买单。然而，开源平台却给我带来令人耳目一新的变化。作为一个撰稿人，我无法想象一分钟没有Office软件的痛苦。Linux有自己的Office软件版本，叫做LibreOffice。它也是免费的。Grammarly在LibreOffice的文档中不能直接工作。但是，您可以使用Grammarly的Web版本作为应用程序，并以相同的方式检查你的文档。\n\n另外，我可以把我的文档用正确的.doc和.docx格式保存，而不必为在Windows下使用Office软件的客户担心。在你开始创业并试图将你现有的业务发展壮大时，通常意味着你的资源有限。不管你做什么，你都需要某种软件。\n\n现在，最好用的软件总是不便宜。但是，你总能找到一个免费的替代品，帮助你达到下一个阶段。\n\n教训4：如果你不能够独立，就永远不会成功\n\n你知道我最讨厌Windows的是什么吗？这个系统让我如此依赖。我自己不知道怎么安装Windows。每当我遇到大问题时，我都得求助别人或使用付费服务。\n\n我记得我做销售的时候。我和我的一个大客户聊天。你知道的，聊天内容都是些关于工厂，机器和所有相关的一切的。我的这个客户生产铝和聚氯乙烯门窗。他告诉我他熟悉他的工作的方方面面。他可以一个人走进生产车间，然后一个人独立完成所有的工作。当然，当有几十个工人在附近闲逛的时候，他一个人不可能达到通常的生产速度。但是，他做到了完全依靠自己。需要的时候，他能找到新工人，然后自己把他们训练得很好。\n\nLinux给了我一直梦想的自由和控制。直到今天，我在使用Linux中还没有遇到过我自己无法解决的问题。我可以在几分钟内安装这个系统。至少，我现在知道怎么做了。\n\n我相信真正成功的人都能够不依赖别人来完成所有的工作。他们是独立的，并且能够组织其他人，正确有效地实现他自己的愿景。没有独立的知识、技能和工具，就没有成功。\n\n教训5：做你自己的“少数派报告”\n\n我一辈子都在听人说起和使用Windows.。对我来说，使用其他系统简直是不可思议的。尝试一个全新的事物虽然令人兴奋，但是也有点冒险。\n\n冒险的结果怎么样呢？结果证明了这是一个很好的选择，一个完全值得的选择。这是一个很好的教训。如果你想在生活中得到不同的结果，那么你必须做一些不同的事情。不要害怕成为自己的“少数派报告”。\n\n我认识的朋友和同事中很少有人使用Linux。这意味着他们正在做的事情是对或是错呢？\n\n教训6：大卫对歌利亚的战争（注：指实力悬殊两者间的战争）并不总是有一个愉快的结局，但是仍然值得一试\n\n无论市场上发生什么事，微软老爷爷永远都是传奇人物。也许，无论Linux将来会有多么成功，在微软面前它都将是一个弱者的身份。\n\n我想到了开发Linux的人。他们得到了什么回报叶绿素？他们有钱吗？他们快乐吗？但是，我相信他们得到了可以称之为他们自己的东西。他们本来可以在世界上任何一家软件公司获得成功，并获得高薪，包括微软本身。然而，他们决定建造一些不同的东西，属于他们自己的东西。\n\n当你在进行你最大的战斗时，默认情况下，你都会面对着你自己的歌利亚。通常你得承受不公平的机会，但是还是值得一试的，不是吗？\n\n教训7：未来属于不愿接受现状的人\n\n谁喜欢事情拖拖拉拉？你很难找到一个人来勉强接受它。我们都想拥有美好的一切，而且最重要的是，我们想要快速拥有这一切的美好。从另一个角度来看，如果你都活不到一件事情的成功地满足你期望的那一刻，那么即使它能快速成功又有什么用呢？\n\n我从其他Linux用户那里听到一句话：Linux用户并不多，但已经尝试的用户将会继续使用，直到世界尽头。有时候，你必须相信你的等待有一个期限，一个月，一年甚至十年也好。如果你决定做一个耐心等待的人，你将不得不听到各种各样的坏消息和好消息。从坏的一面看，你会等到很多这样的消息。好的一面是，从长远来看，或许你会有更好的成功机会。但是，我总是记得《盗梦空间》中斋藤说的一句话：\n\n“你是想放手一搏，还是要等到年华老去，心中充满遗憾，孤独地迈向黄泉路呢？”\n\n在日常使用过程中，作为时下主流操作系统之一的 Linux，还存在哪些坑？以及从它的应用过程中，我们还可以挖掘出哪些鲜为人知的奥秘？\n\n作者 | Nebojsa.todorovic\n\n译者 | 苏本如，责编 | 屠敏\n\n以下为译文：\n\n孩子们，当你看到一个拥有法律学位的自由撰稿人写了这篇关于Linux的文章，你会不会觉得这是件很有趣的事情？\n\n有时候，你不能选择老师，也不能选择会学到什么经验教训。但是，归根结底，这真的重要吗？只要你得到宝贵的教训，你就可以从中受益，对吧？然而，谁又能想到我决定从Windows切换到Linux后，会给我一些令人惊讶的结论呢？\n\n我认为我们的天性会让我们看到我们周围的“迹象”，从最不寻常和最不期望的情况中学到关于商业和生活的重要“教训”。说实话，我对Linux的历史和它的创始人都一无所知，我是一个不想给自己找麻烦的用户。我在想，我学到的教训可能也适合用任何其他操作系统来取代Windows的情况。\n\n这些教训一定有其原因，我把它们称为我应该记住的教训，而且我会试着在今后的很长一段时间都会应用它们。\n\n教训1：创造性思考,打破常规，此路不通就走一条新路。\n\n因为笔记本电脑上的驱动程序出了问题，我正处于神经崩溃的边缘。我绞尽脑汁想把它修好。我陷入了一个恶性循环。我只有Windows 10可以工作，但是它没有合适的驱动程序。\n\n最终，在浪费了那么多时间和金钱却一无所获之后，我决定要么扔掉它，要么免费送给我的一些朋友或堂兄弟们。想象一下你正在工作，比如说打字的时候，突然间你的电脑无预警地重新重启了，而且这种情况，有时候一周一次，有时候一天五次，你能忍受吗？反正我受不了了。忍无可忍之下，我切换到了Linux。\n\n从那以后一切风平浪静。Linux证明了它对于那些不是特别强大的机器是非常有用的。我相信我的成功的关键在于换了一个新的角度和方法。既然这条路走不通，那就换条路走。\n\n我知道这听起来像是一个众所周知的名言，但是有时候，下决心离开安全的道路而进入未知领域的决定，是非常不容易做出的。\n\n教训2：生活中容不得偏见\n\n你们猜得到是谁推荐我使用Linux的吗？是我的邻居，一个水管工。他在我家附近修理东西，他肯定注意到了我的焦头烂额的状况，然后他和我提到了Linux。但我根本没有注意。为什么？因为他是个水管工，能对电脑和其他东西了解多少？但是结果我发现，和我交谈的竟然是一个了不起的Linux专家业余爱好者。然而，我却是在忍受了六个月的煎熬后才给他打了一个关于Linux的电话。六个月无休无止的痛苦，都是因为我又笨又瞎。\n\n如果你想向前迈进，那么你就必须丢掉偏见。因为你不知道谁或者什么可以帮助你克服困难。\n\n教训3：总是能找到免费软件，作为替代品。\n\nLinux非常容易安装和使用。尽管我乐意为一个能帮助我完成工作的解决方案买单。然而，开源平台却给我带来令人耳目一新的变化。作为一个撰稿人，我无法想象一分钟没有Office软件的痛苦。Linux有自己的Office软件版本，叫做LibreOffice。它也是免费的。Grammarly在LibreOffice的文档中不能直接工作。但是，您可以使用Grammarly的Web版本作为应用程序，并以相同的方式检查你的文档。\n\n另外，我可以把我的文档用正确的.doc和.docx格式保存，而不必为在Windows下使用Office软件的客户担心。在你开始创业并试图将你现有的业务发展壮大时，通常意味着你的资源有限。不管你做什么，你都需要某种软件。\n\n现在，最好用的软件总是不便宜。但是，你总能找到一个免费的替代品，帮助你达到下一个阶段。\n\n教训4：如果你不能够独立，就永远不会成功\n\n你知道我最讨厌Windows的是什么吗？这个系统让我如此依赖。我自己不知道怎么安装Windows。每当我遇到大问题时，我都得求助别人或使用付费服务。\n\n我记得我做销售的时候。我和我的一个大客户聊天。你知道的，聊天内容都是些关于工厂，机器和所有相关的一切的。我的这个客户生产铝和聚氯乙烯门窗。他告诉我他熟悉他的工作的方方面面。他可以一个人走进生产车间，然后一个人独立完成所有的工作。当然，当有几十个工人在附近闲逛的时候，他一个人不可能达到通常的生产速度。但是，他做到了完全依靠自己。需要的时候，他能找到新工人，然后自己把他们训练得很好。\n\nLinux给了我一直梦想的自由和控制。直到今天，我在使用Linux中还没有遇到过我自己无法解决的问题。我可以在几分钟内安装这个系统。至少，我现在知道怎么做了。\n\n我相信真正成功的人都能够不依赖别人来完成所有的工作。他们是独立的，并且能够组织其他人，正确有效地实现他自己的愿景。没有独立的知识、技能和工具，就没有成功。\n\n教训5：做你自己的“少数派报告”\n\n我一辈子都在听人说起和使用Windows.。对我来说，使用其他系统简直是不可思议的。尝试一个全新的事物虽然令人兴奋，但是也有点冒险。\n\n冒险的结果怎么样呢？结果证明了这是一个很好的选择，一个完全值得的选择。这是一个很好的教训。如果你想在生活中得到不同的结果，那么你必须做一些不同的事情。不要害怕成为自己的“少数派报告”。\n\n我认识的朋友和同事中很少有人使用Linux。这意味着他们正在做的事情是对或是错呢？\n\n教训6：大卫对歌利亚的战争（注：指实力悬殊两者间的战争）并不总是有一个愉快的结局，但是仍然值得一试\n\n无论市场上发生什么事，微软老爷爷永远都是传奇人物。也许，无论Linux将来会有多么成功，在微软面前它都将是一个弱者的身份。\n\n我想到了开发Linux的人。他们得到了什么回报叶绿素？他们有钱吗？他们快乐吗？但是，我相信他们得到了可以称之为他们自己的东西。他们本来可以在世界上任何一家软件公司获得成功，并获得高薪，包括微软本身。然而，他们决定建造一些不同的东西，属于他们自己的东西。\n\n当你在进行你最大的战斗时，默认情况下，你都会面对着你自己的歌利亚。通常你得承受不公平的机会，但是还是值得一试的，不是吗？\n\n教训7：未来属于不愿接受现状的人\n\n谁喜欢事情拖拖拉拉？你很难找到一个人来勉强接受它。我们都想拥有美好的一切，而且最重要的是，我们想要快速拥有这一切的美好。从另一个角度来看，如果你都活不到一件事情的成功地满足你期望的那一刻，那么即使它能快速成功又有什么用呢？\n\n我从其他Linux用户那里听到一句话：Linux用户并不多，但已经尝试的用户将会继续使用，直到世界尽头。有时候，你必须相信你的等待有一个期限，一个月，一年甚至十年也好。如果你决定做一个耐心等待的人，你将不得不听到各种各样的坏消息和好消息。从坏的一面看，你会等到很多这样的消息。好的一面是，从长远来看，或许你会有更好的成功机会。但是，我总是记得《盗梦空间》中斋藤说的一句话：\n\n“你是想放手一搏，还是要等到年华老去，心中充满遗憾，孤独地迈向黄泉路呢？”\n\n我对Ubuntu Linux的最终看法是：\n\n我的故事有什么寓意？我们都应该成为Linux用户吗？当然，答案是否定的。虽然我所有的笔记本电脑都运行在Linux上，但我的台式电脑仍然在使用Windows。为什么呢？\n\n我猜想，我在家中的女儿们，在谈到Linux时，不会和我有同样的激情。这也不是重点。我的故事用在iOS或其他系统上可能也是一样。\n\n我的观点是，我们应该仔细观察周围的事物，因为我们只是不知道一个宝贵的改变人生的教训藏在哪里。所以，让你的眼睛和大脑对发生在你周围的一切细节保持开放的态度，也许它们就可以帮助你实现你的人生目标。\n\n原文: https://hackernoon.com/seven-invaluable-lessons-linux-taught-me-g92d13247",
			"added": 1582193570,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582194299,
			"title": "怎样提升 Linux 水平?",
			"body": "如果不做开发、不做运维，那么不需要提升 Linux 水平\n可以安装 archlinux、gentoo、exherbo、slackware、LFS\n懂得正规使用 linux的方法：看 man手册，看官方文档\n提高英语水平",
			"added": 1582196434,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582196408,
			"title": "有像 openbsd那样没有任何不必要的后台服务的 linux发行版吗？",
			"body": "",
			"added": 1582196371,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582197723,
			"title": "Windows 有什么好用的命令行软件？",
			"body": "",
			"added": 1582197685,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582197825,
			"title": "一个外行人看Linux的未来 (2014-02-15 00:37:57)",
			"body": "2009-04-1317:23\n\n最近不知道为什么前清华学生王垠的《完全用Linux工作》又被翻出来热炒了（起因可能是在cnBeta那边）。这一通篇充斥着偏执狂情绪的文章竟然被当成经典一样膜拜，真是令人颇为费解。对于Linux始终无法在中国乃至全世界普及，我个人是一点也不奇怪的，在我看来这完全是再正常不过的事情，很多拼命鼓吹Linux的Geek们盯着Linux在桌面消费市场那不到1%的占有率捶胸顿足，百思不得其解实在是非常可笑的现象。我是一个非计算机专业的外行人（英语专业，翻译系），曾经用过OpenSuSELinux、红旗Linux和一些基于Ubuntu的发行版(UbuntuLinux8.04/8.10/gOS3.0)，最后又彻底的把Linux系列从我的硬盘里完全扔出去了。我打算从一个外行人的角度来谈谈Linux不能普及的原因。其实所有的原因概括起来就一句话：不完善的垃圾，即使完全免费，又有谁愿意用？\n\n1.逆向而动的命令行以普通非专业用户为目标的操作系统，其历史发展的趋势，总体上是向着“减少按键次数和命令行使用量，增加图形界面和直觉易用性”的方向发展的。从最初的AppleII到DOS再到Windows和MacOSX（Linux被无视^_^），命令行的使用量不断地减少，而图形界面不断普及，易用性也不断提高。这是操作系统发展的大趋势，Linux试图与这一趋势背道而驰，那么迟迟得不到推广完全是情理之中的事情。当LinuxGeek们高喊着“高效易用的命令行是王道”的时候，微软和苹果却在想尽一切办法在所有可能的地方减少命令行的使用。须知普通的非专业用户是根本不愿意花费任何时间记忆任何命令行的，他们所需要的是使用几次简单的鼠标点击就可以完成的操作过程。他们宁愿多点几次鼠标，也不愿花费时间记忆诸如“sudo”，“apt-get”之类理论上更节省时间的东西。现在Windows和Mac的操作，已经简化到只有三种——单击，拖动和双击，并且这三种操作都是完全不会有任何记忆负担的直观动作。所以，当LinuxGeek们自豪的叫嚣“只需一行命令就可以解决”的时候，他们钟爱的Linux已经注定逃不过失败的命运了。只要Linux还在试图让用户用命令行做这做那，它们就永远不会有普及的那一天。\n\n2.误入歧途的LinuxGUIGUI（GraphicalUserInterface,图形用户界面），是一个现代的大众操作系统所必须的要素，一个没有GUI或者GUI不完善的操作系统，是根本没有办法在大众消费市场生存的。在我这个外行人看来，一个好的GUI需要有三个要素：A.直观、简洁——“直观”，意味着用户可以不用任何事前培训，基本凭直觉就可以完成想要进行的操作。“简洁”，意味着用户可以不用被任何多余的因素所迷惑，在最短的时间内找到自己想要找的东西。B.完善——“完善”，意味着用户能够在GUI上，通过鼠标和简单的按键来完成一切自己想要完成的东西，而不必通过调出终端敲打命令行来完成。C.美观——“美观”，意味着GUI需要有一个令人赏心悦目的外观界面，一个好的界面，对于非专业大众用户来说是非常重要的，这就是为什么现在Windows有各种各样的美化版，而即使是最反对苹果的人也不得不承认MacOSX的用户界面非常成功的原因。观察一下目前Linux的GUI（我只用过GNOME、KDE和gOS的那个不知名的轻量级桌面），以上三条标准几乎都没有符合。2/2在Linux上，GUI始终被错误的视为比命令行低级一等的存在。Linux的GUI一点也不完善，即使是最基本的操作，也需要不时的调出终端来敲打各种奇奇怪怪的命令行来完成；虽然Linux的GUI桌面最近几年在美观度上有了较大的提高，但是却出现了畸形发展的趋势——其完善度并没有太大的提升，却一味的朝着过度华丽的方向发展，看看CompizFusion提供的那些华而不实的3D效果，这些效果对于简化操作，提升用户体验一点帮助也没有，只是一种没有实际作用的炫耀工具。一个GUI不直观，不简洁，不完善，过度奢华的操作系统，是很难在大众消费市场赢得立足之地的。\n\n3.应用软件缺乏，基本需求难以满足一个操作系统要取得成功，除了操作系统本身的易用性以外，大量的第三方软件支持是非常必要的。然而Linux却无法满足这一点。在Linux上，普通非专业用户最基本的需要都没有办法实现。下载和安装新的软件非常麻烦（下载源的寻找，设置和下载速度都很不人性化，安装时的的命令行，GUI问题也是一大软肋），即使是费尽力气安装完成，软件的实际表现也不如在Mac和Windows上的强。那么，还有多少人会选择这个操作系统呢？",
			"added": 1582197786,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		},
		{
			"topic_id": 1582198869,
			"title": "极客的乐趣有哪些？",
			"body": "他们都玩什么？",
			"added": 1582198829,
			"parent_topic_uri": "1571186422_1MvkYQf2rLUspQvPSo18pdJsujt2aXbXB9"
		}
	],
	"topic_vote": {},
	"next_comment_id": 83,
	"comment": {
		"1581556743_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 1,
				"body": "翻墙软件：竟然能以正常的速度下载文件",
				"added": 1581556787
			}
		],
		"1581556814_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 2,
				"body": "**SmallTalk**\nsmalltalk 编写的软件可以像虚拟机一样暂停、保存快照",
				"added": 1581556907
			}
		],
		"1577836120_1MityxAx6QVFTYWjzSJFc6nCX6eyT5W5yQ": [
			{
				"comment_id": 3,
				"body": "创建一个不能被搜索引擎找到的论坛，保持小众",
				"added": 1581557406
			},
			{
				"comment_id": 4,
				"body": "linux 研究成果汇总（提高易用性）：\n&nbsp;  \n1 wine 软件\n2 wps 字体\n3 国内 linux软件\n4 目录合并功能\n5 tty 中文支持\n6 tty 中文输入法",
				"added": 1581557567
			},
			{
				"comment_id": 5,
				"body": "下载软件无需翻墙的方法：\n&nbsp;  \n1 使用替代软件\n2 使用其他发行版的软件\n3 使用win上的软件管家",
				"added": 1581557720
			},
			{
				"comment_id": 6,
				"body": "辅助工具\n解决实际问题才是最重要的",
				"added": 1581557878
			},
			{
				"comment_id": 7,
				"body": "欢迎来到大佬交流群",
				"added": 1581560818
			},
			{
				"comment_id": 13,
				"body": "现在是网络时代，计算机是必须要了解的\n学会linux可以自己搭梯子，正常上网\n看不懂怎么办？看的次数多了自然就能懂了\n感谢 RTFM\n计算机技能和其他技能\nlinux 学习难度还是挺高的，不过习惯了就不难了",
				"added": 1581603935
			},
			{
				"comment_id": 14,
				"body": "想学习 linux，请使用 slackware\n想精通 linux，请使用 LFS\n想使用 linux，请使用 ubuntu",
				"added": 1581604081
			},
			{
				"comment_id": 15,
				"body": "linux 非常自由，各种发行版非常头疼\n喜欢使用命令行\n从小使用 linux ,长大就习惯了\nlinux 很好用，这是建立在懂的前提下，如果一点都不懂的话，使用起来会很痛苦",
				"added": 1581605038
			},
			{
				"comment_id": 17,
				"body": "windows说适合普通人使用，如果你不是傻子，就先把你变成傻子，然后说 windows傻子也能使用\nwindows 软件卸载不干净，文件不让删除\n程序员不喜欢不能掌控的东西",
				"added": 1581650047
			},
			{
				"comment_id": 18,
				"body": "关于包管理器的依赖性\npkgtool：只是shell脚本\nportage：依赖 c和python\npaludis ：依赖 c++\ndnf：未知",
				"added": 1581667116
			},
			{
				"comment_id": 19,
				"body": "一个好的操作系统应该尽可能少的需要手工干预",
				"added": 1581667616
			},
			{
				"comment_id": 20,
				"body": "绞尽脑汁的思考\n现在的新人这么厉害吗？\n遇到了一个神级玩家",
				"added": 1581722768
			},
			{
				"comment_id": 21,
				"body": "强制进行有序化思考",
				"added": 1581758487
			},
			{
				"comment_id": 22,
				"body": "linux比windows好玩多了，发行版和包管理竟然能玩出那么多的花样\n经过时间考验活下来的发行版\n作为一个 linux爱好者，要深入了解 linux\n了解这么多年linux的变化\n电脑这么多年了，运行win10最新版不太兼容了，各种功能不太好使，安装linux倒是兼容性很好",
				"added": 1581760588
			},
			{
				"comment_id": 23,
				"body": "烧脑学习中，RTFM",
				"added": 1581760711
			},
			{
				"comment_id": 24,
				"body": "GTD就是Getting Things Done的缩写，翻译过来就是“把事情处理完”，是一个管理时间的方法。GTD的核心理念概括就是必须记录下来要做的事，然后整理安排并使自己一一去执行。GTD的五个核心原则是：收集、整理、组织、回顾、执行。\n&nbsp;  \nGTD的核心理念在于清空大脑，然后一步步按照设定的路线去努力执行。",
				"added": 1581761024
			},
			{
				"comment_id": 25,
				"body": "面对各种不同的想法，心平气和、冷静、（冰冷）、有耐心多了，这是因为见识的多了\n做事情要考虑它的后果，方法的可行性",
				"added": 1581761547
			},
			{
				"comment_id": 26,
				"body": "玩 linux要耐心一点\n这是折腾的最后一个linux了，以后不在继续折腾了\n持续收集信息",
				"added": 1581773460
			},
			{
				"comment_id": 28,
				"body": "零网真是一个好地方\n打破牛角尖就能见到一个新的天地",
				"added": 1581766628
			},
			{
				"comment_id": 29,
				"body": "win10 滚挂了",
				"added": 1581767983
			},
			{
				"comment_id": 31,
				"body": "万事通",
				"added": 1581771069
			},
			{
				"comment_id": 32,
				"body": "记在我的小本本上",
				"added": 1581773604
			},
			{
				"comment_id": 36,
				"body": "\\#23 你用过 ag 和 rg 吗",
				"added": 1581857297
			},
			{
				"comment_id": 37,
				"body": "muchrooms\n2018-12-28 11:20:59 +08:00\n@wwhc 没错，老系统只要 portage 拉起来了基本就稳了，然而它太依赖 python 了。。这个过程很痛苦，Linux 有太多包依赖 python，解决这些问题本身就很复杂\n\n@muchrooms #44 太依赖 python 这个解释型语言是个缺点，gentoo 无法做到不依赖 shell，perl，python。\n所以找了好久找到了 https://exherbo.org ，好在 paludis 是 c/c++实现的，之前切换后用了半年吧，桌面用 weston+flatpkg 版 Firefox 基本当 chrome os 用。不喜欢 gentoo 的 gentoo 用户可以尝试下。",
				"added": 1581859267
			},
			{
				"comment_id": 38,
				"body": "好用的命令行软件：wifi-menu\n\n看了一会儿小说，觉得还是玩 linux有意思",
				"added": 1581859832
			},
			{
				"comment_id": 39,
				"body": "linux 任务：\n统计本月哪个软件使用的流量最多",
				"added": 1581859672
			},
			{
				"comment_id": 40,
				"body": "likuku\n2018-12-28 00:27:38 +08:00\n@wwhc 可能当年在多年工作里用 gentoo， 遇到各种相对老旧（半年以上没滚过）系统更新（然而又是必须），\n滚挂真是遇到太多次了，各种歪门邪道 /黑魔法 来修复滚炸的系统，手工装二进制 bash，python，emerge\n\n各种酸爽...\n\n但的确 gentoo livecd 真好用，init rc 脚本真是很容易订制，系统可以体积很小，默认就自带编译工具链... 方便",
				"added": 1581859901
			},
			{
				"comment_id": 41,
				"body": "依赖问题很烦人，但是 snap和flatpak 下载太慢了，只好降低需求了\n软件太新意味着不稳定\n生活在一个没有声音、没有通知的 linux世界中\n资料的多少是由众人的努力决定的",
				"added": 1581860775
			},
			{
				"comment_id": 42,
				"body": "Freenet FMS挺好用的，速度慢可以过滤掉没有耐心的人\n虽然包管理器很方便，还是要为没有网络的环境作准备\n软件安装后就不打算更新了\n系统要经过长时间的打磨才能变得稳定",
				"added": 1581863014
			},
			{
				"comment_id": 43,
				"body": "改善这个环境，有人愿意做吗？\n关于 linux对商业软件的支持情况\n发现问题才能想办法解决问题\n图形界面是变化的，命令行是不变的",
				"added": 1581864299
			},
			{
				"comment_id": 45,
				"body": "还是商业操作系统省事\n虽然应用商店安装软件简单，但是我不知道它安装了哪些包",
				"added": 1581864211
			},
			{
				"comment_id": 46,
				"body": "我会在这里分享我的折腾经验\n折腾累了，暂时不想折腾了\n向发行版提交软件，那么以后系统里就有了这个软件。如果没人做，那就没有\n关于 linux桌面的完善程度\n我没有更多的需求了",
				"added": 1581865360
			},
			{
				"comment_id": 47,
				"body": "零网论坛没有自动分页功能",
				"added": 1581865009
			},
			{
				"comment_id": 48,
				"body": "还是开箱即用的系统好，各种功能都调教好了\n精简的系统看起来小，使用的时候各种缺东西\n大多数人选择的 linux发行版\n既然没有付费，那就慢慢等着问题解决吧",
				"added": 1581865936
			},
			{
				"comment_id": 49,
				"body": "在零网，这里没有烦人的推送，能看到全凭缘分（同时，交流效率很低）（隐蔽性很好）\n内部版块和外部版块",
				"added": 1581866336
			},
			{
				"comment_id": 50,
				"body": "社区事务管理人员",
				"added": 1581868606
			},
			{
				"comment_id": 51,
				"body": "选择小众操作系统，有问题只能自己解决",
				"added": 1581898016
			},
			{
				"comment_id": 52,
				"body": "做好每一件小事\n我可不管别人的想法，我只按照自己的规则做事\n我不想去搭理那些无聊的人，浪费自己的时间\n长大后就戴上了天空的假面\n生活中的一切事情都是对自己的考验，锻炼自己的心境",
				"added": 1581913041
			},
			{
				"comment_id": 53,
				"body": "不同的发行版对软件的分类方法是不一样的\n装个 i3wm当备用桌面还是挺好的\n",
				"added": 1581938447
			},
			{
				"comment_id": 54,
				"body": "查看目录大小：du  -sh\n查看文件夹大小 win10需要计算半天，linux就不需要",
				"added": 1581946430
			},
			{
				"comment_id": 55,
				"body": "有没有一站式解决方案 ?",
				"added": 1581946999
			},
			{
				"comment_id": 56,
				"body": "平常心",
				"added": 1581969240
			},
			{
				"comment_id": 57,
				"body": "统计数据 得出结论\n使用 linux的正确姿势",
				"added": 1581969966
			},
			{
				"comment_id": 58,
				"body": "桌面保护策略，防止卸载软件时把xorg卸载了",
				"added": 1582012207
			},
			{
				"comment_id": 59,
				"body": "时效性",
				"added": 1582019308
			},
			{
				"comment_id": 60,
				"body": "linux 桌面最新消息：\nlinux 生态\nwayland 生态",
				"added": 1582034980
			},
			{
				"comment_id": 61,
				"body": "KDE 桌面确实厉害",
				"added": 1582035208
			},
			{
				"comment_id": 62,
				"body": "调教 linux\n无尽的文档\n无尽的折腾\n优先使用原生软件，少用 wine",
				"added": 1582036668
			},
			{
				"comment_id": 63,
				"body": "Linux通俗易懂教程\n提高发帖难度，防止不经过思考的行为​\n使用电脑娱乐、工作、交换信息​\n办公三件套​\n学会使用linux——找到最适合自己的发行版——专心做自己的事情​\n信息时代，高效工作的方法​(工作效率)\n生活=信息+行为=修改状态​(过程)\n使用技能赚钱，个人爱好​",
				"added": 1582069144
			},
			{
				"comment_id": 64,
				"body": "linux学习成果：提高自己的能力，就不用等别人的解决方法了，就有了更多的选择权\n软件世界很精彩——各种发行版——命令行的世界​\n虚拟世界和现实世界的关系​，使用电脑不要追求华而不实的东西",
				"added": 1582069165
			},
			{
				"comment_id": 65,
				"body": "使用电脑能做哪些事情?​\n使用电脑——使用软件——​人机交互——符合直觉",
				"added": 1582069182
			},
			{
				"comment_id": 66,
				"body": "查看系统安装了多长时间\n查看自己主动安装了哪些软件\n小白的电脑经常会出现一些奇怪的错误\n不要安装来历不明的软件，除非你知道自己在做什么\n了解 linux桌面的组装过程\n准备一个非常稳定的、日常工作生活使用的系统，和一个折腾使用的系统",
				"added": 1582082632
			},
			{
				"comment_id": 67,
				"body": "刚有点权利就想压制别人是会被揍的",
				"added": 1582072366
			},
			{
				"comment_id": 68,
				"body": "老板欠工资不给可不行，不仅要罢工还要把老板狠狠地揍一顿",
				"added": 1582073842
			},
			{
				"comment_id": 69,
				"body": "统计每个软件的编译时间\n耐得住寂寞、孤独\n继续学习\n软件的学习成本和需要的时间，和产生的收益\n制造、生产人们需要的东西，能卖钱的东西",
				"added": 1582082311
			},
			{
				"comment_id": 70,
				"body": "公司像家一样占用自己的时间",
				"added": 1582078638
			},
			{
				"comment_id": 71,
				"body": "在零网打造一个信息平台，分享最新的消息",
				"added": 1582079163
			},
			{
				"comment_id": 72,
				"body": "尽我所能的去帮助他人\n尽力而为",
				"added": 1582191730
			},
			{
				"comment_id": 73,
				"body": "数据处理课程：\n文本处理\n爬虫\n生成图表\n大数据分析",
				"added": 1582163484
			},
			{
				"comment_id": 74,
				"body": "把世界进行量化，我喜欢清晰的数据，热爱统计数据\n为了提高自己的能力，要少提问，不做伸手党，多自己思考\n为了获得对操作系统更大的控制权，准备学习 LFS\nvoid linux好像没有太大的优点\n使用linux很孤独，是因为懂得太少\nlinux 只有多折腾才能学的会\nlinux 有这么多的发行版，比 windows好玩多了",
				"added": 1582199102
			},
			{
				"comment_id": 75,
				"body": "《文子·上德篇》记载:“老子学于常枞,见舌而守柔。老子曾经跟他学得和悟出什么“道”呢?那就是保持柔弱的生存之道。\n\n据说,有一次常枞病重了,年轻的老子前去探望他。好学的老子不放过任何一个求学的机会,他对常枞说:“先生病得如此重,有什么可以告诉弟子的吗?”\n\n常枞看到老子如此虚心好学,很开心:“就是你不问,我也要说了。”\n\n在中国思想史上，担得起“神龙”般莫测智慧称号的，除了道学文化的创始人老子，恐别人都不敢担起大任。作为中国春秋战国时代最具创造性的哲学家、思想家,道家学派的创始人,老子在综合继承中国股商以前文化传统的基础上,以“道”为核心概念,以“尊道贵德、清静无为、道法自然”为基本原则,创建了中国思想史上第一个系统探讨世界存在始源问题的哲学理论体系。\n\n水有源,树有根。老子也是有老师的。居传老子之师，曾用舌、齿的存亡向老子展示“柔”能长久的道理，老子的“贵柔”之道得益于常枞\n\n《文子·上德篇》记载:“老子学于常枞,见舌而守柔。老子曾经跟他学得和悟出什么“道”呢?那就是保持柔弱的生存之道。\n\n据说,有一次常枞病重了,年轻的老子前去探望他。好学的老子不放过任何一个求学的机会,他对常枞说:“先生病得如此重,有什么可以告诉弟子的吗?”\n\n常枞看到老子如此虚心好学,很开心:“就是你不问,我也要说了。”\n\n常枞对老子说:“经过故乡要下车,你记住了吗?”老子回答:“经过故乡下车,就是要我们不忘旧。”常枞说:“对呀。”又说:“看到乔木就迎上前去,你懂吗?”老子回答:“看到乔木迎上去,就是让我们要够老。”常枞说:“是这样的。”\n\n然后,常枞又张开嘴给老子看了看,问道:“我的舌头还在吗?”老子说:“当然还在。”常枞又问:“我的牙齿还在吗?”老子笑了:“早就没有了。”常枞紧接着问老子:“你知道原因是什么吗?”老子回答:“那舌头之所以存在,是不是因为它很柔软得以生存?牙齿不存在,是不是因为它太刚硬从而丧失?”常枞听了老子的回答,非常满意地说:“回答得太好了!是这样的。世界上的事情都已包容尽了,我还有什么可以再告诉你的呢?”\n\n在中国思想史上，担得起“神龙”般莫测智慧称号的，除了道学文化的创始人老子，恐别人都不敢担起大任。作为中国春秋战国时代最具创造性的哲学家、思想家,道家学派的创始人,老子在综合继承中国股商以前文化传统的基础上,以“道”为核心概念,以“尊道贵德、清静无为、道法自然”为基本原则,创建了中国思想史上第一个系统探讨世界存在始源问题的哲学理论体系。\n\n水有源,树有根。老子也是有老师的。居传老子之师，曾用舌、齿的存亡向老子展示“柔”能长久的道理，老子的“贵柔”之道得益于常枞\n\n《文子·上德篇》记载:“老子学于常枞,见舌而守柔。老子曾经跟他学得和悟出什么“道”呢?那就是保持柔弱的生存之道。\n\n据说,有一次常枞病重了,年轻的老子前去探望他。好学的老子不放过任何一个求学的机会,他对常枞说:“先生病得如此重,有什么可以告诉弟子的吗?”\n\n常枞看到老子如此虚心好学,很开心:“就是你不问,我也要说了。”\n\n常枞对老子说:“经过故乡要下车,你记住了吗?”老子回答:“经过故乡下车,就是要我们不忘旧。”常枞说:“对呀。”又说:“看到乔木就迎上前去,你懂吗?”老子回答:“看到乔木迎上去,就是让我们要够老。”常枞说:“是这样的。”\n\n然后,常枞又张开嘴给老子看了看,问道:“我的舌头还在吗?”老子说:“当然还在。”常枞又问:“我的牙齿还在吗?”老子笑了:“早就没有了。”常枞紧接着问老子:“你知道原因是什么吗?”老子回答:“那舌头之所以存在,是不是因为它很柔软得以生存?牙齿不存在,是不是因为它太刚硬从而丧失?”常枞听了老子的回答,非常满意地说:“回答得太好了!是这样的。世界上的事情都已包容尽了,我还有什么可以再告诉你的呢?”\n\n常枞通过自己的言传身教,让老子明白了“舌存齿亡”的道理,“齿坚于舌而先蔽,舌柔于齿而常存”。后来老子在《道德经》中,写下了“天下之至柔,驰骋天下之至坚”这样的感悟。",
				"added": 1582179989
			},
			{
				"comment_id": 76,
				"body": "每当没有话想说的时候，就删除这个帐号，离开一段时间，下次想起来的时候再过来\n每当离开的时候，就看看这个 \n[分布式网络：为什么我希望retroshare取代zeronet?](http://127.0.0.1:43110/NewGFWTalk.bit/?Topic:4_1EFaGom3n5EzMwybdhEeQQXYG6y1EsaHes/+retroshare+zeronet)",
				"added": 1582192265
			},
			{
				"comment_id": 78,
				"body": "linux 用户有钱就会换 Mac\n每个 linux 用户最终都会有一个自己的 LFS",
				"added": 1582193694
			},
			{
				"comment_id": 79,
				"body": "从普通人成长为大佬后，大佬都离开了",
				"added": 1582195491
			},
			{
				"comment_id": 80,
				"body": "学习之心在燃烧，快让大脑动起来，多独立思考，脑子越用会越好使\n人都是有惰性的，不愿意学习，要克服惰性，要有自制力",
				"added": 1582197310
			},
			{
				"comment_id": 81,
				"body": "传统BBS",
				"added": 1582197710
			},
			{
				"comment_id": 82,
				"body": "使用slackware，恪守古老的守则，思考真正的自由~~，需要很高的技术实力\n真正的自由不是那么容易获得的",
				"added": 1582199228
			}
		],
		"1581562330_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 8,
				"body": "打开全屏的黑色终端，开4 个分屏，运行 top、vim、emacs，最后一个分屏编译软件",
				"added": 1581562930
			}
		],
		"1581584283_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 9,
				"body": "deb 包管理器：apt\nrpm 包管理器：dnf、zypper\nsource 包管理器：emerge\n其他：pacman、 slackpkg",
				"added": 1581588636
			}
		],
		"1579165212_1FfatX3G2z43rV6nc1F3koYtn8tmD5EVb6": [
			{
				"comment_id": 10,
				"body": "Void是基于Linux内核独立开发的通用操作系统。其特色在于一份二进制/源代码混合式包管理系统，这使得用户能快速安装、更新、移除软件，或者是借助XBPS源代码集合从源码直接生成软件。该发行的其他特性包括对Raspberry Pi单板计算机（armv6和armv7）的支持，每日更新的滚动式开发模式，对OpenBSD旗下LibreSSL软件的集成，以及名为runit的原生init系统。",
				"added": 1581592338
			},
			{
				"comment_id": 11,
				"body": "Solus是从无到有创建的Linux发行。它使用PiSi包管理器的一个分支版本，在Solus中以eopkg的名字来维护；它还使用一份自身开发的叫作Budgie的定制桌面环境。Budgie桌面可被配置为能模仿GNOME 2桌面的观感，并被紧密集成到GNOME栈中。该发行只面向64比特计算机提供。",
				"added": 1581592428
			},
			{
				"comment_id": 12,
				"body": "基于Arch Linux的ArchEX 发行版",
				"added": 1581592657
			}
		],
		"1577283367_1DcbdcgJk7mw465FGxYHMkz9zgyNgvpsWY": [
			{
				"comment_id": 16,
				"body": "作为个人电脑没用过，在服务器方面用了，整体感觉是清爽，有一种把控全局的自豪感。可以做主安装或不安装什么包或者依赖，定制内核体验飞一般的流畅。**务必知道，这些积极的体验是建立在 看文档—编译—测试 这种反复劳动之后**。\n发布于 2019-10-01",
				"added": 1581608696
			}
		],
		"1581762153_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 27,
				"body": "伸手党一向很多，不是只有现在才变得这么多。\n\n从小学到大学，一定至少有一个同学问过你：借我作业抄抄。（或者你抄别人）\n\n我们觉得「现在变得这么多」是因为我们的「同学」，不对，应该说是「知乎上的同僚」变多了。而且已经不是学校里一个年级那么多了。各种年级的都有，各个专业的都有。\n\n今天我还在知乎日报上看到有好心的知友在介绍如何查找英文同义词。我心想，这种事情也要麻烦知友来教吗？英文字典查查「同义词」的英文是什么，然后放在 Google 里，第一个搜索结果一定就是网上同义词词典——你觉得你会错过哪个环节？\n其实，我想很多人会像我这样想。但实际上可能是有失偏颇的。因为你并不知道他的基础在哪。\n\n我曾经以为伸手党很容易辨别——自己能找到的信息，自己不去找，那肯定是懒惰的伸手党屌丝——实际上我们想的是：自己（我）能找到的信息，自己（他）不去找，那肯定是伸手党。好像有哪里不太对劲，不是吗？其实，我们真的能给伸手党下定义吗？比如这样的、那样的，就是伸手党了？\n\n几天前，我在一个别人的回答下，各种斟酌后决定问个问题。\n\n结果，我被这位专业人士回复「请自行动脑子」。\n\n我自问没有懒惰，也没有伸手，实际上我把自己要问的问题改了又改，最后想想好像这样问比较稳妥。我并不想要一个正确答案，我只是想提起某一件事，并希望眼前这位大牛能够提点一二，我坚信有很多情况一定是我没有考虑到的，有很多知识不是我不去找，而是我没有意识到它存在。\n\n我想，大多数人上知乎，除了自己的专业外，更希望开阔眼界，了解更大的世界。除去我们自身的专业，其他一切兴趣爱好，都是业余的、自学的。如果在某一方面，你没有同僚，而现有资源又不一定权威（即使花了钱。这在一些产业中很常见），那便会产生极大的不确定。（当然，这因人而异——有的人只知皮毛就觉得自己什么都懂了，我的这个回答不讨论这种人。）\n\n知乎上了解我的人都知道，我这个人有选择性失聪的毛病加持，不喜欢的全当没听见，谁也打击不了我。可那次，我却觉得心凉地像冰山下的泰坦尼克。难道是来自对这个行业的真爱吗？Maybe.\n\n心里很不舒服，于是向他解释，我不是不动脑子，而是这些都是自学，我没有同僚，也没有老师，没有人告诉我怎么做是最好的，只能靠自己多年实践，所以很多事情不确定，才问的。谁知那位答主误以为我在晒资历……\n\n真是跳进黄河也洗不清。\n\n紧接着就蹦出来个无名氏跟着答主一起骂我。\n\n哎。也许我的问题真的很 low。可我不觉得我值得被这样对待。\n\n误要以为从那以后我就洗心革面，对伸手党产生同情。我并没有。只是每当我看到一些疑似伸手党的问题出现在我回答下，或者出现在私信里，我想做的，只是无视。\n\n如果不想理睬，那么就不要理睬。不要讽刺，不要打击。因为你并不知道对方问问题的初衷，究竟是不是令人作呕的懒惰屌丝心态。也许 TA 就是想听你说两句相关的话题，也许就是想寻求个确认，或者，TA 只想和你套个近乎，因为欣赏你。\n\n就算自己不缺爱，也没必要给他人当头一棒。\n\n所以，当没看见就是了。",
				"added": 1581762807
			}
		],
		"1581770339_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 30,
				"body": "win预装软件太多了，很占空间",
				"added": 1581770429
			}
		],
		"1581842069_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 33,
				"body": "conky",
				"added": 1581842092
			}
		],
		"1581851498_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [],
		"1581770203_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 35,
				"body": "total commander\n换 Linux 时最不舍的一个软件\n找了很久， Linux 下没有任何一个能接近的软件，于是慢慢也就没用了",
				"added": 1581856975
			}
		],
		"1581863746_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 44,
				"body": "firefox\nvmware\ncrossover\n商业软件一般都是",
				"added": 1581863825
			}
		],
		"1581999046_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": [
			{
				"comment_id": 77,
				"body": "linux 命令行软件交流群",
				"added": 1582192859
			}
		]
	},
	"comment_vote": {
		"29_1FfatX3G2z43rV6nc1F3koYtn8tmD5EVb6": 1,
		"72_1jqdk1qnBDXUgwVD785o4DEJtUBXiNSb7": 1
	}
}