{
	"title": "Prywatny ZeroBlog",
	"description": "Prywatny blog ey2xjpdx",
	"links": "- [Tablice](http://127.0.0.1:43110/16to1UyQzxdQY8cPau9SSiJJwAiKff2An2/)",
	"next_post_id": 8,
	"demo": false,
	"footer": "Powered by [ZeroNet](https://zeronet.io) [open, free, and uncensored]",
	"modified": 1617484111,
	"post": [
		{
			"post_id": 6,
			"title": "Retroshare",
			"date_published": 1582295445.3,
			"body": "Po długiej przerwie witam się z Wami bardzo serdecznie.\nChciałbym Wam zaprezentować bardzo fajny program. Nazywa się Retroshare\n\n![image alt](img/retroshare-symbol.png)\n\nA co ten program potrafi?\n\n* * *\n\n**Retroshare** tworzy **szyfrowane połączenia** między Tobą a Twoimi przyjaciółmi, aby utworzyć sieć komputerów i zapewnia różne rozproszone usługi tj: fora, kanały, czat, poczta... Retroshare jest w pełni zdecentralizowany i zaprojektowany w celu zapewnienia maksymalnego bezpieczeństwa i anonimowości jego użytkowników poza bezpośrednimi przyjaciółmi. Retroshare jest całkowicie darmowym i otwartym oprogramowaniem. Jest ono dostępne w systemach Android, Linux, MacOS i Windows. Nie ma żadnych ukrytych kosztów, nie ma reklam ani warunków użytkowania.\n\n## **Po co mi to?**\n\n*   **Zdecentralizowana** sieć udostępniania społecznościowego przeznaczona dla ludzi, którzy nie chcą być zależni od żadnego systemu korporacyjnego ani centralnego serwera.\n\n*   **RS** (Retroshare) sprawia, że silne szyfrowanie jest przydatne dla przeciętnego użytkownika komputera do komunikacji z innymi.\n\n*   Daje prawo do posiadania tajemnic. **Ty decydujesz**, kto może otrzymywać informacje. Ukrywaj informacje przed agencjami wywiadowczymi i firmami szpiegowskimi.\n\n*   **Wolność** słowa, **brak cenzury**.\n\n*   **Niezależność** od systemów korporacyjnych i scentralizowanych serwerów. Służby centralne mogą w każdej chwili zamknąć lub zmienić warunki świadczenia usług. Pamiętasz Myspace? Albo niemiecki Studivz? Pamiętasz, kiedy Facebook zmienił ich warunki korzystania z usług? Czy Skype był kupowany przez Microsoft?\n\n*   **Wolne oprogramowanie**. Tylko wolne oprogramowanie może zapewnić wolną i bezpieczną komunikację. Deweloperzy mogą przeczytać kod źródłowy Retroshare i zweryfikować jego bezpieczeństwo.\n\n## **Możliwości RS**\n\n**Chat**\nWysyłaj tekst i obrazy. Rozmawiaj z różnymi osobami na czacie. Wyraź swoje emocje za pomocą bogatego zestawu emotikon. Korzystaj z czatu, aby bezpiecznie rozmawiać z przyjaciółmi.\n\n**Głos i wideo**\nWykonuj bezpłatne i bezpieczne połączenia za pomocą wtyczki VoIP. Rozmowa wideo twarzą w twarz.\n\n**Poczta elektroniczna**\nWysyłaj zaszyfrowane wiadomości do innych członków sieci. Retroshare może przechowywać zaszyfrowane wiadomości na węzłach znajomych w celu dostarczania wiadomości, gdy jesteś offline.\n\n**Udostępnianie plików**\nUdostępniaj pliki swoim znajomym lub całej sieci. Użyj wyszukiwarki, aby znaleźć pliki. Retroshare działa podobnie do BitTorrenta, aby przyspieszyć pobieranie. Dzięki temu można udostępniać duże pliki o pojemności 1 GB lub większej. Twoja prywatność jest chroniona za pomocą anonimowych tuneli. Tylko Twoi bezpośredni przyjaciele mogą dowiedzieć się, jakie pliki pobierasz.\n\n**Fora**\nMożesz czytać i pisać posty na forum w trybie offline. Jest to idealne rozwiązanie, gdy jesteś w ruchu. Gdy masz połączenie internetowe, Retroshare automatycznie synchronizuje fora z Twoimi przyjaciółmi. Zdecentralizowane fora są z założenia odporne na cenzurę.\n\n**Links**\nPodziel się swoimi ulubionymi linkami. Zobacz, które linki lubią inni. Głosuj, oceniaj i dyskutuj o linkach.\n\n**Kanały**\nPublikuj pliki w kanałach. Subskrybuj kanały i automatycznie pobieraj najnowsze pliki. Komentuj pliki i rozpowszechniaj je wśród swoich znajomych.\n\n**Chroń swoje IP za pomocą Tor/I2P**\nChcesz się ukryć przed nadzorem internetowym? Nie możesz połączyć się z przyjaciółmi z powodu cenzury? Musisz ominąć paskudne firewalle? Użyj Retroshare over Tor/I2p, aby ukryć połączenie między tobą a twoimi przyjaciółmi.\n\nZachęcam do wypróbowania. Ja korzystam z RS już ładnych parę lat ( od v 4) i jestem z niego bardzo zadowolony. Trochę problemów miałem z przekonaniem znajomych i rodziny do tego programu (nie ma to jak fejsuś k... j... m...!) Ale Ci co posłuchali nie żałują. Dla mnie to prawdziwy kombajn.\n\nDo ściągnięcia w różnych wersjach S.O. [!!!link zewnętrzny!!! Do strony z paczkami RetroShare.](https://retroshare.cc/downloads.html)\n\nDukumentacja pod tym adresem: [http://docs.retroshare.net/en/latest/](http://docs.retroshare.net/en/latest/) - !!!link zewnętrzny!!!\n\nPozdrawiam Was. Pytania w komentarzach, albo na maila."
		},
		{
			"post_id": 5,
			"title": "Wymiana plików przy pomocy IPFS",
			"date_published": 1550665531.3,
			"body": "## **Co to jest IPFS ?**\n\nInterPlanetary File System (IPFS, ang. „międzyplanetarny system plików”) jest protokołem mającym na celu stworzenie trwałej i zdecentralizowanej metody przechowywania i udostępniania plików.\nIPFS jest adresowany zawartością i działa w oparciu o model peer-to-peer. Węzły sieci IPFS tworzą rozproszony system plików, oparty o blockchain.\n\n* * *\n\nIPFS jest projektem open-source rozwijanym od 2014 roku przez firmę Protocol Labs z pomocą społeczności open-source. Został zaprojektowany przez Juana Beneta ([Wiki](https://pl.wikipedia.org/wiki/InterPlanetary_File_System)).\n\nIPFS ma pewne zalety, które sprawiają, że bardzo atrakcyjne jest dla mnie uzupełnienie go o ZeroNet jako \"serwer\" plików multimedialnych.\n\nJest bardzo prosty w instalacji i nie wymaga konserwacji, pozwala na współdzielenie plików o znacznych rozmiarach, a pliki będą nadal dostępne nawet po wyłączeniu węzła IPFS bez konieczności tak samo dużej zależności jak w Torrent od innych osób dzielących się nim. W prostych krokach wyjaśnię jak używać IPFS na Linuksie (dla innych systemów operacyjnych powinno być podobnie), nie powinno to zająć więcej niż parę minut, aby go uruchomić.\nTyle teorii.\n\n## **To zaczynamy. Krok 1**\n\nPrzejdź do [IPFS](https://docs.ipfs.io/introduction/install/#installing-from-a-prebuilt-package) i pobierz wersję odpowiadającą Twojemu systemowi. Ja opisuję wersję dla linuksa (Debian)\nPo ściągnięciu paczki rozpakuj plik.\n\n```\ntar xvfz [nazwa]\n```\n\nGdzie [nazwa] to plik jaki ściągamy. Następnie:\n\n```\ncd go-ipfs\n```\n\nTeraz jesteśmy w rozpakowanym katalogu i wydajemy komendę:\n\n```\n./install.sh\n```\n\nI to wszystko jeśli chodzi o instalację.\n\n## **Krok 2 - Uruchomienie IPFS**\n\nW terminalu wpisujemy:\n\n```\n ipfs init\n```\n\nTerminal powinien \"wypluć\" mnie-więcej coś takiego:\n\n```\n  ipfs init\ninitializing ipfs node at /Users/jbenet/.go-ipfs\ngenerating 2048-bit RSA keypair...done\npeer identity: Qmcpo2iLBikrdf1d6QU6vXuNb6P7hwrbNPW9kLAH8eG67z\nto get started, enter:\n\nipfs cat /ipfs/QmYwAPJzv5CZsnA625s3Xf2nemtYgPpHdWEz79ojWnPbdG/readme\n```\n\nJa w tym miejscu skopiowałem sobie adres po \"peer identity:\" Można też skopiować go z pliku config, który jest tworzony w katalogu .ipfs Jeśli nie ma błędów to wpisujemy:\n\n```\nipfs daemon\n```\n\nPowinno to wyglądać tak:\n\n```\nipfs daemon\nInitializing daemon...\nAPI server listening on /ip4/127.0.0.1/tcp/5001\nGateway server listening on /ip4/127.0.0.1/tcp/8080\n```\n\nTeraz \"odpalamy\" przeglądarkę i w miejsce adresu wpisujemy ~~[http://localhost:5001/ipfs/twój_peer_identity/#/](http://localhost:5001/ipfs/twój_peer_identity/#/)~~ [http://localhost:5001/webui](http://localhost:5001/webui) lub http://127.0.0.1:5001/webui\n\n\"**twój_peer_identity**\" podmień na skopiowany wcześniej swój \"**peer identity**\". To wszystko. Reszta już z przeglądarki. Komendy jakie mogą ci się przydać zobaczysz po wpisaniu w terminalu\n\n```\nipfs --help\n```\n\nJeszcze jedno:\n\nJeśli adres pliku, który dodamy to **QmVC2Nh8VjjSMhtYJtsyBuocN63VEQk9p1SBz6hxFAqscx** to adres, który umieścimy na jakiejś stronie by udostępniać to:\n\n```\nhttps://ipfs.io/ipfs/QmVC2Nh8VjjSMhtYJtsyBuocN63VEQk9p1SBz6hxFAqscx\n```\n\n<span style=\"border-block-start: unset; border-block-end: unset; border-inline-start: unset; border-inline-end: unset; margin-block-start: unset; margin-block-end: unset; margin-inline-start: unset; margin-inline-end: unset; padding-block-start: unset; padding-block-end: unset; padding-inline-start: unset; padding-inline-end: unset; offset-block-start: unset; offset-block-end: unset; offset-inline-start: unset; offset-inline-end: unset; block-size: unset; min-block-size: unset; max-block-size: unset; inline-size: unset; min-inline-size: unset; max-inline-size: unset; background: unset; background-blend-mode: unset; border: unset; border-radius: unset; box-decoration-break: unset; -moz-float-edge: unset; display: unset; position: fixed; float: unset; clear: unset; vertical-align: unset; overflow: unset; transition: unset; animation: unset; scroll-snap-points-x: unset; scroll-snap-points-y: unset; scroll-snap-destination: unset; scroll-snap-coordinate: unset; transform: unset; scroll-behavior: unset; scroll-snap-type: unset; overscroll-behavior: unset; isolation: unset; page-break-after: unset; page-break-before: unset; page-break-inside: unset; resize: unset; perspective: unset; perspective-origin: unset; backface-visibility: unset; transform-box: unset; transform-style: unset; transform-origin: unset; -moz-appearance: unset; -moz-binding: unset; -moz-orient: unset; will-change: unset; touch-action: unset; color: unset; columns: unset; column-gap: unset; column-fill: unset; column-rule: unset; content: unset; counter-increment: unset; counter-reset: unset; opacity: unset; box-shadow: unset; clip: rect(0px, 0px, 0px, 0px); filter: unset; mix-blend-mode: unset; font: unset; font-synthesis: unset; visibility: unset; writing-mode: unset; text-orientation: unset; color-adjust: unset; image-rendering: unset; image-orientation: unset; border-collapse: unset; empty-cells: unset; caption-side: unset; border-spacing: unset; text-transform: unset; hyphens: unset; -moz-text-size-adjust: unset; text-indent: unset; overflow-wrap: unset; word-break: unset; text-justify: unset; text-align-last: unset; text-align: unset; letter-spacing: unset; word-spacing: unset; white-space: pre; text-shadow: unset; text-emphasis: unset; text-emphasis-position: unset; -moz-tab-size: unset; -webkit-text-fill-color: unset; -webkit-text-stroke: unset; ruby-align: unset; ruby-position: unset; text-combine-upright: unset; text-rendering: unset; -moz-control-character-visibility: unset; list-style: unset; quotes: unset; -moz-image-region: unset; margin: unset; outline: unset; -moz-outline-radius: unset; outline-offset: unset; padding: unset; cursor: unset; pointer-events: unset; -moz-user-input: unset; -moz-user-modify: unset; -moz-user-focus: unset; caret-color: unset; top: 0px; left: unset; bottom: unset; right: unset; z-index: unset; flex-flow: unset; place-content: unset; place-items: unset; flex: unset; place-self: unset; order: unset; width: unset; min-width: unset; max-width: unset; height: unset; min-height: unset; max-height: unset; box-sizing: unset; object-fit: unset; object-position: unset; grid-gap: unset; grid-area: unset; grid: unset; table-layout: unset; text-overflow: unset; text-decoration: unset; ime-mode: unset; -moz-user-select: text; -moz-window-dragging: unset; -moz-force-broken-image-icon: unset; text-anchor: unset; color-interpolation: unset; color-interpolation-filters: unset; fill: unset; fill-opacity: unset; fill-rule: unset; shape-rendering: unset; stroke: unset; stroke-width: unset; stroke-linecap: unset; stroke-linejoin: unset; stroke-miterlimit: unset; stroke-opacity: unset; stroke-dasharray: unset; stroke-dashoffset: unset; clip-rule: unset; marker: unset; paint-order: unset; -moz-context-properties: unset; dominant-baseline: unset; vector-effect: unset; stop-color: unset; stop-opacity: unset; flood-color: unset; flood-opacity: unset; lighting-color: unset; mask-type: unset; clip-path: unset; mask: unset; -moz-box-align: unset; -moz-box-direction: unset; -moz-box-flex: unset; -moz-box-orient: unset; -moz-box-pack: unset; -moz-stack-sizing: unset; -moz-box-ordinal-group: unset;\">[https://ipfs.io/ipfs/QmVC2Nh8VjjSMhtYJtsyBuocN63VEQk9p1SBz6hxFAqscx](https://ipfs.io/ipfs/QmVC2Nh8VjjSMhtYJtsyBuocN63VEQk9p1SBz6hxFAqscx)</span>"
		},
		{
			"post_id": 3,
			"title": "Mój klucz publiczny",
			"date_published": 1550326260.2,
			"body": "Mój adres e-mail: ey2xjpdx@zeroid.bit\noraz\nklucz publiczny:\n\n* * *\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nT8XP3CJCJiKJUh1YY5Fx6e2R4J4=\n=R4r1\n-----END PGP PUBLIC KEY BLOCK-----\n```"
		},
		{
			"post_id": 2,
			"title": "Opis szyfrowania przy pomocy GPG w systemach linuksowych*",
			"date_published": 1550272108.9,
			"body": "### **Co to jest GPG?**\n\n**GPG** lub **GnuPG** (<span style=\"font-style: italic;\" lang=\"en\">GNU Privacy Guard</span>) – wolny zamiennik oprogramowania kryptograficznego PGP. Udostępniony na licencji GPL, pierwotnie rozwijany przez Wernera Kocha. Projekt jest wspierany przez rząd niemiecki. GPG spełnia standard OpenPGP. Obecne wersje PGP (oraz Filecrypt firmy Veridis) mogą współpracować z systemami spełniającymi założenia standardu OpenPGP (takimi jak GPG). Jak jednak często się zdarza w takich sytuacjach, nie wszystkie funkcje nowszego oprogramowania są wspierane przez starsze. Użytkownicy muszą rozumieć te niezgodności i potrafić je obejść.\n\n* * *\n\nGPG jest stabilnym oprogramowaniem nadającym się do codziennych zastosowań. Często jest zawarte w wolnych systemach operacyjnych, jak FreeBSD, OpenBSD czy NetBSD, oraz w prawie wszystkich dystrybucjach systemu GNU/Linux.\n\nMimo że podstawowy program GPG działa z linii poleceń, istnieją rozmaite nakładki, udostępniające interfejs graficzny. ([Wiki](https://pl.wikipedia.org/wiki/GNU_Privacy_Guard)).\n\nW związku z tym, że w tym przykładzie będziemy się posługiwać tylko terminalem należy pamiętać o użyciu użytecznych poleceń, które są niezbędne, aby korzystać z GPG. Jednym z nich\njest polecenie **cd**, które pozwala na nawigację po katalogach lub folderach systemu.\n\n```\ncd [ścieżka/katalog]\n```\n\nDzięki temu możesz przejść w terminalu do folderu, w którym chcesz korzystać z GPG. Do katalogu \"wyżej\" możesz przejść wpisując:\n\n```\ncd ..\n```\n\nlub przejdź do \"pierwszego\" katalogu użytkownika z:\n\n```\ncd ~\n```\n\nKolejnym przydatnym poleceniem do pracy w terminalu jest **ls**, który wyświetla listę plików w\nkatalogu, w którym się znajdujemy, aby wybrać odpowiedni plik, który chcemy zaszyfrować lub\nodszyfrować. Oczywiście, zawsze możemy go zobaczyć bezpośrednio w otwartym folderze, poza\nterminalem. Pamiętajmy również, że możemy dopełnić nazwę pliku lub katalogu przy wpisywaniu\nnaciskając **TAB**, to nam oszczędzi czasu na poprawne wpisanie każdej nazwy.\nWreszcie, GPG ma obszerną dokumentację, która pozwala na kilka kombinacji, można to\nsprawdzić wpisując:\n\n```\ngpg man\n```\n\nMniejszą listę poleceń i opcji można zobaczyć wpisując:\n\n```\ngpg -h\n```\n\n### **Szyfrowanie symetryczne**\n\nNadszedł czas na praktykę. Otwieramy nasz terminal. Będąc w dowolnym katalogu, możemy zaszyfrować każdy plik, niezależnie od tego, czy jest to dokument tekstowy, obraz czy skompresowany folder. W tym przykładzie plik document.txt.\n\n```\ngpg -c document.txt\n```\n\n**gpg** wywołuje program z opcją **-c**, która mówi programowi, że chcemy zaszyfrować plik symetrycznie (tylko za pomocą hasła), a **document.txt** jest plikiem, który będzie szyfrowany.\n\nPo wprowadzeniu danych, program poprosi Cię o wpisanie hasła, które będzie chronić plik. Po wykonaniu tego zadania, w tym samym folderze, w którym znajduje się plik \"dokument.txt\" pojawił się też plik \"gpg.txt.document\".\n\n```\ndokument.txt.gpg\n```\n\nTen dokument nie jest już dostępny dla nikogo, wymaga procesu deszyfrowania, dla którego ponownie w terminalu, należy wprowadzić\n\n```\ngpg document.txt.gpg\n```\n\nPrzy tej okazji nie ma potrzeby korzystania z opcji, która towarzyszy GnuPG, ponieważ to sam program określa, którą akcję chcesz wykonać w zaszyfrowanym pliku. Wykryje, że jest to plik zaszyfrowany symetrycznie, więc poprosi o podanie hasła wraz z następującymi informacjami.\n\n```\ngpg: WARNING: no command supplied. Trying to guess what you mean ... \ngpg: AES256 encrypted data \ngpg: encrypted with 1 passphrase\n```\n\nPrzede wszystkim zwraca uwagę, że nie wskazano żadnej opcji, więc zidentyfikuje, co zrobić z plikiem. Następnie wymienia algorytm szyfrowania, który został użyty. W tym przypadku AES, co oznacza, że jest to algorytm szyfrowania symetrycznego i poprosi o hasło. Spowoduje to wyodrębnienie oryginalnego pliku do tego samego folderu, w którym znajduje się zaszyfrowany plik. Jeśli już istnieje, system zapyta, czy chcemy go nadpisać. Należy zauważyć, że jeśli nie prosi o hasło do odszyfrowania, to dlatego, że GPG ma okres czasu, w którym go pamięta.\n\n> Ta procedura jest wszystkim, co jest potrzebne do przeprowadzenia szyfrowania\n> symetrycznego. Możemy rozpocząć zapisywanie wiadomości lub plików, w naszym systemie lub na pamięci USB, aby zapisać nasze informacje tak, że nie są one czytelne dla nikogo innego, ponieważ tylko ci, którzy znają hasło będą mieli do nich dostęp. **Pamiętaj, aby używać silnego hasła, składającego się z co najmniej 20 znaków, które łączą małe i wielkie litery, liczby i znaki.**\n\n### **Szyfrowanie symetryczne z opcją \"armour\" ASCII**\n\nJeśli na przykład jesteśmy zainteresowani udostępnieniem zaszyfrowanej wiadomości w formacie tekstowym, np. w notatniku lub w treści wiadomości e-mail, po prostu dodajemy opcję **-a**, która wygeneruje rozszerzenie pliku .asc pozwalające na skopiowanie zaszyfrowanego tekstu. Różnica w przypadku zaszyfrowanego pliku z rozszerzeniem .gpg polega na tym, że jest on kodowany w formacie binarnym, podczas gdy pliki z rozszerzeniem .asc są kodowane w ASCII, który zawiera znaki czytelne dla każdego edytora tekstu.\n\nNa przykład, w document.txt jest napisane \"Szyfrowanie chroni naszą prywatność.\", przy zastosowaniu następującego polecenia, wynikiem będzie plik .asc, który można otworzyć jak każdy notatnik.\n\n```\ngpg -ca document.txt\n```\n\nOtwierając go jako notatnik z edytorem tekstu, możemy zobaczyć, że treść jest:\n\n```\n-----BEGIN PGP MESSAGE-----\n\njA0ECQMC2Z6MnS9BnvHZ0mkBx1wKAc+wYrkK8hGKsM2QsBoQJ3glLL5wGc4yrMGU\nkJEvQx7ZImq4CK8xUEFELtyfJDvz36W9+gfxvmm3+XVZ/wRdpxXP4JP9mr08vBjk\nBgNdKBrkRz/u4724U1oFAftytdsTqkYXQ9U=\n=s+Dt\n-----END PGP MESSAGE-----\n```\n\nZaletą tego jest to, że możemy skopiować go do wiadomości e-mail lub wiadomości tekstowej, włożyć z powrotem do notatnika i odszyfrować go odpowiednim hasłem. Możesz spróbować tego przykładu. Hasło to \"1234\". Hasło, które nie jest zalecane, ale które jest przydatne w tym teście.\n\n### **Szyfrowanie symetryczne z wykorzystaniem algorytmu AES256**\n\nInnym istotnym aspektem opcji szyfrowania jest wybrany algorytm. Podczas odszyfrowywania pliku, który został zaszyfrowany, GPG wskazuje, który algorytm został użyty. Sprawdź to w terminalu, jeśli algorytmem nie jest AES256, Twofish lub Camellia256, preferowane jest, aby został zmieniony. Chociaż algorytmy obsługiwane przez GPG to kilka algorytmów, AES256, Twofish i Camellia256 mają klucze o rozmiarze 256 bitów, oferujące wystarczające bezpieczeństwo. Do tej pory żaden nie został złamany w normalnych warunkach.\n\nIstnieją dwa sposoby szyfrowania w AES256\n\nDodawanie **--cipher-algo aes256** za każdym razem, gdy szyfrujemy plik, aby wymusić użycie algorytmu AES256, jak w poniższym przykładzie.\n\n```\ngpg -c --cipher-algo aes256 [plik]\n```\n\nZmiana domyślnych ustawień GnuPG. W tym celu należy zmodyfikować plik konfiguracyjny. Z normalnym użytkownikiem możemy to zrobić:\n\n```\nnano $HOME/.gnupg/gpg.conf\n```\n\nPo otwarciu dokumentu na końcu tekstu należy dodać następujący wiersz\n\n```\npersonal-cipher-preferences AES256\n```\n\nMożliwe, że plik konfiguracyjny nie ma nic lub nie istnieje, w takim przypadku musimy po prostu dodać wspomnianą linię. Możemy skorzystać z preferowanego przez nas edytora tekstu. Jeśli używamy Nano, musimy pamiętać, że aby zapisać zmiany musimy nacisnąć Ctrl+o, Enter, Ctrl+x. Powtarzamy ten sam proces dla użytkownika root w przypadku, gdy użyliśmy go do zaszyfrowania.\n\n```\nsudo nano /root/.gnupg/gpg.conf\n```\n\n### **Szyfrowanie asymetryczne** **Tworzenie pary kluczy**\n\nAby użyć szyfrowania asymetrycznego, należy najpierw utworzyć parę kluczy. W tym celu należy w terminalu wpisać:\n\n```\ngpg --full-gen-key\n```\n\nWyświetlona zostanie licencja programu, a następnie opcje algorytmu do wyboru.\n\n```\nPlease select what kind of key you want:\n  (1) RSA and RSA (default)\n  (2) DSA and Elgamal\n  (3) DSA (sign only)\n  (4) RSA (sign only)\nYour selection?\n```\n\nW tym przypadku zostanie wybrana opcja **1**, która wykorzystuje algorytm **RSA** do szyfrowania i podpisywania plików. Wybierz **1** i naciśnij **Enter**.\n\n```\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\n```\n\nNastępnie zastanów się, jaki będzie rozmiar kluczy, które mają być utworzone. Im większa liczba bitów, tym bezpieczniejszy jest klucz, nawet jeśli generowanie klucza trwa nieco dłużej. Dlatego wpisujemy **4096**, potem **Enter**.\n\n```\nPlease specify how long the key should be valid.\n        0 = key does not expire\n       = key expires in n days\n     w = key expires in n weeks\n     m = key expires in n months\n     y = key expires in n years\nKey is valid for? (0)\n```\n\nNastępnie musimy wybrać okres ważności klucza. Chociaż można wybrać wartość \"0\", tak aby klucz był zawsze ważny, zaleca się wybranie daty ważności jako środka ostrożności. Podanie daty ważności pozwala, aby klucz automatycznie przestał być ważny w określonym dniu, co jest przydatne, jeśli z różnych powodów nie możemy uzyskać do niego dostępu ponownie. Dlatego lepiej jest myśleć, że co jakiś czas powinniśmy odnawiać nasze klucze nowymi lub, jeśli uznamy to za stosowne, przedłużać okres ich ważności. Należy wskazać numer, a następnie literę wskazującą okres: dni **(**puste**)**, tygodnie **(w)**, miesiące **(m)**, lata **(y)**.\n\nRozsądny okres czasu to dwa lata, dla klucza, który ma stałe i publiczne zastosowanie. Jeśli wybierzemy tę opcję, wpiszemy **2y, Enter**. Innym sposobem jest wskazanie dokładnej daty wygaśnięcia i utraty ważności klucza. Wprowadź i wciśnij **Enter**, aby potwierdzić.\n\nPo potwierdzeniu, program zacznie pytać o informacje, które jednoznacznie identyfikują klucz, to znaczy: nazwa, e-mail i komentarz. Pamiętaj, że sposób użycia tego klucza zadecyduje o tym, czy używamy prawdziwego imienia i nazwiska, czy pseudonimu, a także czy chcemy wskazać adres e-mail, czy nie. **Informacje identyfikujące, które umieszczamy w kluczu, będą dostępne dla każdego, komu podamy nasz klucz publiczny**. Z tego powodu musimy traktować te informacje jako list przewodni. Decydujemy o poziomie anonimowości i informacji, które chcemy przekazać. Możemy jednak stworzyć tyle par kluczy, ile potrzebujemy, więc możemy sprawdzić, które tożsamości szyfrujące najlepiej nam odpowiadają.\n\n```\nGnuPG needs to construct a user ID to identify your key.\n\nReal name:\n```\n\nWpisz imię, prawdziwe lub pseudonim. Następnie GPG poprosi o e-mail, jeśli wciśniesz **Enter**, będzie pusty. Na koniec można dodać komentarz, który chcemy dodać, tylko jeśli uznamy to za stosowne. Jeśli wciśniesz **Enter**, to będzie puste.\n\nPo wprowadzeniu danych pojawi się podsumowanie i opcja modyfikacji niektórych danych. Mój przykład (fikcyjny) jest następujący:\n\n```\nReal name: Alice\nEmail address: alice@disonancia.net\nComment:\nYou selected this USER-ID:\n   \"Alice \"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?\n```\n\nJeśli chcemy coś zmodyfikować, wpisz literę odpowiadającą parametrowi, który chcemy zmodyfikować i naciśnij **Enter**. W przeciwnym razie wystarczy tylko wskazać **O**, a następnie **Enter**.\n\nTeraz zostaniemy poproszeni o podanie hasła. Bardzo ważne jest, aby hasło było silne, zawierało małe i wielkie litery, liczby i znaki. Idealnie -> ilość równa lub większa niż 20 znaków. Hasło będzie chronić klucz prywatny w przypadku, gdy wpadnie on w niepowołane ręce. Z tego powodu powinniśmy używać jak najdłuższego hasła, a co ważniejsze, nie udostępniać naszego klucza prywatnego, ani nie używać go na \"obcych\" komputerach lub telefonach komórkowych. Jeśli trudno jest nam zapamiętać długie hasło, zalecamy skorzystanie z menedżerów haseł, takich jak KeepassXC.\n\nPo wprowadzeniu hasła pojawi się na ekranie:\n\n```\nWe need to generate a lot of random bytes. It is a good idea to perform \nsome other action (type on the keyboard, move the mouse, utilize the \ndisks) during the prime generation; this gives the random number \ngenerator a better chance to gain enough entropy.\n```\n\nOznacza to, że GnuPG tworzy nasz klucz, generując bardzo duże liczby losowe. Aby wspomóc ten proces, musimy używać komputera, poruszając myszką, poruszając się po katalogach, aby dostarczyć procesorowi losową informację, która daje jak najwięcej możliwości. Proces ten może trwać długo, zwłaszcza że jest to klucz 4096 bitowy.\n\nNa końcu pojawi się wynik:\n\n```\npublic and secret key created and signed. \n\npub   rsa4096 2018-04-17 [SC] [expires: 2020-04-16] \n     B78465754B0578863486463269FF78743A32BACC \nuid                      Alice  \nsub   rsa4096 2018-04-17 [E] [expires: 2020-04-16]\n```\n\nOznacza to, że para kluczy, odpowiadająca tej tożsamości, została utworzona z datą utworzenia i datą ważności. Ponadto, istnieje ciąg 40 znaków szesnastkowych odpowiadających \"odciskowi palca\", który jest tożsamością naszej pary kluczy. Gdy wymieniamy klucze publiczne, ten odcisk palca jest gwarancją, że faktycznie jest to klucz, który otrzymujemy lub wysyłamy. Istnieje skrócona forma keyprint o nazwie ID, składająca się z ostatnich 16 znaków odcisku palca; w przypadku naszego klucza jest to 0x29CA06B24D687E43\\. Format identyfikatora jest znacznie wygodniejszy niż sprawdzanie odcisku palca, jednak przy sprawdzaniu autentyczności klucza lepiej jest polegać wyłącznie na odcisku palca.\n\nJeśli chcemy ponownie zobaczyć nasz klucz, musimy wejść w terminal i wpisać:\n\n```\ngpg -k\n```\n\nPokaże to szczegóły wszystkich kluczy znajdujących się w naszym systemie, w tym również naszych własnych.\n\n## **Wymiana kluczy publicznych**\n\n### **Eksport klucza publicznego.**\n\nAby móc używać szyfrowania komunikacji z inną osobą lub bezpiecznej wymiany plików, musimy najpierw wymienić klucze publiczne. W tym celu należy najpierw wyeksportować własny klucz, wpisując:\n\n```\ngpg --export -a [użytkownik] > [nazwa].asc\n```\n\nGdzie [użytkownik] jest nazwą klucza, którą może być nazwa, poczta lub ID. W [nazwa] wpiszesz nazwę pliku wyjściowego, na przykład: my_key.asc. Jest to plik tekstowy i możemy go udostępniać bezpośrednio lub skopiować jego zawartość w notatniku, albo wysłać go w inny sposób. Mam na przykład tekst mojego klucza publicznego dostępnego jako tekst [tutaj](http://127.0.0.1:43110/1N22Kd5GnFnmKDrMRscKRPnaQUFXyQE3zC/?Post:3:M%C3%B3j+klucz+publiczny).\n\nPo udostępnieniu klucza, wysłaniu pliku lub opublikowaniu tekstu klucza, musimy również upewnić się, że podamy odcisk palca naszego klucza, to znaczy, że dostarczymy lub opublikujemy liczbę 40 znaków, co jest jednoznacznym wskaźnikiem, że jest to nasz klucz.\n\n## **Import klucza publicznego**\n\nW przypadku otrzymania klucza publicznego od osoby, z którą chcemy się bezpiecznie komunikować, musimy wprowadzić następującą komendę po otrzymaniu pliku klucza, który musimy wprowadzić:\n\n```\ngpg --import [plik klucza]\n```\n\nKlucz zostanie natychmiast zarejestrowany w naszym systemie. Możemy przejrzeć kluczowe informacje wpisując jedno z tych dwóch poleceń.\n\n```\ngpg -k\n```\n\nLub:\n\n```\ngpg -k [ID klucza]\n```\n\nNajlepiej jest wymieniać klucze publiczne osobiście z naszym kontaktem, aby mieć pewność, że jest to klucz osoby, z którą chcemy się skontaktować. W przypadku braku możliwości doręczenia w sposób bezpośredni i jeśli musimy potwierdzić, że tożsamość odpowiada osobie, z którą chcemy się skontaktować, konieczne jest potwierdzenie, że odcisk palca klucza - 40-znakowa cyfra - odpowiada odciskowi palca tego, który poinformował nas o kontakcie, albo dlatego, że opublikował go w jakimś należącym do niego miejscu, albo dlatego, że wcześniej przekazał nam swój odcisk palca w inny sposób.\n\n## **Eksport klucza prywatnego**\n\nKonieczne jest rozważenie możliwości wykonania kopii zapasowej klucza prywatnego, ponieważ z powodu utraty lub uszkodzenia komputera, nigdy więcej nie będziemy mieli dostępu do naszego klucza prywatnego, tracąc możliwość bezpiecznego komunikowania się z naszymi kontaktami. Aby uniknąć takiej sytuacji, możliwe jest wyeksportowanie klucza prywatnego za pomocą następującej komendy\n\n```\ngpg --export-secret-key -a [klucz] > [nazwa].asc\n```\n\nMusimy określić klucz, który wyeksportujemy z danymi lub odciskami palców tej samej osoby. Dodatkowo, podobnie jak w przypadku eksportu klucza publicznego, zostanie wygenerowany plik z nazwą, którą wybraliśmy jako nazwę. Plik ten powinien być zabezpieczony szyfrowaniem symetrycznym, aby uniemożliwić dostęp do niego komukolwiek i, jeśli to możliwe, przechowywany na odpowiednio zaszyfrowanej partycji zewnętrznej lub urządzeniu. Następnie możemy użyć programu do bezpiecznego usunięcia utworzonego pliku, usuwając ślad klucza prywatnego.\n\nW ten sposób, jeśli mimo utraty dostępu do naszego komputera, będziemy potrzebowali ponownie użyć naszego klucza, kopia zapasowa będzie pomocna. Aby go zaimportować, postępuj zgodnie z tymi samymi krokami, co w przypadku importu klucza publicznego.\n\n## **Używanie kluczy szyfrujących**\n\n### **Wysyłanie informacji zaszyfrowanych kluczami**\n\nTeraz, gdy mamy klucz publiczny, możemy zaszyfrować plik lub wiadomość i wysłać ją do naszego rozmówcy. W tym celu musimy wprowadzić\n\n```\ngpg -r [nazwa] -e [plik]\n```\n\nNastępnie zostaniesz poproszony o podanie nazwy klucza, którym chcesz zaszyfrować. Wprowadzamy \"nazwę\", adres e-mail lub identyfikator klucza adresata oraz \"plik\" do zaszyfrowania. Oczywiście nic nie stoi na przeszkodzie by dodać większą liczbą adresatów (przed każdą nazwą adresata **-r**) lub za jednym zamachem podpisać wiadomość korzystając z parametru **-s**. Jako adresatów naszej wiadomości możemy podać imiona lub nazwiska. Program sam wyszuka odpowiednich kluczy i zaszyfruje wiadomość. Po wybraniu wszystkich kluczy publicznych, którymi chcemy szyfrować, po prostu naciśnij **Enter**. Wygeneruje plik, który musimy wysłać do naszego odbiorcy.\n\n### **Odbierz zaszyfrowany plik**\n\nKiedy otrzymujemy zaszyfrowany plik, by go \"otworzyć\" musimy użyć komendy gpg tylko wtedy, gdy znajdziemy się w katalogu, w którym znajduje się ten plik.\n\n```\ngpg [plik]\n```\n\ni automatycznie zidentyfikuje, jaki jest to rodzaj szyfrowania oraz, dodatkowo, czy posiadamy klucz prywatny umożliwiający jego otwarcie. Kolejną opcją jest\n\n```\ngpg -d [plik]\n```\n\nW nim plik jest odszyfrowywany i w przypadku tekstu będzie wyświetlany w terminalu. Jeśli zaszyfrowana wiadomość nie pojawia się w tekście i jest zapisana w treści wiadomości e-mail, na przykład, powinniśmy skopiować tekst i wkleić go do notatnika - lub zwykłego dokumentu tekstowego - a następnie odszyfrować.\n\n### **Podpisywanie plików i wiadomości**\n\nJeśli wymagane jest podpisanie pliku, który musimy wysłać do naszego odbiorcy w celu potwierdzenia, że wiadomość została przez nas wysłana, istnieją dwie opcje. Jednym z nich jest podpisanie tego samego pliku, który wysyłamy. W takim przypadku musisz napisać:\n\n```\ngpg -u [klucz prywatny] -se [plik]\n```\n\nKlucz prywatny jest kluczem używanym do podpisywania - tym, którego nie powinniśmy dzielić z nikim - możemy wskazać nazwę lub ID tego samego klucza. Ponieważ możemy mieć więcej niż jeden, musimy wybrać, którego z nich użyć. Reszta procedury jest identyczna z szyfrowaniem kluczami, praktyczna różnica polega na tym, że gdy plik jest odszyfrowany, GnuPG wskaże kto podpisał plik, jeśli osoba odbierająca wiadomość posiada nasz klucz publiczny. To samo dotyczy przypadku, w którym otrzymujemy zaszyfrowany i podpisany plik, który po odszyfrowaniu wskaże tę wiadomość w terminalu.\n\n```\ngpg: encrypted with 4096-bit RSA key, ID 0x34EFB78465754B05 , created 2018-04-01\n      \"Alice \"\ngpg: Signature made sab 05 may 2018 00:00:00 -00\ngpg:      using RSA key B753DD01097634EFFF00B753DD01097634EFFF00\ngpg: Good signature from \"Bob\" [ultimate]\nPrimary key fingerprint: B753 DD01 0976 34EF FF00  B753 DD01 0976 34EF FF00\n```\n\nW tym przykładzie otrzymujemy plik podpisany przez Boba, naszego rozmówcę. W pierwszych dwóch wierszach można zobaczyć nasz klucz, to znaczy do kogo został wysłany, a w następnych wierszach informacje o podpisanym przez niego kluczu. W ten sposób możemy potwierdzić, w naszym komunikowaniu się z GPG, że skutecznie komunikujemy się z osobą, której chcemy. Nawet jeśli wiadomości są przechwytywane i modyfikowane, zawsze będziemy w stanie potwierdzić podpis i uświadomić sobie, czy nadawca jest właściwym nadawcą.\n\nInną opcją jest szyfrowanie pliku i podpisywanie go oddzielnie, tzn. istnieje drugi plik, z rozszerzeniem .sig, składający się tylko z podpisu. W tym celu należy wprowadzić dane.\n\n```\ngpg -sb [plik]\n```\n\nW ten sposób możemy wysłać zaszyfrowany plik wraz z podpisem jako osobny plik. Aby zweryfikować podpis, odbiorca musi wpisać gpg --verify over the signature, który musi znajdować się w tym samym folderze lub katalogu pliku, do którego podpisuje.\n\nJednym z najbardziej oczywistych narzędzi do generowania podpisu w osobnym pliku jest możliwość podpisania niezaszyfrowanych plików, tak jak w przypadku dokumentu, który wymaga poświadczenia autorstwa, ale niekoniecznie musi być szyfrowany.\n\nInną opcją, o której zawsze należy pamiętać, jest możliwość podpisania tekstu niezaszyfrowanej wiadomości. Celem tego jest możliwość opublikowania wiadomości, którą każdy może przeczytać, ale można również zweryfikować autorstwo wiadomości. Jest to idealne rozwiązanie do publikowania stwierdzeń lub wiadomości, których nie można modyfikować w celu wprowadzenia w błąd w ich treści.\n\n```\ngpg -u [klucz prywatny] --clearsign [plik]\n```\n\nWygenerowany plik jest dokumentem tekstowym, którego zawartość można gdzieś skopiować i opublikować. W poniższym przykładzie publikuję wiadomość z moim podpisem, więc może być ona zweryfikowana przez każdego, kto zaimportował mój klucz publiczny\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nSzyfrowanie chroni naszą prywatność.\n-----BEGIN PGP SIGNATURE-----\n\niQHIBAEBCAAyFiEE3/N1EwLHov+q/Z5+tbdjRBExYAAFAlxoOeQUHGV5MnhqcGR4\nQHplcm9pZC5iaXQACgkQtbdjRBExYAA+6wwAv1FLkAeZIyflRCwnkkN7pS1nGyGh\nkr+jbZE/Qz8lMPvDBL/aj+q2srfsI5eTTNln33plwSsRoJ9Ti4VTa4Wm931SAg3m\nenHTSnmgNyV30ZPEQ6YxjrJZfIPaKEWC1uqFfbcgnAOPK036hFa2vmRHItNsMHb+\njVzTLOx/K6Y0o5bUR+phv3PwdS7YlWUcqo71US09ukt8eiPUupDWoqVNMC/8jKAF\n3r4ypvKzafwaY0NuUsq1lxcTeidt8E7NQBvgcz7s8t4fx/wxKl4iUia05HP3IUmL\n0vxw7HUTycDLrkRnWoRvdKblS8A8PnH2ctl4tUACR9km1d9gqe3HMrmpH0OpgtSc\nj9yhUTfh5nByvRsZ2UySqHQ34j1qY34ifBddopo02eNfD+de/6+Q65L1Ukitvnzx\n3i0Qj0YvXqZO+vu8cw+hhJV8MH/CmRqi2za0QuCllM559BgMdfjxbZVyS1J+ZdHp\nl4MBDjWPt6xy5UdEZZVGSEiFu8vgK2SLDNgt\n=c5dS\n-----END PGP SIGNATURE-----\n```\n\n## **Serwery kluczy**\n\nIstnieją kluczowe serwery, które są usługami online, które umożliwiają przechowywanie i otwarte rozpowszechnianie kluczy publicznych w celu zapewnienia łatwego dostępu. W ten sposób ci, którzy chcą mieć zawsze dostępne klucze publiczne, mogą je przesłać na jakiś serwer kluczy, gdzie można je przeszukiwać za pomocą kluczy lub za pomocą łącza.\n\nNajpierw należy potwierdzić, że zainstalowaliśmy pakiet **dirmngr**, który pozwala GPG połączyć się z Internetem, dla którego możemy go zainstalować\n\n```\nsudo apt-get install dirmngr\n```\n\nNastępnie, jeśli chcesz przesłać klucz do domyślnego serwera w programie, którym jest keys.gnupg.net, musimy napisać co następuje, zastępując tożsamość klucza, według którego chcemy przesłać.\n\n```\ngpg --send-key 0x34EFB78465754B05\n```\n\nW przypadku gdy chcemy określić konkretny serwer, komenda jest następująca\n\n```\ngpg --keyserver hkps://hkps.pool.sks-keyservers.net --send-key 0x34EFB78465754B05\n```\n\n**hkps.pool.sks-keyservers.net** ma tę zaletę, że jest \"pulą serwerów\", czyli siecią kluczowych serwerów rozproszonych po całym świecie. Jeśli wyślesz tutaj swój klucz publiczny, pozostanie on w tej puli, niezależnie od tego, czy którykolwiek z Twoich serwerów jest odłączony.\n\nJeśli chcesz szukać klucza na serwerze, procedura jest podobna. Aby użyć domyślnego serwera należy wprowadzić\n\n```\ngpg --search-key [informacja]\n```\n\nW miejscu \"informacja\" podaj te informacje, które pozwalą zidentyfikować klucz, którego szukasz, może to być nazwa, poczta lub, najlepiej, odcisk palca klucza. Jeśli chcesz wybrać konkretny serwer, napisz co następuje\n\n```\ngpg --keyserver hkps://hkps.pool.sks-keyservers.net -search-key 0x29CA06B24D687E43\n```\n\n> Lepiej jest używać hkps zamiast hkp. Litera \"s\" oznacza, że połączenie z serwerem kluczy jest szyfrowane. Jeśli nie, za każdym razem, gdy klucze są wyszukiwane, ładowane lub odświeżane z naszego systemu, każdy, kto ma dostęp do naszej sieci - w tym nasz dostawca Internetu - będzie wiedział z kim się komunikujemy. W przypadku problemów z użyciem hkps, pakiet **gnupg-curl** może nie być zainstalowany.\n\nMożliwe jest również wyszukiwanie bezpośrednio w przeglądarce internetowej, na stronach każdego serwera można wyszukiwać lub przesyłać klucze. Możemy skopiować tekst z naszego klucza publicznego i umieścić go tam bezpośrednio, jeśli nie chcemy używać terminala do tego zadania.\n\n```\nhkps.pool.sks-keyservers.net\n```\n\n### **Podpisanie kluczy**\n\nPonieważ w serwerach kluczy mogą występować pomyłki z nazwami tych samych lub bezpośrednio umieszczać klucze publiczne o tych samych nazwach w złośliwy sposób, GnuPG pozwala na podpisywanie kluczy publicznych, czyli na używanie własnych kluczy do podpisywania i rozpoznawania klucza osoby trzeciej. Jest to zalecane tylko w przypadku, gdy mamy klucz publiczny (zweryfikowany) osoby, do której mamy pełne zaufanie.\n\nAby podpisać klucz publiczny w sposób lokalny, używana jest następująca komenda, która pozwala na sprawdzenie poprawności klucza, ale bez tej walidacji może być przesłany na serwer; jest to do użytku lokalnego.\n\n```\ngpg --lsign-key [klucz do podpisania]\n```\n\nPamiętaj, że jeśli masz więcej niż jeden klucz prywatny, możesz określić, którego klucza użyć do podpisania, w sposób podobny do podpisywania plików lub wiadomości.\n\n```\ngpg -u -[ID klucza własnego] --lsign-key [klucz do podpisania]\n```\n\nTeraz, w przypadku chęci przesłania podpisu klucza, który ma przyczynić się do zwiększenia ważności klucza, który chcemy podpisać, komenda jest:\n\n```\ngpg --sign-key [ID klucza podpisywanego]\n```\n\nKiedy klucz ten jest podpisany, musimy wysłać go na serwer, aby nowy podpis został zarejestrowany.\n\n### **Poziom zaufania kluczy**\n\nWreszcie, jeśli zamiast podpisywania klucza, szukamy określenia poziomu zaufania dla każdego klucza, co wskazuje systemowi, czy powinien on dostarczać ostrzeżenia dotyczące jego użycia, powinniśmy napisać\n\n```\ngpg --update-trustdb\n```\n\nW ten sposób będziemy mogli kolejno sprawdzać klucze znajdujące się w naszym systemie i decydować o ich ważności.\n\n## **Certyfikat unieważnienia klucza**\n\nW końcu może się zdarzyć, że ktoś miał dostęp do naszego klucza prywatnego lub był w stanie uzyskać w jakiś sposób hasło, które go chroniło. W takich przypadkach, aby uniemożliwić komuś innemu użycie naszego klucza prywatnego i zastąpienie naszej tożsamości lub odszyfrowanie wiadomości, które zaszyfrujemy za pomocą GPG, konieczne jest powiadomienie o tej sytuacji, aby nasza para kluczy przestała być ważna. W tym celu musimy wygenerować **certyfikat unieważnienia**. Zasadniczo jest to plik, który unieważnia ważność naszych kluczy do zaimportowania do urządzenia, w którym się znajdują, czy to w urządzeniach Twoich kontaktów, na serwerach kluczy, czy w naszym własnym komputerze.\n\nAby wygenerować certyfikat unieważnienia wpisz:\n\n```\ngpg -ao [plik] --generate-revocation [Identity]\n```\n\nGdzie \"plik\" jest nazwą pliku, a \"Identity\" jest ID lub nazwą klucza prywatnego, który chcemy cofnąć. Wygenerowany plik można zaimportować do naszego systemu, a klucz zostanie unieważniony komendą:\n\n```\ngpg --import [nazwa pliku].asc\n```\n\nMożemy również wysłać ten certyfikat do naszych kontaktów w celu cofnięcia klucza publicznego, który im dajemy.\n\n> Należy zawsze przechowywać, w bezpieczny sposób, certyfikat unieważnienia, który pozwala na anulowanie użycia klucza w przypadku konieczności unieważnienia klucza, ale jednocześnie utraciliśmy dostęp do naszego komputera z prywatnym kluczem.\n\nW ten sam sposób można usunąć klucze naszego urządzenia, wykonując następujące polecenia, najpierw usunąć klucze publiczne, a następnie klucze prywatne.\n\n```\ngpg --delete-keys [klucz]\n```\n\noraz\n\n```\ngpg --delete-secret-keys [klucz]\n```\n\nZa pomocą tych podstawowych poleceń możemy zacząć komunikować się z naszymi znajomymi w bezpieczny sposób z szyfrowaniem kluczy dostarczanych przez GnuPG. Przed ich użyciem starannie zaplanujmy profile tożsamości, które każda para kluczy będzie miała, czyli czy zostaną one opublikowane lub czy będą one przeznaczone wyłącznie do użytku w bliskich kontaktach.\n\n## **Inne względy**\n\n### **Konfiguracje**\n\nPodobnie jak w przypadku zmiany konfiguracji programu GnuPG w celu wykorzystania określonego algorytmu, możliwe jest dodanie kilku modyfikacji w celu zwiększenia bezpieczeństwa stosowania asymetrycznego szyfrowania w naszym systemie. Za pomocą następującego polecenia możemy wprowadzić konfiguracje\n\n```\nnano $HOME/.gnupg/gpg.conf\n```\n\nPo otwarciu gpg.conf musimy upewnić się, że znajdują się co najmniej następujące wskazówki:\n\n```\nkeyserver hkps://hkps.pool.sks-keyservers.net \ncert-digest-algo SHA512 \nno-emit-version \nno-comments \npersonal-cipher-preferences AES256 AES192 AES CAST5 \npersonal-digest-preferences SHA512 SHA384 SHA256 SHA224\nkeyid-format 0xlong\nwith-fingerprint\n```\n\nkeyerver **hkps://hkps.pool.sks-keyservers.net** Wskazuje domyślny serwer klucza, którego będziemy używać. **cert-digest-algo SHA512** wymusza użycie algorytmu SHA512 w autopodpisach, aby zwiększyć jego bezpieczeństwo.\n\nW przypadku osobistych preferencji szyfrujących AES256, wyjaśnionych powyżej, wymusza użycie algorytmu AES256 w szyfrowaniu symetrycznym i osobistych preferencji o największej gęstości SHA512 wymusza użycie algorytmu hash SHA512\\. Z drugiej strony, **keyid format 0xlong** i z odciskiem palca pozwalają na wizualizację pełnego odcisku palca kluczy, gdy są one wyświetlane w terminalu, ponieważ jedyną wiarygodną tożsamością kluczy jest ich pełny odcisk palca, **40-znakowy Key Fingerprint**.\n\n### **Edytowanie kluczy**\n\nIstnieją kluczowe informacje, takie jak data ważności oraz ważne elementy, takie jak hasło, które można edytować w dowolnym momencie. Dodatkowo, edycja klucza może być użyta do dodania podklawisza, co jest przydatne w przypadku zaawansowanego korzystania z GnuPG. Dla każdej z tych rzeczy można wpisać polecenie\n\n```\ngpg --edid-key [klucz]\n```\n\nPokaże to dane wybranego klucza i program zaczeka na wybór elementu klucza, który ma być edytowany. Aby poznać odpowiednie polecenia, które są wymagane do edycji jakiegoś aspektu, należy wpisać **help** i pojawi się lista. Zawsze możliwe jest wyjście z programu za pomocą **Ctrl + C**.\n\n## **Szyfrujmy nasze dane**\n\nPraktyczna kryptografia, taka jak ta dozwolona przez GnuPG, daje ludziom możliwość ustanowienia bezpiecznych środków komunikacji bez względu na to, jak niepewny jest używany kanał, broniąc nas przed masowym nadzorem. W ten sam sposób umożliwia stworzenie w pełni autonomicznej komunikacji w ramach istniejącego kanału należącego do strony trzeciej. Dzięki szyfrowaniu możemy przyczynić się do zapewnienia wolności komunikacji i bezpiecznej organizacji naszych społeczności.\n\n## **Lista poleceń dla GnuPG**\n\nKomendy wpisywane w terminalu:\n\n```\nCommands:\n\n -s, --sign                  złóż podpis\n     --clear-sign            złożyć czytelny podpis tekst\n -b, --detach-sign           złożyć podpis niezespolony\n -e, --encrypt               encrypt data\n -c, --symmetric             encryption only with symmetric cipher\n -d, --decrypt               decrypt data (default)\n     --verify                verify a signature\n -k, --list-keys             list keys\n     --list-signatures       list keys and signatures\n     --check-signatures      list and check key signatures\n     --fingerprint           list keys and fingerprints\n -K, --list-secret-keys      list secret keys\n     --generate-key          generate a new key pair\n     --quick-generate-key    quickly generate a new key pair\n     --quick-add-uid         quickly add a new user-id\n     --quick-revoke-uid      quickly revoke a user-id\n     --quick-set-expire      quickly set a new expiration date\n     --full-generate-key     full featured key pair generation\n     --generate-revocation   generate a revocation certificate\n     --delete-keys           remove keys from the public keyring\n     --delete-secret-keys    remove keys from the secret keyring\n     --quick-sign-key        quickly sign a key\n     --quick-lsign-key       quickly sign a key locally\n     --sign-key              sign a key\n     --lsign-key             sign a key locally\n     --edit-key              sign or edit a key\n     --change-passphrase     change a passphrase\n     --export                export keys\n     --send-keys             export keys to a keyserver\n     --receive-keys          import keys from a keyserver\n     --search-keys           search for keys on a keyserver\n     --refresh-keys          update all keys from a keyserver\n     --import                import/merge keys\n     --card-status           print the card status\n     --edit-card             change data on a card\n     --change-pin            change a card's PIN\n     --update-trustdb        update the trust database\n     --print-md              print message digests\n     --server                run in server mode\n     --tofu-policy VALUE     set the TOFU policy for a key\n\nOptions:\n\n -a, --armor                 create ascii armored output\n -r, --recipient USER-ID     encrypt for USER-ID\n -u, --local-user USER-ID    use USER-ID to sign or decrypt\n -z N                        set compress level to N (0 disables)\n     --textmode              use canonical text mode\n -o, --output FILE           write output to FILE\n -v, --verbose               verbose\n -n, --dry-run               do not make any changes\n -i, --interactive           prompt before overwriting\n     --openpgp               use strict OpenPGP behavior\n\n(See the man page for a complete listing of all commands and options)\n\nExamples:\n\n -se -r Bob [file]          sign and encrypt for user Bob\n --clear-sign [file]        make a clear text signature\n --detach-sign [file]       make a detached signature\n --list-keys [names]        show keys\n --fingerprint [names]      show fingerprints\n```\n\n*_Całość bezczelnie zerżnięta z tutoriala w języku hiszpańskim. Przetłumaczone translatorem z moimi poprawkami. Jak coś to dajcie znać w komentarzach, albo na maila_ ey2xjpdx@zeroid.bit"
		}
	],
	"tag": [
		{
			"value": "GPG",
			"post_id": 3
		},
		{
			"value": "pub",
			"post_id": 3
		},
		{
			"value": "klucz_publiczny",
			"post_id": 3
		},
		{
			"value": "pubkey",
			"post_id": 3
		},
		{
			"value": "komunikacja",
			"post_id": 6
		},
		{
			"value": "retroshare",
			"post_id": 6
		},
		{
			"value": "szyfrowanie",
			"post_id": 6
		},
		{
			"value": "IPFS",
			"post_id": 5
		},
		{
			"value": "p2p",
			"post_id": 5
		},
		{
			"value": "GPG",
			"post_id": 2
		},
		{
			"value": "szyfrowanie",
			"post_id": 2
		}
	]
}