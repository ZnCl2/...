{
	"title": "0x11901's Blog",
	"description": "一个普通的ZeroBlog.",
	"links": "*   [GitHub](https://github.com/0x11901)\n*   ~~[iBoot](https://github.com/0x11901/iBoot)~~(DMCA)\n*   [SayHi demo](https://github.com/0x11901/SayHi)\n\n[一个数字<span id=\"peers\" class=\"updating\">0</span>而已](#)",
	"next_post_id": 9,
	"demo": false,
	"modified": 1533132766,
	"post": [
		{
			"post_id": 8,
			"title": "关于编译型语言代码优化的一点迷思",
			"date_published": 1533132622.904,
			"body": "最近经常看见一些人分享自己撸码的经验，比如曾经习惯把if语句改成三目运算符，以减少代码行数。现在习惯把相同的if判断合并在一起，以减少if判断的次数，提高效率。\n\n多年以前笔者也是这样想的，但是随着年龄的增长，窃以为在编译型语言中，这样做的意义并不大，而且有时甚至可能会降低代码可读性。\n\n* * *\n\n## 例子\n\n有如下两份代码：\n\n```cpp\n#include <array>\n#include <iostream>\n\nint main()\n{\n    std::array<int, 122> array{ 2700, 2314, 8429, 7726, 4817, 8716, 3598, 6255, 5056, 8653, 8571, 5028, 1259, 3315,\n                                2896, 1411, 3847, 879,  7353, 8056, 8765, 2344, 6349, 4156, 8350, 4164, 4783, 6800,\n                                8887, 267,  4478, 6327, 58,   7961, 756,  5654, 9546, 5132, 247,  5514, 7098, 1156,\n                                795,  2502, 367,  5330, 2261, 8692, 2460, 4823, 8968, 4976, 1929, 1051, 9249, 9713,\n                                2803, 1743, 3681, 93,   4967, 2245, 198,  896,  6372, 4413, 2615, 6130, 5766, 5306,\n                                1236, 888,  8050, 7080, 3460, 3473, 1720, 3913, 3449, 8420, 1814, 1261, 1368, 167,\n                                7938, 4483, 4843, 4682, 3301, 4038, 709,  8655, 598,  3857, 6285, 2961, 6817, 1031,\n                                4007, 1392, 5717, 5837, 5695, 9511, 8891, 7883, 7035, 2349, 5752, 3139, 2442, 3966,\n                                2007, 9205, 8434, 5065, 3795, 6890, 2715, 1,    5106, 5083 };\n\n    auto x = 5330;\n\n    for (const auto &element : array)\n    {\n        if (element > 1000)\n        {\n            std::cout << \"\";\n        }\n    }\n\n    for (const auto &element : array)\n    {\n        if (element > 1000)\n        {\n            if (element == x)\n            {\n                std::cout << \"hello, world\" << std::endl;\n            }\n        }\n    }\n\n    return 0;\n}\n```\n\n```cpp\n#include <array>\n#include <iostream>\n\nint main()\n{\n    std::array<int, 122> array{ 2700, 2314, 8429, 7726, 4817, 8716, 3598, 6255, 5056, 8653, 8571, 5028, 1259, 3315,\n                                2896, 1411, 3847, 879,  7353, 8056, 8765, 2344, 6349, 4156, 8350, 4164, 4783, 6800,\n                                8887, 267,  4478, 6327, 58,   7961, 756,  5654, 9546, 5132, 247,  5514, 7098, 1156,\n                                795,  2502, 367,  5330, 2261, 8692, 2460, 4823, 8968, 4976, 1929, 1051, 9249, 9713,\n                                2803, 1743, 3681, 93,   4967, 2245, 198,  896,  6372, 4413, 2615, 6130, 5766, 5306,\n                                1236, 888,  8050, 7080, 3460, 3473, 1720, 3913, 3449, 8420, 1814, 1261, 1368, 167,\n                                7938, 4483, 4843, 4682, 3301, 4038, 709,  8655, 598,  3857, 6285, 2961, 6817, 1031,\n                                4007, 1392, 5717, 5837, 5695, 9511, 8891, 7883, 7035, 2349, 5752, 3139, 2442, 3966,\n                                2007, 9205, 8434, 5065, 3795, 6890, 2715, 1,    5106, 5083 };\n\n    auto x = 5330;\n\n    for (const auto &element : array)\n    {\n        if (element > 1000)\n        {\n            std::cout << \"\";\n            if (element == x)\n            {\n                std::cout << \"hello, world\" << std::endl;\n            }\n        }\n    }\n\n    return 0;\n}\n```\n\n从代码角度看第二份代码应该优于第一份代码。\n\n使用LLVM生成两份代码的对应汇编如下：\n\n```assembly\n    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 13\n    .globl    _main                   ## -- Begin function main\n    .p2align    4, 0x90\n_main:                                  ## @main\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi0:\n    .cfi_def_cfa_offset 16\nLcfi1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi2:\n    .cfi_def_cfa_register %rbp\n    subq    $640, %rsp              ## imm = 0x280\n    leaq    -544(%rbp), %rax\n    leaq    l__ZZ4mainE5array(%rip), %rcx\n    movl    $488, %edx              ## imm = 0x1E8\n                                        ## kill: %RDX<def> %EDX<kill>\n    movl    $0, -52(%rbp)\n    movq    %rax, %rsi\n    movq    %rsi, %rdi\n    movq    %rcx, %rsi\n    movq    %rax, -624(%rbp)        ## 8-byte Spill\n    callq    _memcpy\n    movl    $5330, -548(%rbp)       ## imm = 0x14D2\n    movq    -624(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -560(%rbp)\n    movq    -560(%rbp), %rcx\n    movq    %rcx, -48(%rbp)\n    movq    -48(%rbp), %rcx\n    movq    %rcx, -568(%rbp)\n    movq    -560(%rbp), %rcx\n    movq    %rcx, -24(%rbp)\n    movq    -24(%rbp), %rcx\n    addq    $488, %rcx              ## imm = 0x1E8\n    movq    %rcx, -576(%rbp)\nLBB0_1:                                 ## =>This Inner Loop Header: Depth=1\n    movq    -568(%rbp), %rax\n    cmpq    -576(%rbp), %rax\n    je    LBB0_6\n## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1\n    movq    -568(%rbp), %rax\n    movq    %rax, -584(%rbp)\n    movq    -584(%rbp), %rax\n    cmpl    $1000, (%rax)           ## imm = 0x3E8\n    jle    LBB0_4\n## BB#3:                                ##   in Loop: Header=BB0_1 Depth=1\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    leaq    L_.str(%rip), %rsi\n    callq    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    movq    %rax, -632(%rbp)        ## 8-byte Spill\nLBB0_4:                                 ##   in Loop: Header=BB0_1 Depth=1\n    jmp    LBB0_5\nLBB0_5:                                 ##   in Loop: Header=BB0_1 Depth=1\n    movq    -568(%rbp), %rax\n    addq    $4, %rax\n    movq    %rax, -568(%rbp)\n    jmp    LBB0_1\nLBB0_6:\n    leaq    -544(%rbp), %rax\n    movq    %rax, -592(%rbp)\n    movq    -592(%rbp), %rax\n    movq    %rax, -16(%rbp)\n    movq    -16(%rbp), %rax\n    movq    %rax, -600(%rbp)\n    movq    -592(%rbp), %rax\n    movq    %rax, -8(%rbp)\n    movq    -8(%rbp), %rax\n    addq    $488, %rax              ## imm = 0x1E8\n    movq    %rax, -608(%rbp)\nLBB0_7:                                 ## =>This Inner Loop Header: Depth=1\n    movq    -600(%rbp), %rax\n    cmpq    -608(%rbp), %rax\n    je    LBB0_14\n## BB#8:                                ##   in Loop: Header=BB0_7 Depth=1\n    movq    -600(%rbp), %rax\n    movq    %rax, -616(%rbp)\n    movq    -616(%rbp), %rax\n    cmpl    $1000, (%rax)           ## imm = 0x3E8\n    jle    LBB0_12\n## BB#9:                                ##   in Loop: Header=BB0_7 Depth=1\n    movq    -616(%rbp), %rax\n    movl    (%rax), %ecx\n    cmpl    -548(%rbp), %ecx\n    jne    LBB0_11\n## BB#10:                               ##   in Loop: Header=BB0_7 Depth=1\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    leaq    L_.str.1(%rip), %rsi\n    callq    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    leaq    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rsi\n    movq    %rax, -32(%rbp)\n    movq    %rsi, -40(%rbp)\n    movq    -32(%rbp), %rdi\n    callq    *-40(%rbp)\n    movq    %rax, -640(%rbp)        ## 8-byte Spill\nLBB0_11:                                ##   in Loop: Header=BB0_7 Depth=1\n    jmp    LBB0_12\nLBB0_12:                                ##   in Loop: Header=BB0_7 Depth=1\n    jmp    LBB0_13\nLBB0_13:                                ##   in Loop: Header=BB0_7 Depth=1\n    movq    -600(%rbp), %rax\n    addq    $4, %rax\n    movq    %rax, -600(%rbp)\n    jmp    LBB0_7\nLBB0_14:\n    xorl    %eax, %eax\n    addq    $640, %rsp              ## imm = 0x280\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .globl    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ## -- Begin function _ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .weak_definition    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .p2align    4, 0x90\n__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi3:\n    .cfi_def_cfa_offset 16\nLcfi4:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi5:\n    .cfi_def_cfa_register %rbp\n    subq    $32, %rsp\n    movq    %rdi, -8(%rbp)\n    movq    %rsi, -16(%rbp)\n    movq    -8(%rbp), %rdi\n    movq    -16(%rbp), %rsi\n    movq    -16(%rbp), %rax\n    movq    %rdi, -24(%rbp)         ## 8-byte Spill\n    movq    %rax, %rdi\n    movq    %rsi, -32(%rbp)         ## 8-byte Spill\n    callq    __ZNSt3__111char_traitsIcE6lengthEPKc\n    movq    -24(%rbp), %rdi         ## 8-byte Reload\n    movq    -32(%rbp), %rsi         ## 8-byte Reload\n    movq    %rax, %rdx\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    addq    $32, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .private_extern    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ## -- Begin function _ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .globl    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .weak_definition    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .p2align    4, 0x90\n__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_: ## @_ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\nLfunc_begin0:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception0\n## BB#0:\n    pushq    %rbp\nLcfi6:\n    .cfi_def_cfa_offset 16\nLcfi7:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi8:\n    .cfi_def_cfa_register %rbp\n    subq    $144, %rsp\n    movq    %rdi, -72(%rbp)\n    movq    -72(%rbp), %rdi\n    movq    (%rdi), %rax\n    movq    -24(%rax), %rax\n    movq    %rdi, %rcx\n    addq    %rax, %rcx\n    movq    %rcx, -32(%rbp)\n    movb    $10, -33(%rbp)\n    movq    -32(%rbp), %rsi\n    leaq    -48(%rbp), %rax\n    movq    %rdi, -80(%rbp)         ## 8-byte Spill\n    movq    %rax, %rdi\n    movq    %rax, -88(%rbp)         ## 8-byte Spill\n    callq    __ZNKSt3__18ios_base6getlocEv\n    movq    -88(%rbp), %rax         ## 8-byte Reload\n    movq    %rax, -24(%rbp)\n    movq    -24(%rbp), %rdi\nLtmp0:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp1:\n    movq    %rax, -96(%rbp)         ## 8-byte Spill\n    jmp    LBB2_1\nLBB2_1:\n    movb    -33(%rbp), %al\n    movq    -96(%rbp), %rcx         ## 8-byte Reload\n    movq    %rcx, -8(%rbp)\n    movb    %al, -9(%rbp)\n    movq    -8(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    56(%rsi), %rsi\n    movsbl    -9(%rbp), %edi\nLtmp2:\n    movl    %edi, -100(%rbp)        ## 4-byte Spill\n    movq    %rdx, %rdi\n    movl    -100(%rbp), %r8d        ## 4-byte Reload\n    movq    %rsi, -112(%rbp)        ## 8-byte Spill\n    movl    %r8d, %esi\n    movq    -112(%rbp), %rdx        ## 8-byte Reload\n    callq    *%rdx\nLtmp3:\n    movb    %al, -113(%rbp)         ## 1-byte Spill\n    jmp    LBB2_3\nLBB2_2:\nLtmp4:\n    leaq    -48(%rbp), %rdi\n    movl    %edx, %ecx\n    movq    %rax, -56(%rbp)\n    movl    %ecx, -60(%rbp)\n    callq    __ZNSt3__16localeD1Ev\n    movq    -56(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB2_3:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    -80(%rbp), %rdi         ## 8-byte Reload\n    movb    -113(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %esi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc\n    movq    -72(%rbp), %rdi\n    movq    %rax, -128(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv\n    movq    -72(%rbp), %rdi\n    movq    %rax, -136(%rbp)        ## 8-byte Spill\n    movq    %rdi, %rax\n    addq    $144, %rsp\n    popq    %rbp\n    retq\nLfunc_end0:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table2:\nLexception0:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset0 = Lfunc_begin0-Lfunc_begin0       ## >> Call Site 1 <<\n    .long    Lset0\nLset1 = Ltmp0-Lfunc_begin0              ##   Call between Lfunc_begin0 and Ltmp0\n    .long    Lset1\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset2 = Ltmp0-Lfunc_begin0              ## >> Call Site 2 <<\n    .long    Lset2\nLset3 = Ltmp3-Ltmp0                     ##   Call between Ltmp0 and Ltmp3\n    .long    Lset3\nLset4 = Ltmp4-Lfunc_begin0              ##     jumps to Ltmp4\n    .long    Lset4\n    .byte    0                       ##   On action: cleanup\nLset5 = Ltmp3-Lfunc_begin0              ## >> Call Site 3 <<\n    .long    Lset5\nLset6 = Lfunc_end0-Ltmp3                ##   Call between Ltmp3 and Lfunc_end0\n    .long    Lset6\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m ## -- Begin function _ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .weak_definition    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .p2align    4, 0x90\n__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\nLfunc_begin1:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception1\n## BB#0:\n    pushq    %rbp\nLcfi9:\n    .cfi_def_cfa_offset 16\nLcfi10:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi11:\n    .cfi_def_cfa_register %rbp\n    subq    $384, %rsp              ## imm = 0x180\n    movq    %rdi, -184(%rbp)\n    movq    %rsi, -192(%rbp)\n    movq    %rdx, -200(%rbp)\n    movq    -184(%rbp), %rsi\nLtmp5:\n    leaq    -216(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_\nLtmp6:\n    jmp    LBB3_1\nLBB3_1:\n    leaq    -216(%rbp), %rax\n    movq    %rax, -176(%rbp)\n    movq    -176(%rbp), %rax\n    movb    (%rax), %cl\n    movb    %cl, -249(%rbp)         ## 1-byte Spill\n## BB#2:\n    movb    -249(%rbp), %al         ## 1-byte Reload\n    testb    $1, %al\n    jne    LBB3_3\n    jmp    LBB3_26\nLBB3_3:\n    leaq    -248(%rbp), %rax\n    movq    -184(%rbp), %rcx\n    movq    %rax, -160(%rbp)\n    movq    %rcx, -168(%rbp)\n    movq    -160(%rbp), %rax\n    movq    -168(%rbp), %rcx\n    movq    %rax, -144(%rbp)\n    movq    %rcx, -152(%rbp)\n    movq    -144(%rbp), %rax\n    movq    -152(%rbp), %rcx\n    movq    (%rcx), %rdx\n    movq    -24(%rdx), %rdx\n    addq    %rdx, %rcx\n    movq    %rcx, -136(%rbp)\n    movq    -136(%rbp), %rcx\n    movq    %rcx, -128(%rbp)\n    movq    -128(%rbp), %rcx\n    movq    40(%rcx), %rcx\n    movq    %rcx, (%rax)\n    movq    -192(%rbp), %rsi\n    movq    -184(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rax\n    movq    %rax, -88(%rbp)\n    movq    -88(%rbp), %rax\n    movl    8(%rax), %edi\n    movq    %rsi, -264(%rbp)        ## 8-byte Spill\n    movl    %edi, -268(%rbp)        ## 4-byte Spill\n## BB#4:\n    movl    -268(%rbp), %eax        ## 4-byte Reload\n    andl    $176, %eax\n    cmpl    $32, %eax\n    jne    LBB3_6\n## BB#5:\n    movq    -192(%rbp), %rax\n    addq    -200(%rbp), %rax\n    movq    %rax, -280(%rbp)        ## 8-byte Spill\n    jmp    LBB3_7\nLBB3_6:\n    movq    -192(%rbp), %rax\n    movq    %rax, -280(%rbp)        ## 8-byte Spill\nLBB3_7:\n    movq    -280(%rbp), %rax        ## 8-byte Reload\n    movq    -192(%rbp), %rcx\n    addq    -200(%rbp), %rcx\n    movq    -184(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    -24(%rsi), %rsi\n    addq    %rsi, %rdx\n    movq    -184(%rbp), %rsi\n    movq    (%rsi), %rdi\n    movq    -24(%rdi), %rdi\n    addq    %rdi, %rsi\n    movq    %rsi, -72(%rbp)\n    movq    -72(%rbp), %rsi\n    movq    %rax, -288(%rbp)        ## 8-byte Spill\n    movq    %rcx, -296(%rbp)        ## 8-byte Spill\n    movq    %rdx, -304(%rbp)        ## 8-byte Spill\n    movq    %rsi, -312(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__111char_traitsIcE3eofEv\n    movq    -312(%rbp), %rcx        ## 8-byte Reload\n    movl    144(%rcx), %esi\n    movl    %eax, %edi\n    callq    __ZNSt3__111char_traitsIcE11eq_int_typeEii\n    testb    $1, %al\n    jne    LBB3_8\n    jmp    LBB3_13\nLBB3_8:\n    movq    -312(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -32(%rbp)\n    movb    $32, -33(%rbp)\n    movq    -32(%rbp), %rsi\nLtmp8:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp9:\n    jmp    LBB3_9\nLBB3_9:\n    leaq    -48(%rbp), %rax\n    movq    %rax, -24(%rbp)\n    movq    -24(%rbp), %rdi\nLtmp10:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp11:\n    movq    %rax, -320(%rbp)        ## 8-byte Spill\n    jmp    LBB3_10\nLBB3_10:\n    movb    -33(%rbp), %al\n    movq    -320(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -8(%rbp)\n    movb    %al, -9(%rbp)\n    movq    -8(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    56(%rsi), %rsi\n    movsbl    -9(%rbp), %edi\nLtmp12:\n    movl    %edi, -324(%rbp)        ## 4-byte Spill\n    movq    %rdx, %rdi\n    movl    -324(%rbp), %r8d        ## 4-byte Reload\n    movq    %rsi, -336(%rbp)        ## 8-byte Spill\n    movl    %r8d, %esi\n    movq    -336(%rbp), %rdx        ## 8-byte Reload\n    callq    *%rdx\nLtmp13:\n    movb    %al, -337(%rbp)         ## 1-byte Spill\n    jmp    LBB3_12\nLBB3_11:\nLtmp14:\n    movl    %edx, %ecx\n    movq    %rax, -56(%rbp)\n    movl    %ecx, -60(%rbp)\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    -56(%rbp), %rax\n    movl    -60(%rbp), %ecx\n    movq    %rax, -352(%rbp)        ## 8-byte Spill\n    movl    %ecx, -356(%rbp)        ## 4-byte Spill\n    jmp    LBB3_21\nLBB3_12:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movb    -337(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %ecx\n    movq    -312(%rbp), %rdi        ## 8-byte Reload\n    movl    %ecx, 144(%rdi)\nLBB3_13:\n    movq    -312(%rbp), %rax        ## 8-byte Reload\n    movl    144(%rax), %ecx\n    movb    %cl, %dl\n    movb    %dl, -357(%rbp)         ## 1-byte Spill\n## BB#14:\n    movq    -248(%rbp), %rdi\nLtmp15:\n    movb    -357(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %r9d\n    movq    -264(%rbp), %rsi        ## 8-byte Reload\n    movq    -288(%rbp), %rdx        ## 8-byte Reload\n    movq    -296(%rbp), %rcx        ## 8-byte Reload\n    movq    -304(%rbp), %r8         ## 8-byte Reload\n    callq    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLtmp16:\n    movq    %rax, -368(%rbp)        ## 8-byte Spill\n    jmp    LBB3_15\nLBB3_15:\n    leaq    -240(%rbp), %rax\n    movq    -368(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -240(%rbp)\n    movq    %rax, -80(%rbp)\n    movq    -80(%rbp), %rax\n    cmpq    $0, (%rax)\n    jne    LBB3_25\n## BB#16:\n    movq    -184(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rax\n    movq    %rax, -112(%rbp)\n    movl    $5, -116(%rbp)\n    movq    -112(%rbp), %rax\n    movl    -116(%rbp), %edx\n    movq    %rax, -96(%rbp)\n    movl    %edx, -100(%rbp)\n    movq    -96(%rbp), %rax\n    movl    32(%rax), %edx\n    movl    -100(%rbp), %esi\n    orl    %esi, %edx\nLtmp17:\n    movq    %rax, %rdi\n    movl    %edx, %esi\n    callq    __ZNSt3__18ios_base5clearEj\nLtmp18:\n    jmp    LBB3_17\nLBB3_17:\n    jmp    LBB3_18\nLBB3_18:\n    jmp    LBB3_25\nLBB3_19:\nLtmp7:\n    movl    %edx, %ecx\n    movq    %rax, -224(%rbp)\n    movl    %ecx, -228(%rbp)\n    jmp    LBB3_22\nLBB3_20:\nLtmp19:\n    movl    %edx, %ecx\n    movq    %rax, -352(%rbp)        ## 8-byte Spill\n    movl    %ecx, -356(%rbp)        ## 4-byte Spill\n    jmp    LBB3_21\nLBB3_21:\n    movl    -356(%rbp), %eax        ## 4-byte Reload\n    movq    -352(%rbp), %rcx        ## 8-byte Reload\n    leaq    -216(%rbp), %rdi\n    movq    %rcx, -224(%rbp)\n    movl    %eax, -228(%rbp)\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\nLBB3_22:\n    movq    -224(%rbp), %rdi\n    callq    ___cxa_begin_catch\n    movq    -184(%rbp), %rdi\n    movq    (%rdi), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rdi\nLtmp20:\n    movq    %rax, -376(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv\nLtmp21:\n    jmp    LBB3_23\nLBB3_23:\n    callq    ___cxa_end_catch\nLBB3_24:\n    movq    -184(%rbp), %rax\n    addq    $384, %rsp              ## imm = 0x180\n    popq    %rbp\n    retq\nLBB3_25:\n    jmp    LBB3_26\nLBB3_26:\n    leaq    -216(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\n    jmp    LBB3_24\nLBB3_27:\nLtmp22:\n    movl    %edx, %ecx\n    movq    %rax, -224(%rbp)\n    movl    %ecx, -228(%rbp)\nLtmp23:\n    callq    ___cxa_end_catch\nLtmp24:\n    jmp    LBB3_28\nLBB3_28:\n    jmp    LBB3_29\nLBB3_29:\n    movq    -224(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB3_30:\nLtmp25:\n    movl    %edx, %ecx\n    movq    %rax, %rdi\n    movl    %ecx, -380(%rbp)        ## 4-byte Spill\n    callq    ___clang_call_terminate\nLfunc_end1:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table3:\nLexception1:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .asciz    \"\\201\\201\\200\\200\"      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    117                     ## Call site table length\nLset7 = Ltmp5-Lfunc_begin1              ## >> Call Site 1 <<\n    .long    Lset7\nLset8 = Ltmp6-Ltmp5                     ##   Call between Ltmp5 and Ltmp6\n    .long    Lset8\nLset9 = Ltmp7-Lfunc_begin1              ##     jumps to Ltmp7\n    .long    Lset9\n    .byte    5                       ##   On action: 3\nLset10 = Ltmp8-Lfunc_begin1             ## >> Call Site 2 <<\n    .long    Lset10\nLset11 = Ltmp9-Ltmp8                    ##   Call between Ltmp8 and Ltmp9\n    .long    Lset11\nLset12 = Ltmp19-Lfunc_begin1            ##     jumps to Ltmp19\n    .long    Lset12\n    .byte    5                       ##   On action: 3\nLset13 = Ltmp10-Lfunc_begin1            ## >> Call Site 3 <<\n    .long    Lset13\nLset14 = Ltmp13-Ltmp10                  ##   Call between Ltmp10 and Ltmp13\n    .long    Lset14\nLset15 = Ltmp14-Lfunc_begin1            ##     jumps to Ltmp14\n    .long    Lset15\n    .byte    3                       ##   On action: 2\nLset16 = Ltmp15-Lfunc_begin1            ## >> Call Site 4 <<\n    .long    Lset16\nLset17 = Ltmp18-Ltmp15                  ##   Call between Ltmp15 and Ltmp18\n    .long    Lset17\nLset18 = Ltmp19-Lfunc_begin1            ##     jumps to Ltmp19\n    .long    Lset18\n    .byte    5                       ##   On action: 3\nLset19 = Ltmp18-Lfunc_begin1            ## >> Call Site 5 <<\n    .long    Lset19\nLset20 = Ltmp20-Ltmp18                  ##   Call between Ltmp18 and Ltmp20\n    .long    Lset20\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset21 = Ltmp20-Lfunc_begin1            ## >> Call Site 6 <<\n    .long    Lset21\nLset22 = Ltmp21-Ltmp20                  ##   Call between Ltmp20 and Ltmp21\n    .long    Lset22\nLset23 = Ltmp22-Lfunc_begin1            ##     jumps to Ltmp22\n    .long    Lset23\n    .byte    0                       ##   On action: cleanup\nLset24 = Ltmp21-Lfunc_begin1            ## >> Call Site 7 <<\n    .long    Lset24\nLset25 = Ltmp23-Ltmp21                  ##   Call between Ltmp21 and Ltmp23\n    .long    Lset25\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset26 = Ltmp23-Lfunc_begin1            ## >> Call Site 8 <<\n    .long    Lset26\nLset27 = Ltmp24-Ltmp23                  ##   Call between Ltmp23 and Ltmp24\n    .long    Lset27\nLset28 = Ltmp25-Lfunc_begin1            ##     jumps to Ltmp25\n    .long    Lset28\n    .byte    5                       ##   On action: 3\nLset29 = Ltmp24-Lfunc_begin1            ## >> Call Site 9 <<\n    .long    Lset29\nLset30 = Lfunc_end1-Ltmp24              ##   Call between Ltmp24 and Lfunc_end1\n    .long    Lset30\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .byte    0                       ## >> Action Record 1 <<\n                                        ##   Cleanup\n    .byte    0                       ##   No further actions\n    .byte    1                       ## >> Action Record 2 <<\n                                        ##   Catch TypeInfo 1\n    .byte    125                     ##   Continue to action 1\n    .byte    1                       ## >> Action Record 3 <<\n                                        ##   Catch TypeInfo 1\n    .byte    0                       ##   No further actions\n                                        ## >> Catch TypeInfos <<\n    .long    0                       ## TypeInfo 1\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__111char_traitsIcE6lengthEPKc ## -- Begin function _ZNSt3__111char_traitsIcE6lengthEPKc\n    .weak_definition    __ZNSt3__111char_traitsIcE6lengthEPKc\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE6lengthEPKc:  ## @_ZNSt3__111char_traitsIcE6lengthEPKc\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi12:\n    .cfi_def_cfa_offset 16\nLcfi13:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi14:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    movq    %rdi, -8(%rbp)\n    movq    -8(%rbp), %rdi\n    callq    _strlen\n    addq    $16, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .private_extern    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ## -- Begin function _ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .globl    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .weak_definition    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .p2align    4, 0x90\n__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLfunc_begin2:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception2\n## BB#0:\n    pushq    %rbp\nLcfi15:\n    .cfi_def_cfa_offset 16\nLcfi16:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi17:\n    .cfi_def_cfa_register %rbp\n    subq    $480, %rsp              ## imm = 0x1E0\n    movb    %r9b, %al\n    movq    %rdi, -320(%rbp)\n    movq    %rsi, -328(%rbp)\n    movq    %rdx, -336(%rbp)\n    movq    %rcx, -344(%rbp)\n    movq    %r8, -352(%rbp)\n    movb    %al, -353(%rbp)\n    cmpq    $0, -320(%rbp)\n    jne    LBB5_2\n## BB#1:\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_2:\n    movq    -344(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -368(%rbp)\n    movq    -352(%rbp), %rax\n    movq    %rax, -304(%rbp)\n    movq    -304(%rbp), %rax\n    movq    24(%rax), %rax\n    movq    %rax, -376(%rbp)\n    movq    -376(%rbp), %rax\n    cmpq    -368(%rbp), %rax\n    jle    LBB5_4\n## BB#3:\n    movq    -368(%rbp), %rax\n    movq    -376(%rbp), %rcx\n    subq    %rax, %rcx\n    movq    %rcx, -376(%rbp)\n    jmp    LBB5_5\nLBB5_4:\n    movq    $0, -376(%rbp)\nLBB5_5:\n    movq    -336(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -384(%rbp)\n    cmpq    $0, -384(%rbp)\n    jle    LBB5_9\n## BB#6:\n    movq    -320(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    movq    -384(%rbp), %rdx\n    movq    %rax, -232(%rbp)\n    movq    %rcx, -240(%rbp)\n    movq    %rdx, -248(%rbp)\n    movq    -232(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -240(%rbp), %rsi\n    movq    -248(%rbp), %rdx\n    movq    %rax, %rdi\n    callq    *%rcx\n    cmpq    -384(%rbp), %rax\n    je    LBB5_8\n## BB#7:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_8:\n    jmp    LBB5_9\nLBB5_9:\n    cmpq    $0, -376(%rbp)\n    jle    LBB5_21\n## BB#10:\n    xorl    %esi, %esi\n    movl    $24, %eax\n    movl    %eax, %edx\n    leaq    -408(%rbp), %rcx\n    movq    -376(%rbp), %rdi\n    movb    -353(%rbp), %r8b\n    movq    %rcx, -208(%rbp)\n    movq    %rdi, -216(%rbp)\n    movb    %r8b, -217(%rbp)\n    movq    -208(%rbp), %rcx\n    movq    -216(%rbp), %rdi\n    movb    -217(%rbp), %r8b\n    movq    %rcx, -184(%rbp)\n    movq    %rdi, -192(%rbp)\n    movb    %r8b, -193(%rbp)\n    movq    -184(%rbp), %rcx\n    movq    %rcx, -176(%rbp)\n    movq    -176(%rbp), %rdi\n    movq    %rdi, -168(%rbp)\n    movq    -168(%rbp), %rdi\n    movq    %rdi, %r9\n    movq    %r9, -160(%rbp)\n    movq    -160(%rbp), %r9\n    movq    %rdi, -432(%rbp)        ## 8-byte Spill\n    movq    %r9, %rdi\n    movq    %rcx, -440(%rbp)        ## 8-byte Spill\n    callq    _memset\n    movq    -432(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -152(%rbp)\n    movq    -152(%rbp), %rcx\n    movq    %rcx, -144(%rbp)\n    movq    -192(%rbp), %rsi\n    movq    -440(%rbp), %rdi        ## 8-byte Reload\n    movsbl    -193(%rbp), %edx\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc\n    leaq    -408(%rbp), %rcx\n    movq    -320(%rbp), %rsi\n    movq    %rcx, -136(%rbp)\n    movq    -136(%rbp), %rcx\n    movq    %rcx, -128(%rbp)\n    movq    -128(%rbp), %rcx\n    movq    %rcx, -120(%rbp)\n    movq    -120(%rbp), %rdi\n    movq    %rdi, -112(%rbp)\n    movq    -112(%rbp), %rdi\n    movq    %rdi, -104(%rbp)\n    movq    -104(%rbp), %rdi\n    movzbl    (%rdi), %eax\n    movl    %eax, %edi\n    andq    $1, %rdi\n    cmpq    $0, %rdi\n    movq    %rsi, -448(%rbp)        ## 8-byte Spill\n    movq    %rcx, -456(%rbp)        ## 8-byte Spill\n    je    LBB5_12\n## BB#11:\n    movq    -456(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -56(%rbp)\n    movq    -56(%rbp), %rcx\n    movq    %rcx, -48(%rbp)\n    movq    -48(%rbp), %rcx\n    movq    %rcx, -40(%rbp)\n    movq    -40(%rbp), %rcx\n    movq    16(%rcx), %rcx\n    movq    %rcx, -464(%rbp)        ## 8-byte Spill\n    jmp    LBB5_13\nLBB5_12:\n    movq    -456(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -96(%rbp)\n    movq    -96(%rbp), %rcx\n    movq    %rcx, -88(%rbp)\n    movq    -88(%rbp), %rcx\n    movq    %rcx, -80(%rbp)\n    movq    -80(%rbp), %rcx\n    addq    $1, %rcx\n    movq    %rcx, -72(%rbp)\n    movq    -72(%rbp), %rcx\n    movq    %rcx, -64(%rbp)\n    movq    -64(%rbp), %rcx\n    movq    %rcx, -464(%rbp)        ## 8-byte Spill\nLBB5_13:\n    movq    -464(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -32(%rbp)\n    movq    -32(%rbp), %rax\n    movq    -376(%rbp), %rcx\n    movq    -448(%rbp), %rdx        ## 8-byte Reload\n    movq    %rdx, -8(%rbp)\n    movq    %rax, -16(%rbp)\n    movq    %rcx, -24(%rbp)\n    movq    -8(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -16(%rbp), %rsi\n    movq    -24(%rbp), %rdx\nLtmp26:\n    movq    %rax, %rdi\n    callq    *%rcx\nLtmp27:\n    movq    %rax, -472(%rbp)        ## 8-byte Spill\n    jmp    LBB5_14\nLBB5_14:\n    jmp    LBB5_15\nLBB5_15:\n    movq    -472(%rbp), %rax        ## 8-byte Reload\n    cmpq    -376(%rbp), %rax\n    je    LBB5_18\n## BB#16:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    movl    $1, -424(%rbp)\n    jmp    LBB5_19\nLBB5_17:\nLtmp28:\n    leaq    -408(%rbp), %rdi\n    movl    %edx, %ecx\n    movq    %rax, -416(%rbp)\n    movl    %ecx, -420(%rbp)\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev\n    jmp    LBB5_27\nLBB5_18:\n    movl    $0, -424(%rbp)\nLBB5_19:\n    leaq    -408(%rbp), %rdi\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev\n    movl    -424(%rbp), %eax\n    testl    %eax, %eax\n    movl    %eax, -476(%rbp)        ## 4-byte Spill\n    je    LBB5_20\n    jmp    LBB5_29\nLBB5_29:\n    movl    -476(%rbp), %eax        ## 4-byte Reload\n    subl    $1, %eax\n    movl    %eax, -480(%rbp)        ## 4-byte Spill\n    je    LBB5_26\n    jmp    LBB5_28\nLBB5_20:\n    jmp    LBB5_21\nLBB5_21:\n    movq    -344(%rbp), %rax\n    movq    -336(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -384(%rbp)\n    cmpq    $0, -384(%rbp)\n    jle    LBB5_25\n## BB#22:\n    movq    -320(%rbp), %rax\n    movq    -336(%rbp), %rcx\n    movq    -384(%rbp), %rdx\n    movq    %rax, -256(%rbp)\n    movq    %rcx, -264(%rbp)\n    movq    %rdx, -272(%rbp)\n    movq    -256(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -264(%rbp), %rsi\n    movq    -272(%rbp), %rdx\n    movq    %rax, %rdi\n    callq    *%rcx\n    cmpq    -384(%rbp), %rax\n    je    LBB5_24\n## BB#23:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_24:\n    jmp    LBB5_25\nLBB5_25:\n    movq    -352(%rbp), %rax\n    movq    %rax, -280(%rbp)\n    movq    $0, -288(%rbp)\n    movq    -280(%rbp), %rax\n    movq    24(%rax), %rcx\n    movq    %rcx, -296(%rbp)\n    movq    -288(%rbp), %rcx\n    movq    %rcx, 24(%rax)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\nLBB5_26:\n    movq    -312(%rbp), %rax\n    addq    $480, %rsp              ## imm = 0x1E0\n    popq    %rbp\n    retq\nLBB5_27:\n    movq    -416(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB5_28:\nLfunc_end2:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table5:\nLexception2:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset31 = Lfunc_begin2-Lfunc_begin2      ## >> Call Site 1 <<\n    .long    Lset31\nLset32 = Ltmp26-Lfunc_begin2            ##   Call between Lfunc_begin2 and Ltmp26\n    .long    Lset32\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset33 = Ltmp26-Lfunc_begin2            ## >> Call Site 2 <<\n    .long    Lset33\nLset34 = Ltmp27-Ltmp26                  ##   Call between Ltmp26 and Ltmp27\n    .long    Lset34\nLset35 = Ltmp28-Lfunc_begin2            ##     jumps to Ltmp28\n    .long    Lset35\n    .byte    0                       ##   On action: cleanup\nLset36 = Ltmp27-Lfunc_begin2            ## >> Call Site 3 <<\n    .long    Lset36\nLset37 = Lfunc_end2-Ltmp27              ##   Call between Ltmp27 and Lfunc_end2\n    .long    Lset37\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    ___clang_call_terminate ## -- Begin function __clang_call_terminate\n    .globl    ___clang_call_terminate\n    .weak_definition    ___clang_call_terminate\n    .p2align    4, 0x90\n___clang_call_terminate:                ## @__clang_call_terminate\n## BB#0:\n    pushq    %rax\n    callq    ___cxa_begin_catch\n    movq    %rax, (%rsp)            ## 8-byte Spill\n    callq    __ZSt9terminatev\n                                        ## -- End function\n    .globl    __ZNSt3__111char_traitsIcE11eq_int_typeEii ## -- Begin function _ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .weak_definition    __ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE11eq_int_typeEii: ## @_ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi18:\n    .cfi_def_cfa_offset 16\nLcfi19:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi20:\n    .cfi_def_cfa_register %rbp\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %esi\n    cmpl    -8(%rbp), %esi\n    sete    %al\n    andb    $1, %al\n    movzbl    %al, %eax\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .globl    __ZNSt3__111char_traitsIcE3eofEv ## -- Begin function _ZNSt3__111char_traitsIcE3eofEv\n    .weak_definition    __ZNSt3__111char_traitsIcE3eofEv\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE3eofEv:       ## @_ZNSt3__111char_traitsIcE3eofEv\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi21:\n    .cfi_def_cfa_offset 16\nLcfi22:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi23:\n    .cfi_def_cfa_register %rbp\n    movl    $4294967295, %eax       ## imm = 0xFFFFFFFF\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .section    __TEXT,__const\n    .p2align    2               ## @_ZZ4mainE5array\nl__ZZ4mainE5array:\n    .long    2700                    ## 0xa8c\n    .long    2314                    ## 0x90a\n    .long    8429                    ## 0x20ed\n    .long    7726                    ## 0x1e2e\n    .long    4817                    ## 0x12d1\n    .long    8716                    ## 0x220c\n    .long    3598                    ## 0xe0e\n    .long    6255                    ## 0x186f\n    .long    5056                    ## 0x13c0\n    .long    8653                    ## 0x21cd\n    .long    8571                    ## 0x217b\n    .long    5028                    ## 0x13a4\n    .long    1259                    ## 0x4eb\n    .long    3315                    ## 0xcf3\n    .long    2896                    ## 0xb50\n    .long    1411                    ## 0x583\n    .long    3847                    ## 0xf07\n    .long    879                     ## 0x36f\n    .long    7353                    ## 0x1cb9\n    .long    8056                    ## 0x1f78\n    .long    8765                    ## 0x223d\n    .long    2344                    ## 0x928\n    .long    6349                    ## 0x18cd\n    .long    4156                    ## 0x103c\n    .long    8350                    ## 0x209e\n    .long    4164                    ## 0x1044\n    .long    4783                    ## 0x12af\n    .long    6800                    ## 0x1a90\n    .long    8887                    ## 0x22b7\n    .long    267                     ## 0x10b\n    .long    4478                    ## 0x117e\n    .long    6327                    ## 0x18b7\n    .long    58                      ## 0x3a\n    .long    7961                    ## 0x1f19\n    .long    756                     ## 0x2f4\n    .long    5654                    ## 0x1616\n    .long    9546                    ## 0x254a\n    .long    5132                    ## 0x140c\n    .long    247                     ## 0xf7\n    .long    5514                    ## 0x158a\n    .long    7098                    ## 0x1bba\n    .long    1156                    ## 0x484\n    .long    795                     ## 0x31b\n    .long    2502                    ## 0x9c6\n    .long    367                     ## 0x16f\n    .long    5330                    ## 0x14d2\n    .long    2261                    ## 0x8d5\n    .long    8692                    ## 0x21f4\n    .long    2460                    ## 0x99c\n    .long    4823                    ## 0x12d7\n    .long    8968                    ## 0x2308\n    .long    4976                    ## 0x1370\n    .long    1929                    ## 0x789\n    .long    1051                    ## 0x41b\n    .long    9249                    ## 0x2421\n    .long    9713                    ## 0x25f1\n    .long    2803                    ## 0xaf3\n    .long    1743                    ## 0x6cf\n    .long    3681                    ## 0xe61\n    .long    93                      ## 0x5d\n    .long    4967                    ## 0x1367\n    .long    2245                    ## 0x8c5\n    .long    198                     ## 0xc6\n    .long    896                     ## 0x380\n    .long    6372                    ## 0x18e4\n    .long    4413                    ## 0x113d\n    .long    2615                    ## 0xa37\n    .long    6130                    ## 0x17f2\n    .long    5766                    ## 0x1686\n    .long    5306                    ## 0x14ba\n    .long    1236                    ## 0x4d4\n    .long    888                     ## 0x378\n    .long    8050                    ## 0x1f72\n    .long    7080                    ## 0x1ba8\n    .long    3460                    ## 0xd84\n    .long    3473                    ## 0xd91\n    .long    1720                    ## 0x6b8\n    .long    3913                    ## 0xf49\n    .long    3449                    ## 0xd79\n    .long    8420                    ## 0x20e4\n    .long    1814                    ## 0x716\n    .long    1261                    ## 0x4ed\n    .long    1368                    ## 0x558\n    .long    167                     ## 0xa7\n    .long    7938                    ## 0x1f02\n    .long    4483                    ## 0x1183\n    .long    4843                    ## 0x12eb\n    .long    4682                    ## 0x124a\n    .long    3301                    ## 0xce5\n    .long    4038                    ## 0xfc6\n    .long    709                     ## 0x2c5\n    .long    8655                    ## 0x21cf\n    .long    598                     ## 0x256\n    .long    3857                    ## 0xf11\n    .long    6285                    ## 0x188d\n    .long    2961                    ## 0xb91\n    .long    6817                    ## 0x1aa1\n    .long    1031                    ## 0x407\n    .long    4007                    ## 0xfa7\n    .long    1392                    ## 0x570\n    .long    5717                    ## 0x1655\n    .long    5837                    ## 0x16cd\n    .long    5695                    ## 0x163f\n    .long    9511                    ## 0x2527\n    .long    8891                    ## 0x22bb\n    .long    7883                    ## 0x1ecb\n    .long    7035                    ## 0x1b7b\n    .long    2349                    ## 0x92d\n    .long    5752                    ## 0x1678\n    .long    3139                    ## 0xc43\n    .long    2442                    ## 0x98a\n    .long    3966                    ## 0xf7e\n    .long    2007                    ## 0x7d7\n    .long    9205                    ## 0x23f5\n    .long    8434                    ## 0x20f2\n    .long    5065                    ## 0x13c9\n    .long    3795                    ## 0xed3\n    .long    6890                    ## 0x1aea\n    .long    2715                    ## 0xa9b\n    .long    1                       ## 0x1\n    .long    5106                    ## 0x13f2\n    .long    5083                    ## 0x13db\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .space    1\n\nL_.str.1:                               ## @.str.1\n    .asciz    \"hello, world\"\n\n.subsections_via_symbols\n```\n\n```assembly\n    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 13\n    .globl    _main                   ## -- Begin function main\n    .p2align    4, 0x90\n_main:                                  ## @main\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi0:\n    .cfi_def_cfa_offset 16\nLcfi1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi2:\n    .cfi_def_cfa_register %rbp\n    subq    $592, %rsp              ## imm = 0x250\n    leaq    -528(%rbp), %rax\n    leaq    l__ZZ4mainE5array(%rip), %rcx\n    movl    $488, %edx              ## imm = 0x1E8\n                                        ## kill: %RDX<def> %EDX<kill>\n    movl    $0, -36(%rbp)\n    movq    %rax, %rsi\n    movq    %rsi, %rdi\n    movq    %rcx, %rsi\n    movq    %rax, -576(%rbp)        ## 8-byte Spill\n    callq    _memcpy\n    movl    $5330, -532(%rbp)       ## imm = 0x14D2\n    movq    -576(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -544(%rbp)\n    movq    -544(%rbp), %rcx\n    movq    %rcx, -32(%rbp)\n    movq    -32(%rbp), %rcx\n    movq    %rcx, -552(%rbp)\n    movq    -544(%rbp), %rcx\n    movq    %rcx, -8(%rbp)\n    movq    -8(%rbp), %rcx\n    addq    $488, %rcx              ## imm = 0x1E8\n    movq    %rcx, -560(%rbp)\nLBB0_1:                                 ## =>This Inner Loop Header: Depth=1\n    movq    -552(%rbp), %rax\n    cmpq    -560(%rbp), %rax\n    je    LBB0_8\n## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1\n    movq    -552(%rbp), %rax\n    movq    %rax, -568(%rbp)\n    movq    -568(%rbp), %rax\n    cmpl    $1000, (%rax)           ## imm = 0x3E8\n    jle    LBB0_6\n## BB#3:                                ##   in Loop: Header=BB0_1 Depth=1\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    leaq    L_.str(%rip), %rsi\n    callq    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    movq    -568(%rbp), %rsi\n    movl    (%rsi), %ecx\n    cmpl    -532(%rbp), %ecx\n    movq    %rax, -584(%rbp)        ## 8-byte Spill\n    jne    LBB0_5\n## BB#4:                                ##   in Loop: Header=BB0_1 Depth=1\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    leaq    L_.str.1(%rip), %rsi\n    callq    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    leaq    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rsi\n    movq    %rax, -16(%rbp)\n    movq    %rsi, -24(%rbp)\n    movq    -16(%rbp), %rdi\n    callq    *-24(%rbp)\n    movq    %rax, -592(%rbp)        ## 8-byte Spill\nLBB0_5:                                 ##   in Loop: Header=BB0_1 Depth=1\n    jmp    LBB0_6\nLBB0_6:                                 ##   in Loop: Header=BB0_1 Depth=1\n    jmp    LBB0_7\nLBB0_7:                                 ##   in Loop: Header=BB0_1 Depth=1\n    movq    -552(%rbp), %rax\n    addq    $4, %rax\n    movq    %rax, -552(%rbp)\n    jmp    LBB0_1\nLBB0_8:\n    xorl    %eax, %eax\n    addq    $592, %rsp              ## imm = 0x250\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .globl    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc ## -- Begin function _ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .weak_definition    __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .p2align    4, 0x90\n__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi3:\n    .cfi_def_cfa_offset 16\nLcfi4:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi5:\n    .cfi_def_cfa_register %rbp\n    subq    $32, %rsp\n    movq    %rdi, -8(%rbp)\n    movq    %rsi, -16(%rbp)\n    movq    -8(%rbp), %rdi\n    movq    -16(%rbp), %rsi\n    movq    -16(%rbp), %rax\n    movq    %rdi, -24(%rbp)         ## 8-byte Spill\n    movq    %rax, %rdi\n    movq    %rsi, -32(%rbp)         ## 8-byte Spill\n    callq    __ZNSt3__111char_traitsIcE6lengthEPKc\n    movq    -24(%rbp), %rdi         ## 8-byte Reload\n    movq    -32(%rbp), %rsi         ## 8-byte Reload\n    movq    %rax, %rdx\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    addq    $32, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .private_extern    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ ## -- Begin function _ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .globl    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .weak_definition    __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\n    .p2align    4, 0x90\n__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_: ## @_ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_\nLfunc_begin0:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception0\n## BB#0:\n    pushq    %rbp\nLcfi6:\n    .cfi_def_cfa_offset 16\nLcfi7:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi8:\n    .cfi_def_cfa_register %rbp\n    subq    $144, %rsp\n    movq    %rdi, -72(%rbp)\n    movq    -72(%rbp), %rdi\n    movq    (%rdi), %rax\n    movq    -24(%rax), %rax\n    movq    %rdi, %rcx\n    addq    %rax, %rcx\n    movq    %rcx, -32(%rbp)\n    movb    $10, -33(%rbp)\n    movq    -32(%rbp), %rsi\n    leaq    -48(%rbp), %rax\n    movq    %rdi, -80(%rbp)         ## 8-byte Spill\n    movq    %rax, %rdi\n    movq    %rax, -88(%rbp)         ## 8-byte Spill\n    callq    __ZNKSt3__18ios_base6getlocEv\n    movq    -88(%rbp), %rax         ## 8-byte Reload\n    movq    %rax, -24(%rbp)\n    movq    -24(%rbp), %rdi\nLtmp0:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp1:\n    movq    %rax, -96(%rbp)         ## 8-byte Spill\n    jmp    LBB2_1\nLBB2_1:\n    movb    -33(%rbp), %al\n    movq    -96(%rbp), %rcx         ## 8-byte Reload\n    movq    %rcx, -8(%rbp)\n    movb    %al, -9(%rbp)\n    movq    -8(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    56(%rsi), %rsi\n    movsbl    -9(%rbp), %edi\nLtmp2:\n    movl    %edi, -100(%rbp)        ## 4-byte Spill\n    movq    %rdx, %rdi\n    movl    -100(%rbp), %r8d        ## 4-byte Reload\n    movq    %rsi, -112(%rbp)        ## 8-byte Spill\n    movl    %r8d, %esi\n    movq    -112(%rbp), %rdx        ## 8-byte Reload\n    callq    *%rdx\nLtmp3:\n    movb    %al, -113(%rbp)         ## 1-byte Spill\n    jmp    LBB2_3\nLBB2_2:\nLtmp4:\n    leaq    -48(%rbp), %rdi\n    movl    %edx, %ecx\n    movq    %rax, -56(%rbp)\n    movl    %ecx, -60(%rbp)\n    callq    __ZNSt3__16localeD1Ev\n    movq    -56(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB2_3:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    -80(%rbp), %rdi         ## 8-byte Reload\n    movb    -113(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %esi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc\n    movq    -72(%rbp), %rdi\n    movq    %rax, -128(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv\n    movq    -72(%rbp), %rdi\n    movq    %rax, -136(%rbp)        ## 8-byte Spill\n    movq    %rdi, %rax\n    addq    $144, %rsp\n    popq    %rbp\n    retq\nLfunc_end0:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table2:\nLexception0:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset0 = Lfunc_begin0-Lfunc_begin0       ## >> Call Site 1 <<\n    .long    Lset0\nLset1 = Ltmp0-Lfunc_begin0              ##   Call between Lfunc_begin0 and Ltmp0\n    .long    Lset1\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset2 = Ltmp0-Lfunc_begin0              ## >> Call Site 2 <<\n    .long    Lset2\nLset3 = Ltmp3-Ltmp0                     ##   Call between Ltmp0 and Ltmp3\n    .long    Lset3\nLset4 = Ltmp4-Lfunc_begin0              ##     jumps to Ltmp4\n    .long    Lset4\n    .byte    0                       ##   On action: cleanup\nLset5 = Ltmp3-Lfunc_begin0              ## >> Call Site 3 <<\n    .long    Lset5\nLset6 = Lfunc_end0-Ltmp3                ##   Call between Ltmp3 and Lfunc_end0\n    .long    Lset6\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m ## -- Begin function _ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .weak_definition    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .p2align    4, 0x90\n__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\nLfunc_begin1:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception1\n## BB#0:\n    pushq    %rbp\nLcfi9:\n    .cfi_def_cfa_offset 16\nLcfi10:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi11:\n    .cfi_def_cfa_register %rbp\n    subq    $384, %rsp              ## imm = 0x180\n    movq    %rdi, -184(%rbp)\n    movq    %rsi, -192(%rbp)\n    movq    %rdx, -200(%rbp)\n    movq    -184(%rbp), %rsi\nLtmp5:\n    leaq    -216(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_\nLtmp6:\n    jmp    LBB3_1\nLBB3_1:\n    leaq    -216(%rbp), %rax\n    movq    %rax, -176(%rbp)\n    movq    -176(%rbp), %rax\n    movb    (%rax), %cl\n    movb    %cl, -249(%rbp)         ## 1-byte Spill\n## BB#2:\n    movb    -249(%rbp), %al         ## 1-byte Reload\n    testb    $1, %al\n    jne    LBB3_3\n    jmp    LBB3_26\nLBB3_3:\n    leaq    -248(%rbp), %rax\n    movq    -184(%rbp), %rcx\n    movq    %rax, -160(%rbp)\n    movq    %rcx, -168(%rbp)\n    movq    -160(%rbp), %rax\n    movq    -168(%rbp), %rcx\n    movq    %rax, -144(%rbp)\n    movq    %rcx, -152(%rbp)\n    movq    -144(%rbp), %rax\n    movq    -152(%rbp), %rcx\n    movq    (%rcx), %rdx\n    movq    -24(%rdx), %rdx\n    addq    %rdx, %rcx\n    movq    %rcx, -136(%rbp)\n    movq    -136(%rbp), %rcx\n    movq    %rcx, -128(%rbp)\n    movq    -128(%rbp), %rcx\n    movq    40(%rcx), %rcx\n    movq    %rcx, (%rax)\n    movq    -192(%rbp), %rsi\n    movq    -184(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rax\n    movq    %rax, -88(%rbp)\n    movq    -88(%rbp), %rax\n    movl    8(%rax), %edi\n    movq    %rsi, -264(%rbp)        ## 8-byte Spill\n    movl    %edi, -268(%rbp)        ## 4-byte Spill\n## BB#4:\n    movl    -268(%rbp), %eax        ## 4-byte Reload\n    andl    $176, %eax\n    cmpl    $32, %eax\n    jne    LBB3_6\n## BB#5:\n    movq    -192(%rbp), %rax\n    addq    -200(%rbp), %rax\n    movq    %rax, -280(%rbp)        ## 8-byte Spill\n    jmp    LBB3_7\nLBB3_6:\n    movq    -192(%rbp), %rax\n    movq    %rax, -280(%rbp)        ## 8-byte Spill\nLBB3_7:\n    movq    -280(%rbp), %rax        ## 8-byte Reload\n    movq    -192(%rbp), %rcx\n    addq    -200(%rbp), %rcx\n    movq    -184(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    -24(%rsi), %rsi\n    addq    %rsi, %rdx\n    movq    -184(%rbp), %rsi\n    movq    (%rsi), %rdi\n    movq    -24(%rdi), %rdi\n    addq    %rdi, %rsi\n    movq    %rsi, -72(%rbp)\n    movq    -72(%rbp), %rsi\n    movq    %rax, -288(%rbp)        ## 8-byte Spill\n    movq    %rcx, -296(%rbp)        ## 8-byte Spill\n    movq    %rdx, -304(%rbp)        ## 8-byte Spill\n    movq    %rsi, -312(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__111char_traitsIcE3eofEv\n    movq    -312(%rbp), %rcx        ## 8-byte Reload\n    movl    144(%rcx), %esi\n    movl    %eax, %edi\n    callq    __ZNSt3__111char_traitsIcE11eq_int_typeEii\n    testb    $1, %al\n    jne    LBB3_8\n    jmp    LBB3_13\nLBB3_8:\n    movq    -312(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -32(%rbp)\n    movb    $32, -33(%rbp)\n    movq    -32(%rbp), %rsi\nLtmp8:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp9:\n    jmp    LBB3_9\nLBB3_9:\n    leaq    -48(%rbp), %rax\n    movq    %rax, -24(%rbp)\n    movq    -24(%rbp), %rdi\nLtmp10:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp11:\n    movq    %rax, -320(%rbp)        ## 8-byte Spill\n    jmp    LBB3_10\nLBB3_10:\n    movb    -33(%rbp), %al\n    movq    -320(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -8(%rbp)\n    movb    %al, -9(%rbp)\n    movq    -8(%rbp), %rdx\n    movq    (%rdx), %rsi\n    movq    56(%rsi), %rsi\n    movsbl    -9(%rbp), %edi\nLtmp12:\n    movl    %edi, -324(%rbp)        ## 4-byte Spill\n    movq    %rdx, %rdi\n    movl    -324(%rbp), %r8d        ## 4-byte Reload\n    movq    %rsi, -336(%rbp)        ## 8-byte Spill\n    movl    %r8d, %esi\n    movq    -336(%rbp), %rdx        ## 8-byte Reload\n    callq    *%rdx\nLtmp13:\n    movb    %al, -337(%rbp)         ## 1-byte Spill\n    jmp    LBB3_12\nLBB3_11:\nLtmp14:\n    movl    %edx, %ecx\n    movq    %rax, -56(%rbp)\n    movl    %ecx, -60(%rbp)\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    -56(%rbp), %rax\n    movl    -60(%rbp), %ecx\n    movq    %rax, -352(%rbp)        ## 8-byte Spill\n    movl    %ecx, -356(%rbp)        ## 4-byte Spill\n    jmp    LBB3_21\nLBB3_12:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movb    -337(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %ecx\n    movq    -312(%rbp), %rdi        ## 8-byte Reload\n    movl    %ecx, 144(%rdi)\nLBB3_13:\n    movq    -312(%rbp), %rax        ## 8-byte Reload\n    movl    144(%rax), %ecx\n    movb    %cl, %dl\n    movb    %dl, -357(%rbp)         ## 1-byte Spill\n## BB#14:\n    movq    -248(%rbp), %rdi\nLtmp15:\n    movb    -357(%rbp), %al         ## 1-byte Reload\n    movsbl    %al, %r9d\n    movq    -264(%rbp), %rsi        ## 8-byte Reload\n    movq    -288(%rbp), %rdx        ## 8-byte Reload\n    movq    -296(%rbp), %rcx        ## 8-byte Reload\n    movq    -304(%rbp), %r8         ## 8-byte Reload\n    callq    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLtmp16:\n    movq    %rax, -368(%rbp)        ## 8-byte Spill\n    jmp    LBB3_15\nLBB3_15:\n    leaq    -240(%rbp), %rax\n    movq    -368(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -240(%rbp)\n    movq    %rax, -80(%rbp)\n    movq    -80(%rbp), %rax\n    cmpq    $0, (%rax)\n    jne    LBB3_25\n## BB#16:\n    movq    -184(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rax\n    movq    %rax, -112(%rbp)\n    movl    $5, -116(%rbp)\n    movq    -112(%rbp), %rax\n    movl    -116(%rbp), %edx\n    movq    %rax, -96(%rbp)\n    movl    %edx, -100(%rbp)\n    movq    -96(%rbp), %rax\n    movl    32(%rax), %edx\n    movl    -100(%rbp), %esi\n    orl    %esi, %edx\nLtmp17:\n    movq    %rax, %rdi\n    movl    %edx, %esi\n    callq    __ZNSt3__18ios_base5clearEj\nLtmp18:\n    jmp    LBB3_17\nLBB3_17:\n    jmp    LBB3_18\nLBB3_18:\n    jmp    LBB3_25\nLBB3_19:\nLtmp7:\n    movl    %edx, %ecx\n    movq    %rax, -224(%rbp)\n    movl    %ecx, -228(%rbp)\n    jmp    LBB3_22\nLBB3_20:\nLtmp19:\n    movl    %edx, %ecx\n    movq    %rax, -352(%rbp)        ## 8-byte Spill\n    movl    %ecx, -356(%rbp)        ## 4-byte Spill\n    jmp    LBB3_21\nLBB3_21:\n    movl    -356(%rbp), %eax        ## 4-byte Reload\n    movq    -352(%rbp), %rcx        ## 8-byte Reload\n    leaq    -216(%rbp), %rdi\n    movq    %rcx, -224(%rbp)\n    movl    %eax, -228(%rbp)\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\nLBB3_22:\n    movq    -224(%rbp), %rdi\n    callq    ___cxa_begin_catch\n    movq    -184(%rbp), %rdi\n    movq    (%rdi), %rcx\n    movq    -24(%rcx), %rcx\n    addq    %rcx, %rdi\nLtmp20:\n    movq    %rax, -376(%rbp)        ## 8-byte Spill\n    callq    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv\nLtmp21:\n    jmp    LBB3_23\nLBB3_23:\n    callq    ___cxa_end_catch\nLBB3_24:\n    movq    -184(%rbp), %rax\n    addq    $384, %rsp              ## imm = 0x180\n    popq    %rbp\n    retq\nLBB3_25:\n    jmp    LBB3_26\nLBB3_26:\n    leaq    -216(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\n    jmp    LBB3_24\nLBB3_27:\nLtmp22:\n    movl    %edx, %ecx\n    movq    %rax, -224(%rbp)\n    movl    %ecx, -228(%rbp)\nLtmp23:\n    callq    ___cxa_end_catch\nLtmp24:\n    jmp    LBB3_28\nLBB3_28:\n    jmp    LBB3_29\nLBB3_29:\n    movq    -224(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB3_30:\nLtmp25:\n    movl    %edx, %ecx\n    movq    %rax, %rdi\n    movl    %ecx, -380(%rbp)        ## 4-byte Spill\n    callq    ___clang_call_terminate\nLfunc_end1:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table3:\nLexception1:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .asciz    \"\\201\\201\\200\\200\"      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    117                     ## Call site table length\nLset7 = Ltmp5-Lfunc_begin1              ## >> Call Site 1 <<\n    .long    Lset7\nLset8 = Ltmp6-Ltmp5                     ##   Call between Ltmp5 and Ltmp6\n    .long    Lset8\nLset9 = Ltmp7-Lfunc_begin1              ##     jumps to Ltmp7\n    .long    Lset9\n    .byte    5                       ##   On action: 3\nLset10 = Ltmp8-Lfunc_begin1             ## >> Call Site 2 <<\n    .long    Lset10\nLset11 = Ltmp9-Ltmp8                    ##   Call between Ltmp8 and Ltmp9\n    .long    Lset11\nLset12 = Ltmp19-Lfunc_begin1            ##     jumps to Ltmp19\n    .long    Lset12\n    .byte    5                       ##   On action: 3\nLset13 = Ltmp10-Lfunc_begin1            ## >> Call Site 3 <<\n    .long    Lset13\nLset14 = Ltmp13-Ltmp10                  ##   Call between Ltmp10 and Ltmp13\n    .long    Lset14\nLset15 = Ltmp14-Lfunc_begin1            ##     jumps to Ltmp14\n    .long    Lset15\n    .byte    3                       ##   On action: 2\nLset16 = Ltmp15-Lfunc_begin1            ## >> Call Site 4 <<\n    .long    Lset16\nLset17 = Ltmp18-Ltmp15                  ##   Call between Ltmp15 and Ltmp18\n    .long    Lset17\nLset18 = Ltmp19-Lfunc_begin1            ##     jumps to Ltmp19\n    .long    Lset18\n    .byte    5                       ##   On action: 3\nLset19 = Ltmp18-Lfunc_begin1            ## >> Call Site 5 <<\n    .long    Lset19\nLset20 = Ltmp20-Ltmp18                  ##   Call between Ltmp18 and Ltmp20\n    .long    Lset20\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset21 = Ltmp20-Lfunc_begin1            ## >> Call Site 6 <<\n    .long    Lset21\nLset22 = Ltmp21-Ltmp20                  ##   Call between Ltmp20 and Ltmp21\n    .long    Lset22\nLset23 = Ltmp22-Lfunc_begin1            ##     jumps to Ltmp22\n    .long    Lset23\n    .byte    0                       ##   On action: cleanup\nLset24 = Ltmp21-Lfunc_begin1            ## >> Call Site 7 <<\n    .long    Lset24\nLset25 = Ltmp23-Ltmp21                  ##   Call between Ltmp21 and Ltmp23\n    .long    Lset25\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset26 = Ltmp23-Lfunc_begin1            ## >> Call Site 8 <<\n    .long    Lset26\nLset27 = Ltmp24-Ltmp23                  ##   Call between Ltmp23 and Ltmp24\n    .long    Lset27\nLset28 = Ltmp25-Lfunc_begin1            ##     jumps to Ltmp25\n    .long    Lset28\n    .byte    5                       ##   On action: 3\nLset29 = Ltmp24-Lfunc_begin1            ## >> Call Site 9 <<\n    .long    Lset29\nLset30 = Lfunc_end1-Ltmp24              ##   Call between Ltmp24 and Lfunc_end1\n    .long    Lset30\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .byte    0                       ## >> Action Record 1 <<\n                                        ##   Cleanup\n    .byte    0                       ##   No further actions\n    .byte    1                       ## >> Action Record 2 <<\n                                        ##   Catch TypeInfo 1\n    .byte    125                     ##   Continue to action 1\n    .byte    1                       ## >> Action Record 3 <<\n                                        ##   Catch TypeInfo 1\n    .byte    0                       ##   No further actions\n                                        ## >> Catch TypeInfos <<\n    .long    0                       ## TypeInfo 1\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__111char_traitsIcE6lengthEPKc ## -- Begin function _ZNSt3__111char_traitsIcE6lengthEPKc\n    .weak_definition    __ZNSt3__111char_traitsIcE6lengthEPKc\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE6lengthEPKc:  ## @_ZNSt3__111char_traitsIcE6lengthEPKc\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi12:\n    .cfi_def_cfa_offset 16\nLcfi13:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi14:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    movq    %rdi, -8(%rbp)\n    movq    -8(%rbp), %rdi\n    callq    _strlen\n    addq    $16, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .private_extern    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ## -- Begin function _ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .globl    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .weak_definition    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .p2align    4, 0x90\n__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLfunc_begin2:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception2\n## BB#0:\n    pushq    %rbp\nLcfi15:\n    .cfi_def_cfa_offset 16\nLcfi16:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi17:\n    .cfi_def_cfa_register %rbp\n    subq    $480, %rsp              ## imm = 0x1E0\n    movb    %r9b, %al\n    movq    %rdi, -320(%rbp)\n    movq    %rsi, -328(%rbp)\n    movq    %rdx, -336(%rbp)\n    movq    %rcx, -344(%rbp)\n    movq    %r8, -352(%rbp)\n    movb    %al, -353(%rbp)\n    cmpq    $0, -320(%rbp)\n    jne    LBB5_2\n## BB#1:\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_2:\n    movq    -344(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -368(%rbp)\n    movq    -352(%rbp), %rax\n    movq    %rax, -304(%rbp)\n    movq    -304(%rbp), %rax\n    movq    24(%rax), %rax\n    movq    %rax, -376(%rbp)\n    movq    -376(%rbp), %rax\n    cmpq    -368(%rbp), %rax\n    jle    LBB5_4\n## BB#3:\n    movq    -368(%rbp), %rax\n    movq    -376(%rbp), %rcx\n    subq    %rax, %rcx\n    movq    %rcx, -376(%rbp)\n    jmp    LBB5_5\nLBB5_4:\n    movq    $0, -376(%rbp)\nLBB5_5:\n    movq    -336(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -384(%rbp)\n    cmpq    $0, -384(%rbp)\n    jle    LBB5_9\n## BB#6:\n    movq    -320(%rbp), %rax\n    movq    -328(%rbp), %rcx\n    movq    -384(%rbp), %rdx\n    movq    %rax, -232(%rbp)\n    movq    %rcx, -240(%rbp)\n    movq    %rdx, -248(%rbp)\n    movq    -232(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -240(%rbp), %rsi\n    movq    -248(%rbp), %rdx\n    movq    %rax, %rdi\n    callq    *%rcx\n    cmpq    -384(%rbp), %rax\n    je    LBB5_8\n## BB#7:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_8:\n    jmp    LBB5_9\nLBB5_9:\n    cmpq    $0, -376(%rbp)\n    jle    LBB5_21\n## BB#10:\n    xorl    %esi, %esi\n    movl    $24, %eax\n    movl    %eax, %edx\n    leaq    -408(%rbp), %rcx\n    movq    -376(%rbp), %rdi\n    movb    -353(%rbp), %r8b\n    movq    %rcx, -208(%rbp)\n    movq    %rdi, -216(%rbp)\n    movb    %r8b, -217(%rbp)\n    movq    -208(%rbp), %rcx\n    movq    -216(%rbp), %rdi\n    movb    -217(%rbp), %r8b\n    movq    %rcx, -184(%rbp)\n    movq    %rdi, -192(%rbp)\n    movb    %r8b, -193(%rbp)\n    movq    -184(%rbp), %rcx\n    movq    %rcx, -176(%rbp)\n    movq    -176(%rbp), %rdi\n    movq    %rdi, -168(%rbp)\n    movq    -168(%rbp), %rdi\n    movq    %rdi, %r9\n    movq    %r9, -160(%rbp)\n    movq    -160(%rbp), %r9\n    movq    %rdi, -432(%rbp)        ## 8-byte Spill\n    movq    %r9, %rdi\n    movq    %rcx, -440(%rbp)        ## 8-byte Spill\n    callq    _memset\n    movq    -432(%rbp), %rcx        ## 8-byte Reload\n    movq    %rcx, -152(%rbp)\n    movq    -152(%rbp), %rcx\n    movq    %rcx, -144(%rbp)\n    movq    -192(%rbp), %rsi\n    movq    -440(%rbp), %rdi        ## 8-byte Reload\n    movsbl    -193(%rbp), %edx\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc\n    leaq    -408(%rbp), %rcx\n    movq    -320(%rbp), %rsi\n    movq    %rcx, -136(%rbp)\n    movq    -136(%rbp), %rcx\n    movq    %rcx, -128(%rbp)\n    movq    -128(%rbp), %rcx\n    movq    %rcx, -120(%rbp)\n    movq    -120(%rbp), %rdi\n    movq    %rdi, -112(%rbp)\n    movq    -112(%rbp), %rdi\n    movq    %rdi, -104(%rbp)\n    movq    -104(%rbp), %rdi\n    movzbl    (%rdi), %eax\n    movl    %eax, %edi\n    andq    $1, %rdi\n    cmpq    $0, %rdi\n    movq    %rsi, -448(%rbp)        ## 8-byte Spill\n    movq    %rcx, -456(%rbp)        ## 8-byte Spill\n    je    LBB5_12\n## BB#11:\n    movq    -456(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -56(%rbp)\n    movq    -56(%rbp), %rcx\n    movq    %rcx, -48(%rbp)\n    movq    -48(%rbp), %rcx\n    movq    %rcx, -40(%rbp)\n    movq    -40(%rbp), %rcx\n    movq    16(%rcx), %rcx\n    movq    %rcx, -464(%rbp)        ## 8-byte Spill\n    jmp    LBB5_13\nLBB5_12:\n    movq    -456(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -96(%rbp)\n    movq    -96(%rbp), %rcx\n    movq    %rcx, -88(%rbp)\n    movq    -88(%rbp), %rcx\n    movq    %rcx, -80(%rbp)\n    movq    -80(%rbp), %rcx\n    addq    $1, %rcx\n    movq    %rcx, -72(%rbp)\n    movq    -72(%rbp), %rcx\n    movq    %rcx, -64(%rbp)\n    movq    -64(%rbp), %rcx\n    movq    %rcx, -464(%rbp)        ## 8-byte Spill\nLBB5_13:\n    movq    -464(%rbp), %rax        ## 8-byte Reload\n    movq    %rax, -32(%rbp)\n    movq    -32(%rbp), %rax\n    movq    -376(%rbp), %rcx\n    movq    -448(%rbp), %rdx        ## 8-byte Reload\n    movq    %rdx, -8(%rbp)\n    movq    %rax, -16(%rbp)\n    movq    %rcx, -24(%rbp)\n    movq    -8(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -16(%rbp), %rsi\n    movq    -24(%rbp), %rdx\nLtmp26:\n    movq    %rax, %rdi\n    callq    *%rcx\nLtmp27:\n    movq    %rax, -472(%rbp)        ## 8-byte Spill\n    jmp    LBB5_14\nLBB5_14:\n    jmp    LBB5_15\nLBB5_15:\n    movq    -472(%rbp), %rax        ## 8-byte Reload\n    cmpq    -376(%rbp), %rax\n    je    LBB5_18\n## BB#16:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    movl    $1, -424(%rbp)\n    jmp    LBB5_19\nLBB5_17:\nLtmp28:\n    leaq    -408(%rbp), %rdi\n    movl    %edx, %ecx\n    movq    %rax, -416(%rbp)\n    movl    %ecx, -420(%rbp)\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev\n    jmp    LBB5_27\nLBB5_18:\n    movl    $0, -424(%rbp)\nLBB5_19:\n    leaq    -408(%rbp), %rdi\n    callq    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev\n    movl    -424(%rbp), %eax\n    testl    %eax, %eax\n    movl    %eax, -476(%rbp)        ## 4-byte Spill\n    je    LBB5_20\n    jmp    LBB5_29\nLBB5_29:\n    movl    -476(%rbp), %eax        ## 4-byte Reload\n    subl    $1, %eax\n    movl    %eax, -480(%rbp)        ## 4-byte Spill\n    je    LBB5_26\n    jmp    LBB5_28\nLBB5_20:\n    jmp    LBB5_21\nLBB5_21:\n    movq    -344(%rbp), %rax\n    movq    -336(%rbp), %rcx\n    subq    %rcx, %rax\n    movq    %rax, -384(%rbp)\n    cmpq    $0, -384(%rbp)\n    jle    LBB5_25\n## BB#22:\n    movq    -320(%rbp), %rax\n    movq    -336(%rbp), %rcx\n    movq    -384(%rbp), %rdx\n    movq    %rax, -256(%rbp)\n    movq    %rcx, -264(%rbp)\n    movq    %rdx, -272(%rbp)\n    movq    -256(%rbp), %rax\n    movq    (%rax), %rcx\n    movq    96(%rcx), %rcx\n    movq    -264(%rbp), %rsi\n    movq    -272(%rbp), %rdx\n    movq    %rax, %rdi\n    callq    *%rcx\n    cmpq    -384(%rbp), %rax\n    je    LBB5_24\n## BB#23:\n    movq    $0, -320(%rbp)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\n    jmp    LBB5_26\nLBB5_24:\n    jmp    LBB5_25\nLBB5_25:\n    movq    -352(%rbp), %rax\n    movq    %rax, -280(%rbp)\n    movq    $0, -288(%rbp)\n    movq    -280(%rbp), %rax\n    movq    24(%rax), %rcx\n    movq    %rcx, -296(%rbp)\n    movq    -288(%rbp), %rcx\n    movq    %rcx, 24(%rax)\n    movq    -320(%rbp), %rax\n    movq    %rax, -312(%rbp)\nLBB5_26:\n    movq    -312(%rbp), %rax\n    addq    $480, %rsp              ## imm = 0x1E0\n    popq    %rbp\n    retq\nLBB5_27:\n    movq    -416(%rbp), %rdi\n    callq    __Unwind_Resume\nLBB5_28:\nLfunc_end2:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table5:\nLexception2:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset31 = Lfunc_begin2-Lfunc_begin2      ## >> Call Site 1 <<\n    .long    Lset31\nLset32 = Ltmp26-Lfunc_begin2            ##   Call between Lfunc_begin2 and Ltmp26\n    .long    Lset32\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset33 = Ltmp26-Lfunc_begin2            ## >> Call Site 2 <<\n    .long    Lset33\nLset34 = Ltmp27-Ltmp26                  ##   Call between Ltmp26 and Ltmp27\n    .long    Lset34\nLset35 = Ltmp28-Lfunc_begin2            ##     jumps to Ltmp28\n    .long    Lset35\n    .byte    0                       ##   On action: cleanup\nLset36 = Ltmp27-Lfunc_begin2            ## >> Call Site 3 <<\n    .long    Lset36\nLset37 = Lfunc_end2-Ltmp27              ##   Call between Ltmp27 and Lfunc_end2\n    .long    Lset37\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    ___clang_call_terminate ## -- Begin function __clang_call_terminate\n    .globl    ___clang_call_terminate\n    .weak_definition    ___clang_call_terminate\n    .p2align    4, 0x90\n___clang_call_terminate:                ## @__clang_call_terminate\n## BB#0:\n    pushq    %rax\n    callq    ___cxa_begin_catch\n    movq    %rax, (%rsp)            ## 8-byte Spill\n    callq    __ZSt9terminatev\n                                        ## -- End function\n    .globl    __ZNSt3__111char_traitsIcE11eq_int_typeEii ## -- Begin function _ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .weak_definition    __ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE11eq_int_typeEii: ## @_ZNSt3__111char_traitsIcE11eq_int_typeEii\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi18:\n    .cfi_def_cfa_offset 16\nLcfi19:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi20:\n    .cfi_def_cfa_register %rbp\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %esi\n    cmpl    -8(%rbp), %esi\n    sete    %al\n    andb    $1, %al\n    movzbl    %al, %eax\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .globl    __ZNSt3__111char_traitsIcE3eofEv ## -- Begin function _ZNSt3__111char_traitsIcE3eofEv\n    .weak_definition    __ZNSt3__111char_traitsIcE3eofEv\n    .p2align    4, 0x90\n__ZNSt3__111char_traitsIcE3eofEv:       ## @_ZNSt3__111char_traitsIcE3eofEv\n    .cfi_startproc\n## BB#0:\n    pushq    %rbp\nLcfi21:\n    .cfi_def_cfa_offset 16\nLcfi22:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi23:\n    .cfi_def_cfa_register %rbp\n    movl    $4294967295, %eax       ## imm = 0xFFFFFFFF\n    popq    %rbp\n    retq\n    .cfi_endproc\n                                        ## -- End function\n    .section    __TEXT,__const\n    .p2align    2               ## @_ZZ4mainE5array\nl__ZZ4mainE5array:\n    .long    2700                    ## 0xa8c\n    .long    2314                    ## 0x90a\n    .long    8429                    ## 0x20ed\n    .long    7726                    ## 0x1e2e\n    .long    4817                    ## 0x12d1\n    .long    8716                    ## 0x220c\n    .long    3598                    ## 0xe0e\n    .long    6255                    ## 0x186f\n    .long    5056                    ## 0x13c0\n    .long    8653                    ## 0x21cd\n    .long    8571                    ## 0x217b\n    .long    5028                    ## 0x13a4\n    .long    1259                    ## 0x4eb\n    .long    3315                    ## 0xcf3\n    .long    2896                    ## 0xb50\n    .long    1411                    ## 0x583\n    .long    3847                    ## 0xf07\n    .long    879                     ## 0x36f\n    .long    7353                    ## 0x1cb9\n    .long    8056                    ## 0x1f78\n    .long    8765                    ## 0x223d\n    .long    2344                    ## 0x928\n    .long    6349                    ## 0x18cd\n    .long    4156                    ## 0x103c\n    .long    8350                    ## 0x209e\n    .long    4164                    ## 0x1044\n    .long    4783                    ## 0x12af\n    .long    6800                    ## 0x1a90\n    .long    8887                    ## 0x22b7\n    .long    267                     ## 0x10b\n    .long    4478                    ## 0x117e\n    .long    6327                    ## 0x18b7\n    .long    58                      ## 0x3a\n    .long    7961                    ## 0x1f19\n    .long    756                     ## 0x2f4\n    .long    5654                    ## 0x1616\n    .long    9546                    ## 0x254a\n    .long    5132                    ## 0x140c\n    .long    247                     ## 0xf7\n    .long    5514                    ## 0x158a\n    .long    7098                    ## 0x1bba\n    .long    1156                    ## 0x484\n    .long    795                     ## 0x31b\n    .long    2502                    ## 0x9c6\n    .long    367                     ## 0x16f\n    .long    5330                    ## 0x14d2\n    .long    2261                    ## 0x8d5\n    .long    8692                    ## 0x21f4\n    .long    2460                    ## 0x99c\n    .long    4823                    ## 0x12d7\n    .long    8968                    ## 0x2308\n    .long    4976                    ## 0x1370\n    .long    1929                    ## 0x789\n    .long    1051                    ## 0x41b\n    .long    9249                    ## 0x2421\n    .long    9713                    ## 0x25f1\n    .long    2803                    ## 0xaf3\n    .long    1743                    ## 0x6cf\n    .long    3681                    ## 0xe61\n    .long    93                      ## 0x5d\n    .long    4967                    ## 0x1367\n    .long    2245                    ## 0x8c5\n    .long    198                     ## 0xc6\n    .long    896                     ## 0x380\n    .long    6372                    ## 0x18e4\n    .long    4413                    ## 0x113d\n    .long    2615                    ## 0xa37\n    .long    6130                    ## 0x17f2\n    .long    5766                    ## 0x1686\n    .long    5306                    ## 0x14ba\n    .long    1236                    ## 0x4d4\n    .long    888                     ## 0x378\n    .long    8050                    ## 0x1f72\n    .long    7080                    ## 0x1ba8\n    .long    3460                    ## 0xd84\n    .long    3473                    ## 0xd91\n    .long    1720                    ## 0x6b8\n    .long    3913                    ## 0xf49\n    .long    3449                    ## 0xd79\n    .long    8420                    ## 0x20e4\n    .long    1814                    ## 0x716\n    .long    1261                    ## 0x4ed\n    .long    1368                    ## 0x558\n    .long    167                     ## 0xa7\n    .long    7938                    ## 0x1f02\n    .long    4483                    ## 0x1183\n    .long    4843                    ## 0x12eb\n    .long    4682                    ## 0x124a\n    .long    3301                    ## 0xce5\n    .long    4038                    ## 0xfc6\n    .long    709                     ## 0x2c5\n    .long    8655                    ## 0x21cf\n    .long    598                     ## 0x256\n    .long    3857                    ## 0xf11\n    .long    6285                    ## 0x188d\n    .long    2961                    ## 0xb91\n    .long    6817                    ## 0x1aa1\n    .long    1031                    ## 0x407\n    .long    4007                    ## 0xfa7\n    .long    1392                    ## 0x570\n    .long    5717                    ## 0x1655\n    .long    5837                    ## 0x16cd\n    .long    5695                    ## 0x163f\n    .long    9511                    ## 0x2527\n    .long    8891                    ## 0x22bb\n    .long    7883                    ## 0x1ecb\n    .long    7035                    ## 0x1b7b\n    .long    2349                    ## 0x92d\n    .long    5752                    ## 0x1678\n    .long    3139                    ## 0xc43\n    .long    2442                    ## 0x98a\n    .long    3966                    ## 0xf7e\n    .long    2007                    ## 0x7d7\n    .long    9205                    ## 0x23f5\n    .long    8434                    ## 0x20f2\n    .long    5065                    ## 0x13c9\n    .long    3795                    ## 0xed3\n    .long    6890                    ## 0x1aea\n    .long    2715                    ## 0xa9b\n    .long    1                       ## 0x1\n    .long    5106                    ## 0x13f2\n    .long    5083                    ## 0x13db\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .space    1\n\nL_.str.1:                               ## @.str.1\n    .asciz    \"hello, world\"\n\n.subsections_via_symbols\n```\n\n由于汇编太长，我们可以只关注`cmpl $1000, (%rax)`这一行比较，在第一份中出现了两次与1000进行比较，而第二份中进行了一次，编译器完美直译了代码。然而在生产环境中我们是不和这样发布代码的，一般都会进行O3优化。所以当我们开启优化后，汇编代码如下：\n\n```assembly\n    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 13\n    .globl    _main                   ## -- Begin function main\n    .p2align    4, 0x90\n_main:                                  ## @main\nLfunc_begin0:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception0\n## BB#0:\n    pushq    %rbp\nLcfi0:\n    .cfi_def_cfa_offset 16\nLcfi1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi2:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $504, %rsp              ## imm = 0x1F8\nLcfi3:\n    .cfi_offset %rbx, -56\nLcfi4:\n    .cfi_offset %r12, -48\nLcfi5:\n    .cfi_offset %r13, -40\nLcfi6:\n    .cfi_offset %r14, -32\nLcfi7:\n    .cfi_offset %r15, -24\n    leaq    l__ZZ4mainE5array(%rip), %rsi\n    leaq    -536(%rbp), %rdi\n    movl    $488, %edx              ## imm = 0x1E8\n    callq    _memcpy\n    movl    $2700, %eax             ## imm = 0xA8C\n    movl    $4, %ebx\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %r14\n    leaq    L_.str(%rip), %r15\n    cmpl    $1001, %eax             ## imm = 0x3E9\n    jl    LBB0_3\n    jmp    LBB0_2\n    .p2align    4, 0x90\nLBB0_4:                                 ##   in Loop: Header=BB0_3 Depth=1\n    movl    -536(%rbp,%rbx), %eax\n    addq    $4, %rbx\n    cmpl    $1001, %eax             ## imm = 0x3E9\n    jl    LBB0_3\nLBB0_2:\n    xorl    %edx, %edx\n    movq    %r14, %rdi\n    movq    %r15, %rsi\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\nLBB0_3:                                 ## =>This Inner Loop Header: Depth=1\n    cmpq    $488, %rbx              ## imm = 0x1E8\n    jne    LBB0_4\n## BB#5:\n    xorl    %r15d, %r15d\n    leaq    -48(%rbp), %r13\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %r12\n    .p2align    4, 0x90\nLBB0_6:                                 ## =>This Inner Loop Header: Depth=1\n    cmpl    $5330, -536(%rbp,%r15)  ## imm = 0x14D2\n    jne    LBB0_10\n## BB#7:                                ##   in Loop: Header=BB0_6 Depth=1\n    movl    $12, %edx\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    leaq    L_.str.1(%rip), %rsi\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    movq    %rax, %rbx\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rsi\n    addq    %rbx, %rsi\n    movq    %r13, %rdi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp0:\n    movq    %r13, %rdi\n    movq    %r12, %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp1:\n## BB#8:                                ##   in Loop: Header=BB0_6 Depth=1\n    movq    (%rax), %rcx\nLtmp2:\n    movl    $10, %esi\n    movq    %rax, %rdi\n    callq    *56(%rcx)\n    movl    %eax, %r14d\nLtmp3:\n## BB#9:                                ##   in Loop: Header=BB0_6 Depth=1\n    movq    %r13, %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movsbl    %r14b, %esi\n    movq    %rbx, %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc\n    movq    %rbx, %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv\nLBB0_10:                                ##   in Loop: Header=BB0_6 Depth=1\n    addq    $4, %r15\n    cmpq    $488, %r15              ## imm = 0x1E8\n    jne    LBB0_6\n## BB#11:\n    xorl    %eax, %eax\n    addq    $504, %rsp              ## imm = 0x1F8\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB0_12:\nLtmp4:\n    movq    %rax, %rbx\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLfunc_end0:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table0:\nLexception0:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset0 = Lfunc_begin0-Lfunc_begin0       ## >> Call Site 1 <<\n    .long    Lset0\nLset1 = Ltmp0-Lfunc_begin0              ##   Call between Lfunc_begin0 and Ltmp0\n    .long    Lset1\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset2 = Ltmp0-Lfunc_begin0              ## >> Call Site 2 <<\n    .long    Lset2\nLset3 = Ltmp3-Ltmp0                     ##   Call between Ltmp0 and Ltmp3\n    .long    Lset3\nLset4 = Ltmp4-Lfunc_begin0              ##     jumps to Ltmp4\n    .long    Lset4\n    .byte    0                       ##   On action: cleanup\nLset5 = Ltmp3-Lfunc_begin0              ## >> Call Site 3 <<\n    .long    Lset5\nLset6 = Lfunc_end0-Ltmp3                ##   Call between Ltmp3 and Lfunc_end0\n    .long    Lset6\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m ## -- Begin function _ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .weak_def_can_be_hidden    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .p2align    4, 0x90\n__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\nLfunc_begin1:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception1\n## BB#0:\n    pushq    %rbp\nLcfi8:\n    .cfi_def_cfa_offset 16\nLcfi9:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi10:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $40, %rsp\nLcfi11:\n    .cfi_offset %rbx, -56\nLcfi12:\n    .cfi_offset %r12, -48\nLcfi13:\n    .cfi_offset %r13, -40\nLcfi14:\n    .cfi_offset %r14, -32\nLcfi15:\n    .cfi_offset %r15, -24\n    movq    %rdx, %r14\n    movq    %rsi, %r15\n    movq    %rdi, %rbx\nLtmp5:\n    leaq    -80(%rbp), %rdi\n    movq    %rbx, %rsi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_\nLtmp6:\n## BB#1:\n    cmpb    $0, -80(%rbp)\n    je    LBB1_10\n## BB#2:\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rax\n    leaq    (%rbx,%rax), %r12\n    movq    40(%rbx,%rax), %rdi\n    movl    8(%rbx,%rax), %r13d\n    movl    144(%rbx,%rax), %eax\n    cmpl    $-1, %eax\n    jne    LBB1_7\n## BB#3:\nLtmp8:\n    movq    %rdi, -64(%rbp)         ## 8-byte Spill\n    leaq    -56(%rbp), %rdi\n    movq    %r12, %rsi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp9:\n## BB#4:\nLtmp10:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    leaq    -56(%rbp), %rdi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp11:\n## BB#5:\n    movq    (%rax), %rcx\nLtmp12:\n    movl    $32, %esi\n    movq    %rax, %rdi\n    callq    *56(%rcx)\n    movb    %al, -41(%rbp)          ## 1-byte Spill\nLtmp13:\n## BB#6:\n    leaq    -56(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movsbl    -41(%rbp), %eax         ## 1-byte Folded Reload\n    movl    %eax, 144(%r12)\n    movq    -64(%rbp), %rdi         ## 8-byte Reload\nLBB1_7:\n    addq    %r15, %r14\n    andl    $176, %r13d\n    cmpl    $32, %r13d\n    movq    %r15, %rdx\n    cmoveq    %r14, %rdx\nLtmp15:\n    movsbl    %al, %r9d\n    movq    %r15, %rsi\n    movq    %r14, %rcx\n    movq    %r12, %r8\n    callq    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLtmp16:\n## BB#8:\n    testq    %rax, %rax\n    jne    LBB1_10\n## BB#9:\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rax\n    leaq    (%rbx,%rax), %rdi\n    movl    32(%rbx,%rax), %esi\n    orl    $5, %esi\nLtmp18:\n    callq    __ZNSt3__18ios_base5clearEj\nLtmp19:\nLBB1_10:\n    leaq    -80(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\nLBB1_11:\n    movq    %rbx, %rax\n    addq    $40, %rsp\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB1_12:\nLtmp20:\n    jmp    LBB1_15\nLBB1_13:\nLtmp14:\n    movq    %rax, %r14\n    leaq    -56(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    jmp    LBB1_16\nLBB1_14:\nLtmp17:\nLBB1_15:\n    movq    %rax, %r14\nLBB1_16:\n    leaq    -80(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\n    jmp    LBB1_18\nLBB1_17:\nLtmp7:\n    movq    %rax, %r14\nLBB1_18:\n    movq    %r14, %rdi\n    callq    ___cxa_begin_catch\n    movq    (%rbx), %rax\n    movq    %rbx, %rdi\n    addq    -24(%rax), %rdi\nLtmp21:\n    callq    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv\nLtmp22:\n## BB#19:\n    callq    ___cxa_end_catch\n    jmp    LBB1_11\nLBB1_20:\nLtmp23:\n    movq    %rax, %rbx\nLtmp24:\n    callq    ___cxa_end_catch\nLtmp25:\n## BB#21:\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLBB1_22:\nLtmp26:\n    movq    %rax, %rdi\n    callq    ___clang_call_terminate\nLfunc_end1:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table1:\nLexception1:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .asciz    \"\\213\\201\"              ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .ascii    \"\\202\\001\"              ## Call site table length\nLset7 = Ltmp5-Lfunc_begin1              ## >> Call Site 1 <<\n    .long    Lset7\nLset8 = Ltmp6-Ltmp5                     ##   Call between Ltmp5 and Ltmp6\n    .long    Lset8\nLset9 = Ltmp7-Lfunc_begin1              ##     jumps to Ltmp7\n    .long    Lset9\n    .byte    1                       ##   On action: 1\nLset10 = Ltmp8-Lfunc_begin1             ## >> Call Site 2 <<\n    .long    Lset10\nLset11 = Ltmp9-Ltmp8                    ##   Call between Ltmp8 and Ltmp9\n    .long    Lset11\nLset12 = Ltmp17-Lfunc_begin1            ##     jumps to Ltmp17\n    .long    Lset12\n    .byte    1                       ##   On action: 1\nLset13 = Ltmp10-Lfunc_begin1            ## >> Call Site 3 <<\n    .long    Lset13\nLset14 = Ltmp13-Ltmp10                  ##   Call between Ltmp10 and Ltmp13\n    .long    Lset14\nLset15 = Ltmp14-Lfunc_begin1            ##     jumps to Ltmp14\n    .long    Lset15\n    .byte    1                       ##   On action: 1\nLset16 = Ltmp15-Lfunc_begin1            ## >> Call Site 4 <<\n    .long    Lset16\nLset17 = Ltmp16-Ltmp15                  ##   Call between Ltmp15 and Ltmp16\n    .long    Lset17\nLset18 = Ltmp17-Lfunc_begin1            ##     jumps to Ltmp17\n    .long    Lset18\n    .byte    1                       ##   On action: 1\nLset19 = Ltmp18-Lfunc_begin1            ## >> Call Site 5 <<\n    .long    Lset19\nLset20 = Ltmp19-Ltmp18                  ##   Call between Ltmp18 and Ltmp19\n    .long    Lset20\nLset21 = Ltmp20-Lfunc_begin1            ##     jumps to Ltmp20\n    .long    Lset21\n    .byte    1                       ##   On action: 1\nLset22 = Ltmp19-Lfunc_begin1            ## >> Call Site 6 <<\n    .long    Lset22\nLset23 = Ltmp21-Ltmp19                  ##   Call between Ltmp19 and Ltmp21\n    .long    Lset23\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset24 = Ltmp21-Lfunc_begin1            ## >> Call Site 7 <<\n    .long    Lset24\nLset25 = Ltmp22-Ltmp21                  ##   Call between Ltmp21 and Ltmp22\n    .long    Lset25\nLset26 = Ltmp23-Lfunc_begin1            ##     jumps to Ltmp23\n    .long    Lset26\n    .byte    0                       ##   On action: cleanup\nLset27 = Ltmp22-Lfunc_begin1            ## >> Call Site 8 <<\n    .long    Lset27\nLset28 = Ltmp24-Ltmp22                  ##   Call between Ltmp22 and Ltmp24\n    .long    Lset28\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset29 = Ltmp24-Lfunc_begin1            ## >> Call Site 9 <<\n    .long    Lset29\nLset30 = Ltmp25-Ltmp24                  ##   Call between Ltmp24 and Ltmp25\n    .long    Lset30\nLset31 = Ltmp26-Lfunc_begin1            ##     jumps to Ltmp26\n    .long    Lset31\n    .byte    1                       ##   On action: 1\nLset32 = Ltmp25-Lfunc_begin1            ## >> Call Site 10 <<\n    .long    Lset32\nLset33 = Lfunc_end1-Ltmp25              ##   Call between Ltmp25 and Lfunc_end1\n    .long    Lset33\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .byte    1                       ## >> Action Record 1 <<\n                                        ##   Catch TypeInfo 1\n    .byte    0                       ##   No further actions\n                                        ## >> Catch TypeInfos <<\n    .long    0                       ## TypeInfo 1\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ## -- Begin function _ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .globl    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .weak_def_can_be_hidden    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .p2align    4, 0x90\n__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLfunc_begin2:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception2\n## BB#0:\n    pushq    %rbp\nLcfi16:\n    .cfi_def_cfa_offset 16\nLcfi17:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi18:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $72, %rsp\nLcfi19:\n    .cfi_offset %rbx, -56\nLcfi20:\n    .cfi_offset %r12, -48\nLcfi21:\n    .cfi_offset %r13, -40\nLcfi22:\n    .cfi_offset %r14, -32\nLcfi23:\n    .cfi_offset %r15, -24\n    movq    %r8, %r14\n    movq    %rcx, %r12\n    movq    %rdi, %r13\n    testq    %r13, %r13\n    je    LBB2_17\n## BB#1:\n    movl    %r9d, -44(%rbp)         ## 4-byte Spill\n    movq    %r12, %rax\n    subq    %rsi, %rax\n    movq    24(%r14), %rcx\n    xorl    %r15d, %r15d\n    subq    %rax, %rcx\n    cmovgq    %rcx, %r15\n    movq    %rdx, -104(%rbp)        ## 8-byte Spill\n    movq    %rdx, %rbx\n    subq    %rsi, %rbx\n    testq    %rbx, %rbx\n    jle    LBB2_3\n## BB#2:\n    movq    (%r13), %rax\n    movq    %r13, %rdi\n    movq    %rbx, %rdx\n    callq    *96(%rax)\n    cmpq    %rbx, %rax\n    jne    LBB2_17\nLBB2_3:\n    testq    %r15, %r15\n    jle    LBB2_13\n## BB#4:\n    movq    %r12, -88(%rbp)         ## 8-byte Spill\n    movq    %r14, -96(%rbp)         ## 8-byte Spill\n    xorps    %xmm0, %xmm0\n    movaps    %xmm0, -80(%rbp)\n    movq    $0, -64(%rbp)\n    cmpq    $23, %r15\n    jae    LBB2_8\n## BB#5:\n    movl    %r15d, %eax\n    addb    %al, %al\n    movb    %al, -80(%rbp)\n    leaq    -79(%rbp), %r14\n    movq    %r14, %r12\n    jmp    LBB2_9\nLBB2_8:\n    leaq    16(%r15), %rbx\n    andq    $-16, %rbx\n    movq    %rbx, %rdi\n    callq    __Znwm\n    movq    %rax, %r12\n    movq    %r12, -64(%rbp)\n    orq    $1, %rbx\n    movq    %rbx, -80(%rbp)\n    movq    %r15, -72(%rbp)\n    leaq    -79(%rbp), %r14\nLBB2_9:\n    movl    -44(%rbp), %eax         ## 4-byte Reload\n    movzbl    %al, %esi\n    movq    %r12, %rdi\n    movq    %r15, %rdx\n    callq    _memset\n    movb    $0, (%r12,%r15)\n    testb    $1, -80(%rbp)\n    cmovneq    -64(%rbp), %r14\n    movq    (%r13), %rax\nLtmp27:\n    movq    %r13, %rdi\n    movq    %r14, %rsi\n    movq    %r15, %rdx\n    callq    *96(%rax)\n    movq    %rax, %rbx\nLtmp28:\n## BB#10:\n    testb    $1, -80(%rbp)\n    movq    -96(%rbp), %r14         ## 8-byte Reload\n    movq    -88(%rbp), %r12         ## 8-byte Reload\n    je    LBB2_12\n## BB#11:\n    movq    -64(%rbp), %rdi\n    callq    __ZdlPv\nLBB2_12:\n    cmpq    %r15, %rbx\n    jne    LBB2_17\nLBB2_13:\n    movq    -104(%rbp), %rsi        ## 8-byte Reload\n    subq    %rsi, %r12\n    testq    %r12, %r12\n    jle    LBB2_15\n## BB#14:\n    movq    (%r13), %rax\n    movq    %r13, %rdi\n    movq    %r12, %rdx\n    callq    *96(%rax)\n    cmpq    %r12, %rax\n    jne    LBB2_17\nLBB2_15:\n    movq    $0, 24(%r14)\n    jmp    LBB2_18\nLBB2_17:\n    xorl    %r13d, %r13d\nLBB2_18:\n    movq    %r13, %rax\n    addq    $72, %rsp\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB2_19:\nLtmp29:\n    movq    %rax, %rbx\n    testb    $1, -80(%rbp)\n    je    LBB2_21\n## BB#20:\n    movq    -64(%rbp), %rdi\n    callq    __ZdlPv\nLBB2_21:\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLfunc_end2:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table2:\nLexception2:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset34 = Lfunc_begin2-Lfunc_begin2      ## >> Call Site 1 <<\n    .long    Lset34\nLset35 = Ltmp27-Lfunc_begin2            ##   Call between Lfunc_begin2 and Ltmp27\n    .long    Lset35\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset36 = Ltmp27-Lfunc_begin2            ## >> Call Site 2 <<\n    .long    Lset36\nLset37 = Ltmp28-Ltmp27                  ##   Call between Ltmp27 and Ltmp28\n    .long    Lset37\nLset38 = Ltmp29-Lfunc_begin2            ##     jumps to Ltmp29\n    .long    Lset38\n    .byte    0                       ##   On action: cleanup\nLset39 = Ltmp28-Lfunc_begin2            ## >> Call Site 3 <<\n    .long    Lset39\nLset40 = Lfunc_end2-Ltmp28              ##   Call between Ltmp28 and Lfunc_end2\n    .long    Lset40\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    ___clang_call_terminate ## -- Begin function __clang_call_terminate\n    .globl    ___clang_call_terminate\n    .weak_def_can_be_hidden    ___clang_call_terminate\n    .p2align    4, 0x90\n___clang_call_terminate:                ## @__clang_call_terminate\n## BB#0:\n    pushq    %rax\n    callq    ___cxa_begin_catch\n    callq    __ZSt9terminatev\n                                        ## -- End function\n    .section    __TEXT,__const\n    .p2align    2               ## @_ZZ4mainE5array\nl__ZZ4mainE5array:\n    .long    2700                    ## 0xa8c\n    .long    2314                    ## 0x90a\n    .long    8429                    ## 0x20ed\n    .long    7726                    ## 0x1e2e\n    .long    4817                    ## 0x12d1\n    .long    8716                    ## 0x220c\n    .long    3598                    ## 0xe0e\n    .long    6255                    ## 0x186f\n    .long    5056                    ## 0x13c0\n    .long    8653                    ## 0x21cd\n    .long    8571                    ## 0x217b\n    .long    5028                    ## 0x13a4\n    .long    1259                    ## 0x4eb\n    .long    3315                    ## 0xcf3\n    .long    2896                    ## 0xb50\n    .long    1411                    ## 0x583\n    .long    3847                    ## 0xf07\n    .long    879                     ## 0x36f\n    .long    7353                    ## 0x1cb9\n    .long    8056                    ## 0x1f78\n    .long    8765                    ## 0x223d\n    .long    2344                    ## 0x928\n    .long    6349                    ## 0x18cd\n    .long    4156                    ## 0x103c\n    .long    8350                    ## 0x209e\n    .long    4164                    ## 0x1044\n    .long    4783                    ## 0x12af\n    .long    6800                    ## 0x1a90\n    .long    8887                    ## 0x22b7\n    .long    267                     ## 0x10b\n    .long    4478                    ## 0x117e\n    .long    6327                    ## 0x18b7\n    .long    58                      ## 0x3a\n    .long    7961                    ## 0x1f19\n    .long    756                     ## 0x2f4\n    .long    5654                    ## 0x1616\n    .long    9546                    ## 0x254a\n    .long    5132                    ## 0x140c\n    .long    247                     ## 0xf7\n    .long    5514                    ## 0x158a\n    .long    7098                    ## 0x1bba\n    .long    1156                    ## 0x484\n    .long    795                     ## 0x31b\n    .long    2502                    ## 0x9c6\n    .long    367                     ## 0x16f\n    .long    5330                    ## 0x14d2\n    .long    2261                    ## 0x8d5\n    .long    8692                    ## 0x21f4\n    .long    2460                    ## 0x99c\n    .long    4823                    ## 0x12d7\n    .long    8968                    ## 0x2308\n    .long    4976                    ## 0x1370\n    .long    1929                    ## 0x789\n    .long    1051                    ## 0x41b\n    .long    9249                    ## 0x2421\n    .long    9713                    ## 0x25f1\n    .long    2803                    ## 0xaf3\n    .long    1743                    ## 0x6cf\n    .long    3681                    ## 0xe61\n    .long    93                      ## 0x5d\n    .long    4967                    ## 0x1367\n    .long    2245                    ## 0x8c5\n    .long    198                     ## 0xc6\n    .long    896                     ## 0x380\n    .long    6372                    ## 0x18e4\n    .long    4413                    ## 0x113d\n    .long    2615                    ## 0xa37\n    .long    6130                    ## 0x17f2\n    .long    5766                    ## 0x1686\n    .long    5306                    ## 0x14ba\n    .long    1236                    ## 0x4d4\n    .long    888                     ## 0x378\n    .long    8050                    ## 0x1f72\n    .long    7080                    ## 0x1ba8\n    .long    3460                    ## 0xd84\n    .long    3473                    ## 0xd91\n    .long    1720                    ## 0x6b8\n    .long    3913                    ## 0xf49\n    .long    3449                    ## 0xd79\n    .long    8420                    ## 0x20e4\n    .long    1814                    ## 0x716\n    .long    1261                    ## 0x4ed\n    .long    1368                    ## 0x558\n    .long    167                     ## 0xa7\n    .long    7938                    ## 0x1f02\n    .long    4483                    ## 0x1183\n    .long    4843                    ## 0x12eb\n    .long    4682                    ## 0x124a\n    .long    3301                    ## 0xce5\n    .long    4038                    ## 0xfc6\n    .long    709                     ## 0x2c5\n    .long    8655                    ## 0x21cf\n    .long    598                     ## 0x256\n    .long    3857                    ## 0xf11\n    .long    6285                    ## 0x188d\n    .long    2961                    ## 0xb91\n    .long    6817                    ## 0x1aa1\n    .long    1031                    ## 0x407\n    .long    4007                    ## 0xfa7\n    .long    1392                    ## 0x570\n    .long    5717                    ## 0x1655\n    .long    5837                    ## 0x16cd\n    .long    5695                    ## 0x163f\n    .long    9511                    ## 0x2527\n    .long    8891                    ## 0x22bb\n    .long    7883                    ## 0x1ecb\n    .long    7035                    ## 0x1b7b\n    .long    2349                    ## 0x92d\n    .long    5752                    ## 0x1678\n    .long    3139                    ## 0xc43\n    .long    2442                    ## 0x98a\n    .long    3966                    ## 0xf7e\n    .long    2007                    ## 0x7d7\n    .long    9205                    ## 0x23f5\n    .long    8434                    ## 0x20f2\n    .long    5065                    ## 0x13c9\n    .long    3795                    ## 0xed3\n    .long    6890                    ## 0x1aea\n    .long    2715                    ## 0xa9b\n    .long    1                       ## 0x1\n    .long    5106                    ## 0x13f2\n    .long    5083                    ## 0x13db\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .space    1\n\nL_.str.1:                               ## @.str.1\n    .asciz    \"hello, world\"\n\n.subsections_via_symbols\n```\n\n```assembly\n    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 13\n    .globl    _main                   ## -- Begin function main\n    .p2align    4, 0x90\n_main:                                  ## @main\nLfunc_begin0:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception0\n## BB#0:\n    pushq    %rbp\nLcfi0:\n    .cfi_def_cfa_offset 16\nLcfi1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi2:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $504, %rsp              ## imm = 0x1F8\nLcfi3:\n    .cfi_offset %rbx, -56\nLcfi4:\n    .cfi_offset %r12, -48\nLcfi5:\n    .cfi_offset %r13, -40\nLcfi6:\n    .cfi_offset %r14, -32\nLcfi7:\n    .cfi_offset %r15, -24\n    leaq    l__ZZ4mainE5array(%rip), %rsi\n    leaq    -536(%rbp), %rdi\n    movl    $488, %edx              ## imm = 0x1E8\n    callq    _memcpy\n    movl    $2700, %eax             ## imm = 0xA8C\n    movl    $4, %r14d\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %r15\n    leaq    L_.str(%rip), %rbx\n    cmpl    $1001, %eax             ## imm = 0x3E9\n    jl    LBB0_6\n    jmp    LBB0_2\n    .p2align    4, 0x90\nLBB0_7:                                 ##   in Loop: Header=BB0_6 Depth=1\n    movl    -536(%rbp,%r14), %eax\n    addq    $4, %r14\n    cmpl    $1001, %eax             ## imm = 0x3E9\n    jl    LBB0_6\nLBB0_2:\n    xorl    %edx, %edx\n    movq    %r15, %rdi\n    movq    %rbx, %rsi\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    cmpl    $5330, -540(%rbp,%r14)  ## imm = 0x14D2\n    jne    LBB0_6\n## BB#3:\n    movl    $12, %edx\n    movq    %r15, %r12\n    movq    %r15, %rdi\n    leaq    L_.str.1(%rip), %rsi\n    callq    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    movq    %rax, %r15\n    movq    (%r15), %rax\n    movq    -24(%rax), %rsi\n    addq    %r15, %rsi\n    leaq    -48(%rbp), %r13\n    movq    %r13, %rdi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp0:\n    movq    %r13, %rdi\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp1:\n## BB#4:\n    movq    (%rax), %rcx\nLtmp2:\n    movl    $10, %esi\n    movq    %rax, %rdi\n    callq    *56(%rcx)\n    movl    %eax, %r13d\nLtmp3:\n## BB#5:\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movsbl    %r13b, %esi\n    movq    %r15, %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc\n    movq    %r15, %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv\n    movq    %r12, %r15\nLBB0_6:                                 ## =>This Inner Loop Header: Depth=1\n    cmpq    $488, %r14              ## imm = 0x1E8\n    jne    LBB0_7\n## BB#8:\n    xorl    %eax, %eax\n    addq    $504, %rsp              ## imm = 0x1F8\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB0_9:\nLtmp4:\n    movq    %rax, %rbx\n    leaq    -48(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLfunc_end0:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table0:\nLexception0:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset0 = Lfunc_begin0-Lfunc_begin0       ## >> Call Site 1 <<\n    .long    Lset0\nLset1 = Ltmp0-Lfunc_begin0              ##   Call between Lfunc_begin0 and Ltmp0\n    .long    Lset1\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset2 = Ltmp0-Lfunc_begin0              ## >> Call Site 2 <<\n    .long    Lset2\nLset3 = Ltmp3-Ltmp0                     ##   Call between Ltmp0 and Ltmp3\n    .long    Lset3\nLset4 = Ltmp4-Lfunc_begin0              ##     jumps to Ltmp4\n    .long    Lset4\n    .byte    0                       ##   On action: cleanup\nLset5 = Ltmp3-Lfunc_begin0              ## >> Call Site 3 <<\n    .long    Lset5\nLset6 = Lfunc_end0-Ltmp3                ##   Call between Ltmp3 and Lfunc_end0\n    .long    Lset6\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .globl    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m ## -- Begin function _ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .weak_def_can_be_hidden    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\n    .p2align    4, 0x90\n__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m\nLfunc_begin1:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception1\n## BB#0:\n    pushq    %rbp\nLcfi8:\n    .cfi_def_cfa_offset 16\nLcfi9:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi10:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $40, %rsp\nLcfi11:\n    .cfi_offset %rbx, -56\nLcfi12:\n    .cfi_offset %r12, -48\nLcfi13:\n    .cfi_offset %r13, -40\nLcfi14:\n    .cfi_offset %r14, -32\nLcfi15:\n    .cfi_offset %r15, -24\n    movq    %rdx, %r14\n    movq    %rsi, %r15\n    movq    %rdi, %rbx\nLtmp5:\n    leaq    -80(%rbp), %rdi\n    movq    %rbx, %rsi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_\nLtmp6:\n## BB#1:\n    cmpb    $0, -80(%rbp)\n    je    LBB1_10\n## BB#2:\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rax\n    leaq    (%rbx,%rax), %r12\n    movq    40(%rbx,%rax), %rdi\n    movl    8(%rbx,%rax), %r13d\n    movl    144(%rbx,%rax), %eax\n    cmpl    $-1, %eax\n    jne    LBB1_7\n## BB#3:\nLtmp8:\n    movq    %rdi, -64(%rbp)         ## 8-byte Spill\n    leaq    -56(%rbp), %rdi\n    movq    %r12, %rsi\n    callq    __ZNKSt3__18ios_base6getlocEv\nLtmp9:\n## BB#4:\nLtmp10:\n    movq    __ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi\n    leaq    -56(%rbp), %rdi\n    callq    __ZNKSt3__16locale9use_facetERNS0_2idE\nLtmp11:\n## BB#5:\n    movq    (%rax), %rcx\nLtmp12:\n    movl    $32, %esi\n    movq    %rax, %rdi\n    callq    *56(%rcx)\n    movb    %al, -41(%rbp)          ## 1-byte Spill\nLtmp13:\n## BB#6:\n    leaq    -56(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    movsbl    -41(%rbp), %eax         ## 1-byte Folded Reload\n    movl    %eax, 144(%r12)\n    movq    -64(%rbp), %rdi         ## 8-byte Reload\nLBB1_7:\n    addq    %r15, %r14\n    andl    $176, %r13d\n    cmpl    $32, %r13d\n    movq    %r15, %rdx\n    cmoveq    %r14, %rdx\nLtmp15:\n    movsbl    %al, %r9d\n    movq    %r15, %rsi\n    movq    %r14, %rcx\n    movq    %r12, %r8\n    callq    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLtmp16:\n## BB#8:\n    testq    %rax, %rax\n    jne    LBB1_10\n## BB#9:\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rax\n    leaq    (%rbx,%rax), %rdi\n    movl    32(%rbx,%rax), %esi\n    orl    $5, %esi\nLtmp18:\n    callq    __ZNSt3__18ios_base5clearEj\nLtmp19:\nLBB1_10:\n    leaq    -80(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\nLBB1_11:\n    movq    %rbx, %rax\n    addq    $40, %rsp\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB1_12:\nLtmp20:\n    jmp    LBB1_15\nLBB1_13:\nLtmp14:\n    movq    %rax, %r14\n    leaq    -56(%rbp), %rdi\n    callq    __ZNSt3__16localeD1Ev\n    jmp    LBB1_16\nLBB1_14:\nLtmp17:\nLBB1_15:\n    movq    %rax, %r14\nLBB1_16:\n    leaq    -80(%rbp), %rdi\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev\n    jmp    LBB1_18\nLBB1_17:\nLtmp7:\n    movq    %rax, %r14\nLBB1_18:\n    movq    %r14, %rdi\n    callq    ___cxa_begin_catch\n    movq    (%rbx), %rax\n    movq    %rbx, %rdi\n    addq    -24(%rax), %rdi\nLtmp21:\n    callq    __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv\nLtmp22:\n## BB#19:\n    callq    ___cxa_end_catch\n    jmp    LBB1_11\nLBB1_20:\nLtmp23:\n    movq    %rax, %rbx\nLtmp24:\n    callq    ___cxa_end_catch\nLtmp25:\n## BB#21:\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLBB1_22:\nLtmp26:\n    movq    %rax, %rdi\n    callq    ___clang_call_terminate\nLfunc_end1:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table1:\nLexception1:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .asciz    \"\\213\\201\"              ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .ascii    \"\\202\\001\"              ## Call site table length\nLset7 = Ltmp5-Lfunc_begin1              ## >> Call Site 1 <<\n    .long    Lset7\nLset8 = Ltmp6-Ltmp5                     ##   Call between Ltmp5 and Ltmp6\n    .long    Lset8\nLset9 = Ltmp7-Lfunc_begin1              ##     jumps to Ltmp7\n    .long    Lset9\n    .byte    1                       ##   On action: 1\nLset10 = Ltmp8-Lfunc_begin1             ## >> Call Site 2 <<\n    .long    Lset10\nLset11 = Ltmp9-Ltmp8                    ##   Call between Ltmp8 and Ltmp9\n    .long    Lset11\nLset12 = Ltmp17-Lfunc_begin1            ##     jumps to Ltmp17\n    .long    Lset12\n    .byte    1                       ##   On action: 1\nLset13 = Ltmp10-Lfunc_begin1            ## >> Call Site 3 <<\n    .long    Lset13\nLset14 = Ltmp13-Ltmp10                  ##   Call between Ltmp10 and Ltmp13\n    .long    Lset14\nLset15 = Ltmp14-Lfunc_begin1            ##     jumps to Ltmp14\n    .long    Lset15\n    .byte    1                       ##   On action: 1\nLset16 = Ltmp15-Lfunc_begin1            ## >> Call Site 4 <<\n    .long    Lset16\nLset17 = Ltmp16-Ltmp15                  ##   Call between Ltmp15 and Ltmp16\n    .long    Lset17\nLset18 = Ltmp17-Lfunc_begin1            ##     jumps to Ltmp17\n    .long    Lset18\n    .byte    1                       ##   On action: 1\nLset19 = Ltmp18-Lfunc_begin1            ## >> Call Site 5 <<\n    .long    Lset19\nLset20 = Ltmp19-Ltmp18                  ##   Call between Ltmp18 and Ltmp19\n    .long    Lset20\nLset21 = Ltmp20-Lfunc_begin1            ##     jumps to Ltmp20\n    .long    Lset21\n    .byte    1                       ##   On action: 1\nLset22 = Ltmp19-Lfunc_begin1            ## >> Call Site 6 <<\n    .long    Lset22\nLset23 = Ltmp21-Ltmp19                  ##   Call between Ltmp19 and Ltmp21\n    .long    Lset23\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset24 = Ltmp21-Lfunc_begin1            ## >> Call Site 7 <<\n    .long    Lset24\nLset25 = Ltmp22-Ltmp21                  ##   Call between Ltmp21 and Ltmp22\n    .long    Lset25\nLset26 = Ltmp23-Lfunc_begin1            ##     jumps to Ltmp23\n    .long    Lset26\n    .byte    0                       ##   On action: cleanup\nLset27 = Ltmp22-Lfunc_begin1            ## >> Call Site 8 <<\n    .long    Lset27\nLset28 = Ltmp24-Ltmp22                  ##   Call between Ltmp22 and Ltmp24\n    .long    Lset28\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset29 = Ltmp24-Lfunc_begin1            ## >> Call Site 9 <<\n    .long    Lset29\nLset30 = Ltmp25-Ltmp24                  ##   Call between Ltmp24 and Ltmp25\n    .long    Lset30\nLset31 = Ltmp26-Lfunc_begin1            ##     jumps to Ltmp26\n    .long    Lset31\n    .byte    1                       ##   On action: 1\nLset32 = Ltmp25-Lfunc_begin1            ## >> Call Site 10 <<\n    .long    Lset32\nLset33 = Lfunc_end1-Ltmp25              ##   Call between Ltmp25 and Lfunc_end1\n    .long    Lset33\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .byte    1                       ## >> Action Record 1 <<\n                                        ##   Catch TypeInfo 1\n    .byte    0                       ##   No further actions\n                                        ## >> Catch TypeInfos <<\n    .long    0                       ## TypeInfo 1\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ ## -- Begin function _ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .globl    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .weak_def_can_be_hidden    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\n    .p2align    4, 0x90\n__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_\nLfunc_begin2:\n    .cfi_startproc\n    .cfi_personality 155, ___gxx_personality_v0\n    .cfi_lsda 16, Lexception2\n## BB#0:\n    pushq    %rbp\nLcfi16:\n    .cfi_def_cfa_offset 16\nLcfi17:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLcfi18:\n    .cfi_def_cfa_register %rbp\n    pushq    %r15\n    pushq    %r14\n    pushq    %r13\n    pushq    %r12\n    pushq    %rbx\n    subq    $72, %rsp\nLcfi19:\n    .cfi_offset %rbx, -56\nLcfi20:\n    .cfi_offset %r12, -48\nLcfi21:\n    .cfi_offset %r13, -40\nLcfi22:\n    .cfi_offset %r14, -32\nLcfi23:\n    .cfi_offset %r15, -24\n    movq    %r8, %r14\n    movq    %rcx, %r12\n    movq    %rdi, %r13\n    testq    %r13, %r13\n    je    LBB2_17\n## BB#1:\n    movl    %r9d, -44(%rbp)         ## 4-byte Spill\n    movq    %r12, %rax\n    subq    %rsi, %rax\n    movq    24(%r14), %rcx\n    xorl    %r15d, %r15d\n    subq    %rax, %rcx\n    cmovgq    %rcx, %r15\n    movq    %rdx, -104(%rbp)        ## 8-byte Spill\n    movq    %rdx, %rbx\n    subq    %rsi, %rbx\n    testq    %rbx, %rbx\n    jle    LBB2_3\n## BB#2:\n    movq    (%r13), %rax\n    movq    %r13, %rdi\n    movq    %rbx, %rdx\n    callq    *96(%rax)\n    cmpq    %rbx, %rax\n    jne    LBB2_17\nLBB2_3:\n    testq    %r15, %r15\n    jle    LBB2_13\n## BB#4:\n    movq    %r12, -88(%rbp)         ## 8-byte Spill\n    movq    %r14, -96(%rbp)         ## 8-byte Spill\n    xorps    %xmm0, %xmm0\n    movaps    %xmm0, -80(%rbp)\n    movq    $0, -64(%rbp)\n    cmpq    $23, %r15\n    jae    LBB2_8\n## BB#5:\n    movl    %r15d, %eax\n    addb    %al, %al\n    movb    %al, -80(%rbp)\n    leaq    -79(%rbp), %r14\n    movq    %r14, %r12\n    jmp    LBB2_9\nLBB2_8:\n    leaq    16(%r15), %rbx\n    andq    $-16, %rbx\n    movq    %rbx, %rdi\n    callq    __Znwm\n    movq    %rax, %r12\n    movq    %r12, -64(%rbp)\n    orq    $1, %rbx\n    movq    %rbx, -80(%rbp)\n    movq    %r15, -72(%rbp)\n    leaq    -79(%rbp), %r14\nLBB2_9:\n    movl    -44(%rbp), %eax         ## 4-byte Reload\n    movzbl    %al, %esi\n    movq    %r12, %rdi\n    movq    %r15, %rdx\n    callq    _memset\n    movb    $0, (%r12,%r15)\n    testb    $1, -80(%rbp)\n    cmovneq    -64(%rbp), %r14\n    movq    (%r13), %rax\nLtmp27:\n    movq    %r13, %rdi\n    movq    %r14, %rsi\n    movq    %r15, %rdx\n    callq    *96(%rax)\n    movq    %rax, %rbx\nLtmp28:\n## BB#10:\n    testb    $1, -80(%rbp)\n    movq    -96(%rbp), %r14         ## 8-byte Reload\n    movq    -88(%rbp), %r12         ## 8-byte Reload\n    je    LBB2_12\n## BB#11:\n    movq    -64(%rbp), %rdi\n    callq    __ZdlPv\nLBB2_12:\n    cmpq    %r15, %rbx\n    jne    LBB2_17\nLBB2_13:\n    movq    -104(%rbp), %rsi        ## 8-byte Reload\n    subq    %rsi, %r12\n    testq    %r12, %r12\n    jle    LBB2_15\n## BB#14:\n    movq    (%r13), %rax\n    movq    %r13, %rdi\n    movq    %r12, %rdx\n    callq    *96(%rax)\n    cmpq    %r12, %rax\n    jne    LBB2_17\nLBB2_15:\n    movq    $0, 24(%r14)\n    jmp    LBB2_18\nLBB2_17:\n    xorl    %r13d, %r13d\nLBB2_18:\n    movq    %r13, %rax\n    addq    $72, %rsp\n    popq    %rbx\n    popq    %r12\n    popq    %r13\n    popq    %r14\n    popq    %r15\n    popq    %rbp\n    retq\nLBB2_19:\nLtmp29:\n    movq    %rax, %rbx\n    testb    $1, -80(%rbp)\n    je    LBB2_21\n## BB#20:\n    movq    -64(%rbp), %rdi\n    callq    __ZdlPv\nLBB2_21:\n    movq    %rbx, %rdi\n    callq    __Unwind_Resume\nLfunc_end2:\n    .cfi_endproc\n    .section    __TEXT,__gcc_except_tab\n    .p2align    2\nGCC_except_table2:\nLexception2:\n    .byte    255                     ## @LPStart Encoding = omit\n    .byte    155                     ## @TType Encoding = indirect pcrel sdata4\n    .byte    41                      ## @TType base offset\n    .byte    3                       ## Call site Encoding = udata4\n    .byte    39                      ## Call site table length\nLset34 = Lfunc_begin2-Lfunc_begin2      ## >> Call Site 1 <<\n    .long    Lset34\nLset35 = Ltmp27-Lfunc_begin2            ##   Call between Lfunc_begin2 and Ltmp27\n    .long    Lset35\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\nLset36 = Ltmp27-Lfunc_begin2            ## >> Call Site 2 <<\n    .long    Lset36\nLset37 = Ltmp28-Ltmp27                  ##   Call between Ltmp27 and Ltmp28\n    .long    Lset37\nLset38 = Ltmp29-Lfunc_begin2            ##     jumps to Ltmp29\n    .long    Lset38\n    .byte    0                       ##   On action: cleanup\nLset39 = Ltmp28-Lfunc_begin2            ## >> Call Site 3 <<\n    .long    Lset39\nLset40 = Lfunc_end2-Ltmp28              ##   Call between Ltmp28 and Lfunc_end2\n    .long    Lset40\n    .long    0                       ##     has no landing pad\n    .byte    0                       ##   On action: cleanup\n    .p2align    2\n                                        ## -- End function\n    .section    __TEXT,__text,regular,pure_instructions\n    .private_extern    ___clang_call_terminate ## -- Begin function __clang_call_terminate\n    .globl    ___clang_call_terminate\n    .weak_def_can_be_hidden    ___clang_call_terminate\n    .p2align    4, 0x90\n___clang_call_terminate:                ## @__clang_call_terminate\n## BB#0:\n    pushq    %rax\n    callq    ___cxa_begin_catch\n    callq    __ZSt9terminatev\n                                        ## -- End function\n    .section    __TEXT,__const\n    .p2align    2               ## @_ZZ4mainE5array\nl__ZZ4mainE5array:\n    .long    2700                    ## 0xa8c\n    .long    2314                    ## 0x90a\n    .long    8429                    ## 0x20ed\n    .long    7726                    ## 0x1e2e\n    .long    4817                    ## 0x12d1\n    .long    8716                    ## 0x220c\n    .long    3598                    ## 0xe0e\n    .long    6255                    ## 0x186f\n    .long    5056                    ## 0x13c0\n    .long    8653                    ## 0x21cd\n    .long    8571                    ## 0x217b\n    .long    5028                    ## 0x13a4\n    .long    1259                    ## 0x4eb\n    .long    3315                    ## 0xcf3\n    .long    2896                    ## 0xb50\n    .long    1411                    ## 0x583\n    .long    3847                    ## 0xf07\n    .long    879                     ## 0x36f\n    .long    7353                    ## 0x1cb9\n    .long    8056                    ## 0x1f78\n    .long    8765                    ## 0x223d\n    .long    2344                    ## 0x928\n    .long    6349                    ## 0x18cd\n    .long    4156                    ## 0x103c\n    .long    8350                    ## 0x209e\n    .long    4164                    ## 0x1044\n    .long    4783                    ## 0x12af\n    .long    6800                    ## 0x1a90\n    .long    8887                    ## 0x22b7\n    .long    267                     ## 0x10b\n    .long    4478                    ## 0x117e\n    .long    6327                    ## 0x18b7\n    .long    58                      ## 0x3a\n    .long    7961                    ## 0x1f19\n    .long    756                     ## 0x2f4\n    .long    5654                    ## 0x1616\n    .long    9546                    ## 0x254a\n    .long    5132                    ## 0x140c\n    .long    247                     ## 0xf7\n    .long    5514                    ## 0x158a\n    .long    7098                    ## 0x1bba\n    .long    1156                    ## 0x484\n    .long    795                     ## 0x31b\n    .long    2502                    ## 0x9c6\n    .long    367                     ## 0x16f\n    .long    5330                    ## 0x14d2\n    .long    2261                    ## 0x8d5\n    .long    8692                    ## 0x21f4\n    .long    2460                    ## 0x99c\n    .long    4823                    ## 0x12d7\n    .long    8968                    ## 0x2308\n    .long    4976                    ## 0x1370\n    .long    1929                    ## 0x789\n    .long    1051                    ## 0x41b\n    .long    9249                    ## 0x2421\n    .long    9713                    ## 0x25f1\n    .long    2803                    ## 0xaf3\n    .long    1743                    ## 0x6cf\n    .long    3681                    ## 0xe61\n    .long    93                      ## 0x5d\n    .long    4967                    ## 0x1367\n    .long    2245                    ## 0x8c5\n    .long    198                     ## 0xc6\n    .long    896                     ## 0x380\n    .long    6372                    ## 0x18e4\n    .long    4413                    ## 0x113d\n    .long    2615                    ## 0xa37\n    .long    6130                    ## 0x17f2\n    .long    5766                    ## 0x1686\n    .long    5306                    ## 0x14ba\n    .long    1236                    ## 0x4d4\n    .long    888                     ## 0x378\n    .long    8050                    ## 0x1f72\n    .long    7080                    ## 0x1ba8\n    .long    3460                    ## 0xd84\n    .long    3473                    ## 0xd91\n    .long    1720                    ## 0x6b8\n    .long    3913                    ## 0xf49\n    .long    3449                    ## 0xd79\n    .long    8420                    ## 0x20e4\n    .long    1814                    ## 0x716\n    .long    1261                    ## 0x4ed\n    .long    1368                    ## 0x558\n    .long    167                     ## 0xa7\n    .long    7938                    ## 0x1f02\n    .long    4483                    ## 0x1183\n    .long    4843                    ## 0x12eb\n    .long    4682                    ## 0x124a\n    .long    3301                    ## 0xce5\n    .long    4038                    ## 0xfc6\n    .long    709                     ## 0x2c5\n    .long    8655                    ## 0x21cf\n    .long    598                     ## 0x256\n    .long    3857                    ## 0xf11\n    .long    6285                    ## 0x188d\n    .long    2961                    ## 0xb91\n    .long    6817                    ## 0x1aa1\n    .long    1031                    ## 0x407\n    .long    4007                    ## 0xfa7\n    .long    1392                    ## 0x570\n    .long    5717                    ## 0x1655\n    .long    5837                    ## 0x16cd\n    .long    5695                    ## 0x163f\n    .long    9511                    ## 0x2527\n    .long    8891                    ## 0x22bb\n    .long    7883                    ## 0x1ecb\n    .long    7035                    ## 0x1b7b\n    .long    2349                    ## 0x92d\n    .long    5752                    ## 0x1678\n    .long    3139                    ## 0xc43\n    .long    2442                    ## 0x98a\n    .long    3966                    ## 0xf7e\n    .long    2007                    ## 0x7d7\n    .long    9205                    ## 0x23f5\n    .long    8434                    ## 0x20f2\n    .long    5065                    ## 0x13c9\n    .long    3795                    ## 0xed3\n    .long    6890                    ## 0x1aea\n    .long    2715                    ## 0xa9b\n    .long    1                       ## 0x1\n    .long    5106                    ## 0x13f2\n    .long    5083                    ## 0x13db\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .space    1\n\nL_.str.1:                               ## @.str.1\n    .asciz    \"hello, world\"\n\n.subsections_via_symbols\n```\n\n此时，我们依然可以通过搜索`cmpl $1001, %eax`，此时你会发现在每份汇编中都有两处与1001的比较，而且通过生成的汇编代码的行数判断，其实我们可以大胆的出生成的结果基本一致。\n\n如果这个例子还不是很明显，可以看下面的代码：\n\n```cpp\n#include <iostream>\n\nint main()\n{\n    size_t sum = 0;\n    for (size_t i = 1; i <= 100; ++i)\n    {\n        sum += i;\n    }\n\n    std::cout << sum << std::endl;\n    return 0;\n}\n```\n\nO3优化后的关键代码：\n\n```assembly\nLcfi4:\n    .cfi_offset %r14, -24\n    movq    __ZNSt3__14coutE@GOTPCREL(%rip), %rdi\n    movl    $5050, %esi             ## imm = 0x13BA\n    callq    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEm\n    movq    %rax, %rbx\n    movq    (%rbx), %rax\n    movq    -24(%rax), %rsi\n    addq    %rbx, %rsi\n    leaq    -24(%rbp), %r14\n    movq    %r14, %rdi\n    callq    __ZNKSt3__18ios_base6getlocEv\n```\n\n这个5050是从何而来？\n\n## 结论\n\n唯一的结论只能是**你写的代码只是一个建议，编译器怎么实现，如何实现，按不按照你写的代码编不是你说的**\n\n所以我认为没有必要牺牲代码的可读性而去做一些自以为是的优化，如果你用位运算实现的（+）运算比编译器直接将普通（+）运算编译的代码性能好的话，你应该去砍写编译器的人，而不是喷用正常写法的人菜。"
		},
		{
			"post_id": 7,
			"title": "浅谈 iOS Device ID 的修改",
			"date_published": 1531069115.528,
			"body": "![](http://ooph3gs8p.bkt.clouddn.com/2018-07-09-maxresdefault-1.jpg)\n最近有一篇[文章](https://juejin.im/post/5b0a252d51882538b63af5c3)介绍了如何实现 AppStore App 自动下载，笔者看后收获良多。不过文中只介绍了如何去模拟用户的操作来完成下载，并没有涉及抹机、IP 更换等内容。所以笔者打算在此分享一下自己对这些方面的经验。\n\n* * *\n\n## FBI WARNING\n\n1.  以下内容可能会引起很多人不适，请读者自酌。\n2.  18岁以下请在家长陪同下观看！\n3.  部分内容可能违反你所在地相关法律，请谨慎模仿\n\n## 为什么要修改 iOS Device ID ？\n\n修改设备唯一可识别标识可以做很多事前，比如防止根据 UUID 追踪，避免大数据「杀熟」等。但是在 iOS 设备上目前想做到修改的前提是越狱，所以为了多领几个美团红包而选择承担越狱的风险，是否值得还是要考虑清楚的。\n不过在业界有大量应用这种技术的产业，比如积分墙、ASO 的刷榜……不过这些产业就属于“灰黑产”了，涉及到了原力的黑暗面，所以笔者不建议涉世不深的读者继续阅读下去。\n\n> 当你凝视深渊，深渊也在凝视着你。\n\n## 现状\n\n在开始讲如何做之前，笔者决定先简单介绍一下业界现在已经能做什么：\n![一款常见的改机软件](http://ooph3gs8p.bkt.clouddn.com/2018-07-09-一款常见的改机软件.png)\n\n如图所示，这是一款在业内非常常见的改机软件。由于作者不可考（不过理应如此，毕竟为了自己的人生安全），源码遗失已经iOS版本的多次更新，现在已经不值钱了。但是麻雀虽小五脏俱全，它能够修改设备的五码、机型、配置 Apple ID 和一键越狱等。\n前人的成功告诉了我们这是可行的，剩下的只是模仿，因此笔者深入逆向并研究了这款软件，在当我看到了一大堆用汇编写的混淆之后……放弃了。\n所以下面的内容都是笔者编的，大家有兴趣看个开心就好，基本上可以点关闭按钮了(●°u°●)​ 」\n\n## 如何破解一款程序？\n\n笔者依稀记得[狗神](http://bbs.iosre.com/u/snakeninny)在他那本著名的[小黄书](https://baike.baidu.com/item/iOS%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%EF%BC%9A%E5%88%86%E6%9E%90%E4%B8%8E%E5%AE%9E%E6%88%98)中提到，逆向一款软件最重要的不是最终成品的代码，而是过程的分析与思路。所以经常可以看到一款软件的破解代码重要的也许只有两三行，但是过程有多艰辛也许只有破解者才知道。例如破解 Mac 版 QQ音乐下载需要 VIP 权限的限制的代码也许加上注释也不到一百行：\n\n```obj-c\n/* How to Hook with Logos\nHooks are written with syntax similar to that of an Objective-C @implementation.\nYou don't need to #include <substrate.h>, it will be done automatically, as will\nthe generation of a class list and an automatic constructor.\n\n%hook ClassName\n\n// Hooking a class method\n+ (id)sharedInstance {\n    return %orig;\n}\n\n// Hooking an instance method with an argument.\n- (void)messageName:(int)argument {\n    %log; // Write a message about this call, including its class, name and arguments, to the system log.\n\n    %orig; // Call through to the original function with its original arguments.\n    %orig(nil); // Call through to the original function with a custom argument.\n\n    // If you use %orig(), you MUST supply all arguments (except for self and _cmd, the automatically generated ones.)\n}\n\n// Hooking an instance method with no arguments.\n- (id)noArguments {\n    %log;\n    id awesome = %orig;\n    [awesome doSomethingElse];\n\n    return awesome;\n}\n\n// Always make sure you clean up after yourself; Not doing so could have grave consequences!\n%end\n*/\n\n%config(generator = internal)\n\n#import <Foundation/Foundation.h>\n#include <substrate.h>\n\n%hook DownLoadTask\n\n- (BOOL)checkHaveRightToDownload:(int)argument {\n    return YES;\n}\n\n%end\n\nunsigned int (*old_GetFlexBOOL)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8);\nunsigned int  new_GetFlexBOOL(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)\n{\n  return 1;\n}\n\n%ctor {\n    NSLog(@\"!!!!!!inject success!!!!!!!\");\n\n    void * Symbol = MSFindSymbol(MSGetImageByName(\"/Applications/QQMusic.app/Contents/MacOS/QQMusic\"), \"_GetFlexBOOL\");\n    MSHookFunction(Symbol, &new_GetFlexBOOL, (void *)&old_GetFlexBOOL);\n}\n```\n\n而真正重要的是找出思路和逆向分析的过程，操作系统本质上也是一个软件，修改 Device ID 其实和破解一款音乐 VIP 限制本质上是一样的，只是一个只需要把 checkHaveRightToDownload 的返回值改成 YES ，另一个则需要与操作系统斗智斗勇罢了。\n\n## 思路\n\n综上所述，在我们对系统下黑手之前应该先理清思路。顺便说一句以下内容皆是我瞎编的，如有雷同实属巧合：\n\n```mermaid\ngraph TD\nA[硬件出厂获得UUID] -->|内核读取硬件信息| B(XNU)\nB -->|将读取到信息写入某处| C(经过加密处理的缓存)\nC -->|提供一系列接口供其他应用读取| D{API}\nD -->|直接调用| E[daemon]\nD -->|直接调用| F[上层应用]\nD -->|再封装|G[私有API]\nE --> |从deamon读取|F[上层应用]\nG --> |调用私有API|F[上层应用]\n```\n\n* * *\n\n~~少(bian)女(bu)祈(xia)祷(qu)中(le)~~"
		},
		{
			"post_id": 6,
			"title": "使用 Haskell 将十进制数字转成罗马数字",
			"date_published": 1530459733.011,
			"body": "最近一边看「[Haskell 函数式编程入门](https://www.epubit.com/book/detail/20794)」一边自学 Haskell。函数式编程对笔者这种受OOP毒害颇深（虽然我完全不会 Java，但是经常会被别人来自 Java 背景的_(:_」∠)_）的菜鸟来说，还是很难适应的。想着目前主力语言是 C++，一种多范式编程语言，学习 Haskell 也算是自然而然吧。\n学一门新语言还是很痛苦的，但是如果能做出什么的话还是很高兴的！废话就不多说了。\n\n* * *\n\n## 已知\n\n罗马数字像是一种很有趣的五进制，说是五进制，但还不准确。在罗马数字中，i 为 1，v 为 5，x 为 10，l 为 50，c 为 100，但是 4、 9、40、90 分别用 iv、ix、xl、xc 来表示，将小一级的罗马数字放在左边表示减法。1∼10 罗马数字为:i、ii、iii、iv、v、vi、vii、viii、ix、x。\n\n## 求解\n\n在此笔者和「[Haskell函数式编程入门](https://www.epubit.com/book/detail/20794)」作者一样只考虑 5000 以内的罗马数字。首先将几个特殊的罗马数字和与之对应的十进制数放在一起：\n\n```Haskell\nromeNotation :: [String]\nromeNotation =\n    [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\nromeAmount :: [Int]\nromeAmount = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n\npair :: [(Int, String)]\npair = zip romeAmount romeNotation\n```\n\n为什么是倒序的，请看下面的代码：\n\n```Haskell\nsubtrahend :: Int -> (Int, String)\nsubtrahend n = head (dropWhile (\\(a, _) -> a > n) pair)\n```\n\n不难看出当给这个函数传入一个不大于 5000 的正整数时，它将从 pair 列表中取得第一个比这个正整数小的数字，通过 dropWhile 将 pair 中比给定正整数大的元组去掉，再取得列表第一个元素。有了这个元素，我们就能获取到这个正整数对应的罗马数字。那么剩下的就简单了，只需要先将传入的正整数减去这个元素对应的数字，然后再将差递归地转换成罗马数字即可。\n\n```Haskell\n> subtrahend 5\n(5,\"V\")\n> subtrahend 86\n(50,\"L\")\n```\n\n下面定义函数 convert 来将十进制数转换为罗马数字，首先定义递归的基本条件。如果转换的数字是 0，那么返回空列表，因为罗马数字中没有表示 0 的符号，只需要返回 (0,\"\") 即可。 0 在数字中其实是一个非常抽象的概念。在当时，也许罗马人也不知道用什么来表示 0，这 里用的空字符串。下面再定义递归函数，使用 subtrahend 得到了减数，得到了对应的罗马数字 rome 与对应的数字 m，再递归地调用 convert 函数转换余下的十进制数，即 convert (n-m)，最后返回未转换的部分和两个罗马数字字符串连接：\n\n```Haskell\nconvert :: Int -> String\nconvert 0 = \"\"\nconvert n = let (rome, m) = subtrahend n in m ++ convert (n - rome)\n\n> convert 12\n\"XII\"\n> convert 109\n\"CIX\"\n> convert 1925\n\"MCMXXV\"\n> convert 4567\n\"MMMMDLXVII\"\n```\n\n是不是很简单？😂几个小时前的笔者是跪了的╮(╯▽╰)╭，所以笔者决定贴心的用等式推导来演算一下 convert 17 的计算过程：\n\n```Haskell\n  convert 17\n= \"X\" ++ convert (17 - 10)\n= \"X\" ++ \"V\" ++ convert (7 - 5)\n= \"X\" ++ \"V\" ++ \"I\" convert (2 - 1)\n= \"X\" ++ \"V\" ++ \"I\" ++ \"I\" convert (1 - 1)\n= \"X\" ++ \"V\" ++ \"I\" ++ \"I\" ++ \"\"\n= \"XVII\"\n```\n\n聪明的各位应该已经看出来问题了，在计算的时候，要暂时存储中间的值。\"X\", \"V\", \"I\", \"I\" 这些中间的值在计算到达基本条件前没有任何的用处。显然，这样对于内存空间的使用效率是不高的。所以应该将 convert 改成尾递归的形式。不过笔者比较菜，聪明的你可以试试。\n\n## 扩展\n\n那么既然已经可以把十进制数字转成罗马数字了，理所当然也应该将一个 5000 以内的罗马数字转换为一个十进制数字。\n思路也很简单，首先从大到小匹配罗马数字是否以 [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"] 中的字符串开头，只需要找到第一个符合的字符串，就知道对应的十进制正整数，然后截断罗马数字，把剩下的罗马数字字符串递归执行同一函数，直到罗马数字全部处理完，此时所有十进制正整数相加即可。\n所以我们只需要稍微修改一下 subtrahend 和 convert 即可：\n\n```Haskell\nimport           Data.List\nimport           Data.Maybe\n\nsubtrahend' :: String -> (Int, String)\nsubtrahend' n = head (dropWhile (\\(_, a) -> not (a `isPrefixOf` n)) pair)\n\nconvert' :: String -> Int\nconvert' [] = 0\nconvert' n =\n    let (rome, m) = subtrahend' n\n    in  rome + convert' (fromMaybe \"\" (stripPrefix m n))\n\n> convert' \"XII\"\n12\n> convert' \"CIX\"\n109\n> convert' \"MCMXXV\"\n1925\n> convert' \"MMMMDLXVII\"\n4567\n```\n\n当然也可以改成尾递归，而且还应该有异常处理，但这里就不继续展开了。\n\n## 后记\n\n相信看到这里，大家也对 Haskell 这么语言有一定的了解了吧。在没学 Haskell 之前经常听说函数在 Haskell 中是一等公民，不是很理解，现在看何止是一等公民啊，是压根就一个公民_(:_」∠)_\n而且在 Haskell 中也没有 for loop 这种迭代利器，所以很多时间逼着你考虑递归，但是野语有之曰：\n\n> \"To iterate is human, to recur, divine.\" - L. Peter Deutsch\n\n递归这种神迹对于笔者这样的菜鸡凡人还是很难的，所以要学好 Haskell 还是任重而道远啊。"
		},
		{
			"post_id": 5,
			"title": "Haskell在macOS下的环境搭建\n",
			"date_published": 1529602054.311,
			"body": "Haskell作为一个冷门语言，并没有一个简单好用傻瓜式的IDE。所以笔者记录了自己搭建环境的过程，希望对大家有所帮助。\n\n* * *\n\n## 准备工作\n\n1.  一个好的网络环境，至少与GitHub保持通畅连接\n2.  [Homebrew](https://brew.sh/)\n\n## 开发环境的搭建\n\n### 编译器(GHC)、解释器(GHCI)等Haskell工具链\n\n在笔者踩过无数坑之后，无脑推荐[Haskell Stack](https://docs.haskellstack.org/en/stable/README/)，喜欢挑战的读者可以自行尝试使用GHC+GHCI+[Cabal](https://www.haskell.org/cabal/)开发环境\n`brew install haskell-stack`\n\n### 编辑器\n\n目前主流的编辑器有 vim, emacs, sublime, atom, visual studio code 等，笔者平日开发中只在修改配置文件或者替换某个字符串时用到它们故先按下不表。\n\n### IDE\n\n因为宇宙最强IDE——[Visual Studio](https://www.visualstudio.com/)在Mac上发力较晚并表现不佳，故笔者建议使用[IntelliJ IDEA](https://www.jetbrains.com/idea/)(虽说笔者非常讨厌Java这门语言，但是不得不承认Java写出来的工具还是有不少好用的)\n\n#### HaskForce\n\nIntelliJ IDEA 有两个第三方插件提供了对Haskell的支持，笔者建议使用评分较高的[HaskForce](http://haskforce.com/)，目前这款插件已经无人维护(存疑，但也侧面反映了Haskell社区的现状)\n\n*   安装\n\n    1.  在IntelliJ IDEA中按下 ⌘ + , 进入偏好设置界面\n    2.  > Plugins > Browse repositories > HaskForce\n\n*   使用\n    由于 HaskForce 插件自身的局限性，需要在终端中通过 Haskell Stack 创建项目。\n\n    1.  `stack new 项目名称 模版名称 路径(默认当前路径)`\n    2.  `cd 项目名称`\n    3.  `stack setup`\n    4.  `stack build`\n\n_注意如果在创建项目中提示参数不足的警告，可以在~/.stack/config.yaml中配置_\n\n```yaml\ntemplates:\n  params:\n    author-name: your-name\n    author-email: your-email\n    copyright: 'Copyright (c) 2018 0x11901'\n    github-username: '0x11901'\n    category: categories\n```\n\n_不建议在此写死模版名称，如果不是很确定要用什么模版，可以在新建项目时传simple_\n\n*   使用 IntelliJ IDEA 导入创建的 Haskell Stack 项目\n\n    1.  路径选择项目的根目录，注意一下是不是选择了 Stack 模块\n    2.  然后一直下一步\n    3.  配置下 configurations\n    4.  `> add > Haskell Stack Run > Executable: 项目名称`\n    5.  Executable一定要填写\n*   点击 run 就能运行你的Haskell程序了！\n\n### 相关工具\n\n如果仅仅只有这些虽然就能愉快的编码了，但是笔者认为是完全不够的。毕竟如果没有代码格式化工具和静态代码分析工具，笔者是不会写代码的。所以怎么能少了这些呢！！！\n刚好 HaskForce 整合了 hlint, ghc-mod, hindente 等相关 Haskell 工具，可以很好地与 IntelliJ IDEA 结合。它们的安装也十分简单，可以直接使用 Haskell Stack 安装，当然 hlint 也可以使用 Homebrew 安装，不过笔者建议使用统一的安装方式方便将来管理。\n\n`stack install hlint hindente stylish-haskell`\n\n其中 ghc-mod 的安装值得特别说一下，目前新建的 Haskell Stack 工程默认的 resolver 是 lts-11.6 , 其 GHC 的版本号是 8.2.2 , 而 ghc-mod 的主工程由于[技术问题](https://github.com/DanielG/ghc-mod/issues/900)一直没有支持这套环境，所以想要成功编译出来是很麻烦的。所以如果大家想使用这款令人愉悦的黑客工作，可以按照下列步骤来编译。\n\n```\n1\\. 推荐建立一个独立的目录来存储接下来要使用的文件，编译完成后即可删除\n2\\. cd 你刚刚建的目录\n3\\. git clone https://github.com/DanielG/ghc-mod.git -b ghc802\n4\\. git clone https://github.com/DanielG/cabal-helper.git\n5\\. cd ghc-mod ; touch stack.yaml\n```\n\n因为通过 Haskell Stack 来编译 ghc-mod 需要配置一个 stack.yaml , 所以用你最喜欢的编译器打开 stack.yaml 并写上下面的内容：\n\n```yaml\nresolver: lts-11.6 # current resolver\n\npackages:\n- location: .\n- location: ./core # seems like ghc-mod-core got integrated\n- location: ../cabal-helper\n  extra-dep: true\n\nextra-deps: \n- extra-1.6.6 # escapeJSON was missing with 1.5.3\n- monad-journal-0.7.2\n- optparse-applicative-0.13.2.0\n- unix-compat-0.4.3.1\n- either-4.4.1.1\n- cabal-plan-0.3.0.0\n\nflags: {}\n\nextra-package-dbs: []\n\nallow-newer: true # so it builds / too lazy to pinpoint exact versions\n```\n\n现在在当前目录使用 `stack install` 命令即可正常编译出 ghc-mod 与 ghc-modi 并会被放在 `~/.local/bin` 目录下，你可以将这个目录加入 shell 的环境变量中也可以把它们移到已经加到 shell 的环境变量的目录下。\n\n最后打开 IntelliJ IDEA 的进入偏好设置界面界面，找到 Haskell Tools 一栏，然后找到你想要使用的工具，点击 Auto Find 按钮然后确认，就能在 IntelliJ IDEA 使用这些工具了！\n\n### Haskell IDE Engine\n\n笔者最近在 GitHub 上发现了这个[新项目](https://github.com/haskell/haskell-ide-engine)，相对于 HaskForce 无人维护的状态，该项目正在如火如荼地开发中。正如该项目介绍所说，这款 Haskell 引擎笔者分析集成了上述所说的所有工具，而且安装配置更加傻瓜化。考虑到维护性，笔者建议考虑配置 Haskell 环境的同学应使用这个解决方案。\n\n#### Haskell IDE Engine 与 Visual Studio Code 集成\n\n从 Haskell IDE Engine 的介绍中可以看出，作者是按照“编辑器 + HIE”这种模式来设计的，故这次笔者尝试了 Haskell IDE Engine + Visual Studio Code 的组合。选择 [Visual Studio Code](https://code.visualstudio.com) 的原因主要是免费，毕竟笔者很穷。\n他们的集成也很简单：\n先从 [VSCode市场](https://marketplace.visualstudio.com/items?itemName=alanz.vscode-hie-server) 安装 Haskell Language Server ,然后再自行编译HIE。\n可以根据自己所用的 GHC 版本选择编译 HIE , 但是根据 Haskell Language Server 的说法，建议全部编译，故笔者选择全编译：\n\n```bash\ngit clone https://github.com/haskell/haskell-ide-engine --recursive\ncd haskell-ide-engine && make build-all\n```\n\n*   需要你的 Haskell Stack version >= 1.7.1\n*   一个流畅的网络\n\n编译成功后二进制文件会放在 `~/.local/bin`，建议将这个路径加入到 \\$PATH 中。\n最后只需要打开 VSCode 的偏好设置，在 JSON 中配置一下即可，具体可以看一下 [Haskell Language Server](https://github.com/alanz/vscode-hie-server) 的文档，基本上默认的配置就可以，但是也有 `\"languageServerHaskell.useHieWrapper\": true` 字段可以选择打开，如果你没有把 HIE 的二进制文件加入 \\$PATH 中，还需要配置 `\"languageServerHaskell.hieExecutablePath\": \"\"` 字段。\n\n现在就能使用 VSCode 愉快地撸码了。\n\n#### 后记\n\nHaskell IDE Engine 还支持很多编辑器，适应性很广。虽说现在用起来不如 HaskForce + IntelliJ IDEA 的组合，但是已发展的眼光来看，未来应该是 Haskell IDE Engine 占主流地位的。所以笔者建议大家都可以试试，总之目前用着还是比较满意的，以上。"
		},
		{
			"post_id": 4,
			"title": "利用iCloud Drive来同步Xcode配置",
			"date_published": 1525977240.452,
			"body": "## 前言\n\n多年以前一位老程序员告诉笔者代码片段（code snippets）是程序员的财富，他有一个U盘，里面装着他的财富。每当他需要切换电脑写代码的时候，他就会把把精心配置的字体、主题、代码片段等部署到新电脑上，然后开始高速编码。每次看他写代码都是一种享受，不过这是另一个故事了。\n\n## 需求\n\n多年之后，笔者也终于凑够了钱买了自己的Mac，闲暇无事的时候也会写写代码祭奠下逝去的青春。但是某些时候总会觉得很别扭，例如感觉字体和单位的有细小的差距，或者一个代码片段怎么也按不出来——最后发现是没有在这台电脑配置这段代码片段。这种事发生的事情多了之后，就会感觉厌烦，同样的操作为什么得重复两次、三次？或者拿出吃了几年灰的U盘抽插在各地的电脑上人工同步？就不能有什么办法可以一次更改多次应用？笔者稍微一拍脑门，想到了今天的主角——iCloud Drive\n\n* * *\n\n1.  为什么使用iCloud Drive？\n    *   因为这是苹果本家的网盘，嵌入系统中，只要开启我们就无需关心上传下载，正如OneDrive在Windows一样，我们只需要把文件放进去，他就会自动开始上传，并在你的每一台苹果设备上同步。利用这点我们就能方便的做到在不同的设备上同步Xcode配置文件，无需手动同步或者上传下载。\n2.  其他的替代方案\n    *   GitHub之类的大型同性交友网站\n        *   目前想来用git应该更好更方便，不过实现起来有点复杂，有能力的朋友可以自己动手\n    *   OneDrive/坚果云等网盘\n        *   我觉得能有自带的还是用自带的吧\n\n## 思路\n\n总所周知Xcode的代码片段是保存在`~/Library/Developer/Xcode/UserData/CodeSnippets`路径下的，附近位置还有主题等配置信息。基于笔者的经验我们只需要备份同级目录下的CodeSnippets、FontAndColorThemes和KeyBindings三个子目录就行了。每当我们修改了代码片段、主题或者快捷键，把对应的文件放在iCloud Drive同步，当在其他电脑上时就使用最新的覆盖到对应目录即可。\n\n## 脚本\n\n虽说思路如此，但是笔者肯定不敢把这种三岁小孩子就能分析出来的东西发出来糊弄人。所以为了简化这个繁琐而又机械的操作，笔者编写了这样一个脚本：\n\n```bash\n#!/usr/bin/env bash\n\nset -euo pipefail\n\n################# variable define ##########\nnow=`date \"+%Y%m%d%H%M%S\"`\n\nred=`tput setaf 1`\ngreen=`tput setaf 2`\nyellow=`tput setaf 3`\nreset=`tput sgr0`\n\nxcode_dir=\"${HOME}/Library/Developer/Xcode/UserData\"\ncloud_backup_dir=\"${HOME}/Library/Mobile Documents/com~apple~CloudDocs/XcodeBackup\"\nlocal_backup_dir=\"${HOME}/资源/归档/XcodeBackup\"\n\ncode_snippets=\"CodeSnippets\"\nfont_and_color_themes=\"FontAndColorThemes\"\nkey_bindings=\"KeyBindings\"\n\n########### MAIN ##################\n# check directory exist\nif [ ! -d \"${cloud_backup_dir}\" ]; then\n    echo \"${red}iCloud Drive备份路径不存在！${reset}\"\n    mkdir -p \"${cloud_backup_dir}\"\n    echo \"${green}自动创建iCloud Drive备份路径：${reset}${cloud_backup_dir}\"\n    else\n    echo \"${green}iCloud Drive备份路径:${reset}${cloud_backup_dir}\"\nfi\n\nif [ ! -d \"${local_backup_dir}\" ]; then\n    echo \"${red}本地备份路径不存在！${reset}\"\n    mkdir -p \"${local_backup_dir}\"\n    echo \"${green}自动创建本地备份路径：${reset}${local_backup_dir}\"\n    else\n    echo \"${green}本地备份路径:${reset}${cloud_backup_dir}\"\nfi\n\n# zip files\ncd \"${xcode_dir}\"\nzip -r \"${cloud_backup_dir}/XcodeBackup+${now}.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\nzip -r \"${local_backup_dir}/XcodeBackup+${now}.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\n\nwait\n\n# delete unnecessary backup files\nnum=`ls -l \"${cloud_backup_dir}\" |grep \"^-\"|wc -l`\nif [ ${num} -gt 5 ]; then\n    num=`expr ${num} - 5`\n    cd \"${cloud_backup_dir}\"\n    ls -tr \"${cloud_backup_dir}\" | head -${num} | xargs rm\nfi\n\nnum=`ls -l \"${local_backup_dir}\" |grep \"^-\"|wc -l`\nif [ ${num} -gt 5 ]; then\n    num=`expr ${num} - 5`\n    cd \"${local_backup_dir}\"\n    ls -tr \"${local_backup_dir}\" | head -${num} | xargs rm\nfi\n```\n\n简化了这个繁琐的操作，仅需在开机的时候跑一下，就能达到自动备份的效果。功能也是十分的简单：\n\n1.  首先创建了两个备份Xcode配置文件的路径，一个在云端，一个在本地（本地路径大家可以自行配置，一般也不会用上）。\n2.  然后把Xcode归档到这两处各一份，笔者这里选用zip包而不是更高压缩比的7zip等是因为想做通用一点便于大家开箱即用，不需要额外安装其他软件。\n3.  最后将多次运行后生成的老包删除，只保留最新的5个，以便节约宝贵的空间（毕竟笔者比较穷只舍得用免费的5g版）\n\n有了这个脚本之后，大家只需要坚持开机的时候跑一跑就行了。笔者喜欢每天开机就更新下cocoapods、brew、brew cask这类的，所以就写了个脚本，刚好顺便也就备份一下。脚本思路大致如下，因为和主题无关就不细说了。\n\n```bash\n#!/usr/bin/env bash\n\nopen 自用魔法丝袜之影\n\nwait\n\npod repo update --verbose &\n更新Homebrew cask &\n备份各种币钱包 &\n\n备份Xcode等IDE配置文件 &\n\nwait\n\nkillall 自用魔法丝袜之影\n```\n\n不过这样其实也不是很方便，毕竟打开terminal输入指令都很烦了，难道还要手动计算这台电脑的配置是否是最新的？然后再考虑是不是需要把云盘里面的配置解压到指定的位置覆盖？而且很有可能在做这些前已经把这台电脑的配置当最新版上传到云盘里了。\n\n## 让所有的电脑用同一个版本的配置\n\n笔者再次进行了思考。如果可以根据这些文件的最后修改日期和备份的文件进行比较，谁新就用哪个版本，那么不就实现了吗？只要我们确保每次修改都跑一次脚本，每次开机都跑一次，就能达到我们想要的效果了。至于如何判断文件的最后修改时间，笔者认为只需要一个根据文件名生成的key和一个对应的文件的最后修改时间做value的数据结构就行了（虽说也可以把备份的文件展开比较，但是因为笔者才疏学浅，尚不知如何操作，就只能通过键值对来判断了）\n不过实际操作起来，再次彰显了笔者的才疏学浅，笔者也不知道如何在bash中创建一个高效并能持久化的键值对，如果哪位大佬知道请务必告诉笔者。\n最后笔者想到Mac自带的SQLite3，虽说这样一个小小的功能上数据库是有一点高射炮打蚊子，但是能跑就行吧。脚本如下；\n\n```bash\n#!/usr/bin/env bash\n\nset -euo pipefail\n\n################# variable define ##########\nnow=`date \"+%Y%m%d%H%M%S\"`\n\nred=`tput setaf 1`\ngreen=`tput setaf 2`\nyellow=`tput setaf 3`\nreset=`tput sgr0`\n\nxcode_dir=\"${HOME}/Library/Developer/Xcode/UserData\"\ncloud_backup_dir=\"${HOME}/Library/Mobile Documents/com~apple~CloudDocs/XcodeBackup\"\nlocal_backup_dir=\"${HOME}/资源/归档/XcodeBackup\"\n\nxcode_backup_database=\"${HOME}/Library/Mobile Documents/com~apple~CloudDocs/.BackupDatabase\"\n\ncode_snippets=\"CodeSnippets\"\nfont_and_color_themes=\"FontAndColorThemes\"\nkey_bindings=\"KeyBindings\"\n\ntemp=\"DoNotModify\"\ndatabase=\"${xcode_backup_database}/${temp}\"\n\n########### MAIN ##################\n# check directory exist\nif [ ! -d \"${cloud_backup_dir}\" ]; then\n    echo \"${red}iCloud Drive备份路径不存在！${reset}\"\n    mkdir -p \"${cloud_backup_dir}\"\n    echo \"${green}自动创建iCloud Drive备份路径：${reset}${cloud_backup_dir}\"\nelse\n    echo \"${green}iCloud Drive备份路径:${reset}${cloud_backup_dir}\"\nfi\n\nif [ ! -d \"${local_backup_dir}\" ]; then\n    echo \"${red}本地备份路径不存在！${reset}\"\n    mkdir -p \"${local_backup_dir}\"\n    echo \"${green}自动创建本地备份路径：${reset}${local_backup_dir}\"\nelse\n    echo \"${green}本地备份路径:${reset}${cloud_backup_dir}\"\nfi\n\nif [ ! -d \"${xcode_backup_database}\" ]; then\n    echo \"${red}同步数据库路径不存在！${reset}\"\n    mkdir -p \"${xcode_backup_database}\"\n    echo \"${green}自动创建数据库路径：${reset}${local_backup_dir}\"\nelse\n    echo \"${green}数据库路径:${reset}${cloud_backup_dir}\"\nfi\n\nsqlite3 \"${database}\" 'create table if not exists backupXcode(id integer primary key not NULL,key integer unique not NULL,value integer not NULL);'\n\n#获取最后修改时间\ncd \"${xcode_dir}\"\nfind \"./${code_snippets}\" \"./${font_and_color_themes}\" \"./${key_bindings}\" -type f >> ${temp}\n\nwhile read path; do\n    key=`md5 -q -s \"${path}\"`\n    value=`stat -f \"%m\" \"${path}\"`\n    isModify=`sqlite3 \"${database}\" \"select value from backupXcode where key == '${key}';\"`\n    if [ -z ${isModify} ]; then\n        echo \"${yellow}本地Xcode配置尚未同步${reset}！\"\n        num=`ls -l \"${cloud_backup_dir}\" |grep \"^-\"|wc -l`\n        if [ ${num} -ge 1 ]; then\n            echo \"${green}找到最新的Xcode配置，开始自动替换${reset}！\"\n\n            cd \"${xcode_dir}\"\n            ## backup before\n            zip -r \"XcodeBackup.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\n            wait\n\n            cd \"${cloud_backup_dir}\"\n            newBackup=`ls -t | head -1`\n\n            unzip -u \"${newBackup}\" -d \"${xcode_dir}\" &\n            wait\n\n            cd \"${xcode_dir}\"\n            rm ${temp}\n            find \"./${code_snippets}\" \"./${font_and_color_themes}\" \"./${key_bindings}\" -type f >> ${temp}\n            echo 更新数据库...\n            while read path; do\n                key=`md5 -q -s \"${path}\"`\n                value=`stat -f \"%m\" \"${path}\"`\n                sqlite3 \"${database}\" \"insert or replace into backupXcode values(NULL,'${key}',${value});\" &\n            done < ${temp}\n        fi\n        break\n    fi\n    if [ ${isModify} != ${value} ]; then\n        if [ ${isModify} -lt ${value} ]; then\n            echo \"${yellow}本地Xcode配置超前${reset}！\"\n        else\n            echo \"${yellow}本地Xcode配置已经过期${reset}！\"\n\n            num=`ls -l \"${cloud_backup_dir}\" |grep \"^-\"|wc -l`\n            if [ ${num} -ge 1 ]; then\n                echo \"${green}找到最新的Xcode配置，开始自动替换${reset}！\"\n\n                cd \"${xcode_dir}\"\n                ## backup before\n                zip -r \"XcodeBackup.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\n                wait\n\n                cd \"${cloud_backup_dir}\"\n                newBackup=`ls -t | head -1`\n\n                unzip -o \"${newBackup}\" -d \"${xcode_dir}\" &\n                wait\n            fi\n        fi\n        cd \"${xcode_dir}\"\n        rm ${temp}\n        find \"./${code_snippets}\" \"./${font_and_color_themes}\" \"./${key_bindings}\" -type f >> ${temp}\n        echo 更新数据库...\n        while read path; do\n            key=`md5 -q -s \"${path}\"`\n            value=`stat -f \"%m\" \"${path}\"`\n            sqlite3 \"${database}\" \"insert or replace into backupXcode values(NULL,'${key}',${value});\"\n        done < ${temp}\n        break\n    fi\ndone < ${temp}\n\nwait\nrm ${temp}\n\n# zip files\ncd \"${xcode_dir}\"\nzip -r \"${cloud_backup_dir}/XcodeBackup+${now}.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\nzip -r \"${local_backup_dir}/XcodeBackup+${now}.zip\" \"${code_snippets}\" \"${font_and_color_themes}\" \"${key_bindings}\" &\n\nwait\n\n# delete unnecessary backup files\nnum=`ls -l \"${cloud_backup_dir}\" |grep \"^-\"|wc -l`\nif [ ${num} -gt 5 ]; then\n    num=`expr ${num} - 5`\n    cd \"${cloud_backup_dir}\"\n    ls -tr \"${cloud_backup_dir}\" | head -${num} | xargs rm\nfi\n\nnum=`ls -l \"${local_backup_dir}\" |grep \"^-\"|wc -l`\nif [ ${num} -gt 5 ]; then\n    num=`expr ${num} - 5`\n    cd \"${local_backup_dir}\"\n    ls -tr \"${local_backup_dir}\" | head -${num} | xargs rm\nfi\n```\n\n## 后记\n\n笔者简单测试了一下，基本上能用。以此思路，应该可以Alfred、vimrc等配置文件。不过依旧不是很方便，不过笔者才疏学浅，目前也就这个水平了，希望能对大家有所帮助，不知道大家有没有什么好的建议？笔者认为可以在Xcode关闭时自动运行本脚本，但是尚未找到好的胡克点_(:_」∠)_\n\n就这样吧，下台鞠躬！！！"
		},
		{
			"post_id": 3,
			"title": "如何使用Logos优雅的注入Mac app",
			"date_published": 1518276797.364,
			"body": "## 前言\n\nLogos是[Theos](https://github.com/theos/theos)的一个组件，它允许程序员使用一组特殊的预处理器指令来编写钩子，简洁高效。\n做过iOS逆向开发的朋友应该非常熟悉，这里笔者将介绍如何在Mac app上使用Logos。\n\n## 可能用到的工具\n\n1.  [Theos](https://github.com/theos/theos)\n2.  [optool](https://github.com/alexzielenski/optool)/[insert_dylib](https://github.com/Tyilo/insert_dylib)\n3.  [unsign](https://github.com/steakknife/unsign) (optional)\n\n* * *\n\n## 一个简单的例子\n\n*   编写一个简单的demo，大概就是\b\b软件正中一个按钮，点击之后alert(\"hi!\")\b。核心代码如下：\n\n```objc\n#import \"ViewController.h\"\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    // Do any additional setup after loading the view.\n}\n\n- (IBAction)sayHi:(NSButton *)sender {\n    NSAlert *alert = NSAlert.new;\n    alert.messageText = @\"hi!\";\n    alert.alertStyle = NSAlertStyleInformational;\n    [alert runModal];\n}\n\n- (void)setRepresentedObject:(id)representedObject {\n    [super setRepresentedObject:representedObject];\n\n    // Update the view, if already loaded.\n}\n\n@end\n```\n\n![效果图](http://ooph3gs8p.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-02-10%2021.53.36.png)\n\n我们的目标是注入sayHi这个方法，使点击按钮之后不再说“hi!”，而是“hello world!”\n\n*   编写Logos\n\n```objc\n%config(generator=internal)\n\n// You don't need to #include <substrate.h>, it will be done automatically, as will\n// the generation of a class list and an automatic constructor.\n#import <Foundation/Foundation.h>\n\n%hook ViewController\n\n// Hooking an instance method with an argument.\n- (void)sayHi:(id)argument {\n    NSAlert *r15 = [[NSAlert alloc] init];\n    [r15 setMessageText:@\"hello world!\"];\n    [r15 setAlertStyle:0x1];\n    [r15 runModal];\n}\n\n// Always make sure you clean up after yourself; Not doing so could have grave consequences!\n%end\n\n%ctor {\n    NSLog(@\"!!!!!!inject success!!!!!!!\");\n}\n```\n\n将以上代码保存为一个Tweak.xm文件(名字后缀名随意)，放在与SayHi.app同级目录下，便于后续操作。\n\n*   然后我们使用Theos的语法分析来把Logos转换成普通代码\n    `$THEOS/bin/logos.pl Tweak.xm > abc.mm`\n    _注意abc应该有mm作为后缀名，用于告诉clang目标语言类型_\n\n*   使用clang编译转换后的普通代码，并将结果放到app包内\n    `clang -shared -undefined dynamic_lookup -o ./SayHi.app/Contents/MacOS/lib.dylib ./abc.mm`\n\n*   使用optool/insert_dylib往SayHi的MachO头部添加我们刚刚编译的lib.dylib\n    `optool install -c load -p @executable_path/lib.dylib -t ./SayHi.app/Contents/MacOS/SayHi`\n\n如果你的Mac app没有签名的话，此时应该已经达成我们的需求了。但是实践中我们肯定不是对自己导出的未签名Mac app下黑手。所以需要去掉这个签名或重签名。因为笔者没有钱买开发者账号，故不知道如何重签名。\n\n*   使用codesign去除签名\n    `codesign --remove-signature SayHi.app`\n\n此时我们的需求已经达成\n![大成功](http://ooph3gs8p.bkt.clouddn.com/屏幕快照 2018-02-10 23.14.23.png)\n但是codesign有一个bug，在删除代码签名之后没有修复MachO Header的偏移，会导致生成的MachO文件畸形。笔者曾经就遇见一个不到1m的小程序在移除签名后膨胀到2g大小。\n所以笔者建议使用开源社区的代替方案——[unsign](https://github.com/steakknife/unsign)\n\n## 后记\n\n笔者把上面的繁琐命令行操作整合为一个脚本，在这里也顺便分享出来\n\n```bash\n#!/usr/bin/env bash\n\n#将xm和文件app包放在同一个目录，运行本脚步进行注入\n\npath=`ls | grep *.app | head -1`\ntweak=`ls | grep *.xm | head -1`\ntemp='x11901'\nname=${path%.app}\n\n$THEOS/bin/logos.pl \"./${tweak}\" > \"./${temp}.m\"\nclang -shared -undefined dynamic_lookup -o \"./${path}/Contents/MacOS/lib.dylib\" \"./${temp}.mm\"\noptool install -c load -p @executable_path/lib.dylib -t \"./${path}/Contents/MacOS/${name}\"\n\nrm -f ${temp}.m\n\n# 使用unsign效果可能更好，codesign --remove-signature 在删除代码签名之后没有修复MachO Header的偏移，导致生成的MachO文件畸形\n# codesign --remove-signature ${name}\nif [ ! -e \"./${path}/Contents/MacOS/${name}.ori\" ]; then\n    unsign \"./${path}/Contents/MacOS/${name}\"\n    mv \"./${path}/Contents/MacOS/${name}\" \"./${path}/Contents/MacOS/${name}.ori\"\n    mv \"./${path}/Contents/MacOS/${name}.unsigned\" \"./${path}/Contents/MacOS/${name}\"\nfi\n\nopen \"./${path}/Contents/MacOS/${name}\"\n```\n\n* * *\n\n[下载Demo](https://github.com/0x11901/SayHi)"
		},
		{
			"post_id": 2,
			"title": "重温《EVA》TV版25、26集有感",
			"date_published": 1518005020.027,
			"body": "![header](http://ooph3gs8p.bkt.clouddn.com//20171028000424_hOICiM_maxresdefault.jpeg \"头图\")\n\n《**新世纪福音战士**》，简称《**EVA**》是我非常喜爱的一部动漫。最近在闲暇之余重温了其TV版25、26话，比起年少时多了几分感慨，故记录下来，方便日后回味\n\n* * *\n\n虽说是想写点什么，但是实际写的时候完全不知从何下笔，所以按照影片的时间顺序结合我个人的分析起笔吧。但是在继续这个话题之前，我提出两个假设，以下的观点讲建立在这两个假设之下：\n\n1\\. TV版25、26话与剧场版《The End of Evangelion》（简称EoE）讲诉了同一个故事，只是表现形式不同，即TV版描述了EoE中真嗣等人在“人类补完计划”前后的心理活动\n\n_注：本条假设基于24话下集预告中出现的分镜和解说与剧场版Air高度一致，证明剧场版剧本早已完成_\n\n![Air](http://ooph3gs8p.bkt.clouddn.com//20171028215724_EGLFHF_屏幕快照%202017-10-28%20下午9.55.56.png \"Air\")\n\n## 2\\. 作者主要以真嗣的心理\n\n## 真嗣\n\n25话一开头就打出了 _存在理由、レゾンデートル_ 一行白字，除了告诉观众我们已经没钱了之外，也揭示了本小结的主题——真嗣存在的理由？![*存在理由、レゾンデートル* ](http://ooph3gs8p.bkt.clouddn.com//20171028212819_J9iNDG_屏幕快照%202017-10-28%20下午9.28.10.png \"*存在理由、レゾンデートル* \")\n\n> 存在的理由，可以待在这里的理由，碇真嗣他的情况\n> \n> 少年期望的死亡\n> \n> 少年达成他的愿望\n> \n> 最后的使徒消灭了\n> 可是，碇真嗣很苦脑\n> 为什么杀掉\n> ……\n\n结合以前的剧情，很容易知道真嗣认为自己是不应该继续存在于这个世界的，正如太宰治的“生而为人，我很抱歉“，此时的真嗣是消极厌世的，他认为渚薰才是应该活下来的，而不是自己（哪怕为此牺牲了全人类）。他也不能接受自己杀了渚薰，认为自己杀了人，所以没有资格再活下去。\n\n> 真嗣：因为没有其他方法啊\n> 为什么杀掉\n> 真嗣：因为他是使徒啊\n> 即使同为人类？\n> 真嗣：不对，是使徒，他是我们的敌人\n> 即使同为人类？\n> 即使同为人类？\n> 真嗣：不对，不对，不对啊\n> 丽：明明跟我同样是人类啊\n> 真嗣：不对，他是使徒啊\n> 丽：所以杀掉\n> 真嗣：没错，不那样的话我们会死掉，大家都会被杀掉\n> 丽：所以杀掉\n> 真嗣：我也不想那么做，可是没有办法啊\n\n这里可以看出真嗣内心已经接近崩溃，虽然找出了很多理由来辩解为什么自己应该存在，辩解自己为什么应该杀死渚薰，但是反复出现的“所以杀掉”暗示了真嗣内心是不接受自己的辩解的，于是他选择了向他人求助，告诉他杀死渚薰、自己活下来的理由\n\n![help](http://ooph3gs8p.bkt.clouddn.com//20171028230517_0XSs9x_屏幕快照%202017-10-28%20下午10.56.14.png \"help\")\n\n然后画面闪回了24话末真嗣与美里在夜晚的湖边交谈\n\n> 真嗣：没错，活下来的应该是薰才对，他比我这种人不知道好多少倍，应该是薰活下来才对\n> 美里：不对，能活下来的只有怀抱生存意志的人，放弃生存的意思，把一切寄托在徒具表像的希望上，真嗣你没有错\n\n但是基于第一个假设，我认为25话应发生在交谈之后，所以此处除了省钱之外，应该算作回忆，美里的解释并不是真嗣想要的答案，不过我认为这是作者想要呈现给观众的答案\n\n​ _顺便说一下，这时的真嗣去医院寻找了明日香的帮助，但是并没有得到帮助，而是……对于这样下流的主角，我只能说放开那个女孩，这种罪孽让我来承受_\n\n![OGC](http://ooph3gs8p.bkt.clouddn.com//20171028232420_b9lRrz_屏幕快照%202017-10-28%20下午11.20.31.png \"OGC\")\n\n紧接着又是一连串字幕\n\n![](http://ooph3gs8p.bkt.clouddn.com//20171028231206_Vy6FdZ_屏幕快照%202017-10-28%20下午11.11.29.png)\n\n大概这就是真嗣现在的想法，他认为自己正在被灌输正义，实际上无论何种解释，自己都没有理由在存活于世，不如死去。\n\n![](http://ooph3gs8p.bkt.clouddn.com//20171028232833_0LxvnT_屏幕快照%202017-10-28%20下午11.28.22.png)\n\n> 不安\n> 真嗣：这样真的好吗？\n> 强迫观念\n> 真嗣：我不知道，我该怎么办才好，该怎么办才好啊？\n> 在害怕什么？\n> 真嗣：害怕什么\n> \n> 在害怕什么？\n> 真嗣：自已\n> 在害怕什么？\n> 真嗣：怕被讨厌\n> 在害怕什么\n> 真嗣：被谁\n> 在害怕什么\n> 真嗣：谁呢？\n> 在害怕什么\n> 真嗣：那是…爸爸。我被爸爸拋弃，被爸爸讨厌\n> 真嗣：被讨厌的话该怎么办，怎么办才好\n\n接下来的这一段内心独白，说明了真嗣害怕被碇源渡讨厌，一个简单而又单纯的理由，折射的却是一个自幼被抛弃、残缺而破碎的内心。虽说每个人的一生难免都会被父母所伤害，但是真嗣的个人经历正是造成他性格的重要原因。对于一个14岁的少年，一次又一次的被父亲逼着“杀人”，正常情况下谁都会崩溃，真嗣的内心一遍遍的追问自己为什么害怕，而他的自卑、罪恶感也一步步把自己推向崩溃的边缘\n\n随着镜头一转，来到一片白雾中\n\n![白雾](http://ooph3gs8p.bkt.clouddn.com//20171029230516_lPSu6W_白雾.png \"迷蒙\")\n\n象征了此时的真嗣已经迷失自我\n\n> 真嗣：这是那里，我该去那里才好，什么都看不见，什么都不知道\n> \n> 美里小姐，那个，你到那里去了\n> \n> 那个，接下来我该去那里\n> \n> 美里小姐，明日香，丽，冬二，剑介，加持先生，律子小姐，爸爸…妈妈…谁来告诉我，告诉我到底该怎么办才好\n\n迷蒙中真嗣渴望得到别人的帮助，但是这是无济于事的。依据第二个假设，真嗣内心中出现的他人只是自己根据记忆构建的他人形象，虽然说出来的台词很像他人真正所说的，不过毕竟是自己所构建的。自己永远不可能欺骗自己，除非自己放弃了\n\n此时画面中出现了初号机，并一把抓住了真嗣\n\n![省钱镜头的致敬](http://ooph3gs8p.bkt.clouddn.com//20171029231323_p7Kmuw_省钱.png \"省钱镜头的致敬\")\n\n> EVA初号机，结果，我只能驾驶它吗？甚至还要杀掉喜欢的人，照爸爸还有大家说的，再次驾驶著它去战斗吗？妈妈，说说话吧　回答我啊\n\n此时突然出现的初号机，我认为有两层含义，一个是根据《EoE》的剧情，真嗣在美里留下“大人的吻”之后来到了初号机面前，但是他并没有坐上驾驶室，这里也许说明了他为什么不愿意再驾驶EVA，任凭我香如何呼喊\n\n![](http://ooph3gs8p.bkt.clouddn.com//20171029233159_czQ3SH_2017-10-2911.30.38s.png)\n\n第二层意思我认为是紧接上面，害怕被父亲讨厌的真嗣为了讨好父亲，成为大家眼中的乖孩子，不自愿地驾驶EVA，驾驶EVA是他为了博得父亲好感的一个也是唯一一个途径，哪怕一次次被伤害，一次次逃走，最终他都会回来驾驶EVA。而这一次EVA又来到了他的眼前，说明了他内心的绝望与矛盾……人生也何尝不是如此\n\n> 为什么驾驶EVA\n> 真嗣：因为大家要我驾驶\n> 所以就驾驶EVA?\n> 真嗣：那是为了大家啊，有什么不对\n> 你是为了大家，为了他人驾驶EVA吗？\n> 真嗣：没错啊，这不是件好事吗？不是一件非常好的事情吗？这样大家就会称赞我，就会重视我\n> \n> 明日香：骗人，你是白痴吗？结果还不是为了自己，你总是这样动不动就为自己辩解\n> 真嗣：是吗\n> 明日香：为了他人而努力这种想法，本身就是一种轻松的生活方式\n> 真嗣：是这样吗？\n> \n> 明日香：简言之，真嗣你很寂寞\n> 真嗣：是吗\n> \n> 明日香：你这样不过是一种依赖罢了\n> 真嗣：或许真是这样吧\n> 明日香：你只是一昧盼著自己被人需要不是吗\n> 真嗣：也许是吧\n\n纵观整部作品，真嗣大部分时间都不是自愿驾驶EVA的，有时为了帮助他人有时是为了自己。正如明日香所说，真嗣选择了一个轻松的活法——通过取得别人的认同而实现自己的人生价值。根据弗洛伊德精神分析学的基本原则\n\n> 包括遗传的性格构造在内，人心理的发展是由幼时的经历决定的\n\n造成目前真嗣这一性格很有可能是因为真嗣的童年经历。为了自己不再被抛弃，真嗣拼命寻找一个存在于此的理由——驾驶EVA，但是当他已经无法再驾驶EVA的时候，既是自己再次成为无用之物的时候（潜意识中真嗣认为自己将会再次被抛弃）\n\n虽说我们都知道事实并不如此，但是这也是局外人的观点，此时此刻真嗣是既不愿意再驾驶EVA，又不得不驾驶EVA，也许这也能解释真嗣为何在此时选择轻生。\n\n顺便提一下这里明日香的观点十分有趣，让我想到了正义的伙伴——卫宫士郎\n\n![正义的伙伴](http://ooph3gs8p.bkt.clouddn.com//20171031182843_vlUz6J_f_17148b5d2f7d52732cb5e7c96925f8e81.jpeg \"正义的伙伴\")\n\n也许是奈须蘑菇受到了痞子的启发，卫宫士郎的理想就被人评价为“偷来的理想”，而在这里真嗣被明日香说成了是寂寞\n\n> 寂寞是想要别人理解你\n> \n> 孤独是没有人能理解你\n\n可谓是一针见血，真嗣渴望被关注，渴望被爱，也曾经努力过，试图改变过，不过最后他认为自己失败了\n\n> 明日香：你只是一种等待別人给你幸福不是吗？给你虚假的幸福？\n> 丽：这方面你不也一样吗？\n> 明日香：啊？\n\n这时话锋一转，突然出现的绫波丽把矛头指向了明日香画面切到了水中的二号机（正好能和剧场版中昏迷的明日香同二号机一起沉入湖底避难）\n\n## 明日香与绫波丽\n\n> 明日香：不知不觉我又坐上了EVA，又被放了上来，反正这个废物也不会动了，不…废物应该是我吧，没人需要我这种人了，我这种人已经没人要了，没有人需要无法驾驶EVA的驾驶员\n> 丽：你在別人心中追寻自己呢\n> \n> 明日香：少啰嗦\n> 害怕分离\n> 丽：你害怕独自一人对吧？\n> \n> 改变话题，场景\n> \n> 害怕分离\n> 丽：你是因为自己也会和別人一起消失才害怕的吧？\n> \n> 害怕分离\n> 幼年的明日香：所以才驾驶EVA\n\n明日香在剧中一贯给人开朗活泼的感觉，但是随着剧情的发展，明日香的精神状态急转直下。无法驾驶EVA的明日香离家出走并割腕自杀，说起来真的和真嗣很像。不过真嗣应属于被动型人格，明日香则正好相反，但是本质上他们都因为童年的阴影\n\n> 明日香：少啰嗦\n> 固执\n> 明日香：少啰嗦、少啰嗦，我才不想被妳这种人偶说教\n\n* * *"
		}
	]
}