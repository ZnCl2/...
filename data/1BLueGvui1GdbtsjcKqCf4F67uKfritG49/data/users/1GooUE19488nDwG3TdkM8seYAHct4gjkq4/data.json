{
	"next_comment_id": 8,
	"user_name": "Geekless",
	"hub": "1SunAWK2VUT9GQK32MpwRfFPVgcBSJN9a",
	"post_like": {},
	"comment": [
		{
			"comment_id": 1,
			"body": "@leftside: It is not actually \"neighboring nodes\", who know about your stuff, but trackers. Your sites are always announced to some trackers, or else the network will not be able to work. The person who runs a tracker can access any \"private\" sites.\n\n> I'm still skeptical on this matter, but if it's true it's a big issue\n\nIt is the matter of ZN. When you create a zite, you actually create a chunk of data to share to the whole world. If it is not what you want to do, you shouldn't use ZN. Maybe it is better to run a clent-server site via Tor or I2P in that case.",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535536381",
			"date_added": 1535553694
		},
		{
			"comment_id": 2,
			"body": "@leftside:\n\nThe shared key can be kept encripted in the same way as usual private messages. So, it is decripted by client-side JS code and never saved to data.json in the plain form.\n\n1. User A creates a new chat, which means she generates a new key and saves it in her data.json encripted.\n2. User A sends an invite to user B. The invite is sent as an encripted private message, so only B can read it.\n3. When user B goes online, the site's code scans the DB for new messages. It sees the invite and saves it to data.json (still encripted).\n4. The saved key now can be used to read the messages in the new chat.",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535536381",
			"date_added": 1535591652
		},
		{
			"comment_id": 3,
			"body": "@leftside: No problem, the same approach is applicable to your case too. It is just a particular application of the general algorithm.\n\nIn ZeroNet, there is no need to write any additional passwords anywhere, since your secret master_seed is your password for everything. The cryptography does the work for you. Well, you still can implement additional passwords, but I see no reason why one would like to do it.\n\nYou can automatically share the key pair with a some number of users in a secure way, so they do not need to worry about writing it in a notebook or so.\n",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535536381",
			"date_added": 1535603883
		},
		{
			"comment_id": 4,
			"body": "@leftside: One more idea just came to my mind:\n\nIf the access control is not very important, and if you just care about 3rd party persons were not able to read your data knowing only the domain name, you may want to use the approach similar to one at Google Drive. I mean its \"shareable link\" feature.\n\nSo, the content of your site is encrypted, and when you share a link to a person, you add the key to the link\n127.0.0.1:43110/YOURDOMAIN/?key=DECRYPTION_KEY\n\nWhen the person open the link, the content is decrypted on the fly with the key provided. From the user's point of view, it works similar to Google's \"shareable links\".\n\nOther persons, who know just the domain name (via sniffing a tracker traffic, for example), still has no posibility to decrypt your data.",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535536381",
			"date_added": 1535605095
		},
		{
			"comment_id": 5,
			"body": "@leftside: Now I feel enthusiastic about implementing the cryptography-based access control for ZeroBlog: http://127.0.0.1:43110/1BLoGBTid3NhGu8ts3fAfHJprnbrH3wfTV/?Post:40\nI'll check out that idea, if I have some free time.",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535536381",
			"date_added": 1535610668
		},
		{
			"comment_id": 6,
			"body": "Я бы задумался о вирусах. В маршрутизаторе, мб?",
			"post_uri": "1PniNzyi8fygvwyBaLpA9oBDVWZ5fXuJUw_1535869858",
			"date_added": 1535978120
		},
		{
			"comment_id": 7,
			"body": "Netsukuku's long dead...",
			"post_uri": "1KuwwnkAtVrfnyhv8pyGRxLqzNZbEkJt2u_1585056984",
			"date_added": 1585060801
		}
	]
}