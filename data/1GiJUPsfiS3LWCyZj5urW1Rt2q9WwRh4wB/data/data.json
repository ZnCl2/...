{
	"title": "Klaus Zimmermann on ZeroNet",
	"description": "**A hacker stuck in a world of conformity.**\n\nI code, advocate **free software** and try to do my best to make the world a better place. Help me out in my campaign!\n\n![kzimmermann](img/kzimmermann_mini.png)\n\n**Follow me!**",
	"links": "### Where to find me elsewhere (darknet and internet) ###\n\n - GNUSocial: [@kzimmermann](https://quitter.se/kzimmermann)\n - Diaspora [profile](https://diasporabr.com.br/u/vman)\n - NotABug: https://notabug.org/kzimmermann\n - My [bitmessage](bitmessage:BM-2cTfdPokxEpcVXiUFPmDQ7YHYq1LKwHxki) address \n - My other site (now defunct): http://kzimmermann.nerdpol.ovh",
	"next_post_id": 19,
	"demo": false,
	"modified": 1471380035,
	"post": [
		{
			"post_id": 18,
			"title": "Random pseudonym generator",
			"date_published": 1471379014,
			"body": "Building on top of my previous post on [username privacy concerns](/1GiJUPsfiS3LWCyZj5urW1Rt2q9WwRh4wB/?Post:17:On+usernames+and+privacy), I realized that sometimes a better \"cloaking\" can be built on top of your nondescript username by associating a **pseudonym** on top of it.\n\nLikewise usernames, you shouldn't make a pseudonym a name that somehow can be traced back to your personality, birthplace or other identifiable reference, but in practice this can be not so easy to do. We all tend to drift back to something we've already seen before when thinking about picking \"a name, any name,\" which clouds the judgement and reduces your chances for anonymity. This is why I decided to figure out a way to have random pseudonyms generated.\n\n---\n\nI've started a small repository for [crypto and randomness-related software](https://notabug.org/kzimmermann/misc-crypto), wherein I wrote `namegen`, a random name generator based on the resources available on a GNU/Linux system. It parses the standard `words` file for given names, uses `shuf` to shuffle them more-or-less randomly and makes a full name out of it by stringing three together. Sometimes the results are impressively lifelike:\n\n    $ ./namegen\n    Valeria Synge Wozzeck\n    $ ./namegen\n    Lars Hurley Falwell\n    $ ./namegen 3\n    Beatrice Buchanan Palomar\n    Pamela Lemaitre Caleb\n    Niccolo Zachary Principe\n\nBut since country and place names also count for proper nouns, you can have some oddities:\n\n    $ ./namegen\n    Fiji Hazlitt Glaxo\n    $ ./namegen\n    Comanche Roseau Alaskan\n\nAnd of course, the script doesn't differ given names from Family names:\n\n    $ ./namegen\n    Einstein Le Sioux\n\nWell, it's still in its infancy, but who knows? Perhaps it will evolve into separating known family and first names for a more accurate generation. I don't know at this time. But the idea is a good one, and may help many conserve their privacy in these days of the tracking web."
		},
		{
			"post_id": 17,
			"title": "On usernames and privacy",
			"date_published": 1460085699.3,
			"body": "I'm writing this post after a white-hot, furious hacking session involving random device files, base64, and some good old Python. After my work on the [strong password generator](1GiJUPsfiS3LWCyZj5urW1Rt2q9WwRh4wB/?Post:16:A+graphical+strong+password+generator), I got to thinking about the implications on *privacy* rather than security of the authentication systems used in web apps.\n\nSome stuff gets leaked by default because our browsers are naive (IP address, navigator string, etc) and most of it can be obfuscated by using the appropriate countermeasures such as Tor, NoScript, etc. However, there's one point that I believe is still overlooked: the **username**. Could a badly-chosen username effectively kill your anonymity online?\n\n---\nThe back story of Snowden's great escape to Taiwan and Russia intersects with the demise of [Lavabit](http://lavabit.com/), a former privacy-centric email service provider. The story goes that Snowden, very mindful of the privacy-invading actions of the NSA, used to maintain an account there under the username `ed_snowden`, which he used to first communicate with Glenn Greenwald and eventually start the leakage of documents. \n\nThe NSA eventually picked up on this and ordered Ladar Levison (Lavabit owner) to hand in his encryption keys so they could access all the communications from said user `ed_snowden`. Levison, a strong privacy advocate, wasn't going to give in easily: faced with the choice of betrayal or jail, he chose instead to delete all records and shut down the service instead.\n\nThe outcome of the story everyone knows, but the one thing about this yarn that bugs me still to this day is this: **why did Snowden choose such an obvious username?** Perhaps the NSA and its all-reaching arms would have reached him regardless, but what if he was running away from a less sophisticated enemy? Perhaps only a stalker? \n\nThinking about these issues has brought my attention to the *importance of random usernames for privacy*.\n\n## Why bother with usernames anyway? ##\n\nIn a way usernames and handles make sense: they are a way of tying up some data entered online with someone (whoever that is) without having to resort to reading the logs. However, their reuse in all the services that don't federate with each other means that we essentially trace a web of association each time we create an account somewhere new. \n\nThink about a doxxer's work: how much easier does it become to obtain data about someone just because that someone has the same username in every service he/she signed up for? I'm pretty sure that many people searched for some acquaintance's username when the Ashley Madison leak became publicized. \n\nThere's a lot of talk regarding online security where it's said that you shouldn't reuse your passwords, and yet nothing is said about the username - it remains a shared key in all your authenticated online activity. If we are to be conscious about privacy, these policies needs to change.\n\n## What to do? ##\n\nThe solution is simple: choose a completely unrelated username for any service that requires you to authenticate with a password. This, however, is harder than it looks: like in passwords, most of us, when asked to \"pick a word, any word,\" will choose something that relates to us somehow - a hobby, some favorite food, color or thing, etc. But worse than that is remembering that choice later.\n\nRemember that we have been hardwired to use the same username everywhere we go. We might remember a different password we set for a service, but the username? That's a no-brainer. And that's why when we set up a different username (for privacy, perhaps), we usually have to remember that we are using a different \"profile,\" not our standard one. Add three or four services to that profile stack and you are already lost in information to memorize.\n\nI propose an alternative: use **random-looking usernames** to log privately into web services, but **have a deterministic way of generating them**. For example, if the site you're visiting is `example.com`, take the SHA-1 of it and slice the last 8 characters for a username! This would yield `65b0781f` - a seemingly-unrelated username still easy to generate. \n\nThis example is weak, because only one username can come out of a domain. My full proposition, then, can be found in the latest commit to [strong-passgen](https://notabug.org/kzimmermann/strong-passgen/commit/ca5b0fe2be445621e6c0edc41f534289ea17f28c): while generating a password, it also suggests a random-looking username that you could use if desired.\n\n    $ passgen example.com\n    Enter your salt: # example\n    Confirm: # example\n    Suggested username: a9fd11b6270a\n    Password copied to the clipboard.\n\nNow a single \"salt\" can provide you three things: the service you're logging in, your username in that service and the password. No more need for password managers, even for throwaway accounts!\n\n## Conclusion ##\n\nStrong passwords are important, but in some occasions so are non-identifying usernames. By using a deterministic way of creating random-looking usernames (or using [strong-passgen](https://notabug.org/kzimmermann/strong-passgen)) you can mitigate the risk of having your online activity traced back at you, and not have to memorize multiple usernames."
		},
		{
			"post_id": 16,
			"title": "A graphical strong password generator",
			"date_published": 1459780282.592,
			"body": "I've updated my old [strong password generator](https://notabug.org/kzimmermann/strong-passgen/) to be used in a simple GUI. Now people who dislike the command-line or have trouble copying and pasting text from it can equally benefit from having a strong password generated from simple, easy to remember strings!\n\n![enter a password seed and an identifier string](data/img/strong-passgen-1.png)\n\n![copy the generated password and paste it where you need it](data/img/strong-passgen-2.png)\n\nNo more excuses about picking weak passwords! Everyone can create strong and unique passwords now."
		},
		{
			"post_id": 15,
			"title": "ZeroNet - Tips, tricks and beginners' questions",
			"date_published": 1458613024.762,
			"body": "There has been a huge growth to ZeroNet lately (perhaps started out in the end of February or beginning of March) that has really impressed me. We went from 70 peers or so on a good day to a whopping 800+ average in just a few weeks! Some people say it was because of [Play](http://127.0.0.1:43110/1PLAYgDQboKojowD3kwdb3CtWmWaokXvfp/) and its fine torrent collections, others say that it was a movement away from other darknets such as Freenet or I2P, but regardless of what it really was, the bottom line is this: *never has P2P software been so strong as it is now*. This is a truly amazing feat.\n\nWith that said, this change also meant that a lot of beginners have flocked here, and may be slightly lost as to how does ZeroNet work. Looking to give back to this awesome community, I've decided to put some advice here based on my experience with it so far (I've been using it since around June 2015) that I gather everyday. I'm by no means the most experienced person around here of course, so if you have more advice to give, please feel free to add it in the comments to this post! I pulled some stuff from the [official documentation](http://zeronet.readthedocs.org/en/latest/faq/) so make sure you look into it as well.\n\nLet's begin...\n\n---\n\n## Do I have to port forward or install Tor to use ZeroNet? ##\n\nWhen you run `python start.py` without any options, ZeroHello will flag two warnings for you, saying that your port 15441 is closed and that Tor has not been enabled. Many people upon seeing these have asked the forums if these are actual requirements; they are **not**.\n\nPorting forward only makes ZeroNet more efficient, and helps discoverability when you start hosting a site. If you do not open your ports, however, don't worry: your sites are still reachable, and your posts are still publishable. Don't think about porting forward just because of ZeroNet!\n\nAlthough not necessary either, Tor users can benefit from an extra layer of privacy by routing ZeroNet through Tor, which makes ZeroNet behave similarly to a hidden service. You do not need Tor Browser to [route ZeroNet through Tor](http://zeronet.readthedocs.org/en/latest/faq/#how-to-make-zeronet-work-with-tor-under-linux), although [that is actually a good idea](http://zeronet.readthedocs.org/en/latest/faq/#how-to-use-zeronet-in-tor-browser), especially if you don't like clicking on clearnet links.\n\n## Can I connect to ZeroNet remotely? ##\n\nOf course, to enjoy ZeroNet to the fullest you should host an instance yourself. This is the recommended way, and involves cloning the ZeroNet [GitHub repository](https://github.com/HelloZeroNet/ZeroNet), installing dependencies and running the start script. However, if you're away from your main machine or just want to quickly peek into ZeroNet, you can use an **inproxy**. Connecting to the inproxy means that you can access ZeroNet from the normal internet, much like how sites such as https://onion.to do with Tor.\n\nCare should be taken, though, as most of these proxies do not offer HTTPS and, unlike the locally-hosted ZeroNet, your connection is not encrypted at all. With that said, here are a few inproxies that I know of:\n\n - http://zero.pags.to:43110\n - http://bit.no.com:43110\n - https://www.zeropro.xyz (down?)\n\n[This page](http://127.0.0.1:43110/zeroproxies.bit) lists a few more of them.\n\nNote that most of them also depend on the traffic of port 43110, which some firewalls have a hard time allowing. But otherwise it's a pretty convenient way to check upon Zites when you're on the run.\n\n## How do I post things in forums or blog comments? ##\n\nYou need to authenticate by creating a user. The user can be completely pseudonymous, but is necessary to even post in [relatively anonymous places](/0chan.bit). There are two bit ID providers on ZeroNet as of now:\n\n - [ZeroVerse](/zeroverse.bit)\n - [ZeroID](/zeroid.bit)\n\nKeep in mind that, as it says on their pages, this authentication only works for sites that accept their mechanisms: in the case of ZeroID, that isn't much of a problem as that site basically grew together with the rest of ZeroNet, but might be for the newer ZeroVerse.\n\nAlso, notice that you *don't* need to register at all just to host a site and blog there.\n\n## How do I preview my posts before posting? ##\n\nUnlike Diaspora or GNUSocial, you don't need to! Because all content of ZeroNet is mutable, you can simply post it and change it later on! This makes draft proofing from MarkDown much easier to do. Just write a blog post and edit it until perfection.\n\n## Do I really need to host an *entire* site myself just to visit it? ##\n\nThere was a time long ago when that used to be the case, but nowadays the *optional files* policy means you don't have to host content you don't want or need to see.\n\nDue to optional files, only the core stuff (index.html, the accompanying embedded images, CSS, JS, etc) is downloaded. Remaining stuff, such as images found in posts, files uploaded by other users and stuff you haven't \"discovered\" about the site need not to be downloaded unless you explicitly request them.\n\n## I want to promote my site! How can I do this? ##\n\nSite seeding these days is much easier now that 800+ peers surf ZeroNet any given time. You just need to make your site known, here a few things you can do:\n\n - Get a couple of initial seeders for your site by submitting it to the [new site seeder](http://127.0.0.1:43110/1LtvsjbtQ2tY7SCtCZzC4KhErqEK3bXD4n/)\n - Submit your site to [0List](/0list.bit), a pretty neat indexer of sites.\n - Announce your site in [ZeroTalk](/Talk.Zeronetwork.bit), the *de facto* ZeroNet forums.\n - Add your site to the [ZeroWiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP/) list.\n - Add your site the ZeroNet search engines.\n\nWhich leads me to...\n\n## Are there any search engines inside ZeroNet? ##\n\nYes, but they need work :(\n\nAs of now you can only search for a site's title and maybe a few tags that roughly describe what kind of content is expected there, but we still can't get any kind of webpage crawling and searching for page content like in Tor.\n\nWith that limitation said, though, [Kaffiene](/search.kaffie.bit) is probably the most complete search engine in here. There's also [ZeroSearch](/zerosearch.bit)\n\nYou can also find a lot of other interesting stuff chucked into the forums archives, but as they don't have a built-in search mechanism, your best bet there is plain old `Ctrl+F` page searching.\n\n## Help me expand this list! ##\n\nIt's late, I'm tired, and yet there are a lot of other things to be said about Zeronet. Help me out in the comments!"
		},
		{
			"post_id": 14,
			"title": "Blog engine updated!",
			"date_published": 1458397598.4,
			"body": "This is just a quick interlude post. A meatier one will come soon!\n\nKlaus Zimmermann's ZeroBlog has just been updated with the latest ZeroBlog engine! This includes the option of feed following, so now you can subscribe to new posts as they appear.\n\nSorry if it took a while, but I didn't have the time before. Now it should be working great!\n\nA real post will come soon."
		},
		{
			"post_id": 13,
			"title": "A new post and update is coming soon...",
			"date_published": 1458097512.643,
			"body": "Promise!\n\nI became so marvelled at how ZeroNet expanded in the past month that I got inspired to use it actively again. This time I'd like to do two things:\n\n - \"Hold hands\" with beginners and answer a few questions they all might be having\n - Update my blog's engine so as to allow the reader to follow my feed on the home timeline.\n\nPost coming soon!"
		},
		{
			"post_id": 12,
			"title": "The concept of Web Browser needs to change",
			"date_published": 1453586337.745,
			"body": "I love web browsers. I'm using one right now, and I bet so are you. I use them every day to read the news, connect to friends. I do business with them, and perform financial transactions with them. In fact, a very large portion of my online interactions is done through these wonderful pieces of software. Does that mean I think browsers are perfect? Absolutely not.\n\nIt's time to rethink the concept of web browsers. Today this is not so much a proposition as it is a fact. I claim that browsers have become unnecessarily bloated and, in the process, also ripe targets for vulnerability exploitation, tracking and surveillance, and a potential platform for instituting DRM without the user knowing. The need for a change is very real.\n\nDon't believe me? Read on.\n\n---\n## Browsers are bloated ##\n\nThe [Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy#Do_One_Thing_and_Do_It_Well) of software development may not be the most up-to-date methodology around, but it did hold two things as paramount: Efficiency and Modularity. The saying of *Do one thing and do it well* is pretty clear here: you should focus the software into doing a limited scope of action instead of trying to embrace the world. Following this philosophy results in efficient software that can do additional work if chained together with other efficient software.\n\t\nCould you say that today's browsers are efficient or modular? Hardly. Today's browsers are so feature-bloated that they can easily be considered an adjacent operating system running on top of the system's own. Using only a browser today, I can:\n\n - View HTML (the original purpose of the Web Browser)\n - View media\n - Run additional mini-programs inside of it, which I don't have any control of, and have no idea what will they do\n - Access peripherals such as webcams\n\nDoing all of the above requires about 300-400MB of memory, more than the cold-boot equivalent of most operating systems.\n\nI by no means disagree that they are powerful and very useful. But if all you do on the web is read text or view images of cats (or pr0n), is all of this really necessary? Why don't we leave the HTML parsing/styling to the browser and everything else goes to external applications?\n\n## Browsers are a constant source of vulnerabilities ##\n\nYou could say this about any piece of software, but because they are so popular and exposed, it's no surprise that so many people try to pull out exploits from browsers. There are quite a few countermeasures for this, of course. Keep your browser updated, update the system, don't open attachments you don't trust, don't visit sketchy sites, etc. But here's the thing: these exploits appear frequently because browsers are growing in complexity quite fast. The more complex the code becomes, more possibilities for exploit appear.\n\nI say browsers will *never* cease to be a source of vulnerabilities as long as they keep pursuing features to assimilate (see the point above). This is true for other necessarily complex projects as well, such as the kernel. \n\nBut if everything you do is read text in the internet, why run this risk? Make it simple, and it will also be safer.\n\n## Browsers are prone to tracking and surveillance by default ##\n\nOnce again, you could say that about other applications that connect to the internet without something like Tor, but when it comes to browsers, this is huge. Browsers leak lots of your information and you're not even aware of it. Turning off Javascript doesn't help either; your referral information, IP address and other identifiers are still handed over naively by your browser. \n\nThere are of course several add-ons that you can install to protect yourself from the data leakage, but they are usually third-party and you have to audit them yourself. Also, using an add-on to prevent the browsing from sending information is *solving a problem that doesn't need to exist*: how about if the browser didn't leak that information in first place?\n\n![kzimmermann](https://ipfs.io/ipfs/QmUyrTjHyYCc4aLVxschfMcCrom821RjCmM2a3LfXea48Y)\n\nWhen we browse, we shouldn't have to worry about what kind of information we are leaving except for those we voluntarily submit. No referral submission. No user-agent sniffing. Cookies? Please. It's 2016. There ought to be a better way of doing it without them.\n\nI say that instead of making potentially identifying information hidden, yet available through request, we should make it so that browsers by design are simply *incapable* of providing them. That's right, no referral address, no user-agent, no HTTP headers beyond the strict necessary. To hell with \"analytics\" when all that really means is *tracking*.\n\n## An abstract solution example ##\n\nLooks like I've ranted enough already. Do I have a solution to propose? Yes, at least in abstract terms.\n\nTo help sketch a solution, I point to an already existing good example: [GNUSocial](https://gnu.io/social). The GNUSocial API has got to be one of the most flexible around the web today, and this is reflected in the rich variety of clients it has spawned, ranging all the way from [command-line](https://github.com/identicurse/IdentiCurse) to [desktop](http://choqok.gnufolks.org) and [mobile](https://andstatus.org/) apps. Hell, you can even post to it using a `curl` request!\n\nThis means that all clients, simple to complex, get to enjoy the same user experience, because most of the data exchanged is *text*, with links to media. How is the general web any different? Based on the GNUSocial example, I propose the process of building a web browser as follows:\n\n - Start off with (hyper)text. This is the heart of the web for what we care.\n - Add support for encryption. This must be the highest priority along with security considerations. \n - Make it so that images and videos are represented by a link to open in an external application, kind of how we see it in some smartphone apps.\n - Limit the sort of information that the browser sends. No more than just the necessary, and no identifying information at all.\n - Drop any possibility of supporting Javascript, Flash or any other client-side scripting language.\n\nThere was a time when Javascript was acceptable, but with today's omnipresent tracking and stuff, it has simply lost its credibility. Just drop it.\n\n## Conclusion ##\n\nIf you followed the process above, what would you end up with? A text-based browser? Maybe. A lightweight graphical browser or app? Perhaps. The point is that the interface in the end largely won't matter: the way the content is treated and the user interacts with it will. \n\nNo more flashing stupid banners or tons of tracking scripts sucking your information with security risks. That is the goal. The tracking and mining of user data will only grow worse. Perhaps this could be a turning point for good."
		},
		{
			"post_id": 10,
			"title": "Project Swarm: digital life based on P2P",
			"date_published": 1450054679.172,
			"body": "During the past few weeks, I dove deeply into P2P applications. To me they're, to put it simply, the future of free computing and networking, and what users need to switch to, if there's such an alternative to a proprietary service. My study eventually culminated into an idea: how much of my digital itinerary can I replace with just P2P applications?\n\n---\n## Interlude: why P2P? ##\n\nBefore I continue, let me clarify one thing: there's a lot of talk today going on about decentralized/distributed services and how *they* are the future of freedom concerning web services, but to me that's just a stepping stone, a middle stage for the real final solution. The following diagram illustrates my point very well:\n\n![kzimmermann](https://ipfs.pics/ipfs/QmdhTuX4V4uAUKotFTFpeHDEkSDvWVGfsvqT5EwtmtnPUW)\n\nIn a decentralized world, no *single* entity has control or ownership of all data, but there are smaller nodes that *still* do have that sort of power over the users signed up to them. The fact that there's no single owner to take the whole service down if compromised does offer some kind of resilience, but only to a point: if one node is down, users on that node are affected, and depending on the popularity of that node, it can affect the overall network quite a bit. I've seen examples of this happening on [a few Diaspora\\* pods](https://joindiaspora.co.uk), for example, with the consequence being that their users get fed up and [move into another available pod](https://diasporabr.com.br/posts/946264).\n\nOne way to minimize this issue is to granulate more the network by having more nodes with less users on each, or even go down to the extreme and have every user self-host their own node, either through a personal machine or through some kind of VPS. You could claim that by the time you reach this level, you technically are already doing it P2P style, but there are a few problems with pursuing that approach:\n\n 1. **The set-up is not trivial for most of the services**. There are quite detailed guides that instruct the installation very nicely, but they are intended for sysadmins who will run nodes with many users, not end-users looking for private self-hosting.\n 2. **You become responsible for your own availability**. In the case of using a machine at home, the uptime of that machine will dictate if you are online. To maximize it means to spend time and resources on obtaining dedicated hardware, configuring software and performing your own backups. Again, not something that appeals to an end-user.\n\nWith P2P software, the problems above disappear because they are created to serve the end-user by design.\n\n## Introducing Project Swarm ##\n\nEnough of ranting, off to the main point. My daily internet routine consists of interaction with the following services:\n\n - Web Surfing \n - Microblogging\n - Instant Messaging\n - Permanent Messaging (Email)\n - Online File storage and retrieval\n - Social networking\n - Appointment and task tracking\n - Code repository\n\nSo far, I can tackle them with the following P2P solutions on Project Swarm:\n\n - Web Surfing: [ZeroNet](https://zeronet.io), [I2P](https://geti2p.net)\n - Microblogging: [ZeroNet](https://zeronet.io)\n - Instant Messaging: [Tox](https://tox.im), [ZeroNet](https://zeronet.io)\n - Permanent Messaging (Email): [Bitmessage](https://www.bitmessage.org), [ZeroNet](https://zeronet.io)\n - Online File storage and retrieval: [IPFS](https://ipfs.io), Torrenting\n - Social networking: [ZeroNet](https://zeronet.io), [I2P](https://geti2p.net)\n - Appointment and task tracking: *none so far...*\n - Code repository: *none so far...*\n\nOf course, today Project Swarm is still very limited, for P2P is a movement that just now is gathering strength and popularity, and I still rely on decentralized blogging services to spread the word on my findings. However, it gives me a good idea on how well I can get around in just P2P, and the areas that need improvement. ZeroNet and I2P turned out to be good jacks-of-all-trades as a platform, but specific services still might need to be built on them. \n\n## Where we go from here ##\n\nMaking P2P more popular and known is the way to victory. The more people start using them, the more bandwidth the service gets and more content pours in. This is a good starting point for everybody.\n\nIf you know of a P2P service worthy joining the Swarm, by all means let me know! The project's got to expand.\n\n## Selected further reading material ##\n\n - List of many P2P services available today: https://github.com/kgryte/awesome-peer-to-peer\n - [Chimo](https://sn.chromic.org/chimo)'s similar self-hosting project, which in turn inspired me to name this one: https://chromic.org/blog/project-autonomous/"
		},
		{
			"post_id": 8,
			"title": "Trying out BitMessage to replace email",
			"date_published": 1448932794.576,
			"body": "I'm on a roll now trying out all P2P solutions that I can find. It's like I'm in a game and every P2P system I try is another powerup I collect. My latest? [Bitmessage](https://bitmessage.org). You can message me here:\n\n`BM-2cTfdPokxEpcVXiUFPmDQ7YHYq1LKwHxki`\n\n**Bitmessage** seems to be a very welcome replacement to stupid old email. *What? Replace email? Are you crazy?* you might say, but no, I'm perfectly sober right now. And currently I see two major flaws about email that are yet to be fixed even after a whopping [40 years of development history](https://en.wikipedia.org/wiki/Email#ARPANET_mail).\n\n---\nFirst, **email just isn't secure from a privacy point of view**: your plaintext email is as private as a *postcard*. Don't give me this crap that user agreements with the right service providers (such as [Riseup](https://riseup.net)) state that they won't read your email content: I'm talking about what you *can* do, not what you *promise not to do*. And besides, sharing your message with some unintended third party is as easy as pushing the `forward` button. \n\nAnd this is true for encrypted email as well: thought you were smart by encrypting a message before sending it? The recipient might just as well forward the decrypted message instead. And let's not forget about good old *metadata*, the bulk of the messaging context that even to this day simply has no way of being handled well cryptographically - not even the subject line!\n\nSecond flaw is that service providers give out the **false impression that your communications are secure** with email. Because after all, it's Gmail; Google's a big company, right? It's got to be secure, or otherwise so many people wouldn't be using it! I even have use two-factor authentication sometimes!\n\nIt really appalls me that so many people misunderstand the nature of email, how email actually works: really, it's just a piece of text with some interpreted fields! Just because it's hosted somewhere secure doesn't mean that your communications can't end up in the wrong hands. If your flaming cleartext email got forwarded to someone you didn't intend to, you simply can't take it back. There is no way to unsend an email, no matter how much [some people think it's possible](http://www.ehow.com/how_8388643_unsend-email-outlook.html)\n\n## The alternative ##\n\nIn the light of the above, Bitmessage may not be a perfect solution, but at least it solves both of the flaws I listed. P2P means my messages don't rely on some central server that may or not read them. And the encryption is set up in a way that you don't ever even have to think about it: just write the message to an address, and only that address can read it. It's that simple! It's the way that email should've been set up.\n\nI will be trying to collect as many Bitmessage addresses as I can to try to replace my emailing needs. I'll see how it goes after a few weeks."
		},
		{
			"post_id": 7,
			"title": "Customizing my ZeroNet life",
			"date_published": 1448822195.932,
			"body": "Despite my absence in posting to ZeroNet lately, I haven't been idle these days. I guess that one just cannot keep coming up with great posts every day, right [TheOatmeal](http://theoatmeal.com/comics/making_things)?\n\n![kzimmermann](https://s3.amazonaws.com/theoatmeal-img/comics/making_things/11.jpg)\n\nRegardless, I've been researching a little more on how to customize my experience around ZeroNet to make it better, more familiar and dynamic to my tastes. So here are a few things that I've learned and modified on my blog to suit my needs:\n\n## CSS and JS files ##\n\nThose were the basics: with my background of webdesign and development, I was able to change some of the choices of styling and formatting of the default ZeroBlog app to better suit my tastes. For example, I hate white backgrounds (they are hard on the eyes) so I changed my color scheme to something a little more relaxing. You can find them in the `/css` and `/js` folders of your site respectively.\n\nIt wasn't difficult at all: for most cases, the workflow was simply discovering the elements on the page with Firefox's `F12` key, looking up the styling line in the CSS file and then changing it accordingly. The only tricky bit is that All ZeroNet sites add an [extra frame](https://zeronet.readthedocs.org/en/latest/site_development/zeroframe_api_reference/) to any page which may cause some confusion. [Here's an example](test.html), where a static page gets the frame regardless\n\n## Custom subapps and pages ##\n\nI haven't read all the specs on how do the ZeroNet sites work and talk to each other (I will soon, though, these are interesting) but in the meantime I fiddled around with the idea of having a distinct home page and then linking from there to this blog. \n\nZeroNet allows relative linking just like in a web server so creating a new static page is as easy as `vim newpage.html`. The \"dynamic\" portion of the content, it seems, is fed into the page by the `content.json` file and through SQLite (?) database files that you can see lying around the `/data` folder. How the interaction works I'm not so sure yet, but it looks like it's done through AJAX on page-load time, since ZeroNet is so Javascript-heavy.\n\nI haven't taken this bit very far, but I did create a few [separate pages](test.html) to try it out. If this turns out to be possible, I can make this ZeroNet site my own homepage, linking it to the public internet through a proxy. And if I can develop a simple messaging app, who knows? Maybe I can even create a \"contact me\" form or something that gets it right to my email.\n\n## Other ##\n\nI finally got around an [old problem that I used to have in Zeroid.bit](http://127.0.0.1:43110/Talk.ZeroNetwork.bit/?Topic:2_1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/Test+messages) and now am able to post replies and use an identity in ZeroNet. This means that I can interact a lot easier with the remaining community (instead of just me posting things and shouting to the wind) which is great.\n\nPerhaps this signals a great new era for me in ZeroNet, especially if I can export and use my private key elsewhere, like when I'm browsing through a proxY!"
		},
		{
			"post_id": 6,
			"title": "How can I convince someone to stop using plaintext communications?",
			"date_published": 1448498049.825,
			"body": "*Seriously, how do I do that?* \n\nI'm not instructing anything in this post; I'm asking *you* a question. I'm asking because I frankly don't have the slightest clue about how can I do it anymore. I've tried convincing people with all arguments I could come up with, but they all shrug it off like it's superfluous or just some paranoia.\n\nLet me provide a little background.\n\nMy friend told me a few days ago that she might have a stalker following her around in virtual life. She's the daughter of a mid-level executive of a famous company that's currently under a highly publicized media scandal, with the media screaming around every time it so much steps outside the line. Now, her father doesn't have anything to do with the issues being publicized, but to the eyes of the general public that matters little.\n\nI already had advised her to start using **encryption** in her communications. Encrypted email was the first thing I recommended, but when she waved it off saying it was \"too compicated\" (which, in hindsight, might be for the complete beginner), I showed her the following:\n\n - XMPP with OTR through the [Xabber](https://www.xabber.com/) mobile app\n - Encrypted SMS messages through [SMSSecure](https://smssecure.org/)\n - P2P encrypted messaging and calling through [Tox](https://tox.chat)\n\nI didn't even venture into the issue of proprietary social networks, and the tracking by corporations; I kept the focus only in her personal direct communication means. And yet it wasn't enough. She said this was not needed, as that nobody would be able to read her messages or emails anyway. When I objected that a determined attacker did have the means to intercept her communications, she answered this:\n\n\"*Ah, but they can't do that. That would be illegal. Like, you need a judge's warrant for that.*\"\n\nOh yeah?\n\nAfter you have been assaulted, raped or murdered, does it matter if your attacker found where you live or work illegally? \n\nWhen you're being held a hostage for a ransom of few grands from your family, does it matter if the kidnapper found your location from your whatsapp chats without asking a judge's permission? \n\nWhen your bank account suddenly has a thousand dollars missing, does it matter if the thief read the number and password from your plaintext email to your partner without asking if you were ok with it?\n\n**Illegal doesn't imply impossible.** Especially when you don't care or are aware of the law. There's a side much bigger to encryption than just having privacy or confidentiality. Depending on your situation, not using it may risk your own or someone else's *life*. \n\nShe wasn't even convinced by these examples, and after this I simply gave up. When will people realize that encrypted communications are not simply a thing of secrecy, but rather a necessity in today's highly electronic world?"
		},
		{
			"post_id": 5,
			"title": "A simple cypher written in C++",
			"date_published": 1448324224.417,
			"body": "I wrote a simple [Rotating Substitution Cypher](https://en.wikipedia.org/wiki/Substitution_cipher) engine in C++ that can be used to encode and decode simple messages without raising much suspicion - messages end up looking like an \"alien language\" instead of encrypted. You can find it in my **NotABug** repository, here:\n\nhttps://notabug.org/kzimmermann/quickcypher\n\nThis is by no means a substitute to strong encryption, but rather a fun side project that you can use to jumble messages around. And if you create a complex enough cypher, I think the encoding can become fairly hard to solve. Here's a [demonstration](https://notabug.org/kzimmermann/quickcypher/src/master/ExampleEncoded.md) of the program.\n\nSuggested applications:\n\n - Encoding a message for a friend (not whistleblower-ready!)\n - Creating **strong passwords** from simple, memorable words (as long as your cypher is complex enough)\n - Encoding already encrypted ASCII-padded messages so as to make **decryption by brute force harder**\n\nHope you guys enjoy it!"
		},
		{
			"post_id": 4,
			"title": "Problems that can be avoided by using p2p",
			"date_published": 1448156689.022,
			"body": "Usually, when you start hosting a web-based service, you have to start worrying about some things like these:\n\n - Availability\n - Scalability\n - Backups and contingency plans\n - Resilience\n - Quality of Service\n\nIt can be a real pain in the ass having to monitor your servers on a constant basis because there's always a possibility that the service will be lost for some time. Some people choose to *self-host* to minimize the effort into getting their hands into the server if it goes down. Do you know what is a better solution? Using **P2P** instead.\n\nWith P2P, all the problems listed above are irrelevant. Availability and resilience are supported and growing by the number of nodes that choose to host your content (this also makes it a good motivation for one to produce interesting content that people would like to host as well). Your data is backed up among the peers. You want to talk about scalability in P2P? P2P is the very *essence* of it: everyone who joins the network brings in extra storage, bandwidth and processing power so sites scale up naturally in performance.\n\nBy hosting a ZeroNet blog, for example, I don't have to worry about leaving my machine on an entire day while I'm off to work, and risk having it crash, overheat and burn the whole house. Content is pushed, peers get an update and the content stays available regardless of my own machine.\n\nP2P represents a paradigm shift for the old adage of \"server-client\" model, and the idolization of 100% uptime service management. We can flip over the definition and make a world where everything is client-client instead."
		},
		{
			"post_id": 3,
			"title": "I seriously need to get back to ZeroNet",
			"date_published": 1448071463.937,
			"body": "There's a perpetual problem with the hosting within the mainstream internet: even if you're self-hosting, you still need to think about availability, resilience, quality of service... all of which **reduce to nothing** when you go full P2P.\n\nSeriously, dude, ZeroNet and the rest of the P2P networks are the future."
		},
		{
			"post_id": 2,
			"title": "Darknets as a platform for hosting and publishing",
			"date_published": 1443209747.381,
			"body": "I am considering the ways that zeronet and other darknets could be used to enhance the word of self-publishing. Who knows? Maybe this could become the next generation of blogging, microblogging or even a full social network."
		},
		{
			"post_id": 1,
			"title": "Klaus Zimmermann discovers ZeroNet",
			"date_published": 1433033779.604,
			"body": "So this is [Klaus Zimmermann](https://quitter.se/kzimmermann) exploring around ZeroNet and other Darknets.\n\nWonder if there are more interesting things to do around here!"
		}
	]
}