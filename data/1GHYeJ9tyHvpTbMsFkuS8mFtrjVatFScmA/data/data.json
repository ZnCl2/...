{
	"title": "NeoBlog",
	"description": "不以物喜，不以己悲。",
	"links": "- [ZeroNet源码](https://github.com/HelloZeroNet)\n\n- [博客配置小技巧](http://127.0.0.1:43110/1GHYeJ9tyHvpTbMsFkuS8mFtrjVatFScmA/?Post:1)\n\n- [v2ray代理](http://127.0.0.1:43110/1GHYeJ9tyHvpTbMsFkuS8mFtrjVatFScmA/?Post:2)",
	"next_post_id": 6,
	"demo": false,
	"modified": 1485165400,
	"post": [
		{
			"post_id": 5,
			"title": "DOS命令",
			"date_published": 1485165281.127,
			"body": "概念:批处理就是运用一些含有特殊意义的符号和一些完成指定功能的命令组合而成\n\n##命令介绍（不区分大小写）:\n>1、REM 和 ::\n     REM为注释命令，一般用来给程序加上注解，该命令后的内容不被执行，但能回显。\n     其次, :: 也可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意：\n    <一>\n     1)、任何以冒号:开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容。\n   2)、有效标号： 冒号后紧跟一个以字母数字开头的字符串，goto语句可以识别。\n     3)、无效标号： 冒号后紧跟一个非字母数字的一个特殊符号，goto无法识别的标号，可以起到注释作用，所以 :: 常用作注释符号，其实 :+ 也可以起注释作用。\n     <二>\n     1)、与rem 不同的是, :: 后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态,   因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys   文件中。\n>2、ECHO 和 @\n   ECHO打开回显或关闭回显功能，或显示消息。如果没有任何参数，echo 命令将显示当前回显设置。\n     @字符放在命令前将关闭该命令回显，无论此时echo是否为打开状态\n     语法：echo [{ on | off }] [message]\n     echo. #此用法将显示一空行，相当于回车，非常有用。\n     执行echo off 将关闭回显，它后面的所有命令都不显示命令本身，只显示执行后的结果，除非执行命令echo on 命令。\n     执行@echo off 不但关闭以后命令的回显，连echo off 命令本身也不显示了，通常以@echo off 作为批处理程序的首行。\n     一般以echo message 来显示一个特定的消息。\n     如: \n          @Echo off\n          Echo hello\n          Pause\n          运行显示：hello\n>3、PAUSE\n     在这里就是停止系统命令的执行并显示下面的内容。\n     如：\n     Pause\n     运行显示：请按任意键继续. . .\n     要显示其他提示语，可以这样用：\n     Echo 其他提示语 & pause > nul\n>4、errorlevel\n     程序返回码\n     echo %errorlevel%\n     每个命令运行结束，可以用这个命令行格式查看返回码，用于判断刚才的命令是否执行成功。   默认值为0，一般命令执行出错会设 errorlevel 为1。\n>5、title\n     返回CMD窗口的标题\n     title新标题 #可以看到cmd窗口的标题栏变了\n>6、COLOR\n     设置默认的控制台前景和背景颜色。\n     COLOR [attr]\n          attr 指定控制台输出的颜色属性\n     颜色属性由两个16进制数字指定 -- 第一个为背景，第二个为前景。\n     数字代表颜色代码：\n     \n      0 = 黑色    8 = 灰色      1 = 蓝色    9 = 淡蓝色\n      2 = 绿色    A = 淡绿色      3 = 湖蓝色     B = 淡浅绿色\n      4 = 红色    C = 淡红色      5 = 紫色    D = 淡紫色\n      6 = 黄色    E = 淡黄色      7 = 白色    F = 亮白色\n    \n     如果没有给定任何参数，该命令会将颜色还原到 CMD.EXE 启动时的颜色。这个值来自当前控制台窗口、/T 开关或  DefaultColor 注册表值。\n     如果用相同的前景和背景颜色来执行 COLOR 命令，COLOR 命令会将 ERRORLEVEL 设置为 1。\n     例如: \"COLOR fc\" 在亮白色上产生亮红色\n>7、mode配置系统设备\n     配置系统设备\n     串行口:　 MODE COMm[:] [BAUD=b] [PARITY=p] [DATA=d] [STOP=s]\n                    [to=on|off] [xon=on|off] [odsr=on|off][octs=on|off] [dtr=on|off|hs][rts=on|off|hs|tg] [idsr=on|off\n     设备状态:          MODE [device] [/STATUS]\n     打印重定向:　　 MODE LPTn[:]=COMm[:]\n     选定代码页:　　 MODE CON[:] CP SELECT=yyy\n     代码页状态:　　 MODE CON[:] CP [/STATUS]\n     显示模式:　　     MODE CON[:] [COLS=c] [LINES=n]\n     击键率:　          MODE CON[:] [RATE=r DELAY=d]\n     例mode con cols=113 lines=15 & color 9f  此命令设置DOS窗口大小：15行，113列\n>8、goto 和 :\n     GOTO会点编程的朋友就会知道这是跳转的意思。\n     在批处理中允许以“:XXX”来构建一个标号，然后用GOTO XXX跳转到标号:XXX处，然后执行标号后的命令。\n      例：\n      if {%1}=={} goto noparms\n      if \"%2\"==\"\" goto noparms\n      标签的名字可以随便起，但是最好是有意义的字符串啦，前加个冒号用来表示这个字符串是标签，goto命令就是根据这个冒号（:）来寻找下一步跳到到那里。最好有一些说明这样你别人看起来才会理解你的意图啊。\n      例：\n     @echo off\n      :start\n      set /a var+=1\n      echo %var%\n      if %var% leq 3 GOTO start\n      pause\n      运行显示：\n      1\n      2\n      3\n      4\n>9、find\n     在文件中搜索字符串。\n     FIND [/V] [/C] [/N] [/I] [/OFF[LINE]] \"string\" [[drive:][path]filename[\n      ...]]\n         /V        显示所有未包含指定字符串的行。\n         /C        仅显示包含字符串的行数。\n         /N        显示行号。\n         /I        搜索字符串时忽略大小写。\n         /OFF[LINE] 不要跳过具有脱机属性集的文件。\n         \"string\"   指定要搜索的文字串，\n         [drive:][path]filename           指定要搜索的文件。\n      如果没有指定路径，FIND 将搜索键入的或者由另一命令产生的文字。\n     Find常和type命令结合使用\n     Type [drive:][path]filename | find \"string\" [>tmpfile] #挑选包含string的行\n     Type [drive:][path]filename | find /v \"string\" #剔除文件中包含string的行\n     Type [drive:][path]filename | find /c #显示文件行数\n      以上用法将去除find命令自带的提示语（文件名提示）\n      例：\n     @echo off\n      echo 111 >test.txt\n      echo 222 >>test.txt\n      find \"111\" test.txt\n      del test.txt\n      pause\n      运行显示如下：\n      ---------- TEST.TXT\n      111\n      请按任意键继续. . .\n      例：\n      @echo off\n      echo 111 >test.txt\n      echo 222 >>test.txt\n      type test.txt|find \"111\"\n      del test.txt\n      pause\n      运行显示如下：\n      111\n      请按任意键继续. . .\n>10、start命令\n     批处理中调用外部程序的命令（该外部程序在新窗口中运行，批处理程序继续往下执行，不理会外部程序的运行状况），如果直接运行外部程序则必须等外部程序完成后才继续执行剩下的指令。\n      例：start explorer d:\\     # 调用图形界面打开D盘\n>11、assoc 和 ftype      \n       文件关联\n       assoc 设置'文件扩展名'关联，关联到'文件类型'\n       ftype 设置'文件类型'关联，关联到'执行程序和参数'\n       当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开\n       而是先判断.txt属于 txtfile '文件类型',再调用 txtfile 关联的命令行 txtfile=%SystemRoot%\\system32\\NOTEPAD.EXE %1可以在\"文件夹选项\"→\"文件类型\"里修改这2种关联\n      assoc           #显示所有'文件扩展名'关联\n      assoc .txt    #显示.txt代表的'文件类型'，结果显示 .txt=txtfile\n      assoc .doc    #显示.doc代表的'文件类型'，结果显示 .doc=Word.Document.8\n      assoc .exe    #显示.exe代表的'文件类型'，结果显示 .exe=exefile\n      ftype           #显示所有'文件类型'关联\n      ftype exefile #显示exefile类型关联的命令行，结果显示 exefile=\"%1\" %*\n      assoc .txt=Word.Document.8\n      设置.txt为word类型的文档，可以看到.txt文件的图标都变了\n      assoc .txt=txtfile    #恢复.txt的正确关联\n      ftype exefile=\"%1\" %*   # 恢复 exefile 的正确关联\n      如果该关联已经被破坏，可以运行 command.com ，再输入这条命令\n>12、pushd 和 popd\n       切换当前目录\n      @echo off\n      c: & cd\\ & md mp3    #在 C:\\ 建立 mp3 文件夹\n      md d:\\mp4             #在 D:\\ 建立 mp4 文件夹\n      cd /d d:\\mp4          #更改当前目录为 d:\\mp4\n      pushd c:\\mp3          #保存当前目录，并切换当前目录为 c:\\mp3\n      popd                    #恢复当前目录为刚才保存的 d:\\mp4\n      一般用处不大，在当前目录名不确定时，会有点帮助。（dos编程中很有用）\n>13、CALL\n      CALL命令可以在批处理执行过程中调用另一个批处理，当另一个批处理执行完后，再继续执行原来的批处理\n      CALL [drive:][path]filename [batch-parameters] 调用的其它批处理程序。filename 参数必须具有 .bat 或 .cmd 扩展名。\n      CALL :label arguments 调用本文件内命令段，相当于子程序。被调用的命令段以标签:label开头      以命令goto :eof结尾。\n      另外，批脚本文本参数参照(%0、%1、等等)已如下改变:\n          批脚本里的 %* 指出所有的参数(如 %1 %2 %3 %4 %5 ...)\n          批参数(%n)的替代已被增强。您可以使用以下语法:（看不明白的直接运行后面的例子）\n            %~1       - 删除引号(\")，扩充 %1\n            %~f1        - 将 %1 扩充到一个完全合格的路径名\n            %~d1        - 仅将 %1 扩充到一个驱动器号\n            %~p1        - 仅将 %1 扩充到一个路径\n            %~n1        - 仅将 %1 扩充到一个文件名\n            %~x1        - 仅将 %1 扩充到一个文件扩展名\n            %~s1        - 扩充的路径指含有短名\n            %~a1        - 将 %1 扩充到文件属性\n            %~t1        - 将 %1 扩充到文件的日期/时间\n            %~z1        - 将 %1 扩充到文件的大小\n            %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1扩充到找到的第一个完全合格的名称。如果环境 变量名未被定义，或者没有找到文件，此组合键会扩充到空字符串      可以组合修定符来取得多重结果:\n             %~dp1    - 只将 %1 扩展到驱动器号和路径\n             %~nx1    - 只将 %1 扩展到文件名和扩展名\n             %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1，并扩展到找到的第一个文件的驱动器号和路径。\n             %~ftza1     - 将 %1 扩展到类似 DIR 的输出行。\n      在上面的例子中，%1 和 PATH 可以被其他有效数值替换。%~ 语法被一个有效参数号码终止。%~ 修定符不能跟 %*使用\n      注意：参数扩充时不理会参数所代表的文件是否真实存在，均以当前目录进行扩展\n      要理解上面的知识，下面的例子很关键。\n      例：\n      @echo off\n      Echo 产生一个临时文件 > tmp.txt\n      Rem 下行先保存当前目录，再将c:\\windows设为当前目录\n      pushd c:\\windows\n      Call :sub tmp.txt\n      Rem 下行恢复前次的当前目录\n      Popd\n      Call :sub tmp.txt\n      pause\n      Del tmp.txt\n      :sub\n      Echo 删除引号： %~1\n      Echo 扩充到路径： %~f1\n      Echo 扩充到一个驱动器号： %~d1\n      Echo 扩充到一个路径： %~p1\n      Echo 扩充到一个文件名： %~n1\n      Echo 扩充到一个文件扩展名： %~x1\n      Echo 扩充的路径指含有短名： %~s1\n      Echo 扩充到文件属性： %~a1\n      Echo 扩充到文件的日期/时间： %~t1\n      Echo 扩充到文件的大小： %~z1\n      Echo 扩展到驱动器号和路径：%~dp1\n      Echo 扩展到文件名和扩展名：%~nx1\n      Echo 扩展到类似 DIR 的输出行：%~ftza1\n      Echo.\n      Goto :eof\n>14、shift\n       更改批处理文件中可替换参数的位置。\n     SHIFT [/n]    如果命令扩展名被启用，SHIFT 命令支持/n 命令行开关；该命令行开关告诉 命令从第 n 个参数开始移位；n 介于零和八之间。例如:\n     SHIFT /2会将 %3 移位到 %2，将 %4 移位到 %3，等等；并且不影响 %0 和 %1。\n>15、IF\n      IF 条件判断语句，语法格式如下：\n      IF [NOT] ERRORLEVEL number command\n      IF [NOT] string1==string2 command\n      IF [NOT] EXIST filename command\n      下面逐一介绍，更详细的分析请看后面章节。\n      (1) IF [NOT] ERRORLEVEL number command\n      IF ERRORLEVEL这个句子必须放在某一个命令的后面，执行命令后由IF ERRORLEVEL 来判断命令的返回值。\n      Number的数字取值范围0~255，判断时值的排列顺序应该由大到小。返回的值大于等于指定的值时，条件成立\n      例：\n      @echo off\n      dir c:\n      rem退出代码为>=1就跳至标题1处执行，>=0就跳至标题0处执行\n      IF ERRORLEVEL 1 goto 1\n      IF ERRORLEVEL 0 goto 0\n      Rem 上面的两行不可交换位置，否则失败了也显示成功。\n      :0\n      echo 命令执行成功！\n      Rem 程序执行完毕跳至标题exit处退出\n      goto exit\n      :1\n      echo 命令执行失败！\n      Rem 程序执行完毕跳至标题exit处退出\n      goto exit\n      :exit\n      pause\n      运行显示：命令执行成功！\n      (2) IF [NOT] string1==string2 command\n      string1和string2都为字符的数据，英文内字符的大小写将看作不同，这个条件中的等于号必须是两个（绝对相等的意思）\n      条件相等后即执行后面的command\n      检测当前变量的值做出判断，为了防止字符串中含有空格，可用以下格式\n      if [NOT] {string1}=={string2} command\n      if [NOT] [string1]==[string2] command\n      if [NOT] “string1”==“string2” command\n      这种写法实际上将括号或引号当成字符串的一部分了，只要等号左右两边一致就行了，比如下面的写法就不行：\n      if {string1}==[string2] command\n      (3) IF [NOT] EXIST filename command\n      EXIST filename为文件或目录存在的意思\n      echo off\n      IF EXIST autoexec.bat echo 文件存在！\n      IF not EXIST autoexec.bat echo 文件不存在！\n      这个批处理大家可以放在C盘和D盘分别执行，看看效果\n>16、setlocal 与 变量延迟\n      要想进阶，变量延迟是必过的一关！所以这一部分希望你能认真看。\n      为了更好的说明问题，我们先引入一个例子。\n     例1:\n      @echo off\n      set a=4\n      set a=5 & echo %a%\n      pause\n      结果：4\n    解说：为什么是4而不是5呢？在echo之前明明已经把变量a的值改成5了？\n    让我们先了解一下批处理运行命令的机制：\n    批处理读取命令时是按行读取的（另外例如for命令等，其后用一对圆括号闭合的所有语句也当作一行），在 处理之前要完成必要的预处理工作，这其中就包括对该行命令中的变量赋值。我们现在分析一下例1，批处理  在运行到这句“set a=5 & echo %a%”之前，先把这一句整句读取并做了预处理——对变量a赋了值，那么%a%当然就是4了！（没有为什么，批处理就是这样做的。） 而为了能够感知环境变量的动态变化，批处理设计了变量延迟。简单来说，在读取了一条完整的语句之后，不 立即对该行的变量赋值，而会在某个单条语句执行之前再进行赋值，也就是说“延迟”了对变量的赋值。那么如何开启变量延迟呢？变量延迟又需要注意什么呢？举个例子说明一下：\n      例2:  @echo off\n      setlocal enabledelayedexpansion\n      set a=4\n      set a=5 & echo !a!\n      pause\n    结果：5\n    解说：启动了变量延迟，得到了正确答案。变量延迟的启动语句是“setlocal      enabledelayedexpansion”，并且变量要用一对叹号“!!”括起来（注意要用英文的叹号），否则就没有变量延迟的效果。\n    分析一下例2，首先“setlocal enabledelayedexpansion”开启变量延迟，然后“set a=4”先给变量a赋值为 4，“set a=5 & echo !a!”这句是给变量a赋值为5并输出（由于启动了变量延迟，所以批处理能够感知到动态变化，即不是先给该行变量赋值，而是在运行过程中给变量赋值，因此此时a的值就是5了）。\n      再举一个例子巩固一下。\n      例3:\n      @echo off\n      setlocal enabledelayedexpansion\n      for /l %%i in (1,1,5) do (\n      set a=%%i\n )\n      pause\n      结果：\n      1\n      2\n      3\n      4\n      5\n    解说：本例开启了变量延迟并用“!!”将变量扩起来，因此得到我们预期的结果。如果不用变量延迟会出现什 么结果呢？结果是这样的：\n      ECHO 处于关闭状态。\n      ECHO 处于关闭状态。\n      ECHO 处于关闭状态。\n      ECHO 处于关闭状态。\n      ECHO 处于关闭状态。\n      即没有感知到for语句中的动态变化。\n\n符号:\n      1、@   命令行回显屏蔽符\n      2、%   批处理变量引导符\n      3、> 重定向符\n      4、>>   重定向符\n      5、<、>&、<& 重定向符\n      6、|   命令管道符\n      7、^   转义字符\n      8、&   组合命令\n      9、&& 组合命令\n      10、||   组合命令\n      11、\"\"   字符串界定符\n      12、, 逗号\n      13、; 分号\n      14、() 括号\n      15、! 感叹号\n      16、批处理中可能会见到的其它特殊标记符: （略）\n             CR(0D) 命令行结束符\n             Escape(1B) ANSI转义字符引导符\n             Space(20) 常用的参数界定符\n             Tab(09) ; = 不常用的参数界定符\n             + COPY命令文件连接符\n             * ? 文件通配符\n             / 参数开关引导符\n             : 批处理标签引导符\n\n      1、@   命令行回显屏蔽符\n      这个字符在批处理中的意思是关闭当前行的回显。我们从前几课知道 ECHO OFF可以关闭掉整个批处理命令的回显，但不能关掉ECHO OFF这个命令，现在我们在ECHO OFF这个命令前加个@，就可以达到所有命令均不回显的要求\n      2、%   批处理变量引导符\n      这个百分号严格来说是算不上命令的，它只是批处理中的参数而已（多个%一起使用的情况除外，以后还将详细介绍）。 引用变量用%var%，调用程序外部参数用%1至%9等等\n  %0  %1  %2  %3  %4  %5  %6  %7  %8  %9  %*为命令行传递给批处理的参数\n      %0 批处理文件本身，包括完整的路径和扩展名\n      %1 第一个参数  %9 第九个参数  %* 从第一个参数开始的所有参数\n      参数%0具有特殊的功能，可以调用批处理自身，以达到批处理本身循环的目的，也可以复制文件自身等等。\n      例：最简单的复制文件自身的方法\n      copy %0 d:\\wind.bat\n      3、> 重定向符\n      输出重定向命令   这个字符的意思是传递并且覆盖，他所起的作用是将运行的结果传递到后面的范围（后边可以是文件，也可以是默认的系统控制台）\n      在NT系列命令行中，重定向的作用范围由整个命令行转变为单个命令语句，受到了命令分隔符&,&&,||和语句块的制约限制。\n      比如：\n      使用命令：echo hello >1.txt将建立文件1.txt，内容为”hello “（注意行尾有一空格）\n      使用命令：echo hello>1.txt将建立文件1.txt，内容为”hello“（注意行尾没有空格）\n      4、>>   重定向符\n      输出重定向命令   这个符号的作用和>有点类似，但他们的区别是>>是传递并在文件的末尾追加，而>是覆盖     用法同上\n      同样拿1.txt做例子\n      使用命令：\n      echo hello > 1.txt\n      echo world >>1.txt\n      这时候1.txt 内容如下:\n      hello\n      world\n      5、<、>&、<& 重定向符\n      这三个命令也是管道命令，但它们一般不常用，你只需要知道一下就ok了，当然如果想仔细研究的话，可以自己查一下资料。(本人已查过，网上也查不到相关资料)\n      <，输入重定向命令，从文件中读入命令输入，而不是从键盘中读入。\n      @echo off\n      echo 2005-05-01>temp.txt\n      date <temp.txt\n      del temp.txt\n      这样就可以不等待输入直接修改当前日期\n      >&，将一个句柄的输出写入到另一个句柄的输入中。\n      <&，刚好和>&相反，从一个句柄读取输入并将其写入到另一个句柄输出中。\n常用句柄：0、1、2，未定义句柄：3—9\n      1>nul 表示禁止输出正确的信息\n      2>nul 表示禁止输出错误信息。\n      其中的1与2都是代表某个数据流输入输出的地址（NT CMD 称之为句柄，MSDOS称之为设备）。\n      句柄0：标准输入stdin，键盘输入\n      句柄1：标准输出stdout，输出到命令提示符窗口（console，代码为CON）\n      句柄2：标准错误stderr，输出到命令提示符窗口（console，代码为CON）\n      其中的stdin可被<重定向，stdout可被>、>>重定向，而stderr在DOS下不可直接重定向，只有通过ctty或其它命令将系统控制权转交给其它设备的方式，来间接完成。\n      6、|   命令管道符\n   格式：第一条命令 | 第二条命令 [| 第三条命令...]\n   将第一条命令的结果作为第二条命令的参数来使用，记得在unix中这种方式很常见。\n   例如： dir c:\\|find \"txt\"\n      以上命令是：查找C：\\所有，并发现TXT字符串。\n      FIND的功能请用 FIND /? 自行查看   在不使format的自动格式化参数时，我是这样来自动格式化A盘的      echo y|format a: /s /q /v:system\n      用过format的都知道，再格盘时要输入y来确认是否格盘，这个命令前加上echo y并用|字符来将echo y的结果传给format命令 从而达到自动输入y的目的（这条命令有危害性，测试时请慎重）\n      7、^   转义字符\n      ^是对特殊符号<,>,&的前导字符，在命令中他将以上3个符号的特殊功能去掉，仅仅只把他们当成符号而不使用他们的特殊意义。\n      比如\n      echo test ^>1.txt\n      结果则是：test > 1.txt\n      他没有追加在1.txt里。只是显示了出来。另外，此转义字符还可以用作续行符号。\n      举个简单的例子：\n      @echo off\n      echo 英雄^\n      是^\n      好^\n      男人\n      pause\n      不用多说，自己试一下就明白了。\n      8、&   组合命令\n      语法：第一条命令 & 第二条命令 [& 第三条命令...]\n      &、&&、||为组合命令，顾名思义，就是可以把多个命令组合起来当一个命令来执行。这在批处理脚本里是允许的，而且用的非常广泛。因为批处理认行不认命令数目。这个符号允许在一行中使用2个以上不同的命令，当第一个命令执行失败了，也不影响后边的命令执行。 这里&两边的命令是顺序执行的，从前往后执行。\n      比如：      dir z:\\ & dir y:\\ & dir c:\\\n      以上命令会连续显示z,y,c盘的内容，不理会该盘是否存在\n      9、&& 组合命令\n      语法：第一条命令 && 第二条命令 [&& 第三条命令...]\n      用这种方法可以同时执行多条命令，当碰到执行出错的命令后将不执行后面的命令，如果一直没有出错则一直执行完所有命令。这个命令和上边的类似，但区别是，第一个命令失败时，后边的命令也不会执行  dir z:\\ && dir y:\\ && dir c:\\\n      10、||   组合命令\n      语法：第一条命令 || 第二条命令 [|| 第三条命令...]\n    用这种方法可以同时执行多条命令，当一条命令失败后才执行第二条命令，当碰到执行正确的命令后将不执行后面的命令，如果没有出现正确的命令则一直执行完所有命令；\n    提示：组合命令和重定向命令一起使用必须注意优先级\n   管道命令的优先级高于重定向命令，重定向命令的优先级高于组合命令\n   问题：把C盘和D盘的文件和文件夹列出到a.txt文件中。你将如何来搞定这道题？有朋友说，这还不是很easy的问题吗？同时执行两个dir，然后把得到的结果>到a.txt里就ok了嘛，看例：    dir c:\\ && dir d:\\ > a.txt\n   仔细研究一下这句执行后的结果，看看是否能达到题目的要求！错了！这样执行后a.txt里只有D盘的信息！为什么？就因为这里&&命令和>命令不能同时出现一个句子里（批处理把一行看成一个句子）！！组合命令&&的优先级没有管道命令>的优先级高（自己总结的，不妥的地方请指正）！所以这句在执行时将本行分成这两部分：dir  c:\\和dir d:\\ > a.txt，而并不是如你想的这两部分：dir c:\\ && dir d:\\和> a.txt。要使用组合命令&&达到题目的要求，必须得这么写： dir c:\\ > a.txt && dir d:\\ >> a.txt   这样，依据优先级高低，DOS将把这句话分成以下两部分：dir c:\\ > a.txt和dir d:\\ >> a.txt。例十八中的几句的差别比较特殊，值得好好研究体会一下。\n   当然这里还可以利用&命令（自己想一下道理）：dir c:\\ > a.txt & dir d:\\ >> a.txt\n      11、\"\"   字符串界定符\n      双引号允许在字符串中包含空格，进入一个特殊目录可以用如下方法\n      cd \"program files\"\n      cd progra~1\n      cd pro*\n      以上三种方法都可以进入program files这个目录\n      12、, 逗号\n      逗号相当于空格，在某些情况下“,”可以用来当做空格使\n      比如      dir,c:\\\n      13、; 分号\n      分号，当命令相同时，可以将不同目标用；来隔离，但执\n行效果不变，如执行过程中发生错误，则只返回错误报告，但程序仍会执行。（有人说不会继续执行，其实测试一下就知道了）\n      比如： dir c:\\;d:\\;e:\\;z:\\\n      以上命令相当于\n      dir c:\\\n      dir d:\\\n      dir e:\\\n      dir f:\\\n      如果其中z盘不存在，运行显示：系统找不到指定的路径。然后终止命令的执行。\n      例：dir c:\\;d:\\;e:\\1.txt\n      以上命令相当于\n      dir c:\\\n      dir d:\\\n      dir e:\\1.txt\n     其中文件e:\\1.txt不存在，但e盘存在，有错误提示，但命令仍会执行。\n     为什么？如果目标路径不存在，则终止执行；如果路径存在，文件不存在，则继续执行。\n   14、() 括号\n  小括号在批处理编程中有特殊的作用，左右括号必须成对使用，括号中可以包括多行命令，这些命令将被看成一个整体，视为一条命令行。\n   括号在for语句和if语句中常见，用来嵌套使用循环或条件语句，其实括号()也可以单独使用，请看例子。\n      例：  命令：echo 1 & echo 2 & echo 3\n      可以写成：\n      (\n      echo 1\n      echo 2\n      echo 3\n      )\n      上面两种写法效果一样，这两种写法都被视为是一条命令行。\n      注意：这种多条命令被视为一条命令行时，如果其中有变量，就涉及到变量延迟的问题。\n      15、! 感叹号\n      没啥说的，在变量延迟问题中，用来表示变量，即%var%应该表示为!var!，请看前面的setlocal命令介绍。\n"
		},
		{
			"post_id": 4,
			"title": "ZeroNet脱坑笔记",
			"date_published": 1483535562.856,
			"body": "#ZeroNet 脱坑笔记\n\n>**这篇文章主要介绍了我的一些ZeroNet分布式网络使用并搭建网页的经验之谈。**\n\n### 首先来了解几个名词？\n\n>分布式网络\n\n分布式我估计很多人都知道了，看名字的意思就知道，分布，分布？就是分散的意思吗，对，没错，就是分散的意思。最先提出来的是计算机中的一种算法，把复杂的计算，分成若干个小模块，小部分来分别计算。然后把这些部分分配给许多计算机进行处理，最后把这些计算结果综合起来得到最终的结果。而现在又出现分布式和集群的概念。可以这样理解，分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务，而分布式的每隔节点可以做一个集群，集群而不一定是分布式。简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。\n\n分布式网络是由分布在不同地点且具有多个终端的节点机互连而成的。分散网络也称“分布式网络”（Distributed Networks）。它与中央控制式网络系统相对应，是一套全新的网络系统。\n\n**优点:**\n\n分布式网络与中央控制式网络对应，它没有中心，因而不会因为中心遭到破坏而造成整体的崩溃。在分布式网络上，节点之间互相连接，数据可以选择多条路径传输。\n\n**缺点：**\n\n不利于集中管理。安全性不好控制。\n\n>比特币（BitCoin）\n\n比特币（BitCoin）的概念最初由中本聪在2009年提出，根据中本聪的思路设计发布的开源软件以及建构其上的P2P网络。比特币是一种P2P形式的数字货币。点对点的传输意味着一个去中心化的支付系统。\n\n是一种全球通用的加密互联网货币。与采用中央服务器开发的第一代互联网不同，比特币采用点对点网络开发的区块链，打开第二代互联网的广泛应用。\n\n和法定货币相比，比特币没有一个集中的发行方，而是由网络节点的计算生成，谁都有可能参与制造比特币，而且可以全世界流通，可以在任意一台接入互联网的电脑上买卖，不管身处何方，任何人都可以挖掘、购买、出售或收取比特币，并且在交易过程中外人无法辨认用户身份信息。2009年，不受央行和任何金融机构控制的比特币诞生。比特币是一种“电子货币”，由计算机生成的一串串复杂代码组成，新比特币通过预设的程序制造，随着比特币总量的增加，新币制造的速度减慢，直到2140年达到2100万个的总量上限，被挖出的比特币总量已经超过1200万个。详细信息请Google,维基百科等。\n\n\n>加密技术\n\n对称加密和非对称加密，有了这个密码学加密基础，比特币可以很好的在网络流通。\n\n>P2P网络\n\nP2P不要理解错了，不是什么P2P借贷，网络借贷，P2P理财。点对点网络（peer-to-peer），一种网络技术和网络拓扑结构。数据的传输采用点对点的传输。\n\n对等式网络（peer-to-peer， 简称P2P），又称点对点技术，是无中心服务器、依靠用户群（peers）交换信息的互联网体系，它的作用在于，减低以往网络传输中的节点，以降低数据丢失的风险。与有中心服务器的中央网络系统不同，对等网络的每个用户端既是一个节点，也有服务器的功能，任何一个节点无法直接找到其他节点，必须依靠其户群进行信息交流。\n\n相应的诞生点对点传输协议（point-to-point）\n\n>BitTorrent (协议)\n\nBitTorrent协议（简称BT，俗称比特洪流、BT下载）是用在对等网络中文件分享的网络协议程序。和点对点（point-to-point）的协议程序不同，它是用户群对用户群（peer-to-peer），而且用户越多，下载同一文件的人越多，下载该档案的速度越快。且下载后，继续维持上传的状态，就可以“分享”，成为其用户端节点下载的种子文件（.torrent），同时上传及下载。\n\n**原理:**\n\n普通的HTTP／FTP下载使用TCP/IP协议，BitTorrent协议是架构于TCP/IP协议之上的一个P2P文件传输协议，处于TCP/IP结构的应用层。\n\n自由网（Freenet）是对等网络的一个应用软件。用Java编写的跨平台软件，有5个以上节点的用户群，就可以用宽带分享种子文件，组成独立的网络系统。主要应用在匿名互联网领域，如海盗湾、维基解密、丝绸之路等。\n\n###ZeroNet\n\nZeroNet 是一个以P2P用户为基础而构成的类互联网的分布式网络。ZeroNet使用了比特币加密技术和BitTorrent网络。[官方网址](https://zeronet.io/) 和 [代码托管](https://github.com/HelloZeroNet/ZeroNet)\n\n>**支持的平台:**\n\n- [Microsoft Windows](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-win.zip)\n- [Apple OS X](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-mac-osx.zip)\n- [Linux 64bit](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-linux64.tar.gz)\n- [Linux 32bit](https://github.com/HelloZeroNet/ZeroBundle/raw/master/dist/ZeroBundle-linux32.tar.gz)\n\n>**运行:**\n\n- Win：ZeroNet.cmd\n- OSX：ZeroNet(.app) \n- Linux：ZeroNet.sh\n\n至于详细的安装过程，使用过程，我就不说了，每个文件夹的作用，有官方文档查看。\n\n###**我说下我遇到问题：**\n\n以Windows为例:\n\n程序包下载之后可以直接解压，会得到如下这样的文件夹目录。\n\n![](http://i.imgur.com/qQS2LfO.jpg)\n\n由于是Python语言开发的，所以需要一些Python支持的包。你点击zeronet.cmd批处理文件，会生成ZeroNet的文件夹。而我们的工作目录也在ZeroNet文件夹中。看ZeroNet文件夹的文件:\n\n![](http://i.imgur.com/cCIHfBH.jpg)\n\n具体的什么作用，不用管，我也就不细说。Docker构建文件在Dockerfile文件。\n\nsrc源码，tools一些外部工具，如tor,(暗网)也叫匿名网络，如需访问需要下载tor浏览器，并且在中国的网络环境下需要科学上网，翻墙之类，代理之类的。plugins插件文件夹。log运行日志。data是我们主要关心的目录，存放了我们的重要数据。打开data文件夹如下:\n\n![](http://i.imgur.com/n3VIpG2.jpg)\n\n有一个users.json文件，需要我们保存备份。重要文件，有你的很多重要信息。如:私钥。\n\n备份之前，我们需要进入特殊网站，也就是这种网结构构成的网络，如:\n\n地址就是：http://127.0.0.1:43110/1GHYeJ9tyHvpTbMsFkuS8mFtrjVatFScmA/\n\n没错就是上面的结构，这种结构就是网站结构，你没有看错。\n\n这是我随便构建的一个网站。\n\n![](http://i.imgur.com/smMQoRl.jpg)\n\n你需要到ZeroID网址:http://127.0.0.1:43110/zeroid.bit/注册一个你自己的ID号，身份名称。或者去:http://127.0.0.1:43110/zeroverse.bit/这个网址也可以注册。\n\n注册完成，你需要建站或者做个实验什么的，你可以去克隆别人已经弄好的网址。然后以自己的身份登入，如下图:\n\n![](http://i.imgur.com/98gzoHw.jpg)\n\n右上角有个0的图标，按住图标往左拉，就是进入前端控制面板，web界管理界面。如果点击就是回到默认的首页。点击的克隆的网址，然后往左拉，用你注册的身份登入，有一些站点设置啊，文件的更新重载啊，自己摸索吧。\n\n现在去备份users.json文件吧。记得关注我哦。网址:http://127.0.0.1:43110/yanghua.bit/\n\n你一定很好奇上面的网址yanghua.bit的域名怎么来的。本来是这种格式:http://127.0.0.1:43110/1GHYeJ9tyHvpTbMsFkuS8mFtrjVatFScmA/\n\n怎么把生成的网页地址address变成我的域名形式呢？\n\n>首先\n\n你需要打开http://127.0.0.1:43110/Mail.ZeroNetwork.bit/获取一个自己的邮箱。\n\n你可以到这个网址https://bitmsg.me/去注册一个邮箱地址，回得到这样的一个邮箱地址:\n\n`BM-2cTJJJqRZyZDd8Z5PVYGF5Byn77JrJiAHP`这是我的邮箱，欢迎打扰。如下图:\n\n![](http://i.imgur.com/hCey8MA.jpg)\n\n然后你给这个地址发邮件:\n\n`BM-2cVddUzqe4DWCGorpXUXAUh2SwyD5S9ByU`\n\n![](http://i.imgur.com/0hqajR7.jpg)\n\nDomain：你需要的域名，自己随便取，怎么判断你取的域名有没有人用呢？去这个网站https://dotbit.me/检测下，CHECK一下。\n\nZeronet Site：就是你的站点地址。\n\nNamecoin receive address:是你的比特币钱包收款地址，安装Namecoin的时候会自动生成一个地址，在收款地址中。\n\n![](http://i.imgur.com/YTD0ek3.jpg)\n\n下载地址:https://namecoin.org/download/\n\n发送之后会在24小时之内给你回信，并域名生效。\n\n>**配置域名:**\n\n![](http://i.imgur.com/xX9hry8.jpg)\n\n在你的contents.json下添加domain就好。\n\n有什么不懂的就发邮件吧！bitmessage。"
		},
		{
			"post_id": 3,
			"title": "Netdata实现web监控",
			"date_published": 1483192478.794,
			"body": "#Netdata 是一款 Linux 性能实时监测工具。\n\nNetdata是一个高度优化的Linux守护进程，它为Linux系统，应用程序，SNMP服务等提供实时的性能监测。\n\n##Netdata是Linux系统实时性能监测工具，提供web界面的界面视角\n\n它用可视化的手段，将被监测者最细微的细节，展现了出来。这样，你便可以清晰地了解你的系统和应用程序此时的状况。\n\n---\n\n1. 优美的界面：bootstrap框架下的控制界面\n\n1. 自定义的控制界面：你可以使用简单的HTML代码去自定义控制界面(不需要使用javascript)\n\n1. 极其的快速而高效：程序使用C进行编写(默认安装下，预计只有2%的单核CPU使用率和少许的内存使用率)\n\n1. 零配置：你只需要去安装它，接着它就会自动地监测一切数据\n\n1. 零依赖：它的静态网络文件和网络接口拥有自己的网络服务器\n\n1. 可扩展：用它自身的插件API(可以使用许多方式来制作它的插件，从bash到node.js),你可以检测任何可以衡量的数据。\n\n1. 可嵌入：它可以在任何Linux内核可以运行的地方运行\n\n>监测内容：\n\n这是它目前检测的内容（大多数都不需要进行配置，安装后即可开始监测）\n\n\t1.CPU的使用率,中断，软中断和频率(总量和每个单核)\n\t2.RAM，互换和内核内存的使用率（包括KSM和内核内存deduper）\n\t3.硬盘输入/输出(每个硬盘的带宽，操作，整理，利用等)\n\t4.IPv4网络（数据包，错误，分片）：\n\tTCP：连接，数据包，错误，握手\n\tUDP:数据包，错误\n\t广播：带宽，数据包\n\t组播：带宽，数据包\n\t5.Netfilter/iptables Linux防火墙(连接，连接跟踪事件，错误等)\n\t6.进程(运行，受阻，分叉，活动等)\n\t7.熵\n\t8.NFS文件服务器，v2,v3,v4(输入/输出，缓存，预读，RPC调用)\n\t9.网络服务质量（唯一一个可实时可视化网络状况的工具）\n\t10.应用程序，通过对进程树进行分组（CPU,内存，硬盘读取，硬盘写入，交换，线程，管道，套接字等）\n\t11.Apache Web服务器状态(v2.2, v2.4)\n\t12.Nginx Web服务器状态\n\t13.Mysql数据库（多台服务器，单个显示：带宽，查询/s, 处理者，锁，问题，临时操作，连接，二进制日志，线程，innodb引擎等）\n\t14.ISC Bind域名服务器（多个服务器，单个显示：客户，请求，查询，更新，失败等）\n\t15.Postfix邮件服务器的消息队列（条目，大小）\n\t16.Squid代理服务器（客户带宽和请求，服务带宽和请求）\n\t17.硬件传感器（温度，电压，风扇，电源，湿度等）\n\t18.NUT UPSes（负载，充电，电池电压，温度，使用指标，输出指标）\n\n你可以监测任意数量的SNMP服务，不过你需要进行配置\n\n你可以对此软件进行扩展，可以使用任何语言编写插件，以此来从任何来源收集数据\n\n二：安装(CentOS)\n\n`1.版本netdata-1.0.0.tar.gz(http://firehol.org/download/netdata/releases/v1.0.0/)`\n\n2.安装依赖插件\n\n`yum install zlib-devel gcc make git autoconf autogen automake pkgconfig`\n\n3.安装 netdata\n\n\t`tar -zxvf netdata-1.0.0.tar.gz`\n\t`./netdata-installer.sh --install /usr/local`\n\n安装成功后可以看到`/usr/local/netdata/etc/netdata/netdata.conf`配置文件\n\n三：启动与关闭\n1.启动：`/usr/local/netdata/usr/sbin/netdata`\n2.关闭：`killall netdata`"
		},
		{
			"post_id": 2,
			"title": "v2ray代理",
			"date_published": 1483186948.123,
			"body": "V2Ray是一个优秀且开源的网络代理工具，可以帮助你自由的使用互联网，目前已经全平台支持\n\tWindows、Mac、Android、IOS、Linux等操作系统的使用。相对起Shadowsocks来说属于后起之\n\t秀，在混淆能力、兼容性、速度上有着独到的优点。\n\n---\n\n{% blockquote %}\nV2Ray是一个优秀且开源的网络代理工具\n{% endblockquote %}\n\n<!-- more -->\n\n>**一、V2Ray介绍**\n\n*V2Ray 是一个模块化的代理软件包，它的目标是提供常用的代理软件模块，简化网络代理软件的开发。*\n\n新加入流式传输协议mKCP，可以有效的提升传输速度。作者更新非常勤快，相信在今后可以带来更多令人期待的新特性，使V2Ray的性能和安全性得到不断提升。对此感兴趣的可以可以去[Github上star](https://github.com/v2ray/v2ray-core \"Github上star\")这个项目，也可以捐助鼓励开发者更积极的工作。\n\nV2Ray的运行需要服务端和客户端的相互支持，所以也就需要安装配置服务端和客户端，这个过程并不是很简单，需要付出你的一点点努力才能完成，所以我在这里分享出我的使用经验，与君共勉。\n\n所需工具：\n\n1. 境外的VPS\n1. 电脑，手机等硬件设备\n1. 有一定的命令行基础\n\n>**二、服务端搭建过程**\n\n2-1自动安装脚本（推荐）\n\n目前自动安装脚本支持所有主流系统，只需一行命令即可完成安装过程，当你想要更新V2Ray的时候同样只需要运行下面一行命令即可。\n\nV2Ray 提供了一个在 Linux 中的自动化安装脚本。这个脚本会自动检测有没有安装过 V2Ray，如果没有，则进行完整的安装和配置；如果之前安装过 V2Ray，则只更新 V2Ray 二进制程序而不更新配置。\n\n以下指令假设已在 su 环境下，如果不是，请先运行 sudo su。\n\n运行下面的指令下载并安装 V2Ray。当 yum 或 apt-get 可用的情况下，此脚本会自动安装 unzip 和 daemon。这两个组件是安装 V2Ray 的必要组件。如果你使用的系统不支持 yum 或 apt-get，请自行安装 unzip 和 daemon\n\n`bash <(curl -L -s https://install.direct/go.sh)`\n\n此脚本会自动安装以下文件：\n\n1. `/usr/bin/v2ray/v2ray`：V2Ray 程序；\n2. `/etc/v2ray/config.json`：配置文件；\n\n此脚本会配置自动运行脚本。自动运行脚本会在系统重启之后，自动运行 V2Ray。目前自动运行脚本只支持带有 Systemd 的系统，以及 Debian / Ubuntu 全系列。\n\n运行脚本位于系统的以下位置：\n\n1. `/lib/systemd/system/v2ray.service: Systemd`\n2. `/etc/init.d/v2ray: SysV`\n\n脚本运行完成后，你需要：\n\n1. 编辑 /etc/v2ray/config.json 文件来配置你需要的代理方式；\n2. 运行 service v2ray start 来启动 V2Ray 进程；\n3. 之后可以使用 service v2ray start|stop|status|reload|restart|force-reload 控制 V2Ray 的运行。\n\n>**go.sh 参数**\n\ngo.sh 支持如下参数，可在手动安装时根据实际情况调整：\n\n1. `-p` 或 `--proxy`: 使用代理服务器来下载 V2Ray 的文件，格式与 curl 接受的参数一致，比如 `\"socks5://127.0.0.1:1080\"` 或 `\"http://127.0.0.1:3128\"`。\n2. `-f` 或 `--force`: 强制安装。在默认情况下，如果当前系统中已有最新版本的 V2Ray，go.sh 会在检测之后就退出。如果需要强制重装一遍，则需要指定该参数。\n3. `--version`: 指定需要安装的版本，比如 `\"v1.13\"`。默认值为最新版本。\n4. `--local`: 使用一个本地文件进行安装。如果你已经下载了某个版本的 V2Ray，则可通过这个参数指定一个文件路径来进行安装。\n\n**用例**\n\n- 使用地址为 127.0.0.1:1080 的 SOCKS 代理下载并安装最新版本：`./go.sh -p socks5://127.0.0.1:1080`\n- 安装本地的 v1.13 版本：`./go.sh --version v1.13 --local /path/to/v2ray.zip`\n\n>**2-2手动安装**\n\n如果你不能使用自动安装或者安装失败，那么可以尝试手动安装，这里列出主要过程，并附上详细说明（这里的配置文件`“vpoint_vmess_freedom.json”`对应自动安装脚本中的`/etc/v2ray/config.json`，二者完全相同）：\n\n\t$ wget 下载链接\n\t$ unzip v2ray*.zip\n\t$ cd v2ray*\n\t$ chmod +x v2ray\n\t$ ./v2ray -config vpoint_vmess_freedom.json\n\n首先SSH连接上自己的VPS，然后到[*Releases*](https://github.com/v2ray/v2ray-core/releases \"Releases\")找到适合自己VPS系统的版本，在下载链接上右键复制链接。然后切回SSH窗口，输入命令 wget 下载链接 进行下载，下载完成后使用 `unzip xxx.zip` 以解压文件，接着使用 `cd v2ray*` 命令进入解压出的文件夹。\n\n首先使用`vim vpoint_vmess_freedom.json`命令编辑配置文件，其实ID和端口如果图省事可以不换（大雾），如果想要换掉ID可以使用`Online UUID Generator`这个网站生成。注：`*服务端的ID需要和客户端保持一致*`。\n\n不过想要需要支持Shadownsocks，还需要再进行配置。顺便一提，Shadowsocks的端口配置支持1000-1010这种形式的多端口配置。可以参考官方文档Shadoowsocks配置样例。\n\n\t \"inboundDetour\": [\n\t    {\n\t      \"protocol\": \"shadowsocks\",\n\t      \"port\": 30001, // 监听 30001 端口\n\t      \"settings\": {\n\t        \"method\": \"aes-256-cfb\", \n\t        \"password\": \"v2ray\",     // 密码，必须和客户端相同\n\t        \"udp\": false             // 是否开启 UDP 转发\n\t      }\n\t    }\n\t  ]\n\n注意在使用时需要删掉注释，接着把这段配置粘贴进配置文件中，端口、密码可以适当修改。修改好后保存，使用 `chmod +x v2ray` 给它加上执行权限，之后可以通过`./v2ray -h`查看使用方法，或者直接通过 `sudo ./v2ray -config vpoint_vmess_freedom.json` 执行就成了。\n\n\t{\n\t\t\"log\" : {\n\t\t\t\"access\": \"/var/log/v2ray/access.log\",\n\t\t\t\"errot\": \"/var/log/v2ray/error.log\",\n\t\t\t\"loglevel\": \"warning\"\n\t\t},\n\t\t\"inbound\": {\n\t\t\t\"port\":29313,\n\t\t\t\"protocol\": \"vmess\",\n\t\t\t\"settings\": {\n\t\t\t\t\"clients\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": \"793ec6a3-02df-420e-ace3-9bab1f9b3a13\",\n\t\t\t\t\t\t\"level\": 1,\n\t\t\t\t\t\t\"alterId\": 64\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"inboundDetour\": [\n\t\t\t{\n\t\t\t\t\"protocol\": \"shadowsocks\",\n\t\t\t\t\"port\": 30001\n\t\t\t\t\"settings\": {\n\t\t\t\t\t\"method\": \"aes-256-cfb\",\n\t\t\t\t\t\"password\": \"v2ray\",\n\t\t\t\t\t\"udp\": false\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t\t\"outbound\": {\n\t\t\t\"protocol\": \"freedom\",\n\t\t\t\"settings\": {}\n\t\t},\n\t}\n\nShadowsocks支持的加密方法有aes-256-cfb、aes-128-cfb、chacha20（推荐）、chacha20-ietf。\n\n到这里还没有完全完成，因为在关闭SSH窗口时，V2Ray也就关闭了，所以需要让它维持后台运行。\n\n\t$ sudo vim /etc/init.d/v2ray #创建配置文件并粘贴下列内容  \n\t#!/bin/sh\n\t### BEGIN INIT INFO\n\t# Provides:          v2ray\n\t# Required-Start:    $network $local_fs $remote_fs\n\t# Required-Stop:     $remote_fs\n\t# Default-Start:     2 3 4 5\n\t# Default-Stop:      0 1 6\n\t# Short-Description: socksv5 based proxy written by go.\n\t# Description:       v2ray is a socksv5 proxy written by go. Connection can be crypto by aes or\n\t#            des. this might help for people in China to corss GFW.\n\t### END INIT INFO\n\t\n\t# Author: Shell Xu <shell909090@gmail.com>\n\t# Modify: Isulew Li <netcookies@gmail.com>\n\t\n\t# PATH should only include /usr/* if it runs after the mountnfs.sh script\n\tPATH=/sbin:/usr/sbin:/bin:/usr/bin  \n\tDESC=v2ray             # Introduce a short description here  \n\tNAME=v2ray             # Introduce the short server's name here  \n\tDAEMON=/usr/bin/v2ray  #这里改成v2ray程序的绝对路径\n\tPIDFILE=/var/run/$NAME.pid  \n\tLOGFILE=/var/log/$NAME.log  \n\tSCRIPTNAME=/etc/init.d/$NAME\n\t\n\tDAEMON_OPTS=\"-config /etc/v2ray/config.json\" #这里改成配置文件绝对路径\n\t\n\t# Exit if the package is not installed\n\t[ -x $DAEMON ] || exit 0\n\t\n\t# Read configuration variable file if it is present\n\t[ -r /etc/default/$NAME ] && . /etc/default/$NAME\n\t\n\t# Load the VERBOSE setting and other rcS variables\n\t. /lib/init/vars.sh\n\t\n\t# Define LSB log_* functions.\n\t# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.\n\t. /lib/lsb/init-functions\n\t\n\t#\n\t# Function that starts the daemon/service\n\t#\n\tdo_start()  \n\t{\n\t    # Return\n\t    #   0 if daemon has been started\n\t    #   1 if daemon was already running\n\t    #   2 if daemon could not be started\n\t    #   3 if configuration file not ready for daemon\n\t    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \n\t        || return 1\n\t    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --background \n\t         --no-close -m -- $DAEMON_OPTS >> $LOGFILE 2>&1 \n\t        || return 2\n\t    chmod -f 600 $LOGFILE\n\t    # Add code here, if necessary, that waits for the process to be ready\n\t    # to handle requests from services started subsequently which depend\n\t    # on this one.  As a last resort, sleep for some time.\n\t}\n\t\n\t#\n\t# Function that stops the daemon/service\n\t#\n\tdo_stop()  \n\t{\n\t    # Return\n\t    #   0 if daemon has been stopped\n\t    #   1 if daemon was already stopped\n\t    #   2 if daemon could not be stopped\n\t    #   other if a failure occurred\n\t    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE\n\t    RETVAL=\"$?\"\n\t    [ \"$RETVAL\" = 2 ] && return 2\n\t    # Wait for children to finish too if this is a daemon that forks\n\t    # and if the daemon is only ever run from this initscript.\n\t    # If the above conditions are not satisfied then add some other code\n\t    # that waits for the process to drop all resources that could be\n\t    # needed by services started subsequently.  A last resort is to\n\t    # sleep for some time.\n\t    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON\n\t    [ \"$?\" = 2 ] && return 2\n\t    # Many daemons don't delete their pidfiles when they exit.\n\t    rm -f $PIDFILE\n\t    return \"$RETVAL\"\n\t}\n\t\n\t#\n\t# Function that sends a SIGHUP to the daemon/service\n\t#\n\tdo_reload() {  \n\t    #\n\t    # If the daemon can reload its configuration without\n\t    # restarting (for example, when it is sent a SIGHUP),\n\t    # then implement that here.\n\t    #\n\t    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE\n\t    return 0\n\t}\n\t\n\tcase \"$1\" in  \n\t  start)\n\t    [ \"$VERBOSE\" != no ] && log_daemon_msg \"Starting $DESC \" \"$NAME\"\n\t    do_start\n\t    case \"$?\" in\n\t        0|1) [ \"$VERBOSE\" != no ] && log_end_msg 0 ;;\n\t        2) [ \"$VERBOSE\" != no ] && log_end_msg 1 ;;\n\t    esac\n\t  ;;\n\t  stop)\n\t    [ \"$VERBOSE\" != no ] && log_daemon_msg \"Stopping $DESC\" \"$NAME\"\n\t    do_stop\n\t    case \"$?\" in\n\t        0|1) [ \"$VERBOSE\" != no ] && log_end_msg 0 ;;\n\t        2) [ \"$VERBOSE\" != no ] && log_end_msg 1 ;;\n\t    esac\n\t    ;;\n\t  status)\n\t       status_of_proc \"$DAEMON\" \"$NAME\" && exit 0 || exit $?\n\t       ;;\n\t  reload|force-reload)\n\t    #\n\t    # If do_reload() is not implemented then leave this commented out\n\t    # and leave 'force-reload' as an alias for 'restart'.\n\t    #\n\t    log_daemon_msg \"Reloading $DESC\" \"$NAME\"\n\t    do_reload\n\t    log_end_msg $?\n\t    ;;\n\t  restart|force-reload)\n\t    #\n\t    # If the \"reload\" option is implemented then remove the\n\t    # 'force-reload' alias\n\t    #\n\t    log_daemon_msg \"Restarting $DESC\" \"$NAME\"\n\t    do_stop\n\t    case \"$?\" in\n\t      0|1)\n\t        do_start\n\t        case \"$?\" in\n\t            0) log_end_msg 0 ;;\n\t            1) log_end_msg 1 ;; # Old process is still running\n\t            *) log_end_msg 1 ;; # Failed to start\n\t        esac\n\t        ;;\n\t      *)\n\t        # Failed to stop\n\t        log_end_msg 1\n\t        ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    #echo \"Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}\" >&2\n\t    echo \"Usage: $SCRIPTNAME {start|stop|status|reload|restart|force-reload}\" >&2\n\t    exit 3\n\t    ;;\n\tesac\n\n在配置`/etc/init.d/v2ray`中只需要修改两个地方就可以了，一个是主程序位置，一个是配置文件位置，都需要使用绝对路径。`DAEMON=/usr/bin/v2ray`这里填入主程序位置，例如自己的程序在`/home/xxx/v2ray/v2ray`中，就需要完整的填入路径，这里的前一个v2ray为文件夹名，后一个v2ray为程序名。然后在`DAEMON_OPTS=\"-config /etc/v2ray/config.json\"`这行后面的位置改成自己的配置文件位置，就变成了`DAEMON_OPTS=\"-config /home/xxx/v2ray/vpoint_vmess_freedom.json`。\n\n配置好保存后需要执行下面两条命令使配置生效：\n\n\tsudo chmod +x /etc/init.d/v2ray #更改权限  \n\tsudo update-rc.d v2ray defaults #设置开机启动  \n\n>**三、客户端的使用**\n\n***3-1Windows***\n\n这里主要就是从之前的下载V2Ray服务端的网站，下载Windows抑或是其他适合自己目前系统的客户端（客户端和服务端是一体的），你也可以下载使用带有图形化界面的第三方客户端。在配置中如果没其他变动，配置文件中也就改个IP就能用了,原本IP也需要相同，但是如果服务端没有修改是默认的，那么客户端也无需修改。之后在浏览器也需要个扩展插件配合，Chrome的扩展Omega或者Firefox的Autoproxy，其中配置成socks 127.0.0.1:1080就好了。如果在服务端配置中还加上了Shadowsocks的支持，那么也可以直接使用Shadowsocks的客户端。\n\n***3-2安卓Android***\n\n开头就已经提到了，安卓上已经出了Actinium和实验版本的V2Ray这两个相关客户端了，可以直接去Google Play下载安装.\n\n我目前只使用Actinium所以讲述这款APP的使用方法，可惜目前两款APP均未实现图形化配置，所以需要下载Windows端的V2Ray，修改config.json中的ID、IP等配置后保存，若此配置可以在电脑端使用，就可以把此配置传输到手机中，打开之前安装好的APP Actinium，点击右上角打开菜单选择添加配置，通过文件管理器找到自己刚刚传送的配置文件后确认，命名后就可以起飞上网了~All done！\n\n>**四、遇到什么问题？**\n\n1）vps硬盘被v2ray的日志占满了。\n\n`/var/log/v2ray/error.log`的日志文件过大，这个不确定是否是普遍性的问题，但是我确实遇到过，可以通过修改`/etc/v2ray/config.json`中的\n\n\t \"log\" : {\n\t     \"access\": \"/var/log/v2ray/access.log\",\n\t     \"error\": \"/var/log/v2ray/error.log\",\n\n删除error，成下列内容：\n\n\t  \"log\" : {\n\t     \"access\": \"/var/log/v2ray/access.log\",\n\t     \"\": \"/var/log/v2ray/error.log\",\n\n修改保存后可以取消输出日志。我知道，这并不是一个好办法，不过可以暂时解决问题。"
		},
		{
			"post_id": 1,
			"title": "博客配置技巧",
			"date_published": null,
			"body": "※ 博客头像的切换\n1. 准备你的头像 LOGO 修改名称为 avatar.png 。\n2. 打开 ZeroBundle\\ZeroNet\\data\\博客ID\\img ，用你的头像 LOGO 替换原avatar.png 。\n---\n★ 文章如何插入图片？\n\n1. 把你的图片改成一个简单的名称，如：`1r.jpg`。然后把它放到 ZeroBundle\\ZeroNet\\data\\博客ID\\img 里。\n2. 在文章需要插入图片的地方以` ![image alt](img/1r.jpg) `形式插入。\n\n★ 如何设置首页文章不全文显示？而显示 \" Read More\" 或“\"阅读全文\" ?\n\n1. 在你需要的隐藏段落间输入 --- 。如有异常 --- 上下各空一行。\n2. 如要显示“\"阅读全文 ” 或其他文字：打开 `index.html`,查找`<a class=\"more\" href=\"#\"><span class='readmore'>Read More</span> →</a>` 将`Read More `改成你需要的文字。\n\n★ Zeroblog 设置链接新窗口打开的方法 。\n\n- <a href=\"链接地址\"target=\"_blank\">文本</a> 详细教程见<a herf=\"http://127.0.0.1:43110/1FRFyuWmfNKJHYFEMikmXmA7ToMiXTRZ6o/?Post:2\" target=\"_blank\">这里</a>\n\n★ 如何设置字体，字号，字体颜色和背景？\n\n- 请参考这篇文章第 10 条，<a herf=\"http://127.0.0.1:43110/mosen.bit/?Post:2\" target=\"_blank\">参考文章</a>\n\n★ 博客如何备份？\n\n1. 备份 ZeroBundle\\ZeroNet\\data\\users.json 这个文件就可以了。\n\n**特别注意：**\n\n2. 在ZeroNet中,能证明你是网站所有人的唯一方法就是你的Private Key, 所以无论如何也不能丢失...\n打开 \\ZeroBundle\\ZeroNet\\data 目录,找到users.json 之后找到你的网站地址,有一行 \"privatekey\": \"5K5qG**9ZtD431\"就是你的private key了,注意不要与 auth_privatekey 搞混了,只有属于你的网站才有privatekey这一栏目。将它放在一个安全的地方吧！（这里只是说privatekey很重，一般备份不能只备份privatekey，要备份 ZeroBundle\\ZeroNet\\data\\users.json 这个文件，因为这个文件还有ZeroID等其他重要帐号信息！！）\n\n##进阶教程：\n\n- <a href=\"http://127.0.0.1:43110/1HotJMoS9Z1v8UwDCmv3VDG3q88c5na8cZ/?Post:7\" target=\"_blank\"><font color=\"#FF7F00\" FONT-FAMILY: 宋体>博客修改指南</font></a>\n\ncodegeass 的文章，在这篇文章里可以学到：如何修改链接的颜色，按钮的颜色，博客的背景色，引用的样式 等。\n\n##更多相关文章：\n\n1. <a href=\"http://127.0.0.1:43110/1A2zwx1maY1fZv18vaEFFaCuiS88xqWvzV/?Post:4\" target=\"_blank\"><font color=\"#FF7F00\" FONT-FAMILY: 宋体>如何在ZeroNet搭建站点</font></a>\n\n2. <a href=\"http://127.0.0.1:43110/1FRFyuWmfNKJHYFEMikmXmA7ToMiXTRZ6o/?Post:2\" target=\"_blank\"><font color=\"#FF7F00\" FONT-FAMILY: 宋体>用Markdown 优雅的在 ZeroNet 上写文章</font></a>\n\n3. <a href=\"http://127.0.0.1:43110/1FRFyuWmfNKJHYFEMikmXmA7ToMiXTRZ6o/?Post:6\" target=\"_blank\"><font color=\"#FF7F00\" FONT-FAMILY: 宋体>ZeroNet系列——通过Tor使ZeroNet匿名</font></a>\n\n4. <a href=\"http://127.0.0.1:43110/gfwtalk.bit/?Topic:1_1NvuCEiBua5qhzxkBcgP5rd6iUtZ8goVuJ/+Lantern+Tor+ZeroNet+Debian+Ubuntu\" target=\"_blank\"><font color=\"#FF7F00\" FONT-FAMILY: 宋体>教程:Lantern + Tor + ZeroNet (Debian/Ubuntu)</font></a>\n"
		}
	]
}