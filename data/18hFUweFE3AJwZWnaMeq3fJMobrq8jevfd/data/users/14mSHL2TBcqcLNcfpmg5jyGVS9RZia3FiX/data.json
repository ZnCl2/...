{
	"pages": [
		{
			"id": "42fc3940-2a5a-11e9-973d-efd0295826be",
			"body": "# Default site organization\n\nStarting from the site top folder in a usual find you can find:\n* `content.json`: Main configuration file for a site structure\n* `dbschema.json`: Configuration file for the format of the user data json files to be inserted into the database\n* `data/users/content.json`: Contains the configuration for the user data (how much space is reserved to each user, banned users, which files they are allowed to post, and such things)\n* `data/users/*/content.json`: Contains the files that the user signed",
			"date_added": 1549490277077,
			"slug": "basics-of-site-organization"
		},
		{
			"id": "1d9fa8b0-2a25-11e9-9455-57697f962fda",
			"body": "# How to freeze an entire site user's content\n\nWhat follows is taken from [this ZeroTalk question's comment](/Talk.ZeroNetwork.bit/?Topic:1549416429_16dEowtNbV89NxPcDrAKkmnuXtiJVoVcDm#comment_27_1GooUE19488nDwG3TdkM8seYAHct4gjkq4).\n\nAs of now the procedure to freeze a site user's data is:\n0. You must be one of the owners of the site\n1. Make a backup of the site (i.e. copy the site folder to some other place to be able to restore it later if something bad happens. You can see how to [[Find ZN Folder]] into which to look for your site address)\n2. Find all the `data/users/*/content.json`'s and resign each one with the site owner key\n3. Delete `data/users/content.json`\n4. Delete `data/users/content.json` from the `include` section of the root `content.json`, and add in the same sections all of the `data/users/*/content.json`.\n5. Sign the root `content.json`\n6. Verify from another client that it has worked before removing the backup you made, otherwise you risk to loose some content.",
			"date_added": 1549467451068,
			"slug": "freeze-a-site-user39s-data"
		},
		{
			"id": "906aac10-2a24-11e9-a9bb-abbbddd00ca5",
			"body": "# Find the current site address\nYou can usually see it in the browser top bar, it starts with a 1 followed by 25 to 36 alphanumeric characters.\nIt looks like `18hFUweFE3AJwZWnaMeq3fJMobrq8jevfd`. **Upper and lowercase do matter**.\n\n## If you see the site name (e.g. `blog.zeronet.bit`)\nYou should then open [ZeroName](/1Name2NXVi1RDPDgf5617UoW7xA6YrhM9F) and search for the site name to find the correspondence with its address.\n\nAnother way to find the site address is to drag to the left the zero icon at the top right of one of the site's pages and scroll the sidebar until you find the field \"Site Address\".",
			"date_added": 1549467214162,
			"slug": "find-your-site-address"
		},
		{
			"id": "d20e5f50-2a23-11e9-b0ad-c9cb262a3445",
			"body": "# ZeroNet documentation for developers\nIn this wiki we collect various tutorials and documentation for ZeroNet functionalities.\nOur hope is that collaborative editing of the wiki will make it a very useful resource for all ZeroNet devs.\n\nThis is also a protest against ZeroNet non-existant documentation, a giant hole which we hope will be fixed soon.\n(Edit: maybe this is now changing thanks to anoa, that is writing [the new official documentation](https://zeronet.io/docs))\n\n**To contribute please read below the topic list.**\n\n## Cheat sheets: how to do things quickly\nAre you in a hurry and just want to know how to do a certain thing? This is the right section to look in.\n\n- [[Get a ZeroID account]]: useful to write in all public ZN places\n- [[Clone a site]]: start with you own basic blog or dicussion forum\n- [[Block a user or a site]]: do you hate someone and never want to see it again?\n- [[Ban a user from your site]] and never allow it to publish again\n- [[Change user quotas]] and allow more or less content to each one\n- [[Find ZN folder]], useful for backup and some operations on sites\n- [[Find your site address|Get a site address]] when you are visiting a page\n- [[Find the user public hash]] for a site if you know his ID\n- [[Delete some user content]] (only a specific post or comment)\n- [[Be completely anonymous]] in ZeroNet: the right way to set up TOR and why others do not work\n- [[Register .bit domain]] for your site\n- [[ZN Backup]]: how not to loose property of your sites and your IDs?\n- [[Restoring data]] from a taken backup\n- [[Help spread your site]]: some \"free hosting\" services\n\n## Tutorials for site owners\nIn this section you will find some tutorials that explain to a site owner how to manage some of things of his site:\n\n- [[Freeze a site user's data]]: Keep all existing content but disallow edits and new posts\n\n## Tutorials for site creators\nWhat follows are some tutorials spliced into Beginners, Medium and Advanced topics that will allow you to start create your own site-kind.\nMany of them are not yet written, so to really get developers started the series of tutorials by imachug called [[the truth about ZeroNet]] is really advised. They are a bit old (dating September 2017) but very good to start.\n\n### Beginners\nBasics of site organizations and of content publishing.\nBe aware that **basic tutorials are thought to be read in-order** because they may use something that is explained in previous ones.\n\n0. Basic overview of [[sites on ZN]] and what they can contain AKA can I use PHP?\n1. [[Deploying a static site]]\n2. [[Basics of site organization]] and folder structure\n3. [[Write your own ZeroBoard]]: a global guest log\n4. [[Write your own ZeroTalk]]: a simple forum\n5. [[Complete content guide]]: understand all nitty witty details of the various `content.json`\n6. [[Complete database guide]]: all details of `dbschema.json`\n\n### Medium\nThings that you need if you want to develop a medium complex site.\nThese tutorials can be read in no particular order, since they should talk about orthogonal features.\n**It is assumed that you have read and understand all basic tutorials.**\nYou may also be interested in reading the section \"ZN design and code details\" to gain a better understanding of some features.\n\n- [[Notify user]] about updates: the NewsFeed\n- [[Translating sites]] using the TranslateSite plugin\n- [[Write your own ZeroMe]] AKA basic guide to merged sites\n- [[Write your own real time chat]] using the PeerMessage plugin\n- [[Do task in Background]] using the BackgroundTask plugin\n- [[Use compressed archives]] as directories\n- [[Encrypting text]] with CryptMessage plugin\n- [[CORS]]: How to read other sites data\n- [[Write your own ZeroTube]] AKA how to use BigFiles and understand Optional Files\n- [[Write your own Certificate Authority]]\n\n### Advanced\nTopics that you may not even need, but they are here for the perfectionists.\n**Be aware that these topics may not include full source code, but only give you ideas and relevant parts of source**.\n\n- [[Ways to prevent spam]] from destroying your site\n- [[Content filtering]]: how to support full-text search in your site\n- [[Write your own Search Engine]] and the differents approach to it\n\n### Stairway to plugins\nEverything you must know about how to write a plugin. Some articles do not depend on the previous ones, but it may be better to read them in-order. Also the articles are very short, so it shouldn't take too much.\n\n1. [[Current plugin architecture]]: how to write a do-nothing plugin\n2. [[Plugin - Simple API command]]: expose a simple API command to the sites\n3. [[Plugin - Asking the user]]: ask a question to the user using standard prompts\n4. [[Plugin - Permissions]]: adding a new permission to ZeroNet\n5. [[Plugin - Adding translation]]: how to add translations to our messages\n6. [[Plugin - Intercepting file update]]: create your custom rules on json file update\n\nAfter having done all the basics of plugin, you should read [[description of ZeroNet main classes]] to better know how to structure your plugin.\n\n## ZN Design and code details\nPages that talk about **current** ZN design (please be sure to insert the version/revision you are talking about) and/or document tough code parts.\n\n- [[Site publishing mechanism]]: how do you \"own\" your site?\n- [[Site update details]]: what happens when you update a cloned site?\n- [[Censoring sites]]: to which extent are ZN sites censorable?\n- [[Certification Authorities]] in ZeroNet: little guide.\n- [[Currently available plugins]]: what do they serve and how are they written.\n- [[Description of ZeroNet main classes]]: know what the core classes do.\n- [[Backend spam prevention]]: currently taken precautions in ZN core.\n- [[ZeroFrame API Command]]: list of all commands.\n\n## Lists of useful developers resources\nPages that are lists of links to useful available resources and their sites.\n*This is NOT a list of known sites*: please do not insert personal blog when not relevant (i.e. almost only contain developer things) and do not use them for self-promoting. Spam won't be tollerated.\n\n- [[Available sitetypes]] that can be cloned and used instantly: avoid reinventing the wheel.\n- [[Developers Blog]] that have a **significant** amount of information about developing sites.\n- [[Available frameworks]] that help you write ZN sites.\n- [[Other documentation]] places, to find even more sources of information.\n\n## How to contribute\nIf you want to contribute please see [[Contributing Guidelines]]. Reading those can help maintaining a common style across the whole wiki and in turn help first-time users of the wiki to better understand what you have written.\n\n**Before inserting a link in the main page please write about it in the [discussion forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK).**\n\nIf you don't know what Markdown is, you can refer to the article [[Markdown from zero to hero]].\nThis will help you write good wiki pages.\n\n### Of course, but what can I do to contribute?\nYou have many available options to choose to:\n- Simply use the wiki and link to the relevant articles in discussion topics: this will help others know that this site exists.\n- Read the articles you may like to read and correct spelling or grammar errors, especially if your mothertongue is english. Also simplifying paragraphs is of big help, since many users may not have deep comprehension of the english language.\n- Correct logical errors in presentations, or add some historical notes about how such a thing was done before and why it has been changed.\n- Write new tutorial for something that you have done recently and had a lot of trouble to get done. It is especially useful to write what ways do not get you there and why, and to write the correct way to have it done.\n- Search for non-existent pages and write something clear about them.\n\nEvery contribution is always welcome, as long as it is done in good faith and is about ZN development.\nYou may even copy text from other sources, as long as you have permission from the author either explicitly or implicitly (i.e. the content is licensed under a Creative Commons compatible licence).",
			"date_added": 1549466894789,
			"slug": "home"
		},
		{
			"id": "ee1f3c40-05fd-11e9-a64b-1750b19292b8",
			"body": "# How to be really anonymous in ZeroNet\nThe rough steps are:\n1. Install tor on your PC\n2. In ZeroNet configuration set Tor=Always\n3. Delete your `data` folder (make a backup first), including the usernames you have used\n4. Start ZeroNet **in Tor Browser** (no Chrome / Firefox / Safari / Edge) and always use tor browser\n5. To get a ZeroID use BitMessage and don't use the standard UI\n\nNow we try to explain why some of the above steps are necessary:\n## 2. Setting Tor = Always\nIf you don't always connect using tor, some of the peers you connect to will know your IP address, which can be used to trace you geographically.\n\n## 3. Deleting the `data` folder\nFrom torrent trackers it is possible to see which peers are hosting which sites and these data can persist for a while when you switch to tor always mode, so that it is possible to detect who you are by looking at which sites you already have available.\n\nUsernames (ZeroIDs) must be delete for the same reason: they can lead to your previous identity.\n\n## 4. Only use Tor Browser\nSome malicious sites can use their Javascript to make requests to the cleanet that can be used to get your real IP address. Tor Browser explicitly denies such requests, while other browsers do not.\n",
			"date_added": 1545492379141,
			"slug": "be-completely-anonymous"
		},
		{
			"id": "61bc44e0-fd66-11e8-be50-a9eb2263b830",
			"body": "# Write your own ZeroTube\n## Understanding optional files\nIn a ZeroNet site there are two kind of files: regular ones and optional.\nRegular files are downloaded by every person that visits the site, while optional files are downloaded only when a user with some action (i.e. the javascript running in-browser) explicitly requires them.\n\nThis can be useful for example to store big user content (photos and videos) that not everyone would like to download when they first visit the site (both for storage concerns and for \"quality\" of content).\n\nTo \"enable\" optional files in your site, you need to add the key `optional` to your content.json (see the [[complete content guide]]) that specifies with a regular expression which files have to be considered optional.\n```json\n\"optional\": \"data/users/.*/optional/.*\"\n```\n\n## BigFile Plugin\nThe BigFile plugin allows to upload a file by chunking it into various pieces (of 1MB) to allow for more granular retrieval.\n\n### Uploading an optional file using BigFile\nA javascript example to upload optional files, taken directly from [ZeroFrame API Reference](https://zeronet.readthedocs.io/en/latest/site_development/zeroframe_api_reference).\n\n```javascript\nvar input = document.createElement('input')\ndocument.body.appendChild(input)\ninput.type = \"file\"\ninput.style.visibility = \"hidden\"\n\ninput.onchange = () => {\n    var file = input.files[0]\n    page.cmd(\"bigfileUploadInit\", [\"optional/\"+file.name, file.size], (init_res) => {\n        var formdata = new FormData()\n        formdata.append(file.name, file)\n\n        var req = new XMLHttpRequest()\n        req.upload.addEventListener(\"progress\", console.log)\n        req.upload.addEventListener(\"loadend\", () =>\n            page.cmd(\"wrapperConfirm\", [\"Upload finished!\", \"Open file\"],\n                () => { window.top.location = init_res.inner_path }\n            )\n        )\n        req.withCredentials = true\n        req.open(\"POST\", init_res.url)\n        req.send(formdata)\n    })\n}\ninput.click()\n```\n\n### Getting informations and downloading optional files\nTo get informations about an optional file you can use the command `optionalFileInfo` (see in [[ZeroFrame API Command]]) and to download it you can use `fileNeed`.\nThis way you can present to the user some data (for example number of peers that have the file) and then download it to show.\n\nBe sure to check also other commands in the OptionalManager plugin that could be very helpful.",
			"date_added": 1544547680302,
			"slug": "write-your-own-zerotube"
		},
		{
			"id": "8132d7f0-fd64-11e8-ab46-d10aa238af83",
			"body": "# Write your own certificate authority\n\nThis page is a stub.\nFor now we only link to [Nanasi implementation](/1MgHVPCE1ve6QfKrgsqCURzRj72HrRWioz/?16Szsy1UtjiXpEevWVdUDrNfNTAZ9PLbcY_33).",
			"date_added": 1544546874095,
			"slug": "write-your-own-certificate-authority"
		},
		{
			"id": "7ac751c0-fd64-11e8-ab46-d10aa238af83",
			"body": "# Write your own certificate authority\n\nThis page is a stub.\nFor now we only link to [Nanasi implementation](http://127.0.0.1:43110/1MgHVPCE1ve6QfKrgsqCURzRj72HrRWioz/?16Szsy1UtjiXpEevWVdUDrNfNTAZ9PLbcY_33).",
			"date_added": 1544546863325,
			"slug": "write-your-own-certificate-authority"
		},
		{
			"id": "f4a12030-fd63-11e8-9218-7ffb0b95bebf",
			"body": "# ZeroNet documentation for developers\nIn this wiki we collect various tutorials and documentation for ZeroNet functionalities.\nOur hope is that collaborative editing of the wiki will make it a very useful resource for all ZeroNet devs.\n\nThis is also a protest against ZeroNet non-existant documentation, a giant hole which we hope will be fixed soon.\n(Edit: maybe this is now changing thanks to anoa, that is writing [the new official documentation](https://zeronet.io/docs))\n\n**To contribute please read below the topic list.**\n\n## Cheat sheets: how to do things quickly\nAre you in a hurry and just want to know how to do a certain thing? This is the right section to look in.\n\n- [[Get a ZeroID account]]: useful to write in all public ZN places\n- [[Clone a site]]: start with you own basic blog or dicussion forum\n- [[Block a user or a site]]: do you hate someone and never want to see it again?\n- [[Ban a user from your site]] and never allow it to publish again\n- [[Change user quotas]] and allow more or less content to each one\n- [[Find ZN folder]], useful for backup and some operations on sites\n- [[Find your site address|Get a site address]] when you are visiting a page\n- [[Find the user public hash]] for a site if you know his ID\n- [[Delete some user content]] (only a specific post or comment)\n- [[Be completely anonymous]] in ZeroNet: the right way to set up TOR and why others do not work\n- [[Register .bit domain]] for your site\n- [[ZN Backup]]: how not to loose property of your sites and your IDs?\n- [[Restoring data]] from a taken backup\n- [[Help spread your site]]: some \"free hosting\" services\n\n## Tutorials\nWhat follows are some tutorials spliced into Beginners, Medium and Advanced topics.\nMany of them are not yet written, so to really get developers started the series of tutorials by imachug called [[the truth about ZeroNet]] is really advised. They are a bit old (dating September 2017) but very good to start.\n\n### Beginners\nBasics of site organizations and of content publishing.\nBe aware that **basic tutorials are thought to be read in-order** because they may use something that is explained in previous ones.\n\n0. Basic overview of [[sites on ZN]] and what they can contain AKA can I use PHP?\n1. [[Deploying a static site]]\n2. [[Basics of site organization]] and folder structure\n3. [[Write your own ZeroBoard]]: a global guest log\n4. [[Write your own ZeroTalk]]: a simple forum\n5. [[Complete content guide]]: understand all nitty witty details of the various `content.json`\n6. [[Complete database guide]]: all details of `dbschema.json`\n\n### Medium\nThings that you need if you want to develop a medium complex site.\nThese tutorials can be read in no particular order, since they should talk about orthogonal features.\n**It is assumed that you have read and understand all basic tutorials.**\nYou may also be interested in reading the section \"ZN design and code details\" to gain a better understanding of some features.\n\n- [[Notify user]] about updates: the NewsFeed\n- [[Translating sites]] using the TranslateSite plugin\n- [[Write your own ZeroMe]] AKA basic guide to merged sites\n- [[Write your own real time chat]] using the PeerMessage plugin\n- [[Do task in Background]] using the BackgroundTask plugin\n- [[Use compressed archives]] as directories\n- [[Encrypting text]] with CryptMessage plugin\n- [[CORS]]: How to read other sites data\n- [[Write your own ZeroTube]] AKA how to use BigFiles and understand Optional Files\n- [[Write your own Certificate Authority]]\n\n### Advanced\nTopics that you may not even need, but they are here for the perfectionists.\n**Be aware that these topics may not include full source code, but only give you ideas and relevant parts of source**.\n\n- [[Ways to prevent spam]] from destroying your site\n- [[Content filtering]]: how to support full-text search in your site\n- [[Write your own Search Engine]] and the differents approach to it\n\n### Stairway to plugins\nEverything you must know about how to write a plugin. Some articles do not depend on the previous ones, but it may be better to read them in-order. Also the articles are very short, so it shouldn't take too much.\n\n1. [[Current plugin architecture]]: how to write a do-nothing plugin\n2. [[Plugin - Simple API command]]: expose a simple API command to the sites\n3. [[Plugin - Asking the user]]: ask a question to the user using standard prompts\n4. [[Plugin - Permissions]]: adding a new permission to ZeroNet\n5. [[Plugin - Adding translation]]: how to add translations to our messages\n6. [[Plugin - Intercepting file update]]: create your custom rules on json file update\n\nAfter having done all the basics of plugin, you should read [[description of ZeroNet main classes]] to better know how to structure your plugin.\n\n## ZN Design and code details\nPages that talk about **current** ZN design (please be sure to insert the version/revision you are talking about) and/or document tough code parts.\n\n- [[Site publishing mechanism]]: how do you \"own\" your site?\n- [[Site update details]]: what happens when you update a cloned site?\n- [[Censoring sites]]: to which extent are ZN sites censorable?\n- [[Certification Authorities]] in ZeroNet: little guide.\n- [[Currently available plugins]]: what do they serve and how are they written.\n- [[Description of ZeroNet main classes]]: know what the core classes do.\n- [[Backend spam prevention]]: currently taken precautions in ZN core.\n- [[ZeroFrame API Command]]: list of all commands.\n\n## Lists of useful developers resources\nPages that are lists of links to useful available resources and their sites.\n*This is NOT a list of known sites*: please do not insert personal blog when not relevant (i.e. almost only contain developer things) and do not use them for self-promoting. Spam won't be tollerated.\n\n- [[Available sitetypes]] that can be cloned and used instantly: avoid reinventing the wheel.\n- [[Developers Blog]] that have a **significant** amount of information about developing sites.\n- [[Available frameworks]] that help you write ZN sites.\n- [[Other documentation]] places, to find even more sources of information.\n\n## How to contribute\nIf you want to contribute please see [[Contributing Guidelines]]. Reading those can help maintaining a common style across the whole wiki and in turn help first-time users of the wiki to better understand what you have written.\n\n**Before inserting a link in the main page please write about it in the [discussion forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK).**\n\nIf you don't know what Markdown is, you can refer to the article [[Markdown from zero to hero]].\nThis will help you write good wiki pages.\n\n### Of course, but what can I do to contribute?\nYou have many available options to choose to:\n- Simply use the wiki and link to the relevant articles in discussion topics: this will help others know that this site exists.\n- Read the articles you may like to read and correct spelling or grammar errors, especially if your mothertongue is english. Also simplifying paragraphs is of big help, since many users may not have deep comprehension of the english language.\n- Correct logical errors in presentations, or add some historical notes about how such a thing was done before and why it has been changed.\n- Write new tutorial for something that you have done recently and had a lot of trouble to get done. It is especially useful to write what ways do not get you there and why, and to write the correct way to have it done.\n- Search for non-existent pages and write something clear about them.\n\nEvery contribution is always welcome, as long as it is done in good faith and is about ZN development.\nYou may even copy text from other sources, as long as you have permission from the author either explicitly or implicitly (i.e. the content is licensed under a Creative Commons compatible licence).",
			"date_added": 1544546638260,
			"slug": "home"
		},
		{
			"id": "91f59a10-fd3b-11e8-9d17-b9deb8bad49a",
			"body": "# Available sitetypes that can be cloned instantly\nDo you want to start now with you personal site in ZeroNet?\nSee what is currently available, make you choice, and then start writing.\n\nYou may be interested in how to [[clone a site]].\n\n## Blog\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): Standard ZeroNet Blog with basic functionalities.\n- [ZeroBlog Plus](/15mSYzsDxzarssqtV1pFPKqoCTaLdjVB2f): A more stylish ZeroBlog.\n- [BlurHY Blog](/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi): For a blog in bootstrap style, with search and an introductory photo per article.\n- [Poster](/1J2ZJjs97wEcW36x5d9f1QnPVPVDv8wbJ): Another blog with stylish look, not like the others.\n\n## Forum\n- [ZeroTalk](/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT): The main forum, that everyone is familiar with.\n\n## Wiki\n- [ZeroWiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP): Wiki software for ZeroNet with basic functionalities.",
			"date_added": 1544529292849,
			"slug": "available-sitetypes"
		},
		{
			"id": "861207b0-fd36-11e8-9d17-b9deb8bad49a",
			"body": "# Available sitetypes that can be cloned instantly\nDo you want to start now with you personal site in ZeroNet?\nSee what is currently available, make you choice, and then start writing.\n\nYou may be interested in how to [[clone a site]].\n\n## Blog\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): Standard ZeroNet Blog with basic functionalities.\n- [ZeroBlog Plus](/15mSYzsDxzarssqtV1pFPKqoCTaLdjVB2f): A more stylish ZeroBlog.\n- [BlurHY Blog](/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi): For a blog in bootstrap style, with search and an introductory photo per article.\n- [Poster](/1J2ZJjs97wEcW36x5d9f1QnPVPVDv8wbJ): Another blog with stylish look, not like the others.\n\n## Forum\n- [ZeroTalk](/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT): The main forum, that everyone is familiar with.\n\n## Wiki\n- [ZeroWiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP): Wiki software for ZeroNet with basic functionalities.",
			"date_added": 1544527125421,
			"slug": "available-sitetypes"
		},
		{
			"id": "1eac4db0-fd36-11e8-9d17-b9deb8bad49a",
			"body": "# Available sitetypes that can be cloned instantly\nDo you want to start now with you personal site in ZeroNet?\nSee what is currently available, make you choice, and then start writing.\n\nYou may be interested in how to [[clone a site]].\n\n## Blog\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): Standard ZeroNet Blog with basic functionalities.\n- [ZeroBlog Plus](/15mSYzsDxzarssqtV1pFPKqoCTaLdjVB2f): A more stylish ZeroBlog.\n- [BlurHY Blog](/12q9YNb5oJ331nTjUxWefV9W2EXpMu8RWi): For a blog in bootstrap style, with search and an introductory photo per article.\n- [Poster](/1J2ZJjs97wEcW36x5d9f1QnPVPVDv8wbJ): Another blog with stylish look, not like the others.\n\n## Wiki\n- [ZeroWiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP): Wiki software for ZeroNet with basic functionalities.",
			"date_added": 1544526951950,
			"slug": "available-sitetypes"
		},
		{
			"id": "69329ec0-f95d-11e8-8291-713f3814ee40",
			"body": "# CORS - Read other sites data\nZeroNet allows a site to request permission to **read** another site's data.\n\nThe site that wants to do it should:\n- Ask the user to add the permission `Cors:OTHER_SITE_ADDRESS` by calling `cmd(\"corsPermission\", [\"OTHER_SITE_ADDRESS\"])`.\n- If the user grants it, then the site can call the standard data reading commands (i.e. `fileGet`, `fileList`, `dirList`, `fileRules`, `optionalFileInfo`) (possibly also `dbQuery`, `fileQuery`, `userGetSettings`, `siteInfo`) to a special path and have returned the results of these commands on the files of the other site.\n  \n  The path that has to be called is `cors-OTHER_SITE_ADDRESS/REAL_PATH`, so for example reading a file from ZeroTalk after having obtained cors permission simply is a matter of calling: `cmd(\"fileGet\", [\"cors-1TaLk.../data/users/.../data.json\"])`.",
			"date_added": 1544104022700,
			"slug": "cors"
		},
		{
			"id": "6b496640-f95c-11e8-bdec-23c37bd4e46e",
			"body": "# ZeroNet documentation for developers\nIn this wiki we collect various tutorials and documentation for ZeroNet functionalities.\nOur hope is that collaborative editing of the wiki will make it a very useful resource for all ZeroNet devs.\n\nThis is also a protest against ZeroNet non-existant documentation, a giant hole which we hope will be fixed soon.\n(Edit: maybe this is now changing thanks to anoa, that is writing [the new official documentation](https://zeronet.io/docs))\n\n**To contribute please read below the topic list.**\n\n## Cheat sheets: how to do things quickly\nAre you in a hurry and just want to know how to do a certain thing? This is the right section to look in.\n\n- [[Get a ZeroID account]]: useful to write in all public ZN places\n- [[Clone a site]]: start with you own basic blog or dicussion forum\n- [[Block a user or a site]]: do you hate someone and never want to see it again?\n- [[Ban a user from your site]] and never allow it to publish again\n- [[Change user quotas]] and allow more or less content to each one\n- [[Find ZN folder]], useful for backup and some operations on sites\n- [[Find your site address|Get a site address]] when you are visiting a page\n- [[Find the user public hash]] for a site if you know his ID\n- [[Delete some user content]] (only a specific post or comment)\n- [[Be completely anonymous]] in ZeroNet: the right way to set up TOR and why others do not work\n- [[Register .bit domain]] for your site\n- [[ZN Backup]]: how not to loose property of your sites and your IDs?\n- [[Restoring data]] from a taken backup\n- [[Help spread your site]]: some \"free hosting\" services\n\n## Tutorials\nWhat follows are some tutorials spliced into Beginners, Medium and Advanced topics.\nMany of them are not yet written, so to really get developers started the series of tutorials by imachug called [[the truth about ZeroNet]] is really advised. They are a bit old (dating September 2017) but very good to start.\n\n### Beginners\nBasics of site organizations and of content publishing.\nBe aware that **basic tutorials are thought to be read in-order** because they may use something that is explained in previous ones.\n\n0. Basic overview of [[sites on ZN]] and what they can contain AKA can I use PHP?\n1. [[Deploying a static site]]\n2. [[Basics of site organization]] and folder structure\n3. [[Write your own ZeroBoard]]: a global guest log\n4. [[Write your own ZeroTalk]]: a simple forum\n5. [[Complete content guide]]: understand all nitty witty details of the various `content.json`\n6. [[Complete database guide]]: all details of `dbschema.json`\n\n### Medium\nThings that you need if you want to develop a medium complex site.\nThese tutorials can be read in no particular order, since they should talk about orthogonal features.\n**It is assumed that you have read and understand all basic tutorials.**\nYou may also be interested in reading the section \"ZN design and code details\" to gain a better understanding of some features.\n\n- [[Notify user]] about updates: the NewsFeed\n- [[Translating sites]] using the TranslateSite plugin\n- [[Write your own ZeroMe]] AKA basic guide to merged sites\n- [[Write your own real time chat]] using the PeerMessage plugin\n- [[Do task in Background]] using the BackgroundTask plugin\n- [[Use compressed archives]] as directories\n- [[Encrypting text]] with CryptMessage plugin\n- [[CORS]]: How to read other sites data\n- [[Write your own ZeroTube]] AKA how to use BigFiles\n- [[Write your own Certificate Authority]]\n\n### Advanced\nTopics that you may not even need, but they are here for the perfectionists.\n**Be aware that these topics may not include full source code, but only give you ideas and relevant parts of source**.\n\n- [[Ways to prevent spam]] from destroying your site\n- [[Content filtering]]: how to support full-text search in your site\n- [[Write your own Search Engine]] and the differents approach to it\n\n### Stairway to plugins\nEverything you must know about how to write a plugin. Some articles do not depend on the previous ones, but it may be better to read them in-order. Also the articles are very short, so it shouldn't take too much.\n\n1. [[Current plugin architecture]]: how to write a do-nothing plugin\n2. [[Plugin - Simple API command]]: expose a simple API command to the sites\n3. [[Plugin - Asking the user]]: ask a question to the user using standard prompts\n4. [[Plugin - Permissions]]: adding a new permission to ZeroNet\n5. [[Plugin - Adding translation]]: how to add translations to our messages\n6. [[Plugin - Intercepting file update]]: create your custom rules on json file update\n\nAfter having done all the basics of plugin, you should read [[description of ZeroNet main classes]] to better know how to structure your plugin.\n\n## ZN Design and code details\nPages that talk about **current** ZN design (please be sure to insert the version/revision you are talking about) and/or document tough code parts.\n\n- [[Site publishing mechanism]]: how do you \"own\" your site?\n- [[Site update details]]: what happens when you update a cloned site?\n- [[Censoring sites]]: to which extent are ZN sites censorable?\n- [[Certification Authorities]] in ZeroNet: little guide.\n- [[Currently available plugins]]: what do they serve and how are they written.\n- [[Description of ZeroNet main classes]]: know what the core classes do.\n- [[Backend spam prevention]]: currently taken precautions in ZN core.\n- [[ZeroFrame API Command]]: list of all commands.\n\n## Lists of useful developers resources\nPages that are lists of links to useful available resources and their sites.\n*This is NOT a list of known sites*: please do not insert personal blog when not relevant (i.e. almost only contain developer things) and do not use them for self-promoting. Spam won't be tollerated.\n\n- [[Available sitetypes]] that can be cloned and used instantly: avoid reinventing the wheel.\n- [[Developers Blog]] that have a **significant** amount of information about developing sites.\n- [[Available frameworks]] that help you write ZN sites.\n- [[Other documentation]] places, to find even more sources of information.\n\n## How to contribute\nIf you want to contribute please see [[Contributing Guidelines]]. Reading those can help maintaining a common style across the whole wiki and in turn help first-time users of the wiki to better understand what you have written.\n\n**Before inserting a link in the main page please write about it in the [discussion forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK).**\n\nIf you don't know what Markdown is, you can refer to the article [[Markdown from zero to hero]].\nThis will help you write good wiki pages.\n\n### Of course, but what can I do to contribute?\nYou have many available options to choose to:\n- Simply use the wiki and link to the relevant articles in discussion topics: this will help others know that this site exists.\n- Read the articles you may like to read and correct spelling or grammar errors, especially if your mothertongue is english. Also simplifying paragraphs is of big help, since many users may not have deep comprehension of the english language.\n- Correct logical errors in presentations, or add some historical notes about how such a thing was done before and why it has been changed.\n- Write new tutorial for something that you have done recently and had a lot of trouble to get done. It is especially useful to write what ways do not get you there and why, and to write the correct way to have it done.\n- Search for non-existent pages and write something clear about them.\n\nEvery contribution is always welcome, as long as it is done in good faith and is about ZN development.\nYou may even copy text from other sources, as long as you have permission from the author either explicitly or implicitly (i.e. the content is licensed under a Creative Commons compatible licence).",
			"date_added": 1544103596711,
			"slug": "home"
		},
		{
			"id": "42af1860-f93e-11e8-bb73-cd6876166ac0",
			"body": "# ZeroNet documentation for developers\nIn this wiki we collect various tutorials and documentation for ZeroNet functionalities.\nOur hope is that collaborative editing of the wiki will make it a very useful resource for all ZeroNet devs.\n\nThis is also a protest against ZeroNet non-existant documentation, a giant hole which we hope will be fixed soon.\n(Edit: maybe this is now changing thanks to anoa, that is writing [the new official documentation](https://zeronet.io/docs))\n\n**To contribute please read below the topic list.**\n\n## Cheat sheets: how to do things quickly\nAre you in a hurry and just want to know how to do a certain thing? This is the right section to look in.\n\n- [[Get a ZeroID account]]: useful to write in all public ZN places\n- [[Clone a site]]: start with you own basic blog or dicussion forum\n- [[Block a user or a site]]: do you hate someone and never want to see it again?\n- [[Ban a user from your site]] and never allow it to publish again\n- [[Change user quotas]] and allow more or less content to each one\n- [[Find ZN folder]], useful for backup and some operations on sites\n- [[Find your site address|Get a site address]] when you are visiting a page\n- [[Find the user public hash]] for a site if you know his ID\n- [[Delete some user content]] (only a specific post or comment)\n- [[Be completely anonymous]] in ZeroNet: the right way to set up TOR and why others do not work\n- [[Register .bit domain]] for your site\n- [[ZN Backup]]: how not to loose property of your sites and your IDs?\n- [[Restoring data]] from a taken backup\n- [[Help spread your site]]: some \"free hosting\" services\n\n## Tutorials\nWhat follows are some tutorials spliced into Beginners, Medium and Advanced topics.\nMany of them are not yet written, so to really get developers started the series of tutorials by imachug called [[the truth about ZeroNet]] is really advised. They are a bit old (dating September 2017) but very good to start.\n\n### Beginners\nBasics of site organizations and of content publishing.\nBe aware that **basic tutorials are thought to be read in-order** because they may use something that is explained in previous ones.\n\n0. Basic overview of [[sites on ZN]] and what they can contain AKA can I use PHP?\n1. [[Deploying a static site]]\n2. [[Basics of site organization]] and folder structure\n3. [[Write your own ZeroBoard]]: a global guest log\n4. [[Write your own ZeroTalk]]: a simple forum\n5. [[Complete content guide]]: understand all nitty witty details of the various `content.json`\n6. [[Complete database guide]]: all details of `dbschema.json`\n\n### Medium\nThings that you need if you want to develop a medium complex site.\nThese tutorials can be read in no particular order, since they should talk about orthogonal features.\n**It is assumed that you have read and understand all basic tutorials.**\nYou may also be interested in reading the section \"ZN design and code details\" to gain a better understanding of some features.\n\n- [[Notify user]] about updates: the NewsFeed\n- [[Translating sites]] using the TranslateSite plugin\n- [[Write your own ZeroMe]] AKA basic guide to merged sites\n- [[Write your own real time chat]] using the PeerMessage plugin\n- [[Do task in Background]] using the BackgroundTask plugin\n- [[Use compressed archives]] as directories\n- [[Encrypting text]] with CryptMessage plugin\n- [[CORS]]: How to read and write to other sites data\n- [[Write your own ZeroTube]] AKA how to use BigFiles\n- [[Write your own Certificate Authority]]\n\n### Advanced\nTopics that you may not even need, but they are here for the perfectionists.\n**Be aware that these topics may not include full source code, but only give you ideas and relevant parts of source**.\n\n- [[Ways to prevent spam]] from destroying your site\n- [[Content filtering]]: how to support full-text search in your site\n- [[Write your own Search Engine]] and the differents approach to it\n\n### Stairway to plugins\nEverything you must know about how to write a plugin. Some articles do not depend on the previous ones, but it may be better to read them in-order. Also the articles are very short, so it shouldn't take too much.\n\n1. [[Current plugin architecture]]: how to write a do-nothing plugin\n2. [[Plugin - Simple API command]]: expose a simple API command to the sites\n3. [[Plugin - Asking the user]]: ask a question to the user using standard prompts\n4. [[Plugin - Permissions]]: adding a new permission to ZeroNet\n5. [[Plugin - Adding translation]]: how to add translations to our messages\n6. [[Plugin - Intercepting file update]]: create your custom rules on json file update\n\nAfter having done all the basics of plugin, you should read [[description of ZeroNet main classes]] to better know how to structure your plugin.\n\n## ZN Design and code details\nPages that talk about **current** ZN design (please be sure to insert the version/revision you are talking about) and/or document tough code parts.\n\n- [[Site publishing mechanism]]: how do you \"own\" your site?\n- [[Site update details]]: what happens when you update a cloned site?\n- [[Censoring sites]]: to which extent are ZN sites censorable?\n- [[Certification Authorities]] in ZeroNet: little guide.\n- [[Currently available plugins]]: what do they serve and how are they written.\n- [[Description of ZeroNet main classes]]: know what the core classes do.\n- [[Backend spam prevention]]: currently taken precautions in ZN core.\n- [[ZeroFrame API Command]]: list of all commands.\n\n## Lists of useful developers resources\nPages that are lists of links to useful available resources and their sites.\n*This is NOT a list of known sites*: please do not insert personal blog when not relevant (i.e. almost only contain developer things) and do not use them for self-promoting. Spam won't be tollerated.\n\n- [[Available sitetypes]] that can be cloned and used instantly: avoid reinventing the wheel.\n- [[Developers Blog]] that have a **significant** amount of information about developing sites.\n- [[Available frameworks]] that help you write ZN sites.\n- [[Other documentation]] places, to find even more sources of information.\n\n## How to contribute\nIf you want to contribute please see [[Contributing Guidelines]]. Reading those can help maintaining a common style across the whole wiki and in turn help first-time users of the wiki to better understand what you have written.\n\n**Before inserting a link in the main page please write about it in the [discussion forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK).**\n\nIf you don't know what Markdown is, you can refer to the article [[Markdown from zero to hero]].\nThis will help you write good wiki pages.\n\n### Of course, but what can I do to contribute?\nYou have many available options to choose to:\n- Simply use the wiki and link to the relevant articles in discussion topics: this will help others know that this site exists.\n- Read the articles you may like to read and correct spelling or grammar errors, especially if your mothertongue is english. Also simplifying paragraphs is of big help, since many users may not have deep comprehension of the english language.\n- Correct logical errors in presentations, or add some historical notes about how such a thing was done before and why it has been changed.\n- Write new tutorial for something that you have done recently and had a lot of trouble to get done. It is especially useful to write what ways do not get you there and why, and to write the correct way to have it done.\n- Search for non-existent pages and write something clear about them.\n\nEvery contribution is always welcome, as long as it is done in good faith and is about ZN development.\nYou may even copy text from other sources, as long as you have permission from the author either explicitly or implicitly (i.e. the content is licensed under a Creative Commons compatible licence).",
			"date_added": 1544090643689,
			"slug": "home"
		},
		{
			"id": "0ec41c00-f89c-11e8-9feb-31dfabe712ae",
			"body": "# Plugins: how to ask something to the user\nWe will see a simple plugin that, when a site invokes our function, asks something to the user and then takes some actions.\n\n```python\nfrom Plugin import PluginManager\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def _get_number(self, to):\n        self.response(to, 101)\n\n    def actionGetNumber(self, to):\n        self.cmd(\"confirm\", [\"Are you sure you want a number?\", \"Yeah, Sure\"], lambda (res): self._get_number(to))\n```\n\nThe commands that you can issue to ask something to the user [are documented on zeronet.io/docs](https://zeronet.io/docs/site_development/zeroframe_api_reference/) and are \"confirm\" to ask a yes/no question, \"notification\" to only say something to the user, \"prompt\" to allow the user to insert text.\n",
			"date_added": 1544020978112,
			"slug": "plugin---asking-the-user"
		},
		{
			"id": "b8174e50-f6ec-11e8-92ac-cd34ed2ef979",
			"body": "# ZeroNet documentation for developers\nIn this wiki we collect various tutorials and documentation for ZeroNet functionalities.\nOur hope is that collaborative editing of the wiki will make it a very useful resource for all ZeroNet devs.\n\nThis is also a protest against ZeroNet non-existant documentation, a giant hole which we hope will be fixed soon.\n(Edit: maybe this is now changing thanks to anoa, that is writing [the new official documentation](https://zeronet.io/docs))\n\n**To contribute please read below the topic list.**\n\n## Cheat sheets: how to do things quickly\nAre you in a hurry and just want to know how to do a certain thing? This is the right section to look in.\n\n- [[Get a ZeroID account]]: useful to write in all public ZN places\n- [[Clone a site]]: start with you own basic blog or dicussion forum\n- [[Block a user or a site]]: do you hate someone and never want to see it again?\n- [[Ban a user from your site]] and never allow it to publish again\n- [[Change user quotas]] and allow more or less content to each one\n- [[Find ZN folder]], useful for backup and some operations on sites\n- [[Find your site address|Get a site address]] when you are visiting a page\n- [[Find the user public hash]] for a site if you know his ID\n- [[Delete some user content]] (only a specific post or comment)\n- [[Be completely anonymous]] in ZeroNet: the right way to set up TOR and why others do not work\n- [[Register .bit domain]] for your site\n- [[ZN Backup]]: how not to loose property of your sites and your IDs?\n- [[Restoring data]] from a taken backup\n- [[Help spread your site]]: some \"free hosting\" services\n\n## Tutorials\nWhat follows are some tutorials spliced into Beginners, Medium and Advanced topics.\nMany of them are not yet written, so to really get developers started the series of tutorials by imachug called [[the truth about ZeroNet]] is really advised. They are a bit old (dating September 2017) but very good to start.\n\n### Beginners\nBasics of site organizations and of content publishing.\nBe aware that **basic tutorials are thought to be read in-order** because they may use something that is explained in previous ones.\n\n0. Basic overview of [[sites on ZN]] and what they can contain AKA can I use PHP?\n1. [[Deploying a static site]]\n2. [[Basics of site organization]] and folder structure\n3. [[Write your own ZeroBoard]]: a global guest log\n4. [[Write your own ZeroTalk]]: a simple forum\n5. [[Complete content guide]]: understand all nitty witty details of the various `content.json`\n6. [[Complete database guide]]: all details of `dbschema.json`\n\n### Medium\nThings that you need if you want to develop a medium complex site.\nThese tutorials can be read in no particular order, since they should talk about orthogonal features.\n**It is assumed that you have read and understand all basic tutorials.**\nYou may also be interested in reading the section \"ZN design and code details\" to gain a better understanding of some features.\n\n- [[Notify user]] about updates: the NewsFeed\n- [[Translating sites]] using the TranslateSite plugin\n- [[Write your own ZeroMe]] AKA basic guide to merged sites\n- [[Write your own real time chat]] using the PeerMessage plugin\n- [[Do task in Background]] using the BackgroundTask plugin\n- [[Use compressed archives]] as directories\n- [[Encrypting text]] with CryptMessage plugin\n- [[CORS]]: How to read and write to other sites data\n- [[Write your own ZeroTube]] AKA how to use BigFiles\n- [[Write your own Certificate Authority]]\n\n### Advanced\nTopics that you may not even need, but they are here for the perfectionists.\n**Be aware that these topics may not include full source code, but only give you ideas and relevant parts of source**.\n\n- [[Ways to prevent spam]] from destroying your site\n- [[Content filtering]]: how to support full-text search in your site\n- [[Write your own Search Engine]] and the differents approach to it\n\n### Stairway to plugins\nEverything you must know about how to write a plugin. Some articles do not depend on the previous ones, but it may be better to read them in-order. Also the articles are very short, so it shouldn't take too much.\n\n1. [[Current plugin architecture]]: how to write a do-nothing plugin\n2. [[Plugin - Simple API command]]: expose a simple API command to the sites\n3. [[Plugin - Asking the user]]: ask a question to the user using standard prompts\n4. [[Plugin - Permissions]]: adding a new permission to ZeroNet\n5. [[Plugin - Adding translation]]: how to add translations to our messages\n6. [[Plugin - Intercepting file update]]: create your custom rules on json file update\n\nAfter having done all the basics of plugin, you should read [[description of ZeroNet main classes]] to better know how to structure your plugin.\n\n## ZN Design and code details\nPages that talk about **current** ZN design (please be sure to insert the version/revision you are talking about) and/or document tough code parts.\n\n- [[Site publishing mechanism]]: how do you \"own\" your site?\n- [[Site update details]]: what happens when you update a cloned site?\n- [[Censoring sites]]: to which extent are ZN sites censorable?\n- [[Certification Authorities]] in ZeroNet: little guide\n- [[Database design]]: writing in json files and retrieving with SQL queries.\n- [[Currently available plugins]]: what do they serve and how are they written.\n- [[Description of ZeroNet main classes]]: know what the core classes do.\n- [[Backend spam prevention]]: currently taken precautions in ZN core.\n- [[ZeroFrame API Command]]: list of all commands.\n\n## Lists of useful developers resources\nPages that are lists of links to useful available resources and their sites.\n*This is NOT a list of known sites*: please do not insert personal blog when not relevant (i.e. almost only contain developer things) and do not use them for self-promoting. Spam won't be tollerated.\n\n- [[Available sitetypes]] that can be cloned and used instantly: avoid reinventing the wheel.\n- [[Developers Blog]] that have a **significant** amount of information about developing sites.\n- [[Available frameworks]] that help you write ZN sites.\n- [[Other documentation]] places, to find even more sources of information.\n\n## How to contribute\nIf you want to contribute please see [[Contributing Guidelines]]. Reading those can help maintaining a common style across the whole wiki and in turn help first-time users of the wiki to better understand what you have written.\n\n**Before inserting a link in the main page please write about it in the [discussion forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK).**\n\nIf you don't know what Markdown is, you can refer to the article [[Markdown from zero to hero]].\nThis will help you write good wiki pages.\n\n### Of course, but what can I do to contribute?\nYou have many available options to choose to:\n- Simply use the wiki and link to the relevant articles in discussion topics: this will help others know that this site exists.\n- Read the articles you may like to read and correct spelling or grammar errors, especially if your mothertongue is english. Also simplifying paragraphs is of big help, since many users may not have deep comprehension of the english language.\n- Correct logical errors in presentations, or add some historical notes about how such a thing was done before and why it has been changed.\n- Write new tutorial for something that you have done recently and had a lot of trouble to get done. It is especially useful to write what ways do not get you there and why, and to write the correct way to have it done.\n- Search for non-existent pages and write something clear about them.\n\nEvery contribution is always welcome, as long as it is done in good faith and is about ZN development.\nYou may even copy text from other sources, as long as you have permission from the author either explicitly or implicitly (i.e. the content is licensed under a Creative Commons compatible licence).",
			"date_added": 1543835719614,
			"slug": "home"
		},
		{
			"id": "e94a6c90-f4ef-11e8-9fcc-bdfa8f02e71a",
			"body": "This page is copied from the [official documentation of zeronet.io](https://zeronet.io/docs/site_development/dbschema_json/).\n\n---\n\n# Structure of dbschema.json\n\n[Example dbschema.json file](https://github.com/HelloZeroNet/ZeroTalk/blob/master/dbschema.json)\n\nThe code below will do the following:\n\n - If an updated data/users/*/data.json file is received (eg.: a user posted something):\n   - Every row in `data[\"topics\"]` is loaded to the `topic` table\n   - Every key in `data[\"comment_votes\"]` is loaded to the `comment_vote` table as `comment_hash` col and the values stored in same line as `vote`\n - If an updated data/users/content.json file is received (eg.: new user created):\n   - The `\"user_id\", \"user_name\", \"max_size\", \"added\"` key in value of `content[\"include\"]` is loaded into the `user` table and the key is stored as `path`\n\n> Note: [Some restriction](content_json/#regular-expressions-limitations) apply to regular expressions to avoid possible ReDoS vulnerability.\n\n```json\n\n{\n  \"db_name\": \"ZeroTalk\", # Database name (only used for debugging)\n  \"db_file\": \"data/users/zerotalk.db\", # Database file relative to site's directory\n  \"version\": 2, # 1 = Json table has path column that includes directory and filename\n                # 2 = Json table has separate directory and file_name column\n                # 3 = Same as version 2, but also has site column (for merger sites)\n  \"maps\": { # Json to database mappings\n    \".*/data.json\": { # Regex pattern of file relative to db_file\n      \"to_table\": [ # Load values to table\n        {\n          \"node\": \"topics\", # Reading data.json[topics] key value\n          \"table\": \"topic\" # Feeding data to topic table\n        },\n        {\n          \"node\": \"comment_votes\", # Reading data.json[comment_votes] key value\n          \"table\": \"comment_vote\", # Feeding data to comment_vote table\n          \"key_col\": \"comment_hash\",\n            # data.json[comment_votes] is a simple dict, the keys of the\n            # dict are loaded to comment_vote table comment_hash column\n\n          \"val_col\": \"vote\"\n            # The data.json[comment_votes] dict values loaded to comment_vote table vote column\n\n        }\n      ],\n      \"to_keyvalue\": [\"next_message_id\", \"next_topic_id\"]\n        # Load data.json[next_topic_id] to keyvalue table\n        # (key: next_message_id, value: data.json[next_message_id] value)\n\n    },\n    \"content.json\": {\n      \"to_table\": [\n        {\n          \"node\": \"includes\",\n          \"table\": \"user\",\n          \"key_col\": \"path\",\n          \"import_cols\": [\"user_id\", \"user_name\", \"max_size\", \"added\"],\n            # Only import these columns to user table\n          \"replaces\": {\n            \"path\": {\"content.json\": \"data.json\"}\n              # Replace content.json to data.json in the\n              # value of path column (required for joining)\n          }\n        }\n      ],\n      \"to_json_table\": [ \"cert_auth_type\", \"cert_user_id\" ]  # Save cert_auth_type and cert_user_id directly to json table (easier and faster data queries)\n    }\n  },\n  \"tables\": { # Table definitions\n    \"topic\": { # Define topic table\n      \"cols\": [ # Cols of the table\n        [\"topic_id\", \"INTEGER\"],\n        [\"title\", \"TEXT\"],\n        [\"body\", \"TEXT\"],\n        [\"type\", \"TEXT\"],\n        [\"parent_topic_hash\", \"TEXT\"],\n        [\"added\", \"DATETIME\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX topic_key ON topic(topic_id, json_id)\"],\n        # Indexes automatically created\n\n      \"schema_changed\": 1426195822\n        # Last time of the schema changed, if the client's version is different then\n        # automatically destroy the old, create the new table then reload the data into it\n\n    },\n    \"comment_vote\": {\n      \"cols\": [\n        [\"comment_hash\", \"TEXT\"],\n        [\"vote\", \"INTEGER\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX comment_vote_key ON comment_vote(comment_hash, json_id)\", \"CREATE INDEX comment_vote_hash ON comment_vote(comment_hash)\"],\n      \"schema_changed\": 1426195826\n    },\n    \"user\": {\n      \"cols\": [\n        [\"user_id\", \"INTEGER\"],\n        [\"user_name\", \"TEXT\"],\n        [\"max_size\", \"INTEGER\"],\n        [\"path\", \"TEXT\"],\n        [\"added\", \"INTEGER\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX user_id ON user(user_id)\", \"CREATE UNIQUE INDEX user_path ON user(path)\"],\n      \"schema_changed\": 1426195825\n    },\n    \"json\": {  # Json table format only required if you have specified to_json_table pattern anywhere\n        \"cols\": [\n            [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n            [\"directory\", \"TEXT\"],\n            [\"file_name\", \"TEXT\"],\n            [\"cert_auth_type\", \"TEXT\"],\n            [\"cert_user_id\", \"TEXT\"]\n        ],\n        \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, site, file_name)\"],\n        \"schema_changed\": 4\n    }\n  }\n}\n```\n\n## Example for data.json file\n```json\n{\n  \"next_topic_id\": 2,\n  \"topics\": [\n    {\n      \"topic_id\": 1,\n      \"title\": \"Newtopic\",\n      \"body\": \"Topic!\",\n      \"added\": 1426628540,\n      \"parent_topic_hash\": \"5@2\"\n    }\n  ],\n  \"next_message_id\": 19,\n  \"comments\": {\n    \"1@2\": [\n      {\n        \"comment_id\": 1,\n        \"body\": \"New user test!\",\n        \"added\": 1423442049\n      }\n    ],\n    \"1@13\": [\n      {\n        \"comment_id\": 2,\n        \"body\": \"hello\",\n        \"added\": 1424653288\n      },\n      {\n        \"comment_id\": 13,\n        \"body\": \"test 123\",\n        \"added\": 1426463715\n      }\n    ]\n  },\n  \"topic_votes\": {\n    \"1@2\": 1,\n    \"4@2\": 1,\n    \"2@2\": 1,\n    \"1@5\": 1,\n    \"1@6\": 1,\n    \"3@2\": 1,\n    \"1@13\": 1,\n    \"4@5\": 1\n  },\n  \"comment_votes\": {\n    \"5@5\": 1,\n    \"2@12\": 1,\n    \"1@12\": 1,\n    \"33@2\": 1,\n    \"45@2\": 1,\n    \"12@5\": 1,\n    \"34@2\": 1,\n    \"46@2\": 1\n  }\n}\n```\n\n## Example for content.json file\n\n```json\n{\n  \"files\": {},\n  \"ignore\": \".*/.*\",\n  \"includes\": {\n    \"13v1FwKcq7dx2UPruFcRcqd8s7VBjvoWJW/content.json\": {\n      \"added\": 1426683897,\n      \"files_allowed\": \"data.json\",\n      \"includes_allowed\": false,\n      \"max_size\": 10000,\n      \"signers\": [\n        \"13v1FwKcq7dx2UPruFcRcqd8s7VBjvoWJW\"\n      ],\n      \"signers_required\": 1,\n      \"user_id\": 15,\n      \"user_name\": \"meginthelloka\"\n    },\n    \"15WGMVViswrF13sAKb7je6oX3UhXavBxxQ/content.json\": {\n      \"added\": 1426687209,\n      \"files_allowed\": \"data.json\",\n      \"includes_allowed\": false,\n      \"max_size\": 10000,\n      \"signers\": [\n        \"15WGMVViswrF13sAKb7je6oX3UhXavBxxQ\"\n      ],\n      \"signers_required\": 1,\n      \"user_id\": 18,\n      \"user_name\": \"habla\"\n    }\n  }\n}\n```\n",
			"date_added": 1543617188313,
			"slug": "complete-database-guide"
		},
		{
			"id": "cac96f00-f4ef-11e8-8c63-5363aff17f15",
			"body": "This page is copied from the [official documentation of zeronet.io](https://zeronet.io/docs/site_development/content_json/).\n\n---\n\n# Structure of content.json\n\nEvery ZeroNet site has a `content.json` file. ([Example content.json file](https://github.com/HelloZeroNet/ZeroTalk/blob/master/content.json))\n\nThis file will carry, among other things, a list of all files on your site and a signature created with your private key. This is used to ensure authenticity of site files and avoid tampering (ie: only you, or people you trust, can update your site's content).\n\nHere is a list of supported `content.json` keys:\n\n\n---\n\n## Generated automatically\n\n_These keys are added automatically when the site is created or cloned._\n\n### address\n\nYour site address\n\n**Example**: 1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\n\n\n---\n\n\n### address_index\n\nThe site address's BIP32 sub-key index of your BIP32 seed. Auto-added when you clone a site. It allows recovery of the site's privatekey from your BIP32 seed.\n\n**Example**: 30926910\n\n---\n\n\n### cloned_from\n\nOnly for cloned sites. The site address where the site is cloned from.\n\n**Example**: 1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8\n\n---\n\n\n### clone_root\n\nOnly for cloned sites. The sub-directory on the site which this was cloned from.\n\n**Example**: template-new\n\n\n---\n\n\n### files\n\nSize and sha512 hashes of automatically downloaded files contained in your site. Automatically added by the command `zeronet.py siteSign siteaddress privatekey`.\n\n**Example**:\n```python\n    \"css/all.css\": {\n      \"sha512\": \"869b09328f07bac538c313c4702baa5276544346418378199fa5cef644c139e8\",\n      \"size\": 148208\n    }\n```\n\n\n---\n\n\n### files_optional\n\nSize and sha512 hashes of optional files contained in your site. Automatically added by the command `zeronet.py siteSign siteaddress privatekey`.\n\n**Example**:\n```python\n    \"data/myvideo.mp4\": {\n      \"sha512\": \"538c09328aa52765443464135cef644c144346418378199fa5cef61837819538\",\n      \"size\": 832103\n    }\n```\n\n\n\n---\n\n\n### modified\n\nTime when the content.json was generated.\n\n**Example**: 1425857522.076\n\n\n---\n\n\n### sign (deprecated)\n\nECDSA sign of the content.json file content. (keys sorted, without whitespace and the `sign` and `signers_sign` nodes). For backward compatibility, will be removed soon.\n\n**Example**:\n```python\n  \"sign\": [\n    43117356513690007125104018825100786623580298637039067305407092800990252156956,\n    94139380599940414070721501960181245022427741524702752954181461080408625270000\n  ],\n```\n\n\n---\n\n\n### signers_sign\n\nPossible signer addresses for the root content.json signed using the site address private key. Multiple entries are allowed here, allowing for site Multisig functionality.\n\n**Format of the signed string**: [number_of_signers_required]:[signer address],[signer address]\n\n*Example*:\n```\nsigns_required: 1:1PcxwuHYxuJEmM4ydtB1vbiAY6WkNgsz9G,1CK6KHY6MHgYvmRQ4PAafKYDrg1ejbH1cE\nsigners_sign: MEUCIQDuz+CzOVvFkv1P2ra9i5E1p1G0/1cOGecm7GpLpMLhuwIgBIbCL0YHXD1S2+x48QS5VO/rISrkdLiUR+o+x1X0y1A=\n```\n\nThe above signed message is signed using the address \"1PcxwuHYxuJEmM4ydtB1vbiAY6WkNgsz9G\".\n\n---\n\n\n### signs\n\nECDSA signature for the the content.json file content:\n\n - `sign`, `signs` JSON nodes removed\n - JSON dumped with keys sorted alphabetically, without whitespace\n - Signature generated on the dumped data, using Electrum Bitcoin message signature format:\n    * [Message encoding](https://github.com/vbuterin/pybitcointools/blob/87806f3c984e258a5f30814a089b5c29cbcf0952/bitcoin/main.py#L405): `sha256(\"\\x18\" || \"Bitcoin Signed Message:\\n\" || num_to_var_int(len(message)) || message)`\n    * [Serialization format](https://github.com/MuxZeroNet/zerolib/blob/f13126e04bf99b1b416a7ea5b5cad7924cdc15a4/zerolib/integrity/bitcoin.py#L82-L93): `recovery_id || r || s`, where 27 ≤ recovery_id ≤ 30; signature length = 1 + 32 + 32 = 65 bytes.\n    * Double vertical bar `||` denotes byte concatenation.\n\n**Example**:\n```python\n  \"signs\": {\n    \"1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\": \"G6/QXFKvACPQ7LhoZG4fgqmeOSK99vGM2arVWkm9pV/WPCfc2ulv6iuQnuzw4v5z82qWswcRq907VPdBsdb9VRo=\"\n  },\n```\n\n\n----\n\n\n### zeronet_version\n\nThe ZeroNet version used to generate content.json file.\n\n**Example**: 0.2.5\n\n---\n\n## Optional Settings\n\n_These options can be added if the functionality is needed._\n\n\n### background-color\n\nBackground color of the wrapper\n\n**Example**: #F5F5F5\n\n\n---\n\n\n### cloneable\n\nAllow to clone the site if **true**.\n\nTo make your site properly cloneable you have to have a separate folder of data\nfiles for a clean start (e.g. without any blog posts).  To do this you have to\nadd the **-default** postfix to your data files and directories.  During the\ncloning process, only directories with the **-default** postfix are\ncopied. The postfix is removed from the new site.\n\n\n\n---\n\n\n### description\n\nDescription of your site, displayed under the site title on ZeroHello.\n\n**Example**: Decentralized forum demo\n\n\n---\n\n\n### domain\n\nNamecoin domain name of your site. ZeroHello will link to this if the user has Zeroname plugin enabled.\n\n**Example**: Blog.ZeroNetwork.bit\n\n\n\n\n---\n\n\n### ignore\n\nDo not sign files matching this pattern.\n\n**Example**: `((js|css)/(?!all.(js|css))|data/users/.*)` (ignore all js and css files except all.js and all.css and don't add anything from the `data/users/` directory)\n\nNote: [Some restrictions](#regular-expression-limitations) apply to regular expressions.\n\n---\n\n\n### includes\n\nInclude another content.json in the site. This is typically used for subsequent content.json files that are used to govern user data.\n\n**Example**:\n\n```python\n\"includes\": {\n  \"data/users/content.json\": {\n    \"signers\": [  # Possible signers address for the file\n      \"1LSxsKfC9S9TVXGGNSM3vPHjyW82jgCX5f\"\n    ],\n    \"signers_required\": 1 # The *number* of Valid signs required to accept the file (Multisig possibility),\n    \"files_allowed\": \"data.json\", # Preg pattern for the allowed files in the include file\n    \"includes_allowed\": false, # Whether nested includes are allowed\n    \"max_size\": 10000, # Max allowed size of included content.json and files it signs (in bytes)\n  }\n}\n```\n\n\n---\n\n\n### merged_type\n\nThe type of merger this site is a part of.\n\n**Example**: `ZeroMe`\n\n\n---\n\n\n### optional\n\nPreg pattern of optional files.\n\n**Example**: `(data/mp4/.*|updater/.*)` (everything in data/mp4 and updater directory is optional)\n\nNote: [Some restrictions](#regular-expression-limitations) apply to regular expressions.\n\n---\n\n\n### signs_required\n\nThe **number** of valid signs required to accept the file. Allows for Multisig functionality.\n\n\n**Example**: 1\n\n\n---\n\n\n### title\n\nThe site's title, visible in the browser title and on ZeroHello.\n\n**Example**: ZeroTalk\n\n\n----\n\n\n### translate\n\nFiles need be translated. (use language json files in the `languages` directory)\n\n**Example**: [\"index.html\", \"js/all.js\"]\n\n\n----\n\n\n### favicon\n\nThe site's favicon. Replaces the default ZeroNet logo with a site-specific icon. Can be a .ico, .png, .svg, etc.\n\n**Example**: favicon.ico\n\n\n----\n\n\n### user_contents\n\nRules of allowed user content within the current directory.\n\nNode                   | Description\n                  ---  | ---\n**cert_signers**       | Accepted domains and valid signer addresses\n**permission_rules**   | Allowed file names and total directory size based on cert domain or authorization method\n**permissions**        | Per-user permissions. (false = banned user)\n\n**Example**:\n```python\n  \"user_contents\": {\n    \"cert_signers\": {\n      \"zeroid.bit\": [ \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\" ]\n    },\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 10000\n      },\n      \"bitid/.*@zeroid.bit\": { \"max_size\": 40000 },\n      \"bitmsg/.*@zeroid.bit\": { \"max_size\": 15000 }\n    },\n    \"permissions\": {\n      \"bad@zeroid.bit\": false,\n      \"nofish@zeroid.bit\": { \"max_size\": 100000 }\n    }\n  }\n```\n\nNote: [Some restrictions](#regular-expression-limitations) apply to regular expressions.\n\n----\n\n\n### viewport\n\nContent for the viewport meta tag. (Used for mobile-friendly pages)\n\n**Example**: width=device-width, initial-scale=1.0\n\n\n----\n\n## Regular expression limitations\n\nTo avoid the [ReDoS](https://en.wikipedia.org/wiki/ReDoS) algorithmic complexity attack, the following restrictions are applied to each pattern:\n\n - `.` character is mandatory before repetition characters of `*,+,{`\n - Maximum 9 repetitions are allowed in a single pattern\n - The maximum length of a pattern is 255 characters\n\n### Examples:\n\n - `((?!json).)*$` not allowed, because of `)` before the `*` character. Possible fix: `.*(?!json)$`\n - `(.*.epub|.*.jpg|.*.jpeg|.*.png|data/.*.gif|.*.avi|.*.ogg|.*.webm|.*.mp4|.*.mp3|.*.mkv|.*.eot)` not allowed, because it has 12 `.*` repetition patterns. Possible fix: `.*(epub|jpg|jpeg|png|data/gif|avi|ogg|webm|mp4|mp3|mkv|eot)`\n",
			"date_added": 1543617137137,
			"slug": "complete-content-guide"
		},
		{
			"id": "7c12d450-f4ef-11e8-a3aa-53da778338f3",
			"body": "This is a copy of the [official documentation on zeronet.io](https://zeronet.io/docs/site_development/zeroframe_api_reference/).\n\n---\n\n# ZeroFrame API Reference\n\n## The ZeroFrame API\n\nZeroFrame is an API that allows ZeroNet websites to interact with the ZeroNet daemon. It allows sites to save/retrieve files, publish changes and many other things. A copy of the library is included at `js/ZeroFrame.js` whenever a new site is created.\n\nThe library can be imported like any other JavaScript file, or site developers also have the option of [importing through NPM](ZeroFrame API Page, ##Import?). Please see the [ZeroFrame API Reference]() for API details.\n\n## Wrapper\n\n_These commands are handled by the wrapper frame and are thus not sent to the UiServer using websocket._\n\n\n### wrapperConfirm\nDisplay a notification with confirm button\n\nParameter              | Description\n                  ---  | ---\n**message**            | The message you want to display\n**button_caption** (optional) | Caption of the confirmation button (default: OK)\n\n**Return**: True if clicked on button\n\n**Example:**\n```coffeescript\n# Delete site\nsiteDelete: (address) ->\n\tsite = @sites[address]\n\ttitle = site.content.title\n\tif title.length > 40\n\t\ttitle = title.substring(0, 15)+\"...\"+title.substring(title.length-10)\n\t@cmd \"wrapperConfirm\", [\"Are you sure you sure? <b>#{title}</b>\", \"Delete\"], (confirmed) =>\n\t\t@log \"Deleting #{site.address}...\", confirmed\n\t\tif confirmed\n\t\t\t$(\".site-#{site.address}\").addClass(\"deleted\")\n\t\t\t@cmd \"siteDelete\", {\"address\": address}\n```\n\n\n---\n\n\n### wrapperInnerLoaded\n\nApplies the windows.location.hash to page url. Call when you page is fully loaded to jump to the desired anchor point.\n\n\n---\n\n\n### wrapperGetLocalStorage\n**Return**: Browser's local store for the site\n\n**Example:**\n```coffeescript\n@cmd \"wrapperGetLocalStorage\", [], (res) =>\n\tres ?= {}\n\t@log \"Local storage value:\", res\n```\n\n\n\n---\n\n### wrapperGetState\n**Return**: Browser's current history state object\n\n---\n\n### wrapperGetAjaxKey\n**Return**: The key you need to initilize ajax requests\n\n**Example:**\n```javascript\najax_key = await page.cmdp(\"wrapperGetAjaxKey\")\nreq = new window.XMLHttpRequest()\nreq.open(\"GET\", \"content.json?ajax_key=\" + ajax_key)\nreq.setRequestHeader(\"Range\", \"bytes=10-200\")  // Optional: only if you want request partial file\nreq.send()\nconsole.log(req.response)\n```\n\n---\n\n### wrapperNotification\nDisplay a notification\n\nParameter              | Description\n                  ---  | ---\n**type**               | Possible values: info, error, done\n**message**            | The message you want to display\n**timeout** (optional) | Hide display after this interval (milliseconds)\n\n**Return**: None\n\n**Example:**\n```coffeescript\n@cmd \"wrapperNotification\", [\"done\", \"Your registration has been sent!\", 10000]\n```\n\n\n---\n\n### wrapperOpenWindow\n\nNavigates or opens a new popup window.\n\nParameter              | Description\n                  ---  | ---\n**url**                | Url of the opened page\n**target** (optional)  | Target window name\n**specs** (optional)   | Special properties of the window (see: [window.open specs](http://www.w3schools.com/jsref/met_win_open.asp))\n\n**Example:**\n```coffeescript\n@cmd \"wrapperOpenWindow\", [\"https://zeronet.io\", \"_blank\", \"width=550,height=600,location=no,menubar=no\"]\n```\n\n---\n\n\n### wrapperPermissionAdd\n\nRequest new permission for site\n\n\nParameter        | Description\n             --- | ---\n**permission**   | Name of permission (eg. Merger:ZeroMe)\n\n\n---\n\n### wrapperPrompt\n\nPrompt text input from user\n\nParameter           | Description\n               ---  | ---\n**message**         | The message you want to display\n**type** (optional) | Type of the input (default: text)\n\n**Return**: Text entered to input\n\n**Example:**\n```coffeescript\n# Prompt the private key\n@cmd \"wrapperPrompt\", [\"Enter your private key:\", \"password\"], (privatekey) =>\n    $(\".publishbar .button\").addClass(\"loading\")\n    # Send sign content.json and publish request to server\n    @cmd \"sitePublish\", [privatekey], (res) =>\n        $(\".publishbar .button\").removeClass(\"loading\")\n        @log \"Publish result:\", res\n```\n\n\n---\n\n### wrapperPushState\nChange the url and adds new entry to browser's history. See: [pushState JS method](https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method)\n\nParameter           | Description\n               ---  | ---\n**state**           | State javascript object\n**title**           | Title of the page\n**url**             | Url of the page\n\n**Return**: None\n\n**Example:**\n```coffeescript\n@cmd \"wrapperPushState\", [{\"scrollY\": 100}, \"Profile page\", \"Profile\"]\n```\n\n\n---\n\n### wrapperReplaceState\nChange the url without adding new entry to browser's history. See: [replaceState JS method](https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_replaceState()_method)\n\nParameter           | Description\n               ---  | ---\n**state**           | State javascript object\n**title**           | Title of the page\n**url**             | Url of the page\n\n**Return**: None\n\n```coffeescript\n@cmd \"wrapperReplaceState\", [{\"scrollY\": 100}, \"Profile page\", \"Profile\"]\n```\n\n---\n\n### wrapperRequestFullscreen\nSet the current page to fullscreen. (request permission for the site on first call)\n\n> **Note:** Starting from ZeroNet Rev3136 you can use the fullscreen javascript API directly, without fullscreen request\n\n**Example:**\n```javascript\npage.cmd(\"wrapperRequestFullscreen\")\n```\n\n\n---\n\n### wrapperSetLocalStorage\nSet browser's local store data stored for the site\n\nParameter              | Description\n                  ---  | ---\n**data**               | Any data structure you want to store for the site\n\n**Return**: None\n\n**Example:**\n```coffeescript\nPage.local_storage[\"topic.#{@topic_id}_#{@topic_user_id}.visited\"] = Time.timestamp()\nPage.cmd \"wrapperSetLocalStorage\", Page.local_storage\n```\n\n\n---\n\n### wrapperSetTitle\nSet browser's title\n\nParameter              | Description\n                  ---  | ---\n**title**              | New browser tab title\n\n**Return**: None\n\n**Example:**\n```coffeescript\nPage.cmd \"wrapperSetTitle\", \"newtitle\"\n```\n\n---\n\n\n### wrapperSetViewport\n\nSet sites's viewport meta tag content (required for mobile sites)\n\n\nParameter           | Description\n               ---  | ---\n**viewport**        | The viewport meta tag content\n\n**Return**: None\n\n**Example:**\n```coffeescript\n# Prompt the private key\n@cmd \"wrapperSetViewport\", \"width=device-width, initial-scale=1.0\"\n```\n\n\n---\n\n\n\n## UiServer\n\nThe UiServer is for ZeroNet what the LAMP setup is for normal websites.\n\nThe UiServer will do all the 'backend' work (eg: querying the DB, accessing files, etc). This are the API calls you will need to make your site dynamic.\n\n\n### announcerInfo\nTracker statistics for current site\n\n**Return**:\n```json\n{\n\t\"stats\": {\n\t\t\"zero://45.77.23.92:15555\": {\n\t\t\t\"status\": \"announced\",\n\t\t\t\"num_success\": 1,\n\t\t\t\"time_last_error\": 0,\n\t\t\t\"time_status\": 1541776998.782,\n\t\t\t\"num_request\": 1,\n\t\t\t\"time_request\": 1541776996.884,\n\t\t\t\"num_error\": 0\n\t\t},\n\t\t...\n\t}\n}\n```\n\n\n### certAdd\nAdd a new certificate to current user.\n\nParameter            | Description\n                 --- | ---\n**domain**           | Certificate issuer domain\n**auth_type**        | Auth type used on registration\n**auth_user_name**   | User name used on registration\n**cert**             | The cert itself: `auth_address#auth_type/auth_user_name` string signed by the cert site owner\n\n**Return**: \"ok\", \"Not changed\" or {\"error\": error_message}\n\n**Example:**\n```coffeescript\n@cmd \"certAdd\", [\"zeroid.bit\", auth_type, user_name, cert_sign], (res) =>\n\t$(\".ui\").removeClass(\"flipped\")\n\tif res.error\n\t\t@cmd \"wrapperNotification\", [\"error\", \"#{res.error}\"]\n```\n\n\n---\n\n\n### certSelect\nDisplay certificate selector.\n\nParameter            | Description\n                 --- | ---\n**accepted_domains** | List of domains that accepted by site as authorization provider\n**accept_any**       | Does not limits the accepted certificate providers\n**accepted_pattern** | Regexp pattern for accepted certificate providers address\n\n**Return**: None\n\n**Example:**\n```coffeescript\n@cmd \"certSelect\", {\"accepted_domains\": [\"zeroid.bit\"], \"accepted_pattern\": \"1ZeroiD[0-9]\"}\n```\n\n\n---\n\n\n### channelJoin\n\nRequest notifications about sites's events.\n\nParameter   | Description\n        --- | ---\n**channel** | Channel to join\n\n**Return**: None\n\n**Channels**:\n\n - **siteChanged** (joined by default)<br>Events: peers_added, file_started, file_done, file_failed\n\n**Example**:\n```coffeescript\n# Wrapper websocket connection ready\nonOpenWebsocket: (e) =>\n\t@cmd \"channelJoinAllsite\", {\"channel\": \"siteChanged\"}\n\n# Route incoming requests and messages\nroute: (cmd, data) ->\n\tif cmd == \"setSiteInfo\"\n\t\t@log \"Site changed\", data\n\telse\n\t\t@log \"Unknown command\", cmd, data\n```\n\n**Example event data**\n```json\n{\n\t\"tasks\":0,\n\t\"size_limit\":10,\n\t\"address\":\"1RivERqttrjFqwp9YH1FviduBosQPtdBN\",\n\t\"next_size_limit\":10,\n\t\"event\":[ \"file_done\", \"index.html\" ],\n\t[...] # Same as siteInfo return dict\n}\n\n```\n\n\n---\n\n\n### dbQuery\nRun a query on the sql cache\n\nParameter            | Description\n                 --- | ---\n**query**            | Sql query command\n**params**           | Parameter substitution to the sql query\n\n**Return**: <list> Result of the query\n\n\n**Example:**\n```javascript\nPage.cmd(\"dbQuery\", [\n   \"SELECT * FROM json WHERE file_name = :file_name\",\n   {file_name: \"data.json\"}\n], (res) => { console.log(res.length) })\n```\n\n```javascript\nPage.cmd(\"dbQuery\", [\n    \"SELECT * FROM json WHERE file_name IN :file_names\",\n    {file_names: [\"data.json\", \"content.json\"]}\n], (res) => { console.log(res.length) })\n```\n\n```javascript\nPage.cmd(\"dbQuery\", [\n    \"SELECT * FROM json ?\",\n    {file_name: [\"data.json\", \"content.json\"]}\n], (res) => { console.log(res.length) })\n```\n\n\n```coffeescript\n@log \"Updating user info...\", @my_address\nPage.cmd \"dbQuery\", [\"SELECT user.*, json.json_id AS data_json_id FROM user LEFT JOIN json USING(path) WHERE path='#{@my_address}/data.json'\"], (res) =>\n\tif res.error or res.length == 0 # Db not ready yet or No user found\n\t\t$(\".head-user.visitor\").css(\"display\", \"\")\n\t\t$(\".user_name-my\").text(\"Visitor\")\n\t\tif cb then cb()\n\t\treturn\n\n\t@my_row = res[0]\n\t@my_id = @my_row[\"user_id\"]\n\t@my_name = @my_row[\"user_name\"]\n\t@my_max_size = @my_row[\"max_size\"]\n```\n\n\n---\n\n\n### dirList\nList a content of a directory\n\nParameter        | Description\n             --- | ---\n**inner_path**   | Directory you want to list\n\n**Return**: List of file and directory names\n\n\n---\n\n\n### fileDelete\nDelete a file\n\nParameter        | Description\n             --- | ---\n**inner_path**   | The file you want to delete\n\n**Return**: \"ok\" on success else the error message\n\n\n---\n\n\n### fileGet\nGet file content\n\nParameter               | Description\n                    --- | ---\n**inner_path**          | The file you want to get\n**required** (optional) | Try and wait for the file if it's not exists. (default: True)\n**format** (optional)   | Encoding of returned data. (text or base64) (default: text)\n**timeout** (optional)  | Maximum wait time to data arrive (default: 300)\n\n**Return**: <string> The content of the file\n\n\n**Example:**\n```coffeescript\n# Upvote a topic on ZeroTalk\nsubmitTopicVote: (e) =>\n\tif not Users.my_name # Not registered\n\t\tPage.cmd \"wrapperNotification\", [\"info\", \"Please, request access before posting.\"]\n\t\treturn false\n\n\telem = $(e.currentTarget)\n\telem.toggleClass(\"active\").addClass(\"loading\")\n\tinner_path = \"data/users/#{Users.my_address}/data.json\"\n\n\tPage.cmd \"fileGet\", [inner_path], (data) =>\n\t\tdata = JSON.parse(data)\n\t\tdata.topic_votes ?= {} # Create if not exits\n\t\ttopic_address = elem.parents(\".topic\").data(\"topic_address\")\n\n\t\tif elem.hasClass(\"active\") # Add upvote to topic\n\t\t\tdata.topic_votes[topic_address] = 1\n\t\telse # Remove upvote from topic\n\t\t\tdelete data.topic_votes[topic_address]\n\n\t\t# Write file and publish to other peers\n\t\tPage.writePublish inner_path, Page.jsonEncode(data), (res) =>\n\t\t\telem.removeClass(\"loading\")\n\t\t\tif res == true\n\t\t\t\t@log \"File written\"\n\t\t\telse # Failed\n\t\t\t\telem.toggleClass(\"active\") # Change back\n\n\treturn false\n```\n\n\n---\n\n\n### fileList\nRecursively list of files in a directory\n\nParameter        | Description\n             --- | ---\n**inner_path**   | Directory you want to list\n\n**Return**: List of files in the directory (recursive)\n\n\n---\n\n\n### fileNeed\nInitialize download of a (optional) file.\n\nParameter               | Description\n                    --- | ---\n**inner_path**          | The file you want to get\n**timeout** (optional)  | Maximum wait time to data arrive (default: 300)\n\n**Return**: \"ok\" on successfull download\n\n\n---\n\n### fileQuery\nSimple json file query command\n\nParameter            | Description\n                 --- | ---\n**dir_inner_path**   | Pattern of queried files\n**query**            | Query command (optional)\n\n**Return**: <list> Matched content\n\n**Query examples:**\n\n - `[\"data/users/*/data.json\", \"topics\"]`: Returns all topics node from all user files\n - `[\"data/users/*/data.json\", \"comments.1@2\"]`: Returns `user_data[\"comments\"][\"1@2\"]` value from all user files\n - `[\"data/users/*/data.json\", \"\"]`: Returns all data from users files\n - `[\"data/users/*/data.json\"]`: Returns all data from users files (same as above)\n\n**Example:**\n```coffeescript\n@cmd \"fileQuery\", [\"data/users/*/data.json\", \"topics\"], (topics) =>\n\ttopics.sort (a, b) -> # Sort by date\n\t\treturn a.added - b.added\n\tfor topic in topics\n\t\t@log topic.topic_id, topic.inner_path, topic.title\n```\n\n\n---\n\n\n### fileRules\nReturn the rules for the file.\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | File inner path\n\n**Return**: <list> Matched content\n\n**Example result:**\n\n```json\n{\n\t\"current_size\": 2485,\n\t\"cert_signers\": {\"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"]},\n\t\"files_allowed\": \"data.json\",\n\t\"signers\": [\"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\"],\n\t\"user_address\": \"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\",\n\t\"max_size\": 100000\n}\n```\n\n**Example:**\n```coffeescript\n@cmd \"fileRules\", \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\", (rules) =>\n\t@log rules\n```\n\n\n---\n\n\n### fileWrite\n\nWrite file content\n\n\nParameter          | Description\n               --- | ---\n**inner_path**     | Inner path of the file you want to write\n**content_base64** | Content you want to write to file (base64 encoded)\n\n**Return**: \"ok\" on success else the error message\n\n**Example:**\n```coffeescript\nwriteData: (cb=null) ->\n\t# Encode to json, encode utf8\n\tjson_raw = unescape(encodeURIComponent(JSON.stringify({\"hello\": \"ZeroNet\"}, undefined, '\\t')))\n\t# Convert to to base64 and send\n\t@cmd \"fileWrite\", [\"data.json\", btoa(json_raw)], (res) =>\n\t\tif res == \"ok\"\n\t\t\tif cb then cb(true)\n\t\telse\n\t\t\t@cmd \"wrapperNotification\", [\"error\", \"File write error: #{res}\"]\n\t\t\tif cb then cb(false)\n```\n\n_Note:_ to write files that not in content.json yet, you must have `\"own\": true` in `data/sites.json` at the site you want to write\n\n\n---\n\n\n### ping\nTest UiServer websocket connection\n\n**Return:** pong\n\n\n---\n\n\n### serverInfo\n\n**Return:** <dict> All information about the server\n\n**Example:**\n```coffeescript\n@cmd \"serverInfo\", {}, (server_info) =>\n\t@log \"Server info:\", server_info\n```\n\n**Example return value:**\n```json\n{\n\t\"debug\": true, # Running in debug mode\n\t\"fileserver_ip\": \"*\", # Fileserver binded to\n\t\"fileserver_port\": 15441, # FileServer port\n\t\"ip_external\": true, # Active of passive mode\n\t\"platform\": \"win32\", # Operating system\n\t\"ui_ip\": \"127.0.0.1\", # UiServer binded to\n\t\"ui_port\": 43110, # UiServer port (Web)\n\t\"version\": \"0.2.5\" # Version\n}\n```\n\n\n\n\n---\n\n\n### siteInfo\n\n**Return**: <dict> All information about the site\n\n**Example:**\n```coffeescript\n@cmd \"siteInfo\", {}, (site_info) =>\n\t@log \"Site info:\", site_info\n```\n\n**Example return value:**\n```json\n{\n\t\"tasks\": 0, # Number of files currently under download\n\t\"size_limit\": 10, # Current site size limit in MB\n\t\"address\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\", # Site address\n\t\"next_size_limit\": 10, # Size limit required by sum of site's files\n\t\"auth_address\": \"2D6xXUmCVAXGrbVUGRRJdS4j1hif1EMfae\", # Current user's bitcoin address\n\t\"auth_key_sha512\": \"269a0f4c1e0c697b9d56ccffd9a9748098e51acc5d2807adc15a587779be13cf\", # Deprecated, dont use\n\t\"peers\": 14, # Peers of site\n\t\"auth_key\": \"pOBdl00EJ29Ad8OmVIc763k4\", # Deprecated, dont use\n\t\"settings\":  {\n\t\t\"peers\": 13, # Saved peers num for sorting\n\t\t\"serving\": true, # Site enabled\n\t\t\"modified\": 1425344149.365, # Last modification time of all site's files\n\t\t\"own\": true, # Own site\n\t\t\"permissions\": [\"ADMIN\"], # Site's permission\n\t\t\"size\": 342165 # Site total size in bytes\n\t},\n\t\"bad_files\": 0, # Files that needs to be download\n\t\"workers\": 0, # Current concurent downloads\n\t\"content\": { # Root content.json\n\t\t\"files\": 12, # Number of file, detailed file info removed to reduce data transfer and parse time\n\t\t\"description\": \"This site\",\n\t\t\"title\": \"ZeroHello\",\n\t\t\"signs_required\": 1,\n\t\t\"modified\": 1425344149.365,\n\t\t\"ignore\": \"(js|css)/(?!all.(js|css))\",\n\t\t\"signers_sign\": null,\n\t\t\"address\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\",\n\t\t\"zeronet_version\": \"0.2.5\",\n\t\t\"includes\": 0\n\t},\n\t\"cert_user_id\": \"zeronetuser@zeroid.bit\", # Currently selected certificate for the site\n\t\"started_task_num\": 1, # Last number of files downloaded\n\t\"content_updated\": 1426008289.71 # Content.json update time\n}\n```\n\n\n---\n\n\n### sitePublish\nPublish a content.json of the site\n\nParameter                 | Description\n                      --- | ---\n**privatekey** (optional) | Private key used for signing (default: current user's privatekey)\n**inner_path** (optional) | Inner path of the content json you want to publish (default: content.json)\n**sign** (optional)       | If True then sign the content.json before publish (default: True)\n\n**Return**: \"ok\" on success else the error message\n\n**Example:**\n```coffeescript\n# Prompt the private key\n@cmd \"wrapperPrompt\", [\"Enter your private key:\", \"password\"], (privatekey) =>\n\t$(\".publishbar .button\").addClass(\"loading\")\n\t# Send sign content.json and publish request to server\n\t@cmd \"sitePublish\", [privatekey], (res) =>\n\t\t$(\".publishbar .button\").removeClass(\"loading\")\n\t\t@log \"Publish result:\", res\n```\n\n\n---\n\n\n### siteReload\nReload content.json file content and scans for optional files\n\n**Return**: \"ok\" on success\n\n\n---\n\n\n### siteSign\nSign a content.json of the site\n\nParameter                              | Description\n                                   --- | ---\n**privatekey** (optional)              | Private key used for signing (default: current user's privatekey)\n**inner_path** (optional)              | Inner path of the content json you want to sign (default: content.json)\n**remove_missing_optional** (optional) | Remove the optional files from content.json that no longer present in the directory (default: False)\n\n**Return**: \"ok\" on success else the error message\n\n> __Note:__\n> Use \"stored\" as privatekey if its definied in users.json (eg. cloned sites)\n\n**Example:**\n```coffeescript\nif @site_info[\"privatekey\"] # Private key stored in users.json\n\t@cmd \"siteSign\", [\"stored\", \"content.json\"], (res) =>\n\t\t@log \"Sign result\", res\n```\n\n\n---\n\n\n\n### siteUpdate\n\nForce check and download changed content from other peers (only necessary if user is in passive mode and using old version of Zeronet)\n\nParameter     | Description\n          --- | ---\n**address**   | Address of site want to update (only current site allowed without site ADMIN permission)\n\n**Return:** None\n\n**Example:**\n```coffeescript\n# Manual site update for passive connections\nupdateSite: =>\n\t$(\"#passive_error a\").addClass(\"loading\").removeClassLater(\"loading\", 1000)\n\t@log \"Updating site...\"\n\t@cmd \"siteUpdate\", {\"address\": @site_info.address}\n```\n\n\n---\n\n\n### userGetSettings\n\nGet user's saved settings.\n\n**Return:** The user specific site's settings saved using userSetSettings.\n\n\n---\n\n\n### userSetSettings\n\nSet user's site specific settings.\n\nParameter     | Description\n          --- | ---\n**settings**  | The user's site specific settings you want to store.\n\n**Return:** ok on success\n\n\n---\n\n\n## Plugin: Bigfile\n\n\n### BigfileUploadInit\n\nInitialize a new upload endpoint for a bigfile.\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | Upload location\n**size**             | File size\n\n\n**Return**: A dict with the information about the upload:\n\nParameter              | Description\n                   --- | ---\n**url**                | Http upload endpoint\n**piece_size**         | Size of each separately hashed part of the file\n**inner_path**         | File path within the site\n**file_relative_path** | File path relative to content.json\n\n> __Note:__ Not supported non-ascii characters will be automatically removed from `inner_path` and `file_relative_path` values\n\n**Example**\n\n```javascript\nvar input = document.createElement('input')\ndocument.body.appendChild(input)\ninput.type = \"file\"\ninput.style.visibility = \"hidden\"\n\ninput.onchange = () => {\n    var file = input.files[0]\n    page.cmd(\"bigfileUploadInit\", [\"optional/\"+file.name, file.size], (init_res) => {\n        var formdata = new FormData()\n        formdata.append(file.name, file)\n\n        var req = new XMLHttpRequest()\n        req.upload.addEventListener(\"progress\", console.log)\n        req.upload.addEventListener(\"loadend\", () =>\n            page.cmd(\"wrapperConfirm\", [\"Upload finished!\", \"Open file\"],\n                () => { window.top.location = init_res.inner_path }\n            )\n        )\n        req.withCredentials = true\n        req.open(\"POST\", init_res.url)\n        req.send(formdata)\n    })\n}\ninput.click()\n```\n\n\n---\n\n## Plugin: Chart\n\n### chartDbQuery\n\nRun database query on chart database.\n\nArguments and return value: Same as [dbQuery](#dbquery-query-param)\n\n\n### chartGetPeerLocations\n\nGet list of unique peers in client\n\n**Return**: List of unique peers\n\n**Example**:\n```javascript\nPage.cmd(\"chartGetPeerLocations\")\n> [\n>  {lat: 43.6655, city: \"Toronto\", ping: null, lon: -79.4204, country: \"Canada\"},\n> ...\n> ]\n```\n\n---\n\n## Plugin: Cors\n\nAllow cross-site file access under virtual directory **/cors-siteaddress/** and grant cross-site database query using the [as](#as-address-cmd-arguments) API command.\n\n### corsPermission\n\nRequest Cross origin resource sharing permission with the given site.\n\nParameter            | Description\n                 --- | ---\n**address**          | The site address you want get cors access\n\n**Return**: ok on success\n\nAfter the permission is granted the other site's files will be available under **/cors-siteaddress/** virtual directory via http request or by the fileGet API command.\n\nThe site will be added to user's client if it's required.\n\n\n---\n\n\n## Plugin: CryptMessage\n\n\n### userPublickey\n\nGet user's site specific publickey\n\nParameter            | Description\n                 --- | ---\n**index** (optional) | Sub-publickey within site (default: 0)\n\n\n**Return**: base64 encoded publickey\n\n---\n\n### eciesEncrypt\n\nEncrypt a text using a publickey\n\nParameter                      | Description\n                           --- | ---\n**text**                       | Text to encrypt\n**publickey** (optional)       | User's publickey index (int) or base64 encoded publickey (default: 0)\n**return_aes_key** (optional)  | Get the AES key used in encryption (default: False)\n\n\n**Return**: Encrypted text in base64 format or [Encrypted text in base64 format, AES key in base64 format]\n\n---\n\n### eciesDecrypt\n\nTry to decrypt list of texts\n\nParameter                      | Description\n                           --- | ---\n**params**                     | A text or list of encrypted texts\n**privatekey** (optional)      | User's privatekey index (int) or base64 encoded privatekey (default: 0)\n\n\n**Return**: Decrypted text or list of decrypted texts (null for failed decodings)\n\n---\n\n### aesEncrypt\n\nEncrypt a text using the key and the iv\n\nParameter                      | Description\n                           --- | ---\n**text**                       | A text encrypt using AES\n**key** (optional)             | Base64 encoded password (default: generate new)\n**iv** (optional)              | Base64 encoded iv (default: generate new)\n\n\n**Return**: [base64 encoded key, base64 encoded iv, base64 encoded encrypted text]\n\n\n---\n\n### aesDecrypt\n\nDecrypt text using the IV and AES key\n\nParameter                      | Description\n                           --- | ---\n**iv**                         | IV in Base64 format\n**encrypted_text**             | Encrypted text in Base64 format\n**encrypted_texts**            | List of [base64 encoded iv, base64 encoded encrypted text] pairs\n**key**                        | Base64 encoded password for the text\n**keys**                       | Keys for decoding (tries every one for every pairs)\n\n\n**Return**: Decoded text or list of decoded texts\n\n\n---\n\n\n## Plugin: Newsfeed\n\n\n### feedFollow\n\nSet followed sql queries.\n\nThe SQL query should result in rows with cols:\n\nField          | Description\n           --- | ---\n**type**       | Type: post, article, comment, mention\n**date_added** | Event time\n**title**      | Event's first line to be displayed\n**body**       | Event's second and third line\n**url**        | Link to event's page\n\nParameter      | Description\n           --- | ---\n**feeds**      | Format: {\"query name\": [SQL query, [param1, param2, ...], ...}, parameters will be escaped, joined by `,` inserted in place of `:params` in the Sql query.\n\n**Return**: ok\n\n**Example:**\n```coffeescript\n# Follow ZeroBlog posts\nquery = \"\n\tSELECT\n\t post_id AS event_uri,\n\t 'post' AS type,\n\t date_published AS date_added,\n\t title AS title,\n\t body AS body,\n\t '?Post:' || post_id AS url\n\tFROM post\n\"\nparams = [\"\"]\nPage.cmd feedFollow [{\"Posts\": [query, params]}]\n```\n\n---\n\n### feedListFollow\n\nReturn of current followed feeds\n\n\n**Return**: The currently followed feeds in the same format as in the feedFollow commands\n\n\n---\n\n### feedQuery\n\nExecute all followed sql query\n\n\n**Return**: The result of the followed Sql queries\n\nParameter            | Description\n                 --- | ---\n**limit**            | Limit of results per followed site (default: 10)\n**day_limit**        | Return no older than number of this days (default: 3)\n\n---\n\n## Plugin: MergerSite\n\n\n### mergerSiteAdd\n\nStart downloading new merger site(s)\n\nParameter            | Description\n                 --- | ---\n**addresses**        | Site address or list of site addresses\n\n\n---\n\n### mergerSiteDelete\n\nStop seeding and delete a merged site\n\nParameter            | Description\n                 --- | ---\n**address**           | Site address\n\n\n---\n\n### mergerSiteList\n\nReturn merged sites.\n\nParameter            | Description\n                 --- | ---\n**query_site_info**  | If True, then gives back detailed site info for merged sites\n\n\n---\n\n\n## Plugin: Mute\n\n\n### muteAdd\n\nAdd new user to mute list. (Requires confirmation for non-ADMIN sites)\n\nParameter            | Description\n                 --- | ---\n**auth_address**     | Directory name of the user's data.\n**cert_user_id**     | Cert user name of the user\n**reason**           | Reason of the muting\n\n**Return**: ok if confirmed\n\n**Example:**\n```coffeescript\nPage.cmd(\"muteAdd\", ['1GJUaZMjTfeETdYUhchSkDijv6LVhjekHz','helloworld@kaffie.bit','Spammer'])\n```\n\n---\n\n### muteRemove\n\nRemove a user from mute list. (Requires confirmation for non-ADMIN sites)\n\nParameter            | Description\n                 --- | ---\n**auth_address**     | Directory name of the user's data.\n\n**Return**: ok if confirmed\n\n**Example:**\n```coffeescript\nPage.cmd(\"muteRemove\", '1GJUaZMjTfeETdYUhchSkDijv6LVhjekHz')\n```\n\n---\n\n### muteList\n\nList muted users. (Requires ADMIN permission on site)\n\n**Return**: List of muted users\n\n\n---\n\n\n## Plugin: OptionalManager\n\n\n### optionalFileList\n\nReturn list of optional files\n\nParameter            | Description\n                 --- | ---\n**address**          | The site address you want to list optional files (default: current site)\n**orderby**          | Order of returned optional files (default: time_downloaded DESC)\n**limit**            | Max number of returned optional files (default: 10)\n\n**Return**: Database row of optional files: file_id, site_id, inner_path, hash_id, size, peer, uploaded, is_downloaded, is_pinned, time_added, time_downlaoded, time_accessed\n\n---\n\n### optionalFileInfo\n\nQuery optional file info from database\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | The path of the file\n\n**Return**: Database row of optional file: file_id, site_id, inner_path, hash_id, size, peer, uploaded, is_downloaded, is_pinned, time_added, time_downlaoded, time_accessed\n\n---\n\n### optionalFilePin\n\nPin (exclude from automatized optional file cleanup) downloaded optional file\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | The path of the file\n**address**          | Address for the file (default: current site)\n\n---\n\n### optionalFileUnpin\n\nRemove pinning (include from automatized optional file cleanup) of downloaded optional file\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | The path of the file\n**address**          | Address for the file (default: current site)\n\n---\n\n### optionalFileDelete\n\nQuery a downloaded optional file\n\nParameter            | Description\n                 --- | ---\n**inner_path**       | The path of the file\n**address**          | Address for the file (default: current site)\n\n---\n\n### optionalLimitStats\n\nReturn currently used disk space by optional files\n\n**Return**: limit, used and free space statistics\n\n---\n\n\n### optionalLimitSet\n\nSet the optional file limit\n\nParameter            | Description\n                 --- | ---\n**limit**            | Max space used by the optional files in gb or percent of used space\n\n---\n\n### optionalHelpList\n\nList the auto-downloaded directories of optional files\n\nParameter            | Description\n                 --- | ---\n**address**          | Address of site you want to list helped directories (default: current site)\n\n**Return**: Dict of auto-downloaded directories and descriptions\n\n---\n\n\n### optionalHelp\n\nAdd directory to auto-download list\n\nParameter            | Description\n                 --- | ---\n**directory**        | Directory you want to add to auto-download list\n**title**            | Title for the entry (displayed on ZeroHello)\n**address**          | Address of site you want to add the auto-download directory (default: current site)\n\n---\n\n### optionalHelpRemove\n\nRemove an auto-download entry\n\nParameter            | Description\n                 --- | ---\n**directory**        | Directory you want to remove from auto-download list\n**address**          | Address of affected site (default: current site)\n\n---\n\n### optionalHelpAll\n\nHelp download every new uploaded optional file to the site\n\nParameter            | Description\n                 --- | ---\n**value**            | Enable or Disable the auto-download\n**address**          | Address of affected site (default: current site)\n\n\n---\n\n\n## Admin commands\n_(requires ADMIN permission in data/sites.json)_\n\n\n### as\n\nExecute command in other site's context\n\n\nParameter            | Description\n                 --- | ---\n**address**          | The context site's address\n**cmd**              | API command name\n**arguments**        | API command arguments\n\n**Return**: Command's return value\n\n\n**Example**\n\n```javascript\nPage.cmd(\"as\", [\"138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP\", \"siteSetLimit\", 20], console.log )\n```\n\n```javascript\naddress = \"138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP\"\nquery = \"SELECT * FROM json WHERE file_name = :file_name\"\nparams = {\"file_name\": \"data.json\"}\nPage.cmd(\"as\", [address, \"dbQuery\", [query, params]], function(res) { console.log(res.length) } )\n```\n\n---\n\n\n**Return**: ok\n\n### configSet\n\nCreate or update an entry in ZeroNet config file. (zeronet.conf by default)\n\n\nParameter            | Description\n                 --- | ---\n**key**              | Configuration entry name\n**value**            | Configuration entry new value\n\n\n**Return**: ok\n\n\n---\n\n\n\n### certSet\n\nSet the used certificate for current site.\n\nParameter            | Description\n                 --- | ---\n**domain**           | Domain of the certificate issuer\n\n**Return**: None\n\n\n---\n\n\n### channelJoinAllsite\n\nRequest notifications about every site's events.\n\nParameter           | Description\n               ---  | ---\n**channel**         | Channel to join (see channelJoin)\n\n**Return**: None\n\n\n\n\n---\n\n\n### serverPortcheck\n\nStart checking if port is opened\n\n**Return**: True (port opened) or False (port closed)\n\n\n---\n\n\n### serverShutdown\n\nStop running ZeroNet client.\n\n**Return**: None\n\n\n\n---\n\n\n### serverUpdate\n\nRe-download ZeroNet from github.\n\n**Return**: None\n\n\n---\n\n\n### siteClone\nCopy site files into a new one.\n\nEvery file and directory will be skipped if it has a `-default` subfixed version and the subfixed version will be copied instead of it.\n\n\nEg. If you have a `data` and a `data-default` directory: The `data` directory will not be copied and the `data-default` directory will be renamed to data.\n\nParameter           | Description\n               ---  | ---\n**address**         | Address of site want to clone\n**root_inner_path** | The source directory of the new site\n\n**Return**: None, automatically redirects to new site on completion\n\n\n---\n\n\n### siteList\n\n**Return**: <list> SiteInfo list of all downloaded sites\n\n\n---\n\n\n### sitePause\nPause site serving\n\nParameter           | Description\n               ---  | ---\n**address**         | Address of site want to pause\n\n**Return**: None\n\n\n---\n\n\n### siteResume\nResume site serving\n\nParameter           | Description\n               ---  | ---\n**address**         | Address of site want to resume\n\n**Return**: None \n",
			"date_added": 1543617005077,
			"slug": "zeroframe-api-command"
		},
		{
			"id": "1cb99bc0-f4ee-11e8-b95b-978a00aa8c1c",
			"body": "This is a copy of the [official documentation in zeronet.io](https://zeronet.io/docs/site_development/cert_authority/).\n\n---\n\n# Certificate Authority\n\nAn account without password? A certificate for me? You realize the ID system of ZeroNet does not conform to convention. In this section, you are going to learn about how user certificate and certificate authority work in ZeroNet.\n\n## What does a certificate authority do?\n\nIn ZeroNet, everything is signed by Bitcoin signing keys. A certificate provides a unique and memorizable name for a Bitcoin address. A certificate authority (or an ID provider) is responsible for proving the relationship between a unique friendly name and a Bitcoin address.\n\n## Certificate format\n\n### Body\n\nThe body of a certificate contains a Bitcoin address, a portal type, and a memorizable user name.\n\n```\n[BitcoinAddress]#[PortalType]/[UserName]\n```\n\n**Example:**\n\n```\n1H28iygiKXe3GUMcD77HiifVqtf3858Aft#web/hellozeronet\n```\n\n- Bitcoin address: `1H28iygiKXe3GUMcD77HiifVqtf3858Aft`\n- Portal type: `web`\n- User name: `hellozeronet`\n\n**General rules:**\n\nThe Bitcoin address, the portal type and the user name **must not** contain the character `#`, `@` or `/`\n\nOnly 0-9 and a-z are allowed in a user name. All English letters in a user name **must** be in lower case. Characters not in the allowed set **must not** be used as parts of a user name. A user name **should not** be too long. A user name **should** be legible and **should not** interfere with user interface rendering.\n\nA user name **must** be unique in the pool of all registered user names.\n\n### Signature\n\nA certificate signing algorithm loads a secret signing key and generates a deterministic Bitcoin signature for the body.\n\n**From the source code:**\n\n```python\nsign = os.popen(\"python zeronet.py --debug cryptSign %s#bitmsg/%s %s 2>&1\" % (auth_address, user_name, config.site_privatekey)).readlines()[-1].strip()\n```\n\n### Certificate\n\nBy looking at the source code of ZeroID, we know how a certificate is stored in its public database.\n\n```python\ndata[\"users\"][user_name] = \"bitmsg,%s,%s\" % (auth_address, sign)\n```\n\n**Example:**\n\n```\n\"hellozeronet\": \"web,1H28iygiKXe3GUMcD77HiifVqtf3858Aft,HA2A+iKekECD3hasrsN8IrR86BnXQ63kPH+9A85JLO9hLUpRJTBn62UfnuuF92B9CIc6+EewAIqzIn9UoVq2LPA=\"\n```\n\nA certificate can be stored in various formats. However, all formats must include:\n\n- The Bitcoin address: `1H28iygiKXe3GUMcD77HiifVqtf3858Aft`\n- The portal type: `web`\n- The user name: `hellozeronet`\n- The signature from authority: `HA2A+iKekECD3hasrsN8IrR86BnXQ63kPH+9A85JLO9hLUpRJTBn62UfnuuF92B9CIc6+EewAIqzIn9UoVq2LPA=`\n\n## Usage in `content.json`\n\nSite owners can choose which certificate authorities to trust.\n\nThe Blue Hub, for example, accepts certificates signed by ZeroID. This rule is defined in its `data/users/content.json`\n\n- The ID provider has a friendly name: `zeroid.bit`\n- The public key digest of the ID provider is: `1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz`\n\n```json\n\"user_contents\": {\n  \"cert_signers\": {\n   \"zeroid.bit\": [\n    \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"\n   ]\n  }\n}\n```\n\nEvery user presents his certificate in the manifest file in his Bitcoin folder. For example, `data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json` says:\n\n```json\n{\n \"address\": \"1BLueGvui1GdbtsjcKqCf4F67uKfritG49\",\n \"cert_auth_type\": \"web\",\n \"cert_sign\": \"HPiZsWEJ5eLnspUj8nQ75WXbSanLz0YhQf5KJDq+4bWe6wNW98Vv9PXNyPDNu2VX4bCEXhRC65pS3CM7cOrjjik=\",\n \"cert_user_id\": \"nofish@zeroid.bit\",\n \"files\": {\n  \"data.json\": {\n   \"sha512\": \"8e597412a2bc2726ac9a1ee85428fb3a94b09f4e7a3f5f589119973231417b15\",\n   \"size\": 21422\n  }\n },\n \"inner_path\": \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\",\n \"modified\": 1492458379,\n \"signs\": {\n  \"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\": \"G8kaZIGAstsiWLVY20e2ogJQi4OO+QuwqJ9GTj3gz7YleST/jst7RQH7hDn0uf8BJMBjFs35H3LPhNHHj4jueh8=\"\n }\n}\n```\n\nSite specific:\n\n- Expected site URL: `\"address\": \"1BLueGvui1GdbtsjcKqCf4F67uKfritG49\"`\n- Expected file path: `\"inner_path\": \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\"`\n\nCertificate information:\n\n- ID provider: `zeroid.bit`\n- User name: `nofish`\n- User Bitcoin address: `1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj`\n- Portal type: `web`\n- Signature from ID provider: `HPiZsWEJ5eLnspUj8nQ75WXbSanLz0YhQf5KJDq+4bWe6wNW98Vv9PXNyPDNu2VX4bCEXhRC65pS3CM7cOrjjik=`\n\n### The verifying process\n\n1. The verifying algorithm reads `data/users/content.json` to determine what is the expected site for the user content.\n\n2. The verifying algorithm reads `data/users/content.json` to look up the public key digest of the ID provider.\n\n3. Given a user Bitcoin address, a portal type and a user name, the verifying algorithm reconstructs the body of the certificate.\n\n4. The verifying algorithm checks the signature from the ID provider, with the public key defined in `data/users/content.json`, to ensure the authenticity of the certificate body.\n\n5. The verifying algorithm loads the user public key and checks the authenticity of the user content.\n\n## Features and limitations of certificate authorities\n\n- A certificate authority provides memorizable names for user public key digests. It also helps mitigate spam and unsolicited content.\n\n- A user does not have to give away secret information such as passwords. In addition, a user only has to authenticate once.\n\n- A certificate authority does not have to be approved by any ZeroNet developers. A site owner can choose which certificate authorities to trust for the sake of user content quality.\n\n- A certificate authority is responsible for maintaining its user name pool.\n\n- ZeroID does not revoke or renew certificates.\n\n## Can I live without certificate authorities?\n\nGenerally, a certificate is required when you add things to someone else's site. You do not need a certificate when you are modifying your own site.\n",
			"date_added": 1543616415613,
			"slug": "certification-authorities"
		},
		{
			"id": "e0f16080-f4ea-11e8-8fb2-afe1da9e3da0",
			"body": "# Censoring sites: is it possible? to which extent?\nZeroNet has as its base the intent to give the right to talk to everyone.\nDoes it succeed in its intent?\n\n## Censoring sites by external authorities\nSince every peer that has a site can seed it censoring a site with many peers requires shutting down every one of them, which is difficult to impossible to do, unless there is some big bug in the software itself.\n\n## Sites \"censored\" by owner\nThe owner of a site can publish a new version of the site deleting all the content and have it censored.\nThis already happened a couple of times for some site.\n\nThe problem with this is that an authority could search for the peer that is the owner of the site, go to its physical location and force it to delete the data in the site.\n\n## Possible solutions\nOne could implement in ZeroNet a way to send only a single update per file so that the other peers will deny deletion or modification of the file.\nIf this has other consequences has to be debated?",
			"date_added": 1543615026825,
			"slug": "censoring-sites"
		},
		{
			"id": "ee15d720-f4ca-11e8-96af-fbd3328cf77d",
			"body": "# Plugin: Adding translation to responses\nWe see how to add translation to an API response.\n\n```python\nfrom Plugin import PluginManager\nfrom Translate import Translate\n\n# Important lines to add translations: we first say where to look for translations\nif \"_\" not in locals():\n    _ = Translate(\"plugins/PLUGIN_NAME/languages/\")\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def actionGetPoem(self, to):\n        # Note that here we are using _ to get the translation\n        self.response(to, _[\"The quick brown fox jumped over the laxy dog\"])\n```\n\nIn the `languages` folder there should be a json file for each language, with its initials (i.e. 'it' for Italian, 'fr' for French, etc.) (I don't really know how to get the two letters given the language, but whatever) and the structure should be:\n```json\n{\n    \"ENGLISH_SENTENCE\": \"OTHER_LANGUAGE_SENTENCE\",\n    ...\n}\n```",
			"date_added": 1543601304979,
			"slug": "plugin---adding-translation"
		},
		{
			"id": "f8080880-f4c9-11e8-b203-1f61aa8e355c",
			"body": "# Plugin: creating a new permission and API calls\nWe will create our new permissions \"numbers\" to call our previous function numbers.\n\n```python\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    # What to do when our permission is added\n    def actionPermissionAdd(self, to, permission):\n        super(UiWebsocketPlugin, self).actionPermissionAdd(to, permission)\n        if permission == \"numbers\":\n            pass # Or do something if you have to. Remember that self.site points to the site which page we are currently viewing.\n\n    # We return a description of our permission\n    def actionPermissionDetails(self, to, permission):\n        if permission != \"numbers\":\n            return super(UiWebsocketPlugin, self).actionPermissionDetails(self, to, permission)\n        self.response(to, \"Allows to call the numbers action, which gives you a delicious number\")\n\n    # Our action that should check for permission\n    def actionNumbers(self, to):\n        if \"numbers\" in self.site.settings[\"permissions\"]:\n            self.response(to, 101)\n        else:\n            self.response(to, {\"error\": \"You don't have permission for this command\"})\n```\n\nThe code is self-esplicative, but note that you have to do explicit permission check in your command.",
			"date_added": 1543600892169,
			"slug": "plugin---permissions"
		},
		{
			"id": "c38e3970-f402-11e8-87b7-d5e1bcadf947",
			"body": "# Creating a Plugin: simple API command\nThis time we are going to create a plugin that exposes a simple command in the API that Zites can call.\nTo do that we are going to register our plugin to the `Ui/UiWebsocket.py#UiWebsocket` class and add a function to it which name starts with `action...`.\n\nThe code is below:\n```python\nfrom Plugin import PluginManager\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    # New action that can be called.\n    # Note that the sites will call \"getNumber\", with the first letter downcased.\n    def actionGetNumber(self, to, *params):\n        # 'to' is simply the site that called our command.\n        # We reply to it using response and a \"JSON object\" that the site will receive.\n        self.response(to, {\"number\": 101, \"your_params\": params})\n```\nThis time comments in the plugin are self-esplicative.\nNote that the action can accept parameters in various forms: we are discussing that later on.\n\nIf a site uses\n```javascript\nZeroFrame.cmd(\"getNumber\", [], function (response) {\n    console.log(response.number)\n})\n```\nhe will get printed out `101`.\n\nCalling instead\n```javascript\nZeroFrame.cmd(\"getNumber\", [\"p1\"], function (response) {\n    console.log(response.params)\n})\n```\nwill log `[\"p1\"]`.\n\n## Passing parameters to action\nWe copy the relevant ZN source code here:\n```python\n       # Support calling as named, unnamed parameters and raw first argument too\n        if type(params) is dict:\n            result = func(req[\"id\"], **params)\n        elif type(params) is list:\n            result = func(req[\"id\"], *params)\n        elif params:\n            result = func(req[\"id\"], params)\n        else:\n            result = func(req[\"id\"])\n\n        if result is not None:\n            self.response(req[\"id\"], result)\n```\n\nSo note that a site can call an action in various ways by using a dictionary, a list or something else.\n",
			"date_added": 1543515334280,
			"slug": "plugin---simple-api-command"
		},
		{
			"id": "08683880-f402-11e8-9c7d-31faf712db0f",
			"body": "# Current Plugin Architecture\n## Where are plugins stored\nThey are in the ZeroNet subfolder `ZeroNet/plugins`.\nYou may first want to [[find ZN folder]].\n\n## What are plugins\nEach plugin has its own directory inside the plugins one.\nA plugin is a Python module in which the `__init__.py` file must import the classes that execute actual code.\n\nIn ZeroNet the imported classes \"patch\" the existing ZN core code, so plugin load order **is** important.\n\n## Creating a do-nothing plugin\nWe are now going to create a plugin that binds itself to the class `src/Site/Site.py#Site`, which manages what a single user Site does, to print to the screen the moment at which such `Site` class is created.\n\nUnder the `plugins` directory create a directory named `HelloSite` which is the name of our plugin\n\nInside `HelloSite` create the `__init__.py` file with the following content:\n```python\nimport HelloSitePlugin\n```\nwhich will load our file `HelloSitePlugin.py`, which is the main one and contains:\n```python\nfrom Plugin import PluginManager\n\n@PluginManager.registerTo(\"Site\")\nclass ASitePlugin(object):\n    def __init__(self, address, *args, **kwargs):\n        print(\"!!! Site %s loaded\" % address)\n        super(ASitePlugin, self).__init__(address, *args, **kwargs)\n\n```\n\nWe are now going to explain it:\n- In the first line we import the PluginManager which allow us to declare which class of ZeroNet we would like to patch\n- We should think of the class `ASitePlugin` as inheriting from `Site` and as such we can add our custom methods or patch existing ones. We do a very basic thing here: in the initialization we simply print the address of the site, and then we let other zeronet code to do its work.\n\nYou should now be able to save the files and restarting ZeroNet you will see in the execution log the printed lines of the sites that are loaded.\n\n## Disabling a plugin\nIf you don't want to loose you precious code nor want to see all the lines about the sites you have, you can simply rename the directory from `HelloSite` to `disabled-HelloSite` and ZeroNet won't load your plugin the next time.",
			"date_added": 1543515020297,
			"slug": "current-plugin-architecture"
		},
		{
			"id": "ae5a0580-f401-11e8-aca3-a78bf20ed8fe",
			"body": "# Creating a Plugin: simple API command\nThis time we are going to create a plugin that exposes a simple command in the API that Zites can call.\nTo do that we are going to register our plugin to the `Ui/UiWebsocket.py#UiWebsocket` class and add a function to it which name starts with `action...`.\n\nThe code is below:\n```python\nfrom Plugin import PluginManager\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    # New action that can be called.\n    # Note that the sites will call \"getNumber\", with the first letter downcased.\n    def actionGetNumber(self, to):\n        # 'to' is simply the site that called our command.\n        # We reply to it using response and a \"JSON object\" that the site will receive.\n        self.response(to, {\"number\": 101})\n```\nThis time comments in the plugin are self-esplicative.\n",
			"date_added": 1543514869209,
			"slug": "plugin---simple-api-command"
		},
		{
			"id": "cf2b4360-f3fb-11e8-b4bc-7d38deb72126",
			"body": "# Current Plugin Architecture\n## Where are plugins stored\nThey are in the ZeroNet subfolder `ZeroNet/plugins`.\nYou may first want to [[find ZN folder]].\n\n## What are plugins\nEach plugin has its own directory inside the plugins one.\nA plugin is a Python module in which the `__init__.py` file must import the classes that execute actual code.\n\nIn ZeroNet the imported classes \"patch\" the existing ZN core code, so plugin load order **is** important.\n\n## Creating a do-nothing plugin\nWe are now going to create a plugin that binds itself to the class `src/Site/Site.py#Site`, which manages what a single user Site does, to print to the screen the moment at which such `Site` class is created.\n\nUnder the `plugins` directory create a directory named `HelloSite` which is the name of our plugin\n\nInside `HelloSite` create the `__init__.py` file with the following content:\n```python\nimport HelloSitePlugin\n```\nwhich will load our file `HelloSitePlugin.py`, which is the main one and contains:\n```python\nfrom Plugin import PluginManager\n\nallow_reload = False\n\n@PluginManager.registerTo(\"Site\")\nclass ASitePlugin(object):\n    def __init__(self, address, *args, **kwargs):\n        print(\"!!! Site %s loaded\" % address)\n        super(ASitePlugin, self).__init__(address, *args, **kwargs)\n\n```\n\nWe are now going to explain it:\n- In the first line we import the PluginManager which allow us to declare which class of ZeroNet we would like to patch\n- We set `allow_reload = False` to ask ZeroNet not to reload our plugin. I'm not really sure about what this does.\n- We should think of the class `ASitePlugin` as inheriting from `Site` and as such we can add our custom methods or patch existing ones. We do a very basic thing here: in the initialization we simply print the address of the site, and then we let other zeronet code to do its work.\n\nYou should now be able to save the files and restarting ZeroNet you will see in the execution log the printed lines of the sites that are loaded.\n\n## Disabling a plugin\nIf you don't want to loose you precious code nor want to see all the lines about the sites you have, you can simply rename the directory from `HelloSite` to `disabled-HelloSite` and ZeroNet won't load your plugin the next time.",
			"date_added": 1543512347286,
			"slug": "current-plugin-architecture"
		},
		{
			"id": "2b4bf4f0-f3f7-11e8-8222-739f76916440",
			"body": "# Other places to find documentation\n\n- [ZeroNet official documentation](https://zeronet.readthedocs.io/en/latest/): official (and very scarce) documentation about ZeroNet.\n- [ZeroNet new official documentation](https://zeronet.io/docs): remade by anon, much more detailed and useful.\n- [ZeroNet Dev Center](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt) a simple site with some tutorials\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official ZeroNet blog, some posts are tutorial.\n- [Developer Resource Index](/Talk.ZeroNetwork.bit/?Topic:1509171908_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h) on a ZeroTalk post.\n- [The truth about ZeroNet](https://github.com/imachug/The-Truth-about-ZeroNet), a series of tutorials written by imachug to get started developing sites up to merger sites (available also in [[The truth about ZeroNet|this wiki]])\n- [ZeroMedium](/1CVmbCKWtbskK2GAZLM6gnMuiL6Je25Yds): where users publishes their story. While not exactly made to document something, it has many articles about ZeroNet.\n- [Another wiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP/?Page:devresources)",
			"date_added": 1543510354369,
			"slug": "other-documentation"
		},
		{
			"id": "079f5d30-f2e4-11e8-a75f-5de54a6953ca",
			"body": "# Other places to find documentation\n\n- [ZeroNet official documentation](https://zeronet.readthedocs.io/en/latest/): official (and very scarce) documentation about ZeroNet.\n- [ZeroNet Dev Center](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt) a simple site with some tutorials\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official ZeroNet blog, some posts are tutorial.\n- [Developer Resource Index](/Talk.ZeroNetwork.bit/?Topic:1509171908_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h) on a ZeroTalk post.\n- [The truth about ZeroNet](https://github.com/imachug/The-Truth-about-ZeroNet), a series of tutorials written by imachug to get started developing sites up to merger sites (available also in [[The truth about ZeroNet|this wiki]])\n- [ZeroMedium](/1CVmbCKWtbskK2GAZLM6gnMuiL6Je25Yds): where users publishes their story. While not exactly made to document something, it has many articles about ZeroNet.\n- [Another wiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP/?Page:devresources)",
			"date_added": 1543392182915,
			"slug": "other-documentation"
		},
		{
			"id": "d5c7a410-f27b-11e8-9940-dbb9a2f114bb",
			"body": "# Available frameworks to write ZN sites\n\n- [ZeroDevLib](https://github.com/imachug/ZeroDevLib), documented js files that wrap commonly used functionalities on ZeroNet and can speed up your site development.\n- [Mavo](/1F6Rt2QNMA6uJTSTZkDNBfXTd3unrtgcdJ) ZeroNet storage experimental plugin for Mavo that allows apps written in Mavo to run also on ZeroNet with almost no change. \n\n# Other tools\n\n- [ZeroDB](/1EKfFGBWNHLTpPHsfTz3YfSd6nkNM9q4Yf), which helps you lay out a site `dbschema`.",
			"date_added": 1543347431634,
			"slug": "available-frameworks"
		},
		{
			"id": "7eb30700-f244-11e8-b5f8-55ba1f9e5562",
			"body": "# Deploying a static site\n\nFor now see [[TTAZ - Creating Static Zite|The truth about zeronet: static sites]].",
			"date_added": 1543323663217,
			"slug": "deploying-a-static-site"
		},
		{
			"id": "62996c80-f244-11e8-89e4-af5765fa31cb",
			"body": "# Deploying a static site\n\nFor now see [[TTAZ - Creating Static Site|The truth about zeronet: static sites]].",
			"date_added": 1543323616073,
			"slug": "deploying-a-static-site"
		},
		{
			"id": "885395f0-f243-11e8-bde6-4d79da105593",
			"body": "# Currently available plugins (rev3729, ~ End of November 2018)\nThis page should list the available ZeroNet plugins (that can be found in the `plugin` folder of ZeroNet) along with some description to better document them.\nMore details are given in the single plugin page.\n\n## AnnounceLocal\n\n## AnnounceShare\n\n## AnnounceZero\n\n## BigFile\nThis plugin allows upload of big files to zeronet.\nThe files are chunked and uploaded in pieces.\n\n## Chart\n\n## ContentFilter\n\n## Cors\n\n## CryptMessage\n\n## Bootstrapper (default disabled)\n\n## Dnschain (default disabled)\n\n## DonationMessage (default disabled)\n\n## Multiuser (default disabled)\n\n## StemPort (default disabled)\n\n## UiPassword (default disabled)\n\n## Zeroname-local (default disabled)\n\n## FilePack\n\n## MergerSite\n\n## Newsfeed\n\n## OptionalManager\n\n## PeerDb\n\n## Sidebar\n\n## Stats\n\n## TranslateSite\n\n## Trayicon\n\n## UiConfig\n\n## Zeroname\n",
			"date_added": 1543323249871,
			"slug": "currently-available-plugins"
		},
		{
			"id": "48648270-f242-11e8-8c42-9b77fe841df0",
			"body": "# Other places to find documentation\n\n- [ZeroNet official documentation](https://zeronet.readthedocs.io/en/latest/): official (and very scarce) documentation about ZeroNet.\n- [ZeroNet Dev Center](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt) a simple site with some tutorials\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official ZeroNet blog, some posts are tutorial.\n- [Developer Resource Index](/Talk.ZeroNetwork.bit/?Topic:1509171908_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h) on a ZeroTalk post.\n- [The truth about ZeroNet](https://github.com/imachug/The-Truth-about-ZeroNet), a series of tutorials written by imachug to get started developing sites up to merger sites (available also in [[The truth about ZeroNet|this wiki]])\n- [ZeroMedium](/1CVmbCKWtbskK2GAZLM6gnMuiL6Je25Yds): where users publishes their story. While not exactly made to document something, it has many articles about ZeroNet.\n",
			"date_added": 1543322713113,
			"slug": "other-documentation"
		},
		{
			"id": "ae797a80-f237-11e8-bc8b-b510a1de771f",
			"body": "# Help spread your site\nThere is no such thing as \"hosting service\" in ZeroNet since every peer who visits your site is helping you seeding to other peers.\nWhen you start a new site, you will be the only peer available, so it will be difficult to spread the site to other, for example at night if you shut down you computer.\nTo help you out, there are some \"proxy\" sites and some site that help you spread yours.\n\nYou first need to [[Find your site address]] to visit it in the proxy sites (simply copy it in the address bar as `https://PROXY_SITE/MY_SITE_ADDRESS`).\n\n## Proxy sites\n- [0net.io](https://0net.io/)\n- [@amorgan's proxy](http://zn.amorgan.xyz/)\n- [ZeroGate](https://zerogate.tk/)\n\n## Sites for spreading\n- [New 0Net Sites](/1LtvsjbtQ2tY7SCtCZzC4KhErqEK3bXD4n): add a site to the list and other \"donors\" will spread it.",
			"date_added": 1543318159915,
			"slug": "help-spread-your-site"
		},
		{
			"id": "397e7f20-f235-11e8-9999-aba2ab322415",
			"body": "This article is part of [[The Truth about ZeroNet]] series of tutorials.\n\n---\n\n# Ugly things\n\nThis part is for developers who use ZeroNet and ZeroFrame API often. Here I'll talk about some strange things in ZeroFrame API which I know only because I read source code.\n\n\n## `dbQuery`\n\n### `?` placeholder\n\nFrom ZeroMe source code:\n\n    return Page.cmd(\"dbQuery\", [\n        \"SELECT * FROM json WHERE ?\", {\n            directory: directory\n        }\n    ], function(subject_rows) {\n\nThat is equal to (See note 1):\n\n    SELECT * FROM json WHERE\n        directory = ${directory}\n\nYou can also use multiple key/value pairs, that means:\n\n    SELECT * FROM json WHERE\n        key1 = ${value1} AND\n        key2 = ${value2} AND\n        key3 = ${value3}\n\n\nIf you want to make some condition negative, prepend key with `not__`:\n\n    Page.cmd(\"dbQuery\", [\n        \"SELECT * FROM json WHERE ?\", {\n            not__json_id: 2,\n            file_name: \"data.json\"\n        }\n    ], handler);\n\n    SELECT * FROM json WHERE\n        json_id != 2 AND\n        file_name = \"data.json\"\n\n\nYou can also use array as value: (See note 2)\n\n    Page.cmd(\"dbQuery\", [\n        \"SELECT * FROM json WHERE ?\", {\n            not__json_id: [2, 3],\n            file_name: [\"content.json\", \"data.json\"]\n        }\n    ], handler);\n\n    SELECT * FROM json WHERE\n        json_id NOT IN (2, 3) AND\n        file_name IN (\"content.json\", \"data.json\")\n\n\n### `:` placeholder\n\nBut what if you want to use some special rules (like `A=a and (B=b or C=c)`) but still want to use placeholders? Use `:`!\n\nFrom ZeroMe source code:\n\n    return Page.cmd(\"dbQuery\", [\"SELECT * FROM json WHERE site = :site AND directory = :directory LIMIT 1\", params], (function(_this) {\n\nPass parameters as usual (object as second argument) and then use `:{key}` placeholder to get that value!\n\n\n## User content\n\nRemember this `data/users/content.json` we often use?\n\n    {\n        \"files\": {},\n        \"ignore\": \".*\",\n        \"user_contents\": {\n            \"cert_signers\": {\n                \"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"]\n            },\n            \"permission_rules\": {\n                \".*\": {\n                    \"files_allowed\": \"data.json\",\n                    \"max_size\": 50000\n                }\n            },\n            \"permissions\": {}\n        }\n    }\n\nCurrently only site admin can sign user content (eg. delete posts). And what if we want to add moderators?\n\n    ...\n    \"permission_rules\": {\n        \".*\": {\n            \"files_allowed\": \"data.json\",\n            \"max_size\": 50000,\n            \"signers\": [\"1Abc\"]\n        }\n    },\n    ...\n\nWe add `signers` to `permission_rules` items! Now, `1Abc` can sign all users' content. And if you move `signers` to a new item, `.*bot@.*`, `1Abc` will be able to sign only `...bot` user content.\n\n\n## Notes\n\n### Note 1\n\nFrom `Db/DbCursor.py` of ZeroNet source code:\n\n    def execute(self, query, params=None):\n        if isinstance(params, dict) and \"?\" in query:  # Make easier select and insert by allowing dict params\n            if query.startswith(\"SELECT\") or query.startswith(\"DELETE\") or query.startswith(\"UPDATE\"):\n                # Convert param dict to SELECT * FROM table WHERE key = ? AND key2 = ? format\n                query_wheres = []\n\n### Note 2\n\nFrom `Db/DbCursor.py` of ZeroNet source code:\n\n    if type(value) is list:\n        if key.startswith(\"not__\"):\n            query_wheres.append(key.replace(\"not__\", \"\") + \" NOT IN (\" + \",\".join([\"?\"] * len(value)) + \")\")\n        else:\n            query_wheres.append(key + \" IN (\" + \",\".join([\"?\"] * len(value)) + \")\")\n",
			"date_added": 1543317104659,
			"slug": "ttaz---ugly-things"
		},
		{
			"id": "290c98c0-f235-11e8-b538-c9a2e1816a9d",
			"body": "This article is part of [[The Truth about ZeroNet]] series of tutorials.\n\n---\n\n## Editing merged sites\n\nIn the previous part, we made a merger site and a merged site (hub) for our new zite, *PostHere*.\n\n\n## Creating directory for user content\n\nFirst of all we have to create `data/users/content.json` in our hub. Nothing new here.\n\n    {\n        \"ignore\": \".*\",\n        \"user_contents\": {\n            \"cert_signers\": {\n                \"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"]\n            },\n            \"permission_rules\": {\n                \".*\": {\n                    \"files_allowed\": \"data.json\",\n                    \"max_size\": 50000\n                }\n            },\n            \"permissions\": {}\n        }\n    }\n\n- `ignore` - don't add users to `files` property.\n- `user_contents` - user-signed content.\n- `user_contents.cert_signers` - allowed *Certificate Authorities*.\n- `user_contents.permission_rules` - multiuser permissions.\n- `user_contents.permissions` - single user permissions.\n\n...And include it to root `content.json`:\n\n    ...\n    \"ignore\": \"data/users/.*\",\n    \"includes\": {\n        \"data/users/content.json\": {\n            \"signers\": [],\n            \"signers_required\": 1\n        }\n    },\n    ...\n    \n\nSign `content.json` and then `data/users/content.json`.\n\n\n## Database schema\n\nAs usual, we will use SQLite. Add this `dbschema.json` to main site:\n\n    {\n        \"db_name\": \"merger\",\n        \"db_file\": \"merged-PostHere/merger.db\",\n        \"version\": 3,\n        \"maps\": {\n            \".+/data/users/.+/content.json\": {\n                \"to_json_table\": [\"cert_user_id\"]\n            },\n            \".+/data/users/.+/data.json\": {\n                \"to_table\": [\n                    {\n                        \"node\": \"posts\",\n                        \"table\": \"posts\"\n                    }\n                ]\n            }\n        },\n        \"tables\": {\n            \"json\": {\n                \"cols\": [\n                    [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                    [\"site\", \"TEXT\"],\n                    [\"directory\", \"TEXT\"],\n                    [\"file_name\", \"TEXT\"],\n                    [\"cert_user_id\", \"TEXT\"]\n                ],\n                \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, site, file_name)\"],\n                \"schema_changed\": 2\n            },\n            \"posts\": {\n                \"cols\": [\n                    [\"id\", \"integer\"],\n                    [\"title\", \"text\"],\n                    [\"content\", \"text\"],\n                    [\"date_added\", \"integer\"],\n                    [\"json_id\", \"integer references json(json_id)\"]\n                ],\n                \"indexes\": [\n                    \"CREATE UNIQUE INDEX post_id ON posts(id)\"\n                ],\n                \"schema_changed\": 2\n            }\n        }\n    }\n\n- Have a look at `version: 3`. This means: `json` table will now have `site` column, too. For merger sites, `site` is hub address. We also use `merged-PostHere` directory for database. This will be described later.\n- Look at `.+/data/users/.+/content.json` object. It has `to_json_table` array with `[\"cert_user_id\"]`. `json` table also has `cert_user_id` column. `to_json_table` means: \"take `cert_user_id` property from file and use it for `cert_user_id` column of `json` table for this json\". `cert_user_id` is username.\n\n\n### Getting username\n\nSo, sample content is:\n\n    +-------------------------------------------------------------------------+\n    |                                  json                                   |\n    +---------+---------+-------------------+--------------+------------------+\n    | json_id | site    | directory         | file_name    | cert_user_id     |\n    +---------+---------+-------------------+--------------+------------------+\n    | 1       | 1Red... | data/users/1Cv... | data.json    | NULL             |\n    +---------+---------+-------------------+--------------+------------------+\n    | 2       | 1Red... | data/users/1CV... | content.json | ivanq@zeroid.bit |\n    +---------+---------+-------------------+--------------+------------------+\n    +-------------------------------------------------------------------------+\n    |                                  posts                                  |\n    +---------+-------------+--------------------------+------------+---------+\n    | id      | title       | content                  | date_added | json_id |\n    +---------+-------------+--------------------------+------------+---------+\n    | 1       | Hello world | My first post in this... | 1234567890 | 1       |\n    +---------+-------------+--------------------------+------------+---------+\n\nEverything is OK until you want to get post author. For each post, you have to take `json_id`, then get `directory` column of this `json_id` in `json` table, then find a row in `json` table which has `directory` = `directory` of old `json_id` and `file_name` = `content.json` and then get `cert_user_id`. So, simplest DB query is:\n\n    SELECT posts.*, json2.cert_user_id as username FROM posts, json, json AS json2 WHERE json.directory = json2.directory AND json2.file_name = \"content.json\" AND posts.json_id = json.json_id\n\nHopefully, ZeroNet has another option for this.\n\n    ...\n    \".+/data/users/.+/content.json\": {\n        \"to_json_table\": [\"cert_user_id\"],\n        \"file_name\": \"data.json\"\n    },\n    ...\n\n`file_name` works like `JOIN`. For each user's `content.json`, ZeroNet find a row with same `site` and `directory` properties and with `file_name` = `data.json` and adds `cert_user_id` to this row. So, now structure is:\n\n    +-------------------------------------------------------------------------+\n    |                                  json                                   |\n    +---------+---------+-------------------+--------------+------------------+\n    | json_id | site    | directory         | file_name    | cert_user_id     |\n    +---------+---------+-------------------+--------------+------------------+\n    | 1       | 1Red... | data/users/1Cv... | data.json    | ivanq@zeroid.bit |\n    +---------+---------+-------------------+--------------+------------------+\n    +-------------------------------------------------------------------------+\n    |                                  posts                                  |\n    +---------+-------------+--------------------------+------------+---------+\n    | id      | title       | content                  | date_added | json_id |\n    +---------+-------------+--------------------------+------------+---------+\n    | 1       | Hello world | My first post in this... | 1234567890 | 1       |\n    +---------+-------------+--------------------------+------------+---------+\n\n...and we can simplify our query:\n\n    SELECT posts.*, json.cert_user_id AS username FROM posts, json WHERE posts.json_id = json.json_id\n\n\nSo, now you can use your memory or previous sections to write the rest of the code. As you remember, ZeroNet uses virtual directories, for merger sites, so there is nothing new here expect file we change: `merged-PostHere/{hub}/data/users/{address}/data.json`.\n\n\n## Adding and removing hubs\n\nWe can show users a list of hubs they doesn't have with `mergerSiteList` command.\n\n    +-------------------------------------------------------------------------+\n    |                             mergerSiteList                              |\n    +-------------------------------------------------------------------------+\n    | Return merged sites.                                                    |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | query_site_info         | If True, then gives back detailed site info   |\n    |                         | for merged sites                              |\n    +-------------------------+-----------------------------------------------+\n    | Return: List of merger sites as object                                  |\n    +-------------------------------------------------------------------------+\n\nTry to execute `zeroFrame.cmd(\"mergerSiteList\", [false], console.log.bind(console));` You'll see `Object { 1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ: \"PostHere\" }` or something like that in the console.\n\nThese commands are also often used by merger sites:\n\n    +-------------------------------------------------------------------------+\n    |                              mergerSiteAdd                              |\n    +-------------------------------------------------------------------------+\n    | Start downloading new merger site (requires confirmation if called      |\n    | twice in 10 seconds)                                                    |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | addresses               | Site address or list of site addresses        |\n    +-------------------------+-----------------------------------------------+\n    | Return: Always \"ok\" (even before site is added)                         |\n    +-------------------------------------------------------------------------+\n    \n    +-------------------------------------------------------------------------+\n    |                            mergerSiteDelete                             |\n    +-------------------------------------------------------------------------+\n    | Stop seeding and delete a merged site                                   |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | address                 | Site address                                  |\n    +-------------------------+-----------------------------------------------+\n    | Return: \"ok\" or object with \"error\" property                            |\n    +-------------------------------------------------------------------------+\n\n\n## Example\n\nAs usually, you can watch finished site [here](downloads/posthere.html) and hub [here](downloads/postherehub.html).\n",
			"date_added": 1543317077070,
			"slug": "ttaz---editing-merged-sites"
		},
		{
			"id": "15a937c0-f235-11e8-84d9-81add972d383",
			"body": "This article is part of [[The Truth about ZeroNet]] series of tutorials.\n\n---\n\n# Merger sites\n\nLet's have a look at ZeroMe. It's a social network with about 10 000 users. And each user can write a lot of data. So, we would have to let ZeroMe use around 600 MB of storage. Really bad. Hopefully, ZeroNet introduces merger sites to solve this problem.\n\n\n## Structure\n\nImagine the following structure:\n\n    ZeroMe = 500 MB\n    |\n    +-- data = 500 MB\n    |   |\n    |   +-- users = 500 MB\n    |       |\n    |       +-- user1 = 50 KB\n    |       +-- user2 = 50 KB\n    |       +-- user3 = 50 KB\n    |       +-- user4 = 50 KB\n    |       +-- user5 = 50 KB\n    |       +-- user...\n    |       +-- user10000 = 50 KB\n    +-- index.js = 250 KB\n    +-- index.css = 100 KB\n    +-- index.html = 50 KB\n\nHere, users have to download all other users' data (`userN` directories).\n\n\nAnd the imagine this:\n\n    ZeroMe = 400 KB\n    |\n    +-- index.js = 250 KB\n    +-- index.css = 100 KB\n    +-- index.html = 50 KB\n    \n    UserDB = 10 MB\n    |\n    +-- data = 10 MB\n    |   |\n    |   +-- userinfo = 10 MB\n    |       |\n    |       +-- user1 = 1 KB\n    |       +-- user2 = 1 KB\n    |       +-- user3 = 1 KB\n    |       +-- user4 = 1 KB\n    |       +-- user5 = 1 KB\n    |       +-- user...\n    |       +-- user10000 = 1 KB\n    +-- index.html = 5 KB\n    \n    Hub1 = 167 MB\n    |\n    +-- data = 167 MB\n    |   |\n    |   +-- users = 167 MB\n    |       |\n    |       +-- user1 = 50KB\n    |       +-- user2 = 50KB\n    |       +-- user...\n    |       +-- user3333 = 50KB\n    +-- index.html = 5 KB\n    \n    Hub2 = 167 MB\n    |\n    +-- data = 167 MB\n    |   |\n    |   +-- users = 167 MB\n    |       |\n    |       +-- user3334 = 50KB\n    |       +-- user3335 = 50KB\n    |       +-- user...\n    |       +-- user6666 = 50KB\n    +-- index.html = 5 KB\n    \n    Hub3 = 167 MB\n    |\n    +-- data = 167 MB\n    |   |\n    |   +-- users = 167 MB\n    |       |\n    |       +-- user6667 = 50KB\n    |       +-- user6668 = 50KB\n    |       +-- user...\n    |       +-- user10000 = 50KB\n    +-- index.html = 5 KB\n\nSo, we have splitted data to different zites. That's how merger sites work. *ZeroMe* (`1MeFqFfFFGQfa1J3gJyYYUvb5Lksczq7nH` in reality) has only layout and code, *UserDB* (`1UDbADib99KE9d3qZ87NqJF2QLTHmMkoV`) user metadata, while other zites - *hubs* have other data. Of course, downloading these hubs is optional.\n\nFor example, if you download `ZeroMe`, `UserDB` and `Hub1`, you can communicate with `user878` and `user678` and learn that there are also `user5412`, `user3453` and `user6789` and that they are assigned to `Hub2` and `Hub3` zites. If you want to say *Hello!* to `user6789` or read his posts, you have to download `Hub3`. But usually you want to read *something*, not *everything*, and you download only 1-2 hubs.\n\n\n## Making merger site\n\nFirst of all, let's make a new, empty zite. Open sidebar and name it `PostHere`. Remove all content from `<body>` of `index.html`. We will have data in hubs, and code in main `PostHere` zite.\n\n\n## Making hub\n\nLet's make a new zite for content. This site address is `1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ` for me.\n\nChange `index.html` to:\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n            <base href=\"\" target=\"_top\" id=\"base\">\n            <script>\n                base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")\n            </script>\n        </head>\n        <body>\n            Use PostHere to watch content of this site.\n        </body>\n    </html>\n\nChange zite title if you want to `Red Hub` and sign `content.json`.\n\n\n## Configurating merger sites\n\nMerger site (`1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm`, in my case) and merged site (`1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ`) must agree to make connection.\n\n\nSo, let's add the following to root `content.json` our merged site (`1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ`):\n\n    \"merged_type\": \"PostHere\",\n\n\nNow create a directory `merged-PostHere` in the root of merger site. We want users to sign this folder, so add:\n\n    \"ignore\": \"merged-.*\",\n\n...somewhere to `content.json` of main site. To virtually fill it with merger site content, we request `Merger:PostHere` permission:\n\n    +-------------------------------------------------------------------------+\n    |                          wrapperPermissionAdd                           |\n    +-------------------------------------------------------------------------+\n    | Request new permission for site                                         |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | permission              | Name of permission                            |\n    +-------------------------+-----------------------------------------------+\n    | Return: \"Granted\" if allowed, not send when disallowed                  |\n    +-------------------------------------------------------------------------+\n\n\nSo, add the following to `js/index.js` file and add it to `index.html` of PostHere:\n\n    window.zeroFrame = new ZeroFrame();\n    \n    function requestPermission(permission, callback) {\n        zeroFrame.cmd(\"siteInfo\", [], function(siteInfo) {\n            // Already have permission\n            if(siteInfo.settings.permissions.indexOf(permission) > -1) {\n                callback();\n                return;\n            }\n            \n            zeroFrame.cmd(\"wrapperPermissionAdd\", [permission], callback);\n        });\n    }\n    \n    requestPermission(\"Merger:PostHere\", function() {\n        // TODO\n    });\n\n\n## Accessing merged sites\n\nZeroNet doesn't provide us a way to read and write other site's content, so MergerSite plugin makes all `merged-...` directories virtual. So to ZeroNet `merged-PostHere` structure is:\n\n    merged-PostHere\n    |\n    +-- merger.db\n    +-- 1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ\n        |\n        +-- js\n        |   |\n        |   +-- ZeroFrame.js\n        +-- data\n        |   |\n        |   +-- users\n        |       |\n        |       +-- user1\n        |       |   |\n        |       |   +-- data.json\n        |       |   +-- content.json\n        |       +-- content.json\n        +-- index.html\n\nWe have set `db_path` to `merged-PostHere/merger.db` because ZeroNet can gather data only from files which are in database directory, which is in this case `merged-PostHere`.\n\nSo, if we want to access `data/users/{address}/data.json` of `1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ`, we have to access `merged-PostHere/1RedXn7jxM23y4WsR7ByWzhjFaCcBJwVQ/data/users/{address}/data.json`.\n\nIn the following part of the tutorial, we will fill our `PostHere` zite with user content.\n",
			"date_added": 1543317044541,
			"slug": "ttaz---merger-sites"
		},
		{
			"id": "033518c0-f235-11e8-9cdb-cfb89eaf5247",
			"body": "This article is part of [[The Truth about ZeroNet]] series of tutorials.\n\n---\n\n# Editing user data\n\nNow let's try to edit user content. Remember, we are going to write a voting system.\n\n\n## `data.json` files\n\nNow let's write a function which will add a question.\n\n\nFirst of all, we will take our `js/files.js` program and include it to `index.html`:\n\n    function readFile(file, callback) {\n        zeroFrame.cmd(\"fileGet\", [file, false], callback);\n    }\n    \n    function writeFile(file, content, callback) {\n        zeroFrame.cmd(\"fileWrite\", [file, base64Encode(content)], callback);\n    }\n    \n    function base64Encode(content) {\n        content = encodeURIComponent(content); // Split to bytes in % notation\n        content = unescape(content); // Join % notation as bytes (not as chars)\n        return btoa(content);\n    }\n\n\nNow, let's write `addQuestion()` function in `js/votes.js`:\n\n    function addQuestion(question, answers, callback) {\n        ...\n    }\n\n\nIf somebody wants to add a question, he has to be authorizated with ZeroID:\n\n    function addQuestion(question, answers, callback) {\n        authAsZeroID(function(user) {\n            // User rejected to authorizate\n            if(!user) {\n                callback(false);\n                return;\n            }\n            \n            ...\n        });\n    }\n\n\nLet's open JSON file of user:\n\n    function addQuestion(question, answers, callback) {\n        authAsZeroID(function(user) {\n            // User rejected to authorizate\n            if(!user) {\n                callback(false);\n                return;\n            }\n            \n            readFile(\"data/users/\" + user.address + \"/data.json\", function(content) {\n                content = content || \"\";\n                \n                // Parse JSON\n                try {\n                    content = JSON.parse(content);\n                } catch(e) {\n                    content = {\n                        questions: [],\n                        answers: {},\n                        next_question_id: 0\n                    };\n                }\n                \n                ...\n            });\n        });\n    }\n\nNotice that we try to open file with user address. User address is its public key for ZeroID. If user uses KaffieID, public key and username (`user` property) will be different.\n\n\nNow we add question, save JSON and publish user's `content.json`:\n\n    function addQuestion(question, answers, callback) {\n        authAsZeroID(function(user) {\n            // User rejected to authorizate\n            if(!user) {\n                callback(false);\n                return;\n            }\n            \n            readFile(\"data/users/\" + user.address + \"/data.json\", function(content) {\n                content = content || \"\";\n                \n                // Parse JSON\n                try {\n                    content = JSON.parse(content);\n                } catch(e) {\n                    content = {\n                        questions: [],\n                        answers: {},\n                        next_question_id: 0\n                    };\n                }\n                \n                var id = content.next_question_id;\n                content.questions.push({\n                    id: id++,\n                    question: question,\n                    answers: answers.join(\"\\n\"),\n                    date_added: Math.floor(Date.now() / 1000)\n                });\n                \n                content = JSON.stringify(content);\n                \n                writeFile(\"data/users/\" + user.address + \"/data.json\", content, function() {\n                    zeroFrame.cmd(\"sitePublish\", {\n                        inner_path: \"data/users/\" + user.address + \"/content.json\"\n                    }, function() {\n                        callback(id);\n                    });\n                });\n            });\n        });\n    }\n\nNotice that we don't pass `privatekey` to `sitePublish` command. That's because `privatekey: null` means \"sign using user's private key\".\n\nWe also sign `data/users/{address}/content.json`, but it is possible that it does not exist (eg. user added question first time). Hopefully, ZeroNet creates a `content.json` for us if it does not exist.\n\n\nLet's check our code. Open DevTools, reload page and type the following in the console:\n\n    addQuestion(\"What's nofish's name?\", [\"nofish\", \"Tomas\", \"Jack\"], console.log.bind(console));\n\nAuthorizate using ZeroID (if you are asked) and watch `data/votes.db`.\n\n\n## Answers\n\nTry to write `addAnswer()` function for yourself first.\n\nAnswer:\n\n    function addQuestion(questionId, answerId, callback) {\n        authAsZeroID(function(user) {\n            // User rejected to authorizate\n            if(!user) {\n                callback(false);\n                return;\n            }\n            \n            readFile(\"data/users/\" + user.address + \"/data.json\", function(content) {\n                content = content || \"\";\n                \n                // Parse JSON\n                try {\n                    content = JSON.parse(content);\n                } catch(e) {\n                    content = {\n                        questions: [],\n                        answers: {},\n                        next_question_id: 0\n                    };\n                }\n                \n                content.answers[questionId] = answerId;\n                \n                content = JSON.stringify(content);\n                \n                writeFile(\"data/users/\" + user.address + \"/data.json\", content, function() {\n                    zeroFrame.cmd(\"sitePublish\", {\n                        inner_path: \"data/users/\" + user.address + \"/content.json\"\n                    }, callback);\n                });\n            });\n        });\n    }\n\n\nNote that we have similar functions. Let's write a library function instead:\n\n    function editUserData(handler, callback) {\n        authAsZeroID(function(user) {\n            // User rejected to authorizate\n            if(!user) {\n                callback(false);\n                return;\n            }\n            \n            readFile(\"data/users/\" + user.address + \"/data.json\", function(content) {\n                content = content || \"\";\n                \n                // Parse JSON\n                try {\n                    content = JSON.parse(content);\n                } catch(e) {\n                    content = {\n                        questions: [],\n                        answers: {},\n                        next_question_id: 0\n                    };\n                }\n                \n                handler(content);\n                \n                content = JSON.stringify(content);\n                \n                writeFile(\"data/users/\" + user.address + \"/data.json\", content, function() {\n                    zeroFrame.cmd(\"sitePublish\", {\n                        inner_path: \"data/users/\" + user.address + \"/content.json\"\n                    }, callback);\n                });\n            });\n        });\n    }\n    \n    function addQuestion(question, answers, callback) {\n        var id;\n        editUserData(function(content) {\n            id = content.next_question_id;\n            \n            content.questions.push({\n                id: content.next_question_id++,\n                question: question,\n                answers: answers.join(\"\\n\"),\n                date_added: Math.floor(Date.now() / 1000)\n            });\n        }, function() {\n            callback(id);\n        });\n    }\n    \n    \n    function addAnswer(questionId, answerId, callback) {\n        editUserData(function(content) {\n            content.answers[questionId] = answerId;\n        }, callback);\n    }\n\n\n## Reading data\n\nNow we will write `getQuestionList()`, `getQuestion()` and `getAnswers()` functions:\n\n    function getQuestionList(sort, callback) {\n        if(sort == \"popular\") {\n            zeroFrame.cmd(\"dbQuery\", [\"SELECT questions.*, CASE WHEN answers.answer_count IS NULL THEN 0 ELSE answers.answer_count END AS answer_count FROM questions LEFT JOIN (SELECT question_id, COUNT(*) as answer_count FROM answers GROUP BY question_id) AS answers ON (answers.question_id = questions.id) ORDER BY answers.answer_count DESC, questions.date_added DESC LIMIT 0, 10\"], callback);\n        } else if(sort == \"latest\") {\n            zeroFrame.cmd(\"dbQuery\", [\"SELECT * FROM questions ORDER BY date_added DESC LIMIT 0, 10\"], callback);\n        }\n    }\n    \n    function getQuestion(id, callback) {\n        zeroFrame.cmd(\"dbQuery\", [\"SELECT * FROM questions WHERE id = \" + id], function(questions) {\n            zeroFrame.cmd(\"siteInfo\", [], function(siteInfo) {\n                if(siteInfo.cert_user_id) { // User logged in\n                    zeroFrame.cmd(\"dbQuery\", [\"SELECT answers.*, json.* FROM answers, json WHERE json.directory = \\\"users/\" + siteInfo.auth_address + \"\\\" AND answers.json_id = json.json_id AND answers.question_id = \" + id], function(answer) {\n                        if(answer.length) {\n                            questions[0].answered = answer[0].answer_id;\n                            \n                            getAnswers(id, function(answers) {\n                                questions[0].answers = answers;\n                                callback(questions[0]);\n                            });\n                        } else {\n                            questions[0].answered = -1;\n                            callback(questions[0]);\n                        }\n                    });\n                } else {\n                    questions[0].answered = -1;\n                    callback(questions[0]);\n                }\n            });\n        });\n    }\n    \n    function getAnswers(id, callback) {\n        zeroFrame.cmd(\"dbQuery\", [\"SELECT answer_id, COUNT(*) as answer_count FROM answers WHERE question_id = \" + id + \" GROUP BY answer_id\"], function(answers) {\n            var result = {};\n            for(var i = 0; i < answers.length; i++) {\n                result[answers[i].answer_id] = answers[i].answer_count;\n            }\n            callback(result);\n        });\n    }\n\nNow, core is finished. Only layout is left. As usual, [here](downloads/voting.html) is an example.\n",
			"date_added": 1543317013581,
			"slug": "ttaz---editing-user-data"
		},
		{
			"id": "efee1960-f234-11e8-aaf4-e1a4f413344b",
			"body": "This article is part of [[The Truth about ZeroNet]] series of tutorials.\n\n---\n\n# User content\n\nYou have probably visited *ZeroMe* or *ZeroTalk* - a social network and a forum. They are created with *SQLite* - the database we talked about in the previous parts of this tutorial.\n\nIn previous parts, we created a zite with content created by administrator (like posts). Remember, we had no votes. Today we are going to fix this. We'll create a voting zite.\n\nFirst of all, let's make a new zite.\n\n\n## Including `content.json`\n\nWe will have a directory `data/users`. It will have subdirectories (name is user's public key) with user files.\n\nFirst of all, let's create a `content.json` for user data at `data/users/content.json` (ZeroNet will add other fields on signing):\n\n    {\n        \"files\": {}\n    }\n\n...and include it somewhere to root `content.json`:\n\n    ...,\n    \"ignore\": \"data/users/.*\",\n    \"includes\": {\n        \"data/users/content.json\": {\n            \"signers\": [],\n            \"signers_required\": 1\n        }\n    },\n    ...\n\nThe first line with `ignore` property tells ZeroNet that there should be not info about files in `data/users` directory. The other lines say that `data/users/content.json` should also be used when downloading zite.\n\nSign `content.json` and then `data/users/content.json`.\n\n\n## Creating correct `content.json`\n\nWe are going to use *ZeroID*. Just think: how can peers know that somebody can edit some folder? *ZeroID* and other *Certificate Authorities* prove that user can sign it.\n\nLet's change `data/users/content.json`.\n\n    {\n        \"ignore\": \".*\",\n        \"user_contents\": {\n            \"cert_signers\": {\n                \"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"]\n            },\n            \"permission_rules\": {\n                \".*\": {\n                    \"files_allowed\": \"data.json\",\n                    \"max_size\": 10000\n                }\n            },\n            \"permissions\": {\n                \"ivanq@zeroid.bit\": {\n                    \"max_size\": 100000\n                }\n            }\n        }\n    }\n\n- `ignore` means that files inside are not signed by administrator.\n- `user_contents.cert_signers` is a list of *Certificate Authorities*. Here we have `zeroid.bit` name and `1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz` zite has to prove that user can sign some directory.\n- `user_contents.permission_rules` shows user permissions based on regular expressions. The key (`.*`) means \"do the following for all users\". The string which is matched against this regexp is `{authtype}/{username}@{zite}`. `authtype` is set by *Certificate Authority* (usually `web` or `bitmsg`). `files_allowed` is a regular expression for files which user can have. `max_size` is size (in bytes) of allowed files.\n- `user_contents.permissions` lists user permissions for a single user. The key is `{username}@{zite}`. The value is the same as in `permission_rules`.\n\nHere we allow 10 KB for everybody and 100 KB for `ivanq@zeroid.bit` (That's me!).\n\n\n## Creating `dbschema.json`\n\nLet's create `dbschema.json` with these tables:\n\n    +-------------------------------------------------------------------------+\n    |                                questions                                |\n    +-------------------------+-----------------------------------------------+\n    | Row                     | Type                                          |\n    +-------------------------+-----------------------------------------------+\n    | id                      | INTEGER                                       |\n    +-------------------------+-----------------------------------------------+\n    | question                | TEXT                                          |\n    +-------------------------+-----------------------------------------------+\n    | answers                 | TEXT                                          |\n    +-------------------------+-----------------------------------------------+\n    | date_added              | INTEGER                                       |\n    +-------------------------+-----------------------------------------------+\n    | json_id                 | INTEGER REFERENCES json(json_id)              |\n    +-------------------------------------------------------------------------+\n    \n    +-------------------------------------------------------------------------+\n    |                                 answers                                 |\n    +-------------------------+-----------------------------------------------+\n    | Row                     | Type                                          |\n    +-------------------------+-----------------------------------------------+\n    | question_id             | INTEGER                                       |\n    +-------------------------+-----------------------------------------------+\n    | answer_id               | INTEGER                                       |\n    +-------------------------+-----------------------------------------------+\n    | json_id                 | INTEGER REFERENCES json(json_id)              |\n    +-------------------------------------------------------------------------+\n\n\n`dbschema.json`:\n\n    {\n        \"db_name\": \"votes\",\n        \"db_file\": \"data/votes.db\",\n        \"version\": 2,\n        \"maps\": {\n            \"users/.*/data.json\": {\n                \"to_table\": [\n                    {\n                        \"node\": \"questions\",\n                        \"table\": \"questions\"\n                    },\n                    {\n                        \"node\": \"answers\",\n                        \"table\": \"answers\",\n                        \"key_col\": \"question_id\",\n                        \"val_col\": \"answer_id\"\n                    }\n                ]\n            }\n        },\n        \"tables\": {\n            \"json\": {\n                \"cols\": [\n                    [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                    [\"directory\", \"TEXT\"],\n                    [\"file_name\", \"TEXT\"]\n                ],\n                \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n                \"schema_changed\": 1\n            },\n            \"questions\": {\n                \"cols\": [\n                    [\"id\", \"integer\"],\n                    [\"question\", \"text\"],\n                    [\"answers\", \"text\"],\n                    [\"date_added\", \"integer\"],\n                    [\"json_id\", \"integer references json(json_id)\"]\n                ],\n                \"indexes\": [\n                    \"CREATE UNIQUE INDEX question_id ON questions(id)\"\n                ],\n                \"schema_changed\": 1\n            },\n            \"answers\": {\n                \"cols\": [\n                    [\"question_id\", \"integer\"],\n                    [\"answer_id\", \"integer\"],\n                    [\"json_id\", \"integer references json(json_id)\"]\n                ],\n                \"indexes\": [\n                    \"CREATE UNIQUE INDEX answer_value ON answers(question_id, json_id)\"\n                ],\n                \"schema_changed\": 1\n            }\n        }\n    }\n\nThe only new part is `users/.*/data.json`. It means: take all files from `data/users/{something}/data.json` and use it the following way: `...`.\n\n\n## Authorizating via ZeroID\n\nAs I said before, we are going to use ZeroID. So, let's write code to do that.\n\nFirst of all, create `js/index.js` and include it before other files:\n\n    window.zeroFrame = new ZeroFrame();\n\nLet's create a new file, `js/zeroid.js` and include it to `index.html`:\n\n    function authAsZeroID(callback) {\n        zeroFrame.cmd(\"siteInfo\", [], function(siteInfo) {\n            // If logged in, return object with username and public key (address)\n            if(siteInfo.cert_user_id) {\n                callback({\n                    user: siteInfo.cert_user_id,\n                    address: siteInfo.auth_address\n                });\n                \n                return;\n            }\n            \n            // Open authorization window and allow zeroid.bit\n            zeroFrame.cmd(\"certSelect\", {\n                accepted_domains: [\"zeroid.bit\"]\n            }, function() {\n                zeroFrame.cmd(\"siteInfo\", [], function(siteInfo) {\n                    // If logged in, return object with username and public key (address),\n                    // else return false\n                    if(siteInfo.cert_user_id) {\n                        callback({\n                            user: siteInfo.cert_user_id,\n                            address: siteInfo.auth_address\n                        });\n                    } else {\n                        callback(false);\n                    }\n                });\n            });\n        });\n    }\n\n\nNow try to call `authAsZeroID(console.log.bind(console))` in console. A window will open. If you choose ZeroID, an object with `user` and `address` properties will appear in the console. If you choose `Unique to this site`, `false` will appear in the console.\n\nWe'll learn how to read and write user data in the following parts of the tutorial.\n",
			"date_added": 1543316981239,
			"slug": "ttaz---user-content"
		},
		{
			"id": "dc727570-f234-11e8-8df5-b78e6697ce9f",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Dbschema. We need to go deeper\n\nToday let's speak about some improvements in `dbschema.json`.\n\nLet's use this `dbschema.json`:\n\n    {\n        \"db_name\": \"mydatabase\",\n        \"db_file\": \"data/mydatabase.db\",\n        \"version\": 2,\n        \"maps\": {\n            \"admin/data.json\": {\n                \"to_table\": [\n                    {\n                        \"node\": \"posts\",\n                        \"table\": \"posts\"\n                    }\n                ]\n            }\n        },\n        \"tables\": {\n            \"json\": {\n                \"cols\": [\n                    [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                    [\"directory\", \"TEXT\"],\n                    [\"file_name\", \"TEXT\"]\n                ],\n                \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n                \"schema_changed\": 1\n            },\n            \"posts\": {\n                \"cols\": [\n                    [\"id\", \"integer\"],\n                    [\"content\", \"text\"],\n                    [\"json_id\", \"integer references json(json_id)\"]\n                ],\n                \"indexes\": [\n                    \"CREATE UNIQUE INDEX post_id ON posts(id)\"\n                ],\n                \"schema_changed\": 1\n            }\n        }\n    }\n\nSo, we have a `posts` table with `id` and `content` columns. And we get it from `posts` table in `data/admin/data.json`.\n\n\n## `key_col`\n\nThink about unique columns. Like votes - the pair `id` and `author_id` is unique. Or simple `id` in our `posts` table. But how can we add unique columns if data is loaded from JSON arrays, and there is no unique data in JSON? Or is there?..\n\nYes, there is. Remember objects? Keys are unique. So, let's make a unique column a key. Post ID, for example.\n\n\nIn `data/admin/data.json`, we change array to object and move ID to property key.\n\n    {\n        \"posts\": {\n            \"1\": {\n                \"content\": \"Post 1\"\n            },\n            \"2\": {\n                \"content\": \"Post 2\"\n            }\n        }\n    }\n\n\nIn `dbschema.json`, we added `key_col` property. We told ZeroNet that property key should be `id` column.\n\n    \"maps\": {\n        \"admin/data.json\": {\n            \"to_table\": [\n                {\n                    \"node\": \"posts\",\n                    \"table\": \"posts\",\n                    \"key_col\": \"id\"\n                }\n            ]\n        }\n    }\n\n\nSign `content.json` and open `data/mydatabase.db`. Nothing was changed, but now `id` column is always unique - simply because of JSON.\n\n...Well, in fact not always. If there are two equal `admin/data.json` files (e.g. `data/a/admin/data.json` and `data/b/admin/data.json`), there may be two equal IDs. But admin won't do this, and we'll talk about user limitations later.\n\n\n## `val_col`\n\nBut object with one property doesn't look good. It would be nice if we could change `data.json` to:\n\n    {\n        \"posts\": {\n            \"1\": \"Post 1\",\n            \"2\": \"Post 2\"\n        }\n    }\n\n\nAnd we can! That's the magic of `val_col`. First of all, let's change our `data/admin/data.json`. Then, let's change `dbschema.json`:\n\n    \"maps\": {\n        \"admin/data.json\": {\n            \"to_table\": [\n                {\n                    \"node\": \"posts\",\n                    \"table\": \"posts\",\n                    \"key_col\": \"id\",\n                    \"val_col\": \"content\"\n                }\n            ]\n        }\n    }\n\nWe added `val_col` property. We told ZeroNet that property value is `content` column. Let's sign `content.json` and see what changed. You can add other posts to check that everything works.\n\n\nThat's why I told that practically any JSON structure is OK. Simple `to_table` and advanced `key_col` and `val_col` can do much.\n\n\n## `version`\n\nLet's check our `json` table. Currently it has 3 columns: `json_id`, `directory` and `file_name`. That's because of `version: 2`. Let's speak about this `version` property:\n\n- `version: 1`\n    1. `json_id` - ID of JSON file\n    2. `path` - Path to JSON file\n    \n    **What problems to expect**: None\n\n- `version: 2`\n    1. `json_id` - ID of JSON file\n    2. `directory` - Directory of JSON file\n    3. `file_name` - Name of JSON file\n\n    **What problems to expect**:\n    `directory` is relative to database file, so if file path is `data/admin/data.json`, and database path is `data/mydatabase.db`, then `directory` is `admin`. So, you cannot have a file in the same directory as database.\n\n- `version: 3`\n    1. `json_id` - ID of JSON file\n    2. `site` - Site of JSON file\n    3. `directory` - Directory of JSON file\n    4. `file_name` - Name of JSON file\n    \n    **What problems to expect**:\n    The same as `version: 2`, but `site` is the part before the first slash in `directory`, and `directory` is the path after the first slash. So, you cannot have a file in the same directory as database and in a subdirectory of database (but subsubdirectory is OK).\n    \n    You may ask: \"Why `site`?\". That's because of merger sites. We'll talk about them later.\n",
			"date_added": 1543316948552,
			"slug": "ttaz---dbschema"
		},
		{
			"id": "c9ba4890-f234-11e8-80a2-49fa8f2dd826",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Changing tables\n\nIn this section, we will cover write access to *SQLite*.\n\n\n## Auto increment\n\nNow we want to add a new post. But where can we take ID from? There is a nice answer. Let's add a new property to `data/admin/data.json`:\n\n    {\n        \"next_post_id\": 3,\n        \"posts\": [\n            {\n                \"id\": 1,\n                \"title\": \"Post 1\",\n                \"content\": \"Post 1\"\n            },\n            {\n                \"id\": 2,\n                \"title\": \"Post 2\",\n                \"content\": \"Post 2\"\n            }\n        ]\n    }\n\nMost zites use this way: they add `next_..._id`. We'll do the same. When we add new post, we will take id from `next_post_id` and increment the latter.\n\n\n## Write access to database\n\nAs I told you before, only *SELECT* is supported. Remember where we edited posts? Yes, in `data/admin/data.json` file. So, let's take our `readFile()` and `writeFile()` functions from the previous lesson:\n\n    function readFile(file, callback) {\n        zeroFrame.cmd(\"fileGet\", [file, false], callback);\n    }\n    \n    function writeFile(file, content, callback) {\n        zeroFrame.cmd(\"fileWrite\", [file, base64Encode(content)], callback);\n    }\n    \n    function base64Encode(content) {\n        content = encodeURIComponent(content); // Split to bytes in % notation\n        content = unescape(content); // Join % notation as bytes (not as chars)\n        return btoa(content);\n    }\n\n...and put them to `js/files.js`. Don't forget to include this file to `index.html` before `index.js`:\n\n    <script type=\"text/javascript\" src=\"js/files.js\"></script>\n\n\nFirst of all, let's read `data/admin/data.json` and parse it. Try to do that yourself.\n\nAnswer:\n\n    function addPost(title, postContent) {\n        readFile(\"data/admin/data.json\", function(content) {\n            content = content || \"\"; // Convert undefined and null to \"\"\n            \n            // Parse JSON\n            try {\n                content = JSON.parse(content);\n            } catch(e) {\n                content = {\n                    posts: [],\n                    next_post_id: 0\n                };\n            }\n            \n            console.log(content);\n        });\n    }\n    \n    addPost(\"test\", \"test content\");\n\nOpen console and reload page. You'll see an object with `posts` and `next_post_id` properties.\n\n\nNow, we can simply take `next_post_id` and change `posts` array:\n\n    function addPost(title, postContent, callback) { // Notice new callback argument\n        readFile(\"data/admin/data.json\", function(content) {\n            ...\n            // Parse JSON\n            ...\n            \n            content.posts.push({\n                id: content.next_post_id++, // Use next_post_id and then increment it\n                title: title,\n                content: postContent\n            });\n            \n            content = JSON.stringify(content, null, 4); // Make content string\n            \n            writeFile(\"data/admin/data.json\", content, function(result) {\n                callback(result == \"ok\");\n            });\n        });\n    }\n    \n    addPost(\"test\", \"test content\", function(result) {\n        console.log(result ? \"OK\" : \"Error\");\n    });\n\nTry to run this code and see how `data/admin/data.json` changes. Now open `data/mydatabase.db`. Only old posts, right? That's because we have to sign and publish our changes after changing data. Here are API commands we need:\n\n    +-------------------------------------------------------------------------+\n    |                                siteSign                                 |\n    +-------------------------------------------------------------------------+\n    | Sign a content.json of the site                                         |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | privatekey (optional)   | Private key used for signing (default:        |\n    |                         | current user's privatekey). \"stored\" means    |\n    |                         | saved site private key                        |\n    +-------------------------+-----------------------------------------------+\n    | inner_path (optional)   | Inner path of the content json you want to    |\n    |                         | sign (default: content.json)                  |\n    +-------------------------+-----------------------------------------------+\n    | Return: \"ok\" on success else the error message                          |\n    +-------------------------------------------------------------------------+\n    \n    +-------------------------------------------------------------------------+\n    |                               sitePublish                               |\n    +-------------------------------------------------------------------------+\n    | Publish a content.json of the site                                      |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | privatekey (optional)   | Private key used for signing (default:        |\n    |                         | current user's privatekey). \"stored\" means    |\n    |                         | saved zite private key                        |\n    +-------------------------+-----------------------------------------------+\n    | inner_path (optional)   | Inner path of the content json you want to    |\n    |                         | publish (default: content.json)               |\n    +-------------------------+-----------------------------------------------+\n    | sign (optional)         | If True then sign the content.json before     |\n    |                         | publish (default: True)                       |\n    +-------------------------+-----------------------------------------------+\n    | Return: \"ok\" on success else the error message                          |\n    +-------------------------------------------------------------------------+\n\nWe want to both sign and publish zite, so we can use `sitePublish` with `sign` option:\n\n    writeFile(\"data/admin/data.json\", content, function(result) {\n        if(result != \"ok\") {\n            callback(false);\n            return;\n        }\n        \n        zeroFrame.cmd(\"sitePublish\", {\n            privatekey: \"stored\"\n        }, function(result) {\n            callback(result == \"ok\");\n        });\n    });\n\nTry to reload page multiple times and open `data/mydatabase.db`.\n\n\n## Private key\n\nThe main thing in `siteSign` and `sitePublish` commands is `privatekey` option. It is not logical at all, but as it is used frequently, you have to remember its meaning.\n\n- `privatekey: null` means \"use private key which ZeroNet created especially for this zite and especially for this user\". Some sites (like ZeroTalk) have user content (posts and votes). To sign this data with user's private key, they don't pass `privatekey` option at all or set it to `null`.\n- `privatekey: \"stored\"` means \"use private key of zite\". This can be used only if user is zite administrator.\n- `privatekey: \"...\"` means \"use this private key\".\n\n\n## Permissions\n\nWe also often want to know if user is administrator. For example, for a blog, we should show \"Add\" button only if user can write to `data/admin/data.json`. ZeroFrame to rescue! We can use `siteInfo` command. It returns a JSON object with `privatekey` boolean - it is true if current user is administrator.\n\n    function isAdmin(callback) {\n        zeroFrame.cmd(\"siteInfo\", [], function(info) {\n            callback(!!info.privatekey);\n        });\n    }\n\n\n## Example\n\nYou can watch blog example [here](downloads/blog.html).\n\nSome ideas for improvements:\n\n- Add option to delete post.\n- More beautiful editing page.\n- Delete created post when `Cancel` is clicked on `Add post` page.\n- Use markup language different from HTML.\n",
			"date_added": 1543316917146,
			"slug": "ttaz---changing-tables"
		},
		{
			"id": "aecde370-f234-11e8-b97a-053c030373df",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Creating databases\n\nToday we are going to write a blog. Your own blog with your own design.\n\n\n## Creating zite\n\nFirst of all, I recommend creating a new, empty site (in my case, `1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm`), because it can be a bit difficult to repair a site from incorrect database. As usual, I will give you the code in two formats: with plain ZeroFrame and with my library (I believe the latter is better).\n\n\n## Overview\n\nZeroNet has builtin database, *SQLite*. Of course, you can create your own DB using files, but this is not serious. Let's begin with creating our database.\n\n\n## Database source\n\nIn ZeroNet, only SQL *SELECT* is allowed. Database is created from JSON files. Let's create one of these files right now.\n\n\n### `data.json`\n\nBy tradition, tables are held in `data/*/data.json` files. Let's create `data/admin/data.json` now. Create an array, `posts`, with rows inside it.\n\n    {\n        \"posts\": [\n            {\n                \"id\": 1,\n                \"title\": \"Post 1\",\n                \"content\": \"Post 1\"\n            },\n            {\n                \"id\": 2,\n                \"title\": \"Post 2\",\n                \"content\": \"Post 2\"\n            }\n        ]\n    }\n\n\n## Dbschema format\n\n`dbschema.json` is a simple JSON file. This is empty DB:\n\n    {\n        \"db_name\": \"mydatabase\",\n        \"db_file\": \"data/mydatabase.db\",\n        \"version\": 2,\n        \"maps\": {},\n        \"tables\": {}\n    }\n\n- `db_name` parameter is database name, but it is used only for debug. You cannot have more that one database per site.\n- *SQLite* database is only one file, and `db_file` is its path.\n- `version` is database, not *SQLite* version. We'll talk about it later.\n- `maps` object sets relationship between database and files.\n- `tables` object sets table structure.\n\nPlease copy this empty DB to `dbschema.json` file in the root of your site.\n\n\n### `json` table\n\nFor each registered user (administrator or simple ZeroID user), a row is created in `json` table. Sadly, ZeroNet doesn't work without this table. We'll talk about it's contents later. Now, let's just add such table.\n\n`dbschema.json`:\n\n    {\n        \"db_name\": \"mydatabase\",\n        \"db_file\": \"data/mydatabase.db\",\n        \"version\": 2,\n        \"maps\": {},\n        \"tables\": {\n            \"json\": {\n                \"cols\": [\n                    [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                    [\"directory\", \"TEXT\"],\n                    [\"file_name\", \"TEXT\"]\n                ],\n                \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n                \"schema_changed\": 1\n            }\n        }\n    }\n\n\n### Adding tables\n\nLet's add `posts` table from our `data/admin/data.json` file.\n\nFirst, let's set table name.\n\n    {\n        \"db_name\": \"mydatabase\",\n        \"db_file\": \"data/mydatabase.db\",\n        \"version\": 2,\n        \"maps\": {},\n        \"tables\": {\n            \"json\": {\n                \"cols\": [\n                    [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                    [\"directory\", \"TEXT\"],\n                    [\"file_name\", \"TEXT\"]\n                ],\n                \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n                \"schema_changed\": 1\n            },\n            \"posts\": {\n                ...\n            }\n        }\n    }\n\n\nAs you can see from `json` table specification, each table consists of `cols`, `indexes` and `schema_changed`. `schema_changed` is simply table version. Increment it once you change table structure, so that other peers recreate this table.\n\n    \"posts\": {\n        \"cols\": [\n            ...\n        ],\n        \"indexes\": [\n            ...\n        ],\n        \"schema_changed\": 1\n    }\n\n\n`cols` is column array. First entry of each column is column name (SQL keywords, such as `GROUP` and `UPDATE` are not allowed). Second entry of each column is *SQLite* column type - `integer`, `float` or `text`.\n\n    \"posts\": {\n        \"cols\": [\n            [\"id\", \"integer\"],\n            [\"title\", \"text\"],\n            [\"content\", \"text\"],\n            [\"json_id\", \"integer references json(json_id)\"]\n        ],\n        \"indexes\": [\n            ...\n        ],\n        \"schema_changed\": 1\n    }\n\nSee that `json_id` column? That's another strange thing in `dbschema.json`. Each table must have such column with such type.\n\n\n`indexes` is index array. Any `CREATE INDEX` SQL command can be there. Index name doesn't mean anything.\n\n    \"posts\": {\n        \"cols\": [\n            [\"id\", \"integer\"],\n            [\"title\", \"text\"],\n            [\"content\", \"text\"],\n            [\"json_id\", \"integer references json(json_id)\"]\n        ],\n        \"indexes\": [\n            \"CREATE UNIQUE INDEX post_id ON posts(id)\"\n        ],\n        \"schema_changed\": 1\n    }\n\n\nNow, we have a DB. Right now, sign `content.json`. You'll find a new file, `data/mydatabase.db` (from `db_file` property of `dbschema.json`). This is *SQLite* database. I recommend *SQLiteStudio* for browsing these files. Right now, you'll find empty `json` and `post` tables, and a special `keyvalue` table. This is ZeroNet internal table, usually we don't need to touch it.\n\n\n### Mapping tables\n\n#### `to_table`\n\nWe have an empty table with correct structure. But who needs empty tables? Let's fill `posts` table from `data/admin/content.json`.\n\nRemember empty `maps` object from `dbschema.json`?\n\n    ...\n    \"version\": 2,\n    \"maps\": {},\n    \"tables\": {\n        ...\n\n\nLet's change it.\n\n    \"maps\": {\n        \"admin/data.json\": {\n            \"to_table\": [\n                {\n                    \"node\": \"posts\",\n                    \"table\": \"posts\"\n                }\n            ]\n        }\n    }\n\nObject name `admin/data.json` is *relugar expression*. Each file that matches this expression is checked against object value. Right now you can see only `to_table` property. That means that each row from `posts` object in any file that matches *regular expression* (`admin/data.json`) is added to `posts` table.\n\n\nLet's sign `content.json` and check database content again. See that `json_id` column in `posts` table? And that row in `json` table? That's OK. `json_id` in `posts` table maps to `json_id` in `json` table. And from `json` table we know, which file added a row. You probably think that's not necessary, but that's not necessary only right now.\n\n\n## Read access to database\n\nLet's start writing code. Create empty `js/index.js`. Include it and `js/ZeroFrame.js` to `index.html`.\n\nRemember how to call ZeroFrame? Let's call `dbQuery`:\n\n    +-------------------------------------------------------------------------+\n    |                                 dbQuery                                 |\n    +-------------------------------------------------------------------------+\n    | Run a query on the sql cache                                            |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | query                   | Sql query command                             |\n    +-------------------------+-----------------------------------------------+\n    | Return: Result of query as array or object with \"error\" property        |\n    +-------------------------------------------------------------------------+\n\n    var zeroFrame = new ZeroFrame();\n    \n    zeroFrame.cmd(\"dbQuery\", [\"SELECT * FROM posts\"], function(posts) {\n        if(posts.error) {\n            console.warn(posts.error);\n            return;\n        }\n        \n        console.log(posts);\n    });\n\nOpen console, reload page, and you'll see the following:\n\n    Array [ Object, Object ]\n            Object {\n                content: \"Post 1\",\n                id: 1,\n                json_id: 1,\n                title: \"Post 1\"\n            }\n\n\nWe'll cover dynamic data changing and design in the following parts. For now, you can directly change `data/admin/data.json`, sign `content.json` and reload zite to see what changes.\n",
			"date_added": 1543316871976,
			"slug": "ttaz---databases"
		},
		{
			"id": "d5029410-f233-11e8-9c24-092b07572ed8",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# ZeroFrame\n\nIn the previous part, I told you that *localStorage* and some other features are disabled. In this section, I will tell you how to bypass it.\n\n\n## WebSockets\n\nTo let sites read and write files, change *localStorage*, sign data, etc. ZeroNet uses WebSockets. *ZeroFrame* does all dirty work for you. Remember `js/ZeroFrame.js` I told you not to remove in the previous part? That's API interface.\n\n\n## Installing ZeroFrame\n\nFirst, let's create a new, really empty zite. Use *ZeroHello* to do this. Now open ZeroNet home directory, then data, now zite public key.\n\nChange `index.html` to:\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title></title>\n            <meta charset=\"utf-8\">\n            <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n            <base href=\"\" target=\"_top\" id=\"base\">\n            <script>\n                base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")\n            </script>\n        </head>\n        <body>\n        </body>\n    </html>\n\nI have just removed useless (now) `<script>` from `<body>` and indented code.\n\n\nLet's include `js/ZeroFrame.js` and create empty `js/index.js`:\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title></title>\n            <meta charset=\"utf-8\">\n            <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n            <base href=\"\" target=\"_top\" id=\"base\">\n            <script>\n                base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")\n            </script>\n        </head>\n        <body>\n            <script type=\"text/javascript\" src=\"js/ZeroFrame.js\"></script>\n            <script type=\"text/javascript\" src=\"js/index.js\"></script>\n        </body>\n    </html>\n\n\nOpen and edit `js/index.js`:\n\n    var zeroFrame = new ZeroFrame();\n    console.log(zeroFrame);\n\n\nOpen *DevTools Console* and reload page. You'll notice:\n\n    Object { url: undefined, waiting_cb: Object, wrapper_nonce: \"45be457a20334e09dbda338264976328d1f…\", target: Object → 1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm, next_message_id: 1 }\n\n...or something like that. That's *ZeroFrame* - a receiver and a transmitter, the thing all ZeroNet was created of.\n\n\n## First API call\n\nThe main function of ZeroFrame is `ZeroFrame.prototype.cmd()`. Let's try to get site info.\n\n    var zeroFrame = new ZeroFrame();\n    zeroFrame.cmd(\"siteInfo\", [], function(info) {\n        console.log(info);\n    });\n\nWe already know first line. By the way, you must not create two ZeroFrame's. The rest of file call ZeroNet API. The first argument is API method - here it's `siteInfo`. The second argument is parameters - it is optional, so we could remove `, []` from this code. The third argument is callback.\n\nReload page and watch console. You'll find something like:\n\n    Object { tasks: 0, size_limit: 10, address: \"1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm\", next_size_limit: 10, auth_address: \"1E3sYXHq99vXW5hS3M9PhQzQhpmWx1paHu\", feed_follow_num: null, content: Object, peers: 1, auth_key: \"db87a590a113015ddf1b2c73f96baacaa097eee1747d71bdbe5748073bc6131b\", settings: Object, 6 more... }\n\n\nOne of the problems of ZeroFrame is its callback nature which results in callback hell. I think that promise hell is better, moreover, promises are compatible with async/await. If you want to use callbacks, use ZeroFrame. If you want to use promises or async/await (the latter is not supported by ZeroNet, but you can use Babel), use my *ZeroPage library* (you can find documentation in extra lessons and download it [here](downloads/ZeroPage.js). I will show how to do that with ZeroFrame, but you can find both versions of resulting zite [here](downloads/notepad.html).\n\n*UPD. In new versions of ZeroHello (sites are in fact created by it) `ZeroFrame.prototype.cmdp()` function was added. It returns a promise, which rejects if result has `error` property and resolves . However, I can still recommend my library because you don't have to write much code for simple things.*\n\n\n## File system\n\nZeroFrame allows you to read and write files inside zite directory. The API methods are:\n\n    +-------------------------------------------------------------------------+\n    |                                 fileGet                                 |\n    +-------------------------------------------------------------------------+\n    | Get file content                                                        |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | inner_path              | The file you want to get                      |\n    | required (optional)     | Try and wait for the file if it's not exists. |\n    |                         | (default: True)                               |\n    | format (optional)       | Encoding of returned data. (text or base64)   |\n    |                         | (default: text)                               |\n    | timeout (optional)      | Maximum wait time to data arrive              |\n    |                         | (default: 300)                                |\n    +-------------------------+-----------------------------------------------+\n    | Return: The content of the file or null or undefined (I don't           |\n    | understand the difference between the latter two)                       |\n    +-------------------------------------------------------------------------+\n    \n    +-------------------------------------------------------------------------+\n    |                                fileWrite                                |\n    +-------------------------------------------------------------------------+\n    | Write file content                                                      |\n    +-------------------------+-----------------------------------------------+\n    | Parameter               | Description                                   |\n    +-------------------------+-----------------------------------------------+\n    | inner_path              | Inner path of the file you want to write      |\n    | content_base64          | Content you want to write to file (base64     |\n    |                         | encoded)                                      |\n    +-------------------------+-----------------------------------------------+\n    | Return: \"ok\" or error message                                           |\n    +-------------------------------------------------------------------------+\n\nIf you choosed to use my *ZeroPage* library, I also have *ZeroFS*. You can download it [here](downloads/ZeroFS.js).\n\n\nLet's change `index.js` content to:\n\n    var zeroFrame = new ZeroFrame();\n    \n    function readFile(file, callback) {\n        ...\n    }\n    function writeFile(file, content, callback) {\n        ...\n    }\n\n\n### Reading files\n\nBefore reading the answer, try to write `readFile()` yourself. Ready?\n\n    function readFile(file, callback) {\n        zeroFrame.cmd(\"fileGet\", [file, false], callback);\n    }\n\n\nBy the way, you could write:\n\n    function readFile(file, callback) {\n        zeroFrame.cmd(\"fileGet\", {\n            inner_path: file,\n            required: false\n        }, callback);\n    }\n\n...because parameters may be either ommited or array or object (notice parameter names in method documentation).\n\nIf you set `required` to `true`, then everything will still work, but a warning will appear.\n\n\n### Writing files\n\n`writeFile()` is complex. I would say, complicated. Input should be Base64, so you could write:\n\n    function writeFile(file, content, callback) {\n        zeroFrame.cmd(\"fileWrite\", [file, btoa(content)], callback);\n    }\n\nBut `btoa()` doesn't work with UTF8. So we will write another function:\n\n    function base64Encode(content) {\n        content = encodeURIComponent(content); // Split to bytes in % notation\n        content = unescape(content); // Join % notation as bytes (not as chars)\n        return btoa(content);\n    }\n\n...and use it instead of `btoa()` in `writeFile()`.\n\n\nSo, we convert UTF8 to bytes. But what if `content` is just byte string? Then, `encodeURIComponent` - `unescape` pair will break bytes because Unicode has multiple codes for several chars. So, we will add another function which uses `btoa()` instead of `base64Encode` (take `writeFile()` and code `writeBinaryFile()` yourself).\n\nOur filesystem library is finished. Well, only file part, but that's enough for now. You can either read my *ZeroFS* library to understand directory part or read documentation here or at [this mirror](/1HP65eGEEMPbyzH3mkaoQ7eCMKd9P8G61W/).\n\n\n## Notepad\n\nThe simpliest program which uses file API is probably text editor. Try to write it yourself. Then try to understand my code from [download section](download/notepad.html).\n\n\n## Tips\n\nYou *can* write `animate()` function each time you need it, but you shouldn't do that. You should save it to some file and copy-paste it when you need it.\n\nThe same is true with ZeroNet. There are always problems with it (it's Beta). And sometimes you don't understand why something doesn't work (it took 2 months for me to make databases work - because of lack of documentation I had to read source code). So, feel free to contact me here or at [ZeroMail](/1MaiL5gfBM1cyb4a8e3iiL8L5gXmoAJu27/?to=ivanq).\n",
			"date_added": 1543316506578,
			"slug": "ttaz---zeroframe"
		},
		{
			"id": "c31ad690-f233-11e8-9f44-9974269ff007",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Creating static zite\n\nIn this part of the tutorial, we are going to create an \"About me\" zite.\n\n\n## Creating empty zites\n\nOpen *ZeroHello* by starting ZeroNet. Press the epsilon to the right of `Hello ZeroNet_` and choose `Create new, empty site`. Wait a few seconds and a new zite will open.\n\nYou will find something like that:\n\n    Page address: 1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm\n    - Peers: 1\n    - Size: 5380\n    - Modified: Mon Aug 14 2017 08:14:58 GMT+0300\n\n- *Page address* is the site's public key.\n- *Peers* is the number of people which your local ZeroNet knows and have your zite. *Peers* should not be used as number of people which visit your zite.\n- *Size* is the size of your zite in bytes.\n\n\n## What's in `index.html`\n\nLet's open `index.html` of your zite. First of all, let's open ZeroNet home \ndirectory:\n\n- For macOS, that's `~/Application Support/ZeroNet/` or the place where `ZeroNet.app` lives.\n- For Windows, that's the place where ZeroNet was installed (e.g. `C:\\Program Files\\ZeroNet\\`).\n- If you used GIT to install ZeroNet, that's the directory of git repo.\n\nNow, open `data` directory and then the directory of your zite address (from the page ZeroNet opened, e.g. `1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm`). All the other directories are your local copies of other zites.\n\nLet's open `index.html`:\n\n    <!DOCTYPE html>\n    \n    <html>\n    <head>\n     <title>New ZeroNet site!</title>\n     <meta charset=\"utf-8\">\n     <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n     <base href=\"\" target=\"_top\" id=\"base\">\n     <script>base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")</script>\n    </head>\n    <body>\n        \n    <div id=\"out\"></div>\n    \n    <script type=\"text/javascript\" src=\"js/ZeroFrame.js\"></script>\n    <script>\n        \n    class Page extends ZeroFrame {\n        setSiteInfo(site_info) {\n            var out = document.getElementById(\"out\")\n            out.innerHTML =\n                \"Page address: \" + site_info.address +\n                \"<br>- Peers: \" + site_info.peers +\n                \"<br>- Size: \" + site_info.settings.size +\n                \"<br>- Modified: \" + (new Date(site_info.content.modified*1000))\n        }\n        \n        onOpenWebsocket() {\n            this.cmd(\"siteInfo\", [], function(site_info) {\n                page.setSiteInfo(site_info)\n            })\n        }\n        \n        onRequest(cmd, message) {\n            if (cmd == \"setSiteInfo\")\n                this.setSiteInfo(message.params)\n            else\n                this.log(\"Unknown incoming message:\", cmd)\n        }\n    }\n    page = new Page()\n    </script>\n    \n    </body>\n    </html>\n\nIt's not easy to understand what's happening here, but that's not needed. Let's delete something and show what happens.\n\n\n    <!DOCTYPE html>\n    \n    <html>\n    <head>\n     <title>New ZeroNet site!</title>\n     <meta charset=\"utf-8\">\n     <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n     <base href=\"\" target=\"_top\" id=\"base\">\n     <script>base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")</script>\n    </head>\n    <body>\n    </body>\n    </html>\n\nThat's much better. We removed a useless (for us) script. Now let's reindent this.\n\n\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>New ZeroNet site!</title>\n            <meta charset=\"utf-8\">\n            <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n            <base href=\"\" target=\"_top\" id=\"base\">\n            <script>\n                base.href = document.location.href.replace(\"/media\", \"\").replace(\"index.html\", \"\").replace(/[&?]wrapper=False/, \"\").replace(/[&?]wrapper_nonce=[A-Za-z0-9]+/, \"\")\n            </script>\n        </head>\n        <body>\n        </body>\n    </html>\n\nEven better. **You may change anything espect `<base>` and the following `<script>` tag.** Each zite you visit runs in a restricted `<iframe>`, so some things like *localStorage* are not possible. I'll tell you how to bypass that in the following part of the tutorial.\n\nYou shouldn't also remove `js/ZeroFrame.js` file. It may not be needed for this zite, but practically all other ZeroNet sites use it.\n\n\n## Tips\n\n### Disabling caching\n\nWhen you edit files, you may not notice updates in browser. That is because of caching. There should be an option to disable this while *DevTools* is open. *DevTools* has to be open while zite developing then.\n\n- In Firefox, open *DevTools* by pressing F12, click Settings icon in the top right corner of the window, and choose `Disable HTTP cache (while DevTools is open)`.\n- In Chrome, open *DevTools* by pressing F12, now press F1, click *Preferences* in the left navigation bar and choose `Disable cache (while DevTools is open)` from *Network* menu.\n\n\n### Absolute paths don't work\n\nLet's make some `<div>`s and style them.\n\nFirst, add `<div>1</div>` to `index.html`. A `1` appears.\n\n\nNow, let's create `css/index.css` with the following content:\n\n    div {\n        color: red;\n    }\n\n...and include it in `index.html`:\n\n    <link rel=\"stylesheet\" href=\"/css/index.css\" type=\"text/css\">\n\nNothing changes. But why?.. Because of zite address: `http://127.0.0.1:43110/1CyNApZ4zp7k3SSXsrW54vEFMHHBpDy3nm/`. So `/css/index.css` gets calculated as `http://127.0.0.1:43110/css/index.css`. So, using absolute paths is not allowed in ZeroNet. So, we change `<link>` to:\n\n    <link rel=\"stylesheet\" href=\"css/index.css\" type=\"text/css\">\n\n\n### `<iframe>`s don't work\n\nEach page you open in ZeroNet has the following code:\n\n    <script>\n    // If we are inside iframe escape from it\n    if (window.self !== window.top) window.open(window.location.toString(), \"_top\");\n    if (window.self !== window.top) window.stop();\n    if (window.self !== window.top && document.execCommand) document.execCommand(\"Stop\", false)\n    </script>\n\nSo, you cannot `<iframe>` other ZeroNet pages, including other HTML files of your site.\n\n\n## Design\n\nI'll leave design to you. You can download the final version of my site from [downloads](downloads/porfolio.zip).\n\n\n## Site settings\n\nTo change site description and title, we have to use sidebar. Have you noticed `0` button in the top right corner? Clicking it returns you to *ZeroHello*. Now drag it to the left:\n\n      _____              _____  \n     /     \\            /     \\ \n    |   0   | <------- |   0   |\n     \\_____/            \\_____/ \n\n\nThe sidebar will appear. You can see connected peers, files, database info (we'll cover it later), your unique address (it changes when you login *ZeroID* or *KaffieID* or *CryptoID*). You can also change site info if you are the owner.\n\nScroll to the bottom and change `Site title` and `Site description` parameters. Press `Save site settings`. Now the settings are saved in `content.json`. Have you noticed that file in the root of your zite? It holds all information about your zite, including files and settings.\n\nNow let's publish your zite. First, press `Sign` button in the very bottom of the sidebar. Your `content.json` now holds updated information about files and is signed correctly. Now press `Publish`. You will probably see `Content publish failed` message. That's OK, as no other peers have downloaded your zite.\n\nNow, if you have a static IP or Tor mode is on, your zite can be accessed from other peers while your computer is on. If you want to turn your computer down, visit `0net.io`: `https://0net.io/{zite public key}/` (You can get public key from address bar of from sidebar).\nAvailable proxies: [0net.io](https://0net.io), [@amorgan's proxy](http://zn.amorgan.xyz) and [ZeroGate](https://zerogate.tk).\n\n\n## .bit address\n\nIf you really want to have a nice domain like `ivanq.bit`, use *Namecoin*. I won't cover this, but there are many tutorials in Internet and ZeroNet about it.\n",
			"date_added": 1543316476537,
			"slug": "ttaz---creating-static-zite"
		},
		{
			"id": "7ebc3e80-f233-11e8-8ed6-41694bbcd03b",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Creating zites\n\n## Cloning zites\n\nLet's start with creating a blog for you. Visit [*ZeroHello*](/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D), download [*ZeroBlog*](/Blog.ZeroNetwork.bit) if you haven't downloaded it yet, hover it, and press the epsilon. A menu appears:\n\n- To favourites\n- Update\n- Check files\n- Pause\n- Clone\n- Delete\n\nPress *Clone*. Your new blog appears. That's practically all about cloning.\n\n\n### Changing ZeroBlog\n\nYou can change blog title, description, etc. by hovering them and pressing a pencil to the left.\n\nNow, let's post something. Press *Add new post*. Edit post title, content and press *Sign & Publish new content* button in the bottom. When you sign data, `content.json` is changed. When you publish content, you send other peers that have your zite a new version, they send them to other peers, etc.\n\nBut now nobody except you have this zite. So, things become difficult. \n\n\n## Downloading and updating zites\n\nWhen you download a zite, ZeroNet opens your peer list and chooses those which already have this zite. For example, your second computer, which doesn't know about your first computer, wants to download your zite. How to connect these computers?\n\n...Via *trackers*. All peers often connect to trackers in *Internet* and tell them: we are on this IP and have these zites: `...`. So, the first computer tells some tracker about a new zite, and the second computer asks this tracker about anybody having this zite. Easy-peasy.\n\nOne more word about trackers. You need a static IP or Tor connection to share zites with other peers if these peers don't accept your zite update (for example, they don't have this zite at all).\n\n\n## Proxies\n\nAnybody can connect to your blog while there is a running computer (serving your zite). But you probably want to shutdown it at night. So it's a good idea to have a computer always working.\n\nFortunately, there are such computers: *ZeroNet proxies*. [0net.io](https://0net.io) is one of them. You should use them as you use local ZeroNet. On proxies, *ZeroTalk* address is `https://0net.io/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT`\n\nWhen your blog is ready, visit `https://0net.io/{zite public key}/`. You can get public key from address bar: `http://127.0.0.1:43110/{zite public key}/`.\n\nAvailable proxies: [0net.io](https://0net.io), [@amorgan's proxy](http://zn.amorgan.xyz) and [ZeroGate](https://zerogate.tk).\n\n\n## .bit addresses\n\nEvery zite can be accessed via public key (e.g. `1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT` for *ZeroTalk*). Hosting such zites takes no price. But you probably don't think `1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT` is a nice address what if you could have `zerotalk.com`?\n\n...In fact, you can do that via *Namecoin*. *Namecoin* is based on blockchain. If you want to register `.bit` address (for price), you should download a *Namecoin* client and make a `.bit` address there (only `.bit` suffix is supported).\n\nIf you don't want to host a *Namecoin* client and host the whole blockchain, you can use online services to host domains, such as Dotbit.me and Peername.\n\nAs majority has *Namecoin* plugin enabled, you can access *ZeroTalk* via `http://127.0.0.1:43110/Talk.ZeroNetwork.bit/`.\n\nYou can check registered `.bit` addresses at [ZeroName](/zeroname.bit/).\n\n\n## Homework\n\nTry to clone *ZeroTalk* and make your own zite.\n",
			"date_added": 1543316361833,
			"slug": "ttaz---cloning-zites"
		},
		{
			"id": "22ffbf40-f233-11e8-9146-8f614b42ab6e",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorials.\n\n---\n\n# Security\n\nThis section is about security in ZeroNet. If you are not interested in this or don't understand much, just remember a few things and skip this part.\n\n- Each zite has a public key and a private key. You access *ZeroHello* by visiting `http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D/` - here, `1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D` is a public key. Only site owner has private key, and he publishes changes using it.\n- When you want to download a zite, you connect to other peers you know and download zite content from them.\n- No one can change any data on zite without a private key for that zite.\n\n\n## Wrong SHA512\n\nIn ZeroNet, everybody hosts zites, but not all - only the zites they want. For example, if `Windows` hosts `ZeroMe`, and `iPad` wants to download it, `iPad` connects to `Windows` *directly* and says:\n\n- **iPad**: Hey, *Windows*, give me `content.json` of `ZeroMe`.\n- **Windows**: Here it is: ...\n- **iPad**: Thanks! And I also need `index.html`, `js/all.js` and `css/all.css` of `ZeroMe`.\n- **Windows**: Here is `index.html`: ... But I have no `js/all.js` and `css/all.css`, sorry.\n\n*Windows* gave *iPad* `index.html`, but where can *iPad* find `js/all.js` and `css/all.css`? From other peers *Windows* knows. But the problem is, if *Windows* is malicious, he can only recommend peers that also didn't have those files.\n\n- **iPad**: Good bye, *Windows*.\n- **iPad**: ...Searching peers...\n- **iPad**: Hey, *MacOS*, you have `js/all.js` and `css/all.css` of `ZeroMe`?\n- **MacOS**: Of course I have! Here they are: ...\n\nBut *MacOS* is a hacker! It gives wrong `js/all.js`, with an exploit. Boom! `Windows` has an infected `js/all.js`!\n\n...In fact, no. Each zite has its public key and private key. Public key example is: `1BewKAyyiMZHY3AjQn65J6f6Rcb9p1h64K`. Public key is zite address.\n\nIn `content.json` of any zite, there is an SHA512 of each files and size of each file. **MacOS** gave **iPad** a file with other SHA512, so **iPad** says:\n\n- **iPad**: `css/all.css` is OK. `js/all.js`... isn't.\n- **iPad**: ...Adds *MacOS* to black list...\n- **iPad**: Good bye, *MacOS*.\n- **iPad**: ...Searching peers...\n- **iPad**: Hey, *Linux*, you have `js/all.js` of `ZeroMe`?\n- **Linux**: Yes. Here it is: ...\n- **iPad**: Thanks. Good bye, *Linux*.\n\nNow *iPad* has full *ZeroMe* and can show it to you.\n\nThat's how ZeroNet makes data secure with SHA512.\n\n\n## Wrong `content.json`\n\nNow *Linux* needs *ZeroTalk* (its public key is `1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT`):\n\n- **Linux**: You have `content.json` of `1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT`?\n- **MacOS**: Yes. Take it, please: ...\n\nAs we know, *MacOS* is a hacker. It gives wrong `content.json`, with wrong SHA512. *Linux* would ask *MacOS* for `js/all.js`, and *MacOS* would give *Linux* file with exploit.\n\n- **Linux**: Thanks! ...Wait a minute. `content.json` is signed with wrong key.\n- **Linux**: ...Adds *MacOS* to black list...\n- **Linux**: Good bye, *MacOS*.\n\n*Linux* is clever. `content.json` is signed with private key. *MacOS* would have to steal private key or bruteforce it. But the latter is practically impossible. And you shouldn't let anybody steal zite's private key.\n\n\n## Signing\n\nNow, we know how data is signed. Only `content.json` is signed, and all other files are signed using `content.json` and its SHA512. It means that nothing can be changed without private key, and usual rainbow tables are useless.\n\n\n## Restricted policy\n\nAs ZeroNet cannot create a new server for every zite you visit, it creates a single server at `http://127.0.0.1:43110/`. So, some more security is needed. ZeroNet opens every zite in a restricted `<iframe>`, so *localStorage* and some other things can not be used (because some zite would be able to access other zite's data).\n\nZeroNet also does not let zites escape from `<iframe>` - a special token is passed to `<iframe>`, zites use it to communicate with ZeroNet server for some low-level commands. As it changes when you reload the page, bruteforcing `wrapper_nonce` (the token) is the only way to escape `<iframe>`.\n\nBut how can data be passed to `<iframe>`? Only with query string. So, there is always a `wrapper_nonce` parameter in query string. So, if you expect query string be `?a=2`, in fact it is `?a=2&wrapper_nonce=e0ccdebc9a804cfd8ac9eaf78a4a03054acbd400ce981219037647922219fbcd`.\n",
			"date_added": 1543316207924,
			"slug": "ttaz---security"
		},
		{
			"id": "f8f39640-f232-11e8-a432-4fc704a23979",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorial.\n\n---\n\n# ZeroNet sites\n\nZeroNet sites, or *zites*, as we call them, are distributed across the network.\n\n\n## Why ZeroNet is better than Internet\n\n### Internet\n\nHere is the scheme of the Internet:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |  +--|    Google    |\n       _________         |       |   |  /..\\  |   |  |  |______________|\n      | Windows |--------+-------|---|  \\__/  |---|--+   ______________\n      |_________|                |   |___||___|   |  |  |              |\n      |_|_|_|_|_|                |                |  +--|   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nAnd that's what happens if your provider is down or the server you're trying to connect is down or blocked:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |     |    Google    |\n       _________         |       |   |\\/\\/\\/\\/|   |     |______________|\n      | Windows |--------+-------|---|/\\ No /\\|   |      ______________\n      |_________|                |   |\\/\\/\\/\\/|   |     |              |\n      |_|_|_|_|_|                |                |     |   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nYou've got no access to the server.\n\n\n### ZeroNet\n\nAnd this is ZeroNet:\n\n     ________       +--------+\n    |        |      | iPhone |\n    |  iPad  |      +--------+\n    |________|-----------+    \n         |               |    \n       __|______         |    \n      | Windows |--------+    \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nIf *iPhone* is down or blocked:\n\n     ________       +--------+\n    |        |      |\\/ No \\/|\n    |  iPad  |      +--------+\n    |________|                \n         |                    \n       __|______              \n      | Windows |             \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nOther peers still have access to the zites.\n\n\n## Installing ZeroNet\n\nTo use ZeroNet on Windows, Mac or Linux machine, install it first. Visit [zeronet.io](https://zeronet.io) and download ZeroNet there.\n\n\n## Visiting zites\n\nZeroNet installs a local server on your computer, usually on *http://127.0.0.1:43110* address. When you run ZeroNet, a browser window opens.\n\nOn the left, you can see the list of zites hosted by your machine, and a few links to other helpful zites. Click zite to open (or download) it. Feel free to visit some of them now.\n\nI said *download* because that's how ZeroNet works. Let's discuss it later.\n\n\n## Getting ZeroID\n\nA user can register on such *Internet* sites as Google, eBay, etc. On zites, registration is not technically possible, but don't worry. Instead, ZeroNet introduces *Certificate Authorities*. For example, [ZeroID](/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/). This is the most popular certificate provider, so let's register there first.\n\nVisit [ZeroID](/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/) and register with any nickname you like. (*Note: If you don't want to reveal your IP, set up ZeroNet to use TOR.*)\n\nYou enterd nickname, but what about password? It was generated automatically. There is a `users.json` file in ZeroNet root directory. When you register on *ZeroID*, new entries appear in `users.json`: your public and private keys for *ZeroID*. You shouldn't share your private key - it's your password. And public key is your login - you share it with zites you post on. Your nickname is also stored there. If you lose `users.json` or manually change your public and private keys or nickname, you cannot access your account. It's a good idea to backup this file.\n\n\n## Getting ZeroTalk account\n\nNow, let's check a zite which let you use your *ZeroID*. *ZeroTalk* is a perfect choice. It's a popular forum.\n\nLet's visit [ZeroTalk](/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT/). Go to *Test messages* topic, press *Sign in as...* and choose *{yourusername}@zeroid.bit*. Enter some kind of `Hello, world!` and press *Submit comment*. Instead of `Hello, world!`, you can publish this tutorial. :) \n\nNotice `Forums: English · Dansk · Español · Français ...` on the top of the page and select your language. If you are from *China*, better go to the special [New GFW Talk](/19BPUZYAdCMxExKHoVSG3cG95wfUfFTEC9/) zite.\n",
			"date_added": 1543316137380,
			"slug": "ttaz---sites"
		},
		{
			"id": "bdfa6370-f232-11e8-a432-4fc704a23979",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorial.\n\n---\n\n# ZeroNet sites\n\nZeroNet sites, or *zites*, as we call them, are distributed across the network.\n\n\n## Why ZeroNet is better than Internet\n\n### Internet\n\nHere is the scheme of the Internet:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |  +--|    Google    |\n       _________         |       |   |  /..\\  |   |  |  |______________|\n      | Windows |--------+-------|---|  \\__/  |---|--+   ______________\n      |_________|                |   |___||___|   |  |  |              |\n      |_|_|_|_|_|                |                |  +--|   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nAnd that's what happens if your provider is down or the server you're trying to connect is down or blocked:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |     |    Google    |\n       _________         |       |   |\\/\\/\\/\\/|   |     |______________|\n      | Windows |--------+-------|---|/\\ No /\\|   |      ______________\n      |_________|                |   |\\/\\/\\/\\/|   |     |              |\n      |_|_|_|_|_|                |                |     |   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nYou've got no access to the server.\n\n\n### ZeroNet\n\nAnd this is ZeroNet:\n\n     ________       +--------+\n    |        |      | iPhone |\n    |  iPad  |      +--------+\n    |________|-----------+    \n         |               |    \n       __|______         |    \n      | Windows |--------+    \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nIf *iPhone* is down or blocked:\n\n     ________       +--------+\n    |        |      |\\/ No \\/|\n    |  iPad  |      +--------+\n    |________|                \n         |                    \n       __|______              \n      | Windows |             \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nOther peers still have access to the zites.\n\n\n## Installing ZeroNet\n\nTo use ZeroNet on Windows, Mac or Linux machine, install it first. Visit `https://zeronet.io` and download ZeroNet there.\n\n\n## Visiting zites\n\nZeroNet installs a local server on your computer, on *http://127.0.0.1:43110* address. When you run ZeroNet, a browser window opens.\n\nOn the left, you can see the list of zites hosted by your machine, and a few links to other helpful zites. Click zite to open (or download) it. Feel free to visit some of them now.\n\nI said *download* because that's how ZeroNet works. Let's discuss it later.\n\n\n## Getting ZeroID\n\nA user can register on such *Internet* sites as Google, eBay, etc. On zites, registration is not technically possible, but don't worry. Instead, ZeroNet introduces *Certificate Authorities*. For example, [ZeroID](http://127.0.0.1:43110/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/). This is the most popular certificate provider, so let's register there first.\n\nVisit [ZeroID](http://127.0.0.1:43110/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/) and register with any nickname you like. (*Note: If you don't want to reveal your IP, set up ZeroNet to use TOR.*)\n\nYou enterd nickname, but what about password? It was generated automatically. There is a `users.json` file in ZeroNet root directory. When you register on *ZeroID*, new entries appear in `users.json`: your public and private keys for *ZeroID*. You shouldn't share your private key - it's your password. And public key is your login - you share it with zites you post on. Your nickname is also stored there. If you lose `users.json` or manually change your public and private keys or nickname, you cannot access your account. It's a good idea to backup this file.\n\n\n## Getting ZeroTalk account\n\nNow, let's check a zite which let you use your *ZeroID*. *ZeroTalk* is a perfect choice. It's a popular forum.\n\nLet's visit [ZeroTalk](http://127.0.0.1:43110/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT/). Go to *Test messages* topic, press *Sign in as...* and choose *{yourusername}@zeroid.bit*. Enter some kind of `Hello, world!` and press *Submit comment*. Instead of `Hello, world!`, you can publish this tutorial. :) \n\nNotice `Forums: English · Dansk · Español · Français ...` on the top of the page and select your language. If you are from *China*, better go to the special [New GFW Talk](http://127.0.0.1:43110/19BPUZYAdCMxExKHoVSG3cG95wfUfFTEC9/) zite.\n",
			"date_added": 1543316038440,
			"slug": "ttaz---sites"
		},
		{
			"id": "b0500180-f232-11e8-a432-4fc704a23979",
			"body": "This article is part of [[The truth about ZeroNet]] series of tutorial.\n---\n\n# ZeroNet sites\n\nZeroNet sites, or *zites*, as we call them, are distributed across the network.\n\n\n## Why ZeroNet is better than Internet\n\n### Internet\n\nHere is the scheme of the Internet:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |  +--|    Google    |\n       _________         |       |   |  /..\\  |   |  |  |______________|\n      | Windows |--------+-------|---|  \\__/  |---|--+   ______________\n      |_________|                |   |___||___|   |  |  |              |\n      |_|_|_|_|_|                |                |  +--|   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nAnd that's what happens if your provider is down or the server you're trying to connect is down or blocked:\n\n     ________       +--------+   |                |\n    |        |      | iPhone |   |                |\n    |  iPad  |      +--------+   |                |      ______________\n    |________|-----------+       |                |     |              |\n                         |       |    ________    |     |    Google    |\n       _________         |       |   |\\/\\/\\/\\/|   |     |______________|\n      | Windows |--------+-------|---|/\\ No /\\|   |      ______________\n      |_________|                |   |\\/\\/\\/\\/|   |     |              |\n      |_|_|_|_|_|                |                |     |   Facebook   |\n      |_|_|_|_|_|                |                |     |______________|\n                                 |                |\n           *Devices*             |   *Provider*   |         *Sites*\n\nYou've got no access to the server.\n\n\n### ZeroNet\n\nAnd this is ZeroNet:\n\n     ________       +--------+\n    |        |      | iPhone |\n    |  iPad  |      +--------+\n    |________|-----------+    \n         |               |    \n       __|______         |    \n      | Windows |--------+    \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nIf *iPhone* is down or blocked:\n\n     ________       +--------+\n    |        |      |\\/ No \\/|\n    |  iPad  |      +--------+\n    |________|                \n         |                    \n       __|______              \n      | Windows |             \n      |_________|             \n      |_|_|_|_|_|             \n      |_|_|_|_|_|             \n                              \n      *Devices = zites*          \n\nOther peers still have access to the zites.\n\n\n## Installing ZeroNet\n\nTo use ZeroNet on Windows, Mac or Linux machine, install it first. Visit `https://zeronet.io` and download ZeroNet there.\n\n\n## Visiting zites\n\nZeroNet installs a local server on your computer, on *http://127.0.0.1:43110* address. When you run ZeroNet, a browser window opens.\n\nOn the left, you can see the list of zites hosted by your machine, and a few links to other helpful zites. Click zite to open (or download) it. Feel free to visit some of them now.\n\nI said *download* because that's how ZeroNet works. Let's discuss it later.\n\n\n## Getting ZeroID\n\nA user can register on such *Internet* sites as Google, eBay, etc. On zites, registration is not technically possible, but don't worry. Instead, ZeroNet introduces *Certificate Authorities*. For example, [ZeroID](http://127.0.0.1:43110/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/). This is the most popular certificate provider, so let's register there first.\n\nVisit [ZeroID](http://127.0.0.1:43110/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz/) and register with any nickname you like. (*Note: If you don't want to reveal your IP, set up ZeroNet to use TOR.*)\n\nYou enterd nickname, but what about password? It was generated automatically. There is a `users.json` file in ZeroNet root directory. When you register on *ZeroID*, new entries appear in `users.json`: your public and private keys for *ZeroID*. You shouldn't share your private key - it's your password. And public key is your login - you share it with zites you post on. Your nickname is also stored there. If you lose `users.json` or manually change your public and private keys or nickname, you cannot access your account. It's a good idea to backup this file.\n\n\n## Getting ZeroTalk account\n\nNow, let's check a zite which let you use your *ZeroID*. *ZeroTalk* is a perfect choice. It's a popular forum.\n\nLet's visit [ZeroTalk](http://127.0.0.1:43110/1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT/). Go to *Test messages* topic, press *Sign in as...* and choose *{yourusername}@zeroid.bit*. Enter some kind of `Hello, world!` and press *Submit comment*. Instead of `Hello, world!`, you can publish this tutorial. :) \n\nNotice `Forums: English · Dansk · Español · Français ...` on the top of the page and select your language. If you are from *China*, better go to the special [New GFW Talk](http://127.0.0.1:43110/19BPUZYAdCMxExKHoVSG3cG95wfUfFTEC9/) zite.\n",
			"date_added": 1543316015512,
			"slug": "ttaz---sites"
		},
		{
			"id": "eb94b1b0-f231-11e8-bd37-39849ab4f344",
			"body": "# The truth about ZeroNet - Tutorials by imachug\nThe original version of these tutorials can be found [on github](https://github.com/imachug/The-Truth-about-ZeroNet).\nThe versions on this site were copied from that repository on the 27th November 2018.\n\nThey are really well written and can lead a starting developer to become a master one in no time :)\n\n1. [[TTAZ - Sites|ZeroNet Sites]]: in what do they differ from normal ones and how to become a ZeroNet user.\n2. [[TTAZ - Security|Security of sites]]: how do you \"own\" a site and the iframe problem.\n3. [[TTAZ - Cloning Zites|Cloning Zites]]: how to clone a site, Proxies and .bit domains.\n4. [[TTAZ - Creating static zite|Creating a Static Zite]]: building a static site and changing its settings.\n5. [[TTAZ - ZeroFrame|ZeroFrame]]: using ZeroNet API: localStorage and filesystem calls.\n6. [[TTAZ - Databases|Creating databases]]: dbschema format, mapping tables and some queries.\n7. [[TTAZ - Changing Tables|Changing Tables]]: autoincrement fields, writing to database and publishing updates.\n8. [[TTAZ - Dbschema|More about dbschema]]: finer look at dbschema and dbschema versions.\n9. [[TTAZ - User content|User content]]: `content.json` format for user data and login via ZeroID.\n10. [[TTAZ - Editing user data|Editing user data]]: a simple question and answers example.\n11. [[TTAZ - Merger sites|Merger sites and hubs]]: how to split big amount of data.\n12. [[TTAZ -  Editing merged sites|Editing merged sites]]: dbschema, getting the username, adding and removing hubs.\n13. [[TTAZ - Ugly things|Ugly things]]: dbquery placeholders and adding moderators.",
			"date_added": 1543315685451,
			"slug": "the-truth-about-zeronet"
		},
		{
			"id": "b89e7fe0-f22f-11e8-bd37-39849ab4f344",
			"body": "# The truth about ZeroNet - Tutorials by imachug\nThe original version of these tutorials can be found [on github](https://github.com/imachug/The-Truth-about-ZeroNet).\nThe versions on this site were copied from that repository on the 27th November 2018.\n\nThey are really well written and can lead a starting developer to become a master one in no time :)\n\n1. [[ZeroNet Sites|TTAZ - Sites]]: in what do they differ from normal ones and how to become a ZeroNet user.\n",
			"date_added": 1543314740959,
			"slug": "the-truth-about-zeronet"
		},
		{
			"id": "44eebde0-f198-11e8-aca6-cfbe8d3962af",
			"body": "# Other places to find documentation\n\n- [ZeroNet official documentation](https://zeronet.readthedocs.io/en/latest/): official (and very scarce) documentation about ZeroNet.\n- [ZeroNet Dev Center](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt) a simple site with some tutorials\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official ZeroNet blog, some posts are tutorial.\n- [Developer Resource Index](/Talk.ZeroNetwork.bit/?Topic:1509171908_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h) on a ZeroTalk post.\n- [The truth about ZeroNet](https://github.com/krixano/ZeroNet-Dev-Center/files/1334487/The.truth.about.ZeroNet.zip), a series of tutorials written by imachug to get started developing sites up to merger sites.\n- [ZeroMedium](/1CVmbCKWtbskK2GAZLM6gnMuiL6Je25Yds): where users publishes their story. While not exactly made to document something, it has many articles about ZeroNet.\n",
			"date_added": 1543249692863,
			"slug": "other-documentation"
		},
		{
			"id": "eb6bdaf0-f197-11e8-98bb-b36947d9ac3f",
			"body": "# Available frameworks to write ZN sites\n\n- [ZeroDevLib](https://github.com/imachug/ZeroDevLib), documented js files that wrap commonly used functionalities on ZeroNet and can speed up your site development.\n- [Mavo](/1F6Rt2QNMA6uJTSTZkDNBfXTd3unrtgcdJ) ZeroNet storage experimental plugin for Mavo that allows apps written in Mavo to run also on ZeroNet with almost no change. ",
			"date_added": 1543249542704,
			"slug": "available-frameworks"
		},
		{
			"id": "f8454330-f195-11e8-aed6-035d1f66c1b4",
			"body": "# Find the user public hash from its ID\nSuppose you know an ID of a user (we will use `nofish@zeroid.bit` for this article) and want to know its public hash in a certain site (let's say ZeroTalk AKA `1TaLkFrMwvbNsooF4ioKAY9EuxTBTjipT`).\n\n1. [[Find ZN folder]] on your computer\n2. Navigate to the site folder you want to know (e.g. `ZeroNet/data/1TaLk.../data/users`).\n3. Here search for the string `\"cert_user_id\": \"nofish@zeroid.bit\"` in one of the users `content.json`.\n\n    This step is easily done with a bash command (if under linux) such as:\n    ```\n    find . -mindepth 2 -iname \"content.json\" | xargs -n 1 -I {} -- bash -c \"grep -q -e 'nofish@zeroid.bit' {} && echo {}\"    \n    ```\n    that is to be executed inside the `data/users` folder.\n\n    The printed folder will be the public hash of the user for the site.",
			"date_added": 1543248705265,
			"slug": "find-the-user-public-hash"
		},
		{
			"id": "c7293320-f194-11e8-a99b-59371b9f16d7",
			"body": "# Ban a user from your site\n1. [[Find ZN folder]] in your computer\n2. [[Find your site address]]\n3. Go into the folder `ZeroNet/data/YOUR_ADDRESS` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n    Under the section `permissions` you can add some IDs and set them to false, which does not allow the user to post any more content to the site.\n    ```\n    \"permissions\": {\n      \"BAD_USER@zeroid.bit\": false\n    }\n    ```\n",
			"date_added": 1543248193363,
			"slug": "ban-a-user-from-your-site"
		},
		{
			"id": "908c5590-f194-11e8-9f7b-db84c32ff957",
			"body": "# How to change user quotas for a site you own\n\n1. [[Find ZN folder]] in your computer\n2. [[Find your site address]]\n3. Go into the folder `ZeroNet/data/SITE_ADDR` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n  - Under the section `permission_rules` you can specify some rules and change quotas to all the users of your site:\n    ```\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 115000\n      } \n    }\n    ```\n    This configuration allows every user to write to the file named \"data.json\" under his user folder and the max size of this file can be 115KB.\n  - Under the section `permissions` you can add some IDs and give them different limits, for example to trusted users that produced useful content you can give them more space:\n    ```\n    \"permissions\": {\n      \"trenta3@zeroid.bit\": { \"max_size\": 300000 }\n    }\n    ```\n    Note that we inserted as key the user ID (and their provider name), and as the value we inserted the object with changed to the keys we want. In this example we are changing the max allowed size and giving the user `trenta3` the possibility to add 300KB of content.\n\n---\nYou may also be interested in:\n- [[Ways to prevent spam]] to destroy your site",
			"date_added": 1543248101737,
			"slug": "change-user-quotas"
		},
		{
			"id": "905e8ed0-f194-11e8-9f7b-db84c32ff957",
			"body": "# How to change user quotas for a site you own\n\n1. [[Find ZN folder]] in your computer\n2. [[Find your site address]]\n3. Go into the folder `ZeroNet/data/SITE_ADDR` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n  - Under the section `permission_rules` you can specify some rules and change quotas to all the users of your site:\n    ```\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 115000\n      } \n    }\n    ```\n    This configuration allows every user to write to the file named \"data.json\" under his user folder and the max size of this file can be 115KB.\n  - Under the section `permissions` you can add some IDs and give them different limits, for example to trusted users that produced useful content you can give them more space:\n    ```\n    \"permissions\": {\n      \"trenta3@zeroid.bit\": { \"max_size\": 300000 }\n    }\n    ```\n    Note that we inserted as key the user ID (and their provider name), and as the value we inserted the object with changed to the keys we want. In this example we are changing the max allowed size and giving the user `trenta3` the possibility to add 300KB of content.\n\n---\nYou may also be interested in:\n- [[Ways to prevent spam]] to destroy your site",
			"date_added": 1543248101437,
			"slug": "change-user-quotas"
		},
		{
			"id": "84ac0540-f194-11e8-9f7b-db84c32ff957",
			"body": "# How to change user quotas for a site you own\n\n1. [[Find ZN folder]] in your computer\n2. [[Find your site address]].\n3. Go into the folder `ZeroNet/data/<YOUR_ADDRESS>` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n  - Under the section `permission_rules` you can specify some rules and change quotas to all the users of your site:\n    ```\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 115000\n      } \n    }\n    ```\n    This configuration allows every user to write to the file named \"data.json\" under his user folder and the max size of this file can be 115KB.\n  - Under the section `permissions` you can add some IDs and give them different limits, for example to trusted users that produced useful content you can give them more space:\n    ```\n    \"permissions\": {\n      \"trenta3@zeroid.bit\": { \"max_size\": 300000 }\n    }\n    ```\n    Note that we inserted as key the user ID (and their provider name), and as the value we inserted the object with changed to the keys we want. In this example we are changing the max allowed size and giving the user `trenta3` the possibility to add 300KB of content.\n\n---\nYou may also be interested in:\n- [[Ways to prevent spam]] to destroy your site",
			"date_added": 1543248081813,
			"slug": "change-user-quotas"
		},
		{
			"id": "7a0ee350-f194-11e8-80ae-79cb587e2599",
			"body": "# Find the current site address\nYou can usually see it in the browser top bar, it starts with a 1 followed by 25 to 36 alphanumeric characters.\nIt looks like `18hFUweFE3AJwZWnaMeq3fJMobrq8jevfd`. **Upper and lowercase do matter**.\n\n## If you see the site name (e.g. `blog.zeronet.bit`)\nYou should then open [ZeroName](/1Name2NXVi1RDPDgf5617UoW7xA6YrhM9F) and search for the site name to find the correspondence with its address.",
			"date_added": 1543248064006,
			"slug": "find-your-site-address"
		},
		{
			"id": "1f52e420-f194-11e8-af03-49cb8902dbb5",
			"body": "# Delete some user content from your site\nIf you want to remove a comment or a specific post of a user without deleting all things it has written, you won't have an easy time.\n\n1. [[Find ZN folder]] in your computer.\n2. [[Find your site address]] and copy it.\n3. [[Find the user public hash]] from his ID.\n4. Now under the ZN folder in your computer go to `ZeroNet/data/SITE_ADDR/data/users/USER_HASH` and there open the file `data.json` (or whichever file the user data is in) with a text editor.\n    Now find the text of the comment you want to delete and delete it from the file, then save it.\n5. Now you should sign and publish **the user file** in order to get the update to propagate to the network.",
			"date_added": 1543247911779,
			"slug": "delete-some-user-content"
		},
		{
			"id": "409a7130-f193-11e8-9331-c7a3af9c1e68",
			"body": "# Other places to find documentation\n\n- [ZeroNet official documentation](https://zeronet.readthedocs.io/en/latest/): official (and very scarce) documentation about ZeroNet.\n- [ZeroNet Dev Center](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt) a simple site with some tutorials\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official ZeroNet blog, some posts are tutorial.\n- [ZeroMedium](/1CVmbCKWtbskK2GAZLM6gnMuiL6Je25Yds): where users publishes their story. While not exactly made to document something, it has many articles about ZeroNet.",
			"date_added": 1543247538116,
			"slug": "other-documentation"
		},
		{
			"id": "e0f509e0-f190-11e8-8ec0-5f48b2f9aa88",
			"body": "# [Register a .bit domain for your site] [1]\nYou can register .bit domains using Namecoin. Manage your domains using the client's GUI or by the command line interface.\n\nAfter the registration is done you have to edit your (Namecoin) domain's record by adding a zeronet section to it, e.g.:\n```\n    \"zeronet\": {\n        \"\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\",\n        \"blog\": \"1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8\",\n        \"talk\": \"1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\"\n    },\n```\n\nAn empty string (\"\") means the top domain, anything other than that is a sub-domain.\n\n**Tip**: You can buy Namecoin for Bitcoin or other cryptocurrencies using [shapeshift.io]().\n\n**Tip**: Other possibilities to register .bit domains: [domaincoin.net](), [peername.com](), [dotbit.me]()\n\n**Tip**: You can verify your domain on [namecha.in](), for example: zeroid.bit\n\n**Tip**: You should use only lower-cased letters, numbers and - in your domains.\n\n**Tip**: To make ZeroHello display your domain name instead of your site's Bitcoin address, add a domain key to your `content.json`:\n\n```\n    \"domain\": \"blog.zeronet.bit\",\n```\n\n[1]: https://zeronet.readthedocs.io/en/latest/faq/ \"Copied from ZeroNet Documentation\"",
			"date_added": 1543246518654,
			"slug": "register-bit-domain"
		},
		{
			"id": "cfdcaa50-f190-11e8-8ec0-5f48b2f9aa88",
			"body": "# [Register a .bit domain for your site] [1]\nYou can register .bit domains using Namecoin. Manage your domains using the client's GUI or by the command line interface.\n\nAfter the registration is done you have to edit your (Namecoin) domain's record by adding a zeronet section to it, e.g.:\n...\n    \"zeronet\": {\n        \"\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\",\n        \"blog\": \"1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8\",\n        \"talk\": \"1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\"\n    },\n...\n\nAn empty string (\"\") means the top domain, anything other than that is a sub-domain.\n\n**Tip**: You can buy Namecoin for Bitcoin or other cryptocurrencies using [shapeshift.io]().\n\n**Tip**: Other possibilities to register .bit domains: [domaincoin.net](), [peername.com](), [dotbit.me]()\n\n**Tip**: You can verify your domain on [namecha.in](), for example: zeroid.bit\n\n**Tip**: You should use only lower-cased letters, numbers and - in your domains.\n\n**Tip**: To make ZeroHello display your domain name instead of your site's Bitcoin address, add a domain key to your `content.json`:\n    ```\n      \"domain\": \"blog.zeronet.bit\",\n    ```\n\n[1]: https://zeronet.readthedocs.io/en/latest/faq/ \"Copied from ZeroNet Documentation\"",
			"date_added": 1543246489973,
			"slug": "register-bit-domain"
		},
		{
			"id": "2587edd0-f190-11e8-9633-7fa5c8f0fbff",
			"body": "# Ban a user from your site\n1. [[Find ZN folder]] in your computer\n2. Get your site address (you can usually see it in the browser top bar, it starts with a 1 followed by 25 to 36 alphanumeric characters). It looks like `18hFUweFE3AJwZWnaMeq3fJMobrq8jevfd`. **Upper and lowercase do matter**.\n3. Go into the folder `ZeroNet/data/YOUR_ADDRESS` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n    Under the section `permissions` you can add some IDs and set them to false, which does not allow the user to post any more content to the site.\n    ```\n    \"permissions\": {\n      \"BAD_USER@zeroid.bit\": false\n    }\n    ```\n",
			"date_added": 1543246204207,
			"slug": "ban-a-user-from-your-site"
		},
		{
			"id": "b52fb4a0-f18f-11e8-995e-c5aeb79c9638",
			"body": "# Ways to prevent spam in sites\n\n## Small user quotas frequently updated\nYou can keep small quotas for all the users.\nIf someone spams it has a low impact on the space occupied by the site and you can ban the user before he does great damage.\nIf a user come close to its quota, you should automatically and periodically raise its limit to something higher.\n\nTo do that you should see how to [[change user quotas]].\n\n## User ban\nYou can ban a user, so that he is not able to post other content on your site.\nFollow the guide to [[ban a user from your site]].",
			"date_added": 1543246015723,
			"slug": "ways-to-prevent-spam"
		},
		{
			"id": "c9e8f060-f189-11e8-842f-5737acee8722",
			"body": "# What is a Site on ZeroNet?\nA site is a collection of static html pages and css styles along with some javascript that, using ZeroNet API, makes it dynamic and looks like a real site.\n\nThe ZeroNet executable takes care to sync your user data (written in a some json files) to other peers which collect it and makes it available to the javascript frontend in your site.\n\n## Can I use PHP or other scripting languages?\nNo, there is no server-side in ZeroNet: every client acts as a server for the local user and then help keeping the data in sync with other peers every time it has access to an internet connection.\n\nYou have to restructure how your site deals with user input. In particular if you want something to remain secret you have to encrypt it or to store it in the local files of the user and the only language you can use is Javascript which will be executed inside the browser sandbox.\n\nIt may actually be possible in the short future to use other scripting languages such as Python and have a sort of backend code using the BackgroundTask Plugin.",
			"date_added": 1543243473511,
			"slug": "sites-on-zn"
		},
		{
			"id": "974a5f00-f188-11e8-9855-c99d994c92fb",
			"body": "# Write your own ZeroBoard: a global chat\nWe only provide a [link to the article](/Blog.ZeroNetwork.bit/?Post:99:ZeroChat+tutorial) which is hosted on ZeroBlog, that helps you write your global chat site in under 100 lines of code.",
			"date_added": 1543242959088,
			"slug": "write-your-own-zeroboard"
		},
		{
			"id": "4f63b1a0-f188-11e8-b293-fb032848c0a0",
			"body": "# How to change user quotas for a site you own\n\n1. [[Find ZN folder]] in your computer\n2. Get your site address (you can usually see it in the browser top bar, it starts with a 1 followed by 25 to 36 alphanumeric characters). It looks like `18hFUweFE3AJwZWnaMeq3fJMobrq8jevfd`. **Upper and lowercase do matter**.\n3. Go into the folder `ZeroNet/data/<YOUR_ADDRESS>` and then into the user data folder (that is usually under `data/users`).\n4. There edit the file `content.json` accordingly:\n  - Under the section `permission_rules` you can specify some rules and change quotas to all the users of your site:\n    ```\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 115000\n      } \n    }\n    ```\n    This configuration allows every user to write to the file named \"data.json\" under his user folder and the max size of this file can be 115KB.\n  - Under the section `permissions` you can add some IDs and give them different limits, for example to trusted users that produced useful content you can give them more space:\n    ```\n    \"permissions\": {\n      \"trenta3@zeroid.bit\": { \"max_size\": 300000 }\n    }\n    ```\n    Note that we inserted as key the user ID (and their provider name), and as the value we inserted the object with changed to the keys we want. In this example we are changing the max allowed size and giving the user `trenta3` the possibility to add 300KB of content.\n\n---\nYou may also be interested in:\n- [[Ways to prevent spam]] to destroy your site",
			"date_added": 1543242838459,
			"slug": "change-user-quotas"
		},
		{
			"id": "1fd77b40-f185-11e8-897c-9ded86631c00",
			"body": "# Backing up your personal data and your sites\nEven if sites are served even if a single peer has them, you may not want to loose ownership of your sites, since this would prevent you from updating them.\n\nThe steps to backup your data are simple and it is highly advisable that you take them:\n1. [[Find ZN folder]] where all the data resides.\n2. Go into the folder `ZeroNet/data` and copy the following files to a save place:\n    - `sites.json`, which contains informations (even private) about the sites you downloaded and own.\n    - `users.json`, which contains private informations about which user IDs do you have and where have you used them on which sites.\n\nPlease be sure to store the files in a secure place: whoever can read them can impersonate you in all your owned sited and you contributions to other sites. It is better if you encrypt them with some password you know and save them offline in multiple copies (e.g. on USB sticks).\n\nAlso you need to periodically redo such steps to be sure you have the most updated copy of your data.\nThis is especially important every time you create a new site of yours or get a new user ID from a provider.\n\n## Testing your backup\nIt is also advisable, every time you take a backup, to test if it is restorable by [[restoring data]] on a fresh ZeroNet installation. This way you can be sure that the backup is restorable.\n\n## Are there automated ways of doing it?\n**NO**, currently (as of December 2018) there is no automated procedure to backup your data, so be aware of it: if you loose your personal data, you loose all of your account on zeronet without the possibility to claim them back. \n\n---\nYou may also be interested in:\n- [[Restoring data]] from your backups.",
			"date_added": 1543241470197,
			"slug": "zn-backup"
		},
		{
			"id": "cb7c53e0-f184-11e8-aeb3-a5f6dd81754a",
			"body": "# Restoring data from a backup\nIf you have followed the procedure to do a [[ZN Backup]] of your personal data you should have saved somewhere the two files `users.json` and `sites.json`.\n\nYou can then download a clean version of ZeroBundle or ZeroNet application, [[Find ZN Folder]] before starting ZeroNet and copy inside the folder `ZeroNet/data/` the two filed you have backed up.\nThen start zeronet and watch the magic while your sites start redownloading and you have your user account.",
			"date_added": 1543241328671,
			"slug": "restoring-data"
		},
		{
			"id": "5fbb7d20-f184-11e8-a9c0-e7335c416c31",
			"body": "# Backing up your personal data and your sites\nEven if sites are served even if a single peer has them, you may not want to loose ownership of your sites, since this would prevent you from updating them.\n\nThe steps to backup your data are simple and it is highly advisable that you take them:\n1. [[Find ZN folder]] where all the data resides.\n2. Go into the folder `ZeroNet/data` and copy the following files to a save place:\n    - `sites.json`, which contains informations (even private) about the sites you downloaded and own.\n    - `users.json`, which contains private informations about which user IDs do you have and where have you used them on which sites.\n\nPlease be sure to store the files in a secure place: whoever can read them can impersonate you in all your owned sited and you contributions to other sites. It is better if you encrypt them with some password you know and save them offline in multiple copies (e.g. on USB sticks).\n\nAlso you need to periodically redo such steps to be sure you have the most updated copy of your data.\nThis is especially important every time you create a new site of yours or get a new user ID from a provider.\n\n---\nYou may also be interested in:\n- [[Restoring data]] from your backups.",
			"date_added": 1543241147890,
			"slug": "zn-backup"
		},
		{
			"id": "2008fd70-f183-11e8-9535-4153b7481047",
			"body": "# Contributing guidelines\n\n- All content is published under creative commons attribution-sharealike licence, so if taken from other places a link to them is due and if copied it must be checked that the licenses are compatible or have permission from the original author.\n- If at any time you are unsure about something, please write in the [Discussion Forum](/1J7KV2te4FhdpmhkLpoWGXEkdgm96eqMKK) about it to get others' opinion.\n- The published content must always be about zeronet sites development and widespread plugin usage. Self-promoting without a reason, spam, advertising, illicit content of any type, pornography, racism, sexism and personal prejudice are not allowed nor tolerated. Users posting them either on the wiki or on the forum will be permanently banned without further notice from the site owner at its discretion.\n- Please take some time to read [[Markdown from zero to hero]] to better write wiki pages.\n- To propose ideas and suggestions please use the discussion forum and do not write inside the wiki.\n- Each wiki page should be about a single topic, well-structured and readable by itself, and with links to other pertaining topics.\n- All contributions must be in the english language. Content in other languages will be deleted.\n- Use your common sense when writing about something, and write it in a novice-understandable way.\n- Write in simple phrases and keep an informal style, which is way more readable that a formal one.\n- Exemplify a topic the more you can.\n\nAlways try to keep a family athmosphere when writing something on the wiki or on the forum and keep in mind we all are constantly learning and that offences are not tolerated.",
			"date_added": 1543240611529,
			"slug": "contributing-guidelines"
		},
		{
			"id": "a49c2530-f17e-11e8-a446-35b40a349b2d",
			"body": "# How to find your ZN folder\n## In general\nWhatever OS you have, you certainly have the possibility to search in the folder structure.\nYou may want to search for the names: `ZeroNet`, `ZeroBundle`, `1Name2NXVi1RDPDgf5617UoW7xA6YrhM9F`.\n\n## On Linux\nTo install it you have probably downloaded the `ZeroBundle.tar.gz` file and unpacked it somewhere.\nThe folder you unpacked it into is what you are looking for.\n\n# ZN Folder structure\n```\nZeroBundle/\n    ZeroNet\n    lib\n    Python\n    ssl\n```\n\nUnder `ZeroNet/` the most important folder we have is `data` where all the data of your account and the sites you own or that you have visited resides.",
			"date_added": 1543238686469,
			"slug": "find-zn-folder"
		},
		{
			"id": "471b0800-f17d-11e8-aea7-f524d6c99eb2",
			"body": "# Developers Blog\nThis page lists some of the most important developers blogs on ZeroNet, where you can find some interesting project and other tutorials. **Please provide small description for each one** and **do not add you own blog unless it is really relevant**. Spam won't be tolerated.\n\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): official blog of ZeroNet where changelog of the software and some tutorials are presented.",
			"date_added": 1543238100109,
			"slug": "developers-blog"
		},
		{
			"id": "f3b2de10-f17a-11e8-8737-738739ec6365",
			"body": "# [Markdown from zero to hero] [1]\n\n**ZeroWiki supports basic markdown tags, below is a collection of helpful tags to help you create articles with style.**\n\n---\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line leave a  \nline break.\n\n---\n\nHorizontal Lines  like this can be done with \\***, \\--- and \\___\n\n---\n\nAn [external link](http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D).  \nA [clearnet link](https://zeronet.io).\n\n        An [external link](http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D).  \n        A [clearnet link](https://zeronet.io).\n\nAn internal link like [[ZeroWiki:Sandbox]].  \n\n        An internal link like ​[​[ZeroWiki:Sandbox]].\n​\n---\n\nThis is [an example] [id] reference-[style] link. \n[id]: http://example1.com/  \"Optional Title1 Here\"\n[style]: http://example2.com/  \"Optional Title2 Here\"\n\n        This is [an example] [id] reference-[style] link. \n        [id]: http://example1.com/  \"Optional Title1 Here\" \n        [style]: http://example2.com/  \"Optional Title2 Here\" \n​\n\n---\n\n![Image AltText](img/zerowiki.jpg \"Optional title\")  \n\n        ![Image AltText](img/zerowiki.jpg \"Optional title\")\n​\n\n---\n\nThis Is A Heading\n===  \n        This Is A Heading\n        ===\n\nThis Is A Sub-heading\n----  \n       This Is A Sub-heading\n       ----\n \n# This Is H1  \n        # This Is H1  \n ## This Is H2  \n        ## This Is H2  \n### This Is H3  \n        ### This Is H3  \n#### This Is H4  \n        #### This Is H4  \n​\n\n---\n\nText attributes:  \n\n| Markdown           | Normal          |  \n| ------------- |:-------------:|  \n|.................... |......................|  \n| _italic_  | \\_Italic_  |  \n|.................... |......................| \n| **bold**  | \\*\\*Bold**  |  \n|.................... |......................|  \n| `monospace` | \\`Monospace` |  \n|.................... |......................|  \n​\n\n---\n\n### How to make a list:  \nnotice the two spaces before *pears* and *oranges*. They will make it a sub-list.  \n\n```\nNumbered list:  \n\n  1. apples\n  2. oranges\n    * pears  \n  3. banana\n```\n```\n Bullet list:\n\n  * apples \n    1. oranges\n  * pears\n  * banana\n```\n\nNumbered list:  \n1. apples\n2. oranges\n  * pears  \n3. banana\n\nBullet list:  \n  * apples     \n    1. oranges\n  * banana                   \n  * pears                       \n​\n---\n### To make a code snippet:  \n\n| Markdown           | Normal          |  \n| ---------------------------- |:----------------------------:|  \n|.................................................. |....................................................|  \n| ``` The code you want to see ```  |     \\`\\`\\` The code you want to see \\`\\`\\`   \n​\n\n---\n### Making a table:  \n```\n| Markdown           | Normal             |  \n| ------------------ |:------------------:|  \n|................... |....................|  \n|* markymark *       | ​nonormal           |  \n```  \n| Markdown           | Normal                    |  \n| ----------------------- |:-----------------------:|  \n|....................... |.........................|  \n| ** markymark **         | ​nonormal               |  \n​\n\n---\n### Escaping a markdown character:  \nAs an escape char you can use \"\\\" before the char you want to escape. This will make it read as a normal character and not hold any special meaning. Good if you want to write a \\* for instance.\n\n| Markdown           | Normal          \n| ------------- |:-------------:|  \n|.............................. |................................|  \n| \\*literal asterisks\\*  | ​\\\\\\* literal asterisks​\\​*  |  \n​\n\n---\nFurther reading can be done at [GitHub's Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n​\n\n[1]: /1LX2wiouHctuUXtu5WkVM9TJJ3YoL6gAfm/?Page:wiki-formatting \"Page copied from original ZeroWiki\"",
			"date_added": 1543237101171,
			"slug": "markdown-from-zero-to-hero"
		},
		{
			"id": "be3998f0-f17a-11e8-92c0-c534f1f8f38a",
			"body": "# Markdown from zero to [hero] [1]\n\n**ZeroWiki supports basic markdown tags, below is a collection of helpful tags to help you create articles with style.**\n\n---\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line leave a  \nline break.\n\n---\n\nHorizontal Lines  like this can be done with \\***, \\--- and \\___\n\n---\n\nAn [external link](http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D).  \nA [clearnet link](https://zeronet.io).\n\n        An [external link](http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D).  \n        A [clearnet link](https://zeronet.io).\n\nAn internal link like [[ZeroWiki:Sandbox]].  \n\n        An internal link like ​[​[ZeroWiki:Sandbox]].\n​\n---\n\nThis is [an example] [id] reference-[style] link. \n[id]: http://example1.com/  \"Optional Title1 Here\"\n[style]: http://example2.com/  \"Optional Title2 Here\"\n\n        This is [an example] [id] reference-[style] link. \n        [id]: http://example1.com/  \"Optional Title1 Here\" \n        [style]: http://example2.com/  \"Optional Title2 Here\" \n​\n\n---\n\n![Image AltText](img/zerowiki.jpg \"Optional title\")  \n\n        ![Image AltText](img/zerowiki.jpg \"Optional title\")\n​\n\n---\n\nThis Is A Heading\n===  \n        This Is A Heading\n        ===\n\nThis Is A Sub-heading\n----  \n       This Is A Sub-heading\n       ----\n \n# This Is H1  \n        # This Is H1  \n ## This Is H2  \n        ## This Is H2  \n### This Is H3  \n        ### This Is H3  \n#### This Is H4  \n        #### This Is H4  \n​\n\n---\n\nText attributes:  \n\n| Markdown           | Normal          |  \n| ------------- |:-------------:|  \n|.................... |......................|  \n| _italic_  | \\_Italic_  |  \n|.................... |......................| \n| **bold**  | \\*\\*Bold**  |  \n|.................... |......................|  \n| `monospace` | \\`Monospace` |  \n|.................... |......................|  \n​\n\n---\n\n### How to make a list:  \nnotice the two spaces before *pears* and *oranges*. They will make it a sub-list.  \n\n```\nNumbered list:  \n\n  1. apples\n  2. oranges\n    * pears  \n  3. banana\n```\n```\n Bullet list:\n\n  * apples \n    1. oranges\n  * pears\n  * banana\n```\n\nNumbered list:  \n1. apples\n2. oranges\n  * pears  \n3. banana\n\nBullet list:  \n  * apples     \n    1. oranges\n  * banana                   \n  * pears                       \n​\n---\n### To make a code snippet:  \n\n| Markdown           | Normal          |  \n| ---------------------------- |:----------------------------:|  \n|.................................................. |....................................................|  \n| ``` The code you want to see ```  |     \\`\\`\\` The code you want to see \\`\\`\\`   \n​\n\n---\n### Making a table:  \n```\n| Markdown           | Normal             |  \n| ------------------ |:------------------:|  \n|................... |....................|  \n|* markymark *       | ​nonormal           |  \n```  \n| Markdown           | Normal                    |  \n| ----------------------- |:-----------------------:|  \n|....................... |.........................|  \n| ** markymark **         | ​nonormal               |  \n​\n\n---\n### Escaping a markdown character:  \nAs an escape char you can use \"\\\" before the char you want to escape. This will make it read as a normal character and not hold any special meaning. Good if you want to write a \\* for instance.\n\n| Markdown           | Normal          \n| ------------- |:-------------:|  \n|.............................. |................................|  \n| \\*literal asterisks\\*  | ​\\\\\\* literal asterisks​\\​*  |  \n​\n\n---\nFurther reading can be done at [GitHub's Markdown-Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n​\n\n[1]: /1LX2wiouHctuUXtu5WkVM9TJJ3YoL6gAfm/?Page:wiki-formatting \"Page copied from original ZeroWiki\"",
			"date_added": 1543237011456,
			"slug": "markdown-from-zero-to-hero"
		},
		{
			"id": "704f7600-f17a-11e8-b3a1-17e2750c12b7",
			"body": "# Backend spam prevention\nWhat stops spammers from invading all of ZeroNet?\nThis page will list the precautions taken from ZeroNet developers and implemented in core.\n\n## Throttling\nThe update rate is limited per site: each user may send an update every 26 seconds.\n\n## Blocklist\nEach user may blocklist some sites or other users and not see nor download their posted content.\nThis allows very basic form of spam prevention.\n\nIts downsides are:\n- It is a process that must be done manually or must trust some other user that keeps its blocklist.\n- The blocklist stops all of the users post or comments, in the whole ZeroNet.\n  It may be that a user only spams on a certain forum or only on certain posts.",
			"date_added": 1543236880737,
			"slug": "backend-spam-prevention"
		},
		{
			"id": "16e0b750-f17a-11e8-b3a1-17e2750c12b7",
			"body": "# Backend spam prevention\nWhat stops spammers from invading all of ZeroNet?\nThis page will list the precautions taken from ZeroNet developers and implemented in core.\n\n## Throttling\nThe update rate is limited per site: each user may send an update every 26 seconds.\n",
			"date_added": 1543236730694,
			"slug": "backend-spam-prevention"
		},
		{
			"id": "d687a1f0-f179-11e8-b2ad-e1f4ea9c5403",
			"body": "# Currently available plugins\nThis page should list the available ZeroNet plugins (that can be found in the `plugin` folder of ZeroNet) along with some description to better document them.\nMore details are given in the single plugin page.\n\n## BigFiles\nThis plugin allows upload of big files to zeronet.\nThe files are chunked and uploaded in pieces.\n",
			"date_added": 1543236622735,
			"slug": "currently-available-plugins"
		},
		{
			"id": "5a70f850-f179-11e8-b75b-21363d655fa7",
			"body": "# How to clone a site?\n\n## Not all sites are clonable\nThe sites should have set explicitly in their `content.json` the attribute `clonable: True`.\nFor a list of sites to clone please see the [[available sitetypes]].\n\n## Procedure to clone a site\nVisit [ZeroHello](/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D) and, using the left side bar, search the name of the site you want to clone (e.g. \"ZeroBlog\"). You may use the search bar to filter them based on their title.\n\nAfter you have found it, go with your mouse over it and click on the three dots that appear to the right and from the menu select \"Clone\". This options appears only if the site is clonable.\n\nAfter you have cloned it, you will be redirected to your newly cloned site and can start to edit it.\n\nYou can see which sites you own at the top of the sidebar on the left of ZeroHello.\n\n## Remember to update your site\nAfter you have cloned it you are not done: you must periodically update your new site.\nIn this case, if some vulnerability in the code is found, your copy will clone the source code from the original copy and have the vulnerability fixed.\n\nIt is advised to take a backup of your site before updating: if you have only modified data about the site you should not need this passage, but if you also modified some source code (html / css / js filed) this step is mandatory, since when you update, all the sources are overwritten.\n\n---\n\nYou may be interested in\n- [[ZN Backup]] in order not to loose the property of your site.\n- [[Site publishing mechanism]] to know more about how you can own a site yet others can seed it.\n- [[Site update details]] to know what happens when you update your cloned site",
			"date_added": 1543236414550,
			"slug": "clone-a-site"
		},
		{
			"id": "b0ee31d0-f178-11e8-bee7-dd49733fd84c",
			"body": "# Available sitetypes that can be cloned instantly\nDo you want to start now with you personal site in ZeroNet?\nSee what is currently available, make you choice, and then start writing.\n\nYou may be interested in how to [[clone a site]].\n\n## Blog\n- [ZeroBlog](/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8): Standard ZeroNet Blog with basic functionalities.\n\n## Wiki\n- [ZeroWiki](/138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP): Wiki software for ZeroNet with basic functionalities.",
			"date_added": 1543236130158,
			"slug": "available-sitetypes"
		},
		{
			"id": "52021d80-f178-11e8-812b-87b46b6b07b0",
			"body": "# How to clone a site?\n\n## Not all sites are clonable\nThe sites should have set explicitly in their `content.json` the attribute `clonable: True`.\nFor a list of sites to clone please see the [[available sitetypes]].\n\n## Procedure to clone a site\nVisit [ZeroHello](/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D) and, using the left side bar, search the name of the site you want to clone (e.g. \"ZeroBlog\"). You may use the search bar to filter them based on their title.\n\nAfter you have found it, go with your mouse over it and click on the three dots that appear to the right and from the menu select \"Clone\". This options appears only if the site is clonable.\n\nAfter you have cloned it, you will be redirected to your newly cloned site and can start to edit it.\n\nYou can see which sites you own at the top of the sidebar on the left of ZeroHello.\n\n---\n\nYou may be interested in\n- [[ZN Backup]] in order not to loose the property of your site.\n- [[Site publishing mechanism]] to know more about how you can own a site yet others can seed it.\n",
			"date_added": 1543235970904,
			"slug": "clone-a-site"
		},
		{
			"id": "01f2e290-f176-11e8-b269-dff4d6b95fa2",
			"body": "# How to get a ZeroID Account\nA ZeroID account is needed to publish in almost every zeronet site.\nYet its design is a centralized one: there is a server which is needed in order to ensure that ID's are unique.\n\n## Simpler way\nGetting one is very simple, but to get it your computer needs to make a clearnet request to the ZeroID server.\n[DOUBT] I don't know if this is risky in case you are navigating using TOR, since it could destroy your anonimity.\n\n1. Visit [ZeroID site](/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz) and wait for it to load the user database.\n2. In the field enter your desired user name (this cannot be changed) and ensure it is available.\n3. If it is available, by clicking on \"Get a username\" your computer will make a request to a public server and you will be notified soon if you have got you ZeroID account or not.\n\n## Using BitMessage\nIt is possible to use BitMessage to get a user ID. Follow the guide in ZeroID site.\n[TOWRITE]",
			"date_added": 1543234977593,
			"slug": "get-a-zeroid-account"
		},
		{
			"id": "f25451c0-f175-11e8-ba79-9d567d4a7c2c",
			"body": "# How to get a ZeroID Account\nA ZeroID account is needed to publish in almost every zeronet site.\nYet its design is a centralized one: there is a server which is needed in order to ensure that ID's are unique.\n\n## Simpler way\nGetting one is very simple, but to get it your computer needs to make a clearnet request to the ZeroID server.\n[DOUBT] I don't know if this is risky in case you are navigating using TOR, since it could destroy your anonimity.\n\n1. Visit [/1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz](ZeroID site) and wait for it to load the user database.\n2. In the field enter your desired user name (this cannot be changed) and ensure it is available.\n3. If it is available, by clicking on \"Get a username\" your computer will make a request to a public server and you will be notified soon if you have got you ZeroID account or not.\n\n## Using BitMessage\nIt is possible to use BitMessage to get a user ID. Follow the guide in ZeroID site.\n[TOWRITE]",
			"date_added": 1543234951393,
			"slug": "get-a-zeroid-account"
		}
	]
}