{
	"title": "YSC's blog",
	"description": "ZeroNet开发相关...",
	"links": "- [本博客源代码](https://github.com/ysc3839/ZeroBlog)",
	"next_post_id": 10,
	"demo": false,
	"modified": 1485323575,
	"post": [
		{
			"post_id": 9,
			"title": "在路由器上配置DDNS ZNC HTTPS",
			"date_published": 1485321585.396,
			"body": "###DDNS\n我注册了免费的.cf域名，然后用CloudXNS管理。通过CloudXNS的API可以路由器上自动更新IP地址。\n注册方面不细说，只说路由器的配置。我用的是修改版的Padavan固件，里面自带有CloudXNS功能。但是我觉得自带的这个脚本并不好，它是在后台运行脚本，然后一定时间通过互联网的服务检查IP地址。其实不用这么麻烦，路由器联网或断网都会执行一个脚本，在这个脚本里面更新是最好的。\n修改过的代码：https://gist.github.com/ysc3839/5ebf6483b10489964cd0ea2477544ecd\n\n###ZNC\nZNC是一个用C++写成的IRC Bouncer。IRC的服务器是只起转发作用的，不会存储历史消息，所以你下线的时候没法看到消息。而IRC Bouncer就可以保存下你的消息。\n安装：用opkg安装很简单，直接执行`opkg install znc`。一般会同时装上WebAdmin模块`opkg install znc-mod-webadmin`，这样可以用网页进行一些设置。\n我这里装好后执行znc会提示`Floating point exception`，设置一下lib目录可以解决问题`export LD_LIBRARY_PATH=/opt/lib`。需要注意的是，设置之后执行路由器本身的程序可能会出现问题，这时需要`unset LD_LIBRARY_PATH`。\n配置就不细说了，网上有教程。安装znc的时候会设置自动启动，在/opt/etc/init.d/S99znc，你需要按照前面说的改一下才能正常启动。另外znc不允许root用户运行，可以使用znc自带的droproot插件，但是在Web界面设置的话是无法启用droproot的，所以我把开启droproot的代码一并写到了S99znc里面。https://gist.github.com/ysc3839/75eb3857f6005cb070ce56c1577eecc2\n\n###HTTPS\n虽然路由器是在国内的，但是不加密也有一定风险。我使用Let's Encrypt的证书。我使用的是[acme.sh](https://github.com/Neilpang/acme.sh)申请。用的是DNS方式，不需要网页服务器验证，同时这个脚本可以通过CloudXNS的API自动设置验证的参数([链接](https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md#3-use-cloudxnscom-domain-api-to-automatically-issue-cert))。\n拿到证书后，还要合并成一个.pem文件才能用在znc上，依次执行(把yourdomain.com换成你的域名)\n```\ncat yourdomain.com.key > pem.pem\ncat yourdomain.com.cer >> pem.pem\ncat ca.cer >> pem.pem\ncat fullchain.cer >> pem.pem\n```\n然后用pem.pem替换znc.pem即可。\n另外，znc设置SSL之后通过http方式访问会被RESET，必须通过https访问，也许是个bug。",
			"date_modified": 1485323575.455
		},
		{
			"post_id": 8,
			"title": "[翻译]ZeroChat 教程 (新)",
			"date_published": 1482571238.878,
			"body": "原文链接: [ZeroChat tutorial (new)](/Blog.ZeroNetwork.bit/?Post:99)\n\nIn this tutorial we going to build a P2P, decentralized, server and backend-less chat site in less then 100 lines of code.\n*(This is a simplified and pure-javascript rework of the original tutorial.)*\n\n<a href=\"http://127.0.0.1:43110/1Ao2w61hpihHgCb44Tjbv7dCE3ifbaiscK\"><img src=\"data/img/zerochat.png\"></a>\n\n---\n\n### Creating new site\n\n - Click on ⋮ > “**Create new, empty site**” menu item on the site ZeroHello.\n - You will be **redirected** to a completely new site that is only modifiable by you!\n - **Drag the top-right “0” button** to left to show the sidebar\n - At the bottom change the **Site title** to “My ZeroChat tutorial”, then press “**Save site settings**”.\n\n### The chat site’s HTML code\n - **Open** “data/[yoursiteaddress]/index.html” file in you favorite editor.\n - **Change** the `<body>` tag’s content to:\n\n```html\n<body>\n\n<a href=\"#Select+user\" id=\"select_user\" onclick='return page.selectUser()'>Select user</a>:\n<input type=\"text\" id=\"message\">\n<input type=\"button\" id=\"send\" value=\"Send!\" onclick=\"return page.sendMessage()\"/>\n<ul id=\"messages\">\n <li>Welcome to ZeroChat!</li>\n</ul>\n<script type=\"text/javascript\" src=\"js/ZeroFrame.js\"></script>\n\n</body>\n```\nThe **js/ZeroFrame.js** file (automatically bundled if you create your site using ZeroHello) contains the ZeroFrame class that allows us to communicate with the websocket based [ZeroFrame API](https://zeronet.readthedocs.io/en/latest/site_development/zeroframe_api_reference/).\n\n### First ZeroFrame API call\n - Initialize our application in a `<script>` block, after the ZeroFrame.js include:\n\n```html\n<script type=\"text/javascript\" src=\"js/ZeroFrame.js\"></script>\n\n<script>\nclass ZeroChat extends ZeroFrame {\n    addMessage (username, message) {\n        var message_escaped = message.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")  // Escape html tags in the message\n        this.messages.innerHTML += \"<li><b>\" + username + \"</b>: \" + message_escaped + \"</li>\"\n    }\n\n    onOpenWebsocket () {\n        this.messages = document.getElementById(\"messages\")\n        this.addMessage(\"System\", \"Ready to call ZeroFrame API!\")\n    }\n}\n\npage = new ZeroChat()\n</script>\n```\n\n - If we **reload** the page we should see a “Ready to call ZeroFrame API!” message.\n - To make the “Select User” button display the user select dialog **add** the following function to the ZeroChat class:\n\n```javascript\n    selectUser () {\n        this.cmd(\"certSelect\", {accepted_domains: [\"zeroid.bit\"]})\n        return false\n    }\n```\n\n\n### Display user’s current ZeroID account\nWhen something changed that is affects the site (new content arrived, user changed, etc.) a websocket event will be **pushed** to your browser.\n(the format is same as you query [siteInfo](https://medium.com/r/?url=http%3A%2F%2Fzeronet.readthedocs.org%2Fen%2Flatest%2Fsite_development%2Fzeroframe_api_reference%2F%23siteinfo) command)\n - To **handle** this event add this to our class:\n\n```javascript\n    onRequest (cmd, message) {\n        if (cmd == \"setSiteInfo\") {\n            if (message.params.cert_user_id)\n                document.getElementById(\"select_user\").innerHTML = message.params.cert_user_id\n            else\n                document.getElementById(\"select_user\").innerHTML = \"Select user\"\n            this.site_info = message.params  // Save site info data to allow access it later\n        }\n    }\n```\n\nThis code will real-time update the currently selected user name.\n\n - To also display the currently selected username when the page loads **add** this to “**onOpenWebsocket**” function:\n\n```javascript\n        this.cmd(\"siteInfo\", {}, (site_info) => {\n            if (site_info.cert_user_id)\n                document.getElementById(\"select_user\").innerText = site_info.cert_user_id\n            this.site_info = site_info\n        })\n```\n\n\nNow our application should always display the currently selected user correctly. _(Even if its modified from other browser window)_\n\n\n### Setting user content permissions\nTo allow other users to post on our site we have to define the rules of the third-party content.\n\nCreate a **data/users/content.json** file in your site’s directory:\n\n```json\n{\n  \"files\": {},\n  \"ignore\": \".*\",\n  \"modified\": 0.0,\n  \"signs\": {},\n  \"user_contents\": {\n    \"cert_signers\": {\n      \"zeroid.bit\": [ \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\" ]\n    },\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 10000\n      },\n      \"bitmsg/.*@zeroid.bit\": { \"max_size\": 15000 }\n    },\n    \"permissions\": {\n      \"bad@zeroid.bit\": false,\n      \"nofish@zeroid.bit\": { \"max_size\": 100000 }\n    }\n  }\n}\n```\n\n - `\"ignore\": \".*\"`: The files in this directory will be signed by the users and not by the site’s owner.\n - `cert_signers`: We accept *@zeroid.bit users and they have to come with a cert that is has to signed by 1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz address.\n - `permission_rules`: We give 10kbytes of space to every user (15kb if registered using bitmessage)\n - `permissions`: Per-user permissions: ban “bad@zeroid.bit” user and allow 100k storage to “nofish@zeroid.bit” user. ( it's me :) )\n\nAfter we saved this file we also have to modify our site’s **root content.json** to ignore everything in this directory on signing and load the file containing the rules:\n\n```json\n  ...\n    \"ignore\": \"data/.*\",\n    \"includes\": {\n        \"data/users/content.json\": {\n            \"signers\": [],\n            \"signers_required\": 1\n        }\n    },\n  ...\n```\n\n> **Note**: You can give moderation permissions to other users by adding addresses to “signers” list.\n\n - **Sign** the **root content.json** modifications by pressing the “Sign” button on the sidebar.\n - Then keep the sidebar open and change “content.json” to “**data/users/content.json**” and press the “**Sign**” button again!\n\n\n### Adding messages to our json file\nWhen hitting the **Send** button we going to add the message to our user’s **data.json** file, sign it, then publish it to other users.\n - Create a new function in ZeroChat class:\n\n```javascript\n    sendMessage () {\n        if (!this.site_info.cert_user_id) {  // No account selected, display error\n            this.cmd(\"wrapperNotification\", [\"info\", \"Please, select your account.\"])\n            return false\n        }\n\n        // This is our data file path\n        var inner_path = \"data/users/\" + this.site_info.auth_address + \"/data.json\"\n\n        // Load our current messages\n        this.cmd(\"fileGet\", {\"inner_path\": inner_path, \"required\": false}, (data) => {\n            if (data)  // Parse current data file\n                data = JSON.parse(data)\n            else  // Not exists yet, use default data\n                data = { \"message\": [] }\n\n            // Add the new message to data\n            data.message.push({\n                \"body\": document.getElementById(\"message\").value,\n                \"date_added\": Date.now()\n            })\n\n            // Encode data array to utf8 json text\n            var json_raw = unescape(encodeURIComponent(JSON.stringify(data, undefined, '\\t')))\n\n            // Write file to disk\n            this.cmd(\"fileWrite\", [inner_path, btoa(json_raw)], (res) => {\n                if (res == \"ok\") {\n                    // Reset the message input\n                    document.getElementById(\"message\").value = \"\"\n                    // Publish the file to other users\n                    this.cmd(\"sitePublish\", {\"inner_path\": inner_path})\n                } else {\n                    this.cmd(\"wrapperNotification\", [\"error\", \"File write error: #{res}\"])\n                }\n            })\n        })\n\n        return false\n    }\n```\n\n - After this modification **type something** to the message input and press the **Send** button! You should see the message in the data/users/[your auth address]/data.json file. \n \n *(Don’t worry if you see “Publish failed” message: it is normal, since we don’t have any other users on our site yet)*\n\n### Creating database\nNow we can save and publish our messages to other users, let’s display it in our application! The best way to do this is map all data.json files to an SQL database.\n\nThe ZeroNet automatically do this for you, all you need is a **dbschema.json** file in your site’s directory that describe your table structure:\n\n```json\n{\n    \"db_name\": \"ZeroChat\",\n    \"db_file\": \"data/zerochat.db\",\n    \"version\": 2,\n    \"maps\": {\n        \"users/.+/data.json\": {\n            \"to_table\": [ \"message\" ]\n        },\n        \"users/.+/content.json\": {\n            \"to_json_table\": [ \"cert_user_id\" ],\n            \"file_name\": \"data.json\"\n        }\n    },\n    \"tables\": {\n        \"json\": {\n            \"cols\": [\n                [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n                [\"directory\", \"TEXT\"],\n                [\"file_name\", \"TEXT\"],\n                [\"cert_user_id\", \"TEXT\"]\n            ],\n            \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, file_name)\"],\n            \"schema_changed\": 10\n        },\n        \"message\": {\n            \"cols\": [\n                [\"body\", \"TEXT\"],\n                [\"date_added\", \"INTEGER\"],\n                [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n            ],\n            \"indexes\": [\"CREATE UNIQUE INDEX message_key ON message(json_id, date_added)\"],\n            \"schema_changed\": 10\n        }\n    }\n}\n```\n\n- `\"db_name\": \"ZeroChat\"`: Used only for debugging\n- `\"db_file\": \"data/zerochat.db\"`: The SQLite database file will be stored here\n- `\"version\": 2`: Define the json table structure, version 2 is better suited to ZeroID based sites. More info in the [reference docs](https://medium.com/r/?url=http%3A%2F%2Fzeronet.readthedocs.org%2Fen%2Flatest%2Fsite_development%2Fdbschema_json%2F).\n- `\"maps\": {`: Describes the json files -> table conversion\n- `\"users/.+/data.json\": { \"to_table\": [ \"message\" ] }`: Put the data from every **user's data.json** file **message node** to **message table**.\n- `\"users/.+/content.json\": { \"to_json_table\": [ \"cert_user_id\" ], \"file_name\": \"data.json\"}`: For easy SQL Join store the **username** in the data.json file's **json table** entry.\n- `\"tables\": {`: Describe the tables and indexing structure. A json table entry will be created automatically for every **json** file.\n- `[\"json_id\", \"INTEGER REFERENCES json (json_id)\"]`: Every table should contain a **json_id** column, it defines the source file path.\n- `\"schema_changed\": 10`: **Increment** this when you change the table structure, so the peers can **drop the table and re-create** it from the json files.\n\n> **Tip**: For the best performance always create an index for json_id column in your tables, because when new file arrives the data will be updated based on this column.\n\n - Press the **Reload**, then the **Rebuild** button on the sidebar to generate the database.\n\nIf you did everything well, then the **data/zerochat.db** SQLite file will be created. To browse these files I recommend using [SQLiteStudio](https://medium.com/r/?url=http%3A%2F%2Fsqlitestudio.pl%2F) (it’s free and opensource)\n\n\n### Displaying messages\n\nThe messages are loaded to the SQL database, so we can easily query them using the **dbQuery command**:\n\n```javascript\n    loadMessages () {\n        this.cmd(\"dbQuery\", [\"SELECT * FROM message LEFT JOIN json USING (json_id) ORDER BY date_added DESC\"], (messages) => {\n            document.getElementById(\"messages\").innerHTML = \"\"  // Always start with empty messages\n            for (var i=0; i < messages.length; i++) {\n                this.addMessage(messages[i].cert_user_id, messages[i].body)\n            }\n        })\n    }\n```\n\nAdd `this.loadMessages()` to **onOpenWebsocket** function, then reload the page and you should see the messages you typed in.\n\nTo make it “real time” and display new messages immediately as they come in you also have to add the `this.loadMessages()` to the **onRequest** function:\n\n```javascript\n    onRequest (cmd, message) {\n        if (cmd == \"setSiteInfo\") {\n            if (message.params.cert_user_id)\n                document.getElementById(\"select_user\").innerHTML = message.params.cert_user_id\n            else\n                document.getElementById(\"select_user\").innerHTML = \"Select user\"\n            this.site_info = message.params  // Save site info data to allow access it later\n            \n            // Reload messages if new file arrives\n            if (message.params.event[0] == \"file_done\")\n                this.loadMessages()\n        }\n    }\n```\n\nAlso reload the data when we **submit** a new message:\n\n```javascript\n    sendMessage () {\n        ...\n            // Write file to disk\n            this.cmd(\"fileWrite\", [inner_path, btoa(json_raw)], (res) => {\n                this.loadMessages()\n                ...\n        ...\n```\n\n**That’s it!** Now the messages are updated in real-time! You can try it by opening an another browser window and enter a messages there.\n\n### Final touches\n\n- Send messages by pressing enter\n\n```html\n<input type=\"text\" id=\"message\" onkeypress=\"if (event.keyCode == 13) page.sendMessage()\">\n```\n- And add some CSS style to make it look better\n\n```html\n<style>\n* { font-family: monospace; line-height: 1.5em; font-size: 13px; vertical-align: middle; }\nbody { background-color: white; }\ninput#message { padding: 5px; width: 50%;  }\ninput#send { height: 34px; margin-left: -2px; }\nul { padding: 0px; }\nli { list-style-type: none; border-top: 1px solid #eee; padding: 5px 0px; }\nli:nth-child(odd) { background-color: #F9FAFD; }\nli b { color: #3F51B5; }\n</style>\n```\n\n### Congratulations! You have completed the ZeroChat tutorial! :)\n\nSome idea for improvements:\n - Display message time\n - Move source code to separate .js file\n - Limit displayed messages / add paging\n - Markdown formatting\n - Username mention\n\n> **Tip:** The .js files are cached. To avoid it you need to keep open the Dev Console (F12) with \"Disable cache\" checked.\n\n> **Tip:** Don't forget to re-sign and publish your site if you do any modification on the source code.\n\n> **Tip:** Your site's private key is in data/users.json file (search for your site's address, then there will be a privatekey entry), so it's a good idea to backup it!\n\n> **Tip:** ZeroNet has a built-in .js and .css merging feature for developers. To enable it add `debug` to `zeronet.conf` file's `[global]` section, then it will response every file's content in the directory if you request all.js or all.css",
			"date_modified": 1482571591.97
		},
		{
			"post_id": 7,
			"title": "本博客开源代码",
			"date_published": 1475764152.253,
			"body": "本博客原始代码基于 https://github.com/zeronetscript/ZeroBlog (也就是大家说的[Enhanced ZeroBlog](/19k2nhubaYsDJNPHL6iNs3D2K9Mgj66P4R)) 进行修改\n源代码开放于 https://github.com/ysc3839/ZeroBlog 欢迎贡献代码！\n\n大概是翻译成了中文，修改了一下字体啥的……具体请看[commits](https://github.com/ysc3839/ZeroBlog/commits/master)\n与诸多修改版不同的是，我是直接修改CoffeeScript的，而不是修改js代码\n\n测试站点：(应该可以直接克隆)[http://127.0.0.1:43110/19qHLGN2KEoU6CJipGbSK1hxDvUNKBWHGc/](/19qHLGN2KEoU6CJipGbSK1hxDvUNKBWHGc/)",
			"date_modified": 1475766864.796
		},
		{
			"post_id": 6,
			"title": "[翻译]ZeroNet 站点开发教程 #2",
			"date_published": 1475250312.928,
			"body": "原文链接: [ZeroNet site development tutorial #2](/Blog.ZeroNetwork.bit/?Post:43:ZeroNet+site+development+tutorial+1)\n\n在 [第一部分](./?Post:4:[%E7%BF%BB%E8%AF%91]ZeroNet+%E7%AB%99%E7%82%B9%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B+1) 我们使用了一些简单的 ZeroFrame API 调用创建了一个 ZeroNet 站点。\n\nWe going to extend it to accept, store and query messages using a SQLite database and use ZeroID to identify user names.\n\nThe final page and source code is available at http://127.0.0.1:43110/1AvF5TpcaamRNtqvN1cnDEWzNmUtD47Npg\n\n---\n\n\n## 添加 ZeroID 用户选择\n\nAdd a new link to **index.html** that will allow us to select the ZeroID identity we want to use:\n\n```html\n<html>\n<body>\n<a href=\"#Select+user\" id=\"select_user\" onclick='return Page.selectUser()'>Select user</a>:\n<input type=\"text\" id=\"message\"><input type=\"button\" id=\"send\" value=\"Send!\"/>\n<ul id=\"messages\">\n <li>Welcome to ZeroChat!</li>\n</ul>\n<script type=\"text/javascript\" src=\"js/all.js\" async></script>\n</body>\n</html>\n```\n\nTo make it work add a function to **js/ZeroChat.coffee** that displays the certificate selection dialog to user:\n\n```coffeescript\n    selectUser: =>\n        Page.cmd \"certSelect\", [[\"zeroid.bit\"]]\n        return false\n```\n\nAs parameter you should include the accepted certificate provider names. (zeroid.bit here)\n\nIf you hit a refresh and click on \"Select user\", then you should see the dialog, but nothing changes when you select your zeroid certificate.\n\n\n## 显示用户当前的 ZeroID 账户\n\nWhen something is changed that affects the site (new content arrived, user changed, etc.) a websocket event will be pushed to your browser.\n_(the format is same as you query [setSiteInfo](http://zeronet.readthedocs.org/en/latest/site_development/zeroframe_api_reference/#siteinfo) command)_\n\nTo handle this event add this function:\n\n```coffeescript\n    route: (cmd, message) ->\n        if cmd == \"setSiteInfo\"\n            if message.params.cert_user_id\n                document.getElementById(\"select_user\").innerHTML = message.params.cert_user_id\n            else\n                document.getElementById(\"select_user\").innerHTML = \"Select user\"\n            @site_info = message.params  # Save site info data to allow access it later\n```\n\nThis code will real-time update the user's currently selected user name.\n\nTo also update the user name on page load modify the **onOpenWebsocket** function:\n\n```coffeescript\n    onOpenWebsocket: (e) =>\n        @cmd \"serverInfo\", {}, (server_info) =>\n            @addLine \"serverInfo response: <pre>\" + JSON.stringify(server_info,null,2) + \"</pre>\"\n        @cmd \"siteInfo\", {}, (site_info) =>\n            @addLine \"siteInfo response: <pre>\" + JSON.stringify(site_info,null,2) + \"</pre>\"\n            # Update currently selected username\n            if site_info.cert_user_id\n                document.getElementById(\"select_user\").innerHTML = site_info.cert_user_id\n            @site_info = site_info  # Save site info data to allow access it later\n```\n\n\n## 设置用户内容权限 (content permissions)\n\nTo allow users to post on our site we have to define the rules of the third-party content.\n\nCreate a **data/users** directory and create a **data/users/content.json** file in it:\n\n```json\n{\n  \"files\": {},\n  \"ignore\": \".*\",\n  \"modified\": 0.0,\n  \"signs\": {},\n  \"user_contents\": {\n    \"cert_signers\": {\n      \"zeroid.bit\": [ \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\" ]\n    },\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"max_size\": 10000\n      },\n      \"bitmsg/.*@zeroid.bit\": { \"max_size\": 15000 }\n    },\n    \"permissions\": {\n      \"bad@zeroid.bit\": false,\n      \"nofish@zeroid.bit\": { \"max_size\": 100000 }\n    }\n  }\n}\n```\n\n- `\"ignore\": \".*\", `: When the site owner signing this content.json don't add any file to it, they will be signed by the users.\n- `cert_signers`: We accept *@zeroid.bit users and they have to come with a cert that is has to signed by `1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz` address.\n- `permission_rules`: We give 10kbytes of space to every user (15kb if registered using bitmessage)\n- `permissions`: Per-user permissions: ban bad@zeroid.bit user and allow 100k storage to nofish@zeroid.bit user. ( it's me :) )\n\nAfter we saved this file we have to modify our **root content.json** to also ignore files in this directory and load the file containing the rules:\n\n```json\n  ...\n  \"ignore\": \"data/.*\",\n  \"includes\": {\n    \"data/users/content.json\": {\n      \"signers\": [],\n      \"signers_required\": 1\n    }\n  },\n  ...\n```\n\n> **Note:** You can give moderation permissions to other users by adding addresses to \"signers\" list.\n\nNow we have to sign the **data/users/content.json** file using the following command:\n`zeronet.py siteSign [siteaddress] --inner_path data/users/content.json`\n\n\n## 添加消息到我们的 json 文件\n\nWhen hitting the **Send** button we going to add the message to our **data.json** file, sign it, then publish it to other users.\n\n- First add the `onclick=\"return Page.sendMessage()\"` event listener to Send input button html tag.\n\n- Then create a new function in **ZeroChat.coffee**:\n\n```coffeescript\n    sendMessage: =>\n        if not Page.site_info.cert_user_id  # No account selected, display error\n            Page.cmd \"wrapperNotification\", [\"info\", \"Please, select your account.\"]\n            return false\n\n        inner_path = \"data/users/#{@site_info.auth_address}/data.json\"  # This is our data file\n\n        # Load our current messages\n        @cmd \"fileGet\", {\"inner_path\": inner_path, \"required\": false}, (data) =>\n            if data  # Parse if already exits\n                data = JSON.parse(data)\n            else  # Not exits yet, use default data\n                data = { \"message\": [] }\n\n            # Add the message to data\n            data.message.push({\n                \"body\": document.getElementById(\"message\").value,\n                \"date_added\": (+new Date)\n            })\n\n            # Encode data array to utf8 json text\n            json_raw = unescape(encodeURIComponent(JSON.stringify(data, undefined, '\\t')))\n\n            # Write file to disk\n            @cmd \"fileWrite\", [inner_path, btoa(json_raw)], (res) =>\n                if res == \"ok\"\n                    # Publish the file to other users\n                    @cmd \"sitePublish\", {\"inner_path\": inner_path}, (res) =>\n                        document.getElementById(\"message\").value = \"\"  # Reset the message input\n                else\n                    @cmd \"wrapperNotification\", [\"error\", \"File write error: #{res}\"]\n\n        return false\n```\n\n- After this is done type something to the message input and press the **Send!** button! You should see the message in the **data/users/[your auth address]/data.json** file.\n\n\n## 创建数据库\n\nNow we can save and publish our messages to other users, let's display it in our application! The best way to do this is map all **data.json** files to an SQL database.\n\nThe ZeroNet automatically do this for you, all you need is a **dbschema.json** file in your site's directory that describe your table structure:\n\n```json\n{\n    \"db_name\": \"ZeroChat\",\n    \"db_file\": \"data/zerochat.db\",\n    \"version\": 2,\n    \"maps\": {\n        \"users/.+/data.json\": {\n            \"to_table\": [ \"message\" ]\n        },\n        \"users/.+/content.json\": {\n            \"to_keyvalue\": [ \"cert_user_id\" ]\n        }\n    },\n    \"tables\": {\n        \"message\": {\n            \"cols\": [\n                [\"body\", \"TEXT\"],\n                [\"date_added\", \"INTEGER\"],\n                [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n            ],\n            \"indexes\": [\"CREATE UNIQUE INDEX message_key ON message(json_id, date_added)\"],\n            \"schema_changed\": 1\n        }\n    }\n}\n```\n- `\"db_name\": \"ZeroChat\"`: Used only for debugging\n- `\"db_file\": \"data/zerochat.db\"`: The SQLite database file will be stored here\n- `\"version\": 2`: Define the json table structure, version 2 is better suited to ZeroID based sites. More info in the [reference docs](http://zeronet.readthedocs.org/en/latest/site_development/dbschema_json/).\n- `\"maps\": {`: Describe the json files -> table conversion\n- `\"users/.+/data.json\": { \"to_table\": [ \"message\" ] }`: Put the data from every user **data.json** file **message node** to **message table**.\n- `\"users/.+/content.json\": { \"to_keyvalue\": [ \"cert_user_id\" ] }`: Store the user's authentication id in simple key/value structure.\n- `\"tables\": {`: Describe the table and indexing structure.\n- `[\"json_id\", \"INTEGER REFERENCES json (json_id)\"]`: Every table should contain a **json_id** column, it defines the source file path.\n- `\"schema_changed\": 1`: Increment this when you change the **table structure**, so the peers can drop the table and **re-create** it from the json files.\n\n> **Tip:** For the best performance always create an **index** for **json_id** column in your tables, because when new file arrives the data will be updated based on this column.\n\nExecute `zeronet.py dbRebuild [your site address]` command to generate database from current files.\n\nThe **data/zerochat.db** SQLite file will be created, to browse these files I recommend using [SQLiteStudio](http://sqlitestudio.pl/) (it's free and opensource)\n\nAt this point you have to **restart** your ZeroNet client to detect and manage your site's newly created database.\n\n\n## 显示消息\n\nAs the messages are now it the SQL database we can query them using the dbQuery command:\n\n```coffeescript\n    loadMessages: ->\n        @cmd \"dbQuery\", [\"SELECT * FROM message ORDER BY date_added\"], (messages) =>\n            document.getElementById(\"messages\").innerHTML = \"\"  # Always start with empty messages\n            for message in messages\n                @addLine message.body\n```\n\nAdd the `@loadMessages()` line to **onOpenWebsocket** function, then reload the page and you should see the messages you typed in.\n\nTo make it \"real time\" and display new messages immediately as they come in you have to add the `@loadMessages()` to the **route** part:\n\n```coffeescript\n    route: (cmd, message) ->\n        if cmd == \"setSiteInfo\"\n            if message.params.cert_user_id\n                document.getElementById(\"select_user\").innerHTML = message.params.cert_user_id\n            else\n                document.getElementById(\"select_user\").innerHTML = \"Select user\"\n            @site_info = message.params  # Save site info data to allow access it later\n\n            # Reload messages if new file arrives\n            if message.params.event[0] == \"file_done\"\n                @loadMessages()\n```\n\nAnd also reload the data when we submit a new message:\n\n```coffeescript\n    sendMessage: =>\n        ...\n            # Write file to disk\n            @cmd \"fileWrite\", [inner_path, btoa(json_raw)], (res) =>\n                @loadMessages()\n                ...\n        ...\n```\n\nThat's it! Now the messages are updated in real-time! You can try it by opening an another browser window and enter a messages there.\n\n\n## 显示 ZeroID 用户名\n\nTo display the sender user name we have to create a more complex SQL query, because the user names are stored in `content.json` file and the messages are in `data.json`.\n\n\\+ we will also escape the incoming messages to disallow html codes.\n\n```coffeescript\n    loadMessages: ->\n        query = \"\"\"\n            SELECT message.*, keyvalue.value AS cert_user_id FROM message\n            LEFT JOIN json AS data_json USING (json_id)\n            LEFT JOIN json AS content_json ON (\n                data_json.directory = content_json.directory AND content_json.file_name = 'content.json'\n            )\n            LEFT JOIN keyvalue ON (keyvalue.key = 'cert_user_id' AND keyvalue.json_id = content_json.json_id)\n            ORDER BY date_added\n        \"\"\"\n        @cmd \"dbQuery\", [query], (messages) =>\n            document.getElementById(\"messages\").innerHTML = \"\"  # Always start with empty messages\n            for message in messages\n                body = message.body.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")  # Escape html tags in body\n                @addLine \"<b>#{message.cert_user_id}</b>: #{body}\"\n```\n\n\n## 最后的更改\n\n- We can remove the site siteInfo and serverInfo debug messages:\n\n```coffeescript\n    onOpenWebsocket: (e) =>\n        @cmd \"siteInfo\", {}, (site_info) =>\n            # Update currently selected username\n            if site_info.cert_user_id\n                document.getElementById(\"select_user\").innerHTML = site_info.cert_user_id\n            @site_info = site_info  # Save site info data to allow access it later\n        @loadMessages()\n```\n\n- Send messages by hitting Enter:\n\n```html\n<input type=\"text\" id=\"message\" onkeypress=\"if (event.keyCode == 13) Page.sendMessage()\">\n```\n\n- And add some CSS style to make it look better\n\n```html\n<style>\n* { font-family: monospace; line-height: 1.5em; font-size: 13px; vertical-align: middle; }\nbody { background-color: white; }\ninput#message { padding: 5px; width: 50%; height: 34px; }\ninput#send { height: 34px; margin-left: -2px; }\nul { padding: 0px; }\nli { list-style-type: none; border-top: 1px solid #eee; padding: 5px 0px; }\nli:nth-child(odd) { background-color: #F9FAFD; }\nli b { color: #3F51B5; }\n</style> \n```\n\n- **After you edited any file never forget to sign and publish the modifications!**\n\n```\nzeronet.py siteSign [your site address] --publish\n```\n\n## 恭喜! Now you have a server-less, pure P2P, SQL backed chat application! :)\n\n<style>\n .post .body { font-size: 16px; line-height: 1.5; font-family: Arial; }\n .post .body pre code { line-height: 1.2em; font-size: 80%; }\n code { font-size: 75% }\n</style>",
			"date_modified": 1476980571.528
		},
		{
			"post_id": 5,
			"title": "本站已注册.bit域名",
			"date_published": 1475249637.493,
			"body": "感谢 @domains4free 为我注册的域名 ysc3839.bit\n\n教程参考: [东先生的ZeroBlog - 在ZeroNet注册一个免费的.bit域名](/mydf.bit/?Post:47)\n[0List Blog - Free .bit Domains](/domains4free.bit/?Post:2:Free+.bit+Domains+for+ZeroNet+Sites)",
			"date_modified": 1475249840.673
		},
		{
			"post_id": 4,
			"title": "[翻译]ZeroNet 站点开发教程 #1",
			"date_published": 1474725881.28,
			"body": "原文链接: [ZeroNet site development tutorial #1](/Blog.ZeroNetwork.bit/?Post:43:ZeroNet+site+development+tutorial+1)\n\n这篇教程示范如何创建一个简单、多用户、p2p 的 ZeroNet 聊天室应用。\n\n在此，第一部分我们将要创建一个新的站点并添加一些简单的 html 和 javascript 与 ZeroNet 交互(that interact to the ZeroNet client) 使用 ZeroFrame API。\n\n\n## 创建一个新网站\n\n - 在你的 ZeroNet 目录下打开一个控制台\n - 执行 `zeronet.py siteCreate` 命令 (或者 `..\\python\\python.exe zeronet.py siteCreate` 如果你使用 ZeroBundle)\n - 一个新的站点将会被创建同时私钥 (private key) 会显示在控制台窗口中。 **保存下来，你只能用此私钥来修改你的站点！**\n - 输入: `yes`\n\n就是这样! 你的站点将会显示在 ZeroHello 界面。 \n\n现在让我们填入内容 (fill it with content)...\n\n---\n\n## 在调试模式中启动 ZeroNet\n这是一个_可选步骤_，但建议这么做，因为此教程(以及所有示例)代码是使用 [CoffeeScript](http://coffeescript.org/) 编写的。\n调试模式会自动 (features automatic) 把 coffeescript 转换到 javascript，所以你不需要手动操作。\n- 关闭 ZeroNet\n- 使用 `zeronet.py --debug` 命令启动 ZeroNet\n\n_(注意: 已经附带了用于 Windows 的 coffeescript 编译器，如果使用其他平台你需要使用 `npm install -g coffee-script` 来安装它)_\n\n\n## 编辑 index.html\n创建一个简单的 html 结构 (structure) 以显示消息:\n\n- 转到 data/[yoursiteaddress]\n- 编辑 **index.html**:\n\n```\n<html>\n<body>\n<input type=\"text\" id=\"message\"><input type=\"button\" id=\"send\" value=\"Send!\"/>\n<ul id=\"messages\">\n <li>Welcome to ZeroChat!</li>\n</ul>\n</body>\n</html>\n```\n\n## 第一个 ZeroFrame API 调用\n\n_Note: 要禁用浏览器的缓存请保持 JavaScript 控制台开启 (F12)_\n\n[ZeroFrame API](http://zeronet.readthedocs.org/en/latest/site_development/zeroframe_api_reference/) 允许你获取 (query) 服务器/站点/用户信息，加载或修改文件通过一个 WebSocket 连接到你的 ZeroNet 客户端。\n\n创建 **js** 以及 **js/lib** 目录然后下载并复制 [ZeroFrame.coffee](data/files/ZeroFrame.coffee) 文件到 **js/lib**，此文件帮助你使用 [ZeroFrame API](http://zeronet.readthedocs.org/en/latest/site_development/zeroframe_api_reference/)\n- 创建 **js/ZeroChat.coffee** 文件并写入一下内容:\n\n```\nclass ZeroChat extends ZeroFrame\n    init: ->\n        @addLine \"inited!\"\n        \n    addLine: (line) ->\n        messages = document.getElementById(\"messages\")\n        messages.innerHTML = \"<li>#{line}</li>\"+messages.innerHTML\n        \n\n    # Wrapper websocket connection ready\n    onOpenWebsocket: (e) =>\n        @cmd \"serverInfo\", {}, (server_info) =>\n            @addLine \"serverInfo response: <pre>\" + JSON.stringify(server_info,null,2) + \"</pre>\"\n        @cmd \"siteInfo\", {}, (site_info) =>\n            @addLine \"siteInfo response: <pre>\" + JSON.stringify(site_info,null,2) + \"</pre>\"\n\nwindow.Page = new ZeroChat()\n```\n此代码将会在 websocket 连接就绪时获取所有有关站点和服务器 (你的 ZeroNet 客户端) 的信息，然后将结果以格式化的 json 文本添加到 messages html 节点 (node)。\n- 添加 `<script type=\"text/javascript\" src=\"js/all.js\" async></script>` 行在 `</body>`之前于 index.html 文件以自动编译并合并所有 **js** 目录中的 .coffee 文件到一个单独的 all.js 文件。\n\n- 如果一切顺利它应该是这样的:\n\n![Tutorial](data/img/tutorial-1.png)\n并且你应该有以下目录结构:\n```\ndata/[your site address]\n├─ js/\n│  ├─ lib/\n│  │  └─ ZeroFrame.coffee\n│  ├─ ZeroChat.coffee\n│  └─ all.js\n├── index.html\n└── content.json\n```\n\n- 每当你完成对你站点的修改你需要**签署**并**发布**新内容使用 `zeronet.py siteSign [yoursiteaddress] --publish` 命令\n\n<style>\n .post .body { font-size: 16px; line-height: 1.5; font-family: Arial; }\n .post .body pre code { line-height: 1.2em; font-size: 80%; }\ncode { font-size: 75% }\n</style>",
			"date_modified": 1475250181.949
		}
	],
	"tag": [
		{
			"value": "ZeroNet",
			"post_id": 4
		},
		{
			"value": "ZeroNet",
			"post_id": 5
		},
		{
			"value": "ZeroNet",
			"post_id": 6
		},
		{
			"value": "ZeroNet",
			"post_id": 7
		},
		{
			"value": "ZeroNet",
			"post_id": 8
		}
	],
	"footer": "Powered by [ZeroNet](https://zeronet.io) [ open, free, and uncensored ]"
}