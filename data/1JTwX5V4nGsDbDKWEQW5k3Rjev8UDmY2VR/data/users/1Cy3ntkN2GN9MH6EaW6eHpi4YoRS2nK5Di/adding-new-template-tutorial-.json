{
    "article": [
        {
            "title": "Adding new template (tutorial)",
            "text": "",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517668803113,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517668889107,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n---\n\nTemplates for Kiwipedia are stored inside `wiki-templates` directory.\n\n",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517672699903,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\nTemplates for Kiwipedia are stored inside `wiki-templates` directory.\n\n",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517672708525,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\nTemplates for Kiwipedia are stored inside `wiki-templates` directory.\n\n",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517672719183,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\n",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517674597661,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}\n\tasync render() {\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517677107312,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with \\{\\{my template\\}\\}\n\tasync render() {\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517678333111,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}\n\tasync render() {\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517681950264,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n{{my template}}\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div>\nThis is before template.\n<b>Hello world!</b>\nThis is after template.\n</div>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517682919809,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</div>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517682937254,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517682948530,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517682959871,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517683333651,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>.",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517683438232,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517686825011,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n=== Example ==\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517687018828,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n--- Example ---\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517687038042,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517687059074,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517687112634,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517687299598,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517729489460,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates.\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517729715197,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments. Notice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517729817878,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517730187499,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517730646745,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517730781026,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;</code>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517730960035,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731002840,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731218059,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731470607,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\n<!-- Before render -->\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\n<!-- After render -->\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n<!-- Parameter _ -->\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731625834,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\nBefore render:\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\nAfter render:\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n_ parameter:\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731697681,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\nBefore render:\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\nAfter render:\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n_ parameter:\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>\n\nHowever, you may want to supress this behaviour. To do this, you can add <code>nowiki: true</code> to template settings:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<raw>\",\n\tasync render(params) {\n\t\treturn `Original: ${params._.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<raw>{{template}}</raw>\n</syntaxhighlight>\n\nResult:\n\n<i>Original: <nowiki>{{template}}</nowiki></i>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731809938,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t}\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\nBefore render:\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\nAfter render:\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n_ parameter:\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>\n\nHowever, you may want to supress this behaviour. To do this, you can add <code>nowiki: true</code> to template settings:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<raw>\",\n\tasync render(params) {\n\t\treturn `Original: ${params._.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<raw>{{template}}</raw>\n</syntaxhighlight>\n\nResult:\n\n<i>Original: <nowiki>{{template}}</nowiki></i>\n\nAnother example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<nowiki>\",\n\tasync render(params) {\n\t\treturn params._;\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517731850952,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t};\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\nBefore render:\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\nAfter render:\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n_ parameter:\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>\n\nHowever, you may want to supress this behaviour. To do this, you can add <code>nowiki: true</code> to template settings:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<raw>\",\n\tasync render(params) {\n\t\treturn `Original: ${params._.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<raw>{{template}}</raw>\n</syntaxhighlight>\n\nResult:\n\n<i>Original: <nowiki>{{template}}</nowiki></i>\n\nAnother example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<nowiki>\",\n\tasync render(params) {\n\t\treturn params._;\n\t}\n};\n</syntaxhighlight>\n\n== After render hook ==\n\nThough <code>render()</code> can be async, it isn't recommended for slow operations because article won't be shown before these operations finish.\n\nInstead, you can save important info in <code>render()</code> and then finish in <code>afterRender()</code>. Example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<slow>\",\n\tasync render(params) {\n\t\treturn \"Time: ..., sum: ...\";\n\t},\n\tasync afterRender(params, renderer) {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t};\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < params.count; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}, sum: ${sum}.`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<slow till=\"100000\" />\n</syntaxhighlight>\n\nWhen this template is rendered, first a node with <code>Time: ..., sum: ...</code> content will appear (the result of <code>render()</code>), and the article will be shown. Then, in background, <code>afterRender()</code> will be ran. The <code>Time: ..., sum: ...</code> will be replaced by its result.",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517732667110,
            "imported": ""
        },
        {
            "title": "Adding new template (tutorial)",
            "text": "{{ambox|type=notice|text='''Internal tutorial'''|text-small=This tutorial is for maintainers.}}\n\nIf you want to contribute to Kiwipedia by creating templates and don't know where to start from, look at [[TODO templates]].\n\n----\n\n== Creating simplest template ==\n\nTemplates for Kiwipedia are stored inside <code>wiki-templates</code> directory.\n\nTo create a new template, you must create a new JS file. Add new file <code>my-template.js</code> with the following content:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function, empty for now.\n\t\treturn \"\";\n\t}\n};\n</syntaxhighlight>\n\nFile name doesn't mean anything, but it is recommended that you name the file according to template name.\n\n== Adding content to template ==\n\nAdd some content to <code>render()</code>:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\", // The name of your template. This one can be invoked with {{my template}}.\n\tasync render() { // Renderer function\n\t\treturn \"<b>Hello world!</b>\";\n\t}\n};\n</syntaxhighlight>\n\nNow try to invoke the template in a [[Sandbox|sandbox]], like this:\n\n<syntaxhighlight lang=\"html\">\nThis is before template.\n\n{{my template}}\n\nThis is after template.\n</syntaxhighlight>\n\nThen the following will appear:\n<div><i>\nThis is before template.\n\n<b>Hello world!</b>\n\nThis is after template.\n</i></div>\n\n== Naming ==\n\nWhen setting name for your template, '''make sure the name starts with lower-case letter'''. For example, for <nowiki>{{</nowiki>NUMBEROFARTICLES<nowiki>}}</nowiki> template, set <code>name: \"nUMBEROFARTICLES\"</code>.\n\nThis is the result of the fact that the first letter case doesn't matter when rendering template, while others do. For example: these templates are all the same: <code>testing</code> <code>Testing</code> and these aren't: <code>testing</code> <code>teSTIng</code> <code>TESTING</code> <code>tESTING</code>.\n\n== Passing parameters ==\n\n{{see also|Template}}\n\n<code>render()</code> method accepts <code>params</code> as the first argument. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"my template\",\n\tasync render(params) { // Get parameters\n\t\tconsole.log(params);\n\t\treturn \"<b>Testing templates</b>\";\n\t}\n};\n</syntaxhighlight>\n\nAn example of passing parameters is <nowiki>{{</nowiki><code>my template|value1|value2|value3</code><nowiki>}}</nowiki>. Then <code>params</code> will look like:\n\n<syntaxhighlight lang=\"javascript\">\n{\n\t1: \"value1\",\n\t2: \"value2\",\n\t3: \"value3\"\n}\n</syntaxhighlight>\n\n'''Notice that the keys start with 1!'''\n\nFor named parameters, the name will be used as the key:\n\n<syntaxhighlight lang=\"javascript\">\n// {{my template|value1|name2=value2|value3|name4=value4}}\n// results in:\n\n{\n\t1: \"value1\",\n\tname2: \"value2\",\n\t3: \"value3\",\n\tname4: \"value4\"\n}\n</syntaxhighlight>\n\n<h3>Example</h3>\n\nFor example, let's create a simple <code>hello</code> template.\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<b>Hello ${name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\nInvoke it as:\n\n<syntaxhighlight lang=\"html\">\n{{hello|nofish}}\n\n{{hello|name=kaffie}}\n</syntaxhighlight>\n\nResult:\n\n<div><i>\n<b>Hello nofish!</b>\n\n<b>Hello kaffie!</b>\n</i></div>\n\n== Recursive rendering ==\n\nThere is a template called <nowiki>{{</nowiki><code>ambox</code><nowiki>}}</nowiki> for drawing boxes. You may want to include boxes to your template to echo some information. The simpliest way would be:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params) {\n\t\tconst name = params[1] || params.name; // Accept both {{hello|nofish}} and {{hello|name=nofish}}\n\t\treturn `<div class=\"ambox ambox-notice\">Hello ${name}!</div>`;\n\t}\n};\n</syntaxhighlight>\n\nWhich will draw the following:\n\n{{ambox|type=notice|text=Hello nofish!}}\n\nHowever, there is a better way:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"ambox\",\n\t\t\t{\n\t\t\t\ttype: \"notice\",\n\t\t\t\ttext: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n<code>renderer()</code> method, passed as the second argument, accepts template name (<code>ambox</code>) and a list of arguments.\n\nThis may take a bit more space, but it can be useful for invoking large templates. Moreover, it becomes easier to change template for drawing:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"hello\",\n\tasync render(params, renderer) {\n\t\tconst name = params[1] || params.name;\n\t\treturn await renderer(\n\t\t\t\"hatnote\",\n\t\t\t{\n\t\t\t\t1: `Hello ${name}!`\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>\n\n{{hatnote|Hello nofish!}}\n\n== Async operations ==\n\nNotice that both <code>render()</code> and <code>renderer()</code> are async, so you need <code>async</code> in definition and <code>await</code> when calling.\n\nThis lets you run some async operations:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"speed\",\n\tasync render() {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t};\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < 1000000; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}`;\n\t}\n};\n</syntaxhighlight>\n\n== Context ==\n\n<code>renderer()</code> accepts context as the third argument. <code>context</code> is an object of <code>slug</code> (e.g. en/kiwipedia-test), <code>article</code> (e.g. adding-new-template-tutorial-), <code>imported</code> (e.g. \"\" (empty string) or <code>https://en.wikipedia.org/wiki/ZeroNet</code>) and <code>title</code> (e.g. <code>Adding new template (tutorial)</code>).\n\nMoreover, you can import libraries from your template. Example:\n\n<syntaxhighlight lang=\"javascript\">\nimport Hub from \"../common/hub.js\";\n\nexport default {\n\tname: \"nUMBEROFARTICLES\",\n\tasync render(params, renderer, context) {\n\t\ttry {\n\t\t\tconst hub = new Hub(context.slug);\n\t\t\tawait hub.init();\n\n\t\t\tconst index = await hub.getIndex();\n\t\t\treturn index.length.toString();\n\t\t} catch(e) {\n\t\t\treturn await renderer(\n\t\t\t\t\"ambox\",\n\t\t\t\t{\n\t\t\t\t\ttype: \"serious\",\n\t\t\t\t\ttext: \"'''Unable to get number of articles'''\",\n\t\t\t\t\t\"text-small\": `Could not evaluate {{NUMBEROFARTICLES}}: <code>${e.message}</code>.`\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n};\n</syntaxhighlight>\n\n== Tags ==\n\nUntil now we've only seen <nowiki>{{</nowiki>curly brackets<nowiki>}}</nowiki> templates. Kiwipedia also lets you create &lt;<code>tag</code>&gt; templates. Just add &lt;brackets&gt; around template name. For example, let's emulate <code>&lt;b&gt;&lt;i&gt;&lt;/i&gt;&lt;/b&gt;</code>:\n\n<syntaxhighlight lang=\"javascript\">\n// Usage: <bi>Bold and italic</bi>\n\nexport default {\n\tname: \"<bi>\",\n\tasync render(params) {\n\t\treturn `<b><i>params._</i></b>`;\n\t}\n};\n</syntaxhighlight>\n\nTag templates also accept <code>renderer</code> and <code>context</code> arguments. <code>renderer()</code> can also render tag templates if you give it <code>&lt;templatename&gt;</code> as the first argument.\n\nNotice that we used <code>_</code> as parameter name. That's because the content of tag is passed as <code>_</code> parameter. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<hello>\",\n\tasync render(params) {\n\t\treturn `<b>${params._ || \"Hello\"} ${params.name}!</b>`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<hello name=\"nofish\">Greetings</hello>\n</syntaxhighlight>\n\n<i><b>Greetings nofish!</b></i>\n\n== Nowiki templates ==\n\nNotice that <code>_</code> parameter is '''rendered''' content. For example:\n\n<syntaxhighlight lang=\"html\">\nBefore render:\n<test>{{ambox|type=notice|text='''Testing'''}}</test>\n\nAfter render:\n<test><div class=\"ambox ambox-notice\"><b>Testing</b></div></test>\n\n_ parameter:\n<div class=\"ambox ambox-notice\"><b>Testing</b></div>\n</syntaxhighlight>\n\nHowever, you may want to supress this behaviour. To do this, you can add <code>nowiki: true</code> to template settings:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<raw>\",\n\tasync render(params) {\n\t\treturn `Original: ${params._.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<raw>{{template}}</raw>\n</syntaxhighlight>\n\nResult:\n\n<i>Original: <nowiki>{{template}}</nowiki></i>\n\nAnother example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tnowiki: true,\n\tname: \"<nowiki>\",\n\tasync render(params) {\n\t\treturn params._;\n\t}\n};\n</syntaxhighlight>\n\n== AfterRender hook ==\n\nThough <code>render()</code> can be async, it isn't recommended for slow operations because article won't be shown before these operations finish.\n\nInstead, you can save important info in <code>render()</code> and then finish in <code>afterRender()</code>. Example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<slow>\",\n\tasync render(params) {\n\t\treturn \"Time: ..., sum: ...\";\n\t},\n\tasync afterRender(params, renderer) {\n\t\tconst sleep = t => {\n\t\t\treturn new Promise(resolve => setTimeout(resolve, t));\n\t\t};\n\n\t\tconst before = Date.now();\n\n\t\tlet sum = 0;\n\t\tfor(let i = 0; i < params.count; i++) {\n\t\t\tsum += i;\n\t\t\tawait sleep(0);\n\t\t}\n\n\t\tconst after = Date.now();\n\n\t\treturn `Time: ${after - before}, sum: ${sum}.`;\n\t}\n};\n</syntaxhighlight>\n\n<syntaxhighlight lang=\"html\">\n<slow till=\"100000\" />\n</syntaxhighlight>\n\nWhen this template is rendered, first a node with <code>Time: ..., sum: ...</code> content will appear (the result of <code>render()</code>), and the article will be shown. Then, in background, <code>afterRender()</code> will be ran. The <code>Time: ..., sum: ...</code> will be replaced by its result.\n\n<h3>Renderer in afterRender()</h3>\n\nIt is allowed to call <code>renderer()</code> in <code>afterRender()</code>. However, only templates without <code>afterRender()</code> hooks can be rendered inside <code>afterRender()</code> handler. For example:\n\n<syntaxhighlight lang=\"javascript\">\nexport default {\n\tname: \"<xyz>\",\n\tasync render() {\n\t\treturn \"xyz\";\n\t},\n\tasync afterRender(params, renderer) {\n\t\t// This will throw error because <math> has afterRender() hook\n\t\treturn await renderer(\n\t\t\t\"<math>\",\n\t\t\t{\n\t\t\t\t_: \"xyz\"\n\t\t\t}\n\t\t);\n\t}\n};\n</syntaxhighlight>",
            "slug": "adding-new-template-tutorial-",
            "date_updated": 1517732868704,
            "imported": ""
        }
    ]
}