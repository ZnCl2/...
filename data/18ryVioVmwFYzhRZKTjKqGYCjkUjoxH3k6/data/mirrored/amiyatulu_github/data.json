{"cert_user_id": "amiyatulu@github", "next_topic_id": 3, "topic": [{"topic_id": 1604065584, "title": "Angularjs error while hosting app in ZeroNet", "body": "Tried to serve an angularjs app: it gives an error due to iframe. `angular.js:9475Error: Failed to read the 'cookie' property from 'Document': The document is sandboxed and lacks the 'allow-same-origin' flag.`\r\nHow do i fix it?", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1480128458, "modified": 1480396317, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/675", "source_type": "github"}, {"topic_id": 1604065586, "title": "Making an api, for making post, get, delete,  request in json that works with $http service of angularjs", "body": "Zero net has  ZeroFrame API, but can user build an API over it to make POST and GET request in JSON that can be used with $http service of angularjs. We can write the logic on the page (a local host link) that gives GET data in JSON and takes POST data in JSON. But what if some client changes the logic.  I think the owner site should be always online. POST request can only be done through owner site, where the owner can authenticate the JSON file before feeding it to the database. Even owner can host multiple (authentic) sites on different servers where post request can be done in all these sites by different clients. All authentic sites should be synced with each other. Another question is how does a client recognize the different authentic owner sites and downloaded sites from the owner? Authentic sites can have a unique public key, than that of downloaded sites, and downloaded sites can't use the authentic site public key. A registrar of username and the authentic public key and its downloaded site public key should be kept.\r\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1480130774, "modified": 1489428748, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/676", "source_type": "github"}], "next_comment_id": 5, "comment": {"1604065584_mirrored_amiyatulu_github": [{"comment_id": 1, "body": "Sorry, yes it uses cookies. I check with some simple angular app, it works\r\n```\r\napp.controller('SimpleEditorCtrl', ['$scope', '$http',\r\n  function($scope, $http) {\r\n    $scope.markdownData = \"# Loading...\";\r\n    $http.get('demo.md').success(function(data) {\r\n      $scope.markdownData = data;\r\n    }).error(function(err) {\r\n      $scope.markdownData = \"# Error occured\";\r\n    });\r\n    $scope.editorOptions = {\r\n      \r\n    };\r\n  }\r\n]);\r\n```\r\n\r\nIt gets \"demo.md\", perhaps its not allowed in zeronet, can I make http.get request in  zeronet", "added": 1480149119, "modified": 1480151723, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/675#issuecomment-263058519", "source_type": "github"}], "1604065586_mirrored_amiyatulu_github": [{"comment_id": 2, "body": "Just a suggestion, what is the feasibility of including [IPFS](https://ipfs.io/) in ZeroNet?", "added": 1480256047, "modified": 1480256047, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/676#issuecomment-263134203", "source_type": "github"}, {"comment_id": 3, "body": "IPFS has a python [api](https://github.com/ipfs/py-ipfs-api), which can work with zeronet. Large file sharing can be done with it.", "added": 1480272572, "modified": 1480272572, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/676#issuecomment-263150129", "source_type": "github"}, {"comment_id": 4, "body": "It already comes precompiled. The good thing about it is, it's very [structured](https://github.com/ipfs/papers/raw/master/ipfs-cap2pfs/ipfs-p2p-file-system.pdf), and is made to be usable by different apps like ZeroNet. All file sharing can be done by ipfs, zeronet can concentrate on building the interface and logic, user authentication part etc that is developer friendly for building complicated websites.", "added": 1480293422, "modified": 1480295544, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/676#issuecomment-263176554", "source_type": "github"}]}}