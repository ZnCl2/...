{"cert_user_id": "caryoscelus@github", "next_comment_id": 15, "comment": {"1604066411_mirrored_slrslr_github": [{"comment_id": 1, "body": "Are there any updates on this?", "added": 1555398851, "modified": 1555398851, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1318#issuecomment-483599095", "source_type": "github"}], "1604067239_mirrored_caryoscelus_github": [{"comment_id": 2, "body": "I'm not sure i see any problem here. Since it is signed with the key (forgot to mention that), it was either actual owner who sent it, or the key was indeed compromised.", "added": 1555396105, "modified": 1555396105, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1988#issuecomment-483583752", "source_type": "github"}, {"comment_id": 3, "body": "@Thunder33345 both (if by userids you mean public keys, not \"human-readable\" ids gotten via certificate authority: those are only \"linking\" to public keys and their validity depends on certificate center). I believe they use the same mechanism anyway.", "added": 1555856388, "modified": 1555856388, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1988#issuecomment-485267991", "source_type": "github"}, {"comment_id": 4, "body": "> for ids, there's no real place to do so\r\n\r\nI don't see why it should be \"a real place\" in terms of file system. It can be simply a new broadcast command, and the information can then be stored on node in any convenient way. It has to be easily accessible for signature verification code, but that's about it", "added": 1556107611, "modified": 1556107611, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1988#issuecomment-486282081", "source_type": "github"}], "1604067605_mirrored_ZeroNetTickBot_github": [{"comment_id": 5, "body": "GPLv3+", "added": 1572804475, "modified": 1572804475, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2271#issuecomment-549178708", "source_type": "github"}, {"comment_id": 6, "body": "FWIW, relicensing to GPLv2+ would be enough. Effective license would be GPLv3, of course, but technically there's no necessity to limit usage of v2 if somebody needs it (and can get rid of incompatible deps, but that's their problem)", "added": 1572805392, "modified": 1572805392, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2271#issuecomment-549180063", "source_type": "github"}, {"comment_id": 7, "body": "> Notice: \"Apache-compatible licenses\" here refers to both MIT license and BSD 2/3 clause licenses.\r\n\r\nHonestly, this is unnecessary confusion. If the poll is about switching to MIT or BSD licenses, it should be written as such, not \"Apache\". All of these are different albeit pretty compatible licenses, putting them under Apache umbrella doesn't seem to make much sense", "added": 1572806453, "modified": 1572806453, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2271#issuecomment-549181777", "source_type": "github"}, {"comment_id": 8, "body": "> The thing is, are Apache, MIT, BSD, and ISC really that different to warrant this change?\r\n\r\nApache is different from MIT/BSD (and i'm guessing ISC is variation of the same idea) in that it has some sort of patent protection.\r\n\r\nBut no, i don't care as much to suggest someone should make a poll on that; i was merely talking about confusion this one is making. Besides arbitrarity of using \"Apache\" to represent what is often referred to as \"lax licenses\", lack of precision may be interpreted in unexpected ways. I'm pretty sure CC0 is Apache-compatible; do people who write \"Apache\" imply they agree to releasing their contribution under it?", "added": 1572808992, "modified": 1572808992, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2271#issuecomment-549185376", "source_type": "github"}], "1604067608_mirrored_ZeroNetTickBot_github": [{"comment_id": 9, "body": "GPLv3+", "added": 1572850061, "modified": 1572850061, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-549281096", "source_type": "github"}, {"comment_id": 10, "body": "Here's another thought: whoever is licensing their work under lax licenses (i'm really just skipping through possible legal implications of formulating it like that, but oh well) gives anyone ability to license whole work under GPL (v3 in case of apache), **however** that would require some work on proper licensing every bit (if anyone cares, that is). In a similar vein, licensing a piece of code under GPLv3+ allows others to use/distribute/modify it under GPLv3 only.", "added": 1572850366, "modified": 1572850366, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-549282821", "source_type": "github"}, {"comment_id": 11, "body": "> Honestly, I don't see why anyone would ever want that. If someone could explain this, that'd be useful.\r\n\r\nTo avoid this sort of issue altogether, essentially.\r\n\r\n> maybe even the project would be forced to do so\r\n\r\nOf course not. GPLv3+ means that anyone is free to choose *any* of licenses that fall under \"version 3 or later..\" definition. You can take it and limit version you redistribute to GPLv3, GPLv4, GPLv4+ or even something weird like \"GPLv3 or GPLv5\".\r\n\r\nBtw, for some reason the bot displays my vote under \"passing\" and my name in the main list appears as if unvoted.", "added": 1572872829, "modified": 1572872855, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-549424112", "source_type": "github"}, {"comment_id": 12, "body": "@0x6a73 while i can understand your frustration, can we please have a civilized discussion here?\r\n\r\nIt doesn't matter whether antifa and LiberateZeroNet are the same person(s) or not, but clearly they are either ignorant (but good willing) or specifically working against community and perhaps specifically trying to provoke such a reaction", "added": 1572876799, "modified": 1572876799, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-549455083", "source_type": "github"}, {"comment_id": 13, "body": "I'm not a lawyer, but here's my perspective on \"GPL violation\" issue if anyone's interested (i'm assuming the violation itself happened as per discussion, i.e. Apache & GPL3 libs were used):\r\n\r\n- using Apache libs is violation of 0net's own license, which means that if all contributors agree, then whoever violated license (and thus got their license terminated) by distributing 0net along linked with those libs can be granted the same / different license again\r\n\r\n- using GPL3 libs would be a violation of both licenses. The same reasoning as above applies to 0net license; as for libs' license, GPL3 is pretty liberal in terms of restoration after termination. Essentially violation should be fixed in 30 days (after copyright holder notification, which to my knowledge haven't even happened yet)\r\n\r\n> Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, **this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.**\r\n\r\nThat said, i highly doubt that there will be someone seriously trying to enforce GPL in terms of license termination. If you look for real court cases, you'll find how much of conflicts were decided outside court, where violating parties were in fact proprietary vendors and not another free software project that messed up with licenses (and which, furthermore, is in the process of solving it). Unless someone maliciously \"contributed\" to 0net and/or libs it's using in order to then try to bring it down, the probability of any legal action (or even unfriendly moves from github) is very low. But honestly, i can't see this case standing any chance in court.\r\n\r\nFinally, a note on license termination itself. The only cases for termination are distribution & modification and as far as i understand the violation happens only due to \"linking\" (tbh, not sure how it applies to python), thus merely sending patches shouldn't count. Which means that even in the worst case only those distributing 0net (i haven't been following whether anyone does alternative builds or something..) \"binaries\" can be held accountable and get license termination.", "added": 1573409534, "modified": 1573409534, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-552234627", "source_type": "github"}, {"comment_id": 14, "body": "> As an aside for anyone unfamiliar with how this stuff works, copyright licenses are not revocable unless they say otherwise. None of the licenses covered in this poll say they're revocable. As a result, all votes cast in this poll are valid, not just the most recent vote. So, if a user votes for GPLv3+, and then changes their vote to GPLv3, it's the GPLv3+ vote that takes precedence because it's a superset of their other votes. Similarly, if someone votes for MIT and then changes their vote to GPLv3+, their code can be used under either MIT or GPLv3+.\r\n\r\nThat's only assuming that voting in this thread is providing license to the user's code, which i think is quite dubious from legal pov.", "added": 1573996099, "modified": 1573996099, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-554760701", "source_type": "github"}]}, "next_topic_id": 6, "topic": [{"topic_id": 1604067005, "title": "Minor fix in sidebar plugin", "body": "Under certain conditions content[\"files\"] is present, but is None,\r\nwhich led to exception and thus failure of the whole sidebar.", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1543993763, "modified": 1544445981, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/1800", "source_type": "github"}, {"topic_id": 1604067239, "title": "Ability to revoke/block own key", "body": "Would be nice to be able to broadcast messages like \"this key was compromised\" and/or \"no further messages from this key are valid\". This would address both the problem of private key already being compromised and add ability to lock the site forever (whether because there's a danger of key being compromised in the future or just because site is intended to be static).\r\n\r\nWhen a node receives \"compromised\" message, it should stop accepting any further updates from the key and it would be nice to also mark data as potentially replaced by third-parties. When a node receives \"no further updates\" message, it does the same without marking data as compromised, and should also still react on \"compromised\" message (in order to prevent attacker to first replace content and then freeze it).\r\n\r\nPotential drawback: this would add ability to kill all services based on private keys being public. But those are already susceptible to any kind of attack, so personally i don't think it's that bad. Also, it should be possible to also add \"exception\" feature if these are considered important enough.\r\n\r\nPS: I think this was mentioned before on the network, but i couldn't find an issue here.", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1555395303, "modified": 1556150797, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1988", "source_type": "github"}, {"topic_id": 1604067453, "title": "Overwriting small file with big file breaks syncing / access to file", "body": "### Step 1: Please describe your environment\r\n\r\n  * ZeroNet version: latest py3\r\n  * Operating system: Debian\r\n\r\n### Step 2: Describe the problem:\r\n\r\nReplacing a file which was fitting \"small file limit\" with a file that doesn't leads to file being unavailable on other nodes (at least on proxies). No `.piecemap.msgpack` is generated, even after deleting the file, signing changes and bringing it back; so i suspect that's the cause of the problem on remote nodes.\r\n\r\n#### Steps to reproduce:\r\n\r\n  1. Add small optional file (lets say \"file.bin\") to a site and sign changes\r\n  2. Replace small \"file.bin\" with a big \"file.bin\" and sign changes\r\n  3. Try to access \"file.bin\" from other nodes\r\n\r\nProxies result in either time out or not found error", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1565961339, "modified": 1565961339, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2152", "source_type": "github"}, {"topic_id": 1604067525, "title": "Case (in)sensitivity of addresses", "body": "### Step 1: Please describe your environment\r\n\r\n  * ZeroNet version: master\r\n  * Platform: various linux distros\r\n\r\n### Step 2: Describe the problem:\r\n\r\nTrying to load address which coincides with a registered one up to letter case leads to weird behaviour. In particular, the page loads forever, only changing its title to one from original page (if it's loaded)\r\n\r\n#### Steps to reproduce:\r\n\r\n1. take any site address\r\n2. load/try to load the address\r\n3. change case of one (or many) of its alphabetic components\r\n4. try to load that one\r\n\r\n#### Observed Results:\r\n\r\nThere is no attempt to load the second address, the page is empty and \"loads\" forever\r\n\r\nE.g. http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3d\r\n\r\n#### Expected Results:\r\n\r\nSites with different addresses should be independent of each other", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1569176571, "modified": 1569937283, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2206", "source_type": "github"}, {"topic_id": 1604067542, "title": "minor code improvement: super/init", "body": "`__init__` should only ever return None", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1570390342, "modified": 1570429413, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2218", "source_type": "github"}]}