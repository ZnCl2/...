{"cert_user_id": "rujash7@github", "next_comment_id": 3, "comment": {"1604064822_mirrored_HelloZeroNet_github": [{"comment_id": 1, "body": "> > when you remove a user, do you want to re-encrypt the site content to immediately deny them access to the data? Or just encrypt changes from that point? How do you make all that work with the delta updates?\r\n> \r\n> If someone's already got the site contents, they can copy that off somewhere. If they initially had access, you should consider anything they had access to compromised.\r\n> \r\n> Don't worry about encrypting anything here, that just adds complexity. just stop sending them deltas.\r\n\r\nThe purpose is to have redundant hosting of content, even encrypted, so public facing visitors can host the back end encrypted content. It is about keeping the changes done within the ZeroNet framework completely and not giving out passwords on other platforms or in emails, but it being automatic access, which dynamically is assigned. This will (theoretically) enable advanced measures like having front end content editable by a few backend admins, no matter where they are, and without additional compromises or points of failure.", "added": 1595224401, "modified": 1595224401, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/62#issuecomment-660896319", "source_type": "github"}, {"comment_id": 2, "body": "> This is already a thing in ZeroNet, where content updates require signatures by pre-approved keys. Encryption doesn't help here. If only a select few people can decrypt some content, you can't then go and serve that content to random visitors and expect it to be useful other than just for storage.\r\n\r\nThe main thing I am imagining is a tiered access structure with this, so if we discover a bad actor with access, the site owner can change the keys behind a deeper wall of access, and then distribute that changed access code to non-bad-actors via zeronet email, or just a list of actors. Theoretically seemed possible.\r\n\r\nSince now it seems access is set permanently with a code, and if it's leaked, the site is completely compromised.\r\n\r\nBut yeah, that would require the encrypted content somehow affecting the non-encrypted. What you've outlined may suffice. The goal was to implement some moderation means for site admins, that isn't permanent - ontop of private access areas.\r\n\r\nIf access to mid-tier (public/admin/owner) could be dynamic, then the moment a person (admin) is found out to be compromised, they would likely unwittingly download the site content that excludes their access on next visit, providing more security against leaks.\r\n\r\nAll this without losing a public audience (your redundancy) or leaving zeronet.", "added": 1600317375, "modified": 1600318591, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/62#issuecomment-694043010", "source_type": "github"}]}}