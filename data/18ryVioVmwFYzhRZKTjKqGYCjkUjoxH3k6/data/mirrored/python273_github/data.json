{"cert_user_id": "python273@github", "next_topic_id": 2, "topic": [{"topic_id": 1604066081, "title": "content.json: File permissions / Rate limiting", "body": "### Suppose:\r\n1. User can modify their own `data.json`\r\n2. `data.json` contains list of messages (e.g. forum posts)\r\n3. User can add as many posts as they want since they don't have any restrictions\r\n4. ???\r\n5. FLOOD or MODIFYING POSTS AFTERWARDS!11\r\n\r\n## Possible solutions:\r\n### Storing history of file modifications with timestamp\r\n#### Problems:\r\n1. Need to verify timestamp somehow\r\n2. Need to implement history/blockchain\r\n3. 51% attack\r\n\r\n### ~File per post + Rate limiting + File permissions:~\r\n\r\n1. Allow to add one file per `content.json` update\r\n2. Rate limit modification of `content.json` (check via `modified` key)\r\n3. One file contains one post\r\n4. User can only create files, not modify\r\n\r\n#### Problems:\r\n~1. Many files~\r\n1. We can't rely on `modified` timestamp\r\n\r\n### ~Smarter ways to check modifications of JSON data:~\r\n\r\n1. Ability to restrict addition of one item to `data.json` list per `data.json` update via `content.json` rules\r\n2. Ability to restrict items modification\r\n3. Rate limit modification of `data.json` or `content.json`\r\n\r\n#### Problems:\r\n1. (Possible) DoS attack via big JSON files (each node should check modification of files)\r\n2. If all nodes is offline, you can create as many posts as you want\r\n\r\n### ~Maybe even ~JS~ CoffeeScript/Python scripts to check files modification~\r\n#### Problems:\r\n1. Kinda dangerous (sandbox's required)", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1502137114, "modified": 1505122952, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071", "source_type": "github"}], "next_comment_id": 8, "comment": {"1604066081_mirrored_python273_github": [{"comment_id": 1, "body": "Well I think 1000 posts/day is better than 100500 posts/`data.json` update. And the second problem is modifying message after sending\r\n\r\n> I think this problem should be solved by the moderator of the site. Maybe with help of some automated \"bot\" to watch the updates and ban obviously spamming users.\r\n\r\nYeah, but it's centralized solution, so I'm trying to figure out some decentralized solutions\r\n\r\nIs there some API to watch file updates?", "added": 1502140314, "modified": 1502156699, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-320814145", "source_type": "github"}, {"comment_id": 2, "body": "> I think most of the users would really hate it if they were unable to modify their post after they sent it.\r\n\r\nWell in some cases it's better not to provide option to edit messages. Now we can modify data even if a site doesn't provide that option (just edit `data.json`, sign, publish)\r\n\r\n> It could be possible to add more limitation on rate on same file updates. eg. 100/hour (configurable by site owner)\r\n\r\nThe problem is that it's possible to add lot of posts at 1 update, so it won't work at all\r\n\r\nbtw, as I understand we can't rely on `modified` value. Each node just checks that it's bigger that previous `modified` timestamp. And you mentioned about offline. So we need to have some history of file changes (at least hashes) (like blockchain, lol)", "added": 1502205021, "modified": 1502205021, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-321037004", "source_type": "github"}, {"comment_id": 3, "body": "Even if you have 1MB limit, you can still create file that contains thousands of posts. It doesn't solve flooding problem at all", "added": 1504949413, "modified": 1504949413, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-328274351", "source_type": "github"}, {"comment_id": 4, "body": "Actually timestamp can be trusted in some range https://en.bitcoin.it/wiki/Block_timestamp", "added": 1505118898, "modified": 1505118898, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-328502560", "source_type": "github"}, {"comment_id": 5, "body": "I know that. It's just an example of verifying timestamp", "added": 1505120071, "modified": 1505120071, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-328506497", "source_type": "github"}, {"comment_id": 6, "body": "I know that too. Read comments before leaving a comment\r\n> as I understand we can't rely on `modified` value. Each node just checks that it's bigger that previous modified timestamp. And you mentioned about offline. So we need to have some history of file changes (at least hashes) (like blockchain, lol)", "added": 1505121080, "modified": 1505121080, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-328509959", "source_type": "github"}, {"comment_id": 7, "body": "I know it's not so easy problem to solve and usually it solved with PoW (like in BitMessage). But if you want to make ZeroNet fully decentralized, it should be solved somehow IMHO", "added": 1505122242, "modified": 1505122242, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1071#issuecomment-328514242", "source_type": "github"}]}}