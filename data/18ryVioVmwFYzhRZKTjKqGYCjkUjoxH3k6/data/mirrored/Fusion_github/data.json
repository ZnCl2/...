{"cert_user_id": "Fusion@github", "next_topic_id": 2, "topic": [{"topic_id": 1604064855, "title": "TIP: How to host ZeroNet in a private IP container", "body": "Not an issue, but I wasn't sure where to post this tip:\n\nAnd, yes, I am aware that you may then want to protect your ZeroNet install(!)\n\nHere is a typical configuration:\n- Host machine runs haproxy\n- ZeroNet in a Docker or OpenVZ container\n\n1-Make the main UI available to the world:\n\nIn the container: `python zeronet.py --ui_ip 0.0.0.0\u0000`\n\nOn the host, you need to configure this container's IP in haproxy -- for instance, edit haproxy.conf:\n\n```\nfrontend http_in\n    acl host_zeronet hdr(host) -i zeronet.example.com\n    use_backend be_zeronet if host_zeronet\n\nbackend be_zeronet\n    balance lastconn\n    option httpclose\n    server pub_zeronet <container ip>:43110 cookie pub_zeronet check\n```\n\nRestart haproxy.\n\n2-Make the file server available:\n\nI would recommend using NAT to avoid any surprise. In /etc/../iptables:\n\nnat:\n\n```\n# we will nat incoming packets on port 15441\n-A PREROUTING -i eth0 -p tcp -m tcp --dport 15441 -j DNAT --to-destination <container ip>:15441\n-A PREROUTING -i eth0 -p udp -m udp --dport 15441 -j DNAT --to-destination <container ip>:15441\u0000\n```\n\nfilter:\n\n```\n# host forwards incoming container packets\n-A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -s <container network>/24 -i <bridge interface> -j ACCEPT\u0000\n# host accepts incoming container packets to its own services\n-A INPUT -s <container nerwork>/24 -i <bridge interface> -j ACCEPT\u0000\n```\n\nCleanup your iptables configuration then `iptable-restore < etc/../iptable`\n\nAnd you're good to go! (in theory)\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1431714625, "modified": 1431714667, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/103", "source_type": "github"}]}