{"cert_user_id": "str4d@github", "next_comment_id": 17, "comment": {"1604064781_mirrored_komachi_github": [{"comment_id": 1, "body": "Relevant thread: http://zzz.i2p/topics/1613-azi2phelper-vuze-plugin (requires I2P to view). Vuze has implemented both I2P-only and clearnet+I2P modes for regular torrenting, and their code may help provide insight about how to add I2P support to ZeroNet.\n\nDisclaimer: I'm an I2P developer (and happy to answer questions!)\n", "added": 1450124051, "modified": 1450124051, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-164590506", "source_type": "github"}, {"comment_id": 2, "body": "Some more points:\n- I2P has a well-used in-net torrent DHT. See [the BitTorrent docs page](https://geti2p.net/en/docs/applications/bittorrent) (also linked [above](45#issue-56867747)) for details (there are some slight differences from the clearnet DHT protocol to support I2P addresses).\n- AFAIR Vuze's azi2phelper plugin manages the I2P and clearnet DHTs separately.\n- I2P supports UDP, if it helps (via [SAMv3 API](https://geti2p.net/en/docs/api/samv3)).\n", "added": 1450124729, "modified": 1450124729, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-164592597", "source_type": "github"}, {"comment_id": 3, "body": "@HelloZeroNet if you were using Twisted I'd point you at [txi2p](https://github.com/str4d/txi2p), but instead I'll point at [the more general Python library](https://github.com/majestrate/python-i2cp). Both use the SAM API, which is supported by all I2P implementations.\n\nRe: bundling, I agree bundling Java would be tricky, because it would require the JVM. Bundling Python in Java is easier because of things like Jython - I don't know if there is maybe some reverse equivalent? Otherwise you could look at the C++ I2P routers being developed ([i2pd](https://github.com/PurpleI2P/i2pd) and [kovri](https://github.com/monero-project/kovri)), which I assume could be bundled the same way you are bundling Tor. I would certainly recommend at least having a UI option to use an external I2P router, even if it is not the default; many I2P users run a router 24/7 on a VM and run their transient apps through it remotely. This would be the same setup as other I2P-supporting apps like Vuze or [Bote](https://github.com/i2p/i2p.i2p-bote.android).\n", "added": 1452741939, "modified": 1452741939, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-171546495", "source_type": "github"}, {"comment_id": 4, "body": "> Need more research to see if i2p support many (per site so 100+) services from same host\n\nI need some more clarification on this. Are you wanting one Destination (I2P equivalent of Tor Onion Service) per site, or multiple listening sockets at different ports on the same Destination? The former is possible (though YMMV regarding how many hundreds you can run at once :P ); the latter will be possible soon via the above Python libraries (we only just exposed via the SAM API our support for multiple ports).\n\n> and have to find out the cryptography of i2p address to be able to create proof-of-ownership signature to avoid some network attacks.\n\nThe binary format of the B64 private key that SAM returns to you is [documented here](http://docs.i2p-projekt.de/javadoc/net/i2p/data/PrivateKeyFile.html); you could instantiate the private signing key yourself and use it to sign anything you wanted. That may be something that gets added to the Python libraries in future if enough people require it.\n", "added": 1452742523, "modified": 1452742523, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-171551900", "source_type": "github"}, {"comment_id": 5, "body": "I wouldn't go as far as saying it isn't possible - I'm running ~30 services for a combined ~110 tunnels on my router. But you would definitely want to do some kind of tunnel management if you were spinning up one Destination per site. I would suggest dropping to one or two inbound and outbound tunnels each for low load (probably dropping down to only one for sites that have no peers downloading for some time), and adding more as load increases. Vuze uses a similar mechanism to great effect (I've had as much as 200kB/s combined download speed for torrents over I2P, at which point Vuze will have IIRC six inbound and outbound tunnels).\n\nOne downside to this mechanism would be that it becomes easy to determine which sites are popular, by observing which ZeroNet Destinations have more tunnels. But maybe this isn't part of your threat model.\n\nThe setup Vuze uses is to have only two Destinations: one for torrents that it seeds inside I2P only, and the other for torrents that it simultaneously seeds on the public internet. This minimizes correlation between their public and anonymous activity.\n", "added": 1452780224, "modified": 1452780224, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-171705449", "source_type": "github"}, {"comment_id": 6, "body": "Just FYI, I2P has launched [a development program](https://geti2p.net/en/blog/post/2016/06/01/I2P-Summer-Dev) aimed at helping developers integrate I2P into their apps. If you would like some help with this in July during our Apps month, let me know! We are currently in APIs month, so I'll have a poke around the ZeroNet source to make sure the libraries you would need are being improved :smile:\n", "added": 1465503904, "modified": 1465503904, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-225055807", "source_type": "github"}, {"comment_id": 7, "body": "@aaannndddyyy in theory, yes it can. In practice, you'd want to set up tunnel management such that each Destination only had one tunnel unless it was being actively used and needed the additional bandwidth. And of course you'd want to have your I2P router sharing a lot of bandwidth, because even with every hidden service Destination using only one tunnel, you'd be using a total of 225 hops by default (for 3-hop tunnels), so you'd need to be sharing appropriately to avoid Zeronet causing network congestion. (We had that problem initially with Vuze, until they changed the default sharing percentage of their internal I2P router to 80%. Now Vuze nodes contribute a sizeable fraction of our routers.)\n", "added": 1469251519, "modified": 1469251519, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-234706868", "source_type": "github"}, {"comment_id": 8, "body": "I'm doing the grunt work for this issue this weekend :smile:\n", "added": 1469263588, "modified": 1469263588, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-234714105", "source_type": "github"}, {"comment_id": 9, "body": "First structural question: I2P has the concept of a Destination, analogous to an IP address. We have Python datatypes for these Destinations as part of the module I'm using for the integration. Would the Zeronet devs prefer to use that datatype throughout (ie. wherever `Peer.ip` is used when generating a string, check if it is a Destination and behave accordingly)? Or would it be better to just keep `Peer.ip` as a string, and then parse from that only inside the I2P-specific code?\n- Note that there are many places that do `if ip.endswith(\".onion\")` that currently need to become `ip.endswith(\".onion\") or ip.endswith(\".i2p\")`, but using the Destination datatype they would instead be `isinstance(ip, Destination)` or `ip.endswith(\".onion\")`. The ordering would be necessary to ensure that `ip` is only parsed as a string after we know it isn't a Destination.\n\nFollow-up question: if using strings and not Destinations, would the Zeronet devs prefer to use the full 387+ byte (ie. variable-length depending on crypto used) base 64 strings (which are just serialised Destinations), or the B32s (`52chars.b32.i2p`)? The latter is only 32 bytes (and therefore easier in logs and less data to transfer between peers), but requires an additional lookup before it can be used anywhere (ie. B32 -> B64, then connect to B64) which will add some latency to making connections.\n- Note that if using the Destination datatype, it can easily be converted to either B32 or B64 exactly where required (so e.g. in log messages the B32 could be used, while in network messages the full Destination could be used).\n- I2P's [BitTorrent spec](https://geti2p.net/en/docs/applications/bittorrent) specifies that non-compact tracker responses include the full B64, while compact responses and PEX use the B32 hash. That may or may not be helpful, because AIUI Zeronet only uses a BitTorrent-like protocol.\n", "added": 1469327407, "modified": 1469327407, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-234758735", "source_type": "github"}, {"comment_id": 10, "body": "WRT the first question, I thought it was possible, but I've found that some IPs have a `cert_pin` appended, the origin of which I cannot trace but it indicates that the `ip` field is overloaded with meaning. Therefore I'll try to stick with strings.\n", "added": 1469434191, "modified": 1469434191, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-234925358", "source_type": "github"}, {"comment_id": 11, "body": "I have this mostly-done. Outgoing communication is working fine (ZeroNet can announce to I2P open trackers), but incoming communication is currently semi-to-non-functional because i2p.socket's `accept()` doesn't quite work yet with gevent's cooperative sockets. I'll finish preparing the commits on ZeroNet today and make a PR for discussion.\n\n@up4 thanks for the notification, I'll have a look at it.\n", "added": 1469917241, "modified": 1469917241, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-236401155", "source_type": "github"}, {"comment_id": 12, "body": "Oh! Sorry for the lack of updates here. I finished implementing I2P support in ZeroNet back in July, but didn't make a PR because it didn't work (due to i2p.socket not working fully with gevent). Then I decided I'd just make a PR anyway in case someone else could get i2p.socket working, but then work became busy :sweat_smile: I'll push the PR now.\n", "added": 1475543113, "modified": 1475543113, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-251290759", "source_type": "github"}, {"comment_id": 13, "body": "@majestrate see #602. I'll make time to rebase it later this week.", "added": 1488990394, "modified": 1488990394, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/45#issuecomment-285142010", "source_type": "github"}], "1604064818_mirrored_HelloZeroNet_github": [{"comment_id": 14, "body": "See #45 for some comments regarding I2P's torrent DHT support, which may be helpful.\n", "added": 1450124771, "modified": 1450124782, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/60#issuecomment-164592721", "source_type": "github"}], "1604065061_mirrored_HelloZeroNet_github": [{"comment_id": 15, "body": "Regarding the note about including I2P addresses, it would be a good idea to read I2P's BitTorrent docs (linked in #45) to check how I2P's slight torrent protocol differences would affect ZeroNet. I don't think it should overly affect this ticket, but I'm not familiar with ZeroNet specifics.\n\nDisclaimer: I'm an I2P developer (and happy to answer questions!)\n", "added": 1450124204, "modified": 1450124204, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/226#issuecomment-164590987", "source_type": "github"}], "1604065494_mirrored_str4d_github": [{"comment_id": 16, "body": "This currently does _not_ work fully, because [i2p.socket](https://github.com/majestrate/i2p.socket) (which this uses) doesn't listen properly under gevent. This means that ZeroNet can connect to I2P torrent trackers, and it can connect to peers, but it can't successfully listen for peer connections.\n\nAlso, the above was true at the end of July when this was based on 523a7d4c16e8c2f590e759e23f0d2d6ae36cff37. I have just rebased this onto master, and have not tested it again, so if there were Tor-related changes in the intervening time, this PR does not currently reflect them (aside from the PEX limit change I spotted).\n", "added": 1475543988, "modified": 1475543988, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/602#issuecomment-251292278", "source_type": "github"}]}, "next_topic_id": 2, "topic": [{"topic_id": 1604065494, "title": "[WIP] Add I2P support", "body": "This implements support for both connecting to I2P torrent trackers, and communicating with peers over I2P.\n\nCloses #45\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1475543778, "modified": 1594700470, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/602", "source_type": "github"}]}