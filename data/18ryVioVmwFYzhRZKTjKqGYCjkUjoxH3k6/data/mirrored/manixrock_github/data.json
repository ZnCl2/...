{"cert_user_id": "manixrock@github", "next_comment_id": 4, "comment": {"1604064980_mirrored_HelloZeroNet_github": [{"comment_id": 1, "body": "> holds the downloaded files hashes first 4 character (only first 4 for economy reasons)\n\nWith 4 hex characters the probabilities for collision are as follows:\n\n| Number of files | Probability of collision |\n| --- | --- |\n| 10 | 0.068% |\n| 100 | 7.278% |\n| 1000 | 99.953% |\n| 10000 | 100.00% |\n\nConsidering that a site like imgur gets about 1,500,000 images uploaded daily, the hash length should be longer than 4. Here's a graph for hash collision probability based on hash length (hex format assumed).\n\n![has collision prob](https://cloud.githubusercontent.com/assets/785247/13554147/0adbf168-e3a9-11e5-9972-afb1a7ce42ab.png)\n\nAlternatively, the hash length should increase somehow with the number of total files uploaded. This may require updating the previous existing hashes.\n", "added": 1457257984, "modified": 1457258252, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/163#issuecomment-192884883", "source_type": "github"}, {"comment_id": 2, "body": "> Creating multiple sites (eg one per user) instead of increasing the hashtable length is more scalable solution.\n\nAgreed.\n\n> Also a collision is not a big problem, it's just increase the network communication: the find peer by hash returning some peers that doesn't has the file you looking for.\n\nIt would be a problem for big sites. A site with a million files using a 4-character hex hash would have to find the user with the file from 27 users, that's a lot of overhead.\n\nI think one downside of per-follower storage (where content created by user A is only stored by the users that have accessed it) will be very prone to missing content.\n\nA better approach might be that every user accessing a site with per-follower content, implicitly accepts to store content for ~5-10 random users (within a size limit). In exchange his own content should he make any will be stored by other users as well. This will be transient storage, and can be deleted by the system at any time to make room for newer / more popular content.\n\nThis way when someone has just posted an comment/image/video online, his content is duplicated instantly to others without waiting for them to access the content first. If he goes offline immediately after posting, his content will still persist online, at least for some time.\n", "added": 1457274915, "modified": 1457274963, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/163#issuecomment-192940670", "source_type": "github"}, {"comment_id": 3, "body": "I see a few problems with the current approach.\n\nFirst is a lack of immediate persistence for users that are new or without followers: right now if such a user is say on the beach, and wants to share an image of themselves and their friends then immediately shut down the laptop, it will be as if it was never uploaded. No one will be able to see it.\n\nAnother is the \"many users' content on one page\" problem. Every site has a front page where they display new or trending content. What this means is that every visitor to the front page will automatically become a \"follower\" of all the users of whatever is displayed on the front page at the time, otherwise they can't see it right? It would be awkward to ask permission for every user whose content is on the front page. And if for example the users visits an image page with hundreds of comments, does he suddenly become a follower of hundreds of users, and hundreds more for every page he visits?\n\nFor video websites it's even worse, as accessing one user's video leads to potentially hundreds of large videos becoming shared. Imagine browsing YouTube and ending up copying every other video of the user whose video you just saw.\n\nFinally it severely limits how big sites can get, and thus how many serious developers will choose the platform.\n\n## Proposal: User Roles\n\nRather than limiting how big sites can get, what about creating user roles?\n\nFor example there could be a `storage` role where the users who choose to assume the role can store (but not modify) files, a `moderator` role where they can modify other users' files, a `processing` role where processing tasks, crons can be run, etc.\n\nFor some roles only the site admin can grant it (like `moderator` or `processor`), for others everyone can choose it (like `storage`). For `storage` the user can choose a storage limit (like Freenet does), and for `processor` a processing power limit (like Folding@Home does). Here I discuss the `storage` role.\n\nSay there is a site called ImgurZero with a million images (each about 1MB, totaling 1TB). Being a big site, it will have gathered a few hundred volunteer `storage` roles by now. The storage distribution method is completely up to the site developer. I'm sure libraries will spring up for all kinds of distributed storage methods. New files will be stored on the creator's host, but now the site can instantly duplicate it on hosts with `storage` roles.\n\nThe way the files are duplicated is completely up to the developer - it can be simply storing the file as is, it can be stored partially so big files are shared, it can even be stored encrypted if the file is private. If a site wants a list of all of a user's files or to read a particular file, the user doesn't have to be online, the few `storage` roles can be contacted instead by whatever rules the developer wants. Again, it's all up to the developer, all ZeroNet has to do is provide commands to read/write to these storage locations (and optionally a few hints like which ones happen to already be connected, latency, past transfer speed, total storage, free storage, etc).\n\nFrom the user's point of view, he would be visiting a site where there could be a \"Donate\" button where he can donate some storage space and/or processing power to the site, and he gets to choose how much. Since content can be targeted at a particular user (instead of only all users at is it now), it may be useful to have an encryption option. The site could even prompt the user for such contributions, like Wikipedia does for money. It could look similar to requesting authentication right now.\n", "added": 1457288594, "modified": 1457296305, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/163#issuecomment-192999942", "source_type": "github"}]}}