{"cert_user_id": "klueq@github", "next_topic_id": 2, "topic": [{"topic_id": 1604067030, "title": "ZeroNet as a platform for overlay networks.", "body": "Can ZeroNet be used as a library to create an overlay network of nodes interested in topic `foo/1.2.3` and let them exchange with arbitrary messages? Number of nodes: ~1M. Message size: < 1 KB.\r\n\r\nFor example, I want to make a distributed p2p version of a books catalogue. Ther catalogue has a well-known name, e.g. `books/1.2.3`. Nodes use this name to discover other nodes connected to this overlay network. Once connected, they download the list of book ids from a peer. If someone wants to add a book, they send its id to a few peers, they add it to the local storage and re-transmit to other peers. An important property of this system is that all the nodes are equal: there is no admin who has special rights. There is no special private key that has special rights in this catalogue.\r\n\r\nAPI needed for this:\r\n- `join(\"books/1.2.3\")` finds a few peers in this overlay network\r\n- `peers(\"books/1.2.3\")` returns the list of online peers we're currently connected to\r\n- `send(\"books/1.2.3\", peerId, \"howdy\")` sends a message to the given peer\r\n- `listen(\"books/1.2.3\", callback)` gets messages sent by other peers with the `send()` API\r\n\r\nThoughts?", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1544682312, "modified": 1544857831, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1820", "source_type": "github"}], "next_comment_id": 4, "comment": {"1604067030_mirrored_klueq_github": [{"comment_id": 1, "body": "The idea is to let every node run a script that would verify every new book. The script could check if the book looks like a text file, if it has other properties and so on. For example, if this system stores cat pics, the script could run a basic ML model that would prevent adding dog pics. On top of that every node may have a UI that would allow to create custom filters. As for name collisions: we can use hash to identify books, not their titles.\r\n\r\nThe tricky part is not finding peers: this problem is well solved by numerous DHTs, but an API to let the nodes exchanges with arbitrary messages. Sure, we can modify an existing system, was it ZeroNet, IPFS, DAT, etc., and expose this p2p messaging API, but this needs time that I don't have. This is why I'm asking if ZeroNet already exposes this p2p API.\r\n", "added": 1544719499, "modified": 1544719499, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1820#issuecomment-447096066", "source_type": "github"}, {"comment_id": 2, "body": "If some node decides to not run the check, it can do so. However it won't be able to push new entries to other nodes. It's like if we were to manually sync a dir with files. I send you a email and suggest to add these 10 files. You run a check and find that some files are bad. If this is a recurring event, you add my email to a spamlist and that's it. As you see, whether or not I run the check on my end isn't relevant because you run the check too.\r\n\r\nIf a subset of nodes decides to change the rules, they can do so. However even if everyone except 1 node changes the rules, this won't force this remaining node to accept new entries that don't match its own copy of the rules. This is not a voting system. It's just a simple script file that every node has and runs on every new entry.", "added": 1544729542, "modified": 1544729542, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1820#issuecomment-447144714", "source_type": "github"}, {"comment_id": 3, "body": "The rules script can have arbitrary code, including things like presenting a captcha or enforcing pre/post moderation. For example, someone sends me a request to add a book. I run the rules script and it returns a captcha, so I send it back to that peer. Pre-moderation can be implemented as a list of mods public keys stored along with the list of books. I think the idea of the rules script is flexible enough to handle all these cases.\r\n\r\nThe zeronet client doesn't need to run the rules script. What I have in mind is a zeronet lib that can be used by an app and that app runs the script. Something along these lines:\r\n\r\n```js\r\nimport zeronet from 'zeronet';\r\n\r\nawait zeronet.join(\"books/1.2.3\");\r\nawait zeronet.send(peer, ...);\r\n```", "added": 1544849184, "modified": 1544849184, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1820#issuecomment-447546125", "source_type": "github"}]}}