{"cert_user_id": "mirrorwish@github", "next_comment_id": 12, "comment": {"1604064822_mirrored_HelloZeroNet_github": [{"comment_id": 1, "body": "> In fact, if we don't use zip files, we have to publish IVs per file too. On a site with a lot of files that could eat a lot of entropy from the pool.\n\nThe IVs can be put inside the file along with the ciphertext and the MAC. Patches could send a single random value and the IVs will be derived using HKDF, but it shouldn't really be a problem either way.\n", "added": 1460130494, "modified": 1460130494, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/62#issuecomment-207553252", "source_type": "github"}], "1604065249_mirrored_mirrorwish_github": [{"comment_id": 2, "body": "That solved it! Thanks.\n", "added": 1459863440, "modified": 1459863440, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/409#issuecomment-205886900", "source_type": "github"}], "1604065254_mirrored_mirrorwish_github": [{"comment_id": 3, "body": "It think ZeroMail tries to decrypt messages with all its AES keys (not just the one associated with the sender). So I can't see how this would help. \n", "added": 1460095478, "modified": 1460095478, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207337644", "source_type": "github"}, {"comment_id": 4, "body": "@HelloZeroNet I looked more into the code of ZeroMail, and doing that is not sufficient. The attacker can just send the same AES key as the real sender.\n\nAnd even if ZeroMail is made secure, other people may still assume that they can safely pass untrusted data into 'aesDecrypt'. So the real solution is to create new secure commands, and then remove the old 'aesEncrypt/Decrypt'.\n\n@TheNain38 It is definitely a problem that you were able to do that, and I wasn't aware that was possible. Adding an HMAC will in itself not be sufficient, to fix that. Some more changes will be required. \n", "added": 1460102498, "modified": 1460102615, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207377315", "source_type": "github"}, {"comment_id": 5, "body": "@TheNain38 Assuming that the nonce is placed under the HMAC, and that the recipient checks that this nonce was not previously received, then I believe it would be.\n\nBut this is still not sufficient to prevent your attack. If Eve manages to get her message to Bob before Alice's message arrives, then bob will think that the message from Eve is the real one and will reject the one from Alice.\n", "added": 1460103560, "modified": 1460103762, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207384973", "source_type": "github"}, {"comment_id": 6, "body": "@TheNain38  You can contact me at\nBitmessage: BM-87ZQse4Ta4MLM9EKmfVUFA4jJUms1Fwnxws\nZeroMail: ichigo (I haven't really used this so I'm not sure if it works)\n", "added": 1460106062, "modified": 1460106062, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207400474", "source_type": "github"}, {"comment_id": 7, "body": "Probably, but I'm not completely sure. And why make it so complicated when you can solve it by simply adding an HMAC?\n", "added": 1460110219, "modified": 1460110219, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207425433", "source_type": "github"}, {"comment_id": 8, "body": "Oh I think I misunderstood.\n\nYes, adding the sender and only decrypting with the right keys should solve the problems with copying messages.\n\nYou seem a bit cautios about adding a MAC, and I don't really understand why, as I see no downsides.\n", "added": 1460115867, "modified": 1460115867, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207459289", "source_type": "github"}, {"comment_id": 9, "body": "> Much larger messages\n\nProbably about 60-70 bytes more. Not really that much.\n\n> Around 100x slower than AES\n\nThis is true if you blindly use ECIES, but the solution proposed by TheNain38 can do a lot of precomputations, and should be of comparable performance to the current implementation.\n\n> You would have to try to decrypt every message (currently don't decrypt unknown user's messages)\n\nThat is true.\n\n> If we want to have sent folder, then we have store the messages twice\n\nOr just store the ephemeral key (32 bytes). This would actually be an improvement as you can make messages unreadable for yourself but still readable for the recipient. But note that this is not even required with the proposed solution.\n\nBut I'm not totally convinced the proposed solution is secure, as the same private key is used with ECIES for encryption to multiple recipients. Normally you would use a new key for each message. Do you happen to know what it's called?\n", "added": 1460123564, "modified": 1460123564, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207511747", "source_type": "github"}, {"comment_id": 10, "body": "@basxto I assume you are mainly referring to PastePr.\n\nThe reason I'm proposing to remove it, is that many people don't understand the security implications of using unauthenticated AES. Normally AES is very fast (with or without authentication) so it should not be a bottleneck, in nearly all cases. But if it really is a bottleneck in PastePr or some other application, it think it's fine to keep it but just add a warning.\n\nI don't know yet if your usage of 'aesEncrypt/Decrypt' in PastePr is secure, but I will look into it, and give my judgment.\n", "added": 1460125048, "modified": 1460125048, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207522703", "source_type": "github"}, {"comment_id": 11, "body": "@basxto PastePr is likely vulnerable to the same vulnerability I reported here, and I think it would be easier to attack PastePr than ZeroMail. So I really think you should use authenticated encryption.\n\nBut there is a much more serious problem, that makes the encryption totally broken: PastePr uses the same IV twice. [See here](https://github.com/basxto/PastePr/blob/master/js/paste.coffee#L90-L95). **Edited** I first thought this would make it very easy to decrypt part of the paste, however it's a bit more complicated than that as you were luckily using CBC mode. But using the same iv twice is still very bad.\n\nIf you need any help to solve either of these problems, feel free to contact me.\n", "added": 1460135315, "modified": 1460142039, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412#issuecomment-207582121", "source_type": "github"}]}, "next_topic_id": 3, "topic": [{"topic_id": 1604065249, "title": "Changes to coffeescript files not displayed in browser", "body": "I've followed the instructions here http://127.0.0.1:43110/Blog.ZeroNetwork.bit/?Post:43:ZeroNet+site+development+tutorial+1\n\nWhen changing the ZeroChat.coffee file (after completing all the steps in the first part), the changes are often not displayed in the browser, even after refreshing. I'm not sure if it is never compiled into all.js or the new version is not loaded.\n\n I'm already running with the --debug flag and I have the console open (even though I don't think this should matter). This happens in Iceweasel (Firefox) on Debian.\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1459862071, "modified": 1566313850, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/409", "source_type": "github"}, {"topic_id": 1604065254, "title": "Unauthenticated Encryption", "body": "It appears that the 'aesEncrypt' and 'aesDecrypt' commands do unauthenticated encryption. This is very bad for security. See the code below that clearly demonstrates the problem.\n\nThese commands are used by ZeroMail in an insecure fashion, that could in theory make it possible for an attacker to decrypt messages. But I think this would be very hard to accomplish in practice. Nevertheless, this should definitely be fixed.\n\nThe actual problem is [here](https://github.com/HelloZeroNet/ZeroNet/blob/master/plugins/CryptMessage/CryptMessagePlugin.py#L105), where the unauthenticated ciphertext is decrypted.\n\nThe easiest way to fix this is to add a MAC. I would recommend HMAC-SHA256 as that is already used in ZeroNet. The key for the mac could either be provided separately, or both the aes key and the mac key could be derived from a single key using HKDF or another secure algorithm.\n\n```\nmsg = 'abcdefghijklmno'\nconsole.log(msg)\n@cmd 'aesEncrypt', [msg], (res) =>               # Encrypt message\n    key = res[0]\n    iv = res[1]\n    enc = res[2]\n    console.log(key, iv, enc)\n    iv = 'a'+iv.substr(1)                        # Modify the IV\n    console.log(key, iv, enc)\n    @cmd 'aesDecrypt', [iv, enc, key], (res2) => # This should not decrypt\n        console.log (res2)                       # But it does about 50% of the time\n```\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1460046103, "modified": 1575396852, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/412", "source_type": "github"}]}