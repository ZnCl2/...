{"cert_user_id": "d14na@github", "next_comment_id": 47, "comment": {"1604066703_mirrored_DaniellMesquita_github": [{"comment_id": 1, "body": "Currently using 0.6.3 and I don't have any problems signing vanitygen addresss or .bit domains. Which zite are you having a problem with? Have you tried signing a newly generated zite?", "added": 1535001528, "modified": 1535001528, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1527#issuecomment-415332664", "source_type": "github"}, {"comment_id": 2, "body": "Sounds right. Can you post your content.json and I'll try it from my end? Obviously not with your address and pk, but I can rule out any malformed json.", "added": 1535034347, "modified": 1535034347, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1527#issuecomment-415501466", "source_type": "github"}, {"comment_id": 3, "body": "This shows up on https://0net.io/1N9sU8qh3S4ei9PHE1qQyYPbcckJomvwMd, but I can't get it download anywhere else. I'm not really sure what the problem is. Anyway, this is what I was able to grab from what came thru.\r\n\r\n[1N9sU8qh3S4ei9PHE1qQyYPbcckJomvwMd.tar.gz](https://github.com/HelloZeroNet/ZeroNet/files/2334358/1N9sU8qh3S4ei9PHE1qQyYPbcckJomvwMd.tar.gz)\r\n\r\nEDIT: Btw, what is this? Looks trippy.", "added": 1535584563, "modified": 1535584652, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1527#issuecomment-417167003", "source_type": "github"}, {"comment_id": 4, "body": "ok, here's the complete zite pulled from 0net.io (including `index.html`).\r\n\r\n[1N9sU8qh3S4ei9PHE1qQyYPbcckJomvwMd.tar.gz](https://github.com/HelloZeroNet/ZeroNet/files/2337535/1N9sU8qh3S4ei9PHE1qQyYPbcckJomvwMd.tar.gz)\r\n", "added": 1535645165, "modified": 1535645165, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1527#issuecomment-417432520", "source_type": "github"}], "1604066752_mirrored_DaniellMesquita_github": [{"comment_id": 5, "body": "@DaniellMesquita If you wouldn't mind, could you give me a quick tl;dr breakdown of how **Hubs** work on ZeroNet. What's the difference between ZeroMe and ChameleonHub? It seems as though you **share** the same data? Is that correct? Thanks!", "added": 1535734100, "modified": 1535734100, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1555#issuecomment-417771518", "source_type": "github"}, {"comment_id": 6, "body": "@DaniellMesquita ok, so everyone starts at ZeroMe, then it manages where it pulls the data from. If you're subscribed to multiple hubs, how do you know which one your data is being written to? Can you only choose one at a time? Also, if you could provide a link to any docs, that would be very much appreciated.", "added": 1535742305, "modified": 1535742305, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1555#issuecomment-417800804", "source_type": "github"}, {"comment_id": 7, "body": "> But @imachug did great tutorials about ZeroNet, in The truth about ZeroNet's file.\r\n\r\n@DaniellMesquita I'm stunned!! I can't believe this package exists and I'm only NOW seeing it. Haven't slept since I unpacked it. This would have saved me much, much hard-ache trying to understand the Zeronet internals.\r\n\r\nDoes this exist anywhere on the clearnet or the zeronet? Just sent ivanq a message on ZeroMail. I'd like permission to add this to my new portal http://127.0.0.1:43110/zerocoding.bit. This is a MUST READ for any developer interested in building on the Zeronet.\r\n\r\nIts a holiday weekend in the US, and I plan to spend it integrating all this new knowledge into Zeronet Explorer.", "added": 1535823755, "modified": 1535823755, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1555#issuecomment-417885781", "source_type": "github"}, {"comment_id": 8, "body": "@krixano I think you're talking about http://127.0.0.1:43110/DevCenter.bit. Just discovered this today. Its either my birthday or early Christmas, maybe both lol. Either way, its gonna be a fun holiday weekend.", "added": 1535839786, "modified": 1535839786, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1555#issuecomment-417897878", "source_type": "github"}, {"comment_id": 9, "body": "> Can you resend your message to @GITCenter please?\r\n\r\n@imachug its basically what I already posted here. \r\n\r\njust wanted to know if your docs were accessible somewhere. it basically answers the 100 or so questions that I had pending _(with examples)_ about how this whole thing works. i've read the docs several times, but i haven't been able to read the actual source, since its GPL and my app will be MIT. its been painful getting a technical understanding of the internals. now that you've explained it, I realize the db stuff would have taken FOREVERRRRR to figure out. i may be dreaming, but I now think I can get an MVP out for Zeronet Explorer by next week.\r\n\r\nanyway, I'm very happy to mirror the docs @ http://127.0.0.1:43110/zerocoding.bit/the-truth-about-zeronet or at least link to wherever you have it now.\r\n\r\ni also found http://127.0.0.1:43110/DevCenter.bit today, so i'm going through that now, before I get back to \"happy\" coding.", "added": 1535853938, "modified": 1535853938, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1555#issuecomment-417905449", "source_type": "github"}], "1604066837_mirrored_DaniellMesquita_github": [{"comment_id": 10, "body": "@DaniellMesquita working on a new type of proxy specifically to attract **Clearnet** users. its browser-based and most importantly allows users to **SEED** from an ordinary web browser. my team has already completed the proof-of-concept on this, so it works! *(just imagine if every mobile device that accessed the Zeronet from the Clearnet would become a seeder for EVERY resource they consumed)* however, security is still questionable, and needs much more attention (this will ALL be open source, mostly [here](https://github.com/d14na/supeer) when its done). the objective is to get EVERYONE who is even mildly \"curious\" about the Zeronet to not only have quick, simple, SAFE & FAST **Clearnet** access to it, but also to become a **SEEDER. THIS IS THE DEAL BREAKER!** if you want the convenience of this new proxy, then you **HAVE** to become a contributor. some parts of it currently require CENTRALIZATION (just the way it has to be), but most of it will not be.\r\n\r\nThere are a lot of moving parts to this, and it's just too complicated for me to \"explain\" properly in detail at this time, so I'd rather just post an announcement when there's a demo online. eta, soonish' but I'm happy to answer any questions if you're interested in the idea.", "added": 1536881942, "modified": 1536881942, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1604#issuecomment-421212626", "source_type": "github"}, {"comment_id": 11, "body": "> I don't throught about browser seeding.\r\n\r\nthis is really hard, since browser's DON'T support [TCP](https://en.wikipedia.org/wiki/Transmission_Control_Protocol)/[uTP](https://en.wikipedia.org/wiki/Micro_Transport_Protocol), but we kinda found a way around it, again by using [SUPeer](https://github.com/d14na/supeer).\r\n\r\nif you visit TPB, you'll see a little message at the bottom (really tiny lol), that says, \"By entering TPB you agree to XMR being mined using your CPU.\" This is kinda the same idea, but with SEEDING not MINING.\r\n\r\n> Do you have knowledge in Electron/Cordova?\r\n\r\nyeah, but I'm using [RN](https://facebook.github.io/react-native/) now.\r\n\r\n> An template/boirlerplate for apps with built-in ZeroNet is also attractive.\r\n\r\nDefinitely! need to make it frictionless if the Zeronet is expected to attract Clearnet devs.", "added": 1536882810, "modified": 1536882810, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/1604#issuecomment-421214951", "source_type": "github"}], "1604067382_mirrored_6543_github": [{"comment_id": 12, "body": "@imachug when i search the chrome store for __\"Zeronet\"__, all that comes up is [Free the Wiki](https://chrome.google.com/webstore/detail/free-the-wiki/jkhhfiobfgkjkhaamiipbegdpeaoffpm). i'm a bit surprised that no one has published a browser extension for zeronet. may i ask why not?\r\n\r\ndoes the __SOURCE CODE__ for a Zeronet extension (or similar -- thinking TOR) already exist? if all you need is a developer account (iirc cost about $25 bucks) then I wouldn't have a problem publishing the extension under our __d14nauth[at]gmail__ account. don't have a __d14nauth[at]msn__ dev account, but that really shouldn't be a problem", "added": 1572039636, "modified": 1572039636, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2100#issuecomment-546552360", "source_type": "github"}, {"comment_id": 13, "body": "> https://github.com/goldenratio/zeronet-protocol-crx\r\n> I actually think google themselves took it down...\r\n\r\nme and google don't get a long for this very reason. long story short, they're the ones who drove me to Bitcoin in 2012 (still kinda bitter) and I haven't looked back.\r\n\r\n> In my opinion, these two extensions should be merged with each other to provide the best things of both. Then that extension should be published as an official ZeroNet browser extension.\r\n\r\nsounds good to me!\r\n\r\n> For mobile, there could be a dedicated app for ZeroNet.\r\n\r\nstill <s>working on</s> struggling with [Zeronet Explorer](http://127.0.0.1:43110/zeronetexplorer.bit)\r\n\r\n---\r\n\r\ni probably won't be able to contribute much to the code, (1) i've never done an extension, (2) i have a FULL plate already; but if you send me the .zip, publishing doesn't appear to be an issue (there's a short review process), my dev account is in good shape and any docs needed are in order", "added": 1572114238, "modified": 1572114238, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2100#issuecomment-546640789", "source_type": "github"}], "1604067485_mirrored_filips123_github": [{"comment_id": 14, "body": "> This is a temporary workaround until ENS Manager is supported.\r\n\r\noh wow! @filips123 ur the man. will try this over the weekend", "added": 1572113329, "modified": 1572113329, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2164#issuecomment-546639585", "source_type": "github"}], "1604067555_mirrored_filips123_github": [{"comment_id": 15, "body": "@filips123 i've been thinking about how to bridge ENS to Zeronet for a while now. With the new ENS system and 3,4,5-letter domains being auctioned now, I think the system will gain traction within the crypto community. What's the status of #2164? Is this working? \r\n\r\nIf so, then imo the next step is to bridge back to the clearnet for users NOT running the client. Cloudflare offers this for IPFS websites. Currently in the process of moving almost all of our front-end code over to IPFS. Honestly, it has its issues (mainly caching seems sketchy, but perhaps more seeding is needed), but overall its been working flawlessly for months. \r\n\r\nYou can read about it here, if you're unfamiliar:\r\nhttps://www.cloudflare.com/distributed-web-gateway/\r\n\r\nThe idea is, our proxy at 0net.io would serve (as it does now) the files to Clearnet users, however, they would be able to use `https://example.eth` instead of `https://0net.io/example.bit`. Obviously, this would NOT be limited to just `.eth`, I'm thinking `.xyz` too (they have a very progressive admin team).\r\n\r\nWhile still making improvements to the proxy's underlying infrastructure, its realatively stable at this point https://status.0net.io. Let me know if you'd be interested in adding that support to your plugin. And, well, how you think we'd go about implementing that into the current proxy's code.\r\n\r\nRegardless, good luck with this effort. Don't hesitate to reach for help testing, debugging, whatever. cheers!", "added": 1571093302, "modified": 1571093302, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-541999501", "source_type": "github"}, {"comment_id": 16, "body": "> Lastly forget 0net.io because that is a big trash. \r\n\r\ncould you please explain? constructive criticism/feedback will help improve its usability. Or is this about NOT encouraging the use of proxies in general? imo, proxies have always help with on-boarding new (curious) users, same applies to TOR proxies.\r\n\r\n> If you want to proxy clearnet to ZeroNet you will need your own servers for front and back-end!!!!!\r\n\r\nI don't know what you mean by **front and back-end**. Assuming 0net.io if the \"front-end\", then what \"back-end\" server are you saying is required?", "added": 1571170647, "modified": 1571170647, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-542443620", "source_type": "github"}, {"comment_id": 17, "body": "> It should be working. Also please test it for any issues.\r\n\r\nOkay great, I will. I think it would also help me better understand how the plugins work. I have 2 that I'm working/experimenting on, based on @rllola tutorial, but now they're broken on Py3.\r\n\r\n> Main problem is that there is no easy way to create actual ENS domains that link to ZeroNet sites.\r\n\r\nTo be clear, are you talking about \"registering\" the ENS domains or \"linking\" them to zites? I've done many registrations, and I would believe \"registration\" to way beyond the scope of your plugin.\r\n\r\n> Until then you have to manually create ENS domain in programmatic way using Web3 library.\r\n\r\nWhy wouldn't you just use the dapp at https://app.ens.domains? I'm not clear what you're trying to accomplish.\r\n\r\n> Until then, you have to install Web3.py from my temporary branch.\r\n\r\nthat's fine.\r\n\r\n> This is also already known idea \ud83d\ude01 See existing issues which are related to domains and proxies.\r\n\r\nok\r\n\r\n> This would require my DNS plugin as well as few other ZeroNet changes that are not made yet (to allow accessing ZeroNet via custom domain).\r\n\r\nyeah, this is where I see the challenge; but I'll start by working with your plugin and see if things don't make better sense by this point.\r\n\r\n> One other feature is to also point CNAME/A/AAAA record to local ZeroNet instance so users will be able to access it using their own ZeroNet instance.\r\n\r\nthat sounds good", "added": 1571171635, "modified": 1571171635, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-542447210", "source_type": "github"}, {"comment_id": 18, "body": "> I'm talking about linking domains to ZeroNet. Plugin uses content hash record to store hire address, but currently there is no easy way to create it for ZeroNet.\r\n\r\nok, i just wasn't clear\r\n\r\n> I already created PR ensdomains/ui#23\r\n\r\nif i understand this PR correctly: \r\n1. your updating `content-hash` to v2.4.4 (i'm sure for a very good reason).\r\n2. it seems you're adding `zeronet://` as a \"supportedCodec\". \r\n\r\nI have no issue with that, but why not ALSO support for `zero://`? Are you only allowed one? it seemed to me that the community was in greater support of the latter.", "added": 1571319427, "modified": 1571319427, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-543259065", "source_type": "github"}, {"comment_id": 19, "body": "> zeronet:// is used as an identifier to let know ENS system that this is ZeroNet domain.\r\n\r\noh, so this is for \"internal\" / \"system\" -use\"?\r\n\r\n> Yes, deciding which way should be used for accessing ZeroNet is another long story..\r\n\r\nyeah, that's what I thought it was for, but i got it now! think i'm mostly caught up, just need to make time to go through the code now.", "added": 1571334299, "modified": 1571334299, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-543354268", "source_type": "github"}, {"comment_id": 20, "body": "@filips123 do you have separate repo for your plugin? meaning, can it be installed with the plugin manager? what i've seen appears \"built-in\" to core.", "added": 1571849006, "modified": 1571849006, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-545605424", "source_type": "github"}, {"comment_id": 21, "body": "> download my ZeroNet repository and copy DNS plugin to your installation\r\n\r\n`git clone https://github.com/filips123/ZeroNet.git ZeroNet-filips123`, but I don't see the plugin. what's the path? or do I need to change branches?\r\n\r\n__EDIT: ok, i changed the branch to `DNS`__", "added": 1571849852, "modified": 1571849964, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-545610607", "source_type": "github"}, {"comment_id": 22, "body": "@filips123 just so I'm clear, what's the reason for having this \"built-in\"? I see 2 requirements: `dnspython` (which is your patched) and `dnslink`. Is there a way to \"auto-install\" these requirements with the the Plugin Manager? if not, how problematic is the process for the user? would it be possible to run the adt'l dependencies in a container? (eg venv?)\r\n\r\ni'm sure I'll have more questions, but I'll see if I can get it working and hopefully offer some useful feedback first", "added": 1571850586, "modified": 1571850586, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-545615008", "source_type": "github"}, {"comment_id": 23, "body": "> Domain plugin that needs to be installed separately is kinda useless.\r\n\r\nahh, of course, i wasn't thinking. regardless, a separate repo makes it easier for others to test, and that's probably the best path to core adoption.\r\n\r\n> What do you mean with this?\r\n\r\nit doesn't matter, I'm just working with a lot with docker now, so everything is a container to me", "added": 1571852666, "modified": 1571852666, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-545628041", "source_type": "github"}, {"comment_id": 24, "body": "> Still, it is meant to be included in core as soon as possible. \r\n\r\ni'd like to work a-bit on the code, without cloning the core repo. i can use a private repo, i just thought a repo from you on github would be better (and official, until the core merge)\r\n\r\n_i don't really know how things work around here, but my advice is to start with a separate repo, for testing amongst the community, once there's enough support, then I'm sure it will naturally find its way into the core lib_\r\n\r\n> You can use provided ZeroNet's `Dockerfile`. I updated it to also install dependencies from plugins.\r\n\r\nnice. i've been using virtualbox for the longest, but now everything is docker, its sooo much lighter on the host. actually what i was looking for was a docker-like solution for python, which I just got working (__venv__); that way i can install your fork without polluting the os.\r\n\r\n> There are already a few (my) domains that use DNS plugin which you can use for testing:\r\n> \r\n> * `py.zeroframe.oss`\r\n> * `js.zeroframe.oss`\r\n\r\n__So the plugin is working, here's the output:__\r\n\r\n`py.zeroframe.oss` resolves to `http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/?178UMrEt8vxf5Z6LPxkrcWFPXPfD9XNNH7`\r\n\r\n```\r\n[05:22:46] DNSPlugin resolver: py.zeroframe.oss -> 178UMrEt8vxf5Z6LPxkrcWFPXPfD9XNNH7\r\n[05:22:48] Site:1GitLi..MQ4t zeroframepy.git/packed-refs fileGet error: FileNotFoundError: [Errno 2] No such file or directory: './data/178UMrEt8vxf5Z6LPxkrcWFPXPfD9XNNH7/zeroframepy.git/packed-refs' in UiWebsocket.py line 687 > FilePack/FilePackPlugin.py line 195 > SiteStorage.py line 223\r\n```\r\n\r\n---\r\n\r\n`js.zeroframe.oss` resolves to `http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/?1HJS6quLaqNLYxHVM9nL2rfmAsRvumqC1H`\r\n\r\n```\r\n[05:25:06] DNSPlugin resolver: js.zeroframe.oss -> 1HJS6quLaqNLYxHVM9nL2rfmAsRvumqC1H\r\n[05:25:09] Site:1GitLi..MQ4t zeroframejs.git/packed-refs fileGet error: FileNotFoundError: [Errno 2] No such file or directory: './data/1HJS6quLaqNLYxHVM9nL2rfmAsRvumqC1H/zeroframejs.git/packed-refs' in UiWebsocket.py line 687 > FilePack/FilePackPlugin.py line 195 > SiteStorage.py line 223\r\n```\r\n\r\n__what's next?__", "added": 1571899190, "modified": 1571899190, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-545836778", "source_type": "github"}, {"comment_id": 25, "body": "> I can provide you ZIP file with the plugin.\r\n\r\nits already working! i guess i was just looking for more zites to test out.\r\n\r\n---\r\n\r\n__so 2 things:__\r\n\r\n1. how do I register names like yours? where's the registrar? if its NOT on zeronet, then how do we get it on?\r\n\r\n2. my endgame is `.eth` support (as mentioned #2049), so I'm highly motivated to contribute towards any development leading to that end. if you could point me in the __\"direction\"__ of what it would take to start integrating `.eth`, that would be much appreciated.", "added": 1571970852, "modified": 1571970852, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-546207773", "source_type": "github"}, {"comment_id": 26, "body": "> That `.oss` domains from my example are OpenNIC and can be registered [here](https://www.opennic.org/).\r\n\r\nok. don't know much about opennic or really dns in general, so i've got some reading to do.\r\n\r\nand what about registering `.zeronet` with opennic? has anyone done that? is there reason to do that? also, i see `.o` is registered, what about registering `.0`? is that legal as per dns spec? does it matter, if its on opennic? regardless, the TLD registration states:\r\n\r\n> You MUST have operated a Tier 2 DNS server continuously for at least 3 months\r\n\r\ni feel like i'd want to do this asap, just so that in 3 mos it could be available as an option. what do you think?\r\n\r\n---\r\n\r\n> with TXT record `dnslink=/zeronet/YOUR-ZERONET-ADDRESS`\r\n\r\nis this what YOUR plugin handles? or is this done at opennic?\r\n\r\n> create content hash record with value `zeronet://YOUR-ADDRESS`\r\n\r\nhave a ton of names, but have never actually done this. something to try out this weekend\r\n\r\n> Note that this won't work until [ensdomains/ui#23](https://github.com/ensdomains/ui/pull/23) is merged.\r\n\r\njust from examining this [commit](https://github.com/ensdomains/ui/pull/23/commits/9d79a20af509fcda2c61e83f703daa27d26db3d0), i'm wondering why line # 52 already has `zeronet` in the regex, was zeronet previously supported in some way?\r\n\r\nand then this [commit](https://github.com/ensdomains/ui/pull/23/commits/3fd9a1d6c60692f0ad60ad2e70c24d5df136ba4c) is adding 3 new dependencies. what are they for? imo, the less changes, the faster the merge, just something to consider\r\n\r\n> I also created plugin for ENS support in #2164.\r\n\r\nwhy can't you import your ens support into THIS plugin? do you think its better to have both? i believe you sent me a .zip of ENS (can't remember how i got it), so I'll start reviewing that code shortly. i need to spend a bit more time with all this dns code (to get comfortable), then i'll be ready to hit the slack / gitter / whatever channels to help get that PR merged asap.\r\n\r\nthank you for making all of this. let me know what help i can offer.", "added": 1572026247, "modified": 1572026247, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-546510964", "source_type": "github"}, {"comment_id": 27, "body": "> But the actual domain resolving is based on a first subdomain (`example.bit.zeronet` would resolve `example.bit` using Namecoin).\r\n\r\ngot it!\r\n\r\n> The plugin then checks if the domain has that TXT record and resolves it to address.\r\n\r\ngot it!\r\n\r\n> Unfortunately, you can't use ENS Manager website until [ensdomains/ui#23](https://github.com/ensdomains/ui/pull/23) is merged. You can try to build that website yourself (from a branch of that PR) or use Web3.py (also from my temporary branch) to programmatically set content hash record.\r\n\r\nso you're saying this CAN be achieved WITHOUT necessarily relying on the merger? i know that is of course the goal, but if there is a way to test this now with actual ENS domains, i'd try to make that happen asap.\r\n\r\nnot afraid of docs, but if you could provide an example of the __CORRECT__ CLI CMD _\"to programmatically set content hash record\"_ that would likely speed up my trial-and-error process.\r\n\r\n> [This](https://github.com/ensdomains/ui/pull/23/files) is complete diff.\r\n\r\noh i see, i was on the wrong tab. that looks really clean, no issues there\r\n\r\n> I think that each domain system should have a separate plugin.\r\n\r\nok\r\n\r\n> This would make them more transparent, easier for development/debugging\r\n\r\nabsolutely!\r\n\r\n> allow users to manage each one separately\r\n\r\nimo, that's NOT a benefit to the user\r\n\r\n> But you have source code [here on GitHub](https://github.com/filips123/ZeroNet/tree/ethereum-name-service/plugins/ENS).\r\n\r\ngreat! learning a great deal about Zeronet internals just from these plugins. \r\n\r\nthanks again!", "added": 1572042842, "modified": 1572042842, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-546556659", "source_type": "github"}, {"comment_id": 28, "body": "> You can require that dependencies be put into the plugins manifest or content.json or whatever the file is - the plugin settings file. Then when a person goes to install the plugin, the dependencies are listed and the user is prompted to install them from within the client, and the client installs them.\r\n\r\ndoes this currently exist? specifically...\r\n\r\n> the user is prompted to install them from within the client\r\n\r\nhow is the (dependencies) installation triggered by the client? and if it cannot be, i believe that is what @filips123 is alluding to being added", "added": 1572400508, "modified": 1572400508, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2214#issuecomment-547738612", "source_type": "github"}], "1604067538_mirrored_d14na_github": [{"comment_id": 29, "body": "> That's not to allow sites to deanonymize you if you don't want that.\r\n\r\nok\r\n\r\n> auth_address is not the same on every zite.\r\n\r\nyes. what I meant was, while using a cert id\r\n\r\n> How is SQLite even connected to what you're talking about?\r\n\r\njust in terms of how the code retrieves user data\r\n\r\n> Please explain what's legacy\r\n\r\ni consider username/password auth to be legacy (as in broken, and can't be fixed). p2p web SHOULD be using public key crypto\r\n\r\n> There's a (fairly obvious) way to get current user public key which you can then share or save or do whatever you want. There's also API to sign and verify data. Can't you use that?\r\n\r\nyes, this is my point. this works fine, however, it doesn't work cross-zite (for the reason you stated in your first response).\r\n\r\n## My Very Specific Use-Case\r\n\r\n(I'll skip the details, but this is for supporting a new [Certificate Id](https://0net.io/nametag.bit) service)\r\n\r\n1. User registers for a new id (zeroguest@nametag.bit).\r\n2. Their public key (eg. `A//iXrqNyBfGY6j8uwV7vaiZ+GRmLdzmA6AjKq+VAzbf`) will be stored in a PUBLIC registry; similar to the [MIT Key Server](http://pgp.mit.edu/).\r\n3. Existing client/server app will migrate their FRONT-END to Zeronet, leaving the SERVER as-is.\r\n4. The new Zeronet frontend SHOULD support PUBLIC KEY authentication, NOT username/password.\r\n\r\n## Why Do This?\r\n\r\nTo encourage more existing applications to move and/or mirror to the Zeronet. There are numerous advantages (too many to mention here); but the hurdles are too much for most to even consider starting. __THE ZERONET NEEDS CONTENT. THIS WILL HELP!__\r\n\r\n---\r\n\r\n@imachug i have to stress how much I appreciate your detailed feedback. this has been bothering me for a while now, and I've been trying to explore many options without resolve. in the end, i'd like to move on with a solution that best suits the needs of the community, so I'd definitely appreciate your continued feedback.\r\n\r\ncheers!\r\nd14na", "added": 1570456489, "modified": 1570456489, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2217#issuecomment-539106178", "source_type": "github"}, {"comment_id": 30, "body": "> Next, what you want is already possible. Both KxoId and ZeroId saves user public addresses in a public database.\r\n\r\n@krixano thanks for all your feedback and suggestions. however,  I'm specifically looking for the public **keys**, not **addresses**, so that a challenge can be issued that requires the user's private key to solve. now, it **IS** possible to send a challenge that validates against the public address, however, I don't see any way for the user to do validate it from the api; it requires using the cli, and that's what I'm trying to avoid.\r\n\r\n---\r\n\r\nactually have a solution that works (basically writing the user's public key to zite storage and reading it from the server), but its really slow (could take up to a min). it does support the current functionality without the use of plugins, so i'll use it for now, hopefully with some optimization soon to come, and perhaps _eventually_ expose it as an api for other devs looking to do the same thing.", "added": 1570905219, "modified": 1570905219, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2217#issuecomment-541363281", "source_type": "github"}, {"comment_id": 31, "body": "> As far as I see what you're proposing, the only thing ZeroNet doesn't support is global public keys.\r\n\r\n@imachug yes, that would be nice. its one of the main purposes for the Nametag cert provider, the other being to provide all users with an ethereum address for doing \"useful\" crypto (beyond just currency -- ie smart contracts).\r\n\r\nso, your solution describes the **initial** user registration, but that's not really the problem (at least not yet). its how to \"easily/conveniently\" authorize a user that's visiting your zite. what i'm suggesting doesn't really fit the anonymous/pseudonymous user group, but there are lots of users who want to use zeronet and don't give a rats ass about anonymity only convenience, and this solution is for them. if anyone has used Metamask, you know that you still have to approve any dapp that wants to know who you are, but its super convenient, no usernames, no passwords. **I see this solution as a bridge from Clearnet services to migrate to Zeronet, but AT THEIR OWN PACE.**", "added": 1570905958, "modified": 1570905958, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2217#issuecomment-541363988", "source_type": "github"}], "1604067630_mirrored_imachug_github": [{"comment_id": 32, "body": "> But the first step would be implement and use bech32 for the new sites.\r\n\r\nwhat's wrong with this approach? at first glance, this PR looks pretty hack'ish\r\n\r\n> And it doesn't help the problem at all because we can't just stop supporting old sites.\r\n\r\nwhy would you have to stop supporting old sites?\r\n\r\n---\r\n\r\nanyway, in no way an expert in bech32, but i do understand WHY is came to be, seems logical to support (and/or transition to) this address format. just my 2c", "added": 1572113207, "modified": 1572113207, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2231#issuecomment-546639468", "source_type": "github"}, {"comment_id": 33, "body": "> I got the extension working on Chrome and I think all features I've thought of are ready. Could you please upload webext.zip to Chrome Web Store?\r\n\r\n@imachug google web store is blocking new account confirmation until $5 is paid; for \"fraud\" reasons. they're \"refunding\" my cc txs (don't know why), and they have NO CONTACT (other than no-reply@...); so i've reached out to the android team for help, i'll keep you posted if/when i'm able to submit to the web store.\r\n\r\n__edit: if there's an EDGE solution ready; I'm happy to try my luck with MS__", "added": 1572373920, "modified": 1572374016, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/2231#issuecomment-547638798", "source_type": "github"}], "1604067567_mirrored_d14na_github": [{"comment_id": 34, "body": "> There is a fileNeed API command\r\n\r\nok great! i'll try that out, it might be slow for the user after request, but as long as it works, i'll take that\r\n\r\n> But I think it's better solution if the plugin store site just links to the plugin developer site\r\n\r\nwill absolutely have links to: homepage, github, chats, etc. but also, there will be code samples, docs, faqs, etc, that will be __CONSISTENT__ across all plugins. this adds convenience for the dev, and that's usually a very good thing\r\n\r\n> Leaked privatekey can result in a diseaster if the plugin store becomes popular.\r\n\r\nagree 100%, but not just for the store, but for any popular plugin too. as noted during the install, `Warning! Plugins has the same permissions as the ZeroNet client.`\r\n\r\nalthough NOT in use yet, the plan is to move to [HSMs](https://en.wikipedia.org/wiki/Hardware_security_module); you know, bank-level security _(will have to give up the vanities though)_\r\n\r\n> A single plugin per site architecture will most likely work better.\r\n\r\nwhy?\r\n\r\n---\r\n\r\nimo, the __# 1__ reason for having a single repo is __TRUST & SECURITY__, ideally from a peer-reviewed ratings system, that's the goal. thanks so much for the help and great feedback", "added": 1571969945, "modified": 1571969945, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-546204655", "source_type": "github"}, {"comment_id": 35, "body": "> For plugin store it is better to use merged sites. Main site should be for UI\r\n\r\ni've just started working with \"merged\" sites using the PeerMessage plugin, but otherwise not much experience.\r\n\r\n> but each plugin should be separated merged site (like repositories in Git Center).\r\n\r\nhow does Git Center (in the context of merged sites) work anyway? anyone care to ELI5?\r\n\r\n> the optional ability for plugins to include a signature\r\n\r\nanother thought i had would be to verify the hash of the entire plugin folder against, say:\r\n1. a github commits metadata (idk)\r\n2. or ipfs hash (that would support remote download)\r\n\r\n---\r\n\r\nAs mentioned before, __SECURITY & TRUST__ are the main objectives in creating this store. I wouldn't even try PeerMessage until I read every line of code. Plugins have __FULL ACCESS__ to the UiServer, which is super convenient, but pretty INSANE! Is this NOT the case?\r\n\r\nAt the very least, users should be clearly told what the _CURRENT VERSION_ of the plugin has the capability to do. Best reference I can use would be something similar to the Android Permissions system. That would obviously take time to implement in the core codebase, but it could much more easily be presented at the time of installation. __BUT IT HAS TO BE TRUSTED.__", "added": 1572040533, "modified": 1572040533, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-546553650", "source_type": "github"}, {"comment_id": 36, "body": "> but hopefully ivanq's backgroundprocessing stuff can work?\r\n\r\nare you talking about this? https://github.com/HelloZeroNet/Plugin-BackgroundProcessing\r\n\r\ni kinda get it, but where is it used, so I can see a practical example of its purpose, OR if u don't mind giving me a quick explanation of what its for\r\n\r\n> trusting the plugin itself, and ensuring that the owner of the zite uploading to doesn't change the plugin - for which a signature is enough\r\n\r\nyes, you mentioned the signature before, but how does that solve the problem of code changing UNKNOWINGLY? all you verify is that it came from a \"trusted\" source. i'd prefer to know that the code I want is immutable, that's the only reason i mention IPFS. as Zeronet updates site automatically be default, you just NEVER KNOW if that's the plugin code you want, unless you CLONE and read the source. am I wrong?\r\n\r\n> Python plugin sandboxing and permission system - hard\r\n\r\nyes, quite _challenging_ indeed, but this is the direction I would support\r\n\r\n> Signatures added to plugins - imo, this is needed\r\n\r\nagreed, its needed, but DOES NOT solve code immutability problem (again, this is ONLY a problem, because sites AUTO-UPDATE)\r\n\r\n> Software that will analyze plugins to make sure they aren't doing anything malicious\r\n\r\nYES! i don't know how to program that (STATIC ANALYSIS), but I can envision the dev community reviewing each commit and maybe SIGN IT! when you go to install, you can review the signatures on a SPECIFIC VERSION of the plugin.\r\n\r\ni gotta run, but the idea is to then update the Plugin Manager to verify each file against a REGISTERED hash list of the files. i'd love to discuss this more, and thanks so much for the feedback", "added": 1572115223, "modified": 1572115223, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-546641841", "source_type": "github"}, {"comment_id": 37, "body": "> the plugin signature is just the plugins hash encrypted by a key, to verify the signature, decrypt it with the public key then compare hashes\r\n\r\ni misunderstood your purpose for the signature, as i believed it was to validate the IDENTITY of the developer, not to authenticate the code itself. yes! exactly how it does for the `content.json`, that's what i'm looking to standardize for easy discover for the user.\r\n\r\n> You have to manually update plugins\r\n\r\nyes you do. but my example is this: i've read the source and installed a plugin (eg PeerMessage) and its working great, no issues. now i tell a friend to install it so that we can chat. I PERSONALLY feel uncomfortable doing that with the current PluginManager, as there's no way to verify that the version I TRUST will be the same version my friend will install (unless i clone the site). so the signature solution, as I now understand your purpose WOULD solve that, now its just to implement it.\r\n\r\nthe last point i made was it would be nice to have those same CODE signatures, also \"signed\" by respected community members to reinforce the TRUST. i mentioned Android before, but a much better reference would be F-DROID\r\n\r\n![F-Droid Screenshot](https://i.imgur.com/BX5GmmE.png)\r\n\r\n---\r\n\r\n> Otherwise, what your talking about requires big changes to optional files to make them immutable-only\r\n\r\nno no no, nothing like that\r\n\r\n> KxoId Trusted Peers use it to sign user registration requests in the background without having to have the browser open. This is the only know use for it atm, but I'm working on another thing. BackgroundProcessing is very useful when paired with PeerMessage.\r\n\r\ngot it!", "added": 1572131768, "modified": 1572131768, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-546655431", "source_type": "github"}, {"comment_id": 38, "body": "> We can reinforce trust by just creating a zite where people can upvote a plugin (or separate plugin versions). We can even include a hash of the plugin to ensure what version of the plugin they upvoted if we need. I would also list out the _names/ids_ of the people who upvoted a plugin (and perhaps be able to filter out the people you trust) so that we can see whether the people who upvoted it are themselves trustworthy.\r\n\r\numm, yeah, that's everything that i said. are you agreeing?", "added": 1572375019, "modified": 1572375019, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-547645438", "source_type": "github"}, {"comment_id": 39, "body": "> My idea relies on the plugin store and in no way involves ZeroNet core\r\n\r\nagreed, no changes to core\r\n\r\n> The other idea was to require multiple people to sign one signature for a plugin and that this one siagnature signed by multiple people is stored in the plugin\r\n\r\nnot stored IN THE PLUGIN (not sure how that would work), but in METADATA for the plugin's store listing. and NOT required, but the more \"quality\" signatures the higher a plugin's release would be \"rated\". \r\n\r\nin the end, i believe we can agree that trust and security must be prioritized. however the \"signatures\" work will become clearer i'm sure. no worries, i have enough feedback to at least implement what i have in mind, then i'm sure there will be another round of feedback (then rinse and repeat till its ALL DONE!)", "added": 1572399746, "modified": 1572399746, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240#issuecomment-547736588", "source_type": "github"}], "1604067572_mirrored_mx5kevin_github": [{"comment_id": 40, "body": "> the opened tab/window will act the same as the html opened in a sandboxed iframe.\r\n\r\n`wrapperOpenWindow` works just fine for me. however, it would be nice to re-use the same code on clearnet, by supporting `window.open(...)` when NOT sandboxed.\r\n\r\n__Question:__ is there a STANDARD method for detecting Zeronet (or sandbox in general)? i can think of more than a few ways, but I'd rather use something standardized by the community, if possible.\r\n\r\nthen, something like this could work: `<a href=\"javascript:open('...')\" />` could work cross-platform. __NOTE:__ this is NOT `window.open`, but a custom/local `open` function that would have the detection code.", "added": 1572039048, "modified": 1572039048, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2241#issuecomment-546551421", "source_type": "github"}, {"comment_id": 41, "body": "> I'd just build two variants of the site (that's gonna be easy if you're using bundlers/builders).\r\n\r\neasy for who? lol i love what bundlers do, but I don't have a clue how to configure those files.\r\n\r\n`wrapper_nonce` works for me, for now, the \"other\" method I think might work is to try to call \"something\" from UiWebsocket, if it fails, as it always does in the clearnet version, then use clearnet code. what do you think?", "added": 1572114493, "modified": 1572114493, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2241#issuecomment-546641041", "source_type": "github"}], "1604067617_mirrored_krixano_github": [{"comment_id": 42, "body": "> I'm not a fan of copyleft licenses (I prefer MIT/ISC/BSD licenses), but I believe that it's a right thing to leave the final decision on the future of this project to @HelloZeroNet .\r\n\r\n\r\n\r\n> I was just talking with @filips123 about him thinking that parts of ZeroNet could be released as MIT. I agree with this if parts of ZeroNet could be libraries, in which case I mentioned to him that we could separate these out to other repos\r\n\r\n\r\n\r\n> I would support change the license to MIT, GPLv3 or any other similar license to make it more clear.\r\n\r\ni see ya'll got together and decided to re-license this whole thing? where have i been?\r\n\r\n__+1 for MIT (if at all possible)__", "added": 1572818261, "modified": 1572818261, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2269#issuecomment-549198459", "source_type": "github"}, {"comment_id": 43, "body": "@krixano __voted!__ i like what i see ya'll doing here lol\r\n\r\n__question:__ what sort of \"libraries\" would fall under LAX? i'm ready to push some code after the dust settles", "added": 1572819087, "modified": 1572819087, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2269#issuecomment-549199738", "source_type": "github"}], "1604067608_mirrored_ZeroNetTickBot_github": [{"comment_id": 44, "body": "GPLv3+ and Lax", "added": 1572818588, "modified": 1572818588, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-549199013", "source_type": "github"}, {"comment_id": 45, "body": "> 4\\. ZeroNet is then modularized into multiple libraries/packages.\r\n\r\n+1\r\n\r\n> 5\\. In the worst case, we find alternative libraries which are also compatible with MIT and GPLv3.\r\n\r\n+1\r\n\r\n> This process could take quite a long time. However, it would be good for the future development of ZeroNet as a project and also ZeroNet as a solution for third-party projects.\r\n\r\n+1\r\n\r\n__all great things!__ ", "added": 1572981234, "modified": 1572981234, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2273#issuecomment-550046667", "source_type": "github"}], "1604067730_mirrored_slrslr_github": [{"comment_id": 46, "body": "> Right now if you want to seed many sites I recommend to run multiple clients on same machine.\r\n\r\nyes, this is how we stopped the service from crashing continuously; using an nginx proxy to run multiple docker instances has made significant difference, as you can see from https://status.0net.io.\r\n\r\nnext year will be moving to at least 3 individual machines, in geo spaced locations, for redundancy", "added": 1574104401, "modified": 1574104401, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2312#issuecomment-555233610", "source_type": "github"}]}, "next_topic_id": 4, "topic": [{"topic_id": 1604067102, "title": "Add support for tilde `~` in filenames.", "body": "(source: https://webpack.js.org/guides/code-splitting)\r\n\r\nIt appears that webpack (bundled w/ the VueJS CLI) will concatenate `chunk` names using the `~` to create one long \"bundled\" filename. This creates a problem when executing `isValidRelativePath` which DOES NOT allow `~`.\r\n\r\n__An example error when signing:__\r\n`Site:1... - [ERROR] Invalid filename: js/about~privacy~search.3c7ce85b.js`\r\n\r\nA fix is to use the same name for each file/chunk, but then that breaks the optimizations of code splitting. Is there any reason NOT to permit tilde `~` as a valid filename character? _(NOTE: this may only be an issue if using vue-router)_", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1548326790, "modified": 1548518895, "source_link": "https://github.com/HelloZeroNet/ZeroNet/pull/1877", "source_type": "github"}, {"topic_id": 1604067538, "title": "Static Public Key Across Zites", "body": "**Is your feature request related to a problem? Please describe.**\r\nWhat is the purpose of making a user's `public key` UNIQUE on every zite, but the `auth_address` _(aka Bitcoin address)_ the SAME on every zite?\r\n\r\n**Describe the solution you'd like**\r\nA STATIC `public key` (across all zites) that is derived from the user's `master key`, same as their `auth_address` _(aka Bitcoin address)_.\r\n\r\n**Describe alternatives you've considered**\r\n1. Could utilize the deprecated `auth_key`. (btw, why was this deprecated?)\r\n2. Create a NEW plugin to derive a STATIC `public key` from the `master key`.\r\n\r\n**Additional context**\r\n\r\n## So Why Is This A Problem?\r\n\r\nDynamic zites work very well today, by allowing users to write data to their own folder/namespace within the zite's sqlite data storage.\r\n\r\nBut what if you're NOT using Zeronet's sqlite data storage. It makes using \"legacy\" client/server features within zites cumbersome; since you have to rely on \"legacy\" authorization techniques for the user. Rather, a Zeronet-enhanced APP SERVER \"should\" be able to retrieve a user's `public key` from a registry (based on their cert id) and then send a challenge that can ONLY be solved by the `private key` holder. This would be AUTOMATIC, upon arriving at a ANY zite, making user authorization __BUILT-IN__ for ALL developers.\r\n\r\neg. It should appeal to developers wanting to bridge an existing Clearnet application over to Zeronet. In which case, it would be ideal to utilize current backend systems while making the migration to a fully decentralized solution.", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1570371958, "modified": 1570982007, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2217", "source_type": "github"}, {"topic_id": 1604067567, "title": "Plugin Source Files, Optional or Remote/Dynamic?", "body": "**Is your feature request related to a problem? Please describe.**\r\nCurrently, plugin source code must be \"included\" files for the PluginManager to properly handle the copy to `/data/__plugins__`.\r\n\r\n**Describe the solution you'd like**\r\nFor the purposes of creating a \"Plugin Store\", this will quickly become problamatic, as the number of listed plugins increases. (ie. the total site size will quickly exceed 10MB)\r\n\r\n**Describe alternatives you've considered**\r\nAs I understand it, \"optional\" files must be \"clicked\" on to trigger the local download. Would it be possible for the user to \"click\" a FOLDER (eg. /plugins/PeerMessage) that would trigger a download of ALL files contained within?\r\n\r\nAnother option would be to pull the plugin's source dynamically (at the time of installation) from a remote source; the most obvious to me would be IPFS (as its immutable), but perhaps BigFiles would work here too (not familiar).\r\n\r\n**Additional context**\r\nThe goal is to keep the collection of plugins (held by a single site) under 10MB OR dynamically available for installation by the user. Any and all suggestions are welcome.\r\n\r\nCheers!\r\nd14na\r\n", "parent_topic_uri": "1604062980_users_1Cy3ntkN2GN9MH6EaW6eHpi4YoRS2nK5Di", "added": 1571899934, "modified": 1572399746, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2240", "source_type": "github"}]}