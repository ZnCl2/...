{"cert_user_id": "KilowattJunkie@github", "next_comment_id": 5, "comment": {"1604067374_mirrored_geekless_github": [{"comment_id": 1, "body": "I know I'm not a contributor so I hope I'm not overstepping my bounds, but I stumbled on this thread while looking at ZeroNet and I wanted to throw my two cents in. \r\n\r\nI really think the additional TLD isn't the best solution, and is actually exacerbating the problem you're trying to solve (the central dependency on Namecoin). It seems that this problem actually originates from the current ZeroNet architecture that is mixing domain resolution and domain access concerns, rather than letting the resolution and protocol stacks do their jobs independently. By adding the new TLD you're maintaining that coupling and actually limiting the amount of ways a user can resolve a ZeroNet address. For example it would be great if website owners could add something like a `ZERO` record to their normal DNS records that would allow a typical ICANN TLD to be accessed via ZeroNet. In addition, if you maintain the current coupling, you'd be working against the resolution stack and preventing a lot of normal things like DHCP/locally defined search domains and host overrides, as well as creating tech debt if any future resolution protocols become popular. It would be better to design a spec for ZeroNet records instead, and then allow the upstreams (i.e. browser and DNS service maintainers) to implement it (or submit patches yourself). \r\n\r\nAs you noticed, the new TLD also breaks things like TLS, and I'm sure there will be other unknown effects if it's added. As a website owner I should (ideally) be able to serve the same certificate and site to both normal and ZeroNet users, or even mix the two (e.g. fall back on plain web content if it's not available on ZeroNet in a timely manner) without running into issues like cross site scripting and CORS. A better solution would separate the resolution concerns out, and it seems like adding the new protocol is the right way to go about it. \r\n\r\n> In my opinion, the protocol handler cannot be considered as a proper solution, since 1) the protocol used by browser is actually HTTP, 2) Zeronet also makes use of the ws:// protocol under the hood (websocket connections). 3) there can be other widely used protocols in the future, which will also be supported by ZeroNet. (As discussed in [#83 (comment)](https://github.com/HelloZeroNet/ZeroNet/issues/83#issuecomment-489451550).)\r\n> The issue is about the name resolution, and the protocol has litle or nothing to do with the name resolution.\r\n\r\nI actually disagree with this on two points. First, even though the browser is using HTTP, that HTTP is still being wrapped, which actually points to having a new protocol. Second, the protocol actually has a lot to do with resolution, for example using a `file://` protocol in the browser affects how the browser resolves the url, and things like `pop://` makes the resolution stack to look for MX records. Although we don't typically think of it this way in the web world, name resolution and protocol are actually pretty tightly coupled, we just ignore it in the browser since it's all HTTP anyway. \r\n\r\nI do agree with the concerns regarding the extensibility of the `zero://` protocol though, and having a protocol simply wrap HTTP does 'stink' a bit. My proposal would be that we create a few new protocols rather than putting them all under `zero://`, for example `zhttp://` and `zws://` for the two @geekless  mentioned. This would allow us to show the user how they're accessing the site (i.e. HTTP{S} over ZeroNet) which kind of tidies up the wrapping issue, and also makes it so other protocols can be added later very easily. In addition, it allows us to keep the resolution separate from the protocol, so we can access any site we can resolve, whether it be `zhttps://github.bit` or `zhttps://github.com`. It also solves the domain case issue, as case insensitivity is defined per protocol, so we can assert that ZeroNet _addresses_ are case sensitive. This would still be backwards compatible with current name resolution as Github.{bit, com} would point to the same ZeroNet address. We would just have to consider a URI in the form of `zhttp://{some SHA1 hash without a TLD}` as an _address_ rather than a domain. It also solves the TLS issue since the domain won't change. \r\n\r\nThe only problem I see at a glance would be that the resolution stuff may be a bit tough to add at the browser level. I could see the Chromium maintainers not wanting to add it, but I could also see some maintainers of forks, like Brave and Dissenter, being happy to add ZeroNet integration directly (Dissenter already has webtorrent integration), so it may be feasible. ", "added": 1565216603, "modified": 1565217021, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2087#issuecomment-519325991", "source_type": "github"}], "1604067545_mirrored_imachug_github": [{"comment_id": 2, "body": "Why can't the protocol be changed? It should be possible to add a protocol handler for custom ones like `zhttp` and `zhttps` \u2014 that seems to solve a lot of issues. (Full disclosure, I'm not too familiar with the current architecture yet, so if that's a stupid question due to the implementation my apologies!)\r\n\r\nEdit:\r\nI proposed new protocols more fully in https://github.com/HelloZeroNet/ZeroNet/issues/2087 if anyone wants to take a look (no implementation proposals, just advantages if we're able to make it work). ", "added": 1566568620, "modified": 1566568778, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2169#issuecomment-524388024", "source_type": "github"}, {"comment_id": 3, "body": "@filips123 Sorry, I have to disagree pretty vehemently. The current proposals add a significant amount of complexity, and actually add a huge new attack surface due to the workarounds needed to get things working. You're also working against current known good systems (like DNS resolution, browser security extensions) by adding a layer on top of it, which is going to cause a lot of maintenance and security concerns in the long run (and also prevents end user customization). \r\n\r\nChanging the protocol alone solves the following problems (just off the top of my head):\r\n\r\n1. XSS and CORS work out of the box\r\n2. TLS certs will not break \r\n3. DNS is left up to the user (a resolver could be offered locally but is not needed as part of the core). This allows user defined DNS to be respected, but also allows non `.bit` sites to define ZeroNet address. It also allows interesting things like CNAMEs and redirects to ZeroNet defined domains\r\n4. Proxies will generally ignore protocols it doesn't know about which reduces the impact of poorly written proxies (I _think_ per RFC, they're not supposed to change the domain at all anyways)\r\n5. Case sensitivity is per-protocol in the browser IIRC, so you won't need to hack around bitcoin addresses (zhttps://{some hash} with no TLD would be an address like 8.8.8.8, versus a domain which is case insensitive anyways, so it's easy to parse)\r\n6. Sites can mix protocols in their javascript, for example allow fallback ZeroNet addresses when a plain net file can't be found\r\n7. Since it utilizes existing systems, the attack surface isn't any greater than a typical browser request. For example, if I want anonymous access I can use TOR, DNS over TLS, etc. Normal users don't care about that, and as such the barrier to entry is much lower, and thus wide adoption is more likely.\r\n8. It allows easy integration in browsers since it doesn't require any special side processes or proxies. Accessing a site is as simple as changing the protocol.  \r\n\r\nI'm sure there are a lot more, but that's just what I can think of off the bat. Again, I have not contributed so I don't mean to step on anyone's toes, but coming in with a fresh pair of eyes it seems like there is a lot of concern mixing going on, which seems to be the cause of the complexity (versus doing one thing, and doing it well). When I initially heard about ZeroNet I thought it was simply a way to access a site in a distributed manner, versus doing it in an anonymous or secure way. To me, that's more the realm of TOR, or security extensions to DNS and such. In my opinion, it probably shouldn't be a core concern of the base protocol. \r\n\r\n", "added": 1566571670, "modified": 1566572251, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2169#issuecomment-524403776", "source_type": "github"}, {"comment_id": 4, "body": "@github-zeronet Yeah we might not be on the same page due to my admittedly poor understanding of how the current system works (and if so my sincere apologies for creating noise). I just was commenting based solely on some issues that were raised due to custom DNS (like TLS concerns in https://github.com/HelloZeroNet/ZeroNet/issues/2087). I'll drop it for now and get a better understanding of the current system and see if my proposal still makes sense, and if so I'll comment and offer some specific implementation alternatives to the points you made. Again, sorry if I'm making unnecessary noise, I think this is a cool concept and would love to see it widely used!", "added": 1566576516, "modified": 1566576516, "source_link": "https://github.com/HelloZeroNet/ZeroNet/issues/2169#issuecomment-524429274", "source_type": "github"}]}}