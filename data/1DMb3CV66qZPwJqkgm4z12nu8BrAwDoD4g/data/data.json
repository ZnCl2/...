{
	"title": "Insurgo Open Technologies' ZeroBlog",
	"description": "Making reasonably secure hardware a reality for the masses. \n[Empower yourself](https://insurgo.ca).",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 57,
	"demo": false,
	"modified": 1637340746,
	"post": [
		{
			"post_id": 56,
			"title": "You lost your Disk Recovery Key passphrase / How to reinstall Qubes on the PrivacyBeast",
			"date_published": 1636993589.3,
			"body": "### Roles of Disk Recovery Key and Disk Unlock Key passphrases\n\nThe Disk Recovery Key passphrase is required to decrypt both sdcard and SSD drives encrypted partitions.\n\nThe Reownership Wizard can be reactivated to reown, fully or partially, your PrivacyBeast components at the condition of having your Disk Recovery Key passphrase to be able to provision and reuse provisionning information stored under your sdcard's encrypted partition. The sdcard encrypted partition can only be decrypted with the Disk Recovery Key passprase that you chose during the provisioning phase of the Reownership wizard.\n\nOn each boot, Heads asks for the Disk Unlock Key passphrase (3 words starting with uppercase letter, seperated with spaces) to release the Disk Unlock Key from the TPM and unlock transparently the QubesOS installation by injecting that key from the TPM to decrypt the content of the drive by QubesOS, without QubeSOS asking for a decryption key.\n\nIf that Disk Unlock Key passphrase doesn't release the Disk Unlock Key (bad passphrase, integrity validation error), Heads offers to boot the system without the Disk Unlock Key. That is, with the Disk Recovery Key passphrase (6 words, first letters uppercase, seperated by spaces) that is prompted by Qubes, not Heads.\n\nThis is QubesOS booting without Heads interfering into its boot process.\n\nSo if you lost your Disk Recovery Key passphrase that was asked of you the whole process of the reownership wizard upon reboot, the Qubes installation and the sdcard encrypted content is lost by design.\n\n### You will need....\n\n1.  A USB Thumb drive, ideally formatted in EXT3/EXT4\n\n    1.  Containing QubesOS ISO and detached signature\n\n    2.  Used to store generated public key later on\n\n2.  Another USB Thumb drive, formatted into FAT32/EXT3/EXT4 if you decide to follow QubesOS instructions into preparing a dedicated USB installation media which won't be usable by the Reownership wizard to store your generated GPG public key later on. This is the media that would be used to copy your generated GPG public key.\n\n3.  A sdcard to be plugged in laptop, even if you lost Insurgo provided one. The Reownership Wizard has a bug which requires a sdcard, and normally would expect an encryption partition so the automatic provisioning mode can be used to store and retrieve chosen passphrase, only requiring of the user to type the Disk Recovery Key passphrase to decrypt its content at each reboot of the process. If you still know that Disk Recovery Key passphrase, then you are reading the wrong article and [should follow this one](http://127.0.0.1:43110/1DMb3CV66qZPwJqkgm4z12nu8BrAwDoD4g/?Post:50).\n\n### Making sure Reownership Wizard is deactivated and physical components are in a known state\n\nIf you attempted to manually reactivate the Reownership wizard by yourself neglecting the fact that the content of encrypted partitions are not accessible anymore, this won't work as explained above, by design. If you reencrypted the content of the sdcard and QubesOS installation without noting down properly the Disk Recovery Key passphrase you chose, and the reencryption and passphrase change step was successful, the same applies. The encrypted content is now lost.\n\nYou have to undo that Reownership activation flag prior of reinstalling QubesOS:\n\n1.  Boot into Heads recovery shell by hitting the `r` keyboard's key frenetically until reaching the recovery shell.\n\n2.  `mount /boot`\n\n    1.  Ignore error if already mounted because you came from the menus instead.\n3.  `mount -o remount,rw /boot`\n\n    1.  This is to be able to modify /boot content, putting the partition in Read+Write mode.\n4.  `rm /boot/oem`\n\n    1.  This is to remove the flag that activates the Reownership Wizard. That will be needed later on.\n5.  `mount -o remount,ro /boot`\n\n    1.  This is synching changes to disk by putting the partition in Read Only mode.\n6.  `. /etc/functions`\n\n    1.  That is making hidden functions from Heads available. Yes, this is a dot, followed by a space, and then /etc/functions\n7.  `enable_usb`\n\n    1.  That is loading the kernel drivers to support USB devices\n8.  `gpg --card-status`\n\n    1.  That is making the USB Security dongle known to Heads\n9.  `gpg --card-edit`\n\n    1.  That is putting the USB Security dongle into admin mode\n\n    2.  Then type:\n\n        1.  `admin`\n        2.  `factory-reset`\n\n            1.  `y`\n\n            2.  `yes`\n\n            3.  `quit`\n\n                1.  That is putting the USB Security dongle into factory resetted state, with passphrases being setuped as\n\n                    1.  Admin PIN:12345678\n\n                    2.  User PIN: 123456\n\n10.  `reboot`\n\n    1.  You are back into normal Heads mode, without being in Reownership mode.\n11.  From Heads menu, select `Settings->TPM/TOTP/HOTP Options->Reset TPM`\n\n    1.  `Yes`\n\n    2.  `New TPM Owner passphrase` prompt\n\n        1.  Enter: `12345678`\n    3.  No need to Scan Qr code here. It will be invalidated later once you reown your USB Security dongle, once the public key is generated and injected into the firmware and part of the measurements.\n\n    4.  `Enter your Librem Key Admin PIN` prompt\n\n        1.  Enter: `12345678`\n\n            1.  This will be changed later on in reownership\n    5.  You just made the `TPM Owner passphrase` equivalent to the transitional `GPG Admin PIN` for the time being being equal to `12345678` until changed per Reownership Wizard later on.\n\n### Download and prepare QubesOS 4.0 installation USB thumb drive\n\n1.  Download latest ISO from here [https://www.qubes-os.org/downloads/](https://www.qubes-os.org/downloads/)\n\n    1.  The preferred method is through torrent, since torrent validates the integrity per its download process. Otherwise, you have to validate integrity yourself following the guides of Qubes [https://www.qubes-os.org/security/verifying-signatures/](https://www.qubes-os.org/security/verifying-signatures/)\n\n    2.  The preferred method is with Heads validating the integrity of the ISO if provided with its detached signature prior of booting the ISO. The two downloaded files copied at the root directory of a USB thumb drive formatted into ext3/ext4 (FAT doesn't support large files >4Gb)\n\n        1.  As an example for version 4.0.4 the two following files would need to be put on a USB thumb drive:\n\n            1.  [https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.4-x86_64.iso](https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.4-x86_64.iso)\n\n            2.  [https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.4-x86_64.iso.asc](https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.4-x86_64.iso.asc)\n\nOtherwise, and if you already validated the integrity of the downloaded ISO and prefer to create a bootable device with that ISO, you can follow the Qubes Installation guide which offers their own supported ways of creating Qubes bootable media: [https://www.qubes-os.org/doc/installation-guide/](https://www.qubes-os.org/doc/installation-guide/)\n\nRemember you will still have to provide Heads with a writable USB thumb drive when requested. This is not USB Security dongle (Nitrokey Pro/Librem Key). We are talking about a USB storage device that can store generated GPG public key after generating the keypair in your USB Security dongle. That is, under a USB Thumb drive.\n\n### Install QubesOS\n\n1.  Select from the Heads menus: `Settings-> Other Boot Options-> Other boot Options-> USB` boot\n\n2.  First select the ISO/ Then select (after ISO verification) `Install Qubes R4.0.4`\n\n    1.  _**Not the basic graphical option**_!!!!\n3.  Follow Qubes installation instructions [https://www.qubes-os.org/doc/installation-guide/](https://www.qubes-os.org/doc/installation-guide/)\n\n4.  On reboot and back into Heads, disregard integrity warnings. From Heads menu, select: `Settings->Other Boot Options -> Ignore tampering and force a boot (Unsafe!)` option. That is, no integrity validation, whatsoever, since your USB Security dongle doesn't have proper keypairs to perform that action yet.\n\n    1.  Continue installation guide from QubesOS: [https://www.qubes-os.org/doc/installation-guide/](https://www.qubes-os.org/doc/installation-guide/)\n\nQubesOS is now installed.\n\n### Turning Reownership mode on and accepting non-automatic provisioning mode\n\nSince you lost your Disk Recovery Key passphrase, the Reownership will not accept to store any credential or provisioning information into unencrypted storage.\n\nThis means that all passphrases and provisioning information will need to be entered from you manually. This is unsupported for obvious user errors possibility, but is offered for advanced users.\n\nThe Reownership will not save the generated public key inside of the sdcard either. **You need to have a properly formatted USB thumb drive (a storage USB dongle) ready to receive generated public key at USB Security dongle key generation step.**\n\nThat could be your Qubes installation media if you went the Heads way (dropping the ISO and its detached signature file on preformated EXT3/EXT4 partition) or another USB thumb drive connected when asked for. Sorry the Reownership wizard doesn't support saving the public key onto sdcard's unencrypted partition.\n\n1.  Reboot the laptop. Hit `r` keyboard's key frenetically until you reach the Heads recovery shell\n\n2.  Onto recovery shell, enter `mount /boot`\n\n3.  Type `mount -o remount,rw /boot`\n\n    1.  This is so that you can edit the content of /boot\n4.  Create and edit the Reownership trigger file by doing `vi /boot/oem`\n\n5.  You will now enter the exact following content into VI text editor. First enter `i` keyboard's key to get into Insert mode, then type, textually:\n\n    1.  `luks_reencrypted`\n\n    2.  `luks_passwd_changed`\n\n6.  That being done, to exit VI text editor, type the following text sequence: `Esc` keyboard's key, followed by `:wq`and type `Enter` keyboard's key. You should now be back onto the recovery shell.\n\n7.  Type `cat /boot/oem`\n\n    1.  You should see, and only see:\n\n        luks_reencrypted\n        luks_passwd_changed\n\n    2.  Otherwise: `rm /boot/oem`\n\n    3.  And redo step 4-7 until that content only is observed.\n\n8.  `mount -o remount,ro /boot`\n\n    1.  To synchronize disk changes onto disk.\n9.  `reboot`\n\n10.  You are now into the Reownership wizard. Select the `/dev/mmcblk0p2` partition, which is the unencrypted one.\n    _The reownership wizard will say this is not supported and that you are now into non automatic provisioning mode._\n\n11.  Pay attention to all the information you will choose there and be cautious about writing it down properly this time, since all those passphrases will be asked for you to be reentered manually. This is the non-automatic provisioning mode.\n\n12.  Follow onscreen instructions, which will be similar, outside of the prompts you will have to manually feed, from the video you can watch here with documentation on the same webpage: [https://archive.org/details/oemuserreownership](https://archive.org/details/oemuserreownership)"
		},
		{
			"post_id": 55,
			"title": "Updating deprecated Whonix-15 templates",
			"date_published": 1636988040.4,
			"body": "Whonix-15 is now deprecated [https://www.qubes-os.org/news/2021/11/14/whonix-15-eol/](https://www.qubes-os.org/news/2021/11/14/whonix-15-eol/)\n\nInsurgo didn't modify the deployed Workstation nor Gateway templates. Consequently, if you haven't installed any additional software there or didn't apply configuration changes, it is recommended to install the new templates under dom0 and switch the depending qubes from whonix-15 to whonix-16.\n\nWhonix has [an in-place upgrade guide](https://www.whonix.org/wiki/Release_Upgrade_Whonix_15_to_Whonix_16), but I was not successful using this guide, so I would not recommend using it unless you do clones of your templates to test this guide into those clones first.\n\nIt is recommended to [install the new templates](https://www.whonix.org/wiki/Qubes/Install) and reapply needed changes and install needed software in the templates again.\n\n*   Make sure that dom0 salt recipes are up to date to be able to deploy correctly changes for whonix-16:\n\n    *   `sudo qubes-dom0-update`\n\n*   To make sure that the recipe deals with whonix-16, not whonix-15:\n\n    *   `sudo cat /srv/formulas/base/virtual-machines-formula/qvm/whonix.jinja`\n\n*   Should show in the output:\n\n    *   `qvm:whonix:version', '16'`\n\n*   Install the new templates from dom0 Terminal Emulator:\n\n    *   `sudo qubes-dom0-update --enablerepo=qubes-templates-community qubes-template-whonix-gw-16 qubes-template-whonix-ws-16 -y`\n\n*   Apply qubes dom0 salt configuration to configure disposable whonix-workstation. This will create whonix-ws-16-dvm\n\n    *   `sudo qubesctl state.sls qvm.anon-whonix`\n\n*   Force updates to go through sys-whonix:\n\n    *   `sudo qubesctl state.sls qvm.updates-via-whonix`\n\nIn the current state, sys-whonix is still based on the old whonix-gw-15 template, not the new whonix-gw-16 one.\n\nI like to take extra precautions, so here, I will force shutdown sys-whonix, and clone sys-whonix to sys-whonix-15 to be able to retrieve configs from there if needs be.\n\nAs you know, I use ZeroNet, so my sys-whonix was customized to be able to route the traffic hitting sys-whonix to my ZeroNet qube. You might have followed guides on Whonix wiki to customize sys-whonix to fit your needs.\n\nThe following section keeps sys-whonix intact, but changes its parent template from whonix-gw-15 to whonix-gw-16.\n\n*   From dom0 Terminal Emulator once again:\n\n    *   `qvm-kill sys-whonix`\n\n    *   `qvm-clone sys-whonix sys-whonix-15`\n\n    *   `qvm-prefs sys-whonix-15 autostart False`\n\n    *   `qvm-prefs sys-whonix template whonix-gw-16`\n\nIf you didn't do any customization for sys-whonix, and would like to start fresh from sys-whonix, redoing the Connection Wizard and wiping everything local (private storage) to sys-whonix.\n\n*   Since we took precaution into cloning sys-whonix into sys-whonix-15, the data we are wiping here would still be available under sys-whonix-15 qube if needs be to be reviewed later on. So we can wipe it safely over sys-whonix:\n\n    *   `sudo mkfs.ext4 /dev/qubes_dom0/vm-sys-whonix-private`\n\n*   You can now use Qubes Template Manager, and affect all qubes that were depending on old templates to the new ones, and reboot. sys-whonix-15 won't start automatically, and all other qubes call, including dvm from start menu over `Disposable: whonix-ws-16-dvm` menu will start clean disposable qubes from the new workstation template, while using sys-whonix from the new deployed whonix-gw-16 template.\n\n### Removing whonix-15 related stuff\n\nLater on, you might want to remove old templates once you have verified what you installed there in the past (`history` is a precious friend) has been redone in newer templates.\n\nOf course, you won't be able to remove any template if there are qubes depending on them. So make sure you switch qubes to newer templates following [Switching templates instructions](https://www.qubes-os.org/doc/templates/#switching) and then follow [u](https://www.qubes-os.org/doc/templates/#uninstalling)[ninstalling templates instructions](https://www.qubes-os.org/doc/templates/#uninstalling)."
		},
		{
			"post_id": 54,
			"title": " qube apps: Installing new applications inside of Qubes just got easier",
			"date_published": 1636048488.1,
			"body": "[Micah Lee just created a small application for Qubes named `qube apps`](https://micahflee.com/2021/11/introducing-qube-apps/), written in Python. When installed in a parent Template, it permits to all depending qubes to install new applications inside of them, making them instantly available for use, without impacting other qubes nor other templates. That is: local installation of applications directly into a defined qube compartment for such case, pushing forward independence of each created qube, which is a clean state to start from.\n\n## Why does it matter?\n\nThat is right. No need to install each and single application in a cloned Template anymore to do testing. Of course, you can still, per design, install applications inside of child templates qubes and those apps being available only for that qubes boot. But the persistence across reboots offered by flatpak makes this solution really interesting.\n\nOf course, if you intend to use the same application into multiple qubes and want that application to be updated alongside of all other packages per OS/applications maintainers themselves per Templates upgrades notifications of Qubes, **you are still better installing the desired app into a parent Template instead**.\n\nAlso, installing that application in multiple qubes means duplicating needed space for that application deployment across multiple qubes, which will impact the whole system available space, which is another reason why we love Qubes Templates (which are OS and made available applications for child qubes). In it's [blog post](https://micahflee.com/2021/11/introducing-qube-apps/) where `Signal Desktop`is being installed as an example, the author himself hits a limitation (feature!) of Qubes, which limits the default available disk space available to newly created qubes: **_the default 2GB disk private volume available space is not enough to download self-contained Signal Desktop flatpak, which when installed consumes more then available 2GB by itself!!!! So be warned: using flatpak_ is choosing clearly convenience over disk space here!**\n\nBut if you want to try an application prior of going the more complicated way of installing it in a parent Template, flatpak is an interesting advancement for Qubes users.\n\nThis is an important step forward because snap, flatpak and appimages deployment are hard for newcomers.\n\nSnap support has made its way into Qubes contrib applications a while ago, where applications are updated where used(while requiring the user to restart its application not knowing there was an update applied, as opposed to Template updates notifications...) but its usage is still not so convenient, and most snap application need to deactivate snap security policies to be useable ([which is still a thing for flatpak last time I checked](https://flatkill.org/)).\n\n**The story is different for flatpaks through this developed app, if used to launch the apps themselves, since the `qube apps` itself permits to update what is installed prior of launching the desired application.**\n\nMicah Lee did a nice job providing app search/update/app launch functions directly in `qubes apps` application, finally addressing the most fundamental end user concerns of Qubes which was always: but.... How can I easily install/launch/update XYZ application?\n\nThis finally permits users to _more_ securely and cleanly create a new qube to experiment and play around with a new desired application that they want to try out, without having to modify parent Template first.\n\nThis is a compromise between space usage and security for increased convenience, where convenience wins big time here. Do not need that application anymore? Just copy elsewhere user generated data if needed and then delete the whole qube. Try something else that might better suit your needs and be happy and grateful for Qubes. But please check at which rhythm the application is maintained, ok?\n\n## Awesome! What now?\n\nYou want to try a new app and want to know if that application is available prior of going through the steps required into installing this new qube-apps thing? Search for your app desired app [here](https://flathub.org/home). Found it?\n\nMicah Lee's original `qube apps` blog post is [here.](https://micahflee.com/2021/11/introducing-qube-apps/)\n\nMicah Lee's `qube apps` GitHub repository is [here.](https://github.com/micahflee/qube-apps)\n\n[Please do your own validation of the security insolation offered by the flatpak application you choose to use long term, ok](https://theevilskeleton.gitlab.io/2021/02/11/response-to-flatkill-org.html)?"
		},
		{
			"post_id": 53,
			"title": "Restoring individual wyng-backups on the PrivacyBeast",
			"date_published": 1618427200.9,
			"body": "## Introduction\n\nYou might have noticed that your PrivacyBeast comes with a wyng-backups-vm AppVM.\n\nThis is manual as of current state of things, as wyng-backups was thought to be integrated inside of Heads as of right now, but unfortunately.... That is delayed if not ever gonna happen.\n\nThe magical goal of having wyng-backups under Heads was to be able to restore/verify/restore LVM content from a remote SSH server, giving the possibility to even deploy additional TemplateVMs (ReactOS? newer Fedora, whonix Templates) to your QubesOS machine, empowering you to have a whole backup taken from within QubesOS from their Backup/Restore tool, and then be able to simply download the changeset (disk level changes only) in regard of their state compared to actual local volumes and trust-worthily   restore them.\n\nNow the plan is kinda unknown, since Heads modification to natively support libssh to be able to mount locally remote SSH directory is complicated, while finding a linux based cloud provider (providing required wyng tools) while permitting only remote read only access in same directory and being compatible to wyng-backups requirement, is not as easy as it was previously expected.\n\nIf interested, you can look over [wyng-backups funding proposition](https://github.com/tasket/wyng-backup/issues/65), where [QubesOS configuration restoration](https://github.com/tasket/wyng-backup/issues/18) is a blocker (now partly resolved as PoC in June 2021), Heads not having proper sshfs support is still major blocker... And where hosters on which is did proof of concept were not offering wyng-backups dependencies (workable still...).\n\nSo that is definitely not going to happen over a weekend of my own work alone without funding/help of some sort, while having this as a external ISO might be a better solution instead of inside of Heads (with reproducible builds being required and seriously not easy at all with moving build toolchain and low involvement to deal with those problems as of now)... So manual is the way now.\n\nThe good news is (though) that the backup of your original shipped state for all TemplateVMs and AppVMs deployed under the PrivacyBeast's `wyng-backups-vm` AppVM, and that, with some manual commands, you can inspect, and restore, the content of those backuped AppVMs/TemplateVMs.\n\n## How does that work\n\nCode speaks better then words. As I said this approach is manual. This is wyng-backups commands, so if you want better understanding, look over [wyng-backups documentation.](https://github.com/tasket/wyng-backup#readme)\n\nFirst thing first: please start the `wyng-backups-vm`\n(`ALT-F3: wyng-backups-vm, select Terminal`)\n\nFrom there, you can validate that the wyng-backups contained in that AppVM are in the same state then when they were made by Insurgo. The script validates wyng manifests against a detached signed digest and provisioned GPG public key in that AppVM, while having being signed with Insurgo private key, kept safe in their USB Security dongle.\n\nTo verify, from wyng-backups-vm Terminal:\n\n`./verify_backups.sh`\n\n### List backups\n\nOn dom0 Terminal Emulator (Big blue Q menu, Terminal emulator). Type:\n\n`sudo wyng --meta-dir=/var/lib/wyng-backups-vm list`\n\nThis is giving you a list of all the volumes currently backuped under the wyng-backups-vm. Note the presence of `--meta-dir=/var/lib/wyng-backups-vm` above: this is where wyng-backups-vm stores its configuration data.\n\n## Receive a volume\n\nFirst things first. If you are looking into restoring anything, the best approach is to clone that AppVM/TemplateVM and restore from wyng inside of that cloned copy first. We will take the example of debian-10 Template (`root` filesystem here is OS volume, where `private` volumes are AppVMs volumes: their user data counterpart)\n\nClone debian-10 to debian-10-restored\n\n`qvm-clone debian-10 debian-10-restored`\n\nThen restore wyng backup into that cloned TemplateVM:\n\n`sudo wyng --meta-dir=/var/lib/wyng-backups-vm receive vm-debian-10-root --save-to=/dev/qubes_dom0/vm-debian-10-restored-root`\n\nTest if the debian-10-restore TemplateVM boots by opening a Terminal inside of it. `Alt-F3: debian-10-restore, Terminal`\n\nIf it works, you now want to take precautions, by shutting down all AppVMs that depends on debian-10 TemplateVM prior of anything else. That will shutdown all AppVMs and TemplateVMs that were running:\n\n`qvm-shutdown --all --wait`\n\nTo be able to remove a QubesOS TemplateVM that was deployed from RPM, you have to tell QubesOS that that TemplateVM was not installed by RPM:\n\n`qvm-prefs debian-10 installed_by_rpm false`\n\nYou now have to reassign all AppVMs that were associated to use debian-10 TemplateVM and reassign them to use debian-10-restored. QubesOS deployed a tool called Template Manager. `Alt-F3: Template Manager`. Make sure no AppVM depends on debian-10\\. That all depend on debian-10-restored.\n\nYou can now delete debian-10 TemplateVM:\n\n`qvm-remove debian-10`\n\nNow open debian-10-restored Qubes Settings. `Alt-F3 debian-10-restored, Qubes Settings`\n\nRename `debian-10-restored` to `debian-10`\n\nVoila! You will now have to reinstall all the applications you installed that are no longer available in TemplateVMs you just restored (same would apply to any other TemplateVM).\n\nAs for AppVMs you want to restore, as long as the destination LVM of a QubesOS AppVM is not used (qvm-shutdown above) you can restore directly its associated private volume as listed in wyng listed available backup:\n\n`sudo wyng --meta-dir=/var/lib/wyng-backups-vm list`\n\nLet's say you have a `vm-AppVM-private` volume in the output of precedent command output:\n\n`sudo wyng --meta-dir=/var/lib/wyng-backups-vm receive vm-AppVM-private`\n\nWould restore that private volume directly into associated LVM."
		},
		{
			"post_id": 52,
			"title": "General notes on installing software in QubesOS (taking Wire-desktop as an example)",
			"date_published": 1618335010,
			"body": "## QubesOS General Background information\n\nQubesOS permits clipboard copy of information between AppVMs (TemplateVMs, ServiceAppVMs etc) by applying the following keyboard shortcut after having highlighted text. SRC: [https://www.qubes-os.org/doc/copy-paste/](https://www.qubes-os.org/doc/copy-paste/)\n\n`CTRL-C` (copy highlighted text to AppVM clipboard)\n`CTRL-SHIFT-C` (Copy clipboard text into dom0 intervm clipboard)\n\nGo to other AppVM application where information needs to be pasted\n\n`CTRL-SHIFT-V` (Copy dom0 intervm clipboard copy into AppVM clipboard)\n`CTRL-V` (Paste AppVM clipboard content to application)\n\nWhen typing in Terminals, `CTRL-V` here will not work. You can right-click and select paste, or, type `CTRL-SHIFT-INSERT`.\n\n## QubesOS TemplateVMs and absence of direct networking\n\nUnder QubesOS, TemplateVMs do not have direct network access. That is, TemplateVM have no networking gateway by default. TemplateVMs communicate with the internet through an update proxy, which is accessed by application installers (apt, dnf/yum).\n\nIf any other action is needing internet in a TemplateVM to download additional signing keys with wget (a command line downloader), _it will fail_, saying you do not have internet.\n\nThere are two approaches here to get TemplateVMs download those signing keys or scripts:\n\n1.  Modify TemplateVM networking option, to give it access to a networking gateway, temporarily (5 minutes). _**Not the recommended option.**_\n\n    1.  To do this, TemplateVM settings needs to have networking gateway set to sys-whonix/sys-firewall, and the firewall section needs to be set to \"limit outgoing connections to\", so that network is denied by default. Then, the checkbox \"Allow full access for 5 minutes\"\n\n        1.  If that approach is taken, none of the instructions given on third party websites needs to be modified. wget commands will work as intended. But that requires to modify the default behavior of TemplateVMs, giving access to the whole internet for 5 minutes, which comes with its risks.\n2.  The best approach is to use the proxy directly. Instructions to do so come from Whonix, and requires curl to be downloaded in TemplateVM. Most of the applications users normally wants exist for debian-10 TemplateVM.We want to make sure that curl is installed (general purpose downloader)\n\n    1.  Alt-F3: debian-10, Terminal. Type/copy paste the following:\n\n    2.  `sudo apt install curl` (It is installed by default)\n\n    3.  Generally, installation instructions look like the following [https://github.com/wireapp/wire-desktop/wiki/How-to-install-Wire-for-Desktop-on-Linux](https://github.com/wireapp/wire-desktop/wiki/How-to-install-Wire-for-Desktop-on-Linux)\n\n    4.  We can see from above link to install Wire:\n\n        1.  Install apt-transport-https to receive the package via HTTPS\n\n            1.  `sudo apt-get install apt-transport-https`\n        2.  Import our PGP signing key to be able to verify the downloaded package\n\n            1.  `wget -q https://wire-app.wire.com/linux/releases.key -O- | sudo apt-key add -`**_!!!!!! This will fail !!!!!!_**\n        3.  Add our repository address to your sources list\n\n            1.  `echo \"deb [arch=amd64] https://wire-app.wire.com/linux/debian stable main\" | sudo tee /etc/apt/sources.list.d/wire-desktop.list`\n        4.  Update your local list of available packages\n\n            1.  `sudo apt-get update`\n        5.  Install wire-desktop\n\n            1.  `sudo apt-get install wire-desktop`\n\nAbove, in step 2, is where the public key is downloaded from the internet. That command would fail for above explained reasons.\n\nThe line :\n\n*   `wget -q https://wire-app.wire.com/linux/releases.key -O- | sudo apt-key add -`\n\nWould become:\n\n*   `curl --proxy http://127.0.0.1:8082/ --tlsv1.2 --proto =https --max-time 180 https://wire-app.wire.com/linux/releases.key | sudo apt-key add`\n\nIn a nutshell, installing Wire under debian-10 TemplateVM in terminal application would be done after having done the following under Terminal application, all at once :\n\n*   `sudo apt-get install apt-transport-https`\n\n*   `curl --proxy http://127.0.0.1:8082/ --tlsv1.2 --proto =https --max-time 180 https://wire-app.wire.com/linux/releases.key | sudo apt-key add -`\n\n*   `sudo apt-get update`\n\n*   `sudo apt-get install wire-desktop`\n\n*   `sudo halt`\n\nThen, once the TemplateVM is shutdown, the application is now available for you to associate it with desired AppVM.\n\n1.  Create new AppVM (alt-f3, Create QubesVM. Name it Wire, Communication, whatever you like, give it a color that fits this AppVM risk, give it network access to sys-whonix, then click \"launch settings after creation\".\n\n2.  Assign Wire to newly created AppVM\n\n    1.  From this AppVM Qubes Settings(alt-f3: NameOfAppVM Qubes Settings.\n\n    2.  On the application tab, you can now see Wire on left menu. Highlight it, and click the \">\" to assign this application to that AppVM available applications shortcuts. Apply. OK.\n\n3.  Launch Wire (Alt-F3: Wire from desired AppVM) / Big Q Icon for application list and select application from there."
		},
		{
			"post_id": 51,
			"title": "Installing RiseupVPN on QubesOS",
			"date_published": 1618327180.8,
			"body": "As always, **_A VPN is not a panacee. It cannot protect against yourself, nor bread crumbs left here and there linking to you. A VPN doesn't make you invisible. A VPN tunnels are the traffic you are generating, making it exit to this new blind trusted entity, replacing your ISP endpoint by VPN endpoint._**\n\nVPN usage comes with its subsets of [risks](https://www.privacytools.io/providers/vpn/).\nThere is no consensus on using [Tor+VPN combined](https://matt.traudt.xyz/posts/vpn-tor-not-mRikAa4h.html).\n\nSecurity is not a product; it's a process, resulting of threat modeling and risk analysis being in perpetual motion.\n\nIf you only need to hide your IP from the ISP (Geoblocking evasion, hide your ISP given IP) and if by doing so, you are willing to replace the trust you do not want to put into your ISP and place it into your VPN provider instead. That is what a VPN has to offer.\n\nHaving trust into a VPN provider is a subject in itself I will not cover here.\n\nBut if your VPN provider requires you to authenticate to use it, and if it keeps logs of your connection origin and login even if it says it doesn't... Then your identity is traceable back to your account usage, or your ISP given IP.\n\n### Why RiseupVPN\n\n[RiseupVPN doesn't require registration](https://riseup.net/en/vpn). Consequently, they simply can't link your login information to your origin IP usage (Dodged by most VPN written ToS or marketing speach). As opposed to others saying the same but requiring you to log in to track paying accounts, RiseUP decided to not have this metadata available altogether, added to the general used \"no IP tracking\" policiy everyone advertises.\n\nRiseUP is a **_[donation](https://riseup.net/en/donate) based service_**. Please don't use all their bandwidth.... Use it wisely and... [_**Donate**_](https://riseup.net/en/donate) according to your actual **_bandwidth_** **_usage_**!!! Bandwidth is not free (as in beer at least, even though appearances seem to be different...)\n\nFrom my understanding, you will exit through their most local VPN endpoint. They have Canada (Kombit range) and a USA endpoint (Seattle, Washington) having been reported.\n\nYour usage vary? [Please drop me a line.](https://insurgo.ca/#contact)\n\n# Instructions to install RiseupVPN under QubesOS\n\nInstalling RiseupVPN from their Debian repository (older version then snap, but works)\n\n*   [Issue](https://0xacab.org/leap/bitmask-vpn/-/issues/466#note_327437) exists to update their repo with latest version (snap).\n\n    *   Commented for the snap image to actually be compatible with polkit.\n\n    *   Neither are fixed at the moment of writing this article. So we go on installing the version in repository, expecting it to be updated soon enough.\n\n    *   You can also push the developers to update the repo, as I did, in the [ticket relative to that](https://0xacab.org/leap/bitmask-vpn/-/issues/466#note_327641)\n\n## debian-10 template installation\n\n`Alt-F3: debian-10, Terminal`. Type/copy paste there (`CTRL-C`, `CTRL-SHIFT-C` here to copy in clipboard then pass clipboard to QubesOS dom0.\nThen under debian-10 Terminal, `CTRL-SHIFT-V`, `CTRL-SHIFT-Insert` to paste from QubesOS dom0 clipboard to terminal):\n\n([excerpt from those instructions](https://riseup.net/en/vpn/linux))\n\n*   `sudo apt install leap-archive-keyring`\n\n*   `echo \"deb https://deb.leap.se/client release buster\" | sudo tee /etc/apt/sources.list.d/leap.list`\n\n*   `sudo apt update`\n\n*   `sudo apt install riseup-vpn`\n\n![2021-04-13-152001.png (737x484)](data/img/post_51_2021-04-13-152001.png)\n\n*   `sudo halt`\n\nNow that RiseupVPN is installed under debian-10 TemplateVM, and that that TemplateVM is confirmed to be halted (notification on upper left notification area), continue with the following instructions.\n\n## Create sys-vpn-riseup AppVM based on debian-10 TemplateVM\n\n*   `Alt-F3: Create Qubes VM`. Replicate:\n\n![2021-04-13-112626.png (618x323)](data/img/post_51_2021-04-13-112626.png)\n\nSelect `debian-10` Template, assign `sys-firewall` to Networking, tick `provides network` checkbox.\n\nApply. Ok.\n\nThen `Alt-f3: Terminal` (from created sys-vpn-riseup AppVM).\ntype:\n\n`riseup-vpn`\n\nShould auto-connect.\n\nTest connection from another AppVM using that as a network gateway.\nOn the following picture, I did `Alt-F3: videocalls` and selected `Qubes Settings`\n\n![2021-04-13-115009.png (820x678)](data/img/post_51_2021-04-13-115009.png)\n\nNetworking is selecting the `sys-vpn-riseup` ServiceAppVM.\n\nOn videocalls AppVM (`Alt-F3, videocalls: Selecting Firefox`)\n\nGoing to [https://nordvpn.com/what-is-my-ip/](https://nordvpn.com/what-is-my-ip/) or any other service that checks your IP:\n\n![2021-04-13-115623.png (1236x713)](data/img/post_51_2021-04-13-115623.png)\n\nShows that i'm currently exiting through Kombit, which is based in Canada. This is not my IP, but the IP given by RiseupVPN.\n\n`Alt-Tab` into Terminal of sys-vpn-riseup, and typing `Ctrl-C` to kill the VPN:\n\n![2021-04-13-115820.png (739x485)](data/img/post_51_2021-04-13-115820.png)\n\nThen `Alt-Tab` back to my videocalls AppVM Firefox App, refreshing page fails, since that AppVM doesn't have network anymore.\n\n`Alt-Tab` back into sys-vpn-riseup Terminal, type up arrow key so that it shows `riseup-vpn`, and type enter. Your vpn is connected again, and you can continue accessing content from the country and IP RiseupVPN assigned you to.\n\nEnjoy."
		},
		{
			"post_id": 50,
			"title": "Reactivating the Reownership Wizard on the PrivacyBeast ( without reencrypting the Sdcard nor QubesOS installation partitions )",
			"date_published": 1614620210.3,
			"body": "*   You lost your Nitrokey Pro? Received ordered replacement directly from Nitrokey(EU)/Purism(USA)?\n\n*   You locked yourself out of your `USB Security dongle`'s `Admin PIN`?\n\n    *   You now [cannot unlock](https://docs.puri.sm/Librem_Key/Getting_Started/User_Manual.html#change-or-unblock-a-pin-on-the-librem-key) your `User PIN` anymore from your `Admin PIN`.\n\n    *   Basically, your `USB Security dongle` is unmanageable at this point and needs to be factory reset and re-provisioned.\n\n*   You screwed up the PrivacyBeast and now reinstalled from ISO with detached signature (iso.asc downloaded on QubesOS website/torrent) verified by Heads. You finished the installation by booting in insecure mode (Settings, boot options, insecure boot option).\n\nTherefore, by continuing...\n\n*   [You accept that the files/emails previously encrypted](https://www.linuxjournal.com/content/why-smart-cards-are-smart) with previous private key, protected on your `USB Security dongle`, will be lost forever (encrypted content won't be able to be decrypted, since you will be generating a new keypair replacing the old one, which was used to decrypt content)? Also, every file that was signed with your previous private key will still be valid until expiration of your public key within a year, and won't be renewable without your User PIN being usable. Basically, you agree that you need to generate new GPG keypair which will replace the unusable one you used previously. If you still know your GPG User PIN, now would be a good time to decrypt all content and save decrypted content somewhere safe, otherwise, you accept loosing access to that content forever.\n\nYou actually want to reset your `USB Security dongle` and reown it with backed up provisioning secrets/information under your sdcard's encrypted partition, while still knowing your `Disk Recovery Key passphrase` to go forward with the process?\n\nYou are at the right place. Keep on reading.\n\n### Impacts\n\nThis does not touch the content of the encrypted QubesOS installation/sdcard.\n\nBy the end of this process, Heads will insert a new `Disk Unlock Key` to be released by the TPM uniquely kept secret (in its own NV memory) when provided the right measurements and passphrase, inside of the LUKS headers additional slot 1, while leaving `Disk Recovery Key` slot 0 untouched.\n\nThat is, it will set up a new boot default which will ask for your `Disk Unlock Key passphrase` instead of your `Disk Recovery Key passphrase` on next boot, triggering integrity tampering verification, just like when you update QubesOS dom0's core components, and ask you to set a new boot default, which will onboard you into detach signing digest of /boot content, and defining a boot default.\n\nSetting a `new boot default` will always require of you to renew/change your `Disk Unlock Key passphrase` which requires you to input your `Disk Recovery Key passphrase` to setup a new `Disk Unlock Key` + `Disk Unlock Key passphrase`, and for doing so, to sign /boot new boot default with your `GPG User PIN` prior of booting into that new default boot option until the next QubesOS core components upgrade of /boot content (Xen, linux kernel, linux initrd, grub config).\n\n**By reactivating the reownership wizard, excluding re-encryption of the encrypted partitions; _all of the above will be done automatically, just like when you received your Privacy Beast._**\n\nTake home message: _**You need to know your `User PIN`and `Disk Recovery Key passphrase` at all time. You can change your `Disk Unlock Key passphrase` when desired, by setting a new boot default manually from Heads boot options submenus.**_\n\n### Some background information\n\nThe PrivacyBeast Reownership Wizard depends on two files to action the provisioning wizard:\n\n*   `/boot/oem` : This file activates and tracks reownership steps that were successful (interpreted content by the Reownership Wizard below)\n\n*   `/media/oem-provisioning`: This file needs to be found under a LUKS encrypted partition, and contains the provisioned secrets. It is used as an input source all along the Reownership Wizard, and will trigger automatic provisioning mode (triggers the wizard on provisioning a missing secret from user to be saved in that file) if some secrets expected are not found in it.\n\nOn `/boot/oem` possible contents for (reference only):\n\nLines starting with`#` are comments.\n\n```\n#OEM name shown on onboarding screen if found under /boot/oem when OEM Reownership Wizard starts. Otherwise, defaults to OEM NAME\noem_name=Insurgo Open Technologies\n#\n#The following are states being checked against prior to entering that specific stage.\n# Once a stage is done, it is appended under /boot/oem\n#\n#If not found in file, shows user mmc partitions (sdcard found in memory expension slot) by mount-sdcard script.\n# /boot/oem presence forces the selection of a LUKS encrypted partition to fetch/store secrets from.\n# memory card expension slot is enforced through the x230-libremkey board config: \"export CONFIG_LINUX_SDHCI=y\"\noem_provisioning_partition=/dev/mmcblk0p1\n#In the case such LUKS prepared partition is not found on sdcard inserted in memory expension slot, the following is injected,\n# telling the OEM wizard to prompt the user manually for each information it requires\nno_automatic_provisioning\n#If not found in file, shows Onboarding first message containing oem_name above if defined, else \"your OEM\" is shown\nonboarding\n#When not present in this file, reencrypts LUKS container with oem_luks_actual_Disk_Recovery_Key defined under /media/oem-provisioning\nluks_reencrypted\n#When not present in this file, changes oem_luks_actual_Disk_Recovery_Key with oem_luks_new_Disk_Recovery_Key defined under /media/oem-provisioning\nluks_passwd_changed\n#When not present in this file, factory resets Librem Key/NitroKey with:\n# oem_gpg_Admin_PIN, oem_gpg_User_PIN, oem_gpg_real_name, oem_gpg_email, oem_gpg_comment, defined under /media/oem-provisioning.\n#The wizard generates new keypairs, injects the public key and trust database into the ROM and reboots.\n#Upon reboot, the oem_gpg_Admin_PIN is used to automatically seal HOTP secret into the Librem Key/NitroKey\ngpg_factory_resetted\n#When not present in this file, reown the TPM with oem_TPM_Owner_Password, which is recommended to be the same as oem_gpg_Admin_PIN\ntpm_reowned\n#Once all stages are done, the Wizard removes /boot/oem, and ensures that /boot file checksum file is generated and signed with oem_gpg_User_PIN.\n#\n#Then the wizard finally launches the selection of a new boot default, and asks the user if he wants to modify the disk by defining a Disk Unlock Key\n# (depends on the following x230-libremkey board config: \"CONFIG_OFFER_TPM_LUKS_DISK_UNLOCK_KEY=y\").\n#   In such case, oem_TPM_Owner_Password is used to seal a new TOTP secret, oem_gpg_Admin_PIN is used to seal a new HOTP secret,\n#   and oem_gpg_User_PIN is used to sign configuration files checksums digest (kexec_hashes.txt) for which signature is found under /boot/kexec.sig.\n```\n\nSo we take for granted that the content of your `oem-provisioned` **_file is intact and provisioning information there is as the desired._**\n\nYou can review its content, and check if you still know the your chosen `Disk Recovery Key passphrase` by reviewing its content:\n\n```\nmount-sdcard\ncat /media/oem-provisioning\n```\n\n### Let's reown\n\n_Each command on the recovery shell is a shell command requiring you to activate it by the `Enter` keyboard's key. USB Security dongle and Sdcard needs to be plugged in._\n\n1- From Heads menu, choose `Settings` then `Exit to recovery shell`\n\n2- From the recovery shell, remount `/boot` in Read+Write mode:\n\n`mount -o remount,rw /boot`\n\n3- Edit `/boot/oem` file with vi text editor:\n\n`vi /boot/oem`\n\nUnder vi, type `i` to enter insert mode. (That is, a lowercase `I`: `i`)\n\n4- Have that file have the exact following content:\n\n```\nluks_reencrypted\nluks_passwd_changed\n```\n\n5- Lets save those changes in file under vi. First press the `Escape` keyboard's key to exit previous Insert mode (goes into Command mode) and then type:\n\n`:wq`\n\nAnd hit the `Enter Key` to confirm. You are `w`riting and `q`uitting vi text editor, saving changes on file.\n\n6- You are back on Heads Recovery shell. Verify the content of `/boot/oem` to match exactly what was supposed to be typed on step 4, otherwise, redo step 4:\n\n`cat /boot/oem`\n\n7- Remount `/boot` in Read Only (ro) mode (synching the changes on disk to save them):\n\n`mount -o remount,ro /boot`\n\n8- Type `reboot`\n\n9- Insert your SDCARD correctly if not found (push in to enable the rejection mechanism, then reinsert), then select `/dev/mmcblk0p1` when prompted to make a choice on the partition to mount.\n\nThis choice will be saved under `/boot/oem`. You will have to type the `Disk Recovery Key passphrase` of your sdcard's encrypted partition at each reboot of the reownership wizard until finished.\n\n**_IF YOU ARE NOT ASKED FOR DISK RECOVERY KEY PASSPHRASE ON REBOOT, YOUR SDCARD WAS NOT PROPERLY SEATED AND YOU ARE OUT OF PROVISIONING MODE. REDO FROM STEP 1._**\n\n**_In such case,_** `no_automatic_provisioning` will be present under `/boot/oem`.\n\nThis is not normal and undesired. The SDCARD should have been detected and used for this process to work as expected. Restart at step 1.\n\n### What is happening here\n\nWell, you instructed the Reownership Wizard to not care about reencrypting the drives nor change their associated `Disk Recovery Key` passphrases from what was typed at step 4.\n\nBasically, you are asking the Reownership Wizard to provision itself from the secrets found under `/media/oem-provisioning` to do all the steps of the reownership process, excluding the reencryption of the drives because instructed as already being made.\n\nSo after the onboarding screen, the reowership will follow its steps presented:\n\n*   Factory reset the `USB Security dongle`, inject associated public key inside of ROM, reflash.\n\n*   Will seal TOTP/HOTP on reboot (Qr code to be dismissed here)\n\n*   Will factory reset TPM on reboot (Scan Qr code here)\n\n*   Will detach sign /boot files with your new private key from `USB Security dongle`, automatizing `User PIN` input and setup a new boot default, setupping a `Disk Unlock Key` in LUKS slot 1, unsealed by TPM when provided with proper `Disk Unlock Key passphrase` and coherent measurements.\n\nRemember that those steps are simply taking provisioned secrets from `/media/oem-provisioning`, removing user input errors by inputing the right thing when required to automatize the process when required.\n\nYou won't have to type any of the provisioned passphrases here, the Reownership Wizard only requiring you to type the `Disk Recovery Key passphrase` (which is supposed to be the same passphrase for both QubesOS installation and sdcard's encrypted partition, resulting in different `Disk Recovery Key` for each LUKS encrypted partition) to unlock the Sdcard `Disk Recovery Key` to read provisioned passphrases and input them automatically in the Wizard from here.\n\nYou still need to know those passphrases for the lifetime of your PrivacyBeast. **_Knowing your passphrases and their roles is mandatory_**.\n\nSo if you had issues with your previous passphrases for `User PIN` and `Admin PIN` that led you into having to reset your `USB Security dongle`, it might be a good time to take the proper time into remembering them, _and their roles,_ this time.\n\nThe `USB Security dongle` has [greater goals that should be considered and used for privacy and security goals.](https://www.linuxjournal.com/content/why-smart-cards-are-smart)"
		},
		{
			"post_id": 49,
			"title": "Upgrading sys-usb-dvm to use newer TemplateVM / Revert to sys-usb ",
			"date_published": 1607629022.4,
			"body": "QubesOS is not on rolling release based TemplateVMs.\n\nThis means that QubesOS will from time to time require the user to:\n\n*   Redownload newer TemplateVMs from dom0\n\nor\n\n*   Clone their to be depracated TemplateVM release to +1 version (fedora-31 -> fedora-32) and [upgrade](https://www.qubes-os.org/doc/template/fedora/upgrade/).\n\nIt would be beautiful if the needed work would stop here. But in the case of DispVM templates, the user also has to recreate those DispVM templates, and recreate ServiceAppVMs that rely on them (here, we are interested in the case of sys-usb-dvm which relies on fedora-31-dvm to be useable as a disposable sys-usb-dvm)\n\nHow to accomplish that?\n\nIt will first take for granted that you chose your path above (download newer TemplateVM or clone + upgrade them).\n\nThen follow [https://www.qubes-os.org/doc/disposablevm-customization/#creating-a-new-disposablevm-template](https://www.qubes-os.org/doc/disposablevm-customization/#creating-a-new-disposablevm-template) and then [https://www.qubes-os.org/doc/disposablevm-customization/#create-the-sys-usb-disposablevm](https://www.qubes-os.org/doc/disposablevm-customization/#create-the-sys-usb-disposablevm)\n\nIs there an easy way to just point the sys-usb-dvm to newer fedora-32-dvm?\n\nAnswer is [no](https://github.com/QubesOS/qubes-issues/issues/6270).\n\n# To revert sys-usb-dvm to sys-usb (dom0 terminal):\n\n*   `qvm-shutdown sys-usb-dvm`\n\n*   `qvm-remove sys-usb-dvm`\n\n*   `sudo qubesctl state.sls qvm.sys-usb`\n\n*   `sudo vim /etc/qubes-rpc/policy/qubes.InputMouse` (remove sys-usb-dvm reference)\n\n*   `qvm-prefs sys-usb memory 500` (To mitigate camera and other USB device disconnection per driver memory consumption)\n\n*   `qvm-device pci a sys-usb dom0:01_00.0 --persistent` (to attach sdcard reader to sys-usb persistently)"
		},
		{
			"post_id": 48,
			"title": "Experiments with clonezilla for massive deployments of OEM disk images directly into final end user's laptop (client/server clonezilla configs)",
			"date_published": 1606418818.6,
			"body": "Ohhhh that i've been bumping my head on the wall lately.\n\nSo! Recap.\nA physical cloner produces images that I can be reencrypted from OEM reownership on final user computer at blazing speeds of 180Mb/s, with proper memory and CPU and SSD. \n\nLet's remember that reencrypting a disk with cryptetup is one of the high intensive case where the tuple disk+cpu+memory is highly tested.\n\nNow the results. We changed the disks to a similar brand that was cheaper at aquisition lately. We attempted a lot of different options to facilitate OEM ownership of devices for partners.\n\nWe rely on a clonezilla script, called from default option of Heads, to actually launch the same ISO in client and server mode automatically, so that the server disk is, supposedly, cloned bit by bit, in bittorent mode, between all participating machines.\n\nThe new disk behaves differently from the old one. And not by a small margin.... the speed of reencryption went down from an average of 180 mbps on highest end hard drive to a 37mbps. That is plainly wrong.\n\nI did multiple tests, thinking that the hardware (memory modules, CPUs) were at stake here, to realize that clonezilla was at cause.\n\nThe same SSD being physically cloned by a cloner was performing as expected on a specific machine, establishing the baseline at 146mbps. Where that same disk performs at 37mbps at reencryption with an image cloned with clonezilla. So the hardware is not in question. The mode of operation, or the allignment of data on the destination disk. so clonezilla mode of cloning enforced by the server, is at cause.\n\nInvestigating it. This is why we are currently still out of stock on our website. Stay tuned.\n"
		},
		{
			"post_id": 47,
			"title": "Help! My USB (Camera) disconnects when in call!",
			"date_published": 1606417323,
			"body": "The problem arises from the fact that sys-usb has too little memory reserved.\nLet's remember that ServiceAppVMs (sys-net, sys-usb) are HVMs based and not PVH based, to limit to the minimal possible attack vectors. So as opposed to PVH AppVMs, which benefit from QubesOS memory ballooning to steal other PVH AppVMs virtual memory, ServiceAppVMs **reserve their base and maximum amount of memory available at startup.**\n\n[Here is the QubesOS known issue about it](https://github.com/QubesOS/qubes-issues/issues/6200).\n\nPassing sys-usb reserved memory from 400mb to 500mb of ram should fix the issue.\n\nI will modify sys-usb in next OEM image version for new customers. You have to deploy this manually on on your setup.\n\nPop a dom0 terminal (Q upper left menu -> Terminal Emulator) and type:\n\n`qvm-prefs sys-usb-dvm memory 500`\nor\n\n`qvm-prefs sys-usb memory 500`\n\nThen restart sys-usb-dvm/sys-usb AppVM and you should be good to go."
		},
		{
			"post_id": 46,
			"title": "Coreboot port on Power9's Talos II ongoing",
			"date_published": 1605394919.1,
			"body": "Kind of forgot to update on the current progress of the coreboot port by 3mdeb on the Talos II, funded by Insurgo!!!\n\nRelative tweets:\n\n*   [Arrival of hardware at 3mdeb](https://twitter.com/3mdeb_com/status/1314187270908522497)\n\n*   [coreboot bootblock PoC](https://twitter.com/3mdeb_com/status/1313155520807743489)\n\n*   [Roadmap of the port and public talk](https://twitter.com/pietrushnic/status/1321966853917413377)"
		},
		{
			"post_id": 45,
			"title": "Scanning Qr Code without a smartphone?",
			"date_published": 1605194357.6,
			"body": "You do not own a smartphone?\n\nYou want to use Qr Code as a second factor verification for remote attestation on your PrivacyBeast solely on first boot to verify that firmware integrity was not tampered with in transit?\n\nConsequently, you choose to\n\n*   Rely on `HOTP` remote attestation (USB Security dongle) for its LED to flash green/red as a result of the attestation with Heads showing you the result also on screen (`HOTP:Success`)\n\n*   Have your `Disk Unlock Key` being released by the TPM, if and only LUKS header + firmware integrity + `Disk Unlock Key passphrase` provided is good while TPM rate limiting the attempts.\n\nYou are also aware that going into recovery shell (rubber ducky attacks using USB dongles as a keyboard + storage) will invalidate TPM based measurements, showing errors on screen, on USB Security dongle LEDs and will prevent `Disk Unlock Key passphrase` to release the `Disk Unlock Key` to boot QubesOS.\n\nThis is how TOTP can be used only once, prior of reownership, to double verify integrity through TOTP codes generated both on phone and on laptop from that shared secret with you, in the form of Qr Code prior of shipping. **_Without a smartphone_**.\n\n### Install KeepassXC\n\nWe recommend that you install KeepassXC on your actual computer. KeepassXC enforces diceware passphrases, while also permitting to setup TOTP for each entree, while having a lot of eyes on it's open source code.\n\n### Transform Qr code into shared secret\n\nSo you downloaded your Qr Code on your computer.\n\nYou have two good options:\n\n*   [You can use Google Chrome plugin (multiplatform) to extract the secret from Qr code](https://www.cnet.com/how-to/how-to-decode-qr-codes-without-scanning-them/)\n\n*   [You can extract the secret from a Qr Code image to the command line (linux)](https://askubuntu.com/questions/22871/software-to-read-a-qr-code#22899)\n\n### Use KeepassXC to generate the TOTP code from extracted Secret Key\n\nNow that you have extracted secret, you can now make an entree inside of KeepassXC and setup TOTP for that entree.\n\n*   `Add New Entree`\n\n*   Right click on that new entree, select `TOTP: Set up TOTP`\n\n*   Enter extracted `Secret Key` from previous step, click `Ok`\n\n### Use KeepassXC to show TOTP\n\n*   Now go onto that entree, `TOTP: Show TOTP`\n\n*   TOTP is shown on screen and updated each 30 seconds.\n\n### TOTP code on Heads is wrong!?!?\n\nYou might want to look into this [post](http://127.0.0.1:43110/1DMb3CV66qZPwJqkgm4z12nu8BrAwDoD4g/?Post:44:Setting+time+into+Heads+when+TOTP+code+is+bad)"
		},
		{
			"post_id": 44,
			"title": "Setting time into Heads when TOTP code is bad",
			"date_published": 1604603984.4,
			"body": "## Why should I fix Real Time Clock (RTC) time?\n\nHeads shows time in GMT/UTC timezone.\n\nTOTP applications also refers to time in GMT/UTC timezone.\n\nYou might not be aware, but computers are really bad at keeping time in sync, which is why operating systems, including QubesOS, synchronize time with outside sources at regular interval.\n\nSo let's say you didn't touch your laptop for more then a month. Chances are high that the time skew drifted of more then 30 seconds, which would result in TOTP codes being different between your smartphone TOTP app and the code that is generated on screen inside of Heads. This doesn't impact HOTP validation with your USB Security dongle, since time is not a factor in the remote attestation, where TOTP codes are valid only for 30 seconds for the same timezone (GMT/UTC).\n\nSo if you trust HOTP because your USB Security dongle is always in your pocket on a line yard and never left alone, booting into your OS will fix this automatically on next network connection while Network Time Protocol (NTP) is being used to fix this, and TOTP will be good on next reboot. But if you rely on TOTP to verify the remote attestation, or if you care about your logs timestamps inside of the OS being always good, you might want to do the following steps prior of going forward.\n\n## How do I change time under Heads?\n\n*   Open the following webpage to have a live [UTC/GMT timezone clock with seconds showing](https://time.is/GMT) (javascript being turned on will permit live update of time). With javascript deactivated, time is static and good on time of loading the page but requires manual refresh (normally the `F5` keyboard's key)\n\n*   Press the power button and type `r` keyboard's key _frenetically_ until you reach Heads recovery shell.\n\n*   Under heads, type : `date`\n\n*   Compare the time between shown on webpage and what is given on console. A time difference of more then 5 seconds leads to your smartphone showing a TOTP code that will show in 5 seconds on your laptop. Best is to have the exact same time. Let's do it. Your logs will be happy and consistent too, without reliving that same 5 seconds twice after OS' NTP sync, if that matters.\n\n*   Format for date and time input is in the form of '_YYYY-mm-dd HH:MM:SS_' in between single quotes. Example if we want to press enter when webpage shows 5:00:00 on January 1 1970, we would write : `date -s '1970-01-01 05:00:00'` and wait for the webpage to show that timestamp and press the `Enter` keyboard's key at the same time. Write the time in advance enough so that you are good to go; for example 1 minute from now.\n\n*   Verify time with `date` once again. If time is not in sync, redo previous step prior of going forward with the next.\n\n*   Now that the time is right with `date`, we have to sync that time in the Real Time Clock (RTC). We do this with the following command: `hwclock -w` and press the `Enter` keyboard's key.\n\n*   All set. Type `reboot` and press the `Enter` keyboard's key.\n\nNote: if you have continuous time skew, you have a problem with your RTC battery, that is under keyboard palm rest on the right side. It is normally a big yellow, round shaped plastic covered battery, with two wires connected into the motherboard.\n\nYou would know that you have a bad RTC battery when the main battery of your laptop goes completely empty... and your computer is back in the 1970's. If that is your case, replace that battery and reapply [glitter](https://trmm.net/Glitter) on the main screw under your laptop, let it dry, and take a high quality picture of it with your smartphone, for human eye blink comparison (way more effective then with software, anyway!)"
		},
		{
			"post_id": 43,
			"title": "Updating your public key expiry date within Heads, exporting it to sdcard while making it usable to everyone (including yourself)",
			"date_published": 1594227630.1,
			"body": "## Why an expiry date of only one year?\n\nThis choice is intended as dead man kinda switch. In our specific use case, it acts like a canary for interlocutors using your public key to encrypt content to you. _Let's explain a bit_.\n\nA renewed public key expiry date alone doesn't prove that you are neither alive nor that you still own the USB Security dongle itself. What it efficiently does though is to prove that someone, somewhere, renewed that expired public key for another year.\n\nBut in the use case of a Smart card protected private key, it actually proves that someone, somewhere, was still knowing the `GPG User PIN` of that currently owned USB Security dongle. As opposed to a traditional gpg keypair, where the private key lies on the hard drive where the encrypted content is also found and where the keychain is in computer's memory and where that private key could be leaked with its eavesdropped associated `GPG User PIN`, the risk of that key not being under possession of the owner, protected on the USB Security dongle, are significantly lowered.\n\n_If you provided a public key to interlocutors/public keyservers and that you do not own the private key counterpart anymore, then anyone trying to encrypt messages to that e-mail address will be warned that your public key is expired (**so not renewed. That's what it actually proves, nothing else**)._\n\nIt is common good practice to set expiry date in advance in the privacy/security world, since it proves to the world that you are still in control of that public key's associated private key. In the actual case, it proves that you still own the USB Security dongle, where, again, the private key is protected and under your possession.\n\nIn the specific case of a [smart card](https://www.linuxjournal.com/content/why-smart-cards-are-smart) here, it efficiently proves that the USB Security dongle's `GPG User PIN` was not locked, which would have prevented expiry date change upon expiration and that in the case it was, the owner of the USB Security dongle is still in control of its Admin PIN, required to unlock the `GPG User PIN`, to actually change the expiry date.\n\n_**The most important point here is for distant interlocutors, who use GPG to protect private communications over unencrypted channels, who are contacting you through e-mail, encrypting it with that public key they got online. For them, it is a really good sign to see that your public key expiry date was extended.**_\n\nFor additional information, read this [\"Why Smart Cards are smart\" article](https://www.linuxjournal.com/content/why-smart-cards-are-smart).\n\nNow let's do this!\n\n## Boot into Heads and go to recovery shell\n\nFrom Heads main menu, select `Settings-->`, then `Exit to recovery shell`. Booting in recovery shell by pressing `r` frenetically bypasses loading USB modules, where your USB devices would not be recognized.\n\n### Reviewing reownership provisioned passphrases\n\nPrior of going forward, it is recommended to review your provisioned secrets at reownership.\n\nA backup of your reownership passphrases was saved under the encrypted partition of the provided sdcard (_both sdcard and QubesOS installation were reencrypted with your chosen `Disk Recovery Key` passphrase on reownership, which you should always remember_!)\n\n*   `mount-sdcard` (select first partition)\n\n*   Type your reownership chosen `Disk Recovery Key passphrase`\n\n*   Review your passphrases with `cat /media/oem-provisioning`\n\n### Changing expiry date\n\n*   `gpg --card-status` (so secret key fingerprint is known. Note `Signature Key` last 8 characters)\n\n*   `gpg -k` (note last 8 characters of fingerprint. In my case: 58E36A93)\n\n*   `gpg --key-edit 58E36A93`\n\n    *   By default you are working on the primary key.\n\n        *   If you need to edit the expiracy date of subkeys, you will need to select other keys as well (by redoing the next steps, selecting the sub keys):\n\n            *   to do so, you would specify the key here: `key 1`, `key 2`, etc.\n\n            *   Then type commands, followed by `Enter` keyboard key:  `expire`, `1y`, and `save.`\n\n*   `expire`\n\n*   `1y`\n\n*   `save`\n\nThen\n\n*   `mount-sdcard` (select partition of choice, 1:encrypted, 2:public)\n\n*   `mount -o remount,rw /media`\n\n*   `gpg --export --armor your_email@server.net > /media/desired_key.asc`\n\n*   `mount -o remount,ro /media`\n\n*   `gpg-gui.sh` (select `Add GPG key to running BIOS + reflash`)\n\n*   Select previously saved public key from presented files choices.\n\n*   Accept flash prompt.\n\n*   Follow through!\n\n### Firmware was modified by injecting your new public key\n\nSince you injected your new public key inside of the ROM, firmware measurements were invalidated. You tampered with firmware. Heads will detect that on next reboot. But since you are the origin of those changes, you will be asked to attest (reseal) those new measurements. This prompt is an example of what should never happen if those changes were not originating from you.\n\nThis reinjection of your public key inside of the ROM now requires you to reseal remote attestation secrets (TOTP in form of a Qr Code, HOTP with your USB Security dongle for green blinking at each reboot), for which the HOTP step requires to seal secret inside of USB Security dongle (through `GPG Admin PIN`).\n\nIf you realized your public key expired because you upgraded dom0 components and attempted to sign /boot content with an expired keypair, you will need to detach sign /boot content digest manually by going under Heads `Settings ->Update checksums and sign all files in /boot` menu option, which will prompt for your `GPG User PIN` as usual to create the detached signed digest.\n\nThen next default boot attempt will require you to select a new boot option, which will require of you to type your `Disk Recovery Key passphrase` (do this only in the absence of prying eyes, please. The `Disk Recovery Key passphrase` should never be typed in insecure environments) to renew/change your `Disk Unlock Key passphrase`, and finally sign your new boot options with your `GPG User PIN`.\n\n## Publish your public key to public keyservers\n\nAs you probably originally done to have interlocutors find you easily, you should (re-)publish your public key to public keyservers now, so that the updated public key is downloaded per interlocutors when they see that your public key expired. Don't worry, this is easily done for most use cases, where the most easy way to communicate by email these days is through [Thunderbird, where USB Security dongle's owners need to do some manual steps to deal with their smartcards since Enigmail functions were integrated.](https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards#Allow_the_use_of_external_GnuPG)\n\nThat requires you to get that public key from your sys-usb[-dvm] AppVM and look into your external disk on which you exported your public key into. Copy that public key to all AppVMs (Files QubesOS application, open sdcard/USB disk, then right-click on your public key and select `Copy to other AppVM....`\n\nIn the general use case where that public key is to be used in e-mail exchanges, you have to import that key into Thunderbird prior of using it, while also marking that key trusted into keyring. Note that you also have to explicitely pass your USB Security dongle into the AppVM where it will be used, since each encryption will require you to encrypt from that USB Security dongle, requiring you to type your `GPG User PIN` when encryption/signing occurs.\n\nThen, for other users to be able to use your public key, you have to share that public key to them for them to use it.\n\nIt can easily be done through:\n\n*   Sending it by e-mail prior of first encrypted communication (impractical)\n\n*   Publishing that public key to keyservers from a browser ([1](https://keys.openpgp.org/), [2](http://hkps.pool.sks-keyservers.net/))\n\n*   Pushing that public key to keyservers from command line ([out of scope of this article](https://www.gnupg.org/gph/en/manual/x457.html)).\n\n[More information on GPG best practices.](https://riseup.net/en/gpg-best-practices)"
		},
		{
			"post_id": 42,
			"title": "Experiments with Guix build system and Heads",
			"date_published": 1593781004.7,
			"body": "**_Raw notes_**\n\nIn my use case, which relies on QubesOS and minimal TemplateVM duplications, I decided to go the AppVM way, relying on peristent storage overlay to setup a guix AppVM without having to clone parent TemplateVM.\n\nI created an AppVM relying on debian-10 template.\n\nPrior of installing guix, I created the QubesOS persistent file:\n\n```\nsudo mkdir -p /rw/config/qubes-bind-dirs.d\nsudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n```\n\nWith this content:\n\n```\nbinds+=( '/var/guix' )\nbinds+=( '/gnu/store' )\nbinds+=( '/etc/guix' )\nbinds+=( '/etc/systemd/system/guix-daemon.service' )\n```\n\nDownloaded the guix-installer script following this [guide.](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html)\n\nThen made QubesOS AppVM aware of the persistent overlay it needed to map with this command:\n`sudo /usr/lib/qubes/init/bind-dirs.sh`\n\nModified `/etc/systemd/system/guix-daemon.service`\n\nso that the build user is `audio`:\n\n```\n# This is a \"service unit file\" for the systemd init system to launch# 'guix-daemon'.  Drop it in /etc/systemd/system or similar to have# 'guix-daemon' automatically started.\n[Unit] Description=Build daemon for GNU Guix\n[Service] ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=audio Environment='GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale' LC_ALL=en_US.utf8 RemainAfterExit=yes StandardOutput=syslog StandardError=syslog\n# See https://lists.gnu.org/archive/html/guix-devel/2016-04/msg00608.html# Some package builds (for example, [go@1.8.1](mailto:go@1.8.1)) may require even more than\n# 1024 tasks.\nTasksMax=8192\n[Install] WantedBy=multi-user.target\n```\n\nThen we created a channel file for guix to know what the builder to build for with the content of [https://github.com/daym/heads-guix/blob/wip/README.md](https://github.com/daym/heads-guix/blob/wip/README.md)\n\n`vim ~/.config/guix/channels.scm`\n\nPut the content in:\n\n```\n(list (channel\n        (name 'guix)\n        (url \"https://git.savannah.gnu.org/git/guix.git\")\n        (branch \"master\"))\n      (channel\n        (name 'heads)\n        (url \"https://github.com/daym/heads-guix.git\")\n        (branch \"wip\")))\n```\n\nThen build:\n\n`guix pull`\n\n_**Raw history**_\n\n```\nuser@guix:~$ history\n    1  sudo mkdir -p /rw/config/qubes-bind-dirs.d\n    2  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n    3  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n    4  sudo reboot\n    5  cd /tmp\n    6  wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n    7  chmod +x guix-install.sh\n    8  ./guix-install.sh\n    9  sudo ./guix-install.sh\n   10  sudo wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n   11  sudo ./guix-install.sh\n   12  sudo su\n   13  sudo ./guix-install.sh\n   14  vim guix-install.sh \n   15  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n   16  vim guix-install.sh \n   17  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n   18  vim guix-install.sh \n   19  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n   20  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n   21  sudo halt\n   22  sudo su\n   23  guix\n   24  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n   25  which guix\n   26  guix\n   27  unshare -m /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild \n   28  sudo unshare -m /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild \n   29  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix package -i guix\n   30  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n   31  sudo ./guix-install.sh\n   32  wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n   33  sudo ./guix-install.sh\n   34  chmod +x ./guix-install.sh \n   35  sudo ./guix-install.sh\n   36  wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n   37  sudo su\n   38  sudfo ./guix-install.sh \n   39  sudo ./guix-install.sh \n   40  sudo halt\n   41  ls /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n   42  sudo /usr/lib/qubes/init/bind-dirs.sh\n   43  ls /rw/bind-dirs\n   44  sudo /usr/lib/qubes/init/bind-dirs.sh\n   45  sudo ./guix-install.sh \n   46  sudo bash \"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\"\n   47  sudo bash -C \"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\"\n   48  man bash\n   49  sudo bash wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n   50  sudo bash $(wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -)\n   51  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n   52  sudo vim /etc/systemd/system/guix-daemon.service\n   53  guix --help\n   54  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n   55  sudo /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n   56  systemctl\n   57  systemctl| grep guix\n   58  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n   59  ps faux|grep guix\n   60  systemctl |grep guix\n   61  cat /etc/systemd/system/guix-daemon.service\n   62  ps faux|grep guix\n   63  cat /etc/systemd/system/guix-daemon.service\n   64  cat /var/log/messages\n   65  sudo cat /var/log/messages\n   66  sudo cat /var/log/messages|grep -i guix\n   67  ls /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \n   68  ls /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon -al\n   69  ls  /var/guix/profiles/per-user/root/guix-profile/lib/locale\n   70  ls /var/guix/profiles/per-user/root/guix-profile/lib/locale\n   71  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n   72  ls /var/guix/profiles/per-user/root/*\n   73  ls /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix-daemon \n   74  ls /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix-daemon -al\n   75  sudo cat /var/log/messages\n   76  sudo journalctl \n   77  ls /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix-daemon -al\n   78  cd /var/guix\n   79  ls\n   80  ls /var/guix/profiles/per-user/root/current-guix\n   81  ls /var/guix/profiles/per-user/root/current-guix -al\n   82  ls /var/guix/profiles/per-user/root\n   83  ls /var/guix/profiles/per-user/root -al\n   84  ls /var/guix/profiles/per-user/root/current-guix\n   85  ls /var/guix/gcroots/profiles/per-user/root/current-guix -al\n   86  sudo vim /rw/config/qubes-bind-dirs.d/50_user.conf\n   87  cat /rw/config/qubes-bind-dirs.d/50_user.conf \n   88  sudo vim /etc/systemd/system/guix-daemon.service\n   89  systemctl |grep guix\n   90  cat /etc/systemd/system/guix-daemon.service\n   91  /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild\n   92  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild\n   93  sudo ps faux| grep guix\n   94  rm -f /var/guix/daemon-socket/socket\n   95  sudo rm -f /var/guix/daemon-socket/socket\n   96  /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild\n   97  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild\n   98  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild &\n   99  ps faux|grep guix\n  100  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  101  cat /etc/group\n  102  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=nogroup &\n  103  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  104  cat /etc/group |grep -v ':$'\n  105  sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=audio &\n  106  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  107  vim ~/.bashrc \n  108  guix package --search-paths -p \"/home/user/.guix-profile\"\n  109  vim ~/.config/guix/channels.scm\n  110  mkdir -p ~/.config/guix/\n  111  vim ~/.config/guix/channels.scm\n  112  which guix\n  113  ls /usr/local/bin/guix -al\n  114  which guix\n  115  guix pull\n  116  ls /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  117  guix pull\n  118  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  119  ps faux|grep guix\n  120  kill 2298 2299 2312  2313\n  121  sudokill 2298 2299 2312  2313\n  122  sudo kill 2298 2299 2312  2313\n  123  /gnu/store/fxryl7gdzx8rwsx1dagjdibj23higwsf-profile/bin/guix package -i guix\n  124  cat /rw/config/qubes-bind-dirs.d/50_user.conf\n  125  cat /etc/systemd/system/guix-daemon.service\n  126  systemctl guix-daemon\n  127  systemctl restart guix-daemon\n  128  sudo systemctl restart guix-daemon\n  129  systemctl status guix-daemon\n  130  guix build hello\n  131  guix pull\n  132  df -h\n  133  guix pull\n  134  guix build heads-busybox\n  135  guix build\n  136  guix pull\n  137  guix pull --news\n  138  guix build\n  139  guix build --help\n  140  guix build status\n  141  guix list\n  142  guix -help\n  143  guix --help\n  144  guix show\n  145  guix search heads\n  146  which guix\n  147  ls /home/user/.guix-profile/manifest \n  148  cat /home/user/.guix-profile/manifest \n  149  cat user@guix:/var/guix$ guix build heads-busybox\n  150  guix build: error: heads-busybox: unknown package\n  151  cat ~/.config/guix/channels.scm\n  152  guix pull\n  153  hash guix\n  154  which guix\n  155  vim ~/.bashrc\n```"
		},
		{
			"post_id": 41,
			"title": "N7105 adventures (t0lte)",
			"date_published": 1591142226.5,
			"body": "The SGH-I317 is a [Canadian/USA phone supporting basic LTE bands](https://redmine.replicant.us/projects/replicant/wiki/Exynos4412Devices) for both countries.\n\nTickets have been opened so that [encrypting gets supported](https://gitlab.e.foundation/e/backlog/-/issues/174), while [Replicant IRL will eventually be brought mainstream in LineageOS](https://redmine.replicant.us/projects/replicant/wiki/SamsungGalaxyBackdoor) and that [/e/'s OpenTask respects EteSync requirements](https://github.com/etesync/android/issues/113).\n\nMore to come. Phone is stable, [Orbot finally is stable on LineageOS 14.1 per past bug reports](https://github.com/guardianproject/orbot/issues/308). NetGuard permits to force all traffic to Orbot.\n\nAdventure continued and finished here (WORKS!!!!)\n[https://gitlab.e.foundation/e/backlog/-/issues/174](https://gitlab.e.foundation/e/backlog/-/issues/174)"
		},
		{
			"post_id": 40,
			"title": "I9305 adventures",
			"date_published": 1585157149.4,
			"body": "Random notes\n\n[https://forum.xda-developers.com/galaxy-s3/development-i9305/recovery-i9305-cwm-philz-twrp-versions-t2694249](https://forum.xda-developers.com/galaxy-s3/development-i9305/recovery-i9305-cwm-philz-twrp-versions-t2694249)\n\nTo use Odin in Windows 10 under QubesOS:\n\nPass all USB devices to StandaloneVM. Revoke strict reset\n\n[Odin:](https://forum.xda-developers.com/galaxy-s3/development-i9305/recovery-i9305-cwm-philz-twrp-versions-t2694249) I9305XXUFQG1_I9305FTMFQG1_FTM.zip\nThen oDin flash recovery, boot into recovery, factory reset and install:\n\n[https://images.ecloud.global/dev/i9305/](https://images.ecloud.global/dev/i9305/%5B%5D(https://nelenkov.blogspot.com/2015/06/decrypting-android-m-adopted-storage.html))\n\nThen recovery factory reset, delete data, reboot.\n\nDecrypting old sdcard into new phone:\n[Decrypting Android Adopted storage](https://nelenkov.blogspot.com/2015/06/decrypting-android-m-adopted-storage.html)\n\nEFS was corrupted and had to be remade through samsung pro tool from z3x box. Note: older version of the tool needed to be used since newer refuses to start in virtualized environement.\n\nReflashed I9305_XXUFOB2_XEFFOB2 availabel through z3x firmwares.\n\nResult in Canada: 4g not available, 3g speed of 52kbps.... No indoor connection whatsover. Will try other basebands....\n\nTo be tested (time to understand clearly their versioning, i'm lost)\nI9305_XXUFOB2_XEFFOB2 (01/06/2017, 4.84k downloads)\n\nI9305_XXUEMKC_MGFEML1 (01/06/2017, 1.35k downloads)\n\nI9305XXUFOL2_I9305DTMFOL2 (1/11/2016, 3.79k downloads)\n\nI9305_XXUFOL2_DTMFOL2 (1/11/2016, 8.98k downloads)\n\nI9305XXALI5_I9305EVRALI5 (6/18/2014, 10.04k downloads)\n\nTested:\n\nI9305_XXUFOB2_XEFFOB2 -> Slow 50kbit 3g connection. No network indoor....\n\nFollowing this page:[https://forum.xda-developers.com/galaxy-s3/development-i9305/modemi9305-n-tkk-4-4-x-flashable-modems-t3296456](https://forum.xda-developers.com/galaxy-s3/development-i9305/modemi9305-n-tkk-4-4-x-flashable-modems-t3296456) latest radio is supposed to be: XXUFPE1-FTM-I9305XXUFPF2 downloadable from here: [https://mega.nz/folder/Ih0TySJb#GJhP97EFLPCM_cdKpKfhew/folder/ZtMBFLLC](https://mega.nz/folder/Ih0TySJb#GJhP97EFLPCM_cdKpKfhew/folder/ZtMBFLLC)\n\nResult: No network as of yet... And explanation is pretty simple: the required bands are not supported. Ordered a SGH-i317 [https://redmine.replicant.us/projects/replicant/wiki/Exynos4412Devices](https://redmine.replicant.us/projects/replicant/wiki/Exynos4412Devices) which is a t0lte device like the N7105 but supports at least the 3 LTE bands that can be used here in Canada https://www.frequencycheck.com/carrier-compatibility/ojNOTv/samsung-sgh-i747-galaxy-s-iii-lte/bell-wireless-canada"
		},
		{
			"post_id": 39,
			"title": "Using dmsetup to snapshot boot partition",
			"date_published": 1585112999.9,
			"body": "[https://github.com/tasket/wyng-backup/issues/63](https://github.com/tasket/wyng-backup/issues/63)\n\nNot implementent.\nGoal would be to be able to have /boot content in LVM, snapshotted with wyng just like the root (dom0) volume is at shutdown, so that delta changes can be backed up just like any other LVMs, later on permitting to have emergency restore from Heads."
		},
		{
			"post_id": 38,
			"title": "How to reset QubesOS user password under Heads and QubesOS emergency recovery mode of ISO boot",
			"date_published": 1583953414.9,
			"body": "Enter Heads recovery\ntype r frenetically until you get a prompt\nInsert OEM provided sdcard in sdcard slot\nmount-sdcard\nSelect 2nd partition\nusb-init\nBoot QubesOS installation media\nSelect QubesOS ISO\nLet it verify integrity against provided distribution signature file\nSelect option: 3\\. Rescue a Qubes system:\nType: '3'\nType: 'Enter' key\nType: 'y'\nType: 'Enter' key\nScreen will flick, be patient a bit (10 seconds)\nBoots QubesOS recovery environement LiveCD.\nOn proposed Rescue prompt:\nType: '3' (Skip to shell)\nType : 'Enter'\nOn QubesOS recovery shell, type:\ncryptsetup luksOpen /dev/sda2 qubes_dom0\nType your chosen Disk Recovery Key passphrase\nvgchange -ay qubes_dom0\nlvchange -ay qubes_dom0\nmkdir /mnt/root\nmount /dev/qubes_dom0/root /mnt/root\nchroot /mnt/root /bin/bash\nsource /etc/profile\npasswd user\nSelect new user passphrase (FOR USER:user TO LOGIN INSIDE QUBESOS)\nType:\nexit\n'Enter' key\nreboot"
		},
		{
			"post_id": 36,
			"title": "GPG key transitioning statement",
			"date_published": 1577762323.2,
			"body": "Date: 30/12/2019, based on [RiseUp Key Transition guide](https://riseup.net/en/security/message-security/openpgp/key-transition)\n\nFor a number of reasons[0], including the fact that old key was RSA 2048 bits, I have recently set up a new OpenPGP key, and will be transitioning away from my old one.\n\nThe old key will continue to be valid for some time (though expired as 31/12/2019), but I prefer all future correspondence to come to the new one.\n\nThe old key was:\n\n```\npub   rsa2048 2018-01-05 [SC] [expired: 2019-12-31]\n      A2444D06D3CAFA92F68A21E679C78E6659DB658F\nuid           [ expired] Insurgo, Technologies Libres <insurgo@riseup.net>\n```\n\nAnd the new key is:\n\n```\npub   rsa4096 2019-12-30 [SC] [expires: 2020-12-29]\n      ACF4B7893D4D05C8F18069BAE7B4A71658E36A93\nuid           [ultimate] Insurgo Technologies Libres / Open Technologies <insurgo@riseup.net>\n```\n\nTo fetch the full key from a public key server, you can simply do:\n\n`gpg2 --fetch-keys 'http://hkps.pool.sks-keyservers.net/pks/lookup?op=get&fingerprint=on&search=0xACF4B7893D4D05C8F18069BAE7B4A71658E36A93'`\n\nIf you already know my old key, you can now verify that the new key is\nsigned by the old one:`gpg2 --check-sigs '0xA2444D06D3CAFA92F68A21E679C78E6659DB658F'`\n\nIf you don't already know my old key, or you just want to be double\nextra paranoid, you can check the fingerprint against the one above:`gpg2 --fingerprint '0xACF4B7893D4D05C8F18069BAE7B4A71658E36A93'`\n\nAdditionally, I highly recommend that you implement a mechanism to keep your key material up-to-date so that you obtain the latest revocations, and other updates in a timely manner. You can do regular key updates by using parcimonie[1] to refresh your keyring. Parcimonie is a daemon that slowly refreshes your keyring from a keyserver over Tor. It uses a randomized sleep, and fresh tor circuits for each key. The purpose is to make it hard for an attacker to correlate the key updates with your keyring.\n\nI also highly recommend checking out:\n\n[https://riseup.net/openpgp/best-practices](https://riseup.net/openpgp/best-practices)\n\nPlease let me know if you have any questions, or problems, and sorry\nfor the inconvenience.\n\nInsurgo Technologies Libres / Open Technologies\n\n0\\. [https://www.debian-administration.org/users/dkg/weblog/48](https://www.debian-administration.org/users/dkg/weblog/48)\n1\\. [https://gaffer.ptitcanardnoir.org/intrigeri/code/parcimonie/](https://gaffer.ptitcanardnoir.org/intrigeri/code/parcimonie/)"
		},
		{
			"post_id": 34,
			"title": "How to use rsync to maintain remote disk images in sync?",
			"date_published": 1575412055.3,
			"body": "Get rsync, patch it for read/write device support, and install locally\n\n```\nwget http://mirrors.ibiblio.org/rsync/src/rsync-3.1.3.tar.gz\nwget http://mirrors.ibiblio.org/rsync/src/rsync-patches-3.1.3.tar.gz\ntar zxvf rsync-3.1.3.tar.gz\ntar zxvf rsync-patches-3.1.3.tar.gz\ncd rsync-3.1.3/patch -p1 -F3 < patches/write-devices.diff\npatch -p1 -F3 < patches/copy-devices.diff\n./configure --prefix=$HOME\nmake\nmake install\necho \"PATH=$HOME/bin:$PATH\" >> ~/.bashrc && source ~/.bashr\n```\n\n## Prior steps\n\n*   make sure you passed IO to the destination AppVM\n\n*   sudo cp -r ~/.ssh /root\n\n*   su and replace path to make sure that you have write access to device and remove sudo in the following commands\n\n## To store disk on local storage (will redo whole image):\n\n`sudo ~/rsync-3.1.3/rsync --copy-devices --inplace --no-whole-file --ignore-times /dev/xvdj /mnt/Reference-250GiB.raw --stats --progress --debug=all`\nTo restore local image to disk:\n\n`sudo ~/bin/rsync --inplace --partial --no-whole-file --ignore-times --write-device /run/media/user/2TB/Reference-250GiB.raw /dev/xvdi --stats --progress --debug=all`\n\n`sudo ~/rsync-3.1.3/rsync --copy-devices --inplace --partial --no-whole-file --ignore-times --write-devices /mnt/Reference-250GiB.raw /dev/xvdj --stats --progress --debug=all`\n\n`To backup local image to remote ssh:`\n\n```\nsudo ~/bin/rsync --inplace --checksum --partial /run/media/user/2TB/Reference-250GiB.raw insurgo@sshhost:/home/insurgo/new.raw --stats --progress\n```\n\n```\nsudo ~/rsync-3.1.3/rsync --write-devices --direct-io /mnt/Reference-250GiB.raw /dev/xvdj --stats --progress --debug=all\n(Client) Protocol versions: remote=31, negotiated=31\n(Server) Protocol versions: remote=31, negotiated=31\n[sender] change_dir(/mnt)\nsend_files starting\nserver_recv(2) starting pid=1980\nget_local_name count=1 /dev/xvdj\n[Receiver] change_dir(/dev)\ngenerator starting pid=1980\ndelta-transmission disabled for local transfer or --whole-file\nrecv_generator(xvdj,0)\nsend_files(0, /mnt/Reference-250GiB.raw)\nReference-250GiB.raw\n32,768 0% 0.00kB/s 0:00:00\ngenerate_files phase=1\n173,377,912,832 69% 209.40MB/s 0:05:57\n```\n\n## To store backup on remote server:\n\n`sudo ~/bin/rsync \"--rsync-path=/home/insurgo/bin/rsync\" --copy-devices /dev/xvdi insurgo@sshhost:/home/insurgo/test.raw --stats --progress`\n\nIf on a bad internet connection:\n\n`while ! sudo ~/bin/rsync \"--rsync-path=/home/insurgo/bin/rsync\" --copy-devices /dev/xvdi insurgo@sshhost:/home/insurgo/test.raw --stats --progress --compress-level 9; do sleep 5; done`\n\n## To restore backup on local disk (to be tested):\n\n`~/bin/rsync \"--rsync-path=/home/insurgo/bin/rsync\" -SP --write-device insurgo@sshhost:/home/insurgo/test.raw /dev/xvdi`\n\nTODO: test with the following:\n\n`sudo ~/bin/rsync \"--rsync-path=/home/insurgo/bin/rsync\" -w insurgo@sshhost:/home/insurgo/test.raw /dev/xvdi --stats --progress`\n\nAuto-retry (testing): not sure about compression gains at all.\n\n`while ! /home/user/rsync-3.1.3/rsync \"--rsync-path=/home/insurgo/bin/rsync\" insurgo@sshhost:/home/insurgo/test.raw --write-devices -SP --inplace --checksum /dev/xvdi --stats --progress --compress-level 9; do sleep 5; done`"
		},
		{
			"post_id": 33,
			"title": "ZeroNet ClearNet proxies are unstable....",
			"date_published": 1572789988.6,
			"body": "I'm not sure where this blog will go from here, without it being continuously reachable from ClearNet in the past 3 months.\n\nI was using ZeroNet to host this blog in the goal of it to be decentralized and accessible from everyone, without the content being a subject of censorship, with multiple entry points for users not necessarily coming from Qubes-Whonix as a start.\n\nMeanwhile, ClearNet proxies died in the past months, to the point where no ClearNet proxies were up to access ZeroNet (for +-2 months).\n\nIssues in this regard have been [raised and closed.](https://github.com/AceLewis/AceZeroProxy/issues/12)\n\n[Metaproxy pointing to this blog is now using a single ClearNet proxy](https://zero.acelewis.com/#1DMb3CV66qZPwJqkgm4z12nu8BrAwDoD4g/), [which is unreliable: 0net.io](https://0net.io/1DMb3CV66qZPwJqkgm4z12nu8BrAwDoD4g/)\n\nThis opens up to a single question: Why so few ClearNet proxies?"
		},
		{
			"post_id": 32,
			"title": "Signal-desktop-beta now with conversations search",
			"date_published": 1567268138.8,
			"body": "# Why is it important\n\nIn QubesOS, Signal is a good way to pass secrets through ephemeral messages to your phone, that you may (should) not trust.\n\nWith KeepassXC installed in vault's template, sharing secrets is as simple as copying/pasting those secrets to desired application while never having to remember them. As a reminder, **there is no better secrets then the secrets you can't leak yourself, simply because you don't know them.**\n\nWith KeepassXC, this means that on the mnemonic side of your brain, yes, you still have to remember your user password of your laptop, your e-mail password in case you need to recover accounts... But you do not have to remember those 10000 unique website/service passwords/passphrases your online needs require anymore.\n\nSignal finally pushed history search in their Signal-Desktop-Beta. This means that all Signal-Desktop archived conversations can now be searched for those meeting notes, personal notes and other pertinent information you previously had to infinitely scrolled for to find that information you were not able to find before. You can delete your messages on your phone, while having them saved on your Signal-qube for archive.\n\nFrom now on, you just have to make sure to use keywords of your own to make this history easily searchable for your future self, if you didn't do it before. You know, those \"remember\", \"todo\", \"call\", ''meeting\", 'important\" keywords you used before but couldn't search for. Now you can.\n\n## Reminder for Signal ephemeral message usage\n\nPlease remind yourself that you and your interlocutor are equally responsible to throttle conversation confidentiality. Signal implements this through ephemeral messages. As every muscle, privacy needs practice to make perfect.\n\nAs you go in a conversation and realize you are going to share private things, there is nothing preventing you to put ephemeral messages to 1 minute or even 5 seconds if you feel like so.\n\nThe less you trust your own or third party devices, the most ephemeral exchanged messages should be used.\n\nNon-ephemeral messages are now searchable. You can now search contextual information around them, while ephemeral messages won't, of course, be searchable, as designed.\n\n# How to upgrade\n\n## In debian-10 template\n\n`sudo apt-get install signal-desktop-beta`\n\n`sudo halt`\n\n## In dom0\n\n### Backup your current Signal-qube in case things go wrong\n\n`qvm-clone Signal-qube Signal-qube-backup`\n\n## In your Signal-qube\n\n### If you want to import your messages into Signal-Desktop-Beta\n\n(freshly rebooted to take into account new template)\n\n`mv \"~/.config/Signal\" \"~/.config/Signal Beta\"` signal-desktop-beta`\n\nLet it upgrade schemas, load your messages....\n\n### If you want to start a clean sync of messages, linking Signal-Desktop-Beta to your phone (multiple devices can be linked)\n\nJust launch `signal-desktop-beta`and link it to your phone.\n\nEnjoy!\n\n# In case things go wrong with the beta\n\nIf things go wrong, you still have your old working copy of Signal-qube in Signal-qube-backup!\n\nDidn't play with the theory in practice, but Signal messages being kept on Signal's server and your client keeping track of the last timestamp of conversations synchronized, you should be able to just pop your backup qube and launch the stable signal app as you used to do, and messages should get synchronized (while remembering that those messages are stored on a server we don't know how it is implemented neither can we inspect the source code or know who are trying to break into them).\n\n# Securely copying (text) secrets in QubesOS\n\n### In Vault, with KeepassXC opened (and installed)\n\n`CTRL-C` entry passphrase\n\n`CTRL-SHIFT-C` to pass it securely to dom0\n\n### In destination qube (Signal-qube)\n\n`CTRL-SHIFT-V` to copy it securely from dom0\n\n`CTRL-V` to paste it in Signal (notes to self with ephemeral messages set to 5 minutes)\n\n# Don't forget to read QubesOS documentation\n\n[Intro](https://www.qubes-os.org/intro/)\n\n[Video Tours](https://www.qubes-os.org/video-tours/)\n\n[FAQ](https://www.qubes-os.org/faq/)\n\n[Documentation](https://www.qubes-os.org/doc/)"
		},
		{
			"post_id": 31,
			"title": "New USA made Librem Keys on their way!!!!",
			"date_published": 1566332045,
			"body": "Thanks for all your support and interest!!!! I didn't expect that much interest, questions and suggestions. This is awesome! I'm doing my best to keep up!\n\nA new massive batch of Librem Keys was ordered on the 12th and is coming my way.\n\nI should receive them this week. The price will be adjusted since the costs have been lowered a bit.\n\nMeanwhile, all orders passed after the 16 won't be ready to ship until reception of the keys.\n\nThanks for your understanding.\n\nInsurgo"
		},
		{
			"post_id": 30,
			"title": "Physical Tamper evidence - Blink comparison of taken pictures",
			"date_published": 1565373321.7,
			"body": "# Actual work being done\n\nThe PrivacyBeast X230 comes with its main screw, attaching the keyboard and palmrest to the case, sealed with Insurgo's sticker and high contrast nail polish applied to its edges. The X230 is built in a way that makes it quite easy to notice if the SPI flash chips have been manually programmed before and if the motherboard has been touched, thanks to the water drain plastic film covering the motherboard and permitting accidental water spills to drain under the laptop.\n\nI can consequently easily notice when I reprogram the SPI chips if i'm the first going there; the plastic film being perfectly flat and solidly glued to the SPI chips. So unless someone with high budget replaced that film to cover his tampering, I know I'm the first one going there. I reprogram the SPI chips, I screw back the case and then apply Insurgo's sticker and nail polish on the sticker edge on that main screw, being the only way to get into the case.\n\nBut that nice tamper proofing initiative doesn't help much right now, since I haven't found any good smartphone application applying blink comparison techniques which would permit me to send customers a cropped reference picture of how the laptop was prior to shipping, so they could easily compare with it, whenever in doubt someone could have intruded their laptop to insert a [modchip](https://media.ccc.de/v/35c3-9597-modchips_of_the_state) while in transit or while the laptop was left out of sight.\n\nThanks to the measured boot of Heads, the firmware and boot files are still tamper evident, but if [something like **spispy PoC**](https://github.com/osresearch/spispy) was inserted and bypassed TPM measurements and responses, there is still some possibilities left that someone could have inserted a modchip in the laptop that could make it lie about its state.\n\n[The idea of tamper evidence stickers, combined with nail polish, isn't new and practical application is quite easy.](https://trmm.net/Glitter)\n\n[Researchers confirm it's the easiest and most efficient way to make intrusions tamper evident.](https://www.wired.com/2013/12/better-data-security-nail-polish/)\n\n**_But no smartphone application facilitates this tamper evident technology accessibility to everyone...yet._**\n\n# Are you up to the challenge of making such blink comparison prototype available on Android?\n\nFirst version:\n\n*   Autocropping of borders, making the image the same size for easy human blink comparison (we're naturally good at this). A bit like CamScanner is doing it on Android, but keeping the same size, auto-cropped original picture as a reference, and rapidly switching to taken picture.\n\nMore advanced version:\n\n*   Lighting difference cancelation\n\n*   Automatic blink comparison and difference highlightenments\n\n    *   [Yahoo blink-diff](https://github.com/yahoo/blink-diff)"
		},
		{
			"post_id": 29,
			"title": "Sdcard issues while deploying",
			"date_published": 1565024718,
			"body": "Hello, early adopters.\n\nMea culpa.\n\nI didn't test the PrivacyBeast Re-Ownership process on a lot of sdcards.\n\nDoing all those orders, I realized that sdcard and MMC/SDHCI controller technology was not as stable then I thought. Reencrypting content on them resulted in IO errors which didn't happen inside QubesOS on the same sdcards, leading to search for software causes.\n\nA little bit of patience from you guys is really appreciated. Your orders are prepared, but shipping will be delayed a little.\n\nThe Re-Ownership process, requiring reencryption of sdcard content for provisioned secrets, is failing on a lot of sdcards. The old, Linux LTS supported kernel (2017), distributed under Heads, is the culprit.\n\n[I'm working on integrating the latest kernel into Heads to fix the issue.](https://github.com/osresearch/heads/issues/599#issuecomment-518301738)\n\nUPDATE: Done. See comments."
		},
		{
			"post_id": 28,
			"title": "Streamlining OEM/User Heads / Intel ME reprogramming & Re-Ownership activation",
			"date_published": 1564248051.8,
			"body": "For this post, I take into account that flashrom, me_cleaner and Heads have already been build on fedora 30 (for ifdtool to be present to unlock Intel ME). The flash and boot rom (x230-flash and coreboot.rom) reproducible roms can be downloaded [here.](https://gitlab.com/tlaurion/heads/-/jobs/)\n\nSo lets backup SPI roms, clean ME, and flash back roms in SPI flashes. This process is what I'm currently using, but that process will be improved in time and upstreamed into Heads documentation.\n\n[Here is a kit example for ch431a_spi that you can buy over ebay.](https://www.ebay.com/itm/CH341A-24-25-Series-EEPROM-Flash-BIOS-USB-Programmer-SOIC8-Clip-On-Board/392172396278)\n\n**Up SPI (4Mb boot ROM):**\n\nsudo ~/flashrom/flashrom -r ~/up.rom --programmer ch341a_spi -c \"MX25L3273E\" && sudo ~/flashrom/flashrom -v ~/up.rom --programmer ch341a_spi -c \"MX25L3273E\" && sudo ~/flashrom/flashrom -w ~/QubesIncoming/Insurgo/Certified/build/x230-flash/x230-flash.rom --programmer ch341a_spi -c \"MX25L3273E\" && sudo ~/flashrom/flashrom -v ~/QubesIncoming/Insurgo/Certified/build/x230-flash/x230-flash.rom --programmer ch341a_spi -c \"MX25L3273E\"\n\n**Down SPI (8Mb Intel ME ROM):**\n\nsudo ~/flashrom/flashrom -r ~/down.rom --programmer ch341a_spi -c MX25L6405 && sudo ~/flashrom/flashrom -v ~/down.rom --programmer ch341a_spi -c MX25L6405 && ~/heads/build/coreboot-4.8.1/util/ifdtool/ifdtool -u ~/down.rom && python ~/me_cleaner/me_cleaner.py -r -t -d -S -O ~/cleaned_me.rom ~/down.rom.new --extract-me ~/extracted_me.rom && sudo ~/flashrom/flashrom -w ~/cleaned_me.rom --programmer ch341a_spi -c MX25L6405\n\nThen boot the X230 with a USB thumb drive containing [extracted artifacts downloaded from latest QubesOS_Certified branch build here.](https://gitlab.com/tlaurion/heads/-/jobs/) From the recovery console:\n\n`mount-usb`\n\n`flash.sh /media/path/to/coreboot.rom`\n\nVoila! You have a PrivacyBeast X230 equivalent that can work on all model variations, requiring you to plug a Librem Key on next boot. The first prompt will require you to inject a public key inside of the rom. If you don't already own one, the menu will propose your to Factory Reset a Librem Key, which will accompany you in the whole process and will inject your public key in the ROM for you.\n\nOnce it's done, you can install QubesOS from the USB drive, at the condition of putting both ISO and signing files in the root of the disk:\n\n[ISO](https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.2-rc1-x86_64.iso)\n\n[Signing file](https://mirrors.edge.kernel.org/qubes/iso/Qubes-R4.0.2-rc1-x86_64.iso.asc)\n\nOr clone the disk image from clonezilla, after having injected your public key in the rom and [having signed the ISO image yourself](https://github.com/osresearch/heads/pull/551/files#diff-d1ac0113778bfe516c8b663a9ebb4cf8R18).\n\nEnjoy!"
		},
		{
			"post_id": 27,
			"title": "Experiments on the Note II (N7100 [codename t03g], still maintained LineageOS 14.1 for MicroG by e.foundation!!!",
			"date_published": 1564190273.5,
			"body": "A couple of months ago, I got really disappointed from LineageOS dropping support on the most secured phones currently available: i9300, i9305, n7100\\. Understandable choice of theirs because of space constraints of having forever growing number of phones to support ([even though now on ipfs...](https://lineageos-on-ipfs.com/)), they decided to drop support of \"unmaintained\" 14.1 branch phones, [including the i9300 that was still the 5th most used phone in their statistics (Android 7.1.2) when they dropped support](https://web.archive.org/web/20190311044820/https://stats.lineageos.org/), even though that branch still received/still receives security fixes from community work. [Even though really important work was in the pipeline to free even further the _midas_ platform.](https://blog.forkwhiletrue.me/posts/an-almost-fully-libre-galaxy-s3/)\n\nGot excited about the work done by **_/e/_** a couple of months ago, and then forgot their existence for a while, after having suggested them to base themselves on [LineageOS for MicroG](https://lineage.microg.org/) instead of LineageOS.\n\nGot even more excited when I saw Replicant was restarting their work to support those phones on [16.1 (Android 9),](https://redmine.replicant.us/projects/replicant/wiki/Porting_Replicant_to_Android_9/#LineageOS-16) [including the work done by forkbomb, referenced above, to push midas platform to become an even more libre platform from the booloader up](https://blog.forkwhiletrue.me/posts/an-almost-fully-libre-galaxy-s3/), while the top down work is currently underway by [Replicant](https://redmine.replicant.us/projects/replicant/wiki/Porting_Replicant_to_Android_9/#Devices-support). In term, that means that it could be possible to use the same kind of logic present under Heads to sign binaries between OTA upgrades (with a [SmartCard](https://www.linuxjournal.com/content/why-smart-cards-are-smart)) and use kexec to boot them once verified. It also means that HOTP could be used to seal measurements inside of a Librem Key. It opens possibilities to measured boot mechanisms on freer platforms, which radio and CPU are isolated from one another, while Replicant is reversing the radio and even graphic acceleration graphics, which is not even a plan for other projects/initiatives.\n\nMy i9300 reached its maximum capacity recently with current needs and threat model. Its memory of 1GB is not bearable anymore. I need to use two Signal accounts (Shelter permits control of Working profile). I need all my traffic (DNS/TCP) forced through Tor (NetGuard permits that, while being a superb pedagogical coach by letting the user know what traffic is being generated by used apps as they are used). I need to use Riot and be reachable at all times. I'm required to talk over Telegram with some cryptocurrentices guys that do not want to move to Signal nor Riot.\n\nThe i9300 is not able to fill those needs anymore. But the i9305 (LTE and 2GB) and the N7100 (3G and 2GB phablet with a pen!!!!) do.\n\n[The i9305 is the first NL funded Replicant work, attacking the i9305 model first, while the n7100 follows in the pipeline and the i9300 later on.](https://nlnet.nl/project/ReplicantUpdate/)\n\nSo long story short, I realized that /e/ is finally a _LineageOS for MicroG_ distribution. Exactly what I was using on my i9300 (which is also supported by them with weekly builds and OTA updates [here).](%5Bhttps://images.ecloud.global/dev/i9300/%5D(https://images.ecloud.global/dev/i9300/))\n\nSo my experiment on the **N7100** so far:\n\n*   The weekly builds are available [here for _N7100_](%5Bhttps://images.ecloud.global/dev/n7100/).\n\n*   The latest _TWRP_ doesn't support encrypted partitions properly. [3.2.3 does though, so downgrading is necessary.](https://dl.twrp.me/t03g/twrp-3.2.3-0-t03g.img.html)\n\n*   The data partition needs to be resized inside of _TWRP_ prior to encrypting the phone (done via wipe -> advanced wipe -> repair or change filesystem -> resize filesystem)\n\n*   ~~Default launcher (_Bliss_) doesn't play well with a work profiles. _KISS_ launcher is just amazing for my needs.~~ Edit: fixed [here](https://gitlab.e.foundation/e/apps/BlissLauncher/commit/f7b97b87b85363e47bae27acf2e9e35a04ed758e).\n\nMore to follow. Stay tuned!!!"
		},
		{
			"post_id": 26,
			"title": "QubesOS certified and preinstalled on Insurgo PrivacyBeast X230, now available!!!",
			"date_published": 1563539940.3,
			"body": "Public announcements:\n\n[QubesOS Announcement](https://www.qubes-os.org/news/2019/07/18/insurgo-privacybeast-qubes-certification/)\n[Twitter](https://twitter.com/QubesOS/status/1152071231081811974)\n[Facebook](https://www.qubes-os.org/news/2019/07/18/insurgo-privacybeast-qubes-certification/)\n\nFor those of you that would want to ask technical questions outside of Facebook/Google/Twitter channels, here would be a good place."
		},
		{
			"post_id": 24,
			"title": "I Can't comment on my own past blog posts, sorry",
			"date_published": 1563311143.4,
			"body": "Having this bug [https://github.com/HelloZeroNet/ZeroBlog/issues/75](https://github.com/HelloZeroNet/ZeroBlog/issues/75)\n\nEDIT: fixed now!"
		},
		{
			"post_id": 23,
			"title": "QubesOS Certified. Website ready....",
			"date_published": 1563309463.7,
			"body": "Time to comment on its content and things that are not clear enough for you!!!!\n\nhttps://insurgo.ca\n\nGive me all the feedback you want!\nQubesOS public announce will follow!"
		},
		{
			"post_id": 20,
			"title": "Windows OEM Licence clarification needed - Legal advices welcomed prior to deploy Windows 7 QubesOS TemplateVM with the PrivacyBeast",
			"date_published": 1560351163.7,
			"body": "A month ago, I tried to do a proof of concept and decided to try to create a Windows 7 Pro OEM (Citrix) QubesOS template and see if it was possible to activate it with Lenovo X230 Product Key on the back of my own, to be QubesOS certified, refurbished PrivacyBeast.\n\nNo surprise, the automatic activation failed within the TemplateVM. _But interestingly, following the [Windows Activation by phone worked](https://www.microsoft.com/en-us/Licensing/existing-customer/activation-centers)!_\n\nAs a result, [I am now questioning myself on the legal/privacy implications of deploying that Windows 7, non-activated, TemplateVM on to be sold PrivacyBeasts](https://github.com/QubesOS/qubes-issues/issues/3585#issuecomment-495819736).\n\nI find contradicting information online. For both Privacy and Legality.\n\nSome sources say that the [image needs to be Sysprep'ed to remove uniquely identifiable Windows installation ID](https://community.spiceworks.com/topic/347760-rearming-sysprep). Some other says that deploying non activated Windows copies (clones) are legally acceptable. **I would need a licensing legal GURU advice here.**\n\nThe other problem would be to not have uniquely identifiable Windows installation ID. Some Windows GURU around here that have some Powershell or other that would be launched on next boot to recreate that identifier? **I would need a Windows privacy GURU advice here.**\n\nDeploying Windows 7 TemplateVM would facilitate the QubesOS/Linux learning curve by permitting the user to install currently used softwares in the [TemplateVM](https://www.qubes-os.org/doc/templates/), while creating required compartments that would depend on it, making only \"Documents and Settings\" prone to user errors while they learn the benefits of QubesOS preventive [compartmentalization architecture](https://www.qubes-os.org/doc/architecture/).\n\nThanks for your help, guys/gals.\n\nEDIT:\n\nIn QubesOS, the TemplateVM is instanciated in read only by the \"qube\" that used it as a template, discarding changes upon reboot. Installing a software (or malware) in the VM would be installed in an overlay survive that VM boot, but the TemplateVM wouldn't be touched at all and the changes be dismissed at reboot.\n\nActivating a copy of Windows, installing software, updates, or syspreping the image would require to be done in the TemplateVM itself for the state to be kept in across TemplateVM instantiations from VMs and across reboots.\n\n**Now, my real question is, for privacy needs**: _Does the image NEEDS to be sysprep'ed before being cloned to individual physical machines TO NOT SHARE some unique identification, bound to Windows Installation ID_?\n\nSince we are talking about a VM, the \"hardware\" linked to the installation will always be the same across physical deployments, so the drivers being deployed for QubesOS VM<->Xen hypervisor are required to properly support network and disk operations (qvm-copy, XEN drivers, etc). So no need to make that installation generalized, **_only not indentifiable. Does that change the process or commands implied?_**\n\nInsurgo"
		},
		{
			"post_id": 19,
			"title": "Adventures with payment gateways - Advices needed",
			"date_published": 1560294460.8,
			"body": "In the last month, I've been working on the e-commence side of my website to make it ready for launch.\n\nThis means dealing with Canada taxes, shipping extensions and dealing with shipping carriers... A long adventure I'm looking forward to have behind me.\n\nAt first, Stripe was recommended to me for it's simplicity and competitive costs.\n\nBut then, after doing tests, my designer and I went clueless on a glitch that was present on stripe embedded code on my website. It was impossible to enter credit card numbers... After a lot of searching, we come on this [post](https://wordpress.org/support/topic/fields-missing-at-checkout-issue-affects-100-percent-of-wc-stripe-sites/) which basically says that people behind a proxy (or Tor... sharing a same IP) may have problems using the payment gateway...\n\nAnd then today, I used Paypal to pay for something, which I haven't done for a long time and realized how their automatic system might be problematic for people behind a proxy/VPN/Tor. After having erased old phone numbers in my account, 2FA linked my new phone number and configured TOTP, I came on the same error even after validating my identity through a SMS sent to my phone to login. Paypal was \"unable to verify my identity\" when trying to pay, even though my identity was verified at login.\n\nCalled them. They resetted their system and said to me that I could go forward with my payment in 4 hours. 4 hours later I was on the phone again with them and... Basically, the non-dumb guy said to me \"You have to reset your password from an IP that is not shared for the process to work and reset your precedent login locations...\"\n\n**So my question to you guys is this: which payment gateway is Tor/VPN/proxy friendly and doesn't require geolocalization?**\n\nFrom a security perspective (not to be confounded with surveillance), nothing justifies that a user, which proves his identity by his password(something he knows) and confirms a 2FA on his phone (something he owns) should be required to disclose his geolocalization to pay for a service or a product.\n\nYet again. The billing address is linked to the credit card and home address, while the shipping address doesn't need to be the same as the billing address. But I'm curious. Is there something better to make a statement and force such system usage for the masses?\n\nChanges in payment systems:\n\n*   I decided to drop Paypal for the moment for their invasive politics.\n\n*   Elavon was chosen as the credit card gateway, and transfers funds under 48h on working days.\n*   Bitcoin address is a derivative of my main wallet address and changes for each payment. I receive an e-mail when the funds are transferred, else the transaction is cancelled after 24h.\n*   Monero is dropped until something interesting pops out. Manually concealing funds is time consuming and currently unmanageable."
		},
		{
			"post_id": 18,
			"title": "The most libre smartphones will be back!",
			"date_published": 1560292897.1,
			"body": "Back in March 2019, a sad news touched the privacy conscious people around the world: [LineageOS dropped support of all 14.1 supported devices](https://github.com/LineageOS/hudson/commit/b8cf20218fd7676d7904152531e0f1cacead740f). Understandable but still a really sad news.\n\nThat included the freedom defenders loved Galaxy S3 (I9300(GSM)/I905(LTE) and the Note 2 (N7100) devices, consequently also dropped from [microG for LineageOS](https://lineage.microg.org/), the project which permits to use Android without depending on Google's services to have a usable phone without completely compromising user's choices of application choices. EG: permitting the user to use Signal (dependent on Google's Cloud Messaging [push notifications])\n\n_**Why is it a big deal?**_\n\nBecause fully open source powered phones, permitting full user control over hardware, are [rare](https://nlnet.nl/project/ReplicantUpdate/). Replicant dropped support of Android maintenance on those devices a while ago. Even though the chipset of those [phones were to be even more liberated](https://blog.forkwhiletrue.me/posts/an-almost-fully-libre-galaxy-s3/), with the promise of being completely freed devices from the ground up, as opposed to be tracking devices by default, as all other currently manufactured phones with binary-blob initialized components and spywares installed without users knowing or having a possibility to know.\n\n[I tried to see where the efforts were put to continue to support those back and upstream to LineageOS.](https://github.com/CustomROMs/android_local_manifests_i9300/issues/1#issue-439401821)\n\n[AND THEN! Got pointed simultaneously by two different sources to Replicant being funded](https://nlnet.nl/project/ReplicantUpdate/) to port LineageOS up to 16.1 for those devices, [working on upstreaming it back](https://redmine.replicant.us/projects/replicant/wiki/Porting_Replicant_to_Android_9/#LineageOS-16) and include fourkbomb's work!\n\nKeep a genuinely curious eye on that!"
		},
		{
			"post_id": 17,
			"title": "OEM ReOwnership in Heads' Open Source Firmware - Time for review",
			"date_published": 1560095247.1,
			"body": "Currently doing last tests before sending E-mail to QubesOS for code review!\n\nYou own a Lenovo X230, a InPlace SPI programmer and a Librem Key/NitroKey Pro/NitroKey Storage?\n\nTime to make your X230 the most trustworthy laptop available and pair to what is to be the PrivacyBeast X230, to be certified by QubesOS!!!!\n\nThe additions to Heads in this PR are broad. But mainly aims to ease OEM deploy QubesOS preinstalled in a secured way, making the firmware and QubesOS installation tamper evident, so you are sure that the package you receive by mail is in the same state it was in when it left Insurgo's facility.\n\nThat addition easily transfers ownership from OEM to the user by replacing secrets first thing upon reception of hardware. Even if the OEM was asked to reveal those secrets, the user would know that the firmware and/or the /boot partition has been tampered with, making it untrustworthy.\n\nTake a peak [here!](https://github.com/osresearch/heads/pull/551#issuecomment-500158376)"
		},
		{
			"post_id": 16,
			"title": "ZombieLoad",
			"date_published": 1558533475.7,
			"body": "_This is a repost from [Insurgo's Facebook Page](https://www.facebook.com/InsurgoTech/posts/440668140055154)._\n\n#x86 processors/CPUs (#Intel, #AMD) need to be replaced by open source hardware alternatives.\n\nThe x86 architecture is rotten to its roots with deep #DesignFlaws, for which vulnerabilities are discovered at an increasing pace since December 2017/January 2018 with MeltDown/Spectre speculative flaws. And now with #ZombieLoad .\n\nZombieLoad is the invasive newcomer, exploiting the theoretical design flaws in really practical ways, see [linked demo](https://cpu.fail). But it can be mitigated. Reactively and preventively.\n\nReactively by applying microcode updates, those corrective patches applied at runtime by your Operating System, directly to your CPU software (yes, there is software in your processor, as everywhere else), instructing it to compute stuff differently from when it left the manufacture. And through Operating system updates, who will take advantage of the microcode fixes... Until a new vulnerability is exposed from known design flaws.\n\nOn the preventive side, Xen, a virtualization platform, used in QubesOS to compartmentalize your digital life to fit your needs, isolates your needed daily applications in different isolated compartments. QubesOS \"virtualises\" those environments in HVM(Hardware isolated Virtual Machines), taking also advantage of the microcode update, while limiting the reach of those continuously discovered vulnerabilities to the sole realm of that compromised \"insecure\" compartment, preventing it from easily stealing secrets from your \"ClientX\", \"Work E-Mail\" or \"Social Media\" compartments, running applications concurrently on your physical machine.\n\nYour \"Accounting\", \"ClientZ\" and \"vault\" compartments, unpowered at the moment, don't expose any of their secrets, simply because they are not active; not in memory. In simple words, QubesOS empowers you with multiple virtual machines inside of a single physical computer, letting you launch only required applications inside of them and only when you need them. You can seemlessly have 3 different Firefox, running distinctively from different compartments, filling different needs, without them stealing easily information from each other. You compartiment your life. What is personal stays personal. What is professional stays professional. What is untrusted stays untrusted and can even be deleted as needed. You get the picture.\n\nOtherwise, Windows, MacOSX or Linux, which are monolithic by design, run everything in the same \"realm\", possibly exposing the content (memory) of your concurrent applications, consequently to discovered CPU vulnerabilities. That's right: your recently typed password, your deleted browsing history, your recently sent encrypted e-mail (plain text) content, your (not so) private messages, your encryption key and its passphrase... All of those can be accessed by a malicious application running concurrently, passively monitoring information it's interested in, as you go. [Have you watched the demo](https://cpu.fail)?\n\nUntil user-friendly #compartmentalization technologies like QubesOS become available on x86 open hardware alternatives (like #Power9 or #RISC-V), #QubesOS on x86 is your best friend, while x86's hyperthreading and speculative execution design flaws are filthy traitors who have cheated for too long to arrive first at the finish line... with doped performances, multiple times exposed to the world for everyone to see.\n\nCatch home message: an information that is in memory is an information that can potentially leak; to other applications sharing physical memory on your own machine, to other virtual machines on the same physical machine. Your preferred cloud outsourced server is the same: they are basically and most commonly containers (less #trustworthy then HVMs) running concurrently on the same physical server and sharing even more then virtual machines, potentially leaking each other's applications secrets without any probable oversight.\n\nBe conscious of what you keep in memory. :)"
		},
		{
			"post_id": 15,
			"title": "Playing with ICIJ datashare inside QubesOS",
			"date_published": 1558204138,
			"body": "A quick instruction post.\n\n**Debian-9 TemplateVM**\nFollow [these instruction](https://gist.github.com/xahare/6b47526354a92f290aecd17e12108353) to install docker inside of a debian-9 or cloned debian-9 template, with additional requirement of sudo apt-get install docker-compose\n\nTODO: find a way to make TemplateVM usermod command above persist inside qube. (Right now, user \"user\" is not part of docker group for obscure reason.\n\n**Datashare qube, created out of debian-9 TemplateVM**\n\nDatashare instructions are [here](https://icij.gitbook.io/datashare/)\n\nwget [https://github.com/ICIJ/datashare-installer/releases/download/1.61.2/datashare.sh](https://github.com/ICIJ/datashare-installer/releases/download/1.61.2/datashare.sh)\n\nexerpt:\n\nchmod +x [datashare.sh](https://github.com/ICIJ/datashare-installer/releases/download/1.61.2/datashare.sh)\n\nsudo usermod -aG docker user (SHOULD BE PERSISTENT IN TEMPLATEVM)\n\n./[datashare.sh](https://github.com/ICIJ/datashare-installer/releases/download/1.61.2/datashare.sh)"
		},
		{
			"post_id": 14,
			"title": "What is QubesOS and why it is important on x86",
			"date_published": 1558016980.9,
			"body": "A lot of questions arised following the new wave of discovered CPU vulnerabilities. Let me be clear on this, [the x86 architecture should be considered harmful](https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf) and we need to transition out of it ASAP.\n\nMeanwhile, read this [comprehensive article and watch its attached video](https://www.hostingadvice.com/blog/qubes-offers-security-by-compartmentalization/) to understand why QubesOS is the best we currently have to drive untrusted hardware and software, while some reasonably secure x86 platforms still exist (Asus KGPE-d16, Asus KCMA-D8, Lenovo x230, Lenovo G505S) which meets [QubesOS requirements](https://www.qubes-os.org/doc/system-requirements/), starts from open source firmware which can attest of root of trust integrity... until alternatives x86 architectures [get supported](https://www.qubes-os.org/gsoc/#porting-qubes-to-armaarch64).\n\nUntil new architectures (Risc-V, Power9) get proper support from QubesOS, x86 is the only user friendly, secure and accessible choice to not completely give up on Windows (but securely isolate its usage, and use it only when required, same applying to insecure software, in different compartments), read transition out of it, while limiting impact of compromising the entire system by daily actions by segregating them properly. See [QubesOS security goals](https://www.qubes-os.org/security/goals/). See [QubesOS use cases](https://github.com/QubesOS/qubes-issues/issues/1906#issuecomment-217473679).\n\nQubesOS, a prevention and compartmentalization based security, has preemptively deactivated SMT, or HyperThreading, on Xen boot, which is underlying _most_ of the problems that we saw arising since January 2018 from CPU vulnerabilities, while moving into full virtualization (HVM/PVH) since QubesOS 4, changing its hardware requirements (SLAT, VT-d, VT-x) which unfortunately are not always properly initialized by lazy hardware manufacturers customized BIOSes.\n\n[A discussion is happening on ZeroTalk](http://127.0.0.1:43110/Talk.ZeroNetwork.bit/?Topic:1557931963_17husSAraRRvc7qRWxwA7KF7PTwjhTmxhD/ZombieLoad+microarchitectural+data+sampling+MDS+vulnerability+of+Intel+chips)\n\nInsurgo"
		},
		{
			"post_id": 13,
			"title": "Decentralized WikiLeaks/SecureDrop probable platforms?",
			"date_published": 1557758477.4,
			"body": "Lately i've been searching for ZeroNet platforms which were used to host/receive massive leaks in a decentralized and anonymous way, but found none fitting required criteria.\n\nSuch platforms would empower investigative journalists and leakers.\n\nZeroNet rassembles the main required features that would permit such system Decentralized and distributed publishing/hosting of content [through onion hidden sites](http://127.0.0.1:43110/1DMb3CV66qZPwJqkgm4z12nu8BrAwDoD4g/?Post:9:Finally,+ZeroNet+works+under+QubesOS+to+host+Zites+in+Qubes-Whonix+Workstation!), censor resistance, IPFS-like file hosting through pinning, strong anonymity, multiple persona switching, accountability while not bound to a real identity, strong and asynchronous collaboration...\n\nIt feels like ZeroNet could complement [SecureDrop](https://securedrop.org/directory/) into crowdsourcing (pun intended) investigative journalism... if ZeroNet oriented developers wanted to go into that direction.\n\nThe platform must be able to host files and corresponding descriptions, should permit discussions/comments on those files and permit private contact of original leaker of material for which ZeroMail already fills the requirements.\n\nIf we dream big enough, it could be something like [sovereign](https://github.com/DemocracyEarth/sovereign) around disclosed information, empowering experts, civils and investigative journalists into collaborating to ease work around risky wrongdoing reporting, reducing threats for parties involved. See [historic panama papers documentary](https://www.panamapapersdoc.com/) to better understand the need for such decentralized, anonymous cooperative platform, or at the very least, decentralized hosting of leaked files so entities, like WikiLeaks, cannot be blamed for choosing what goes public or not. This would bring some level of chaos at the beginning, just like what WikiLeaks brang at the beginning. But after a little while, everyone became confortable with the idea, until transparency considerations and free electron and personal biases of the organization corrupted the unbiased information source that WikiLeaks could have been, because they filtered and selected the information before it reached journalists. Everyone's free will, combined with ethical and moral ethic prior to leaking information, would, IMOHO, balances itself in time.\n\n**[Applied panopticon philosophy and social system should apply to everyone equally or not exist at all.](https://en.wikipedia.org/wiki/Panopticon)**\n\nAny hints or existing platforms to refer?\n\nI DO NOT INTEND TO TAKE A POLITICAL STANCE HERE.\n\nI'm simply amazed of ZeroNet ecosystem possibilities, which would empower transparency and anonymous collaboration like it was never possible before.\n\nThanks for participating in the discussion!\n\nInsurgo"
		},
		{
			"post_id": 12,
			"title": "Security Community : Please review this Heads PR",
			"date_published": 1557454527.4,
			"body": "I'm asking to review this [PR](https://github.com/osresearch/heads/pull/551).\n\nThis is my personal attempt to bridge the missing gap permitting QubesOS to be preinstalled by OEM, like myself, on reasonably secure hardware, while certifying the best second hand laptop available today, the X230.\n\nWhat was previously missing to make QubesOS preinstalled was the possibility to reencrypt (cryptsetup-reencrypt) OS installation, but thanks to coreboot linux payload inside of Heads, this out of the box idea resolves the issue in a secured environment.\n\nTo have a provable root of trust, the Trusted Platform Module (TPM) needs to be initialized as early as possible and take measurements of the different parts of the firmware. Heads does it. That was the whole goal of the initial project. It did it initially by providing a TOTP tooling that synced with a OTP application on your smartphone. But that is geeky for daily use, and not super user friendly.\n\nThen, Purism brang HOTP to NitroKey and made their Librem Key, turning TOTP manual verification on phone into a backup solution, making it as [simple as making a LED flash green if the measurements are valid or red otherwise](https://puri.sm/posts/the-librem-key-makes-tamper-detection-easy/). That is a total game changer for non geeks, bringing security to the masses. Thanks to them, they made the code open source and transferable to [other platforms supported by Heads,](https://github.com/osresearch/heads/tree/master/boards) with or [without a TPM](https://github.com/osresearch/heads/pull/493) being present.\n\nBefore this OEM Reownership Wizard into Heads, the user was obligated to install the OS himself on top of an untrusty proprietary BIOS coming from a untrustable manufacturer, never knowing if a rootkit was ever present or if his computing root of trust was ever really trustworthy. [With Heads being reproducible, you know it is. You can validate it. And you can download reproducible rom from a CI, you can build it manually, or you can reproduce the CI yourself](https://gitlab.com/tlaurion/heads/-/jobs) and have the same resulting ROM yourself.\n\nWith Heads supporting more and more platforms, one tool was missing, giving OEM around the world the possibility to prepare QubesOS preinstalled systems not aimed at geeks. Most right defenders or journalists requiring secured systems are not geeks.\n\nSo. This PR permits assisted reownership of root of trust.\n\nProvisioned user secrets permits reencryption of LUKS encrypted device, change its passphrase, factory reset received Librem Key/NitroKey, used on first boot to validate boot and firmware integrity as when it left OEM hands, replacing Admin and User PINs and generating at the same time encryption/signing/authenticating keys on its protected smarcard and public key, which are usable to other means to secure e-mails, encrypt files and authenticate with SSH servers if desired. That generated public key is inserted in the rom to automatically validate that the files checksums are the ones expected at each boot, making it cryptographically validated.\n\nThe final steps of the reownership is to sign /boot configuration, reown the TPM and select a LUKS Disk Unlock Key passphrase, different then the Disk Recovery Key passphrase that should stay completely secret. The Disk Unlock Key passphrase is only usable on this computer, preventing prying eyes to be able to type that passphrase on a cloned copy of the disk, the key being bound to TPM measurements of the firmware and the LUKS header, as opposed to the Disk Recovery Key passphrase that if captured, could unlock a cloned copy of the disk.\n\nSo voilà. Please review whiptail calls for user understandable prompts. Please review bash code for imperfection. Give as most feedback possible so that this code be usable by other OEM. The end goal being that journalists and right defenders are weaponized to do their jobs, while freedom defenders have the possibility to easily own a secure hardware themselves. And me make a bit of money by making the most trustworthy, powerful enough hardware to empower not geeky users with the most trustworthy, QubesOS certified hardware accessible online to buy.\n\nThat code will be frozen for a year and deployed on my PrivacyBeast x230 in the next coming weeks."
		},
		{
			"post_id": 11,
			"title": "Thanks for sharing!",
			"date_published": 1557332119.4,
			"body": "This means a lot to me!\n\nMain [website](https://insurgo.ca), selling the QubesOS certified PrivacyBeast X230 will be up in the next coming days, following joint announcement from QubesOS and Insurgo. Stay tuned!\n\nI'm doing the last improvements on this [PR](https://github.com/osresearch/heads/pull/551), so that the provisioning of secrets of the reownership process is both secure and the most user-friendly possible. ([No, you can't delete files on a SSD, USB Flash Drives by simply overwriting data on it. Full disk encryption is your only friend.](https://ssd.eff.org/en/module/how-delete-your-data-securely-linux##SSDs))\n\nThe last step currently missing is to store provisioning secrets securely on a LUKS encrypted partition on provided USB disk, so the user feeds the secrets once manually to the reownership wizard which stores them in the LUKS encrypted filesystem on provided microSD adapter to reown crucial parts of his future root of turst. The wizard will then factory reset its Librem Key/Nitrokey, reencrypt his LUKS container, change its passphrase and reowns the TPM seemlessly, sign config files and choose a LUKS Disk Unlock Key that he will type at every system startup (bound to TPM measurements), while having a secured backup of those secrets on the USB LUKS container, for both the provisioning and then in case those were forgotten. Better safe then sorry. Reminding oneself of those from another computer being then possible.\n\nThe way to proceed properly with this is currently discussed with QubesOS team, will be implemented prior of a final round of tests before going public. The website is also been reviewed and worked on prior to launch.\n\nMeanwhile, i'll work when I have time on my KGPE-D16 to host this zite myself too, which will host anonymous interactions on technical matters. That server didn't received love for a while, now. This is why you, hosting this zite is important to me right now! Else it's being up only when I work, currently!\n\nDon't hesitate to comment! I want this to be a community project, as QubesOS and Heads are! Should I do a forum also? Which one do you suggest?\n\nCheers!\n\nEmpower yourself!\n_Insurgo_"
		},
		{
			"post_id": 9,
			"title": "Finally, ZeroNet works under QubesOS to host Zites in Qubes-Whonix Workstation!",
			"date_published": 1557152411.7,
			"body": "The instructions have been updated [here.](https://www.whonix.org/wiki/ZeroNet)\n\nThe onion-grater example has been updated [here](https://github.com/Whonix/onion-grater/blob/master/usr/share/doc/onion-grater-merger/examples/40_zeronet.yml) and will soon be updated to Whonix repositories.\n\nDiscussion happened [here](https://github.com/HelloZeroNet/ZeroNet/pull/484#issuecomment-489633709) before resolution.\n\nThis ZeroBlog is finally alive. Please host."
		},
		{
			"post_id": 5,
			"title": "Insurgo's refurbished reasonably secure PrivacyBeast X230 laptop is under QubesOS certification!",
			"date_published": 1552504832.8,
			"body": "Insurgo's x230 refurbished reasonably secure laptop is currently being certified! What gives?\n\nThe user will finally be able to buy trustworthy cost-effective and durable laptops with QubesOS 4 preinstalled, booting from open source firmware and be reassured it hasn't been tampered with in transit before reowning shipped hardware himself through a user friendly Wizard at first boot!\n\nHow is that accomplished? Heads Open Source Firmware does all the required magic!\n\nBehind the scene, Insurgo first backups the two SPI flash chips, neutralizes Intel ME on the 8MB SPI flash and delete most of its potentially harmful rootkit modules. Then, a reproducible x230-flash build of Heads' Open Source Firmware is flashed into the 4MB SPI flash. Then, a full x230 build of Heads is flashed into the combined 12MB flash, empowering the laptop with a full blown and graphical UX and a textual linux based recovery environment.\n\nInsurgo then uses Heads itself to own the laptop's TPM and factory resets a brand new Librem Key/NitroKey Pro V2, with diceware randomized user and admin PINs and injects the generated GPG public key into the preflashed rom. That public key will validate /boot detached signatures, signed in combination with the private key securely stored into the NitroKey/Librem Key, prior to booting Qubes' Xen, initrd and kernel at each boot. The user would be informed of any boot configuration and firmware changes not matching the measured and signed ones prior of shipping, and then at each boot after reowning the physical and logical components establishing the root of trust.\n\nAs a result, Insurgo provides the user all required ownership secrets, including the TPMTOTP QRCode resulting of the TPM firmware measurements, [which is scanned by the user through and OTP application on his smartphone, used like any two-factor authentication token. That QRCode can be scanned by the user from Insurgo secured communication following hardware preparation prior to shipping, prior to receiving the hardware.](https://trmm.net/Heads_33c3) The resulting 6 digits, that changes every 30 seconds, will be shown to the user at first boot and is used to validate that the firmware has not been tampered with. [A Disk Unlock Key, different from the Disk Recovery Key password](https://github.com/osresearch/heads-wiki/blob/master/Keys.md), will be required to boot QubesOS at each machine startup. That Disk Unlock Key is randomly generated and injected in the LUKS header when selecting a boot new boot default by the user at the last step of the reownership wizard. To use it, the user has to enter a selected passphrase, that will unlock the disk only if TPM firmware measurements and LUKS headers are as expected, attesting that the hardware is still trustworthy to use. Otherwise the typed passphrase will fail to boot the installed system and will require the user to type his chosen Disk Recovery Key passphrase.\n\nThe Librem Key/NitroKey Pro v2 validates the firmware integrity based on the TPM firmware measurements, but instead of requiring the user to pop his smartphone and check the TOTP changing 6 numbers, [the USB key flashes green if the firmware integrity is attested or red otherwise](https://puri.sm/posts/the-librem-key-makes-tamper-detection-easy/). The USB key will be asked to be inserted at each Heads boot, while the TPMTOTP can be used as a fallback if the key is lost, while waiting for another ordered one to be delivered. Note that the NitroKey/Librem Key also empowers the user to encrypt his files and e-mail communications while securing his private key into the USB card, being tamper-proof and locking out any attacker after 3 bad attempts. This is seriously as best as it can get.\n\nThose two integrity attestation methods provided by measured boot implementation present into Heads Open Source Firmware will guarantee to the user that the hardware is in the state it was when it left Insurgo.\n\nAt first boot, a Wizard will take the user by the hand into reowning the shipped hardware. It will first reencrypt the disk content, so Insurgo doesn't know the encryption key anymore and request him to define a new disk recovery disk passphrase. It will then factory reset it's NitroKey/Librem Key and require of him new user and admin PINs of his own. The wizard will then ask to reown the TPM with a new passphrase and will finalize the reownership by asking from the user to define a new Disk Unlock key passphrase, bound to TPM measurements prior of being released to the OS, which will be asked of him each time he boots QubesOS.\n\nStay tuned!"
		},
		{
			"post_id": 3,
			"title": "Reasonably secure KGPE-D16 server/workstation",
			"date_published": 1516124632.214,
			"body": "The KGPE-D16 is the most accessible and owner controllable motherboard available new/used today permitting to build powerful and reasonably secure workstations and servers infrastructures.\n\nThe KGPE-D16 coreboot port was funded by Libreboot, (Thanks Leah for the funding and thanks Timothy Pearson for the port!) which permits native hardware initialization of the hardware. Even the remote management engine development was crowdfunded to develop an OpenBMC port, thanks again to Timothy Pearson for all the work that he as done for that motherboard. Note that his Talos II platform brings ownership even further by ditching x86 architecture completely and integrating IBM's Power9 processors, for even more control and openness, while the Power9 architecture is not yet supported by QubesOS.\n\nThe present KGPE-D16 beast could at term be remote attested booted through OpenBMC (Measured boot upon reboot), with Heads integrity being remotely verified through TPMTOTP on cellphone when TPM2 is supported with a proper management toolset. To achieve this, the motherboard needs to boot from Head's coreboot firmware, which boots a linux payload that kexec linux compatible kernel (here, it's a multiboot xen + linux environment: QubesOS 4.0) once verified. The QubesOs remote administration of the server could then be achieved by accessing it through an AdminVM, reachable through a tor hidden ssh service. For the moment, dom0 is accessible through /dev/ttyS0 directly from OpenBMC, which is reachable by a dedicated network card.\n\nThere are currently some limitations to achieve those goals. This blog post will trace the problems and solutions to permit a transition to reasonably secure computing for the masses.<span data-cke-bookmark=\"1\" style=\"display: none;\"></span><span data-cke-bookmark=\"1\" style=\"display: none;\"></span>\n\n**Current limitations:**\n\n[TPM v2.0 is not implemented in Heads](https://github.com/osresearch/heads/issues/287), so measured boot is not yet achieved."
		},
		{
			"post_id": 2,
			"title": "Insurgo blog starts!",
			"date_published": 1516038288.014,
			"body": "**_Insurgo_** is a latin word which means _rise up_ in english. This word in itself promotes empowerment, individual and collective responsibility, cooperation and collaboration in the goal of elevating oneself to ourselves while promoting best practices for the greater common good.\n\nThe first goal of **_Insurgo_** is to promote proper numeric literacy and technology to help elevate human consciousness on what can currently be achieved to activate global change. **_Insurgo_** actions toward this goal is to promote best currently available tools, technology and literacy to help protect privacy, integrity and freedom of access to information. This starts with reasonably secure computing, which can only be based on open source hardware/software enforcing measured boot integrity validation, which is exactly what _**Insurgo**_ focuses on as a start.\n\nIn fact, _**Insurgo**_'s mission is to empower humans to act upon inequalities and injustices by sharing what they know and fight helplessness while activating liquid democracy and cooperation in creating a world we all want to be part of.\n\nThis is my first experience with ZeroNet and decentralized web. I do not have a real choice in that matter, since the quality and stability of my internet connection is questionable. Also, from the nature of the literacy promoted here, that information must be resilient and open.\n\nPlease seed this blog. Share contained information around you so people you know can make educated choices and empower themselves and others in return so things change as fast as they can.\n\n**_Insurgo_**"
		}
	],
	"tag": [
		{
			"value": "PrivacyBeast",
			"post_id": 30
		},
		{
			"value": "QubesOS",
			"post_id": 51
		},
		{
			"value": "VPN",
			"post_id": 51
		},
		{
			"value": "QubesOS",
			"post_id": 52
		},
		{
			"value": "FAQ",
			"post_id": 52
		},
		{
			"value": "QubesOS",
			"post_id": 49
		},
		{
			"value": "FAQ",
			"post_id": 49
		},
		{
			"value": "PrivacyBeast",
			"post_id": 47
		},
		{
			"value": "QubesOS",
			"post_id": 47
		},
		{
			"value": "FAQ",
			"post_id": 47
		},
		{
			"value": "PrivacyBeast",
			"post_id": 44
		},
		{
			"value": "FAQ",
			"post_id": 44
		},
		{
			"value": "Heads",
			"post_id": 44
		},
		{
			"value": "PrivacyBeast",
			"post_id": 43
		},
		{
			"value": "Heads",
			"post_id": 43
		},
		{
			"value": "FAQ",
			"post_id": 43
		},
		{
			"value": "FAQ",
			"post_id": 45
		},
		{
			"value": "PrivacyBeast",
			"post_id": 45
		},
		{
			"value": "Heads",
			"post_id": 45
		},
		{
			"value": "Heads",
			"post_id": 38
		},
		{
			"value": "QubesOS",
			"post_id": 38
		},
		{
			"value": "FAQ",
			"post_id": 38
		},
		{
			"value": "PrivacyBeast",
			"post_id": 17
		},
		{
			"value": "News",
			"post_id": 17
		},
		{
			"value": "PrivacyBeast",
			"post_id": 5
		},
		{
			"value": "News",
			"post_id": 5
		},
		{
			"value": "PrivacyBeast",
			"post_id": 26
		},
		{
			"value": "News",
			"post_id": 26
		},
		{
			"value": "QubesOS",
			"post_id": 16
		},
		{
			"value": "Security",
			"post_id": 16
		},
		{
			"value": "QubesOS",
			"post_id": 14
		},
		{
			"value": "Security",
			"post_id": 14
		},
		{
			"value": "News",
			"post_id": 3
		},
		{
			"value": "QubesOS",
			"post_id": 3
		},
		{
			"value": "Security",
			"post_id": 3
		},
		{
			"value": "RYF",
			"post_id": 3
		},
		{
			"value": "News",
			"post_id": 23
		},
		{
			"value": "PrivacyBeast",
			"post_id": 23
		},
		{
			"value": "PrivacyBeast",
			"post_id": 12
		},
		{
			"value": "Heads",
			"post_id": 12
		},
		{
			"value": "News",
			"post_id": 12
		},
		{
			"value": "News",
			"post_id": 46
		},
		{
			"value": "Heads",
			"post_id": 46
		},
		{
			"value": "RYF",
			"post_id": 46
		},
		{
			"value": "News",
			"post_id": 11
		},
		{
			"value": "News",
			"post_id": 33
		},
		{
			"value": "News",
			"post_id": 2
		},
		{
			"value": "QubesOS",
			"post_id": 54
		},
		{
			"value": "FAQ",
			"post_id": 54
		},
		{
			"value": "Whonix",
			"post_id": 9
		},
		{
			"value": "ZeroNet",
			"post_id": 9
		},
		{
			"value": "QubesOS",
			"post_id": 9
		},
		{
			"value": "News",
			"post_id": 9
		},
		{
			"value": "PrivacyBeast",
			"post_id": 50
		},
		{
			"value": "FAQ",
			"post_id": 50
		},
		{
			"value": "FAQ",
			"post_id": 56
		},
		{
			"value": "PrivacyBeast",
			"post_id": 56
		},
		{
			"value": "FAQ",
			"post_id": 53
		},
		{
			"value": "PrivacyBeast",
			"post_id": 53
		},
		{
			"value": "QubesOS",
			"post_id": 53
		},
		{
			"value": "wyng",
			"post_id": 53
		},
		{
			"value": "QubesOS",
			"post_id": 55
		},
		{
			"value": "FAQ",
			"post_id": 55
		},
		{
			"value": "Whonix",
			"post_id": 55
		}
	]
}