{
    "title": "Poster",
    "description": "A simple blog for zeronet",
    "next_post_id": 6,
    "modified": 1432515194,
    "post": [
        {
            "post_id": 3,
            "date_published": 1531665845169,
            "body": "<h1 class=\"title\">Samsung TV mit iobroker und Alexa ein und ausschalten</h1><br><br>Ich habe zum Geburtstag kurz vor Weihnachten einen Echo Plus bekommen und obwohl ich ihn auch wollte wusste ich natürlich gar nicht worauf ich mich einlasse.<br><br>Die erste Erfahrung die ich dann mit Smarthome gemacht habe, war die beiliegende Glühbirne (in meinem Echo Plus ist der Smart Home Hub integriert).<br><br>Ich konnte nun also per Sprachbefehl, dass Licht im Schlafzimmer (die einzig passende Lampe für eine E 27 ) aus und einschalten und dimmen.<br><br>Toll! Aber man will natürlich mehr. Und ich denk mir natürlich mein Fernseher ist smart, da kann man sicher was machen, aber Fehlanzeige. Ein Smart TV ist kein Smarthome Gerät.<br><br>Ich will das aber trotzdem und suche weiter.<br><br>Ich fand den Skill Smart TV Remote, der mehr schlecht als recht funktionierte. Allen voran konnte man den TV damit nicht einschalten. Den Samsung benötigt zur Bedienung eine Netzwerkverbindung und diese ist nicht gegeben, wenn der TV im Standby ist.<br><br>Das ist einerseits beruhigend, denn man kann daher auch davon ausgehen, dass der Fernseher nur bei laufendem Programm nach Hause telefoniert, aber es ist natürlich auch sinnlos. Wenn ich zum Einschalten die Fernbedienung zur Hand nehmen muss, dann brauche ich keine Sprachsteuerung.zu<br><br>Ich suche also weiter und höre immer wieder, dass es eben nicht möglich sei.<br><br>Ich habe dann immer wieder aus den Smarthome Foren den Begriff iobroker gehört und wollte dieses Programm mal ausprobieren.<br><br>Und hier fängt unser Tutorial an.<br><br>Iobroker auf Linux Mint installieren<br>Aus praktischen Gründen wird iobroker immer im Zusammenhang mit dem Minicomputer Raspberry Pi genannt. Da ich ein solches Gerät aber nicht mein eigen nenne und mein Ziel war, die Steuerung des TV ohne zusätzliche Ausgaben zu realisieren musste ich erst die korrekte Anleitung finden um iobroker auf meinem ExperimentierPC zu installieren. Dieser braucht wenig Strom und kann ggf. auch dauerhaft laufen (ich schalte ihn aber ab wenn ich das Haus verlasse, dazu später mehr).<br><br>Nach einigen erfolglosen Versuchen die Anleitung für den Raspberry Pi zu adaptieren oder es über Windows zu versuchen (das lief gleich mal gar nicht), hatte ich es bereits mit Virtual Box geschafft. Da diese aber mangels Virtualisierung am ExperimentierPC auf meinem Spielerrechner lief, war es natürlich keine Dauerlösung aber ich konnte es schon mal testen.<br><br>Lange Rede kurzer Sinn:<br><br>Hier findet ihr die Anleitung um iobroker auf Debian basierten Systemen zu installieren.<br><br>http://www.iobroker.net/docu/?page_id=5634&lang=de<br><br>Damit lief die Installation reibungslos, allerdings bin ich vorher noch von Linux Mint auf xubuntu umgestiegen, da der Rechner nur als Server fungieren soll. Ich habe die grafische Oberfläche drauf gelassen, man kann sie aber auch deinstallieren.<br><br>Iobroker erster Start<br>Wenn iobroker erfolgreich installiert wurde könnt ihr ihn am ServerPC unter localhost:8081 aufrufen oder wie in meinem Fall über die lokale IP am SpielePC.<br><br><br><br>Hier gleich ein Tipp. Es ist mir nicht gelungen eine fixe IP in xubuntu einzurichten, ich habe stattdessen einfach in der Modemsoftware die Einstellung gemacht, ändert sich die IP sind eure Geräte für Alexa unerreichbar.<br><br>Auf der Startseite erschlagen einen die Adapter.<br><br>Daher die wichtigsten für euch als erstes.<br><br>Ihr braucht:<br><br>admin (ist bereits installiert)<br>cloud (für die Verbindung zu Alexa)<br>discovery (um eure Geräte zu suchen)<br>ping (für den Onlinestatus eurer Geräte)<br>javascript (zum Einschalten des TV)<br>scenes (um den Schalter zu erstellen)<br>samsung (für die eigentliche Steuerung des TV)<br>Discovery<br>Als erstes installiert ihr den Discovery Adapter, die Instanz wird auch gleich gestartet und ihr findet folgendes Bild vor.<br><br><br><br>Änderungen müsst ihr keine vornehmen, einfach auf suchen klicken und auf das Ergebnis warten.<br><br><br><br>Es werden euch gleich Services zur Installation vorgeschlagen.<br><br>Um RAM zu sparen installiert nichts was nicht oben gelistet ist.<br><br>Wichtig ist das während der Suche der TV bereits läuft damit er gefunden wird. Dann wird der Samsung Adapter mit installiert. Aber keine Sorge, wenn ihr den TV erst jetzt eingeschalten habt könnt ihr den Adapter manuell auswählen und durch Klick auf das Plus rechts installieren.<br><br><br><br>Nun müsst ihr noch die IP eures TV eingeben (findet ihr beim Netzwerkstatus am TV) und dann am TV zulassen bestätigen wenn es aufpoppt.<br><br>Um den Adapter zu testen wechselt er auf den Reiter Objekte.<br><br><br><br>Hier den Reiter Samsung aufklappen und unter Volume bei Volume Down oder Up die Buttons testen (rechts die Symbole mit dem Pfeil nach unten)<br><br>Reagiert der TV habt ihr das wichtiges bereits geschafft.<br><br>Ihr könnt nun alle Buttons testen und die, die bei eurem TV keine Funktion haben löschen um den Baum zu entschlacken.<br><br>Tipp: Bei meinem TV hat der vorhandene Standby Button keine Funktion stattdessen musste ich bei Power den Punkt auf bei der Spalte Rolle von State auf button ändern. Damit war das Ausschalten möglich.<br><br>Szenen<br>Den Szenen Adapter könnt ihr manuell installieren ohne weitere Einstellungen vornehmen zu müssen. Ihr erhaltet eine neue Registerkarte Szenen oben im Interface.<br><br>Cloud<br><br><br>Um den Cloud Adapter zu installieren und mit Alexa zu verbinden braucht ihr einen App-Key. Folgt dem Link zu iobroker.net und erstellt euch ein Konto um euren Key zu erhalten. Danach könnt ihr gleich in Alexa den iobroker Skill aktivieren und mit dem Konto verknüpfen.<br><br>Damit ist der Alexa Part vorerst erledigt, den Cloud Adapter brauchen wir später wieder.<br><br>Javascript<br>So nun haben wir bereits festgestellt das wir den TV bedienen und ausschalten können.<br><br>Nun kommt das einschalten.<br><br>Daher brauchen wir den Javascript Adapter.<br><br><br><br>Nach der Installation haben wir den Reiter Scripte erhalten und begeben uns dort hin.<br><br><br><br>Als erstes erstellen wir einen neuen Ordner Skripte für unser Vorhaben. Das Skript funktioniert nämlich nicht wenn es in common oder global installiert wird.<br><br>Markiert den Ordner Skripte und geht rechts oben auf neues Skript. Mein Skript heißt ganz banal TV.<br><br>Und hier folgt nun euer Skript um den Fernseher mit Wake on Lan einzuschalten.<br><br>createState(„javascript.0.TVstarten“, 0); // Generiert beim starten den Datenpunkt, wenn nicht vorhanden<br>var wol = require(‚wake_on_lan‘); // Lädt von ioBroker die das nötige Paket<br>var myTV = „xx:xx:xx:xx:xx:xx“; // MAC definieren<br><br>// Ab hier automatisch<br>on({id: „javascript.0.TVstarten“, change: ‚any‘}, function (obj) {<br>wol.wake(myTV);<br>log(„Script WOL – TV aufgeweckt“, „info“);<br>}<br><br>);<br><br>Die MAC Adresse eures TV findet ihr bei Unterstützung Samsung kontaktieren. Je nachdem wie euer Fernseher ans Internet angeschlossen ist, nehmt ihr die Lan oder Wlan MAC Adresse und fügt sie. Schaltet euren Fernseher jetzt aus. Speichert das Skript und werdet Zeuge der Magie. Führt das Script aus und tadaaaa. Der Fernseher springt an.<br><br>Die Szene<br>So nun wollten wir natürlich nicht umständliche Scripte ausführen oder komische Buttons im Webinterface drücken. Wir wollen sagen: Alexa, mach den Fernseher an bzw. Alexa mach den Fernseher aus.<br><br>Dafür brauchen wir eine Szene.<br><br>Daher erstellen wir ein virtuelles Gerät Samsung im Reiter Objekte im Ordner Javascript durch Klick auf das Plus.<br><br><br><br><br><br>Dann markiert ihr euer Gerät und erstellt mit einem Klick auf das Plus einen Datenpunkt „on“<br><br><br><br>Ist der Punkt erstellt könnt ihr ihn in der Spalte Wert auf true stellen (Häkchen setzen)<br><br>Nun wechseln wir zu den Szenen.<br><br>Mit Klick auf das Plus erstellen wir eine neue Szene und klicken rechts auf Szenenkonfiguration.<br><br><br><br>Wir verknüpfen den zuvor erstellten Datenpunkt unter Trigger ID und fühlen alles wie im Bild aus.<br><br>Unsere Szene ist erstellt und wird nun gefüttert.<br><br><br><br>Wir klicken rechts auf das Plus und wählen aus dem Javascript Ordner den Wert Tvstarten und aus dem Samsung Ordner den Wert off.<br><br>Nun soll der Start Befehl TVStarten ausgelöst werden wenn der Fernseher aus ist, also wenn der Status „false“ ist, dafür geben wir bei Sollwert bei Falsch den Wert „null“ (ausgeschrieben) ein und löschen ihn bei Wahr heraus.<br><br>Der Ausschaltbefehl off soll bei laufendem Fernseher gesendet werden.<br><br>Wir setzen das Häkchen auf Sollwert bei Wahr.<br><br><br><br>Wir können die Szene testen in dem wir bei Sollwert bei Wahr oder Sollwert bei falsch das Playsymbol drücken.<br><br>Eure Szene sollte funktionieren und den TV aus bzw. einschalten.<br><br>Jetzt wollen wir das noch Alexa beibringen.<br><br><br><br>Also zurück zu den Instanzen und in den Cloud Adapter auf Smartgeräte.<br><br>Mit Klick auf das Plus links oben können wir uns nun scene.samsung holen.<br><br><br><br>Natürlich könnt ihr den TV auch Fernseher nennen. Von TV als Bezeichnung ist abzuraten, das Alexa das nicht richtig versteht, ihr könnt das Gerät aber auch in der Alexa App jederzeit umbennen.<br><br>Wir drücken also auf Okay und starten die Gerätesuche bei Alexa.<br><br><br><br><br><br><br><br><br><br>Und geschafft. Ihr könnt nun euren Fernseher mit Sprachbefehl ein und ausschalten.<br><br>Für die Lautstärkeregelung habe ich leider noch keine Lösung gefunden, bzw arbeite ich noch daran, dafür muss man den TV nämlich per Upnp ansteuern.<br><br>Da meine Programmierkenntnisse sehr begrenzt sind, wird das noch ein bisschen dauern."
        },
        {
            "post_id": 4,
            "date_published": 1531665881807,
            "body": "<h1 class=\"title\">Install Hearthstone on Ubuntu 18.04<br></h1><br><br>This is how I got Hearthstone up and running on Ubuntu 18.04<br><br>sudo apt-get install wine-stable winetricks<br><br>After installation is complete start winetricks<br><br>Leave Select the default wineprefix selected, and click Ok. On the next screen, select Install a font. That’ll open up a list of the available fonts.<br><br>Find corefonts, and check it. Then, press Ok. Winetricks will install all of the basic Microsoft fonts that Battle.net expects to find.<br><br>Next, follow the same process, but select Install a Windows DLL or component instead. On this one, scroll through and check off vcrun2015 and d3dx11_43.<br><br>The installer should take a bit of time, and it will be messy. Winetricks will prompt you multiple times that it’s working around bugs. Don’t worry. Just follow the prompts that you see.<br><br>Set Windows Version to Windows 7.<br><br>NOW you can install Battle.net and Hearthstone.<br>After installation you should force use of DirectX9 otherwise your screen will crash.<br><br> <br><br>Go to Battle.net > Hearthstone > Options ><br>Game Settings > check „Additional command line arguments“ and write<br>in the text box „-force-d3d9“.<br><br>I changed graphics to 1024×768 so I can work in windowed mode.<br><br>This work for me and I hope I got all I did correct in this instruction. Leave a comment if you experience errors and I try to help.<br><br>The only problems remains in Blizzard Updates. They might activate locationapi again or cause other failures, so I can only say it works today.<br><br> <br><br>Edit 5th June:<br>Today an update was uplied. Luckily Hearthstone is still working.<br>Please tell me if you are experiencing troubles."
        },
        {
            "post_id": 5,
            "date_published": 1531665916603,
            "body": "<h1 class=\"title\">Youtube zu Mp3 leicht gemacht mit Linux Shell<br></h1><br><br>Während es diverse Werbebeladene oder kostenpflichtige Tools für Windows gibt, um Youtube-Videos herunterzuladen und in MP3 umzuwandeln, bringt Linux ein einfaches Kommandozeilen Tool.<br><br>Und damit das nächste Mal am Ende des Datenvolumens nicht noch soviel Monat übrig ist, lohnt es sich die Lieblingssongs herunterzuladen.<br><br>Aber erstmal zur Grundfunktion.<br><br>Die Installation erfolgt ganz simpel.<br><br>sudo apt-get install youtube-dl<br><br>Nun suchen wir uns Youtube Video und kopieren die URL aus der Adresszeile.<br><br>Wollt ihr nur das Video herunterladen um es später anzusehen ist der Befehl ganz einfach:<br><br>youtube-dl https://www.youtube.com/watch?v=RPN88D_HjMU<br><br>Wollt ihr stattdessen nur das MP3 um es zum Beispiel auf einen Ipod Shuffle (ohne Internetzugang) zu kopieren.  Dann nutzt ihr zusätzlich die Parameter –extract-audio und –audio-format. Und zwar so:<br><br>youtube-dl –extract-audio –audio-format mp3 https://www.youtube.com/watch?v=RPN88D_HjMU<br><br>Damit wird das Audio aus der Datei in Mp3 konvertiert und der Rest an Daten wieder gelöscht.<br><br>Wollt ihr gleich mehrere Videos runterladen und ggf. auch konvertieren, dann solltet ihr eine Liste der URLs in einer Textdatei anlegen. Diese könnt ihr dann mit dem Befehl –batch-file FILE direkt übergeben.<br><br>Auch das hab ich natürlich gleich mit einer kleinen Datei mit 4 URLs getestet:<br><br>Inhalt der Datei:<br><br>https://www.youtube.com/watch?v=EkWjaoH7k6whttps://www.youtube.com/watch?v=wMIGQp4YhuUhttps://www.youtube.com/watch?v=1il3RFk5Okwhttps://www.youtube.com/watch?v=qdtLCfEcPL4<br><br>Befehl und Ausgabe:<br><br>youtube-dl –extract-audio –audio-format mp3 –batch-file Songliste <br>[youtube] EkWjaoH7k6w: Downloading webpage<br>[youtube] EkWjaoH7k6w: Downloading video info webpage<br>[youtube] EkWjaoH7k6w: Extracting video information<br>[youtube] EkWjaoH7k6w: Downloading js player vflKSi76_<br>[download] Destination: Adel Tawil – Ist da jemand-EkWjaoH7k6w.webm<br>[download] 100% of 3.66MiB in 00:00<br>[ffmpeg] Destination: Adel Tawil – Ist da jemand-EkWjaoH7k6w.mp3<br>Deleting original file Adel Tawil – Ist da jemand-EkWjaoH7k6w.webm (pass -k to keep)<br>[youtube] wMIGQp4YhuU: Downloading webpage<br>[youtube] wMIGQp4YhuU: Downloading video info webpage<br>[youtube] wMIGQp4YhuU: Extracting video information<br>[download] Destination: Xavier Naidoo – Alles kann besser werden [Official Video]-wMIGQp4YhuU.webm<br>[download] 100% of 4.26MiB in 00:00<br>[ffmpeg] Destination: Xavier Naidoo – Alles kann besser werden [Official Video]-wMIGQp4YhuU.mp3<br>Deleting original file Xavier Naidoo – Alles kann besser werden [Official Video]-wMIGQp4YhuU.webm (pass -k to keep)<br>[youtube] 1il3RFk5Okw: Downloading webpage<br>[youtube] 1il3RFk5Okw: Downloading video info webpage<br>[youtube] 1il3RFk5Okw: Extracting video information<br>[download] Destination: Mark Forster – Chöre-1il3RFk5Okw.webm<br>[download] 100% of 3.28MiB in 00:00<br>[ffmpeg] Destination: Mark Forster – Chöre-1il3RFk5Okw.mp3<br>Deleting original file Mark Forster – Chöre-1il3RFk5Okw.webm (pass -k to keep)<br>[youtube] qdtLCfEcPL4: Downloading webpage<br>[youtube] qdtLCfEcPL4: Downloading video info webpage<br>[youtube] qdtLCfEcPL4: Extracting video information<br>[download] Destination: Peter Fox – Alles neu (offizielles Video)-qdtLCfEcPL4.webm<br>[download] 100% of 4.03MiB in 00:00<br>[ffmpeg] Destination: Peter Fox – Alles neu (offizielles Video)-qdtLCfEcPL4.mp3<br>Deleting original file Peter Fox – Alles neu (offizielles Video)-qdtLCfEcPL4.webm (pass -k to keep)<br><br>Und schon habe ich die gewünschten Songs im Home Ordner.<br><br><br><br>Wohlt ihr noch andere Codierungsvarianten nutzt einfach die manpages.<br><br>man youtube-dl<br><br>Da werden alle Befehle nochmals im Detail erklärt. Viel Spaß beim erstellen eurer Offlineplaylist."
        }
    ]
}