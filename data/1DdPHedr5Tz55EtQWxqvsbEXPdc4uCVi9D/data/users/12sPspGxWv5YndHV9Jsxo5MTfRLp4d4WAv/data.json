{
	"posts": [
		{
			"id": "b0bfa6de-83c3-4594-94a8-30e0e6c8434d",
			"directory": "users/1GwcsNqMyYs3UtRyRrSa4YuCx2i5712SqD",
			"uri": "pdfs",
			"subject": "/prog/ anon's guide to compsci maths",
			"body": "PART 1\n\nThis guide assumes you forgot everything from highschool. No you don't have to learn any of this in order to program you can just start hacking around every .c file in your kernel.org git source clone and see what happens. Why would you want to learn math? Because it will change your thinking. You won't be easily fooled by bullshit, you will have tools to sort through obvious logical fallacies. You will be able to optimize programs and create your own algorithms. You will be able to estimate. Above all, you will be able to solve problems using computation which is what computer science is all about. And least of all, you will get paid more than anybody else without this knowledge so if your goal is shekels then read on. Note: DO THE EXERCISES. You won't learn otherwise. Books instead of video lectures were chosen because they've lasted 30+ years some of them in relevancy in the field, also lectures disappear all the time like when MIT nuked all one prof's Physics OCW lectures because he tried to pickup a student, setting a precedent that at anytime this information can disappear. Read a book nigga.\n\nMath Preliminary\nBasic Mathematics by Serge Lang\nBuy/Pirate this book (he's dead). It's highschool math, from the perspective of a Mathematician. You will learn up Pre-Calculus and be prepared for rigorous proofs later.  \n\nAn Introduction to Mathematical Reasoning\" by Peter J Eccels\nThis changes you from rote drilling and being a human calculator in highschool to learning what math actually is, and what proofs do. Excellent, excellent book.\n\nHow to Solve It by G. Polya\nHow to do proofs, written in 1940s and still for sale in every Chapters/B&N bookstore to this day because it's the best proof helper that exists. \n\nWelcome to Proofs\n\nCalculus\" by Spivak\nActually, you are learning ANALYSIS, in addition to calculus. Torrent the 3rd edition w/the answer book. This is a fucking hard assed book, you may be better off reading \"Advanced Calculus\" which is actually easier, as the intro points out that Spivak's exercises are difficult as shit: http://www.math.harvard.edu/~shlomo/docs/Advanced_Calculus.pdf\n\nDiscrete Math Intro\nhttp://cglab.ca/~michiel/DiscreteStructures/ it also comes with lectures on jewtubes https://www.youtube.com/channel/UCG96LXNYz9x7eTqSRtQ2R9A Doing real discrete math and probability. \n\nLinear Algebra by Friedberg, Insel and Spence\nGet the latest version (piracy). It's proof centric, this will come in handy later when you need to understand some Linear applications and don't know how something works so can revert back to your training in LA in proofs. LA is heavily, heavily used in all game programming. Also in cryptography and numerous other CompSci fields.\n\nAlgorithms\nIntro to Algorithms aka CLRS https://mitpress.mit.edu/books/introduction-algorithms this will teach you sort of an Art of Programming lite.\n\nNP-hard problems\nConcrete Math by Knuth et all (CONtinuous and disCRETE math)\nThis is chapter 2 of The Art of Computer Programming (TAOCP)  \"Mathematical Preliminaries\" in a format that isn't as terse. Complete this and you can do any of the TAOCP books, and solve any problem using discrete mathematics in computer science. \n\nBezerker level, how the fuck did they do that tier\nCalculus on Manifolds by Spivak. This notation is used by Gerald Sussman (of SICP fame) in all his texts. It's a great fleshing out of multi variable calculus, but you absolutely have to do the exercises, it's a small book but difficult.\n\nStructural Interpretation of Classical Mechanics Aka SICM free online http://mitpress.mit.edu/sites/default/files/titles/content/sicm/book.html\n\nJust read the Intro/First chapter (unless you have a solid understanding of classical mechanics from these lectures: http://theoreticalminimum.com/courses/classical-mechanics/2011/fall then read the whole book)\n\nYou write out math equations in scheme. You will get that \"aha\" moment like when you read SICP but for Math. If you just read the first chapter/intro you will be able to convert math equations into functions whenever you come across them. If you read the whole book you will:\n* write a lagrangian as a normal Scheme function\n* symbolically take derivatives of that to get equations of motion\n* print those equations with LaTeX.\n* compile those equations to native code and numerically integrate and plot the motion of the system\nIt's like magic the first time you see it. You can now write highly advanced physics into game player movements.\n\nMaster of the Universe tier\n\nThe Art of Computer Programming any volume. I would start with 4.1a Combinatorial Algorithms. 4.1b is out on Knuth's homepage and it contains all new math that isn't even on Wikipedia yet. The exercises are in the book for a reason, it's not just reference it's to help you understand the material so try some of them. \n",
			"time": 1565168583493,
			"files": "[{\"name\":\"1439697368517.jpg\",\"thumb\":\"106f89dfedecf5c17e4b7edf3611cc3548722cca-thumb.jpg\",\"size\":183588,\"type\":\"image/jpeg\",\"original\":\"82850958b42dd3b58eae31e74ec45ba2a30a9829.jpg\",\"directory\":\"12sPspGxWv5YndHV9Jsxo5MTfRLp4d4WAv\"}]"
		},
		{
			"id": "ab8bdf6a-4772-4157-9771-286dd5885935",
			"directory": "users/1GwcsNqMyYs3UtRyRrSa4YuCx2i5712SqD",
			"uri": "pdfs",
			"thread": "b0bfa6de-83c3-4594-94a8-30e0e6c8434d",
			"body": "PART 2\n\nFunctional Differential Geometry by Sussman.\nhttp://groups.csail.mit.edu/mac/users/gjs/6946/calculus-indexed.pdf SICP is the gold tier for Computer Science, SICM is gold tier for Physics, and Functional Differential Geometry is gold tier for applied mathematics. This again converts equations into scheme functions. Treating data as a distribution in high-dimensional space is at the core of machine learning, and differentiating across those dimensions is typically how learning is done. There's a whole area called Information Geometry which treats the parameter spaces of statistical models as Riemannian manifolds under the Fisher information metric you'll learn in machine learning courses.\n\nIn SICM the same authors mention that a computational approach to calculus revealed errors in their own understanding of classical mechanics equations (such as Lagrange's equations), and they introduced new notation to address the problem. Functional Differential Geometry picks up that idea and runs with it, debugging general relativity and quantum mechanics.\n\nConclusion\nThis list is about learning base theory, so you can branch off and learn anything you want yourself like a formal course in Statistics http://www.stat.cmu.edu/~larry/all-of-statistics/ or go into number theory for cryptography. With this foundation there is literally no course or advanced field of Compsci you can't take.",
			"time": 1565168639126,
			"files": "[]"
		}
	],
	"boards": [],
	"modlogs": []
}