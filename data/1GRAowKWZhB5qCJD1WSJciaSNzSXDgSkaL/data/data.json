{
	"title": "birdsBlog",
	"description": "http://127.0.0.1:43110/0birds.bit",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 7,
	"demo": false,
	"modified": 1464567360,
	"post": [
		{
			"post_id": 6,
			"title": "Curl-FAQ",
			"date_published": 1463705862.696,
			"body": "FAQ -- Frequently Asked Questions\nPhilosophy\n\n1.1 What is cURL?\n1.2 What is libcurl?\n1.3 What is curl not?\n1.4 When will you make curl do XXXX ?\n1.5 Who makes curl?\n1.6 What do you get for making curl?\n1.7 What about CURL from curl.com?\n1.8 I have a problem who do I mail?\n1.9 Where do I buy commercial support for curl?\n1.10 How many are using curl?\n1.11 Why don't you update ca-bundle.crt\n1.12 I have a problem who can I chat with?\n1.13 curl's ECCN number?\n1.14 How do I submit my patch?\n1.15 How do I port libcurl to my OS?\nInstall Related Problems\n\n2.1 configure doesn't find OpenSSL even when it is installed\n2.1.1 native linker doesn't find OpenSSL\n2.1.2 only the libssl lib is missing\n2.2 Does curl work/build with other SSL libraries?\n2.3 Where can I find a copy of LIBEAY32.DLL?\n2.4 Does curl support SOCKS (RFC 1928) ?\n2.5 Install libcurl for both 32bit and 64bit?\nUsage Problems\n\n3.1 curl: (1) SSL is disabled, https: not supported\n3.2 How do I tell curl to resume a transfer?\n3.3 Why doesn't my posting using -F work?\n3.4 How do I tell curl to run custom FTP commands?\n3.5 How can I disable the Accept: */* header?\n3.6 Does curl support ASP, XML, XHTML or HTML version Y?\n3.7 Can I use curl to delete/rename a file through FTP?\n3.8 How do I tell curl to follow HTTP redirects?\n3.9 How do I use curl in my favorite programming language?\n3.10 What about SOAP, WebDAV, XML-RPC or similar protocols over HTTP?\n3.11 How do I POST with a different Content-Type?\n3.12 Why do FTP specific features over HTTP proxy fail?\n3.13 Why does my single/double quotes fail?\n3.14 Does curl support Javascript or PAC (automated proxy config)?\n3.15 Can I do recursive fetches with curl?\n3.16 What certificates do I need when I use SSL?\n3.17 How do I list the root dir of an FTP server?\n3.18 Can I use curl to send a POST/PUT and not wait for a response?\n3.19 How do I get HTTP from a host using a specific IP address?\n3.20 How to SFTP from my user's home directory?\n3.21 Protocol xxx not supported or disabled in libcurl\n3.22 curl -X gives me HTTP problems\nRunning Problems\n\n4.1 Problems connecting to SSL servers.\n4.2 Why do I get problems when I use & or % in the URL?\n4.3 How can I use {, }, [ or ] to specify multiple URLs?\n4.4 Why do I get downloaded data even though the web page doesn't exist?\n4.5 Why do I get return code XXX from a HTTP server?\n4.5.1 \"400 Bad Request\"\n4.5.2 \"401 Unauthorized\"\n4.5.3 \"403 Forbidden\"\n4.5.4 \"404 Not Found\"\n4.5.5 \"405 Method Not Allowed\"\n4.5.6 \"301 Moved Permanently\"\n4.6 Can you tell me what error code 142 means?\n4.7 How do I keep user names and passwords secret in Curl command lines?\n4.8 I found a bug!\n4.9 Curl can't authenticate to the server that requires NTLM?\n4.10 My HTTP request using HEAD, PUT or DELETE doesn't work!\n4.11 Why does my HTTP range requests return the full document?\n4.12 Why do I get \"certificate verify failed\" ?\n4.13 Why is curl -R on Windows one hour off?\n4.14 Redirects work in browser but not with curl!\n4.15 FTPS doesn't work\n4.16 My HTTP POST or PUT requests are slow!\n4.17 Non-functional connect timeouts on Windows\n4.18 file:// URLs containing drive letters (Windows, NetWare)\n4.19 Why doesn't cURL return an error when the network cable is unplugged?\n4.20 curl doesn't return error for HTTP non-200 responses!\n4.21 Why is there a HTTP/1.1 in my HTTP/2 request?\nlibcurl Issues\n\n5.1 Is libcurl thread-safe?\n5.2 How can I receive all data into a large memory chunk?\n5.3 How do I fetch multiple files with libcurl?\n5.4 Does libcurl do Winsock initing on win32 systems?\n5.5 Does CURLOPT_WRITEDATA and CURLOPT_READDATA work on win32 ?\n5.6 What about Keep-Alive or persistent connections?\n5.7 Link errors when building libcurl on Windows!\n5.8 libcurl.so.X: open failed: No such file or directory\n5.9 How does libcurl resolve host names?\n5.10 How do I prevent libcurl from writing the response to stdout?\n5.11 How do I make libcurl not receive the whole HTTP response?\n5.12 Can I make libcurl fake or hide my real IP address?\n5.13 How do I stop an ongoing transfer?\n5.14 Using C++ non-static functions for callbacks?\n5.15 How do I get an FTP directory listing?\n5.16 I want a different time-out!\n5.17 Can I write a server with libcurl?\n5.18 Does libcurl use threads?\nLicense Issues\n\n6.1 I have a GPL program, can I use the libcurl library?\n6.2 I have a closed-source program, can I use the libcurl library?\n6.3 I have a BSD licensed program, can I use the libcurl library?\n6.4 I have a program that uses LGPL libraries, can I use libcurl?\n6.5 Can I modify curl/libcurl for my program and keep the changes secret?\n6.6 Can you please change the curl/libcurl license to XXXX?\n6.7 What are my obligations when using libcurl in my commercial apps?\nPHP/CURL Issues\n\n7.1 What is PHP/CURL?\n7.2 Who wrote PHP/CURL?\n7.3 Can I perform multiple requests using the same handle?\n1. Philosophy\n\n1.1 What is cURL?\n\ncURL is the name of the project. The name is a play on 'Client for URLs', originally with URL spelled in uppercase to make it obvious it deals with URLs. The fact it can also be pronounced 'see URL' also helped, it works as an abbreviation for \"Client URL Request Library\" or why not the recursive version: \"Curl URL Request Library\".\n\nThe cURL project produces two products:\n\nlibcurl\n\nA free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS, TELNET and TFTP.\n\nlibcurl supports HTTPS certificates, HTTP POST, HTTP PUT, FTP uploading, Kerberos, SPNEGO, HTTP form based upload, proxies, cookies, user+password authentication, file transfer resume, http proxy tunneling and more!\n\nlibcurl is highly portable, it builds and works identically on numerous platforms, including Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HP-UX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOS, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS, Symbian, OSF, Android, Minix, IBM TPF and more...\n\nlibcurl is free, thread-safe, IPv6 compatible, feature rich, well supported and fast.\n\ncurl\n\nA command line tool for getting or sending files using URL syntax.\n\nSince curl uses libcurl, curl supports the same wide range of common Internet protocols that libcurl does.\n\nWe pronounce curl with an initial k sound. It rhymes with words like girl and earl. This is a short WAV file to help you:\n\n http://media.merriam-webster.com/soundc11/c/curl0001.wav\nThere are numerous sub-projects and related projects that also use the word curl in the project names in various combinations, but you should take notice that this FAQ is directed at the command-line tool named curl (and libcurl the library), and may therefore not be valid for other curl-related projects. (There is however a small section for the PHP/CURL in this FAQ.)\n\n1.2 What is libcurl?\n\nlibcurl is a reliable and portable library which provides you with an easy interface to a range of common Internet protocols.\n\nYou can use libcurl for free in your application, be it open source, commercial or closed-source.\n\nlibcurl is most probably the most portable, most powerful and most often used C-based multi-platform file transfer library on this planet - be it open source or commercial.\n\n1.3 What is curl not?\n\nCurl is not a wget clone. That is a common misconception. Never, during curl's development, have we intended curl to replace wget or compete on its market. Curl is targeted at single-shot file transfers.\n\nCurl is not a web site mirroring program. If you want to use curl to mirror something: fine, go ahead and write a script that wraps around curl to make it reality (like curlmirror.pl does).\n\nCurl is not an FTP site mirroring program. Sure, get and send FTP with curl but if you want systematic and sequential behavior you should write a script (or write a new program that interfaces libcurl) and do it.\n\nCurl is not a PHP tool, even though it works perfectly well when used from or with PHP (when using the PHP/CURL module).\n\nCurl is not a program for a single operating system. Curl exists, compiles, builds and runs under a wide range of operating systems, including all modern Unixes (and a bunch of older ones too), Windows, Amiga, BeOS, OS/2, OS X, QNX etc.\n\n1.4 When will you make curl do XXXX ?\n\nWe love suggestions of what to change in order to make curl and libcurl better. We do however believe in a few rules when it comes to the future of curl:\n\nCurl -- the command line tool -- is to remain a non-graphical command line tool. If you want GUIs or fancy scripting capabilities, you should look for another tool that uses libcurl.\n\nWe do not add things to curl that other small and available tools already do very fine at the side. Curl's output is fine to pipe into another program or redirect to another file for the next program to interpret.\n\nWe focus on protocol related issues and improvements. If you wanna do more magic with the supported protocols than curl currently does, chances are big we will agree. If you wanna add more protocols, we may very well agree.\n\nIf you want someone else to make all the work while you wait for us to implement it for you, that is not a very friendly attitude. We spend a considerable time already on maintaining and developing curl. In order to get more out of us, you should consider trading in some of your time and efforts in return. Simply go to the GitHub repo which resides at https://github.com/curl/curl, fork the project, and create pull requests with your proposed changes.\n\nIf you write the code, chances are bigger that it will get into curl faster.\n\n1.5 Who makes curl?\n\ncurl and libcurl are not made by any single individual. Daniel Stenberg is project leader and main developer, but other persons' submissions are important and crucial. Anyone can contribute and post their changes and improvements and have them inserted in the main sources (of course on the condition that developers agree on that the fixes are good).\n\nThe full list of all contributors is found in the docs/THANKS file.\n\ncurl is developed by a community, with Daniel at the wheel.\n\n1.6 What do you get for making curl?\n\nProject cURL is entirely free and open. No person gets paid for developing curl on full time. We do this voluntarily, mostly on spare time. Occasionally companies pay individual developers to work on curl, but that's up to each company and developer. It is not controlled by nor supervised in any way by the project.\n\nWe still get help from companies. Haxx provides web site, bandwidth, mailing lists etc, sourceforge.net hosts project services we take advantage from, like the bug tracker, and GitHub hosts the primary git repository at https://github.com/curl/curl. Also again, some companies have sponsored certain parts of the development in the past and I hope some will continue to do so in the future.\n\nIf you want to support our project, consider a donation or a banner-program or even better: by helping us coding, documenting, testing etc.\n\n1.7 What about CURL from curl.com?\n\nDuring the summer 2001, curl.com was busy advertising their client-side programming language for the web, named CURL.\n\nWe are in no way associated with curl.com or their CURL programming language.\n\nOur project name curl has been in effective use since 1998. We were not the first computer related project to use the name \"curl\" and do not claim any rights to the name.\n\nWe recognize that we will be living in parallel with curl.com and wish them every success.\n\n1.8 I have a problem who do I mail?\n\nPlease do not mail any single individual unless you really need to. Keep curl-related questions on a suitable mailing list. All available mailing lists are listed in the MANUAL document and online at https://curl.haxx.se/mail/\n\nKeeping curl-related questions and discussions on mailing lists allows others to join in and help, to share their ideas, contribute their suggestions and spread their wisdom. Keeping discussions on public mailing lists also allows for others to learn from this (both current and future users thanks to the web based archives of the mailing lists), thus saving us from having to repeat ourselves even more. Thanks for respecting this.\n\nIf you have found or simply suspect a security problem in curl or libcurl, mail curl-security at haxx.se (closed list of receivers, mails are not disclosed) and tell. Then we can produce a fix in a timely manner before the flaw is announced to the world, thus lessen the impact the problem will have on existing users.\n\n1.9 Where do I buy commercial support for curl?\n\ncurl is fully open source. It means you can hire any skilled engineer to fix your curl-related problems.\n\nWe list available alternatives on the curl web site: https://curl.haxx.se/support.html\n\n1.10 How many are using curl?\n\nIt is impossible to tell.\n\nWe don't know how many users that knowingly have installed and use curl.\n\nWe don't know how many users that use curl without knowing that they are in fact using it.\n\nWe don't know how many users that downloaded or installed curl and then never use it.\n\nIn May 2012 Daniel did a counting game and came up with a number that may be completely wrong or somewhat accurate. Over 500 million!\n\nSee https://daniel.haxx.se/blog/2012/05/16/300m-users/\n\n1.11 Why don't you update ca-bundle.crt\n\nThe ca cert bundle that used to shipped with curl was very outdated and must be replaced with an up-to-date version by anyone who wants to verify peers. It is no longer provided by curl. The last curl release ever that shipped a ca cert bundle was curl 7.18.0.\n\nIn the cURL project we've decided not to attempt to keep this file updated (or even present anymore) since deciding what to add to a ca cert bundle is an undertaking we've not been ready to accept, and the one we can get from Mozilla is perfectly fine so there's no need to duplicate that work.\n\nToday, with many services performed over HTTPS, every operating system should come with a default ca cert bundle that can be deemed somewhat trustworthy and that collection (if reasonably updated) should be deemed to be a lot better than a private curl version.\n\nIf you want the most recent collection of ca certs that Mozilla Firefox uses, we recommend that you extract the collection yourself from Mozilla Firefox (by running 'make ca-bundle), or by using our online service setup for this purpose: https://curl.haxx.se/docs/caextract.html\n\n1.12 I have a problem who can I chat with?\n\nThere's a bunch of friendly people hanging out in the #curl channel on the IRC network irc.freenode.net. If you're polite and nice, chances are big that you can get -- or provide -- help instantly.\n\n1.13 curl's ECCN number?\n\nThe US government restricts exports of software that contains or uses cryptography. When doing so, the Export Control Classification Number (ECCN) is used to identify the level of export control etc.\n\nApache Software Foundation gives a good explanation of ECCNs at https://www.apache.org/dev/crypto.html\n\nWe believe curl's number might be ECCN 5D002, another possibility is 5D992. It seems necessary to write them (the authority that administers ECCN numbers), asking to confirm.\n\nComprehensible explanations of the meaning of such numbers and how to obtain them (resp.) are here\n\nhttp://www.bis.doc.gov/licensing/exportingbasics.htm http://www.bis.doc.gov/licensing/do_i_needaneccn.html\n\nAn incomprehensible description of the two numbers above is here http://www.access.gpo.gov/bis/ear/pdf/ccl5-pt2.pdf\n\n1.14 How do I submit my patch?\n\nWhen you have made a patch or a change of whatever sort, and want to submit that to the project, there are a few different ways we prefer:\n\no send a patch to the curl-library mailing list. We're many subscribers\n\nthere and there are lots of people who can review patches, comment on them and \"receive\" them properly.\n\no if your patch changes or fixes a bug, you can also opt to submit a bug\n\nreport in the bug tracker and attach your patch there. There are less people involved there.\n\nLots of more details are found in the CONTRIBUTE and INTERNALS docs.\n\n1.15 How do I port libcurl to my OS?\n\nHere's a rough step-by-step:\n\n1. copy a suitable lib/config-*.h file as a start to lib/config-[youros].h\n\n2. edit lib/config-[youros].h to match your OS and setup\n\n3. edit lib/curl_setup.h to include config-[youros].h when your OS is\n\n detected by the preprocessor, in the style others already exist\n4. compile lib/*.c and make them into a library\n\n2. Install Related Problems\n\n2.1 configure doesn't find OpenSSL even when it is installed\n\nThis may be because of several reasons.\n\n2.1.1 native linker doesn't find openssl\n\nAffected platforms:\n\n Solaris (native cc compiler)\n HPUX (native cc compiler)\n SGI IRIX (native cc compiler)\n SCO UNIX (native cc compiler)\nWhen configuring curl, I specify --with-ssl. OpenSSL is installed in /usr/local/ssl Configure reports SSL in /usr/local/ssl, but fails to find CRYPTO_lock in -lcrypto\n\nCause: The cc for this test places the -L/usr/local/ssl/lib AFTER -lcrypto, so ld can't find the library. This is due to a bug in the GNU autoconf tool.\n\nWorkaround: Specifying \"LDFLAGS=-L/usr/local/ssl/lib\" in front of ./configure places the -L/usr/local/ssl/lib early enough in the command line to make things work\n\n2.1.2 only the libssl lib is missing\n\nIf all include files and the libcrypto lib is present, with only the libssl being missing according to configure, this is mostly likely because a few functions are left out from the libssl.\n\nIf the function names missing include RSA or RSAREF you can be certain that this is because libssl requires the RSA and RSAREF libs to build.\n\nSee the INSTALL file section that explains how to add those libs to configure. Make sure that you remove the config.cache file before you rerun configure with the new flags.\n\n2.2 Does curl work/build with other SSL libraries?\n\nCurl has been written to use a generic SSL function layer internally, and that SSL functionality can then be provided by one out of many different SSL backends.\n\ncurl can be built to use one of the following SSL alternatives: OpenSSL, GnuTLS, yassl, NSS, PolarSSL, axTLS, Secure Transport (native iOS/OS X), WinSSL (native Windows) or GSKit (native IBM i). They all have their pros and cons, and we try to maintain a comparison of them here: https://curl.haxx.se/docs/ssl-compared.html\n\n2.3 Where can I find a copy of LIBEAY32.DLL?\n\nThat is an OpenSSL binary built for Windows.\n\nCurl can be built with OpenSSL to do the SSL stuff. The LIBEAY32.DLL is then what curl needs on a windows machine to do https:// etc. Check out the curl web site to find accurate and up-to-date pointers to recent OpenSSL DLLs and other binary packages.\n\n2.4 Does curl support SOCKS (RFC 1928) ?\n\nYes, SOCKS 4 and 5 are supported.\n\n2.5 Install libcurl for both 32bit and 64bit?\n\nIn curl's configure procedure one of the regular include files get created with platform specific information. The file 'curl/curlbuild.h' in the installed libcurl file tree is therefore somewhat tied to that particular platform.\n\nTo allow applications to get built for either 32bit or 64bit you need to install libcurl headers for both setups and unfortunately curl doesn't do this automatically.\n\nA commonly used procedure is this:\n\n $ ./configure [32bit platform]\n $ mv curl/curlbuild.h curl/curlbuild-32bit.h\n $ ./configure [64bit platform]\n $ mv curl/curlbuild.h curl/curlbuild-64bit.h\nThen you make a toplevel curl/curlbuild.h replacement that only does this:\n\n #ifdef IS_32BIT\n #include \"curlbuild-32bit.h\"\n else\n #include \"curlbuild-64bit.h\"\n #endif\n3. Usage problems\n\n3.1 curl: (1) SSL is disabled, https: not supported\n\nIf you get this output when trying to get anything from a https:// server, it means that the instance of curl/libcurl that you're using was built without support for this protocol.\n\nThis could've happened if the configure script that was run at build time couldn't find all libs and include files curl requires for SSL to work. If the configure script fails to find them, curl is simply built without SSL support.\n\nTo get the https:// support into a curl that was previously built but that reports that https:// is not supported, you should dig through the document and logs and check out why the configure script doesn't find the SSL libs and/or include files.\n\nAlso, check out the other paragraph in this FAQ labelled \"configure doesn't find OpenSSL even when it is installed\".\n\n3.2 How do I tell curl to resume a transfer?\n\nCurl supports resumed transfers both ways on both FTP and HTTP. Try the -C option.\n\n3.3 Why doesn't my posting using -F work?\n\nYou can't simply use -F or -d at your choice. The web server that will receive your post expects one of the formats. If the form you're trying to submit uses the type 'multipart/form-data', then and only then you must use the -F type. In all the most common cases, you should use -d which then causes a posting with the type 'application/x-www-form-urlencoded'.\n\nThis is described in some detail in the MANUAL and TheArtOfHttpScripting documents, and if you don't understand it the first time, read it again before you post questions about this to the mailing list. Also, try reading through the mailing list archives for old postings and questions regarding this.\n\n3.4 How do I tell curl to run custom FTP commands?\n\nYou can tell curl to perform optional commands both before and/or after a file transfer. Study the -Q/--quote option.\n\nSince curl is used for file transfers, you don't normally use curl to perform FTP commands without transferring anything. Therefore you must always specify a URL to transfer to/from even when doing custom FTP commands, or use -I which implies the \"no body\" option sent to libcurl.\n\n3.5 How can I disable the Accept: */ * header?\n\nYou can change all internally generated headers by adding a replacement with the -H/--header option. By adding a header with empty contents you safely disable that one. Use -H \"Accept:\" to disable that specific header.\n\n3.6 Does curl support ASP, XML, XHTML or HTML version Y?\n\nTo curl, all contents are alike. It doesn't matter how the page was generated. It may be ASP, PHP, Perl, shell-script, SSI or plain HTML files. There's no difference to curl and it doesn't even know what kind of language that generated the page.\n\nSee also item 3.14 regarding javascript.\n\n3.7 Can I use curl to delete/rename a file through FTP?\n\nYes. You specify custom FTP commands with -Q/--quote.\n\nOne example would be to delete a file after you have downloaded it:\n\n curl -O ftp://download.com/coolfile -Q '-DELE coolfile'\nor rename a file after upload:\n\n curl -T infile ftp://upload.com/dir/ -Q \"-RNFR infile\" -Q \"-RNTO newname\"\n3.8 How do I tell curl to follow HTTP redirects?\n\nCurl does not follow so-called redirects by default. The Location: header that informs the client about this is only interpreted if you're using the -L/--location option. As in:\n\n curl -L http://redirector.com\nNot all redirects are HTTP ones, see 4.14\n\n3.9 How do I use curl in my favorite programming language?\n\nThere exist many language interfaces/bindings for curl that integrates it better with various languages. If you are fluid in a script language, you may very well opt to use such an interface instead of using the command line tool.\n\nFind out more about which languages that support curl directly, and how to install and use them, in the libcurl section of the curl web site: https://curl.haxx.se/libcurl/\n\nAll the various bindings to libcurl are made by other projects and people, outside of the cURL project. The cURL project itself only produces libcurl with its plain C API. If you don't find anywhere else to ask you can ask about bindings on the curl-library list too, but be prepared that people on that list may not know anything about bindings.\n\nIn October 2009, there were interfaces available for the following languages: Ada95, Basic, C, C++, Ch, Cocoa, D, Dylan, Eiffel, Euphoria, Ferite, Gambas, glib/GTK+, Haskell, ILE/RPG, Java, Lisp, Lua, Mono, .NET, Object-Pascal, O'Caml, Pascal, Perl, PHP, PostgreSQL, Python, R, Rexx, Ruby, Scheme, S-Lang, Smalltalk, SP-Forth, SPL, Tcl, Visual Basic, Visual FoxPro, Q, wxwidgets and XBLite. By the time you read this, additional ones may have appeared!\n\n3.10 What about SOAP, WebDAV, XML-RPC or similar protocols over HTTP?\n\nCurl adheres to the HTTP spec, which basically means you can play with *any* protocol that is built on top of HTTP. Protocols such as SOAP, WEBDAV and XML-RPC are all such ones. You can use -X to set custom requests and -H to set custom headers (or replace internally generated ones).\n\nUsing libcurl is of course just as fine and you'd just use the proper library options to do the same.\n\n3.11 How do I POST with a different Content-Type?\n\nYou can always replace the internally generated headers with -H/--header. To make a simple HTTP POST with text/xml as content-type, do something like:\n\n curl -d \"datatopost\" -H \"Content-Type: text/xml\" [URL]\n3.12 Why do FTP specific features over HTTP proxy fail?\n\nBecause when you use a HTTP proxy, the protocol spoken on the network will be HTTP, even if you specify a FTP URL. This effectively means that you normally can't use FTP specific features such as FTP upload and FTP quote etc.\n\nThere is one exception to this rule, and that is if you can \"tunnel through\" the given HTTP proxy. Proxy tunneling is enabled with a special option (-p) and is generally not available as proxy admins usually disable tunneling to other ports than 443 (which is used for HTTPS access through proxies).\n\n3.13 Why does my single/double quotes fail?\n\nTo specify a command line option that includes spaces, you might need to put the entire option within quotes. Like in:\n\ncurl -d \" with spaces \" url.com\n\nor perhaps\n\ncurl -d ' with spaces ' url.com\n\nExactly what kind of quotes and how to do this is entirely up to the shell or command line interpreter that you are using. For most unix shells, you can more or less pick either single (') or double (\") quotes. For Windows/DOS prompts I believe you're forced to use double (\") quotes.\n\nPlease study the documentation for your particular environment. Examples in the curl docs will use a mix of both these ones as shown above. You must adjust them to work in your environment.\n\nRemember that curl works and runs on more operating systems than most single individuals have ever tried.\n\n3.14 Does curl support Javascript or PAC (automated proxy config)?\n\nMany web pages do magic stuff using embedded Javascript. Curl and libcurl have no built-in support for that, so it will be treated just like any other contents.\n\n.pac files are a netscape invention and are sometimes used by organizations to allow them to differentiate which proxies to use. The .pac contents is just a Javascript program that gets invoked by the browser and that returns the name of the proxy to connect to. Since curl doesn't support Javascript, it can't support .pac proxy configuration either.\n\nSome workarounds usually suggested to overcome this Javascript dependency:\n\nDepending on the Javascript complexity, write up a script that translates it to another language and execute that.\n\nRead the Javascript code and rewrite the same logic in another language.\n\nImplement a Javascript interpreter, people have successfully used the Mozilla Javascript engine in the past.\n\nAsk your admins to stop this, for a static proxy setup or similar.\n\n3.15 Can I do recursive fetches with curl?\n\nNo. curl itself has no code that performs recursive operations, such as those performed by wget and similar tools.\n\nThere exist wrapper scripts with that functionality (for example the curlmirror perl script), and you can write programs based on libcurl to do it, but the command line tool curl itself cannot.\n\n3.16 What certificates do I need when I use SSL?\n\nThere are three different kinds of \"certificates\" to keep track of when we talk about using SSL-based protocols (HTTPS or FTPS) using curl or libcurl.\n\nCLIENT CERTIFICATE\n\nThe server you communicate may require that you can provide this in order to prove that you actually are who you claim to be. If the server doesn't require this, you don't need a client certificate.\n\nA client certificate is always used together with a private key, and the private key has a pass phrase that protects it.\n\nSERVER CERTIFICATE\n\nThe server you communicate with has a server certificate. You can and should verify this certificate to make sure that you are truly talking to the real server and not a server impersonating it.\n\nCERTIFICATE AUTHORITY CERTIFICATE (\"CA cert\")\n\nYou often have several CA certs in a CA cert bundle that can be used to verify a server certificate that was signed by one of the authorities in the bundle. curl does not come with a CA cert bundle but most curl installs provide one. You can also override the default.\n\nThe server certificate verification process is made by using a Certificate Authority certificate (\"CA cert\") that was used to sign the server certificate. Server certificate verification is enabled by default in curl and libcurl and is often the reason for problems as explained in FAQ entry 4.12 and the SSLCERTS document (https://curl.haxx.se/docs/sslcerts.html). Server certificates that are \"self-signed\" or otherwise signed by a CA that you do not have a CA cert for, cannot be verified. If the verification during a connect fails, you are refused access. You then need to explicitly disable the verification to connect to the server.\n\n3.17 How do I list the root dir of an FTP server?\n\nThere are two ways. The way defined in the RFC is to use an encoded slash in the first path part. List the \"/tmp\" dir like this:\n\n curl ftp://ftp.sunet.se/%2ftmp/\nor the not-quite-kosher-but-more-readable way, by simply starting the path section of the URL with a slash:\n\n curl ftp://ftp.sunet.se//tmp/\n3.18 Can I use curl to send a POST/PUT and not wait for a response?\n\nNo.\n\nBut you could easily write your own program using libcurl to do such stunts.\n\n3.19 How do I get HTTP from a host using a specific IP address?\n\nFor example, you may be trying out a web site installation that isn't yet in the DNS. Or you have a site using multiple IP addresses for a given host name and you want to address a specific one out of the set.\n\nSet a custom Host: header that identifies the server name you want to reach but use the target IP address in the URL:\n\ncurl --header \"Host: www.example.com\" http://127.0.0.1/\n\nYou can also opt to add faked host name entries to curl with the --resolve option. That has the added benefit that things like redirects will also work properly. The above operation would instead be done as:\n\ncurl --resolve www.example.com:80:127.0.0.1 http://www.example.com/\n\n3.20 How to SFTP from my user's home directory?\n\nContrary to how FTP works, SFTP and SCP URLs specify the exact directory to work with. It means that if you don't specify that you want the user's home directory, you get the actual root directory.\n\nTo specify a file in your user's home directory, you need to use the correct URL syntax which for sftp might look similar to:\n\ncurl -O -u user:password sftp://example.com/~/file.txt\n\nand for SCP it is just a different protocol prefix:\n\ncurl -O -u user:password scp://example.com/~/file.txt\n\n3.21 Protocol xxx not supported or disabled in libcurl\n\nWhen passing on a URL to curl to use, it may respond that the particular protocol is not supported or disabled. The particular way this error message is phrased is because curl doesn't make a distinction internally of whether a particular protocol is not supported (i.e. never got any code added that knows how to speak that protocol) or if it was explicitly disabled. curl can be built to only support a given set of protocols, and the rest would then be disabled or not supported.\n\nNote that this error will also occur if you pass a wrongly spelled protocol part as in \"htpt://example.com\" or as in the less evident case if you prefix the protocol part with a space as in \" http://example.com/\".\n\n3.22 curl -X gives me HTTP problems\n\nIn normal circumstances, -X should hardly ever be used.\n\nBy default you use curl without explicitly saying which request method to use when the URL identifies a HTTP transfer. If you just pass in a URL like \"curl http://example.com\" it will use GET. If you use -d or -F curl will use POST, -I will cause a HEAD and -T will make it a PUT.\n\nIf for whatever reason you're not happy with these default choices that curl does for you, you can override those request methods by specifying -X [WHATEVER]. This way you can for example send a DELETE by doing \"curl -X DELETE [URL]\".\n\nIt is thus pointless to do \"curl -XGET [URL]\" as GET would be used anyway. In the same vein it is pointless to do \"curl -X POST -d data [URL]\"... But you can make a fun and somewhat rare request that sends a request-body in a GET request with something like \"curl -X GET -d data [URL]\"\n\nNote that -X doesn't actually change curl's behavior as it only modifies the actual string sent in the request, but that may of course trigger a different set of events.\n\nAccordingly, by using -XPOST on a command line that for example would follow a 303 redirect, you will effectively prevent curl from behaving correctly. Be aware.\n\n4. Running Problems\n\n4.1 Problems connecting to SSL servers.\n\nIt took a very long time before we could sort out why curl had problems to connect to certain SSL servers when using SSLeay or OpenSSL v0.9+. The error sometimes showed up similar to:\n\n16570:error:1407D071:SSL routines:SSL2_READ:bad mac decode:s2_pkt.c:233:\n\nIt turned out to be because many older SSL servers don't deal with SSLv3 requests properly. To correct this problem, tell curl to select SSLv2 from the command line (-2/--sslv2).\n\nThere have also been examples where the remote server didn't like the SSLv2 request and instead you had to force curl to use SSLv3 with -3/--sslv3.\n\n4.2 Why do I get problems when I use & or % in the URL?\n\nIn general unix shells, the & symbol is treated specially and when used, it runs the specified command in the background. To safely send the & as a part of a URL, you should quote the entire URL by using single (') or double (\") quotes around it. Similar problems can also occur on some shells with other characters, including ?*!$~(){}<>\\|;`. When in doubt, quote the URL.\n\nAn example that would invoke a remote CGI that uses &-symbols could be:\n\n curl 'http://www.altavista.com/cgi-bin/query?text=yes&q=curl'\nIn Windows, the standard DOS shell treats the percent sign specially and you need to use TWO percent signs for each single one you want to use in the URL.\n\nIf you want a literal percent sign to be part of the data you pass in a POST using -d/--data you must encode it as '%25' (which then also needs the percent sign doubled on Windows machines).\n\n4.3 How can I use {, }, [ or ] to specify multiple URLs?\n\nBecause those letters have a special meaning to the shell, and to be used in a URL specified to curl you must quote them.\n\nAn example that downloads two URLs (sequentially) would do:\n\ncurl '{curl,www}.haxx.se'\n\nTo be able to use those letters as actual parts of the URL (without using them for the curl URL \"globbing\" system), use the -g/--globoff option:\n\ncurl -g 'www.site.com/weirdname[].html'\n\n4.4 Why do I get downloaded data even though the web page doesn't exist?\n\nCurl asks remote servers for the page you specify. If the page doesn't exist at the server, the HTTP protocol defines how the server should respond and that means that headers and a \"page\" will be returned. That's simply how HTTP works.\n\nBy using the --fail option you can tell curl explicitly to not get any data if the HTTP return code doesn't say success.\n\n4.5 Why do I get return code XXX from a HTTP server?\n\nRFC2616 clearly explains the return codes. This is a short transcript. Go read the RFC for exact details:\n\n4.5.1 \"400 Bad Request\"\n\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n\n4.5.2 \"401 Unauthorized\"\n\nThe request requires user authentication.\n\n4.5.3 \"403 Forbidden\"\n\nThe server understood the request, but is refusing to fulfil it. Authorization will not help and the request SHOULD NOT be repeated.\n\n4.5.4 \"404 Not Found\"\n\nThe server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent.\n\n4.5.5 \"405 Method Not Allowed\"\n\nThe method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.\n\n4.5.6 \"301 Moved Permanently\"\n\nIf you get this return code and an HTML output similar to this:\n\n <H1>Moved Permanently</H1> The document has moved <A\n HREF=\"http://same_url_now_with_a_trailing_slash/\">here</A>.\nit might be because you request a directory URL but without the trailing slash. Try the same operation again with the trailing URL, or use the -L/--location option to follow the redirection.\n\n4.6 Can you tell me what error code 142 means?\n\nAll curl error codes are described at the end of the man page, in the section called \"EXIT CODES\".\n\nError codes that are larger than the highest documented error code means that curl has exited due to a crash. This is a serious error, and we appreciate a detailed bug report from you that describes how we could go ahead and repeat this!\n\n4.7 How do I keep user names and passwords secret in Curl command lines?\n\nThis problem has two sides:\n\nThe first part is to avoid having clear-text passwords in the command line so that they don't appear in 'ps' outputs and similar. That is easily avoided by using the \"-K\" option to tell curl to read parameters from a file or stdin to which you can pass the secret info. curl itself will also attempt to \"hide\" the given password by blanking out the option - this doesn't work on all platforms.\n\nTo keep the passwords in your account secret from the rest of the world is not a task that curl addresses. You could of course encrypt them somehow to at least hide them from being read by human eyes, but that is not what anyone would call security.\n\nAlso note that regular HTTP (using Basic authentication) and FTP passwords are sent in clear across the network. All it takes for anyone to fetch them is to listen on the network. Eavesdropping is very easy. Use more secure authentication methods (like Digest, Negotiate or even NTLM) or consider the SSL-based alternatives HTTPS and FTPS.\n\n4.8 I found a bug!\n\nIt is not a bug if the behavior is documented. Read the docs first. Especially check out the KNOWN_BUGS file, it may be a documented bug!\n\nIf it is a problem with a binary you've downloaded or a package for your particular platform, try contacting the person who built the package/archive you have.\n\nIf there is a bug, read the BUGS document first. Then report it as described in there.\n\n4.9 Curl can't authenticate to the server that requires NTLM?\n\nNTLM support requires OpenSSL, GnuTLS, NSS, Secure Transport, or Microsoft Windows libraries at build-time to provide this functionality.\n\nNTLM is a Microsoft proprietary protocol. Proprietary formats are evil. You should not use such ones.\n\n4.10 My HTTP request using HEAD, PUT or DELETE doesn't work!\n\nMany web servers allow or demand that the administrator configures the server properly for these requests to work on the web server.\n\nSome servers seem to support HEAD only on certain kinds of URLs.\n\nTo fully grasp this, try the documentation for the particular server software you're trying to interact with. This is not anything curl can do anything about.\n\n4.11 Why does my HTTP range requests return the full document?\n\nBecause the range may not be supported by the server, or the server may choose to ignore it and return the full document anyway.\n\n4.12 Why do I get \"certificate verify failed\" ?\n\nYou invoke curl 7.10 or later to communicate on a https:// URL and get an error back looking something similar to this:\n\n curl: (35) SSL: error:14090086:SSL routines:\n SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\nThen it means that curl couldn't verify that the server's certificate was good. Curl verifies the certificate using the CA cert bundle that comes with the curl installation.\n\nTo disable the verification (which makes it act like curl did before 7.10), use -k. This does however enable man-in-the-middle attacks.\n\nIf you get this failure but are having a CA cert bundle installed and used, the server's certificate is not signed by one of the CA's in the bundle. It might for example be self-signed. You then correct this problem by obtaining a valid CA cert for the server. Or again, decrease the security by disabling this check.\n\nDetails are also in the SSLCERTS file in the release archives, found online here: https://curl.haxx.se/docs/sslcerts.html\n\n4.13 Why is curl -R on Windows one hour off?\n\nDuring daylight savings time, when -R is used, curl will set a time that appears one hour off. This happens due to a flaw in how Windows stores and uses file modification times and it is not easily worked around. For details on this problem, read this: http://www.codeproject.com/datetime/dstbugs.asp\n\n4.14 Redirects work in browser but not with curl!\n\ncurl supports HTTP redirects fine (see item 3.8). Browsers generally support at least two other ways to perform redirects that curl does not:\n\nMeta tags. You can write a HTML tag that will cause the browser to redirect to another given URL after a certain time.\n\nJavascript. You can write a Javascript program embedded in a HTML page that redirects the browser to another given URL.\n\nThere is no way to make curl follow these redirects. You must either manually figure out what the page is set to do, or you write a script that parses the results and fetches the new URL.\n\n4.15 FTPS doesn't work\n\ncurl supports FTPS (sometimes known as FTP-SSL) both implicit and explicit mode.\n\nWhen a URL is used that starts with FTPS://, curl assumes implicit SSL on the control connection and will therefore immediately connect and try to speak SSL. FTPS:// connections default to port 990.\n\nTo use explicit FTPS, you use a FTP:// URL and the --ftp-ssl option (or one of its related flavours). This is the most common method, and the one mandated by RFC4217. This kind of connection then of course uses the standard FTP port 21 by default.\n\n4.16 My HTTP POST or PUT requests are slow!\n\nlibcurl makes all POST and PUT requests (except for POST requests with a very tiny request body) use the \"Expect: 100-continue\" header. This header allows the server to deny the operation early so that libcurl can bail out already before having to send any data. This is useful in authentication cases and others.\n\nHowever, many servers don't implement the Expect: stuff properly and if the server doesn't respond (positively) within 1 second libcurl will continue and send off the data anyway.\n\nYou can disable libcurl's use of the Expect: header the same way you disable any header, using -H / CURLOPT_HTTPHEADER, or by forcing it to use HTTP 1.0.\n\n4.17 Non-functional connect timeouts\n\nIn most Windows setups having a timeout longer than 21 seconds make no difference, as it will only send 3 TCP SYN packets and no more. The second packet sent three seconds after the first and the third six seconds after the second. No more than three packets are sent, no matter how long the timeout is set.\n\nSee option TcpMaxConnectRetransmissions on this page: https://support.microsoft.com/en-us/kb/175523/en-us\n\nAlso, even on non-Windows systems there may run a firewall or anti-virus software or similar that accepts the connection but does not actually do anything else. This will make (lib)curl to consider the connection connected and thus the connect timeout won't trigger.\n\n4.18 file:// URLs containing drive letters (Windows, NetWare)\n\nWhen using cURL to try to download a local file, one might use a URL in this format:\n\nfile://D:/blah.txt\n\nYou'll find that even if D:\\blah.txt does exist, cURL returns a 'file not found' error.\n\nAccording to RFC 1738 (https://www.ietf.org/rfc/rfc1738.txt), file:// URLs must contain a host component, but it is ignored by most implementations. In the above example, 'D:' is treated as the host component, and is taken away. Thus, cURL tries to open '/blah.txt'. If your system is installed to drive C:, that will resolve to 'C:\\blah.txt', and if that doesn't exist you will get the not found error.\n\nTo fix this problem, use file:// URLs with *three* leading slashes:\n\nfile:///D:/blah.txt\n\nAlternatively, if it makes more sense, specify 'localhost' as the host component:\n\nfile://localhost/D:/blah.txt\n\nIn either case, cURL should now be looking for the correct file.\n\n4.19 Why doesn't cURL return an error when the network cable is unplugged?\n\nUnplugging a cable is not an error situation. The TCP/IP protocol stack was designed to be fault tolerant, so even though there may be a physical break somewhere the connection shouldn't be affected, just possibly delayed. Eventually, the physical break will be fixed or the data will be re-routed around the physical problem through another path.\n\nIn such cases, the TCP/IP stack is responsible for detecting when the network connection is irrevocably lost. Since with some protocols it is perfectly legal for the client to wait indefinitely for data, the stack may never report a problem, and even when it does, it can take up to 20 minutes for it to detect an issue. The curl option --keepalive-time enables keep-alive support in the TCP/IP stack which makes it periodically probe the connection to make sure it is still available to send data. That should reliably detect any TCP/IP network failure.\n\nBut even that won't detect the network going down before the TCP/IP connection is established (e.g. during a DNS lookup) or using protocols that don't use TCP. To handle those situations, curl offers a number of timeouts on its own. --speed-limit/--speed-time will abort if the data transfer rate falls too low, and --connect-timeout and --max-time can be used to put an overall timeout on the connection phase or the entire transfer.\n\nA libcurl-using application running in a known physical environment (e.g. an embedded device with only a single network connection) may want to act immediately if its lone network connection goes down. That can be achieved by having the application monitor the network connection on its own using an OS-specific mechanism, then signalling libcurl to abort (see also item 5.13).\n\n4.20 curl doesn't return error for HTTP non-200 responses!\n\nCorrect. Unless you use -f (--fail).\n\nWhen doing HTTP transfers, curl will perform exactly what you're asking it to do and if successful it will not return an error. You can use curl to test your web server's \"file not found\" page (that gets 404 back), you can use it to check your authentication protected web pages (that get a 401 back) and so on.\n\nThe specific HTTP response code does not constitute a problem or error for curl. It simply sends and delivers HTTP as you asked and if that worked, everything is fine and dandy. The response code is generally providing more higher level error information that curl doesn't care about. The error was not in the HTTP transfer.\n\nIf you want your command line to treat error codes in the 400 and up range as errors and thus return a non-zero value and possibly show an error message, curl has a dedicated option for that: -f (CURLOPT_FAILONERROR in libcurl speak).\n\nYou can also use the -w option and the variable %{response_code} to extract the exact response code that was return in the response.\n\n4.21 Why is there a HTTP/1.1 in my HTTP/2 request?\n\nIf you use verbose to see the HTTP request when you send off a HTTP/2 request, it will still say 1.1.\n\nThe reason for this is that we first generate the request to send using the old 1.1 style and show that request in the verbose output, and then we convert it over to the binary header-compressed HTTP/2 style. The actual \"1.1\" part from that request is then not actually used in the transfer. The binary HTTP/2 headers are not human readable.\n\n5. libcurl Issues\n\n5.1 Is libcurl thread-safe?\n\nYes.\n\nWe have written the libcurl code specifically adjusted for multi-threaded programs. libcurl will use thread-safe functions instead of non-safe ones if your system has such. Note that you must never share the same handle in multiple threads.\n\nThere may be some exceptions to thread safety depending on how libcurl was built. Please review the guidelines for thread safety to learn more: https://curl.haxx.se/libcurl/c/threadsafe.html\n\n5.2 How can I receive all data into a large memory chunk?\n\n[ See also the examples/getinmemory.c source ]\n\nYou are in full control of the callback function that gets called every time there is data received from the remote server. You can make that callback do whatever you want. You do not have to write the received data to a file.\n\nOne solution to this problem could be to have a pointer to a struct that you pass to the callback function. You set the pointer using the CURLOPT_WRITEDATA option. Then that pointer will be passed to the callback instead of a FILE * to a file:\n\n /* imaginary struct */\n struct MemoryStruct {\n char *memory;\n size_t size;\n };\n /* imaginary callback function */\n size_t\n WriteMemoryCallback(void *ptr, size_t size, size_t nmemb, void *data)\n {\n size_t realsize = size * nmemb;\n struct MemoryStruct *mem = (struct MemoryStruct *)data;\n mem->memory = (char *)realloc(mem->memory, mem->size + realsize + 1);\n if (mem->memory) {\n memcpy(&(mem->memory[mem->size]), ptr, realsize);\n mem->size += realsize;\n mem->memory[mem->size] = 0;\n }\n return realsize;\n }\n5.3 How do I fetch multiple files with libcurl?\n\nlibcurl has excellent support for transferring multiple files. You should just repeatedly set new URLs with curl_easy_setopt() and then transfer it with curl_easy_perform(). The handle you get from curl_easy_init() is not only reusable, but you're even encouraged to reuse it if you can, as that will enable libcurl to use persistent connections.\n\n5.4 Does libcurl do Winsock initialization on win32 systems?\n\nYes, if told to in the curl_global_init() call.\n\n5.5 Does CURLOPT_WRITEDATA and CURLOPT_READDATA work on win32 ?\n\nYes, but you cannot open a FILE * and pass the pointer to a DLL and have that DLL use the FILE * (as the DLL and the client application cannot access each others' variable memory areas). If you set CURLOPT_WRITEDATA you must also use CURLOPT_WRITEFUNCTION as well to set a function that writes the file, even if that simply writes the data to the specified FILE *. Similarly, if you use CURLOPT_READDATA you must also specify CURLOPT_READFUNCTION.\n\n5.6 What about Keep-Alive or persistent connections?\n\ncurl and libcurl have excellent support for persistent connections when transferring several files from the same server. Curl will attempt to reuse connections for all URLs specified on the same command line/config file, and libcurl will reuse connections for all transfers that are made using the same libcurl handle.\n\nWhen you use the easy interface, the connection cache is kept within the easy handle. If you instead use the multi interface, the connection cache will be kept within the multi handle and will be shared among all the easy handles that are used within the same multi handle.\n\n5.7 Link errors when building libcurl on Windows!\n\nYou need to make sure that your project, and all the libraries (both static and dynamic) that it links against, are compiled/linked against the same run time library.\n\nThis is determined by the /MD, /ML, /MT (and their corresponding /M?d) options to the command line compiler. /MD (linking against MSVCRT dll) seems to be the most commonly used option.\n\nWhen building an application that uses the static libcurl library, you must add -DCURL_STATICLIB to your CFLAGS. Otherwise the linker will look for dynamic import symbols. If you're using Visual Studio, you need to instead add CURL_STATICLIB in the \"Preprocessor Definitions\" section.\n\nIf you get linker error like \"unknown symbol __imp__curl_easy_init ...\" you have linked against the wrong (static) library. If you want to use the libcurl.dll and import lib, you don't need any extra CFLAGS, but use one of the import libraries below. These are the libraries produced by the various lib/Makefile.* files:\n\n Target: static lib. import lib for libcurl*.dll.\n -----------------------------------------------------------\n MingW: libcurl.a libcurldll.a\n MSVC (release): libcurl.lib libcurl_imp.lib\n MSVC (debug): libcurld.lib libcurld_imp.lib\n Borland: libcurl.lib libcurl_imp.lib\n5.8 libcurl.so.X: open failed: No such file or directory\n\nThis is an error message you might get when you try to run a program linked with a shared version of libcurl and your run-time linker (ld.so) couldn't find the shared library named libcurl.so.X. (Where X is the number of the current libcurl ABI, typically 3 or 4).\n\nYou need to make sure that ld.so finds libcurl.so.X. You can do that multiple ways, and it differs somewhat between different operating systems, but they are usually:\n\n* Add an option to the linker command line that specify the hard-coded path\n\nthe run-time linker should check for the lib (usually -R)\n\n* Set an environment variable (LD_LIBRARY_PATH for example) where ld.so\n\nshould check for libs\n\n* Adjust the system's config to check for libs in the directory where you've\n\nput the dir (like Linux's /etc/ld.so.conf)\n\n'man ld.so' and 'man ld' will tell you more details\n\n5.9 How does libcurl resolve host names?\n\nlibcurl supports a large a number of different name resolve functions. One of them is picked at build-time and will be used unconditionally. Thus, if you want to change name resolver function you must rebuild libcurl and tell it to use a different function.\n\n- The non-IPv6 resolver that can use one out of four host name resolve calls\n\n(depending on what your system supports):\n\n A - gethostbyname()\n B - gethostbyname_r() with 3 arguments\n C - gethostbyname_r() with 5 arguments\n D - gethostbyname_r() with 6 arguments\n- The IPv6-resolver that uses getaddrinfo()\n\n- The c-ares based name resolver that uses the c-ares library for resolves.\n\nUsing this offers asynchronous name resolves.\n\n- The threaded resolver (default option on Windows). It uses:\n\n A - gethostbyname() on plain IPv4 hosts\n B - getaddrinfo() on IPv6 enabled hosts\nAlso note that libcurl never resolves or reverse-lookups addresses given as pure numbers, such as 127.0.0.1 or ::1.\n\n5.10 How do I prevent libcurl from writing the response to stdout?\n\nlibcurl provides a default built-in write function that writes received data to stdout. Set the CURLOPT_WRITEFUNCTION to receive the data, or possibly set CURLOPT_WRITEDATA to a different FILE * handle.\n\n5.11 How do I make libcurl not receive the whole HTTP response?\n\nYou make the write callback (or progress callback) return an error and libcurl will then abort the transfer.\n\n5.12 Can I make libcurl fake or hide my real IP address?\n\nNo. libcurl operates on a higher level. Besides, faking IP address would imply sending IP packet with a made-up source address, and then you normally get a problem with receiving the packet sent back as they would then not be routed to you!\n\nIf you use a proxy to access remote sites, the sites will not see your local IP address but instead the address of the proxy.\n\nAlso note that on many networks NATs or other IP-munging techniques are used that makes you see and use a different IP address locally than what the remote server will see you coming from. You may also consider using https://www.torproject.org/ .\n\n5.13 How do I stop an ongoing transfer?\n\nWith the easy interface you make sure to return the correct error code from one of the callbacks, but none of them are instant. There is no function you can call from another thread or similar that will stop it immediately. Instead, you need to make sure that one of the callbacks you use returns an appropriate value that will stop the transfer. Suitable callbacks that you can do this with include the progress callback, the read callback and the write callback.\n\nIf you're using the multi interface, you can also stop a transfer by removing the particular easy handle from the multi stack at any moment you think the transfer is done or when you wish to abort the transfer.\n\n5.14 Using C++ non-static functions for callbacks?\n\nlibcurl is a C library, it doesn't know anything about C++ member functions.\n\nYou can overcome this \"limitation\" with a relative ease using a static member function that is passed a pointer to the class:\n\n // f is the pointer to your object.\n static YourClass::func(void *buffer, size_t sz, size_t n, void *f)\n {\n // Call non-static member function.\n static_cast<YourClass*>(f)->nonStaticFunction();\n }\n // This is how you pass pointer to the static function:\n curl_easy_setopt(hcurl, CURLOPT_WRITEFUNCTION, YourClass:func);\n curl_easy_setopt(hcurl, CURLOPT_WRITEDATA, this);\n5.15 How do I get an FTP directory listing?\n\nIf you end the FTP URL you request with a slash, libcurl will provide you with a directory listing of that given directory. You can also set CURLOPT_CUSTOMREQUEST to alter what exact listing command libcurl would use to list the files.\n\nThe follow-up question that tend to follow the previous one, is how a program is supposed to parse the directory listing. How does it know what's a file and what's a dir and what's a symlink etc. The harsh reality is that FTP provides no such fine and easy-to-parse output. The output format FTP servers respond to LIST commands are entirely at the server's own liking and the NLST output doesn't reveal any types and in many cases don't even include all the directory entries. Also, both LIST and NLST tend to hide unix-style hidden files (those that start with a dot) by default so you need to do \"LIST -a\" or similar to see them.\n\nThe application thus needs to parse the LIST output. One such existing list parser is available at https://cr.yp.to/ftpparse.html Versions of libcurl since 7.21.0 also provide the ability to specify a wildcard to download multiple files from one FTP directory.\n\n5.16 I want a different time-out!\n\nTime and time again users realize that CURLOPT_TIMEOUT and CURLOPT_CONNECTIMEOUT are not sufficiently advanced or flexible to cover all the various use cases and scenarios applications end up with.\n\nlibcurl offers many more ways to time-out operations. A common alternative is to use the CURLOPT_LOW_SPEED_LIMIT and CURLOPT_LOW_SPEED_TIME options to specify the lowest possible speed to accept before to consider the transfer timed out.\n\nThe most flexible way is by writing your own time-out logic and using CURLOPT_PROGRESSFUNCTION (perhaps in combination with other callbacks) and use that to figure out exactly when the right condition is met when the transfer should get stopped.\n\n5.17 Can I write a server with libcurl?\n\nNo. libcurl offers no functions or building blocks to build any kind of internet protocol server. libcurl is only a client-side library. For server libraries, you need to continue your search elsewhere but there exist many good open source ones out there for most protocols you could possibly want a server for. And there are really good stand-alone ones that have been tested and proven for many years. There's no need for you to reinvent them!\n\n5.18 Does libcurl use threads?\n\nPut simply: no, libcurl will execute in the same thread you call it in. All callbacks will be called in the same thread as the one you call libcurl in.\n\nIf you want to avoid your thread to be blocked by the libcurl call, you make sure you use the non-blocking API which will do transfers asynchronously - but still in the same single thread.\n\nlibcurl will potentially internally use threads for name resolving, if it was built to work like that, but in those cases it'll create the child threads by itself and they will only be used and then killed internally by libcurl and never exposed to the outside.\n\n6. License Issues\n\nCurl and libcurl are released under a MIT/X derivate license. The license is very liberal and should not impose a problem for your project. This section is just a brief summary for the cases we get the most questions. (Parts of this section was much enhanced by Bjorn Reese.)\n\nWe are not lawyers and this is not legal advice. You should probably consult one if you want true and accurate legal insights without our prejudice. Note especially that this section concerns the libcurl license only; compiling in features of libcurl that depend on other libraries (e.g. OpenSSL) may affect the licensing obligations of your application.\n\n6.1 I have a GPL program, can I use the libcurl library?\n\nYes!\n\nSince libcurl may be distributed under the MIT/X derivate license, it can be used together with GPL in any software.\n\n6.2 I have a closed-source program, can I use the libcurl library?\n\nYes!\n\nlibcurl does not put any restrictions on the program that uses the library.\n\n6.3 I have a BSD licensed program, can I use the libcurl library?\n\nYes!\n\nlibcurl does not put any restrictions on the program that uses the library.\n\n6.4 I have a program that uses LGPL libraries, can I use libcurl?\n\nYes!\n\nThe LGPL license doesn't clash with other licenses.\n\n6.5 Can I modify curl/libcurl for my program and keep the changes secret?\n\nYes!\n\nThe MIT/X derivate license practically allows you to do almost anything with the sources, on the condition that the copyright texts in the sources are left intact.\n\n6.6 Can you please change the curl/libcurl license to XXXX?\n\nNo.\n\nWe have carefully picked this license after years of development and discussions and a large amount of people have contributed with source code knowing that this is the license we use. This license puts the restrictions we want on curl/libcurl and it does not spread to other programs or libraries that use it. It should be possible for everyone to use libcurl or curl in their projects, no matter what license they already have in use.\n\n6.7 What are my obligations when using libcurl in my commercial apps?\n\nNext to none. All you need to adhere to is the MIT-style license (stated in the COPYING file) which basically says you have to include the copyright notice in \"all copies\" and that you may not use the copyright holder's name when promoting your software.\n\nYou do not have to release any of your source code.\n\nYou do not have to reveal or make public any changes to the libcurl source code.\n\nYou do not have to broadcast to the world that you are using libcurl within your app.\n\nAll we ask is that you disclose \"the copyright notice and this permission notice\" somewhere. Most probably like in the documentation or in the section where other third party dependencies already are mentioned and acknowledged.\n\nAs can be seen here: https://curl.haxx.se/docs/companies.html and elsewhere, more and more companies are discovering the power of libcurl and take advantage of it even in commercial environments.\n\n7. PHP/CURL Issues\n\n7.1 What is PHP/CURL?\n\nThe module for PHP that makes it possible for PHP programs to access curl- functions from within PHP.\n\nIn the cURL project we call this module PHP/CURL to differentiate it from curl the command line tool and libcurl the library. The PHP team however does not refer to it like this (for unknown reasons). They call it plain CURL (often using all caps) or sometimes ext/curl, but both cause much confusion to users which in turn gives us a higher question load.\n\n7.2 Who wrote PHP/CURL?\n\nPHP/CURL was initially written by Sterling Hughes.\n\n7.3 Can I perform multiple requests using the same handle?\n\nYes - at least in PHP version 4.3.8 and later (this has been known to not work in earlier versions, but the exact version when it started to work is unknown to me).\n\nAfter a transfer, you just set new options in the handle and make another transfer. This will make libcurl re-use the same connection if it can.\n\n7.4 Does PHP/CURL have dependencies?\n\nPHP/CURL is a module that comes with the regular PHP package. It depends on and uses libcurl, so you need to have libcurl installed properly before PHP/CURL can be used."
		},
		{
			"post_id": 5,
			"title": "达到什么标准才能称为“健康的老年人”？ ",
			"date_published": 1463704029.377,
			"body": "进入老年的身体变化\n\n一是体表形态的改变，须发变白、稀疏，皮肤变薄出现皱纹，牙龈萎缩，牙齿松动脱落，耳垂逐渐延长，骨骼肌的萎缩等，都是正常变化。\n\n二是器官功能的下降，视、听功能下降，心脏的搏出量减少为年轻时的一半左右，肺活量减少50%～60%、肾脏的清除能力减少40%～50%。脑组织的改变，例如脑组织萎缩、脑回的变宽，神经细胞的减少，这个主要表现在大脑的供氧量降低和脑血管的阻力增加，这带来记忆力下降，头晕等问题。\n\n三是机体的调控能力下降，学习、运动的反应速度下降，另外免疫的防御能力和监视能力下降，这就是为什么老年人容易发生多种感染性疾病，或者恶性疾病的原因。\n\n\n衰老算不算疾病？\n\n衰老并不是一种疾病，而是生命的必然过程，衰老导致功能减退，从而导致各种疾病的发生。但老年人常常把机体功能减退当成一种病态，这是认识上的误区。其实，衰老受到多种内、外因素的影响，比如生活环境、个人习惯、遗传因素等。老年人在功能衰退的过程中，只有一部分会导致疾病的发生。\n\n人人都会老，那么什么样的老年人才算健康的老年人？\n\n老年人健康的内涵是什么？\n\n世界卫生组织将健康定义为：人的健康是躯体、精神和社会生活的完好状态，不仅仅是没有疾病或不虚弱。用十六个字概括一下就是：无病无弱、身心健全、社会适应、环境和谐。\n\n对于健康老年人，中华医学会也给出了一个标准供大家参考：\n\n1，躯体无明显的畸形，无明显的驼背等不良体形；\n\n2，神经系统基本正常，无偏瘫，老年人无痴呆，或者其他神经系统疾病；\n\n3，心脏的基本功能正常，无高血压、冠心病及其他的器质性的心脏病；\n\n4，无明显的肺功能下降或者不全，包括慢性的肺部疾病；\n\n5，无肝硬化、肾脏疾病及恶性肿瘤。\n\n\n“五好”老人\n\n老年人可以从以下几个方面初步评价自己的健康状态，简称“五好”老人：\n\n第一，胃口好；\n\n第二，大小便好，大小便是人体健康的一个重要的指标！\n\n第三，睡眠好；\n\n第四，思维好；\n\n第五，腿脚好。"
		},
		{
			"post_id": 4,
			"title": "健康生活守则：“十不过” 最好背下来",
			"date_published": 1463532461.072,
			"body": "健康长寿是每个人的心愿，做到下面这“十不过”，祝您长命百岁！\n\n1衣不过暖\n穿衣戴帽不要过于暖和，也不可以过于单薄，过暖容易感冒，过冷容易受寒。\n\n2食不过饱\n吃饭吃七八分饱，粗细搭配，荤素相兼。饭前要喝汤，不吸烟，不喝酒。\n\n3住不过奢\n生活要随遇而安，居室干净舒适即可。不要太过富丽堂皇，那样对个人心态不好。\n\n4行不过富\n身体健康允许，尽量以步代车。若是出门必乘车，时间长了，腿脚就会不那么灵便。\n\n5劳不过累\n劳动的强度是有限度的，超过负荷量会造成身体的伤害。要注意劳逸结合，适当休息。\n\n6逸不过安\n终日无所事事，会丧失对生活的情趣，而心灰意懒。所以，平时可以多参加活动，比如散步聊天、写字作画、下棋看戏、读书看报等。勤于动脑，保持心情舒畅，以延年增寿。\n\n7喜不过欢\n人逢喜事精神爽，但喜不能过头，过喜则伤心。古人范进中举之后发疯，即为过喜所致。\n\n8 怒不过暴\n心里有烦恼，千万不要生怒气，怒会伤肝。要学会控制自己的情绪，提高涵养，乐观处世。\n\n9名不过求\n名利皆身外之物，生不带来，死不带去。名利只是过眼烟云，不要过分追求。\n\n10利不过贪\n“酒色财气”我不取，“风花雪月”不沾边。如果能做到无欲无求、无牵无挂、知足常乐、顺其自然，那么就能耄耋无忧。"
		},
		{
			"post_id": 3,
			"title": "Wget 1.17.1",
			"date_published": 1462929868.092,
			"body": "GNU Wget 1.17.1\nThe non-interactive download utility\nUpdated for Wget 1.17.1, 10 December 2015\nby Hrvoje Nikˇ si´ c and others\nThis file documents the GNU Wget utility for downloading network data.\nCopyright c ? 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n2010, 2011, 2015 Free Software Foundation, Inc.\nPermission is granted to make and distribute verbatim copies of this manual provided the copy-\nright notice and this permission notice are preserved on all copies.\nPermission is granted to copy, distribute and/or modify this document under the terms of\nthe GNU Free Documentation License, Version 1.3 or any later version published by the Free\nSoftware Foundation; with no Invariant Sections, with no Front-Cover Texts, and with no Back-\nCover Texts. A copy of the license is included in the section entitled “GNU Free Documentation\nLicense”.\ni\nTable of Contents\nChapter 1: Overview 1\n1 Overview\nGNU Wget is a free utility for non-interactive download of files from the Web. It supports http,\nhttps, and ftp protocols, as well as retrieval through http proxies.\nThis chapter is a partial overview of Wget’s features.\n• Wget is non-interactive, meaning that it can work in the background, while the user is not\nlogged on. This allows you to start a retrieval and disconnect from the system, letting Wget\nfinish the work. By contrast, most of the Web browsers require constant user’s presence,\nwhich can be a great hindrance when transferring a lot of data.\n• Wget can follow links in html, xhtml, and css pages, to create local versions of remote web\nsites, fully recreating the directory structure of the original site. This is sometimes referred\nto as “recursive downloading.” While doing that, Wget respects the Robot Exclusion\nStandard (‘/robots.txt’). Wget can be instructed to convert the links in downloaded files\nto point at the local files, for offline viewing.\n• File name wildcard matching and recursive mirroring of directories are available when re-\ntrieving via ftp. Wget can read the time-stamp information given by both http and ftp\nservers, and store it locally. Thus Wget can see if the remote file has changed since last\nretrieval, and automatically retrieve the new version if it has. This makes Wget suitable\nfor mirroring of ftp sites, as well as home pages.\n• Wget has been designed for robustness over slow or unstable network connections; if a\ndownload fails due to a network problem, it will keep retrying until the whole file has\nbeen retrieved. If the server supports regetting, it will instruct the server to continue the\ndownload from where it left off.\n• Wget supports proxy servers, which can lighten the network load, speed up retrieval and\nprovide access behind firewalls. Wget uses the passive ftp downloading by default, active\nftp being an option.\n• Wget supports IP version 6, the next generation of IP. IPv6 is autodetected at compile-time,\nand can be disabled at either build or run time. Binaries built with IPv6 support work well\nin both IPv4-only and dual family environments.\n• Built-in features offer mechanisms to tune which links you wish to follow (see hundefinedi\n[Following Links], page hundefinedi).\n• The progress of individual downloads is traced using a progress gauge. Interactive downloads\nare tracked using a “thermometer”-style gauge, whereas non-interactive ones are traced with\ndots, each dot representing a fixed amount of data received (1KB by default). Either gauge\ncan be customized to your preferences.\n• Most of the features are fully configurable, either through command line options, or via the\ninitialization file ‘.wgetrc’ (see hundefinedi [Startup File], page hundefinedi). Wget allows\nyou to define global startup files (‘/usr/local/etc/wgetrc’ by default) for site settings.\nYou can also specify the location of a startup file with the –config option.\n• Finally, GNU Wget is free software. This means that everyone may use it, redistribute it\nand/or modify it under the terms of the GNU General Public License, as published by the\nFree Software Foundation (see the file ‘COPYING’ that came with GNU Wget, for details).\nChapter 2: Invoking 2\n2 Invoking\nBy default, Wget is very simple to invoke. The basic syntax is:\nwget [option]... [URL]...\nWget will simply download all the urls specified on the command line. URL is a Uniform\nResource Locator, as defined below.\nHowever, you may wish to change some of the default parameters of Wget. You can do it\ntwo ways: permanently, adding the appropriate command to ‘.wgetrc’ (see hundefinedi [Startup\nFile], page hundefinedi), or specifying it on the command line.\n2.1 URL Format\nURL is an acronym for Uniform Resource Locator. A uniform resource locator is a compact\nstring representation for a resource available via the Internet. Wget recognizes the url syntax\nas per rfc1738. This is the most widely used form (square brackets denote optional parts):\nhttp://host[:port]/directory/file\nftp://host[:port]/directory/file\nYou can also encode your username and password within a url:\nftp://user:password@host/path\nhttp://user:password@host/path\nEither user or password, or both, may be left out. If you leave out either the http username\nor password, no authentication will be sent. If you leave out the ftp username, ‘anonymous’\nwill be used. If you leave out the ftp password, your email address will be supplied as a default\npassword. 1\nImportant Note: if you specify a password-containing url on the command line, the user-\nname and password will be plainly visible to all users on the system, by way of ps. On multi-user\nsystems, this is a big security risk. To work around it, use wget -i - and feed the urls to Wget’s\nstandard input, each on a separate line, terminated by C-d.\nYou can encode unsafe characters in a url as ‘%xy’, xy being the hexadecimal representation\nof the character’s ascii value. Some common unsafe characters include ‘%’ (quoted as ‘%25’),\n‘:’ (quoted as ‘%3A’), and ‘@’ (quoted as ‘%40’). Refer to rfc1738 for a comprehensive list of\nunsafe characters.\nWget also supports the type feature for ftp urls. By default, ftp documents are retrieved\nin the binary mode (type ‘i’), which means that they are downloaded unchanged. Another\nuseful mode is the ‘a’ (ASCII) mode, which converts the line delimiters between the different\noperating systems, and is thus useful for text files. Here is an example:\nftp://host/directory/file;type=a\nTwo alternative variants of url specification are also supported, because of historical (hys-\nterical?) reasons and their widespreaded use.\nftp-only syntax (supported by NcFTP):\nhost:/dir/file\nhttp-only syntax (introduced by Netscape):\nhost[:port]/dir/file\nThese two alternative forms are deprecated, and may cease being supported in the future.\nIf you do not understand the difference between these notations, or do not know which one\nto use, just use the plain ordinary format you use with your favorite browser, like Lynx or\nNetscape.\n1\nIf you have a ‘.netrc’ file in your home directory, password will also be searched for there.\nChapter 2: Invoking 3\n2.2 Option Syntax\nSince Wget uses GNU getopt to process command-line arguments, every option has a long form\nalong with the short one. Long options are more convenient to remember, but take time to type.\nYou may freely mix different option styles, or specify options after the command-line arguments.\nThus you may write:\nwget -r --tries=10 http://fly.srk.fer.hr/ -o log\nThe space between the option accepting an argument and the argument may be omitted.\nInstead of ‘-o log’ you can write ‘-olog’.\nYou may put several options that do not require arguments together, like:\nwget -drc URL\nThis is completely equivalent to:\nwget -d -r -c URL\nSince the options can be specified after the arguments, you may terminate them with ‘--’.\nSo the following will try to download url ‘-x’, reporting failure to ‘log’:\nwget -o log -- -x\nThe options that accept comma-separated lists all respect the convention that specifying an\nempty list clears its value. This can be useful to clear the ‘.wgetrc’ settings. For instance, if\nyour ‘.wgetrc’ sets exclude_directories to ‘/cgi-bin’, the following example will first reset\nit, and then set it to exclude ‘/~nobody’ and ‘/~somebody’. You can also clear the lists in\n‘.wgetrc’ (see hundefinedi [Wgetrc Syntax], page hundefinedi).\nwget -X ’’ -X /~nobody,/~somebody\nMost options that do not accept arguments are boolean options, so named because their state\ncan be captured with a yes-or-no (“boolean”) variable. For example, ‘--follow-ftp’ tells Wget\nto follow FTP links from HTML files and, on the other hand, ‘--no-glob’ tells it not to perform\nfile globbing on FTP URLs. A boolean option is either affirmative or negative (beginning with\n‘--no’). All such options share several properties.\nUnless stated otherwise, it is assumed that the default behavior is the opposite of what the\noption accomplishes. For example, the documented existence of ‘--follow-ftp’ assumes that\nthe default is to not follow FTP links from HTML pages.\nAffirmative options can be negated by prepending the ‘--no-’ to the option name; negative\noptions can be negated by omitting the ‘--no-’ prefix. This might seem superfluous—if the\ndefault for an affirmative option is to not do something, then why provide a way to explicitly\nturn it off? But the startup file may in fact change the default. For instance, using follow_ftp\n= on in ‘.wgetrc’ makes Wget follow FTP links by default, and using ‘--no-follow-ftp’ is the\nonly way to restore the factory default from the command line.\n2.3 Basic Startup Options\n‘-V’\n‘--version’\nDisplay the version of Wget.\n‘-h’\n‘--help’ Print a help message describing all of Wget’s command-line options.\n‘-b’\n‘--background’\nGo to background immediately after startup. If no output file is specified via the\n‘-o’, output is redirected to ‘wget-log’.\nChapter 2: Invoking 4\n‘-e command’\n‘--execute command’\nExecute command as if it were a part of ‘.wgetrc’ (see hundefinedi [Startup File],\npage hundefinedi). A command thus invoked will be executed after the commands\nin ‘.wgetrc’, thus taking precedence over them. If you need to specify more than\none wgetrc command, use multiple instances of ‘-e’.\n2.4 Logging and Input File Options\n‘-o logfile’\n‘--output-file=logfile’\nLog all messages to logfile. The messages are normally reported to standard error.\n‘-a logfile’\n‘--append-output=logfile’\nAppend to logfile. This is the same as ‘-o’, only it appends to logfile instead of\noverwriting the old log file. If logfile does not exist, a new file is created.\n‘-d’\n‘--debug’ Turn on debug output, meaning various information important to the developers of\nWget if it does not work properly. Your system administrator may have chosen to\ncompile Wget without debug support, in which case ‘-d’ will not work. Please note\nthat compiling with debug support is always safe—Wget compiled with the debug\nsupport will not print any debug info unless requested with ‘-d’. See hundefinedi\n[Reporting Bugs], page hundefinedi, for more information on how to use ‘-d’ for\nsending bug reports.\n‘-q’\n‘--quiet’ Turn off Wget’s output.\n‘-v’\n‘--verbose’\nTurn on verbose output, with all the available data. The default output is verbose.\n‘-nv’\n‘--no-verbose’\nTurn off verbose without being completely quiet (use ‘-q’ for that), which means\nthat error messages and basic information still get printed.\n‘--report-speed=type’\nOutput bandwidth as type. The only accepted value is ‘bits’.\n‘-i file’\n‘--input-file=file’\nRead urls from a local or external file. If ‘-’ is specified as file, urls are read from\nthe standard input. (Use ‘./-’ to read from a file literally named ‘-’.)\nIf this function is used, no urls need be present on the command line. If there are\nurls both on the command line and in an input file, those on the command lines\nwill be the first ones to be retrieved. If ‘--force-html’ is not specified, then file\nshould consist of a series of URLs, one per line.\nHowever, if you specify ‘--force-html’, the document will be regarded as ‘html’.\nIn that case you may have problems with relative links, which you can solve either\nby adding <base href=\"url\"> to the documents or by specifying ‘--base=url’ on\nthe command line.\nChapter 2: Invoking 5\nIf the file is an external one, the document will be automatically treated as ‘html’\nif the Content-Type matches ‘text/html’. Furthermore, the file’s location will be\nimplicitly used as base href if none was specified.\n‘--input-metalink=file’\nDownloads files covered in local Metalink file. Metalink version 3 and 4 are sup-\nported.\n‘--metalink-over-http’\nIssues HTTP HEAD request instead of GET and extracts Metalink metadata from\nresponse headers. Then it switches to Metalink download. If no valid Metalink\nmetadata is found, it falls back to ordinary HTTP download.\n‘--preferred-location’\nSet preferred location for Metalink resources. This has effect if multiple resources\nwith same priority are available.\n‘-F’\n‘--force-html’\nWhen input is read from a file, force it to be treated as an html file. This enables\nyou to retrieve relative links from existing html files on your local disk, by adding\n<base href=\"url\"> to html, or using the ‘--base’ command-line option.\n‘-B URL’\n‘--base=URL’\nResolves relative links using URL as the point of reference, when reading links\nfrom an HTML file specified via the ‘-i’/‘--input-file’ option (together with\n‘--force-html’, or when the input file was fetched remotely from a server describing\nit as html). This is equivalent to the presence of a BASE tag in the html input file,\nwith URL as the value for the href attribute.\nFor instance, if you specify ‘http://foo/bar/a.html’ for URL, and\nWget reads ‘../baz/b.html’ from the input file, it would be resolved to\n‘http://foo/baz/b.html’.\n‘--config=FILE’\nSpecify the location of a startup file you wish to use.\n‘--rejected-log=logfile’\nLogs all URL rejections to logfile as comma separated values. The values include\nthe reason of rejection, the URL and the parent URL it was found in.\n2.5 Download Options\n‘--bind-address=ADDRESS’\nWhen making client TCP/IP connections, bind to ADDRESS on the local machine.\nADDRESS may be specified as a hostname or IP address. This option can be useful\nif your machine is bound to multiple IPs.\n‘-t number’\n‘--tries=number’\nSet number of tries to number. Specify 0 or ‘inf’ for infinite retrying. The default\nis to retry 20 times, with the exception of fatal errors like “connection refused” or\n“not found” (404), which are not retried.\n‘-O file’\n‘--output-document=file’\nThe documents will not be written to the appropriate files, but all will be concate-\nnated together and written to file. If ‘-’ is used as file, documents will be printed\nChapter 2: Invoking 6\nto standard output, disabling link conversion. (Use ‘./-’ to print to a file literally\nnamed ‘-’.)\nUse of ‘-O’ is not intended to mean simply “use the name file instead of the one in\nthe URL;” rather, it is analogous to shell redirection: ‘wget -O file http://foo’\nis intended to work like ‘wget -O - http://foo > file’; ‘file’ will be truncated\nimmediately, and all downloaded content will be written there.\nFor this reason, ‘-N’ (for timestamp-checking) is not supported in combination with\n‘-O’: since file is always newly created, it will always have a very new timestamp.\nA warning will be issued if this combination is used.\nSimilarly, using ‘-r’ or ‘-p’ with ‘-O’ may not work as you expect: Wget won’t just\ndownload the first file to file and then download the rest to their normal names: all\ndownloaded content will be placed in file. This was disabled in version 1.11, but\nhas been reinstated (with a warning) in 1.11.2, as there are some cases where this\nbehavior can actually have some use.\nA combination with ‘-nc’ is only accepted if the given output file does not exist.\nNote that a combination with ‘-k’ is only permitted when downloading a single\ndocument, as in that case it will just convert all relative URIs to external ones; ‘-k’\nmakes no sense for multiple URIs when they’re all being downloaded to a single file;\n‘-k’ can be used only when the output is a regular file.\n‘-nc’\n‘--no-clobber’\nIf a file is downloaded more than once in the same directory, Wget’s behavior de-\npends on a few options, including ‘-nc’. In certain cases, the local file will be\nclobbered, or overwritten, upon repeated download. In other cases it will be pre-\nserved.\nWhen running Wget without ‘-N’, ‘-nc’, ‘-r’, or ‘-p’, downloading the same file in\nthe same directory will result in the original copy of file being preserved and the\nsecond copy being named ‘file.1’. If that file is downloaded yet again, the third\ncopy will be named ‘file.2’, and so on. (This is also the behavior with ‘-nd’, even\nif ‘-r’ or ‘-p’ are in effect.) When ‘-nc’ is specified, this behavior is suppressed,\nand Wget will refuse to download newer copies of ‘file’. Therefore, “no-clobber”\nis actually a misnomer in this mode—it’s not clobbering that’s prevented (as the\nnumeric suffixes were already preventing clobbering), but rather the multiple version\nsaving that’s prevented.\nWhen running Wget with ‘-r’ or ‘-p’, but without ‘-N’, ‘-nd’, or ‘-nc’, re-\ndownloading a file will result in the new copy simply overwriting the old. Adding\n‘-nc’ will prevent this behavior, instead causing the original version to be preserved\nand any newer copies on the server to be ignored.\nWhen running Wget with ‘-N’, with or without ‘-r’ or ‘-p’, the decision as to\nwhether or not to download a newer copy of a file depends on the local and remote\ntimestamp and size of the file (see hundefinedi [Time-Stamping], page hundefinedi).\n‘-nc’ may not be specified at the same time as ‘-N’.\nA combination with ‘-O’/‘--output-document’ is only accepted if the given output\nfile does not exist.\nNote that when ‘-nc’ is specified, files with the suffixes ‘.html’ or ‘.htm’ will be\nloaded from the local disk and parsed as if they had been retrieved from the Web.\nChapter 2: Invoking 7\n‘--backups=backups’\nBefore (over)writing a file, back up an existing file by adding a ‘.1’ suffix (‘_1’ on\nVMS) to the file name. Such backup files are rotated to ‘.2’, ‘.3’, and so on, up to\nbackups (and lost beyond that).\n‘-c’\n‘--continue’\nContinue getting a partially-downloaded file. This is useful when you want to finish\nup a download started by a previous instance of Wget, or by another program. For\ninstance:\nwget -c ftp://sunsite.doc.ic.ac.uk/ls-lR.Z\nIf there is a file named ‘ls-lR.Z’ in the current directory, Wget will assume that it\nis the first portion of the remote file, and will ask the server to continue the retrieval\nfrom an offset equal to the length of the local file.\nNote that you don’t need to specify this option if you just want the current invocation\nof Wget to retry downloading a file should the connection be lost midway through.\nThis is the default behavior. ‘-c’ only affects resumption of downloads started prior\nto this invocation of Wget, and whose local files are still sitting around.\nWithout ‘-c’, the previous example would just download the remote file to\n‘ls-lR.Z.1’, leaving the truncated ‘ls-lR.Z’ file alone.\nBeginning with Wget 1.7, if you use ‘-c’ on a non-empty file, and it turns out that\nthe server does not support continued downloading, Wget will refuse to start the\ndownload from scratch, which would effectively ruin existing contents. If you really\nwant the download to start from scratch, remove the file.\nAlso beginning with Wget 1.7, if you use ‘-c’ on a file which is of equal size as\nthe one on the server, Wget will refuse to download the file and print an explana-\ntory message. The same happens when the file is smaller on the server than lo-\ncally (presumably because it was changed on the server since your last download\nattempt)—because “continuing” is not meaningful, no download occurs.\nOn the other side of the coin, while using ‘-c’, any file that’s bigger on the server\nthan locally will be considered an incomplete download and only (length(remote)\n- length(local)) bytes will be downloaded and tacked onto the end of the local\nfile. This behavior can be desirable in certain cases—for instance, you can use ‘wget\n-c’ to download just the new portion that’s been appended to a data collection or\nlog file.\nHowever, if the file is bigger on the server because it’s been changed, as opposed to\njust appended to, you’ll end up with a garbled file. Wget has no way of verifying\nthat the local file is really a valid prefix of the remote file. You need to be especially\ncareful of this when using ‘-c’ in conjunction with ‘-r’, since every file will be\nconsidered as an \"incomplete download\" candidate.\nAnother instance where you’ll get a garbled file if you try to use ‘-c’ is if you have\na lame http proxy that inserts a “transfer interrupted” string into the local file. In\nthe future a “rollback” option may be added to deal with this case.\nNote that ‘-c’ only works with ftp servers and with http servers that support the\nRange header.\n‘--start-pos=OFFSET’\nStart downloading at zero-based position OFFSET. Offset may be expressed in\nbytes, kilobytes with the ‘k’ suffix, or megabytes with the ‘m’ suffix, etc.\nChapter 2: Invoking 8\n‘--start-pos’ has higher precedence over ‘--continue’. When ‘--start-pos’\nand ‘--continue’ are both specified, wget will emit a warning then proceed as\nif ‘--continue’ was absent.\nServer support for continued download is required, otherwise ‘--start-pos’ cannot\nhelp. See ‘-c’ for details.\n‘--progress=type’\nSelect the type of the progress indicator you wish to use. Legal indicators are “dot”\nand “bar”.\nThe “bar” indicator is used by default. It draws an ascii progress bar graphics\n(a.k.a “thermometer” display) indicating the status of retrieval. If the output is not\na TTY, the “dot” bar will be used by default.\nUse ‘--progress=dot’ to switch to the “dot” display. It traces the retrieval by\nprinting dots on the screen, each dot representing a fixed amount of downloaded\ndata.\nThe progress type can also take one or more parameters. The parameters vary based\non the type selected. Parameters to type are passed by appending them to the type\nsperated by a colon (:) like this: ‘--progress=type:parameter1:parameter2’.\nWhen using the dotted retrieval, you may set the style by specifying the type as\n‘dot:style’. Different styles assign different meaning to one dot. With the default\nstyle each dot represents 1K, there are ten dots in a cluster and 50 dots in a line.\nThe binary style has a more “computer”-like orientation—8K dots, 16-dots clusters\nand 48 dots per line (which makes for 384K lines). The mega style is suitable for\ndownloading large files—each dot represents 64K retrieved, there are eight dots in\na cluster, and 48 dots on each line (so each line contains 3M). If mega is not enough\nthen you can use the giga style—each dot represents 1M retrieved, there are eight\ndots in a cluster, and 32 dots on each line (so each line contains 32M).\nWith ‘--progress=bar’, there are currently two possible parameters, force and\nnoscroll.\nWhen the output is not a TTY, the progress bar always falls back to “dot”, even\nif ‘--progress=bar’ was passed to Wget during invokation. This behaviour can\nbe overridden and the “bar” output forced by using the “force” parameter as\n‘--progress=bar:force’.\nBy default, the ‘bar’ style progress bar scroll the name of the file from left to right\nfor the file being downloaded if the filename exceeds the maximum length allotted\nfor its display. In certain cases, such as with ‘--progress=bar:force’, one may not\nwant the scrolling filename in the progress bar. By passing the “noscroll” parameter,\nWget can be forced to display as much of the filename as possible without scrolling\nthrough it.\nNote that you can set the default style using the progress command in ‘.wgetrc’.\nThat setting may be overridden from the command line. For example, to force the\nbar output without scrolling, use ‘--progress=bar:force:noscroll’.\n‘--show-progress’\nForce wget to display the progress bar in any verbosity.\nBy default, wget only displays the progress bar in verbose mode. One may however,\nwant wget to display the progress bar on screen in conjunction with any other\nverbosity modes like ‘--no-verbose’ or ‘--quiet’. This is often a desired a property\nwhen invoking wget to download several small/large files. In such a case, wget could\nsimply be invoked with this parameter to get a much cleaner output on the screen.\nChapter 2: Invoking 9\nThis option will also force the progress bar to be printed to ‘stderr’ when used\nalongside the ‘--logfile’ option.\n‘-N’\n‘--timestamping’\nTurn on time-stamping. See hundefinedi [Time-Stamping], page hundefinedi, for\ndetails.\n‘--no-if-modified-since’\nDo not send If-Modified-Since header in ‘-N’ mode. Send preliminary HEAD request\ninstead. This has only effect in ‘-N’ mode.\n‘--no-use-server-timestamps’\nDon’t set the local file’s timestamp by the one on the server.\nBy default, when a file is downloaded, its timestamps are set to match those from\nthe remote file. This allows the use of ‘--timestamping’ on subsequent invocations\nof wget. However, it is sometimes useful to base the local file’s timestamp on when\nit was actually downloaded; for that purpose, the ‘--no-use-server-timestamps’\noption has been provided.\n‘-S’\n‘--server-response’\nPrint the headers sent by http servers and responses sent by ftp servers.\n‘--spider’\nWhen invoked with this option, Wget will behave as a Web spider, which means\nthat it will not download the pages, just check that they are there. For example,\nyou can use Wget to check your bookmarks:\nwget --spider --force-html -i bookmarks.html\nThis feature needs much more work for Wget to get close to the functionality of real\nweb spiders.\n‘-T seconds’\n‘--timeout=seconds’\nSet the network timeout to seconds seconds. This is equivalent to specifying\n‘--dns-timeout’, ‘--connect-timeout’, and ‘--read-timeout’, all at the same\ntime.\nWhen interacting with the network, Wget can check for timeout and abort the\noperation if it takes too long. This prevents anomalies like hanging reads and infinite\nconnects. The only timeout enabled by default is a 900-second read timeout. Setting\na timeout to 0 disables it altogether. Unless you know what you are doing, it is best\nnot to change the default timeout settings.\nAll timeout-related options accept decimal values, as well as subsecond values. For\nexample, ‘0.1’ seconds is a legal (though unwise) choice of timeout. Subsecond\ntimeouts are useful for checking server response times or for testing network latency.\n‘--dns-timeout=seconds’\nSet the DNS lookup timeout to seconds seconds. DNS lookups that don’t complete\nwithin the specified time will fail. By default, there is no timeout on DNS lookups,\nother than that implemented by system libraries.\n‘--connect-timeout=seconds’\nSet the connect timeout to seconds seconds. TCP connections that take longer to\nestablish will be aborted. By default, there is no connect timeout, other than that\nimplemented by system libraries.\nChapter 2: Invoking 10\n‘--read-timeout=seconds’\nSet the read (and write) timeout to seconds seconds. The “time” of this timeout\nrefers to idle time: if, at any point in the download, no data is received for more\nthan the specified number of seconds, reading fails and the download is restarted.\nThis option does not directly affect the duration of the entire download.\nOf course, the remote server may choose to terminate the connection sooner than\nthis option requires. The default read timeout is 900 seconds.\n‘--limit-rate=amount’\nLimit the download speed to amount bytes per second. Amount may be expressed\nin bytes, kilobytes with the ‘k’ suffix, or megabytes with the ‘m’ suffix. For example,\n‘--limit-rate=20k’ will limit the retrieval rate to 20KB/s. This is useful when, for\nwhatever reason, you don’t want Wget to consume the entire available bandwidth.\nThis option allows the use of decimal numbers, usually in conjunction with power\nsuffixes; for example, ‘--limit-rate=2.5k’ is a legal value.\nNote that Wget implements the limiting by sleeping the appropriate amount of time\nafter a network read that took less time than specified by the rate. Eventually this\nstrategy causes the TCP transfer to slow down to approximately the specified rate.\nHowever, it may take some time for this balance to be achieved, so don’t be surprised\nif limiting the rate doesn’t work well with very small files.\n‘-w seconds’\n‘--wait=seconds’\nWait the specified number of seconds between the retrievals. Use of this option is\nrecommended, as it lightens the server load by making the requests less frequent.\nInstead of in seconds, the time can be specified in minutes using the m suffix, in\nhours using h suffix, or in days using d suffix.\nSpecifying a large value for this option is useful if the network or the destination\nhost is down, so that Wget can wait long enough to reasonably expect the network\nerror to be fixed before the retry. The waiting interval specified by this function is\ninfluenced by --random-wait, which see.\n‘--waitretry=seconds’\nIf you don’t want Wget to wait between every retrieval, but only between retries of\nfailed downloads, you can use this option. Wget will use linear backoff, waiting 1\nsecond after the first failure on a given file, then waiting 2 seconds after the second\nfailure on that file, up to the maximum number of seconds you specify.\nBy default, Wget will assume a value of 10 seconds.\n‘--random-wait’\nSome web sites may perform log analysis to identify retrieval programs such as Wget\nby looking for statistically significant similarities in the time between requests. This\noption causes the time between requests to vary between 0.5 and 1.5 * wait seconds,\nwhere wait was specified using the ‘--wait’ option, in order to mask Wget’s presence\nfrom such analysis.\nA 2001 article in a publication devoted to development on a popular consumer\nplatform provided code to perform this analysis on the fly. Its author suggested\nblocking at the class C address level to ensure automated retrieval programs were\nblocked despite changing DHCP-supplied addresses.\nThe ‘--random-wait’ option was inspired by this ill-advised recommendation to\nblock many unrelated users from a web site due to the actions of one.\n‘--no-proxy’\nDon’t use proxies, even if the appropriate *_proxy environment variable is defined.\nChapter 2: Invoking 11\nSee hundefinedi [Proxies], page hundefinedi, for more information about the use of\nproxies with Wget.\n‘-Q quota’\n‘--quota=quota’\nSpecify download quota for automatic retrievals. The value can be specified in bytes\n(default), kilobytes (with ‘k’ suffix), or megabytes (with ‘m’ suffix).\nNote that quota will never affect downloading a single file. So if you specify ‘wget\n-Q10k ftp://wuarchive.wustl.edu/ls-lR.gz’, all of the ‘ls-lR.gz’ will be down-\nloaded. The same goes even when several urls are specified on the command-line.\nHowever, quota is respected when retrieving either recursively, or from an input file.\nThus you may safely type ‘wget -Q2m -i sites’—download will be aborted when\nthe quota is exceeded.\nSetting quota to 0 or to ‘inf’ unlimits the download quota.\n‘--no-dns-cache’\nTurn off caching of DNS lookups. Normally, Wget remembers the IP addresses it\nlooked up from DNS so it doesn’t have to repeatedly contact the DNS server for the\nsame (typically small) set of hosts it retrieves from. This cache exists in memory\nonly; a new Wget run will contact DNS again.\nHowever, it has been reported that in some situations it is not desirable to cache host\nnames, even for the duration of a short-running application like Wget. With this\noption Wget issues a new DNS lookup (more precisely, a new call to gethostbyname\nor getaddrinfo) each time it makes a new connection. Please note that this option\nwill not affect caching that might be performed by the resolving library or by an\nexternal caching layer, such as NSCD.\nIf you don’t understand exactly what this option does, you probably won’t need it.\n‘--restrict-file-names=modes’\nChange which characters found in remote URLs must be escaped during generation\nof local filenames. Characters that are restricted by this option are escaped, i.e.\nreplaced with ‘%HH’, where ‘HH’ is the hexadecimal number that corresponds to the\nrestricted character. This option may also be used to force all alphabetical cases to\nbe either lower- or uppercase.\nBy default, Wget escapes the characters that are not valid or safe as part of file\nnames on your operating system, as well as control characters that are typically\nunprintable. This option is useful for changing these defaults, perhaps because you\nare downloading to a non-native partition, or because you want to disable escaping\nof the control characters, or you want to further restrict characters to only those in\nthe ascii range of values.\nThe modes are a comma-separated set of text values. The acceptable values are\n‘unix’, ‘windows’, ‘nocontrol’, ‘ascii’, ‘lowercase’, and ‘uppercase’. The values\n‘unix’ and ‘windows’ are mutually exclusive (one will override the other), as are\n‘lowercase’ and ‘uppercase’. Those last are special cases, as they do not change\nthe set of characters that would be escaped, but rather force local file paths to be\nconverted either to lower- or uppercase.\nWhen “unix” is specified, Wget escapes the character ‘/’ and the control characters\nin the ranges 0–31 and 128–159. This is the default on Unix-like operating systems.\nWhen “windows” is given, Wget escapes the characters ‘\\’, ‘|’, ‘/’, ‘:’, ‘?’, ‘\"’,\n‘*’, ‘<’, ‘>’, and the control characters in the ranges 0–31 and 128–159. In addi-\ntion to this, Wget in Windows mode uses ‘+’ instead of ‘:’ to separate host and\nChapter 2: Invoking 12\nport in local file names, and uses ‘@’ instead of ‘?’ to separate the query por-\ntion of the file name from the rest. Therefore, a URL that would be saved as\n‘www.xemacs.org:4300/search.pl?input=blah’ in Unix mode would be saved as\n‘www.xemacs.org+4300/search.pl@input=blah’ in Windows mode. This mode is\nthe default on Windows.\nIf you specify ‘nocontrol’, then the escaping of the control characters is also\nswitched off. This option may make sense when you are downloading URLs whose\nnames contain UTF-8 characters, on a system which can save and display filenames\nin UTF-8 (some possible byte values used in UTF-8 byte sequences fall in the range\nof values designated by Wget as “controls”).\nThe ‘ascii’ mode is used to specify that any bytes whose values are outside the\nrange of ascii characters (that is, greater than 127) shall be escaped. This can be\nuseful when saving filenames whose encoding does not match the one used locally.\n‘-4’\n‘--inet4-only’\n‘-6’\n‘--inet6-only’\nForce connecting to IPv4 or IPv6 addresses. With ‘--inet4-only’ or ‘-4’, Wget\nwill only connect to IPv4 hosts, ignoring AAAA records in DNS, and refusing to\nconnect to IPv6 addresses specified in URLs. Conversely, with ‘--inet6-only’ or\n‘-6’, Wget will only connect to IPv6 hosts and ignore A records and IPv4 addresses.\nNeither options should be needed normally. By default, an IPv6-aware Wget will\nuse the address family specified by the host’s DNS record. If the DNS responds with\nboth IPv4 and IPv6 addresses, Wget will try them in sequence until it finds one it\ncan connect to. (Also see --prefer-family option described below.)\nThese options can be used to deliberately force the use of IPv4 or IPv6 address\nfamilies on dual family systems, usually to aid debugging or to deal with broken\nnetwork configuration. Only one of ‘--inet6-only’ and ‘--inet4-only’ may be\nspecified at the same time. Neither option is available in Wget compiled without\nIPv6 support.\n‘--prefer-family=none/IPv4/IPv6’\nWhen given a choice of several addresses, connect to the addresses with specified\naddress family first. The address order returned by DNS is used without change by\ndefault.\nThis avoids spurious errors and connect attempts when accessing hosts that resolve\nto both IPv6 and IPv4 addresses from IPv4 networks. For example, ‘www.kame.net’\nresolves to ‘2001:200:0:8002:203:47ff:fea5:3085’ and to ‘203.178.141.194’.\nWhen the preferred family is IPv4, the IPv4 address is used first; when the preferred\nfamily is IPv6, the IPv6 address is used first; if the specified value is none, the\naddress order returned by DNS is used without change.\nUnlike ‘-4’ and ‘-6’, this option doesn’t inhibit access to any address family, it only\nchanges the order in which the addresses are accessed. Also note that the reordering\nperformed by this option is stable—it doesn’t affect order of addresses of the same\nfamily. That is, the relative order of all IPv4 addresses and of all IPv6 addresses\nremains intact in all cases.\n‘--retry-connrefused’\nConsider “connection refused” a transient error and try again. Normally Wget gives\nup on a URL when it is unable to connect to the site because failure to connect\nis taken as a sign that the server is not running at all and that retries would not\nChapter 2: Invoking 13\nhelp. This option is for mirroring unreliable sites whose servers tend to disappear\nfor short periods of time.\n‘--user=user’\n‘--password=password’\nSpecify the username user and password password for both ftp and http\nfile retrieval. These parameters can be overridden using the ‘--ftp-user’ and\n‘--ftp-password’ options for ftp connections and the ‘--http-user’ and\n‘--http-password’ options for http connections.\n‘--ask-password’\nPrompt for a password for each connection established. Cannot be specified when\n‘--password’ is being used, because they are mutually exclusive.\n‘--no-iri’\nTurn off internationalized URI (IRI) support. Use ‘--iri’ to turn it on. IRI support\nis activated by default.\nYou can set the default state of IRI support using the iri command in ‘.wgetrc’.\nThat setting may be overridden from the command line.\n‘--local-encoding=encoding’\nForce Wget to use encoding as the default system encoding. That affects how Wget\nconverts URLs specified as arguments from locale to utf-8 for IRI support.\nWget use the function nl_langinfo() and then the CHARSET environment variable\nto get the locale. If it fails, ascii is used.\nYou can set the default local encoding using the local_encoding command in\n‘.wgetrc’. That setting may be overridden from the command line.\n‘--remote-encoding=encoding’\nForce Wget to use encoding as the default remote server encoding. That affects\nhow Wget converts URIs found in files from remote encoding to utf-8 during a\nrecursive fetch. This options is only useful for IRI support, for the interpretation of\nnon-ascii characters.\nFor HTTP, remote encoding can be found in HTTP Content-Type header and in\nHTML Content-Type http-equiv meta tag.\nYou can set the default encoding using the remoteencoding command in ‘.wgetrc’.\nThat setting may be overridden from the command line.\n‘--unlink’\nForce Wget to unlink file instead of clobbering existing file. This option is useful\nfor downloading to the directory with hardlinks.\n2.6 Directory Options\n‘-nd’\n‘--no-directories’\nDo not create a hierarchy of directories when retrieving recursively. With this option\nturned on, all files will get saved to the current directory, without clobbering (if a\nname shows up more than once, the filenames will get extensions ‘.n’).\n‘-x’\n‘--force-directories’\nThe opposite of ‘-nd’—create a hierarchy of directories, even if one would not have\nbeen created otherwise. E.g. ‘wget -x http://fly.srk.fer.hr/robots.txt’ will\nsave the downloaded file to ‘fly.srk.fer.hr/robots.txt’.\nChapter 2: Invoking 14\n‘-nH’\n‘--no-host-directories’\nDisable generation of host-prefixed directories. By default, invoking Wget with\n‘-r http://fly.srk.fer.hr/’ will create a structure of directories beginning with\n‘fly.srk.fer.hr/’. This option disables such behavior.\n‘--protocol-directories’\nUse the protocol name as a directory component of local file names. For example,\nwith this option, ‘wget -r http://host’ will save to ‘http/host/...’ rather than\njust to ‘host/...’.\n‘--cut-dirs=number’\nIgnore number directory components. This is useful for getting a fine-grained control\nover the directory where recursive retrieval will be saved.\nTake, for example, the directory at ‘ftp://ftp.xemacs.org/pub/xemacs/’. If you\nretrieve it with ‘-r’, it will be saved locally under ‘ftp.xemacs.org/pub/xemacs/’.\nWhile the ‘-nH’ option can remove the ‘ftp.xemacs.org/’ part, you are still stuck\nwith ‘pub/xemacs’. This is where ‘--cut-dirs’ comes in handy; it makes Wget\nnot “see” number remote directory components. Here are several examples of how\n‘--cut-dirs’ option works.\nNo options -> ftp.xemacs.org/pub/xemacs/\n-nH -> pub/xemacs/\n-nH --cut-dirs=1 -> xemacs/\n-nH --cut-dirs=2 -> .\n--cut-dirs=1 -> ftp.xemacs.org/xemacs/\n...\nIf you just want to get rid of the directory structure, this option is similar to a\ncombination of ‘-nd’ and ‘-P’. However, unlike ‘-nd’, ‘--cut-dirs’ does not lose\nwith subdirectories—for instance, with ‘-nH --cut-dirs=1’, a ‘beta/’ subdirectory\nwill be placed to ‘xemacs/beta’, as one would expect.\n‘-P prefix’\n‘--directory-prefix=prefix’\nSet directory prefix to prefix. The directory prefix is the directory where all other\nfiles and subdirectories will be saved to, i.e. the top of the retrieval tree. The default\nis ‘.’ (the current directory).\n2.7 HTTP Options\n‘--default-page=name’\nUse name as the default file name when it isn’t known (i.e., for URLs that end in a\nslash), instead of ‘index.html’.\n‘-E’\n‘--adjust-extension’\nIf a file of type ‘application/xhtml+xml’ or ‘text/html’ is downloaded and the\nURL does not end with the regexp ‘\\.[Hh][Tt][Mm][Ll]?’, this option will cause\nthe suffix ‘.html’ to be appended to the local filename. This is useful, for in-\nstance, when you’re mirroring a remote site that uses ‘.asp’ pages, but you want\nthe mirrored pages to be viewable on your stock Apache server. Another good\nuse for this is when you’re downloading CGI-generated materials. A URL like\n‘http://site.com/article.cgi?25’ will be saved as ‘article.cgi?25.html’.\nChapter 2: Invoking 15\nNote that filenames changed in this way will be re-downloaded every time you re-\nmirror a site, because Wget can’t tell that the local ‘X.html’ file corresponds to\nremote URL ‘X’ (since it doesn’t yet know that the URL produces output of type\n‘text/html’ or ‘application/xhtml+xml’.\nAs of version 1.12, Wget will also ensure that any downloaded files of type ‘text/css’\nend in the suffix ‘.css’, and the option was renamed from ‘--html-extension’, to\nbetter reflect its new behavior. The old option name is still acceptable, but should\nnow be considered deprecated.\nAt some point in the future, this option may well be expanded to include suffixes\nfor other types of content, including content types that are not parsed by Wget.\n‘--http-user=user’\n‘--http-password=password’\nSpecify the username user and password password on an http server. According to\nthe type of the challenge, Wget will encode them using either the basic (insecure),\nthe digest, or the Windows NTLM authentication scheme.\nAnother way to specify username and password is in the url itself (see hundefinedi\n[URL Format], page hundefinedi). Either method reveals your password to anyone\nwho bothers to run ps. To prevent the passwords from being seen, store them in\n‘.wgetrc’ or ‘.netrc’, and make sure to protect those files from other users with\nchmod. If the passwords are really important, do not leave them lying in those files\neither—edit the files and delete them after Wget has started the download.\nSee hundefinedi [Security Considerations], page hundefinedi, for more information\nabout security issues with Wget.\n‘--no-http-keep-alive’\nTurn off the “keep-alive” feature for HTTP downloads. Normally, Wget asks the\nserver to keep the connection open so that, when you download more than one\ndocument from the same server, they get transferred over the same TCP connection.\nThis saves time and at the same time reduces the load on the server.\nThis option is useful when, for some reason, persistent (keep-alive) connections don’t\nwork for you, for example due to a server bug or due to the inability of server-side\nscripts to cope with the connections.\n‘--no-cache’\nDisable server-side cache. In this case, Wget will send the remote server an ap-\npropriate directive (‘Pragma: no-cache’) to get the file from the remote service,\nrather than returning the cached version. This is especially useful for retrieving and\nflushing out-of-date documents on proxy servers.\nCaching is allowed by default.\n‘--no-cookies’\nDisable the use of cookies. Cookies are a mechanism for maintaining server-side\nstate. The server sends the client a cookie using the Set-Cookie header, and the\nclient responds with the same cookie upon further requests. Since cookies allow the\nserver owners to keep track of visitors and for sites to exchange this information,\nsome consider them a breach of privacy. The default is to use cookies; however,\nstoring cookies is not on by default.\n‘--load-cookies file’\nLoad cookies from file before the first HTTP retrieval. file is a textual file in the\nformat originally used by Netscape’s ‘cookies.txt’ file.\nYou will typically use this option when mirroring sites that require that you be\nlogged in to access some or all of their content. The login process typically works by\nChapter 2: Invoking 16\nthe web server issuing an http cookie upon receiving and verifying your credentials.\nThe cookie is then resent by the browser when accessing that part of the site, and\nso proves your identity.\nMirroring such a site requires Wget to send the same cookies your browser sends\nwhen communicating with the site. This is achieved by ‘--load-cookies’—simply\npoint Wget to the location of the ‘cookies.txt’ file, and it will send the same\ncookies your browser would send in the same situation. Different browsers keep\ntextual cookie files in different locations:\nNetscape 4.x.\nThe cookies are in ‘~/.netscape/cookies.txt’.\nMozilla and Netscape 6.x.\nMozilla’s cookie file is also named ‘cookies.txt’, located somewhere\nunder ‘~/.mozilla’, in the directory of your profile. The full path\nusually ends up looking somewhat like ‘~/.mozilla/default/some-\nweird-string/cookies.txt’.\nInternet Explorer.\nYou can produce a cookie file Wget can use by using the File menu,\nImport and Export, Export Cookies. This has been tested with Internet\nExplorer 5; it is not guaranteed to work with earlier versions.\nOther browsers.\nIf you are using a different browser to create your cookies,\n‘--load-cookies’ will only work if you can locate or produce a cookie\nfile in the Netscape format that Wget expects.\nIf you cannot use ‘--load-cookies’, there might still be an alternative. If your\nbrowser supports a “cookie manager”, you can use it to view the cookies used when\naccessing the site you’re mirroring. Write down the name and value of the cookie,\nand manually instruct Wget to send those cookies, bypassing the “official” cookie\nsupport:\nwget --no-cookies --header \"Cookie: name=value\"\n‘--save-cookies file’\nSave cookies to file before exiting. This will not save cookies that have ex-\npired or that have no expiry time (so-called “session cookies”), but also see\n‘--keep-session-cookies’.\n‘--keep-session-cookies’\nWhen specified, causes ‘--save-cookies’ to also save session cookies. Session cook-\nies are normally not saved because they are meant to be kept in memory and for-\ngotten when you exit the browser. Saving them is useful on sites that require you\nto log in or to visit the home page before you can access some pages. With this\noption, multiple Wget runs are considered a single browser session as far as the site\nis concerned.\nSince the cookie file format does not normally carry session cookies, Wget marks\nthem with an expiry timestamp of 0. Wget’s ‘--load-cookies’ recognizes those\nas session cookies, but it might confuse other browsers. Also note that cookies\nso loaded will be treated as other session cookies, which means that if you want\n‘--save-cookies’ to preserve them again, you must use ‘--keep-session-cookies’\nagain.\n‘--ignore-length’\nUnfortunately, some http servers (cgi programs, to be more precise) send out\nbogus Content-Length headers, which makes Wget go wild, as it thinks not all the\nChapter 2: Invoking 17\ndocument was retrieved. You can spot this syndrome if Wget retries getting the\nsame document again and again, each time claiming that the (otherwise normal)\nconnection has closed on the very same byte.\nWith this option, Wget will ignore the Content-Length header—as if it never ex-\nisted.\n‘--header=header-line’\nSend header-line along with the rest of the headers in each http request. The\nsupplied header is sent as-is, which means it must contain name and value separated\nby colon, and must not contain newlines.\nYou may define more than one additional header by specifying ‘--header’ more\nthan once.\nwget --header=’Accept-Charset: iso-8859-2’ \\\n--header=’Accept-Language: hr’ \\\nhttp://fly.srk.fer.hr/\nSpecification of an empty string as the header value will clear all previous user-\ndefined headers.\nAs of Wget 1.10, this option can be used to override headers otherwise generated\nautomatically. This example instructs Wget to connect to localhost, but to specify\n‘foo.bar’ in the Host header:\nwget --header=\"Host: foo.bar\" http://localhost/\nIn versions of Wget prior to 1.10 such use of ‘--header’ caused sending of duplicate\nheaders.\n‘--max-redirect=number’\nSpecifies the maximum number of redirections to follow for a resource. The default\nis 20, which is usually far more than necessary. However, on those occasions where\nyou want to allow more (or fewer), this is the option to use.\n‘--proxy-user=user’\n‘--proxy-password=password’\nSpecify the username user and password password for authentication on a proxy\nserver. Wget will encode them using the basic authentication scheme.\nSecurity considerations similar to those with ‘--http-password’ pertain here as\nwell.\n‘--referer=url’\nInclude ‘Referer: url’ header in HTTP request. Useful for retrieving documents with\nserver-side processing that assume they are always being retrieved by interactive web\nbrowsers and only come out properly when Referer is set to one of the pages that\npoint to them.\n‘--save-headers’\nSave the headers sent by the http server to the file, preceding the actual contents,\nwith an empty line as the separator.\n‘-U agent-string’\n‘--user-agent=agent-string’\nIdentify as agent-string to the http server.\nThe http protocol allows the clients to identify themselves using a User-Agent\nheader field. This enables distinguishing the www software, usually for statis-\ntical purposes or for tracing of protocol violations. Wget normally identifies as\n‘Wget/version’, version being the current version number of Wget.\nChapter 2: Invoking 18\nHowever, some sites have been known to impose the policy of tailoring the output\naccording to the User-Agent-supplied information. While this is not such a bad\nidea in theory, it has been abused by servers denying information to clients other\nthan (historically) Netscape or, more frequently, Microsoft Internet Explorer. This\noption allows you to change the User-Agent line issued by Wget. Use of this option\nis discouraged, unless you really know what you are doing.\nSpecifying empty user agent with ‘--user-agent=\"\"’ instructs Wget not to send\nthe User-Agent header in http requests.\n‘--post-data=string’\n‘--post-file=file’\nUse POST as the method for all HTTP requests and send the specified data in the\nrequest body. ‘--post-data’ sends string as data, whereas ‘--post-file’ sends the\ncontents of file. Other than that, they work in exactly the same way. In particular,\nthey both expect content of the form key1=value1&key2=value2, with percent-\nencoding for special characters; the only difference is that one expects its content as\na command-line parameter and the other accepts its content from a file. In particu-\nlar, ‘--post-file’ is not for transmitting files as form attachments: those must ap-\npear as key=value data (with appropriate percent-coding) just like everything else.\nWget does not currently support multipart/form-data for transmitting POST\ndata; only application/x-www-form-urlencoded. Only one of ‘--post-data’ and\n‘--post-file’ should be specified.\nPlease note that wget does not require the content to be of the form\nkey1=value1&key2=value2, and neither does it test for it. Wget will simply\ntransmit whatever data is provided to it. Most servers however expect the POST\ndata to be in the above format when processing HTML Forms.\nWhen sending a POST request using the ‘--post-file’ option, Wget treats the file\nas a binary file and will send every character in the POST request without stripping\ntrailing newline or formfeed characters. Any other control characters in the text\nwill also be sent as-is in the POST request.\nPlease be aware that Wget needs to know the size of the POST data in advance.\nTherefore the argument to --post-file must be a regular file; specifying a FIFO\nor something like ‘/dev/stdin’ won’t work. It’s not quite clear how to work around\nthis limitation inherent in HTTP/1.0. Although HTTP/1.1 introduces chunked\ntransfer that doesn’t require knowing the request length in advance, a client can’t\nuse chunked unless it knows it’s talking to an HTTP/1.1 server. And it can’t know\nthat until it receives a response, which in turn requires the request to have been\ncompleted – a chicken-and-egg problem.\nNote: As of version 1.15 if Wget is redirected after the POST request is completed,\nits behaviour will depend on the response code returned by the server. In case of a\n301 Moved Permanently, 302 Moved Temporarily or 307 Temporary Redirect, Wget\nwill, in accordance with RFC2616, continue to send a POST request. In case a\nserver wants the client to change the Request method upon redirection, it should\nsend a 303 See Other response code.\nThis example shows how to log in to a server using POST and then proceed to\ndownload the desired pages, presumably only accessible to authorized users:\nChapter 2: Invoking 19\n# Log in to the server. This can be done only once.\nwget --save-cookies cookies.txt \\\n--post-data ’user=foo&password=bar’ \\\nhttp://server.com/auth.php\n# Now grab the page or pages we care about.\nwget --load-cookies cookies.txt \\\n-p http://server.com/interesting/article.php\nIf the server is using session cookies to track user authentication, the above will not\nwork because ‘--save-cookies’ will not save them (and neither will browsers) and\nthe ‘cookies.txt’ file will be empty. In that case use ‘--keep-session-cookies’\nalong with ‘--save-cookies’ to force saving of session cookies.\n‘--method=HTTP-Method’\nFor the purpose of RESTful scripting, Wget allows sending of other HTTP Methods\nwithout the need to explicitly set them using ‘--header=Header-Line’. Wget will\nuse whatever string is passed to it after ‘--method’ as the HTTP Method to the\nserver.\n‘--body-data=Data-String’\n‘--body-file=Data-File’\nMust be set when additional data needs to be sent to the server along with the\nMethod specified using ‘--method’. ‘--body-data’ sends string as data, whereas\n‘--body-file’ sends the contents of file. Other than that, they work in exactly the\nsame way.\nCurrently, ‘--body-file’ is not for transmitting files as a whole. Wget does not cur-\nrently support multipart/form-data for transmitting data; only application/x-\nwww-form-urlencoded. In the future, this may be changed so that wget sends the\n‘--body-file’ as a complete file instead of sending its contents to the server. Please\nbe aware that Wget needs to know the contents of BODY Data in advance, and hence\nthe argument to ‘--body-file’ should be a regular file. See ‘--post-file’ for a\nmore detailed explanation. Only one of ‘--body-data’ and ‘--body-file’ should\nbe specified.\nIf Wget is redirected after the request is completed, Wget will suspend the current\nmethod and send a GET request till the redirection is completed. This is true\nfor all redirection response codes except 307 Temporary Redirect which is used to\nexplicitly specify that the request method should not change. Another exception is\nwhen the method is set to POST, in which case the redirection rules specified under\n‘--post-data’ are followed.\n‘--content-disposition’\nIf this is set to on, experimental (not fully-functional) support for Content-\nDisposition headers is enabled. This can currently result in extra round-trips\nto the server for a HEAD request, and is known to suffer from a few bugs, which is\nwhy it is not currently enabled by default.\nThis option is useful for some file-downloading CGI programs that use Content-\nDisposition headers to describe what the name of a downloaded file should be.\n‘--content-on-error’\nIf this is set to on, wget will not skip the content when the server responds with a\nhttp status code that indicates error.\nChapter 2: Invoking 20\n‘--trust-server-names’\nIf this is set to on, on a redirect the last component of the redirection URL will be\nused as the local file name. By default it is used the last component in the original\nURL.\n‘--auth-no-challenge’\nIf this option is given, Wget will send Basic HTTP authentication information\n(plaintext username and password) for all requests, just like Wget 1.10.2 and prior\ndid by default.\nUse of this option is not recommended, and is intended only to support some few\nobscure servers, which never send HTTP authentication challenges, but accept un-\nsolicited auth info, say, in addition to form-based authentication.\n2.8 HTTPS (SSL/TLS) Options\nTo support encrypted HTTP (HTTPS) downloads, Wget must be compiled with an external\nSSL library. The current default is GnuTLS. In addition, Wget also supports HSTS (HTTP\nStrict Transport Security). If Wget is compiled without SSL support, none of these options are\navailable.\n‘--secure-protocol=protocol’\nChoose the secure protocol to be used. Legal values are ‘auto’, ‘SSLv2’, ‘SSLv3’,\n‘TLSv1’, ‘TLSv1_1’, ‘TLSv1_2’ and ‘PFS’. If ‘auto’ is used, the SSL library is given\nthe liberty of choosing the appropriate protocol automatically, which is achieved by\nsending a TLSv1 greeting. This is the default.\nSpecifying ‘SSLv2’, ‘SSLv3’, ‘TLSv1’, ‘TLSv1_1’ or ‘TLSv1_2’ forces the use of the\ncorresponding protocol. This is useful when talking to old and buggy SSL server\nimplementations that make it hard for the underlying SSL library to choose the\ncorrect protocol version. Fortunately, such servers are quite rare.\nSpecifying ‘PFS’ enforces the use of the so-called Perfect Forward Security cipher\nsuites. In short, PFS adds security by creating a one-time key for each SSL con-\nnection. It has a bit more CPU impact on client and server. We use known to be\nsecure ciphers (e.g. no MD4) and the TLS protocol.\n‘--https-only’\nWhen in recursive mode, only HTTPS links are followed.\n‘--no-check-certificate’\nDon’t check the server certificate against the available certificate authorities. Also\ndon’t require the URL host name to match the common name presented by the\ncertificate.\nAs of Wget 1.10, the default is to verify the server’s certificate against the recog-\nnized certificate authorities, breaking the SSL handshake and aborting the download\nif the verification fails. Although this provides more secure downloads, it does break\ninteroperability with some sites that worked with previous Wget versions, particu-\nlarly those using self-signed, expired, or otherwise invalid certificates. This option\nforces an “insecure” mode of operation that turns the certificate verification errors\ninto warnings and allows you to proceed.\nIf you encounter “certificate verification” errors or ones saying that “common name\ndoesn’t match requested host name”, you can use this option to bypass the verifi-\ncation and proceed with the download. Only use this option if you are otherwise\nconvinced of the site’s authenticity, or if you really don’t care about the validity of\nits certificate. It is almost always a bad idea not to check the certificates when\nChapter 2: Invoking 21\ntransmitting confidential or important data. For self-signed/internal certificates,\nyou should download the certificate and verify against that instead of forcing this\ninsecure mode. If you are really sure of not desiring any certificate verification, you\ncan specify –check-certificate=quiet to tell wget to not print any warning about\ninvalid certificates, albeit in most cases this is the wrong thing to do.\n‘--certificate=file’\nUse the client certificate stored in file. This is needed for servers that are configured\nto require certificates from the clients that connect to them. Normally a certificate\nis not required and this switch is optional.\n‘--certificate-type=type’\nSpecify the type of the client certificate. Legal values are ‘PEM’ (assumed by default)\nand ‘DER’, also known as ‘ASN1’.\n‘--private-key=file’\nRead the private key from file. This allows you to provide the private key in a file\nseparate from the certificate.\n‘--private-key-type=type’\nSpecify the type of the private key. Accepted values are ‘PEM’ (the default) and\n‘DER’.\n‘--ca-certificate=file’\nUse file as the file with the bundle of certificate authorities (“CA”) to verify the\npeers. The certificates must be in PEM format.\nWithout this option Wget looks for CA certificates at the system-specified locations,\nchosen at OpenSSL installation time.\n‘--ca-directory=directory’\nSpecifies directory containing CA certificates in PEM format. Each file contains\none CA certificate, and the file name is based on a hash value derived from the cer-\ntificate. This is achieved by processing a certificate directory with the c_rehash\nutility supplied with OpenSSL. Using ‘--ca-directory’ is more efficient than\n‘--ca-certificate’ when many certificates are installed because it allows Wget\nto fetch certificates on demand.\nWithout this option Wget looks for CA certificates at the system-specified locations,\nchosen at OpenSSL installation time.\n‘--crl-file=file’\nSpecifies a CRL file in file. This is needed for certificates that have been revocated\nby the CAs.\n‘--random-file=file’\n[OpenSSL and LibreSSL only] Use file as the source of random data for seeding the\npseudo-random number generator on systems without ‘/dev/urandom’.\nOn such systems the SSL library needs an external source of randomness to initialize.\nRandomness may be provided by EGD (see ‘--egd-file’ below) or read from an\nexternal source specified by the user. If this option is not specified, Wget looks for\nrandom data in $RANDFILE or, if that is unset, in ‘$HOME/.rnd’.\nIf you’re getting the “Could not seed OpenSSL PRNG; disabling SSL.” error, you\nshould provide random data using some of the methods described above.\n‘--egd-file=file’\n[OpenSSL only] Use file as the EGD socket. EGD stands for Entropy Gathering\nDaemon, a user-space program that collects data from various unpredictable system\nChapter 2: Invoking 22\nsources and makes it available to other programs that might need it. Encryption\nsoftware, such as the SSL library, needs sources of non-repeating randomness to seed\nthe random number generator used to produce cryptographically strong keys.\nOpenSSL allows the user to specify his own source of entropy using the RAND_\nFILE environment variable. If this variable is unset, or if the specified file does not\nproduce enough randomness, OpenSSL will read random data from EGD socket\nspecified using this option.\nIf this option is not specified (and the equivalent startup command is not used),\nEGD is never contacted. EGD is not needed on modern Unix systems that support\n‘/dev/urandom’.\n‘--no-hsts’\nWget supports HSTS (HTTP Strict Transport Security, RFC 6797) by default. Use\n‘--no-hsts’ to make Wget act as a non-HSTS-compliant UA. As a consequence,\nWget would ignore all the Strict-Transport-Security headers, and would not\nenforce any existing HSTS policy.\n‘--hsts-file=file’\nBy default, Wget stores its HSTS database in ‘~/.wget-hsts’. You can use\n‘--hsts-file’ to override this. Wget will use the supplied file as the HSTS data-\nbase. Such file must conform to the correct HSTS database format used by Wget.\nIf Wget cannot parse the provided file, the behaviour is unspecified.\nThe Wget’s HSTS database is a plain text file. Each line contains an HSTS entry\n(ie. a site that has issued a Strict-Transport-Security header and that therefore\nhas specified a concrete HSTS policy to be applied). Lines starting with a dash (#)\nare ignored by Wget. Please note that in spite of this convenient human-readability\nhand-hacking the HSTS database is generally not a good idea.\nAn HSTS entry line consists of several fields separated by one or more whitespace:\n<hostname> SP [<port>] SP <include subdomains> SP <created> SP <max-age>\nThe hostname and port fields indicate the hostname and port to which the given\nHSTS policy applies. The port field may be zero, and it will, in most of the cases.\nThat means that the port number will not be taken into account when deciding\nwhether such HSTS policy should be applied on a given request (only the host-\nname will be evaluated). When port is different to zero, both the target hostname\nand the port will be evaluated and the HSTS policy will only be applied if both\nof them match. This feature has been included for testing/development purposes\nonly. The Wget testsuite (in ‘testenv/’) creates HSTS databases with explicit ports\nwith the purpose of ensuring Wget’s correct behaviour. Applying HSTS policies to\nports other than the default ones is discouraged by RFC 6797 (see Appendix B\n\"Differences between HSTS Policy and Same-Origin Policy\"). Thus, this function-\nality should not be used in production environments and port will typically be zero.\nThe last three fields do what they are expected to. The field include subdomains\ncan either be 1 or 0 and it signals whether the subdomains of the target domain\nshould be part of the given HSTS policy as well. The created and max-age fields\nhold the timestamp values of when such entry was created (first seen by Wget)\nand the HSTS-defined value ’max-age’, which states how long should that HSTS\npolicy remain active, measured in seconds elapsed since the timestamp stored in\ncreated. Once that time has passed, that HSTS policy will no longer be valid and\nwill eventually be removed from the database.\nIf you supply your own HSTS database via ‘--hsts-file’, be aware that Wget may\nmodify the provided file if any change occurs between the HSTS policies requested\nChapter 2: Invoking 23\nby the remote servers and those in the file. When Wget exists, it effectively updates\nthe HSTS database by rewriting the database file with the new entries.\nIf the supplied file does not exist, Wget will create one. This file will contain the new\nHSTS entries. If no HSTS entries were generated (no Strict-Transport-Security\nheaders were sent by any of the servers) then no file will be created, not even an\nempty one. This behaviour applies to the default database file (‘~/.wget-hsts’) as\nwell: it will not be created until some server enforces an HSTS policy.\nCare is taken not to override possible changes made by other Wget processes at the\nsame time over the HSTS database. Before dumping the updated HSTS entries on\nthe file, Wget will re-read it and merge the changes.\nUsing a custom HSTS database and/or modifying an existing one is discouraged. For\nmore information about the potential security threats arised from such practice, see\nsection 14 \"Security Considerations\" of RFC 6797, specially section 14.9 \"Creative\nManipulation of HSTS Policy Store\".\n‘--warc-file=file’\nUse file as the destination WARC file.\n‘--warc-header=string’\nUse string into as the warcinfo record.\n‘--warc-max-size=size’\nSet the maximum size of the WARC files to size.\n‘--warc-cdx’\nWrite CDX index files.\n‘--warc-dedup=file’\nDo not store records listed in this CDX file.\n‘--no-warc-compression’\nDo not compress WARC files with GZIP.\n‘--no-warc-digests’\nDo not calculate SHA1 digests.\n‘--no-warc-keep-log’\nDo not store the log file in a WARC record.\n‘--warc-tempdir=dir’\nSpecify the location for temporary files created by the WARC writer.\n2.9 FTP Options\n‘--ftp-user=user’\n‘--ftp-password=password’\nSpecify the username user and password password on an ftp server. Without this,\nor the corresponding startup option, the password defaults to ‘-wget@’, normally\nused for anonymous FTP.\nAnother way to specify username and password is in the url itself (see hundefinedi\n[URL Format], page hundefinedi). Either method reveals your password to anyone\nwho bothers to run ps. To prevent the passwords from being seen, store them in\n‘.wgetrc’ or ‘.netrc’, and make sure to protect those files from other users with\nchmod. If the passwords are really important, do not leave them lying in those files\neither—edit the files and delete them after Wget has started the download.\nSee hundefinedi [Security Considerations], page hundefinedi, for more information\nabout security issues with Wget.\nChapter 2: Invoking 24\n‘--no-remove-listing’\nDon’t remove the temporary ‘.listing’ files generated by ftp retrievals. Normally,\nthese files contain the raw directory listings received from ftp servers. Not removing\nthem can be useful for debugging purposes, or when you want to be able to easily\ncheck on the contents of remote server directories (e.g. to verify that a mirror you’re\nrunning is complete).\nNote that even though Wget writes to a known filename for this file, this is not\na security hole in the scenario of a user making ‘.listing’ a symbolic link to\n‘/etc/passwd’ or something and asking root to run Wget in his or her directory.\nDepending on the options used, either Wget will refuse to write to ‘.listing’, mak-\ning the globbing/recursion/time-stamping operation fail, or the symbolic link will\nbe deleted and replaced with the actual ‘.listing’ file, or the listing will be written\nto a ‘.listing.number’ file.\nEven though this situation isn’t a problem, though, root should never run Wget\nin a non-trusted user’s directory. A user could do something as simple as linking\n‘index.html’ to ‘/etc/passwd’ and asking root to run Wget with ‘-N’ or ‘-r’ so\nthe file will be overwritten.\n‘--no-glob’\nTurn off ftp globbing. Globbing refers to the use of shell-like special characters\n(wildcards), like ‘*’, ‘?’, ‘[’ and ‘]’ to retrieve more than one file from the same\ndirectory at once, like:\nwget ftp://gnjilux.srk.fer.hr/*.msg\nBy default, globbing will be turned on if the url contains a globbing character.\nThis option may be used to turn globbing on or off permanently.\nYou may have to quote the url to protect it from being expanded by your shell.\nGlobbing makes Wget look for a directory listing, which is system-specific. This is\nwhy it currently works only with Unix ftp servers (and the ones emulating Unix ls\noutput).\n‘--no-passive-ftp’\nDisable the use of the passive FTP transfer mode. Passive FTP mandates that the\nclient connect to the server to establish the data connection rather than the other\nway around.\nIf the machine is connected to the Internet directly, both passive and active FTP\nshould work equally well. Behind most firewall and NAT configurations passive\nFTP has a better chance of working. However, in some rare firewall configurations,\nactive FTP actually works when passive FTP doesn’t. If you suspect this to be the\ncase, use this option, or set passive_ftp=off in your init file.\n‘--preserve-permissions’\nPreserve remote file permissions instead of permissions set by umask.\n‘--retr-symlinks’\nBy default, when retrieving ftp directories recursively and a symbolic link is encoun-\ntered, the symbolic link is traversed and the pointed-to files are retrieved. Currently,\nWget does not traverse symbolic links to directories to download them recursively,\nthough this feature may be added in the future.\nWhen ‘--retr-symlinks=no’ is specified, the linked-to file is not downloaded. In-\nstead, a matching symbolic link is created on the local filesystem. The pointed-to\nfile will not be retrieved unless this recursive retrieval would have encountered it\nseparately and downloaded it anyway. This option poses a security risk where a\nChapter 2: Invoking 25\nmalicious FTP Server may cause Wget to write to files outside of the intended\ndirectories through a specially crafted .listing file.\nNote that when retrieving a file (not a directory) because it was specified on the\ncommand-line, rather than because it was recursed to, this option has no effect.\nSymbolic links are always traversed in this case.\n2.10 FTPS Options\n‘--ftps-implicit’\nThis option tells Wget to use FTPS implicitly. Implicit FTPS consists of initializing\nSSL/TLS from the very beginning of the control connection. This option does not\nsend an AUTH TLS command: it assumes the server speaks FTPS and directly starts\nan SSL/TLS connection. If the attempt is successful, the session continues just\nlike regular FTPS (PBSZ and PROT are sent, etc.). Implicit FTPS is no longer a\nrequirement for FTPS implementations, and thus many servers may not support it.\nIf ‘--ftps-implicit’ is passed and no explicit port number specified, the default\nport for implicit FTPS, 990, will be used, instead of the default port for the \"normal\"\n(explicit) FTPS which is the same as that of FTP, 21.\n‘--no-ftps-resume-ssl’\nDo not resume the SSL/TLS session in the data channel. When starting a data\nconnection, Wget tries to resume the SSL/TLS session previously started in the\ncontrol connection. SSL/TLS session resumption avoids performing an entirely new\nhandshake by reusing the SSL/TLS parameters of a previous session. Typically,\nthe FTPS servers want it that way, so Wget does this by default. Under rare\ncircumstances however, one might want to start an entirely new SSL/TLS session\nin every data connection. This is what ‘--no-ftps-resume-ssl’ is for.\n‘--ftps-clear-data-connection’\nAll the data connections will be in plain text. Only the control connection will be\nunder SSL/TLS. Wget will send a PROT C command to achieve this, which must be\napproved by the server.\n‘--ftps-fallback-to-ftp’\nFall back to FTP if FTPS is not supported by the target server. For security reasons,\nthis option is not asserted by default. The default behaviour is to exit with an error.\nIf a server does not successfully reply to the initial AUTH TLS command, or in the\ncase of implicit FTPS, if the initial SSL/TLS connection attempt is rejected, it is\nconsidered that such server does not support FTPS.\n2.11 Recursive Retrieval Options\n‘-r’\n‘--recursive’\nTurn on recursive retrieving. See hundefinedi [Recursive Download], page hunde-\nfinedi, for more details. The default maximum depth is 5.\n‘-l depth’\n‘--level=depth’\nSpecify recursion maximum depth level depth (see hundefinedi [Recursive Down-\nload], page hundefinedi).\n‘--delete-after’\nThis option tells Wget to delete every single file it downloads, after having done so.\nIt is useful for pre-fetching popular pages through a proxy, e.g.:\nChapter 2: Invoking 26\nwget -r -nd --delete-after http://whatever.com/~popular/page/\nThe ‘-r’ option is to retrieve recursively, and ‘-nd’ to not create directories.\nNote that ‘--delete-after’ deletes files on the local machine. It does not is-\nsue the ‘DELE’ command to remote FTP sites, for instance. Also note that when\n‘--delete-after’ is specified, ‘--convert-links’ is ignored, so ‘.orig’ files are\nsimply not created in the first place.\n‘-k’\n‘--convert-links’\nAfter the download is complete, convert the links in the document to make them\nsuitable for local viewing. This affects not only the visible hyperlinks, but any part\nof the document that links to external content, such as embedded images, links to\nstyle sheets, hyperlinks to non-html content, etc.\nEach link will be changed in one of the two ways:\n• The links to files that have been downloaded by Wget will be changed to refer\nto the file they point to as a relative link.\nExample: if the downloaded file ‘/foo/doc.html’ links to ‘/bar/img.gif’,\nalso downloaded, then the link in ‘doc.html’ will be modified to point to\n‘../bar/img.gif’. This kind of transformation works reliably for arbitrary\ncombinations of directories.\n• The links to files that have not been downloaded by Wget will be changed to\ninclude host name and absolute path of the location they point to.\nExample: if the downloaded file ‘/foo/doc.html’ links to ‘/bar/img.gif’ (or\nto ‘../bar/img.gif’), then the link in ‘doc.html’ will be modified to point to\n‘http://hostname/bar/img.gif’.\nBecause of this, local browsing works reliably: if a linked file was downloaded, the\nlink will refer to its local name; if it was not downloaded, the link will refer to its full\nInternet address rather than presenting a broken link. The fact that the former links\nare converted to relative links ensures that you can move the downloaded hierarchy\nto another directory.\nNote that only at the end of the download can Wget know which links have been\ndownloaded. Because of that, the work done by ‘-k’ will be performed at the end\nof all the downloads.\n‘--convert-file-only’\nThis option converts only the filename part of the URLs, leaving the rest of the\nURLs untouched. This filename part is sometimes referred to as the \"basename\",\nalthough we avoid that term here in order not to cause confusion.\nIt works particularly well in conjunction with ‘--adjust-extension’, although this\ncoupling is not enforced. It proves useful to populate Internet caches with files\ndownloaded from different hosts.\nExample: if some link points to ‘//foo.com/bar.cgi?xyz’ with\n‘--adjust-extension’ asserted and its local destination is intended to\nbe ‘./foo.com/bar.cgi?xyz.css’, then the link would be converted to\n‘//foo.com/bar.cgi?xyz.css’. Note that only the filename part has been\nmodified. The rest of the URL has been left untouched, including the net path\n(//) which would otherwise be processed by Wget and converted to the effective\nscheme (ie. http://).\nChapter 2: Invoking 27\n‘-K’\n‘--backup-converted’\nWhen converting a file, back up the original version with a ‘.orig’ suffix. Affects\nthe behavior of ‘-N’ (see hundefinedi [HTTP Time-Stamping Internals], page hun-\ndefinedi).\n‘-m’\n‘--mirror’\nTurn on options suitable for mirroring. This option turns on recursion and time-\nstamping, sets infinite recursion depth and keeps ftp directory listings. It is cur-\nrently equivalent to ‘-r -N -l inf --no-remove-listing’.\n‘-p’\n‘--page-requisites’\nThis option causes Wget to download all the files that are necessary to properly\ndisplay a given html page. This includes such things as inlined images, sounds,\nand referenced stylesheets.\nOrdinarily, when downloading a single html page, any requisite documents that\nmay be needed to display it properly are not downloaded. Using ‘-r’ together with\n‘-l’ can help, but since Wget does not ordinarily distinguish between external and\ninlined documents, one is generally left with “leaf documents” that are missing their\nrequisites.\nFor instance, say document ‘1.html’ contains an <IMG> tag referencing ‘1.gif’ and\nan <A> tag pointing to external document ‘2.html’. Say that ‘2.html’ is similar\nbut that its image is ‘2.gif’ and it links to ‘3.html’. Say this continues up to some\narbitrarily high number.\nIf one executes the command:\nwget -r -l 2 http://site/1.html\nthen ‘1.html’, ‘1.gif’, ‘2.html’, ‘2.gif’, and ‘3.html’ will be downloaded. As you\ncan see, ‘3.html’ is without its requisite ‘3.gif’ because Wget is simply counting\nthe number of hops (up to 2) away from ‘1.html’ in order to determine where to\nstop the recursion. However, with this command:\nwget -r -l 2 -p http://site/1.html\nall the above files and ‘3.html’’s requisite ‘3.gif’ will be downloaded. Similarly,\nwget -r -l 1 -p http://site/1.html\nwill cause ‘1.html’, ‘1.gif’, ‘2.html’, and ‘2.gif’ to be downloaded. One might\nthink that:\nwget -r -l 0 -p http://site/1.html\nwould download just ‘1.html’ and ‘1.gif’, but unfortunately this is not the case,\nbecause ‘-l 0’ is equivalent to ‘-l inf’—that is, infinite recursion. To download a\nsingle html page (or a handful of them, all specified on the command-line or in a\n‘-i’ url input file) and its (or their) requisites, simply leave off ‘-r’ and ‘-l’:\nwget -p http://site/1.html\nNote that Wget will behave as if ‘-r’ had been specified, but only that single page\nand its requisites will be downloaded. Links from that page to external documents\nwill not be followed. Actually, to download a single page and all its requisites (even\nif they exist on separate websites), and make sure the lot displays properly locally,\nthis author likes to use a few options in addition to ‘-p’:\nwget -E -H -k -K -p http://site/document\nChapter 2: Invoking 28\nTo finish off this topic, it’s worth knowing that Wget’s idea of an external document\nlink is any URL specified in an <A> tag, an <AREA> tag, or a <LINK> tag other than\n<LINK REL=\"stylesheet\">.\n‘--strict-comments’\nTurn on strict parsing of html comments. The default is to terminate comments\nat the first occurrence of ‘-->’.\nAccording to specifications, html comments are expressed as sgml declarations.\nDeclaration is special markup that begins with ‘<!’ and ends with ‘>’, such as\n‘<!DOCTYPE ...>’, that may contain comments between a pair of ‘--’ delimiters.\nhtml comments are “empty declarations”, sgml declarations without any non-\ncomment text. Therefore, ‘<!--foo-->’ is a valid comment, and so is ‘<!--one--\n--two-->’, but ‘<!--1--2-->’ is not.\nOn the other hand, most html writers don’t perceive comments as anything other\nthan text delimited with ‘<!--’ and ‘-->’, which is not quite the same. For example,\nsomething like ‘<!------------>’ works as a valid comment as long as the number\nof dashes is a multiple of four (!). If not, the comment technically lasts until the\nnext ‘--’, which may be at the other end of the document. Because of this, many\npopular browsers completely ignore the specificationand implement what users have\ncome to expect: comments delimited with ‘<!--’ and ‘-->’.\nUntil version 1.9, Wget interpreted comments strictly, which resulted in missing\nlinks in many web pages that displayed fine in browsers, but had the misfortune of\ncontaining non-compliant comments. Beginning with version 1.9, Wget has joined\nthe ranks of clients that implements “naive” comments, terminating each comment\nat the first occurrence of ‘-->’.\nIf, for whatever reason, you want strict comment parsing, use this option to turn it\non.\n2.12 Recursive Accept/Reject Options\n‘-A acclist --accept acclist’\n‘-R rejlist --reject rejlist’\nSpecify comma-separated lists of file name suffixes or patterns to accept or reject\n(see hundefinedi [Types of Files], page hundefinedi). Note that if any of the wildcard\ncharacters, ‘*’, ‘?’, ‘[’ or ‘]’, appear in an element of acclist or rejlist, it will be\ntreated as a pattern, rather than a suffix. In this case, you have to enclose the\npattern into quotes to prevent your shell from expanding it, like in ‘-A \"*.mp3\"’ or\n‘-A ’*.mp3’’.\n‘--accept-regex urlregex’\n‘--reject-regex urlregex’\nSpecify a regular expression to accept or reject the complete URL.\n‘--regex-type regextype’\nSpecify the regular expression type. Possible types are ‘posix’ or ‘pcre’. Note that\nto be able to use ‘pcre’ type, wget has to be compiled with libpcre support.\n‘-D domain-list’\n‘--domains=domain-list’\nSet domains to be followed. domain-list is a comma-separated list of domains. Note\nthat it does not turn on ‘-H’.\n‘--exclude-domains domain-list’\nSpecify the domains that are not to be followed (see hundefinedi [Spanning Hosts],\npage hundefinedi).\nChapter 2: Invoking 29\n‘--follow-ftp’\nFollow ftp links from html documents. Without this option, Wget will ignore all\nthe ftp links.\n‘--follow-tags=list’\nWget has an internal table of html tag / attribute pairs that it considers when\nlooking for linked documents during a recursive retrieval. If a user wants only a\nsubset of those tags to be considered, however, he or she should be specify such tags\nin a comma-separated list with this option.\n‘--ignore-tags=list’\nThis is the opposite of the ‘--follow-tags’ option. To skip certain html tags when\nrecursively looking for documents to download, specify them in a comma-separated\nlist.\nIn the past, this option was the best bet for downloading a single page and its\nrequisites, using a command-line like:\nwget --ignore-tags=a,area -H -k -K -r http://site/document\nHowever, the author of this option came across a page with tags like <LINK\nREL=\"home\" HREF=\"/\"> and came to the realization that specifying tags to ignore\nwas not enough. One can’t just tell Wget to ignore <LINK>, because then stylesheets\nwill not be downloaded. Now the best bet for downloading a single page and its\nrequisites is the dedicated ‘--page-requisites’ option.\n‘--ignore-case’\nIgnore case when matching files and directories. This influences the behavior of -R,\n-A, -I, and -X options, as well as globbing implemented when downloading from\nFTP sites. For example, with this option, ‘-A \"*.txt\"’ will match ‘file1.txt’,\nbut also ‘file2.TXT’, ‘file3.TxT’, and so on. The quotes in the example are to\nprevent the shell from expanding the pattern.\n‘-H’\n‘--span-hosts’\nEnable spanning across hosts when doing recursive retrieving (see hundefinedi [Span-\nning Hosts], page hundefinedi).\n‘-L’\n‘--relative’\nFollow relative links only. Useful for retrieving a specific home page without any\ndistractions, not even those from the same hosts (see hundefinedi [Relative Links],\npage hundefinedi).\n‘-I list’\n‘--include-directories=list’\nSpecify a comma-separated list of directories you wish to follow when downloading\n(see hundefinedi [Directory-Based Limits], page hundefinedi). Elements of list may\ncontain wildcards.\n‘-X list’\n‘--exclude-directories=list’\nSpecify a comma-separated list of directories you wish to exclude from download\n(see hundefinedi [Directory-Based Limits], page hundefinedi). Elements of list may\ncontain wildcards.\n‘-np’\nChapter 2: Invoking 30\n‘--no-parent’\nDo not ever ascend to the parent directory when retrieving recursively. This is a\nuseful option, since it guarantees that only the files below a certain hierarchy will be\ndownloaded. See hundefinedi [Directory-Based Limits], page hundefinedi, for more\ndetails.\n2.13 Exit Status\nWget may return one of several error codes if it encounters problems.\n0 No problems occurred.\n1 Generic error code.\n2 Parse error—for instance, when parsing command-line options, the ‘.wgetrc’ or\n‘.netrc’...\n3 File I/O error.\n4 Network failure.\n5 SSL verification failure.\n6 Username/password authentication failure.\n7 Protocol errors.\n8 Server issued an error response.\nWith the exceptions of 0 and 1, the lower-numbered exit codes take precedence over higher-\nnumbered ones, when multiple types of errors are encountered.\nIn versions of Wget prior to 1.12, Wget’s exit status tended to be unhelpful and incon-\nsistent. Recursive downloads would virtually always return 0 (success), regardless of any is-\nsues encountered, and non-recursive fetches only returned the status corresponding to the most\nrecently-attempted download.\nChapter 3: Recursive Download 31\n3 Recursive Download\nGNU Wget is capable of traversing parts of the Web (or a single http or ftp server), following\nlinks and directory structure. We refer to this as to recursive retrieval, or recursion.\nWith http urls, Wget retrieves and parses the html or css from the given url, retrieving\nthe files the document refers to, through markup like href or src, or css uri values specified\nusing the ‘url()’ functional notation. If the freshly downloaded file is also of type text/html,\napplication/xhtml+xml, or text/css, it will be parsed and followed further.\nRecursive retrieval of http and html/css content is breadth-first. This means that Wget\nfirst downloads the requested document, then the documents linked from that document, then\nthe documents linked by them, and so on. In other words, Wget first downloads the documents\nat depth 1, then those at depth 2, and so on until the specified maximum depth.\nThe maximum depth to which the retrieval may descend is specified with the ‘-l’ option.\nThe default maximum depth is five layers.\nWhen retrieving an ftp url recursively, Wget will retrieve all the data from the given\ndirectory tree (including the subdirectories up to the specified depth) on the remote server,\ncreating its mirror image locally. ftp retrieval is also limited by the depth parameter. Unlike\nhttp recursion, ftp recursion is performed depth-first.\nBy default, Wget will create a local directory tree, corresponding to the one found on the\nremote server.\nRecursive retrieving can find a number of applications, the most important of which is mir-\nroring. It is also useful for www presentations, and any other opportunities where slow network\nconnections should be bypassed by storing the files locally.\nYou should be warned that recursive downloads can overload the remote servers. Because of\nthat, many administrators frown upon them and may ban access from your site if they detect very\nfast downloads of big amounts of content. When downloading from Internet servers, consider\nusing the ‘-w’ option to introduce a delay between accesses to the server. The download will\ntake a while longer, but the server administrator will not be alarmed by your rudeness.\nOf course, recursive download may cause problems on your machine. If left to run unchecked,\nit can easily fill up the disk. If downloading from local network, it can also take bandwidth on\nthe system, as well as consume memory and CPU.\nTry to specify the criteria that match the kind of download you are trying to achieve. If you\nwant to download only one page, use ‘--page-requisites’ without any additional recursion. If\nyou want to download things under one directory, use ‘-np’ to avoid downloading things from\nother directories. If you want to download all the files from one directory, use ‘-l 1’ to make\nsure the recursion depth never exceeds one. See hundefinedi [Following Links], page hundefinedi,\nfor more information about this.\nRecursive retrieval should be used with care. Don’t say you were not warned.\nChapter 4: Following Links 32\n4 Following Links\nWhen retrieving recursively, one does not wish to retrieve loads of unnecessary data. Most of\nthe time the users bear in mind exactly what they want to download, and want Wget to follow\nonly specific links.\nFor example, if you wish to download the music archive from ‘fly.srk.fer.hr’, you will not\nwant to download all the home pages that happen to be referenced by an obscure part of the\narchive.\nWget possesses several mechanisms that allows you to fine-tune which links it will follow.\n4.1 Spanning Hosts\nWget’s recursive retrieval normally refuses to visit hosts different than the one you specified\non the command line. This is a reasonable default; without it, every retrieval would have the\npotential to turn your Wget into a small version of google.\nHowever, visiting different hosts, or host spanning, is sometimes a useful option. Maybe the\nimages are served from a different server. Maybe you’re mirroring a site that consists of pages\ninterlinked between three servers. Maybe the server has two equivalent names, and the html\npages refer to both interchangeably.\nSpan to any host—‘-H’\nThe ‘-H’ option turns on host spanning, thus allowing Wget’s recursive run to visit\nany host referenced by a link. Unless sufficient recursion-limiting criteria are applied\ndepth, these foreign hosts will typically link to yet more hosts, and so on until Wget\nends up sucking up much more data than you have intended.\nLimit spanning to certain domains—‘-D’\nThe ‘-D’ option allows you to specify the domains that will be followed, thus limiting\nthe recursion only to the hosts that belong to these domains. Obviously, this makes\nsense only in conjunction with ‘-H’. A typical example would be downloading the\ncontents of ‘www.server.com’, but allowing downloads from ‘images.server.com’,\netc.:\nwget -rH -Dserver.com http://www.server.com/\nYou can specify more than one address by separating them with a comma, e.g.\n‘-Ddomain1.com,domain2.com’.\nKeep download off certain domains—‘--exclude-domains’\nIf there are domains you want to exclude specifically, you can do it with\n‘--exclude-domains’, which accepts the same type of arguments of ‘-D’, but will\nexclude all the listed domains. For example, if you want to download all the hosts\nfrom ‘foo.edu’ domain, with the exception of ‘sunsite.foo.edu’, you can do it\nlike this:\nwget -rH -Dfoo.edu --exclude-domains sunsite.foo.edu \\\nhttp://www.foo.edu/\n4.2 Types of Files\nWhen downloading material from the web, you will often want to restrict the retrieval to only\ncertain file types. For example, if you are interested in downloading gifs, you will not be\noverjoyed to get loads of PostScript documents, and vice versa.\nWget offers two options to deal with this problem. Each option description lists a short\nname, a long name, and the equivalent command in ‘.wgetrc’.\nChapter 4: Following Links 33\n‘-A acclist’\n‘--accept acclist’\n‘accept = acclist’\n‘--accept-regex urlregex’\n‘accept-regex = urlregex’\nThe argument to ‘--accept’ option is a list of file suffixes or patterns that Wget\nwill download during recursive retrieval. A suffix is the ending part of a file, and\nconsists of “normal” letters, e.g. ‘gif’ or ‘.jpg’. A matching pattern contains\nshell-like wildcards, e.g. ‘books*’ or ‘zelazny*196[0-9]*’.\nSo, specifying ‘wget -A gif,jpg’ will make Wget download only the files end-\ning with ‘gif’ or ‘jpg’, i.e. gifs and jpegs. On the other hand, ‘wget -A\n\"zelazny*196[0-9]*\"’ will download only files beginning with ‘zelazny’ and con-\ntaining numbers from 1960 to 1969 anywhere within. Look up the manual of your\nshell for a description of how pattern matching works.\nOf course, any number of suffixes and patterns can be combined into a comma-\nseparated list, and given as an argument to ‘-A’.\nThe argument to ‘--accept-regex’ option is a regular expression which is matched\nagainst the complete URL.\n‘-R rejlist’\n‘--reject rejlist’\n‘reject = rejlist’\n‘--reject-regex urlregex’\n‘reject-regex = urlregex’\nThe ‘--reject’ option works the same way as ‘--accept’, only its logic is the re-\nverse; Wget will download all files except the ones matching the suffixes (or patterns)\nin the list.\nSo, if you want to download a whole page except for the cumbersome mpegs and\n.au files, you can use ‘wget -R mpg,mpeg,au’. Analogously, to download all files\nexcept the ones beginning with ‘bjork’, use ‘wget -R \"bjork*\"’. The quotes are to\nprevent expansion by the shell.\nThe argument to ‘--accept-regex’ option is a regular expression which is matched against\nthe complete URL.\nThe ‘-A’ and ‘-R’ options may be combined to achieve even better fine-tuning of which files to\nretrieve. E.g. ‘wget -A \"*zelazny*\" -R .ps’ will download all the files having ‘zelazny’ as a\npart of their name, but not the PostScript files.\nNote that these two options do not affect the downloading of html files (as determined by\na ‘.htm’ or ‘.html’ filename prefix). This behavior may not be desirable for all users, and may\nbe changed for future versions of Wget.\nNote, too, that query strings (strings at the end of a URL beginning with a question mark\n(‘?’) are not included as part of the filename for accept/reject rules, even though these will\nactually contribute to the name chosen for the local file. It is expected that a future version of\nWget will provide an option to allow matching against query strings.\nFinally, it’s worth noting that the accept/reject lists are matched twice against downloaded\nfiles: once against the URL’s filename portion, to determine if the file should be downloaded\nin the first place; then, after it has been accepted and successfully downloaded, the local file’s\nname is also checked against the accept/reject lists to see if it should be removed. The rationale\nwas that, since ‘.htm’ and ‘.html’ files are always downloaded regardless of accept/reject rules,\nthey should be removed after being downloaded and scanned for links, if they did match the\naccept/reject lists. However, this can lead to unexpected results, since the local filenames can\nChapter 4: Following Links 34\ndiffer from the original URL filenames in the following ways, all of which can change whether\nan accept/reject rule matches:\n• If the local file already exists and ‘--no-directories’ was specified, a numeric suffix will\nbe appended to the original name.\n• If ‘--adjust-extension’ was specified, the local filename might have ‘.html’ appended\nto it. If Wget is invoked with ‘-E -A.php’, a filename such as ‘index.php’ will match be\naccepted, but upon download will be named ‘index.php.html’, which no longer matches,\nand so thefile will be deleted.\n• Query strings do not contribute to URL matching, but are included in local filenames, and\nso do contribute to filename matching.\nThis behavior, too, is considered less-than-desirable, and may change in a future version of\nWget.\n4.3 Directory-Based Limits\nRegardless of other link-following facilities, it is often useful to place the restriction of what files\nto retrieve based on the directories those files are placed in. There can be many reasons for\nthis—the home pages may be organized in a reasonable directory structure; or some directories\nmay contain useless information, e.g. ‘/cgi-bin’ or ‘/dev’ directories.\nWget offers three different options to deal with this requirement. Each option description\nlists a short name, a long name, and the equivalent command in ‘.wgetrc’.\n‘-I list’\n‘--include list’\n‘include_directories = list’\n‘-I’ option accepts a comma-separated list of directories included in the retrieval.\nAny other directories will simply be ignored. The directories are absolute paths.\nSo, if you wish to download from ‘http://host/people/bozo/’ following only links\nto bozo’s colleagues in the ‘/people’ directory and the bogus scripts in ‘/cgi-bin’,\nyou can specify:\nwget -I /people,/cgi-bin http://host/people/bozo/\n‘-X list’\n‘--exclude list’\n‘exclude_directories = list’\n‘-X’ option is exactly the reverse of ‘-I’—this is a list of directories excluded from\nthe download. E.g. if you do not want Wget to download things from ‘/cgi-bin’\ndirectory, specify ‘-X /cgi-bin’ on the command line.\nThe same as with ‘-A’/‘-R’, these two options can be combined to get a better fine-\ntuning of downloading subdirectories. E.g. if you want to load all the files from\n‘/pub’ hierarchy except for ‘/pub/worthless’, specify ‘-I/pub -X/pub/worthless’.\n‘-np’\n‘--no-parent’\n‘no_parent = on’\nThe simplest, and often very useful way of limiting directories is disallowing retrieval\nof the links that refer to the hierarchy above than the beginning directory, i.e.\ndisallowing ascent to the parent directory/directories.\nThe ‘--no-parent’ option (short ‘-np’) is useful in this case. Using it guarantees\nthat you will never leave the existing hierarchy. Supposing you issue Wget with:\nwget -r --no-parent http://somehost/~luzer/my-archive/\nChapter 4: Following Links 35\nYou may rest assured that none of the references to ‘/~his-girls-homepage/’\nor ‘/~luzer/all-my-mpegs/’ will be followed. Only the archive you are\ninterested in will be downloaded. Essentially, ‘--no-parent’ is similar to\n‘-I/~luzer/my-archive’, only it handles redirections in a more intelligent fashion.\nNote that, for HTTP (and HTTPS), the trailing slash is very important to\n‘--no-parent’. HTTP has no concept of a “directory”—Wget relies on you to\nindicate what’s a directory and what isn’t. In ‘http://foo/bar/’, Wget will con-\nsider ‘bar’ to be a directory, while in ‘http://foo/bar’ (no trailing slash), ‘bar’\nwill be considered a filename (so ‘--no-parent’ would be meaningless, as its parent\nis ‘/’).\n4.4 Relative Links\nWhen ‘-L’ is turned on, only the relative links are ever followed. Relative links are here defined\nthose that do not refer to the web server root. For example, these links are relative:\n<a href=\"foo.gif\">\n<a href=\"foo/bar.gif\">\n<a href=\"../foo/bar.gif\">\nThese links are not relative:\n<a href=\"/foo.gif\">\n<a href=\"/foo/bar.gif\">\n<a href=\"http://www.server.com/foo/bar.gif\">\nUsing this option guarantees that recursive retrieval will not span hosts, even without ‘-H’.\nIn simple cases it also allows downloads to “just work” without having to convert links.\nThis option is probably not very useful and might be removed in a future release.\n4.5 Following FTP Links\nThe rules for ftp are somewhat specific, as it is necessary for them to be. ftp links in html\ndocuments are often included for purposes of reference, and it is often inconvenient to download\nthem by default.\nTo have ftp links followed from html documents, you need to specify the ‘--follow-ftp’\noption. Having done that, ftp links will span hosts regardless of ‘-H’ setting. This is logical, as\nftp links rarely point to the same host where the http server resides. For similar reasons, the\n‘-L’ options has no effect on such downloads. On the other hand, domain acceptance (‘-D’) and\nsuffix rules (‘-A’ and ‘-R’) apply normally.\nAlso note that followed links to ftp directories will not be retrieved recursively further.\nChapter 5: Time-Stamping 36\n5 Time-Stamping\nOne of the most important aspects of mirroring information from the Internet is updating your\narchives.\nDownloading the whole archive again and again, just to replace a few changed files is expen-\nsive, both in terms of wasted bandwidth and money, and the time to do the update. This is\nwhy all the mirroring tools offer the option of incremental updating.\nSuch an updating mechanism means that the remote server is scanned in search of new files.\nOnly those new files will be downloaded in the place of the old ones.\nA file is considered new if one of these two conditions are met:\n1. A file of that name does not already exist locally.\n2. A file of that name does exist, but the remote file was modified more recently than the local\nfile.\nTo implement this, the program needs to be aware of the time of last modification of both\nlocal and remote files. We call this information the time-stamp of a file.\nThe time-stamping in GNU Wget is turned on using ‘--timestamping’ (‘-N’) option, or\nthrough timestamping = on directive in ‘.wgetrc’. With this option, for each file it intends\nto download, Wget will check whether a local file of the same name exists. If it does, and the\nremote file is not newer, Wget will not download it.\nIf the local file does not exist, or the sizes of the files do not match, Wget will download the\nremote file no matter what the time-stamps say.\n5.1 Time-Stamping Usage\nThe usage of time-stamping is simple. Say you would like to download a file so that it keeps its\ndate of modification.\nwget -S http://www.gnu.ai.mit.edu/\nA simple ls -l shows that the time stamp on the local file equals the state of the Last-\nModified header, as returned by the server. As you can see, the time-stamping info is preserved\nlocally, even without ‘-N’ (at least for http).\nSeveral days later, you would like Wget to check if the remote file has changed, and download\nit if it has.\nwget -N http://www.gnu.ai.mit.edu/\nWget will ask the server for the last-modified date. If the local file has the same timestamp\nas the server, or a newer one, the remote file will not be re-fetched. However, if the remote file\nis more recent, Wget will proceed to fetch it.\nThe same goes for ftp. For example:\nwget \"ftp://ftp.ifi.uio.no/pub/emacs/gnus/*\"\n(The quotes around that URL are to prevent the shell from trying to interpret the ‘*’.)\nAfter download, a local directory listing will show that the timestamps match those on the\nremote server. Reissuing the command with ‘-N’ will make Wget re-fetch only the files that\nhave been modified since the last download.\nIf you wished to mirror the GNU archive every week, you would use a command like the\nfollowing, weekly:\nwget --timestamping -r ftp://ftp.gnu.org/pub/gnu/\nNote that time-stamping will only work for files for which the server gives a timestamp.\nFor http, this depends on getting a Last-Modified header. For ftp, this depends on getting\na directory listing with dates in a format that Wget can parse (see hundefinedi [FTP Time-\nStamping Internals], page hundefinedi).\nChapter 5: Time-Stamping 37\n5.2 HTTP Time-Stamping Internals\nTime-stamping in http is implemented by checking of the Last-Modified header. If you wish\nto retrieve the file ‘foo.html’ through http, Wget will check whether ‘foo.html’ exists locally.\nIf it doesn’t, ‘foo.html’ will be retrieved unconditionally.\nIf the file does exist locally, Wget will first check its local time-stamp (similar to the way ls\n-l checks it), and then send a HEAD request to the remote server, demanding the information\non the remote file.\nThe Last-Modified header is examined to find which file was modified more recently (which\nmakes it “newer”). If the remote file is newer, it will be downloaded; if it is older, Wget will\ngive up. 1\nWhen ‘--backup-converted’ (‘-K’) is specified in conjunction with ‘-N’, server file ‘X’ is\ncompared to local file ‘X.orig’, if extant, rather than being compared to local file ‘X’, which\nwill always differ if it’s been converted by ‘--convert-links’ (‘-k’).\nArguably, http time-stamping should be implemented using the If-Modified-Since re-\nquest.\n5.3 FTP Time-Stamping Internals\nIn theory, ftp time-stamping works much the same as http, only ftp has no headers—time-\nstamps must be ferreted out of directory listings.\nIf an ftp download is recursive or uses globbing, Wget will use the ftp LIST command to\nget a file listing for the directory containing the desired file(s). It will try to analyze the listing,\ntreating it like Unix ls -l output, extracting the time-stamps. The rest is exactly the same as\nfor http. Note that when retrieving individual files from an ftp server without using globbing\nor recursion, listing files will not be downloaded (and thus files will not be time-stamped) unless\n‘-N’ is specified.\nAssumption that every directory listing is a Unix-style listing may sound extremely con-\nstraining, but in practice it is not, as many non-Unix ftp servers use the Unixoid listing format\nbecause most (all?) of the clients understand it. Bear in mind that rfc959 defines no standard\nway to get a file list, let alone the time-stamps. We can only hope that a future standard will\ndefine this.\nAnother non-standard solution includes the use of MDTM command that is supported by some\nftp servers (including the popular wu-ftpd), which returns the exact time of the specified file.\nWget may support this command in the future.\n1\nAs an additional check, Wget will look at the Content-Length header, and compare the sizes; if they are not\nthe same, the remote file will be downloaded no matter what the time-stamp says.\nChapter 6: Startup File 38\n6 Startup File\nOnce you know how to change default settings of Wget through command line arguments, you\nmay wish to make some of those settings permanent. You can do that in a convenient way by\ncreating the Wget startup file—‘.wgetrc’.\nBesides ‘.wgetrc’ is the “main” initialization file, it is convenient to have a special facility\nfor storing passwords. Thus Wget reads and interprets the contents of ‘$HOME/.netrc’, if it\nfinds it. You can find ‘.netrc’ format in your system manuals.\nWget reads ‘.wgetrc’ upon startup, recognizing a limited set of commands.\n6.1 Wgetrc Location\nWhen initializing, Wget will look for a global startup file, ‘/usr/local/etc/wgetrc’ by default\n(or some prefix other than ‘/usr/local’, if Wget was not installed there) and read commands\nfrom there, if it exists.\nThen it will look for the user’s file. If the environmental variable WGETRC is set, Wget will\ntry to load that file. Failing that, no further attempts will be made.\nIf WGETRC is not set, Wget will try to load ‘$HOME/.wgetrc’.\nThe fact that user’s settings are loaded after the system-wide ones means that in case of col-\nlision user’s wgetrc overrides the system-wide wgetrc (in ‘/usr/local/etc/wgetrc’ by default).\nFascist admins, away!\n6.2 Wgetrc Syntax\nThe syntax of a wgetrc command is simple:\nvariable = value\nThe variable will also be called command. Valid values are different for different commands.\nThe commands are case-, underscore- and minus-insensitive. Thus ‘DIr__PrefiX’,\n‘DIr-PrefiX’ and ‘dirprefix’ are the same. Empty lines, lines beginning with ‘#’ and lines\ncontaining white-space only are discarded.\nCommands that expect a comma-separated list will clear the list on an empty command. So,\nif you wish to reset the rejection list specified in global ‘wgetrc’, you can do it with:\nreject =\n6.3 Wgetrc Commands\nThe complete set of commands is listed below. Legal values are listed after the ‘=’. Simple\nBoolean values can be set or unset using ‘on’ and ‘off’ or ‘1’ and ‘0’.\nSome commands take pseudo-arbitrary values. address values can be hostnames or dotted-\nquad IP addresses. n can be any positive integer, or ‘inf’ for infinity, where appropriate. string\nvalues can be any non-empty string.\nMost of these commands have direct command-line equivalents. Also, any wgetrc command\ncan be specified on the command line using the ‘--execute’ switch (see hundefinedi [Basic\nStartup Options], page hundefinedi.)\naccept/reject = string\nSame as ‘-A’/‘-R’ (see hundefinedi [Types of Files], page hundefinedi).\nadd hostdir = on/off\nEnable/disable host-prefixed file names. ‘-nH’ disables it.\nChapter 6: Startup File 39\nask password = on/off\nPrompt for a password for each connection established. Cannot be specified when\n‘--password’ is being used, because they are mutually exclusive. Equivalent to\n‘--ask-password’.\nauth no challenge = on/off\nIf this option is given, Wget will send Basic HTTP authentication information\n(plaintext username and password) for all requests. See ‘--auth-no-challenge’.\nbackground = on/off\nEnable/disable going to background—the same as ‘-b’ (which enables it).\nbackup converted = on/off\nEnable/disable saving pre-converted files with the suffix ‘.orig’—the same as ‘-K’\n(which enables it).\nbackups = number\nUse up to number backups for a file. Backups are rotated by adding an incremental\ncounter that starts at ‘1’. The default is ‘0’.\nbase = string\nConsider relative urls in input files (specified via the ‘input’ command or the\n‘--input-file’/‘-i’ option, together with ‘force_html’ or ‘--force-html’) as be-\ning relative to string—the same as ‘--base=string’.\nbind address = address\nBind to address, like the ‘--bind-address=address’.\nca certificate = file\nSet the certificate authority bundle file to file. The same as\n‘--ca-certificate=file’.\nca directory = directory\nSet the directory used for certificate authorities. The same as\n‘--ca-directory=directory’.\ncache = on/off\nWhen set to off, disallow server-caching. See the ‘--no-cache’ option.\ncertificate = file\nSet the client certificate file name to file. The same as ‘--certificate=file’.\ncertificate type = string\nSpecify the type of the client certificate, legal values being ‘PEM’ (the default) and\n‘DER’ (aka ASN1). The same as ‘--certificate-type=string’.\ncheck certificate = on/off\nIf this is set to off, the server certificate is not checked against the specified client\nauthorities. The default is “on”. The same as ‘--check-certificate’.\nconnect timeout = n\nSet the connect timeout—the same as ‘--connect-timeout’.\ncontent disposition = on/off\nTurn on recognition of the (non-standard) ‘Content-Disposition’ HTTP header—\nif set to ‘on’, the same as ‘--content-disposition’.\ntrust server names = on/off\nIf set to on, use the last component of a redirection URL for the local file name.\nChapter 6: Startup File 40\ncontinue = on/off\nIf set to on, force continuation of preexistent partially retrieved files. See ‘-c’ before\nsetting it.\nconvert links = on/off\nConvert non-relative links locally. The same as ‘-k’.\ncookies = on/off\nWhen set to off, disallow cookies. See the ‘--cookies’ option.\ncut dirs = n\nIgnore n remote directory components. Equivalent to ‘--cut-dirs=n’.\ndebug = on/off\nDebug mode, same as ‘-d’.\ndefault page = string\nDefault page name—the same as ‘--default-page=string’.\ndelete after = on/off\nDelete after download—the same as ‘--delete-after’.\ndir prefix = string\nTop of directory tree—the same as ‘-P string’.\ndirstruct = on/off\nTurning dirstruct on or off—the same as ‘-x’ or ‘-nd’, respectively.\ndns cache = on/off\nTurn DNS caching on/off. Since DNS caching is on by default, this option is nor-\nmally used to turn it off and is equivalent to ‘--no-dns-cache’.\ndns timeout = n\nSet the DNS timeout—the same as ‘--dns-timeout’.\ndomains = string\nSame as ‘-D’ (see hundefinedi [Spanning Hosts], page hundefinedi).\ndot bytes = n\nSpecify the number of bytes “contained” in a dot, as seen throughout the retrieval\n(1024 by default). You can postfix the value with ‘k’ or ‘m’, representing kilobytes\nand megabytes, respectively. With dot settings you can tailor the dot retrieval to\nsuit your needs, or you can use the predefined styles (see hundefinedi [Download\nOptions], page hundefinedi).\ndot spacing = n\nSpecify the number of dots in a single cluster (10 by default).\ndots in line = n\nSpecify the number of dots that will be printed in each line throughout the retrieval\n(50 by default).\negd file = file\nUse string as the EGD socket file name. The same as ‘--egd-file=file’.\nexclude directories = string\nSpecify a comma-separated list of directories you wish to exclude from download—\nthe same as ‘-X string’ (see hundefinedi [Directory-Based Limits], page hunde-\nfinedi).\nexclude domains = string\nSame as ‘--exclude-domains=string’ (see hundefinedi [Spanning Hosts], page hun-\ndefinedi).\nChapter 6: Startup File 41\nfollow ftp = on/off\nFollow ftp links from html documents—the same as ‘--follow-ftp’.\nfollow tags = string\nOnly follow certain html tags when doing a recursive retrieval, just like\n‘--follow-tags=string’.\nforce html = on/off\nIf set to on, force the input filename to be regarded as an html document—the\nsame as ‘-F’.\nftp password = string\nSet your ftp password to string. Without this setting, the password defaults to\n‘-wget@’, which is a useful default for anonymous ftp access.\nThis command used to be named passwd prior to Wget 1.10.\nftp proxy = string\nUse string as ftp proxy, instead of the one specified in environment.\nftp user = string\nSet ftp user to string.\nThis command used to be named login prior to Wget 1.10.\nglob = on/off\nTurn globbing on/off—the same as ‘--glob’ and ‘--no-glob’.\nheader = string\nDefine a header for HTTP downloads, like using ‘--header=string’.\nadjust extension = on/off\nAdd a ‘.html’ extension to ‘text/html’ or ‘application/xhtml+xml’ files that lack\none, or a ‘.css’ extension to ‘text/css’ files that lack one, like ‘-E’. Previously\nnamed ‘html_extension’ (still acceptable, but deprecated).\nhttp keep alive = on/off\nTurn the keep-alive feature on or off (defaults to on). Turning it off is equivalent to\n‘--no-http-keep-alive’.\nhttp password = string\nSet http password, equivalent to ‘--http-password=string’.\nhttp proxy = string\nUse string as http proxy, instead of the one specified in environment.\nhttp user = string\nSet http user to string, equivalent to ‘--http-user=string’.\nhttps only = on/off\nWhen in recursive mode, only HTTPS links are followed (defaults to off).\nhttps proxy = string\nUse string as https proxy, instead of the one specified in environment.\nignore case = on/off\nWhen set to on, match files and directories case insensitively; the same as\n‘--ignore-case’.\nignore length = on/off\nWhen set to on, ignore Content-Length header; the same as ‘--ignore-length’.\nChapter 6: Startup File 42\nignore tags = string\nIgnore certain html tags when doing a recursive retrieval, like\n‘--ignore-tags=string’.\ninclude directories = string\nSpecify a comma-separated list of directories you wish to follow when downloading—\nthe same as ‘-I string’.\niri = on/off\nWhen set to on, enable internationalized URI (IRI) support; the same as ‘--iri’.\ninet4 only = on/off\nForce connecting to IPv4 addresses, off by default. You can put this in the global\ninit file to disable Wget’s attempts to resolve and connect to IPv6 hosts. Available\nonly if Wget was compiled with IPv6 support. The same as ‘--inet4-only’ or ‘-4’.\ninet6 only = on/off\nForce connecting to IPv6 addresses, off by default. Available only if Wget was\ncompiled with IPv6 support. The same as ‘--inet6-only’ or ‘-6’.\ninput = file\nRead the urls from string, like ‘-i file’.\nkeep session cookies = on/off\nWhen specified, causes ‘save_cookies = on’ to also save session cookies. See\n‘--keep-session-cookies’.\nlimit rate = rate\nLimit the download speed to no more than rate bytes per second. The same as\n‘--limit-rate=rate’.\nload cookies = file\nLoad cookies from file. See ‘--load-cookies file’.\nlocal encoding = encoding\nForce Wget to use encoding as the default system encoding. See\n‘--local-encoding’.\nlogfile = file\nSet logfile to file, the same as ‘-o file’.\nmax redirect = number\nSpecifies the maximum number of redirections to follow for a resource. See\n‘--max-redirect=number’.\nmirror = on/off\nTurn mirroring on/off. The same as ‘-m’.\nnetrc = on/off\nTurn reading netrc on or off.\nno clobber = on/off\nSame as ‘-nc’.\nno parent = on/off\nDisallow retrieving outside the directory hierarchy, like ‘--no-parent’ (see hunde-\nfinedi [Directory-Based Limits], page hundefinedi).\nno proxy = string\nUse string as the comma-separated list of domains to avoid in proxy loading, instead\nof the one specified in environment.\nChapter 6: Startup File 43\noutput document = file\nSet the output filename—the same as ‘-O file’.\npage requisites = on/off\nDownload all ancillary documents necessary for a single html page to display\nproperly—the same as ‘-p’.\npassive ftp = on/off\nChange setting of passive ftp, equivalent to the ‘--passive-ftp’ option.\npassword = string\nSpecify password string for both ftp and http file retrieval. This command can be\noverridden using the ‘ftp_password’ and ‘http_password’ command for ftp and\nhttp respectively.\npost data = string\nUse POST as the method for all HTTP requests and send string in the request\nbody. The same as ‘--post-data=string’.\npost file = file\nUse POST as the method for all HTTP requests and send the contents of file in the\nrequest body. The same as ‘--post-file=file’.\nprefer family = none/IPv4/IPv6\nWhen given a choice of several addresses, connect to the addresses with specified\naddress family first. The address order returned by DNS is used without change by\ndefault. The same as ‘--prefer-family’, which see for a detailed discussion of why\nthis is useful.\nprivate key = file\nSet the private key file to file. The same as ‘--private-key=file’.\nprivate key type = string\nSpecify the type of the private key, legal values being ‘PEM’ (the default) and ‘DER’\n(aka ASN1). The same as ‘--private-type=string’.\nprogress = string\nSet the type of the progress indicator. Legal types are ‘dot’ and ‘bar’. Equivalent\nto ‘--progress=string’.\nprotocol directories = on/off\nWhen set, use the protocol name as a directory component of local file names. The\nsame as ‘--protocol-directories’.\nproxy password = string\nSet proxy authentication password to string, like ‘--proxy-password=string’.\nproxy user = string\nSet proxy authentication user name to string, like ‘--proxy-user=string’.\nquiet = on/off\nQuiet mode—the same as ‘-q’.\nquota = quota\nSpecify the download quota, which is useful to put in the global ‘wgetrc’. When\ndownload quota is specified, Wget will stop retrieving after the download sum has\nbecome greater than quota. The quota can be specified in bytes (default), kbytes\n‘k’ appended) or mbytes (‘m’ appended). Thus ‘quota = 5m’ will set the quota to 5\nmegabytes. Note that the user’s startup file overrides system settings.\nChapter 6: Startup File 44\nrandom file = file\nUse file as a source of randomness on systems lacking ‘/dev/random’.\nrandom wait = on/off\nTurn random between-request wait times on or off. The same as ‘--random-wait’.\nread timeout = n\nSet the read (and write) timeout—the same as ‘--read-timeout=n’.\nreclevel = n\nRecursion level (depth)—the same as ‘-l n’.\nrecursive = on/off\nRecursive on/off—the same as ‘-r’.\nreferer = string\nSet HTTP ‘Referer:’ header just like ‘--referer=string’. (Note that it was the\nfolks who wrote the http spec who got the spelling of “referrer” wrong.)\nrelative only = on/off\nFollow only relative links—the same as ‘-L’ (see hundefinedi [Relative Links],\npage hundefinedi).\nremote encoding = encoding\nForce Wget to use encoding as the default remote server encoding. See\n‘--remote-encoding’.\nremove listing = on/off\nIf set to on, remove ftp listings downloaded by Wget. Setting it to off is the same\nas ‘--no-remove-listing’.\nrestrict file names = unix/windows\nRestrict the file names generated by Wget from URLs. See\n‘--restrict-file-names’ for a more detailed description.\nretr symlinks = on/off\nWhen set to on, retrieve symbolic links as if they were plain files; the same as\n‘--retr-symlinks’.\nretry connrefused = on/off\nWhen set to on, consider “connection refused” a transient error—the same as\n‘--retry-connrefused’.\nrobots = on/off\nSpecify whether the norobots convention is respected by Wget, “on” by default.\nThis switch controls both the ‘/robots.txt’ and the ‘nofollow’ aspect of the spec.\nSee hundefinedi [Robot Exclusion], page hundefinedi, for more details about this.\nBe sure you know what you are doing before turning this off.\nsave cookies = file\nSave cookies to file. The same as ‘--save-cookies file’.\nsave headers = on/off\nSame as ‘--save-headers’.\nsecure protocol = string\nChoose the secure protocol to be used. Legal values are ‘auto’ (the default), ‘SSLv2’,\n‘SSLv3’, and ‘TLSv1’. The same as ‘--secure-protocol=string’.\nserver response = on/off\nChoose whether or not to print the http and ftp server responses—the same as\n‘-S’.\nChapter 6: Startup File 45\nshow all dns entries = on/off\nWhen a DNS name is resolved, show all the IP addresses, not just the first three.\nspan hosts = on/off\nSame as ‘-H’.\nspider = on/off\nSame as ‘--spider’.\nstrict comments = on/off\nSame as ‘--strict-comments’.\ntimeout = n\nSet all applicable timeout values to n, the same as ‘-T n’.\ntimestamping = on/off\nTurn timestamping on/off. The same as ‘-N’ (see hundefinedi [Time-Stamping],\npage hundefinedi).\nuse server timestamps = on/off\nIf set to ‘off’, Wget won’t set the local file’s timestamp by the one on the server\n(same as ‘--no-use-server-timestamps’).\ntries = n Set number of retries per url—the same as ‘-t n’.\nuse proxy = on/off\nWhen set to off, don’t use proxy even when proxy-related environment variables are\nset. In that case it is the same as using ‘--no-proxy’.\nuser = string\nSpecify username string for both ftp and http file retrieval. This command can\nbe overridden using the ‘ftp_user’ and ‘http_user’ command for ftp and http\nrespectively.\nuser agent = string\nUser agent identification sent to the HTTP Server—the same as\n‘--user-agent=string’.\nverbose = on/off\nTurn verbose on/off—the same as ‘-v’/‘-nv’.\nwait = n Wait n seconds between retrievals—the same as ‘-w n’.\nwait retry = n\nWait up to n seconds between retries of failed retrievals only—the same as\n‘--waitretry=n’. Note that this is turned on by default in the global ‘wgetrc’.\n6.4 Sample Wgetrc\nThis is the sample initialization file, as given in the distribution. It is divided in two section—\none for global usage (suitable for global startup file), and one for local usage (suitable for\n‘$HOME/.wgetrc’). Be careful about the things you change.\nNote that almost all the lines are commented out. For a command to have any effect, you\nmust remove the ‘#’ character at the beginning of its line.\n###\n### Sample Wget initialization file .wgetrc\n###\n## You can use this file to change the default behaviour of wget or to\nChapter 6: Startup File 46\n## avoid having to type many many command-line options. This file does\n## not contain a comprehensive list of commands -- look at the manual\n## to find out what you can put into this file. You can find this here:\n## $ info wget.info ’Startup File’\n## Or online here:\n## https://www.gnu.org/software/wget/manual/wget.html#Startup-File\n##\n## Wget initialization file can reside in /usr/local/etc/wgetrc\n## (global, for all users) or $HOME/.wgetrc (for a single user).\n##\n## To use the settings in this file, you will have to uncomment them,\n## as well as change them, in most cases, as the values on the\n## commented-out lines are the default values (e.g. \"off\").\n##\n## Command are case-, underscore- and minus-insensitive.\n## For example ftp_proxy, ftp-proxy and ftpproxy are the same.\n##\n## Global settings (useful for setting up in /usr/local/etc/wgetrc).\n## Think well before you change them, since they may reduce wget’s\n## functionality, and make it behave contrary to the documentation:\n##\n# You can set retrieve quota for beginners by specifying a value\n# optionally followed by ’K’ (kilobytes) or ’M’ (megabytes). The\n# default quota is unlimited.\n#quota = inf\n# You can lower (or raise) the default number of retries when\n# downloading a file (default is 20).\n#tries = 20\n# Lowering the maximum depth of the recursive retrieval is handy to\n# prevent newbies from going too \"deep\" when they unwittingly start\n# the recursive retrieval. The default is 5.\n#reclevel = 5\n# By default Wget uses \"passive FTP\" transfer where the client\n# initiates the data connection to the server rather than the other\n# way around. That is required on systems behind NAT where the client\n# computer cannot be easily reached from the Internet. However, some\n# firewalls software explicitly supports active FTP and in fact has\n# problems supporting passive transfer. If you are in such\n# environment, use \"passive_ftp = off\" to revert to active FTP.\n#passive_ftp = off\n# The \"wait\" command below makes Wget wait between every connection.\n# If, instead, you want Wget to wait only between retries of failed\n# downloads, set waitretry to maximum number of seconds to wait (Wget\n# will use \"linear backoff\", waiting 1 second after the first failure\n# on a file, 2 seconds after the second failure, etc. up to this max).\nChapter 6: Startup File 47\n#waitretry = 10\n##\n## Local settings (for a user to set in his $HOME/.wgetrc). It is\n## *highly* undesirable to put these settings in the global file, since\n## they are potentially dangerous to \"normal\" users.\n##\n## Even when setting up your own ~/.wgetrc, you should know what you\n## are doing before doing so.\n##\n# Set this to on to use timestamping by default:\n#timestamping = off\n# It is a good idea to make Wget send your email address in a ‘From:’\n# header with your request (so that server administrators can contact\n# you in case of errors). Wget does *not* send ‘From:’ by default.\n#header = From: Your Name <username@site.domain>\n# You can set up other headers, like Accept-Language. Accept-Language\n# is *not* sent by default.\n#header = Accept-Language: en\n# You can set the default proxies for Wget to use for http, https, and ftp.\n# They will override the value in the environment.\n#https_proxy = http://proxy.yoyodyne.com:18023/\n#http_proxy = http://proxy.yoyodyne.com:18023/\n#ftp_proxy = http://proxy.yoyodyne.com:18023/\n# If you do not want to use proxy at all, set this to off.\n#use_proxy = on\n# You can customize the retrieval outlook. Valid options are default,\n# binary, mega and micro.\n#dot_style = default\n# Setting this to off makes Wget not download /robots.txt. Be sure to\n# know *exactly* what /robots.txt is and how it is used before changing\n# the default!\n#robots = on\n# It can be useful to make Wget wait between connections. Set this to\n# the number of seconds you want Wget to wait.\n#wait = 0\n# You can force creating directory structure, even if a single is being\n# retrieved, by setting this to on.\n#dirstruct = off\n# You can turn on recursive retrieving by default (don’t do this if\n# you are not sure you know what it means) by setting this to on.\nChapter 6: Startup File 48\n#recursive = off\n# To always back up file X as X.orig before converting its links (due\n# to -k / --convert-links / convert_links = on having been specified),\n# set this variable to on:\n#backup_converted = off\n# To have Wget follow FTP links from HTML files by default, set this\n# to on:\n#follow_ftp = off\n# To try ipv6 addresses first:\n#prefer-family = IPv6\n# Set default IRI support state\n#iri = off\n# Force the default system encoding\n#localencoding = UTF-8\n# Force the default remote server encoding\n#remoteencoding = UTF-8\n# Turn on to prevent following non-HTTPS links when in recursive mode\n#httpsonly = off\n# Tune HTTPS security (auto, SSLv2, SSLv3, TLSv1, PFS)\n#secureprotocol = auto\nChapter 7: Examples 49\n7 Examples\nThe examples are divided into three sections loosely based on their complexity.\n7.1 Simple Usage\n• Say you want to download a url. Just type:\nwget http://fly.srk.fer.hr/\n• But what will happen if the connection is slow, and the file is lengthy? The connection will\nprobably fail before the whole file is retrieved, more than once. In this case, Wget will try\ngetting the file until it either gets the whole of it, or exceeds the default number of retries\n(this being 20). It is easy to change the number of tries to 45, to insure that the whole file\nwill arrive safely:\nwget --tries=45 http://fly.srk.fer.hr/jpg/flyweb.jpg\n• Now let’s leave Wget to work in the background, and write its progress to log file ‘log’. It\nis tiring to type ‘--tries’, so we shall use ‘-t’.\nwget -t 45 -o log http://fly.srk.fer.hr/jpg/flyweb.jpg &\nThe ampersand at the end of the line makes sure that Wget works in the background. To\nunlimit the number of retries, use ‘-t inf’.\n• The usage of ftp is as simple. Wget will take care of login and password.\nwget ftp://gnjilux.srk.fer.hr/welcome.msg\n• If you specify a directory, Wget will retrieve the directory listing, parse it and convert it to\nhtml. Try:\nwget ftp://ftp.gnu.org/pub/gnu/\nlinks index.html\n7.2 Advanced Usage\n• You have a file that contains the URLs you want to download? Use the ‘-i’ switch:\nwget -i file\nIf you specify ‘-’ as file name, the urls will be read from standard input.\n• Create a five levels deep mirror image of the GNU web site, with the same directory structure\nthe original has, with only one try per document, saving the log of the activities to ‘gnulog’:\nwget -r http://www.gnu.org/ -o gnulog\n• The same as the above, but convert the links in the downloaded files to point to local files,\nso you can view the documents off-line:\nwget --convert-links -r http://www.gnu.org/ -o gnulog\n• Retrieve only one html page, but make sure that all the elements needed for the page to be\ndisplayed, such as inline images and external style sheets, are also downloaded. Also make\nsure the downloaded page references the downloaded links.\nwget -p --convert-links http://www.server.com/dir/page.html\nThe html page will be saved to ‘www.server.com/dir/page.html’, and the images,\nstylesheets, etc., somewhere under ‘www.server.com/’, depending on where they were on\nthe remote server.\n• The same as the above, but without the ‘www.server.com/’ directory. In fact, I don’t\nwant to have all those random server directories anyway—just save all those files under a\n‘download/’ subdirectory of the current directory.\nwget -p --convert-links -nH -nd -Pdownload \\\nhttp://www.server.com/dir/page.html\nChapter 7: Examples 50\n• Retrieve the index.html of ‘www.lycos.com’, showing the original server headers:\nwget -S http://www.lycos.com/\n• Save the server headers with the file, perhaps for post-processing.\nwget --save-headers http://www.lycos.com/\nmore index.html\n• Retrieve the first two levels of ‘wuarchive.wustl.edu’, saving them to ‘/tmp’.\nwget -r -l2 -P/tmp ftp://wuarchive.wustl.edu/\n• You want to download all the gifs from a directory on an http server. You tried ‘wget\nhttp://www.server.com/dir/*.gif’, but that didn’t work because http retrieval does\nnot support globbing. In that case, use:\nwget -r -l1 --no-parent -A.gif http://www.server.com/dir/\nMore verbose, but the effect is the same. ‘-r -l1’ means to retrieve recursively (see hunde-\nfinedi [Recursive Download], page hundefinedi), with maximum depth of 1. ‘--no-parent’\nmeans that references to the parent directory are ignored (see hundefinedi [Directory-Based\nLimits], page hundefinedi), and ‘-A.gif’ means to download only the gif files. ‘-A \"*.gif\"’\nwould have worked too.\n• Suppose you were in the middle of downloading, when Wget was interrupted. Now you do\nnot want to clobber the files already present. It would be:\nwget -nc -r http://www.gnu.org/\n• If you want to encode your own username and password to http or ftp, use the appropriate\nurl syntax (see hundefinedi [URL Format], page hundefinedi).\nwget ftp://hniksic:mypassword@unix.server.com/.emacs\nNote, however, that this usage is not advisable on multi-user systems because it reveals\nyour password to anyone who looks at the output of ps.\n• You would like the output documents to go to standard output instead of to files?\nwget -O - http://jagor.srce.hr/ http://www.srce.hr/\nYou can also combine the two options and make pipelines to retrieve the documents from\nremote hotlists:\nwget -O - http://cool.list.com/ | wget --force-html -i -\n7.3 Very Advanced Usage\n• If you wish Wget to keep a mirror of a page (or ftp subdirectories), use ‘--mirror’ (‘-m’),\nwhich is the shorthand for ‘-r -l inf -N’. You can put Wget in the crontab file asking it\nto recheck a site each Sunday:\ncrontab\n0 0 * * 0 wget --mirror http://www.gnu.org/ -o /home/me/weeklog\n• In addition to the above, you want the links to be converted for local viewing. But, after\nhaving read this manual, you know that link conversion doesn’t play well with timestamping,\nso you also want Wget to back up the original html files before the conversion. Wget\ninvocation would look like this:\nwget --mirror --convert-links --backup-converted \\\nhttp://www.gnu.org/ -o /home/me/weeklog\n• But you’ve also noticed that local viewing doesn’t work all that well when html files\nare saved under extensions other than ‘.html’, perhaps because they were served as\n‘index.cgi’. So you’d like Wget to rename all the files served with content-type ‘text/html’\nor ‘application/xhtml+xml’ to ‘name.html’.\nChapter 7: Examples 51\nwget --mirror --convert-links --backup-converted \\\n--html-extension -o /home/me/weeklog \\\nhttp://www.gnu.org/\nOr, with less typing:\nwget -m -k -K -E http://www.gnu.org/ -o /home/me/weeklog\nChapter 8: Various 52\n8 Various\nThis chapter contains all the stuff that could not fit anywhere else.\n8.1 Proxies\nProxies are special-purpose http servers designed to transfer data from remote servers to local\nclients. One typical use of proxies is lightening network load for users behind a slow connection.\nThis is achieved by channeling all http and ftp requests through the proxy which caches the\ntransferred data. When a cached resource is requested again, proxy will return the data from\ncache. Another use for proxies is for companies that separate (for security reasons) their internal\nnetworks from the rest of Internet. In order to obtain information from the Web, their users\nconnect and retrieve remote data using an authorized proxy.\nWget supports proxies for both http and ftp retrievals. The standard way to specify proxy\nlocation, which Wget recognizes, is using the following environment variables:\nhttp_proxy\nhttps_proxy\nIf set, the http_proxy and https_proxy variables should contain the urls of the\nproxies for http and https connections respectively.\nftp_proxy\nThis variable should contain the url of the proxy for ftp connections. It is quite\ncommon that http_proxy and ftp_proxy are set to the same url.\nno_proxy This variable should contain a comma-separated list of domain extensions proxy\nshould not be used for. For instance, if the value of no_proxy is ‘.mit.edu’, proxy\nwill not be used to retrieve documents from MIT.\nIn addition to the environment variables, proxy location and settings may be specified from\nwithin Wget itself.\n‘--no-proxy’\n‘proxy = on/off’\nThis option and the corresponding command may be used to suppress the use of\nproxy, even if the appropriate environment variables are set.\n‘http_proxy = URL’\n‘https_proxy = URL’\n‘ftp_proxy = URL’\n‘no_proxy = string’\nThese startup file variables allow you to override the proxy settings specified by the\nenvironment.\nSome proxy servers require authorization to enable you to use them. The authorization\nconsists of username and password, which must be sent by Wget. As with http authorization,\nseveral authentication schemes exist. For proxy authorization only the Basic authentication\nscheme is currently implemented.\nYou may specify your username and password either through the proxy url or through the\ncommand-line options. Assuming that the company’s proxy is located at ‘proxy.company.com’\nat port 8001, a proxy url location containing authorization data might look like this:\nhttp://hniksic:mypassword@proxy.company.com:8001/\nAlternatively, you may use the ‘proxy-user’ and ‘proxy-password’ options, and the equiv-\nalent ‘.wgetrc’ settings proxy_user and proxy_password to set the proxy username and pass-\nword.\nChapter 8: Various 53\n8.2 Distribution\nLike all GNU utilities, the latest version of Wget can be found at the master GNU\narchive site ftp.gnu.org, and its mirrors. For example, Wget 1.17.1 can be found at\nftp://ftp.gnu.org/pub/gnu/wget/wget-1.17.1.tar.gz\n8.3 Web Site\nThe official web site for GNU Wget is at http://www.gnu.org/software/wget/. However,\nmost useful information resides at “The Wget Wgiki”, http://wget.addictivecode.org/.\n8.4 Mailing Lists\nPrimary List\nThe primary mailinglist for discussion, bug-reports, or questions about GNU Wget is at\nbug-wget@gnu.org. To subscribe, send an email to bug-wget-join@gnu.org, or visit\nhttp://lists.gnu.org/mailman/listinfo/bug-wget.\nYou do not need to subscribe to send a message to the list; however, please note that unsub-\nscribed messages are moderated, and may take a while before they hit the list—usually around\na day. If you want your message to show up immediately, please subscribe to the list before\nposting. Archives for the list may be found at http://lists.gnu.org/pipermail/bug-wget/.\nAn NNTP/Usenettish gateway is also available via Gmane. You can see the Gmane archives\nat http://news.gmane.org/gmane.comp.web.wget.general. Note that the Gmane archives\nconveniently include messages from both the current list, and the previous one. Messages also\nshow up in the Gmane archives sooner than they do at lists.gnu.org.\nBug Notices List\nAdditionally, there is the wget-notify@addictivecode.org mailing list. This is a\nnon-discussion list that receives bug report notifications from the bug-tracker. To\nsubscribe to this list, send an email to wget-notify-join@addictivecode.org, or visit\nhttp://addictivecode.org/mailman/listinfo/wget-notify.\nObsolete Lists\nPreviously, the mailing list wget@sunsite.dk was used as the main discussion list, and another\nlist, wget-patches@sunsite.dk was used for submitting and discussing patches to GNU Wget.\nMessages from wget@sunsite.dk are archived at\nhttp://www.mail-archive.com/wget%40sunsite.dk/ and at\nhttp://news.gmane.org/gmane.comp.web.wget.general (which also continues to archive\nthe current list, bug-wget@gnu.org).\nMessages from wget-patches@sunsite.dk are archived at\nhttp://news.gmane.org/gmane.comp.web.wget.patches.\n8.5 Internet Relay Chat\nIn addition to the mailinglists, we also have a support channel set up via IRC at\nirc.freenode.org, #wget. Come check it out!\n8.6 Reporting Bugs\nYou are welcome to submit bug reports via the GNU Wget bug tracker (see\nhttp://wget.addictivecode.org/BugTracker).\nBefore actually submitting a bug report, please try to follow a few simple guidelines.\nChapter 8: Various 54\n1. Please try to ascertain that the behavior you see really is a bug. If Wget crashes, it’s a bug.\nIf Wget does not behave as documented, it’s a bug. If things work strange, but you are not\nsure about the way they are supposed to work, it might well be a bug, but you might want\nto double-check the documentation and the mailing lists (see hundefinedi [Mailing Lists],\npage hundefinedi).\n2. Try to repeat the bug in as simple circumstances as possible. E.g. if Wget crashes while\ndownloading ‘wget -rl0 -kKE -t5 --no-proxy http://yoyodyne.com -o /tmp/log’, you\nshould try to see if the crash is repeatable, and if will occur with a simpler set of op-\ntions. You might even try to start the download at the page where the crash occurred to\nsee if that page somehow triggered the crash.\nAlso, while I will probably be interested to know the contents of your ‘.wgetrc’ file, just\ndumping it into the debug message is probably a bad idea. Instead, you should first try\nto see if the bug repeats with ‘.wgetrc’ moved out of the way. Only if it turns out that\n‘.wgetrc’ settings affect the bug, mail me the relevant parts of the file.\n3. Please start Wget with ‘-d’ option and send us the resulting output (or relevant parts\nthereof). If Wget was compiled without debug support, recompile it—it is much easier to\ntrace bugs with debug support on.\nNote: please make sure to remove any potentially sensitive information from the debug log\nbefore sending it to the bug address. The -d won’t go out of its way to collect sensitive\ninformation, but the log will contain a fairly complete transcript of Wget’s communication\nwith the server, which may include passwords and pieces of downloaded data. Since the\nbug address is publically archived, you may assume that all bug reports are visible to the\npublic.\n4. If Wget has crashed, try to run it in a debugger, e.g. gdb ‘which wget‘ core and type\nwhere to get the backtrace. This may not work if the system administrator has disabled\ncore files, but it is safe to try.\n8.7 Portability\nLike all GNU software, Wget works on the GNU system. However, since it uses GNU Autoconf\nfor building and configuring, and mostly avoids using “special” features of any particular Unix,\nit should compile (and work) on all common Unix flavors.\nVarious Wget versions have been compiled and tested under many kinds of Unix systems,\nincluding GNU/Linux, Solaris, SunOS 4.x, Mac OS X, OSF (aka Digital Unix or Tru64), Ultrix,\n*BSD, IRIX, AIX, and others. Some of those systems are no longer in widespread use and may\nnot be able to support recent versions of Wget. If Wget fails to compile on your system, we\nwould like to know about it.\nThanks to kind contributors, this version of Wget compiles and works on 32-bit Microsoft\nWindows platforms. It has been compiled successfully using MS Visual C++ 6.0, Watcom,\nBorland C, and GCC compilers. Naturally, it is crippled of some features available on Unix,\nbut it should work as a substitute for people stuck with Windows. Note that Windows-specific\nportions of Wget are not guaranteed to be supported in the future, although this has been the\ncase in practice for many years now. All questions and problems in Windows usage should\nbe reported to Wget mailing list at wget@sunsite.dk where the volunteers who maintain the\nWindows-related features might look at them.\nSupport for building on MS-DOS via DJGPP has been contributed by Gisle Vanem; a port\nto VMS is maintained by Steven Schweda, and is available at http://antinode.org/.\nChapter 8: Various 55\n8.8 Signals\nSince the purpose of Wget is background work, it catches the hangup signal (SIGHUP) and\nignores it. If the output was on standard output, it will be redirected to a file named ‘wget-log’.\nOtherwise, SIGHUP is ignored. This is convenient when you wish to redirect the output of Wget\nafter having started it.\n$ wget http://www.gnus.org/dist/gnus.tar.gz &\n...\n$ kill -HUP %%\nSIGHUP received, redirecting output to ‘wget-log’.\nOther than that, Wget will not try to interfere with signals in any way. C-c, kill -TERM\nand kill -KILL should kill it alike.\nChapter 9: Appendices 56\n9 Appendices\nThis chapter contains some references I consider useful.\n9.1 Robot Exclusion\nIt is extremely easy to make Wget wander aimlessly around a web site, sucking all the available\ndata in progress. ‘wget -r site’, and you’re set. Great? Not for the server admin.\nAs long as Wget is only retrieving static pages, and doing it at a reasonable rate (see the\n‘--wait’ option), there’s not much of a problem. The trouble is that Wget can’t tell the\ndifference between the smallest static page and the most demanding CGI. A site I know has a\nsection handled by a CGI Perl script that converts Info files to html on the fly. The script is\nslow, but works well enough for human users viewing an occasional Info file. However, when\nsomeone’s recursive Wget download stumbles upon the index page that links to all the Info files\nthrough the script, the system is brought to its knees without providing anything useful to the\nuser (This task of converting Info files could be done locally and access to Info documentation\nfor all installed GNU software on a system is available from the info command).\nTo avoid this kind of accident, as well as to preserve privacy for documents that need to be\nprotected from well-behaved robots, the concept of robot exclusion was invented. The idea is\nthat the server administrators and document authors can specify which portions of the site they\nwish to protect from robots and those they will permit access.\nThe most popular mechanism, and the de facto standard supported by all the major robots,\nis the “Robots Exclusion Standard” (RES) written by Martijn Koster et al. in 1994. It specifies\nthe format of a text file containing directives that instruct the robots which URL paths to avoid.\nTo be found by the robots, the specifications must be placed in ‘/robots.txt’ in the server root,\nwhich the robots are expected to download and parse.\nAlthough Wget is not a web robot in the strictest sense of the word, it can download large\nparts of the site without the user’s intervention to download an individual page. Because of\nthat, Wget honors RES when downloading recursively. For instance, when you issue:\nwget -r http://www.server.com/\nFirst the index of ‘www.server.com’ will be downloaded. If Wget finds that it wants to down-\nload more documents from that server, it will request ‘http://www.server.com/robots.txt’\nand, if found, use it for further downloads. ‘robots.txt’ is loaded only once per each server.\nUntil version 1.8, Wget supported the first version of the standard, written by\nMartijn Koster in 1994 and available at http://www.robotstxt.org/wc/norobots.html.\nAs of version 1.8, Wget has supported the additional directives specified in the\ninternet draft ‘<draft-koster-robots-00.txt>’ titled “A Method for Web Robots\nControl”. The draft, which has as far as I know never made to an rfc, is available at\nhttp://www.robotstxt.org/wc/norobots-rfc.txt.\nThis manual no longer includes the text of the Robot Exclusion Standard.\nThe second, less known mechanism, enables the author of an individual document to specify\nwhether they want the links from the file to be followed by a robot. This is achieved using the\nMETA tag, like this:\n<meta name=\"robots\" content=\"nofollow\">\nThis is explained in some detail at http://www.robotstxt.org/wc/meta-user.html. Wget\nsupports this method of robot exclusion in addition to the usual ‘/robots.txt’ exclusion.\nIf you know what you are doing and really really wish to turn off the robot exclusion, set the\nrobots variable to ‘off’ in your ‘.wgetrc’. You can achieve the same effect from the command\nline using the -e switch, e.g. ‘wget -e robots=off url...’.\nChapter 9: Appendices 57\n9.2 Security Considerations\nWhen using Wget, you must be aware that it sends unencrypted passwords through the network,\nwhich may present a security problem. Here are the main issues, and some solutions.\n1. The passwords on the command line are visible using ps. The best way around it is\nto use wget -i - and feed the urls to Wget’s standard input, each on a separate line,\nterminated by C-d. Another workaround is to use ‘.netrc’ to store passwords; however,\nstoring unencrypted passwords is also considered a security risk.\n2. Using the insecure basic authentication scheme, unencrypted passwords are transmitted\nthrough the network routers and gateways.\n3. The ftp passwords are also in no way encrypted. There is no good solution for this at the\nmoment.\n4. Although the “normal” output of Wget tries to hide the passwords, debugging logs show\nthem, in all forms. This problem is avoided by being careful when you send debug logs (yes,\neven when you send them to me).\n9.3 Contributors\nGNU Wget was written by Hrvoje Nikˇ si´ c hniksic@xemacs.org,\nHowever, the development of Wget could never have gone as far as it has, were it not for\nthe help of many people, either with bug reports, feature proposals, patches, or letters saying\n“Thanks!”.\nSpecial thanks goes to the following people (no particular order):\n• Dan Harkless—contributed a lot of code and documentation of extremely high quality, as\nwell as the --page-requisites and related options. He was the principal maintainer for\nsome time and released Wget 1.6.\n• Ian Abbott—contributed bug fixes, Windows-related fixes, and provided a prototype im-\nplementation of the breadth-first recursive download. Co-maintained Wget during the 1.8\nrelease cycle.\n• The dotsrc.org crew, in particular Karsten Thygesen—donated system resources such as\nthe mailing list, web space, ftp space, and version control repositories, along with a lot of\ntime to make these actually work. Christian Reiniger was of invaluable help with setting\nup Subversion.\n• Heiko Herold—provided high-quality Windows builds and contributed bug and build reports\nfor many years.\n• Shawn McHorse—bug reports and patches.\n• Kaveh R. Ghazi—on-the-fly ansi2knr-ization. Lots of portability fixes.\n• Gordon Matzigkeit—‘.netrc’ support.\n• Zlatko\nˇ\nCaluˇ si´ c, Tomislav Vujec and Draˇ zen Kaˇ car—feature suggestions and “philosophical”\ndiscussions.\n• Darko Budor—initial port to Windows.\n• Antonio Rosella—help and suggestions, plus the initial Italian translation.\n• Tomislav Petrovi´ c, Mario Mikoˇ cevi´ c—many bug reports and suggestions.\n• Fran¸ cois Pinard—many thorough bug reports and discussions.\n• Karl Eichwalder—lots of help with internationalization, Makefile layout and many other\nthings.\n• Junio Hamano—donated support for Opie and http Digest authentication.\n• Mauro Tortonesi—improved IPv6 support, adding support for dual family systems. Refac-\ntored and enhanced FTP IPv6 code. Maintained GNU Wget from 2004–2007.\nChapter 9: Appendices 58\n• Christopher G. Lewis—maintenance of the Windows version of GNU WGet.\n• Gisle Vanem—many helpful patches and improvements, especially for Windows and MS-\nDOS support.\n• Ralf Wildenhues—contributed patches to convert Wget to use Automake as part of its build\nprocess, and various bugfixes.\n• Steven Schubiger—Many helpful patches, bugfixes and improvements. Notably, conversion\nof Wget to use the Gnulib quotes and quoteargs modules, and the addition of password\nprompts at the console, via the Gnulib getpasswd-gnu module.\n• Ted Mielczarek—donated support for CSS.\n• Saint Xavier—Support for IRIs (RFC 3987).\n• People who provided donations for development—including Brian Gough.\nThe following people have provided patches, bug/build reports, useful suggestions, beta test-\ning services, fan mail and all the other things that make maintenance so much fun:\nTim Adam, Adrian Aichner, Martin Baehr, Dieter Baron, Roger Beeman, Dan Berger, T.\nBharath, Christian Biere, Paul Bludov, Daniel Bodea, Mark Boyns, John Burden, Julien Buty,\nWanderlei Cavassin, Gilles Cedoc, Tim Charron, Noel Cragg, Kristijan\nˇ\nConkaˇ s, John Daily, An-\ndreas Damm, Ahmon Dancy, Andrew Davison, Bertrand Demiddelaer, Alexander Dergachev,\nAndrew Deryabin, Ulrich Drepper, Marc Duponcheel, Damir Dˇ zeko, Alan Eldridge, Hans-\nAndreas Engel, Aleksandar Erkalovi´ c, Andy Eskilsson, Jo~ ao Ferreira, Christian Fraenkel, David\nFritz, Mike Frysinger, Charles C. Fu, FUJISHIMA Satsuki, Masashi Fujita, Howard Gayle, Mar-\ncel Gerrits, Lemble Gregory, Hans Grobler, Alain Guibert, Mathieu Guillaume, Aaron Hawley,\nJochen Hein, Karl Heuer, Madhusudan Hosaagrahara, HIROSE Masaaki, Ulf Harnhammar, Gre-\ngor Hoffleit, Erik Magnus Hulthen, Richard Huveneers, Jonas Jensen, Larry Jones, Simon Josef-\nsson, Mario Juri´ c, Hack Kampbjørn, Const Kaplinsky, Goran Kezunovi´ c, Igor Khristophorov,\nRobert Kleine, KOJIMA Haime, Fila Kolodny, Alexander Kourakos, Martin Kraemer, Sami\nKrank, Jay Krell, (Simos KSenitellis), Christian Lackas, Hrvoje Lacko, Daniel S. Lewart,\nNicolás Lichtmeier, Dave Love, Alexander V. Lukyanov, Thomas Lußnig, Andre Majorel, Au-\nrelien Marchand, Matthew J. Mellon, Jordan Mendelson, Ted Mielczarek, Robert Millan, Lin\nZhe Min, Jan Minar, Tim Mooney, Keith Moore, Adam D. Moss, Simon Munton, Charlie Ne-\ngyesi, R. K. Owen, Jim Paris, Kenny Parnell, Leonid Petrov, Simone Piunno, Andrew Pollock,\nSteve Pothier, Jan Pˇ rikryl, Marin Purgar, Csaba Ráduly, Keith Refson, Bill Richardson, Tyler\nRiddle, Tobias Ringstrom, Jochen Roderburg, Juan Jos´ e Rodr´ıguez, Maciej W. Rozycki, Ed-\nward J. Sabol, Heinz Salzmann, Robert Schmidt, Nicolas Schodet, Benno Schulenberg, Andreas\nSchwab, Steven M. Schweda, Chris Seawood, Pranab Shenoy, Dennis Smit, Toomas Soome,\nTage Stabell-Kulo, Philip Stadermann, Daniel Stenberg, Sven Sternberger, Markus Strasser,\nJohn Summerfield, Szakacsits Szabolcs, Mike Thomas, Philipp Thomas, Mauro Tortonesi, Dave\nTurner, Gisle Vanem, Rabin Vincent, Russell Vincent,\nˇ\nZeljko Vrba, Charles G Waldman, Dou-\nglas E. Wegscheid, Ralf Wildenhues, Joshua David Williams, Benjamin Wolsey, Saint Xavier,\nYAMAZAKI Makoto, Jasmin Zainul, Bojan\nˇ\nZdrnja, Kristijan Zimmer, Xin Zou.\nApologies to all who I accidentally left out, and many thanks to all the subscribers of the\nWget mailing list.\nAppendix A: Copying this manual 59\nAppendix A Copying this manual\nA.1 GNU Free Documentation License\nVersion 1.3, 3 November 2008\nCopyright c ? 2000, 2001, 2002, 2007, 2008, 2015 Free Software\nFoundation, Inc.\nhttp://fsf.org/\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n0. PREAMBLE\nThe purpose of this License is to make a manual, textbook, or other functional and useful\ndocument free in the sense of freedom: to assure everyone the effective freedom to copy\nand redistribute it, with or without modifying it, either commercially or noncommercially.\nSecondarily, this License preserves for the author and publisher a way to get credit for their\nwork, while not being considered responsible for modifications made by others.\nThis License is a kind of “copyleft”, which means that derivative works of the document\nmust themselves be free in the same sense. It complements the GNU General Public License,\nwhich is a copyleft license designed for free software.\nWe have designed this License in order to use it for manuals for free software, because free\nsoftware needs free documentation: a free program should come with manuals providing the\nsame freedoms that the software does. But this License is not limited to software manuals;\nit can be used for any textual work, regardless of subject matter or whether it is published\nas a printed book. We recommend this License principally for works whose purpose is\ninstruction or reference.\n1. APPLICABILITY AND DEFINITIONS\nThis License applies to any manual or other work, in any medium, that contains a notice\nplaced by the copyright holder saying it can be distributed under the terms of this License.\nSuch a notice grants a world-wide, royalty-free license, unlimited in duration, to use that\nwork under the conditions stated herein. The “Document”, below, refers to any such manual\nor work. Any member of the public is a licensee, and is addressed as “you”. You accept\nthe license if you copy, modify or distribute the work in a way requiring permission under\ncopyright law.\nA “Modified Version” of the Document means any work containing the Document or a\nportion of it, either copied verbatim, or with modifications and/or translated into another\nlanguage.\nA “Secondary Section” is a named appendix or a front-matter section of the Document\nthat deals exclusively with the relationship of the publishers or authors of the Document\nto the Document’s overall subject (or to related matters) and contains nothing that could\nfall directly within that overall subject. (Thus, if the Document is in part a textbook of\nmathematics, a Secondary Section may not explain any mathematics.) The relationship\ncould be a matter of historical connection with the subject or with related matters, or of\nlegal, commercial, philosophical, ethical or political position regarding them.\nThe “Invariant Sections” are certain Secondary Sections whose titles are designated, as\nbeing those of Invariant Sections, in the notice that says that the Document is released\nunder this License. If a section does not fit the above definition of Secondary then it is not\nallowed to be designated as Invariant. The Document may contain zero Invariant Sections.\nIf the Document does not identify any Invariant Sections then there are none.\nAppendix A: Copying this manual 60\nThe “Cover Texts” are certain short passages of text that are listed, as Front-Cover Texts or\nBack-Cover Texts, in the notice that says that the Document is released under this License.\nA Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25\nwords.\nA “Transparent” copy of the Document means a machine-readable copy, represented in a\nformat whose specification is available to the general public, that is suitable for revising\nthe document straightforwardly with generic text editors or (for images composed of pixels)\ngeneric paint programs or (for drawings) some widely available drawing editor, and that is\nsuitable for input to text formatters or for automatic translation to a variety of formats\nsuitable for input to text formatters. A copy made in an otherwise Transparent file format\nwhose markup, or absence of markup, has been arranged to thwart or discourage subsequent\nmodification by readers is not Transparent. An image format is not Transparent if used for\nany substantial amount of text. A copy that is not “Transparent” is called “Opaque”.\nExamples of suitable formats for Transparent copies include plain ASCII without markup,\nTexinfo input format, LaT E X input format, SGML or XML using a publicly available DTD,\nand standard-conforming simple HTML, PostScript or PDF designed for human modifi-\ncation. Examples of transparent image formats include PNG, XCF and JPG. Opaque\nformats include proprietary formats that can be read and edited only by proprietary word\nprocessors, SGML or XML for which the DTD and/or processing tools are not generally\navailable, and the machine-generated HTML, PostScript or PDF produced by some word\nprocessors for output purposes only.\nThe “Title Page” means, for a printed book, the title page itself, plus such following pages\nas are needed to hold, legibly, the material this License requires to appear in the title page.\nFor works in formats which do not have any title page as such, “Title Page” means the\ntext near the most prominent appearance of the work’s title, preceding the beginning of the\nbody of the text.\nThe “publisher” means any person or entity that distributes copies of the Document to the\npublic.\nA section “Entitled XYZ” means a named subunit of the Document whose title either\nis precisely XYZ or contains XYZ in parentheses following text that translates XYZ in\nanother language. (Here XYZ stands for a specific section name mentioned below, such\nas “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.) To “Preserve the\nTitle” of such a section when you modify the Document means that it remains a section\n“Entitled XYZ” according to this definition.\nThe Document may include Warranty Disclaimers next to the notice which states that\nthis License applies to the Document. These Warranty Disclaimers are considered to be\nincluded by reference in this License, but only as regards disclaiming warranties: any other\nimplication that these Warranty Disclaimers may have is void and has no effect on the\nmeaning of this License.\n2. VERBATIM COPYING\nYou may copy and distribute the Document in any medium, either commercially or noncom-\nmercially, provided that this License, the copyright notices, and the license notice saying\nthis License applies to the Document are reproduced in all copies, and that you add no\nother conditions whatsoever to those of this License. You may not use technical measures\nto obstruct or control the reading or further copying of the copies you make or distribute.\nHowever, you may accept compensation in exchange for copies. If you distribute a large\nenough number of copies you must also follow the conditions in section 3.\nYou may also lend copies, under the same conditions stated above, and you may publicly\ndisplay copies.\nAppendix A: Copying this manual 61\n3. COPYING IN QUANTITY\nIf you publish printed copies (or copies in media that commonly have printed covers) of the\nDocument, numbering more than 100, and the Document’s license notice requires Cover\nTexts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover\nTexts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both\ncovers must also clearly and legibly identify you as the publisher of these copies. The front\ncover must present the full title with all words of the title equally prominent and visible.\nYou may add other material on the covers in addition. Copying with changes limited to\nthe covers, as long as they preserve the title of the Document and satisfy these conditions,\ncan be treated as verbatim copying in other respects.\nIf the required texts for either cover are too voluminous to fit legibly, you should put the\nfirst ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto\nadjacent pages.\nIf you publish or distribute Opaque copies of the Document numbering more than 100, you\nmust either include a machine-readable Transparent copy along with each Opaque copy,\nor state in or with each Opaque copy a computer-network location from which the general\nnetwork-using public has access to download using public-standard network protocols a\ncomplete Transparent copy of the Document, free of added material. If you use the latter\noption, you must take reasonably prudent steps, when you begin distribution of Opaque\ncopies in quantity, to ensure that this Transparent copy will remain thus accessible at the\nstated location until at least one year after the last time you distribute an Opaque copy\n(directly or through your agents or retailers) of that edition to the public.\nIt is requested, but not required, that you contact the authors of the Document well before\nredistributing any large number of copies, to give them a chance to provide you with an\nupdated version of the Document.\n4. MODIFICATIONS\nYou may copy and distribute a Modified Version of the Document under the conditions\nof sections 2 and 3 above, provided that you release the Modified Version under precisely\nthis License, with the Modified Version filling the role of the Document, thus licensing\ndistribution and modification of the Modified Version to whoever possesses a copy of it. In\naddition, you must do these things in the Modified Version:\nA. Use in the Title Page (and on the covers, if any) a title distinct from that of the\nDocument, and from those of previous versions (which should, if there were any, be\nlisted in the History section of the Document). You may use the same title as a previous\nversion if the original publisher of that version gives permission.\nB. List on the Title Page, as authors, one or more persons or entities responsible for\nauthorship of the modifications in the Modified Version, together with at least five of\nthe principal authors of the Document (all of its principal authors, if it has fewer than\nfive), unless they release you from this requirement.\nC. State on the Title page the name of the publisher of the Modified Version, as the\npublisher.\nD. Preserve all the copyright notices of the Document.\nE. Add an appropriate copyright notice for your modifications adjacent to the other copy-\nright notices.\nF. Include, immediately after the copyright notices, a license notice giving the public\npermission to use the Modified Version under the terms of this License, in the form\nshown in the Addendum below.\nG. Preserve in that license notice the full lists of Invariant Sections and required Cover\nTexts given in the Document’s license notice.\nAppendix A: Copying this manual 62\nH. Include an unaltered copy of this License.\nI. Preserve the section Entitled “History”, Preserve its Title, and add to it an item stating\nat least the title, year, new authors, and publisher of the Modified Version as given\non the Title Page. If there is no section Entitled “History” in the Document, create\none stating the title, year, authors, and publisher of the Document as given on its\nTitle Page, then add an item describing the Modified Version as stated in the previous\nsentence.\nJ. Preserve the network location, if any, given in the Document for public access to a\nTransparent copy of the Document, and likewise the network locations given in the\nDocument for previous versions it was based on. These may be placed in the “History”\nsection. You may omit a network location for a work that was published at least four\nyears before the Document itself, or if the original publisher of the version it refers to\ngives permission.\nK. For any section Entitled “Acknowledgements” or “Dedications”, Preserve the Title\nof the section, and preserve in the section all the substance and tone of each of the\ncontributor acknowledgements and/or dedications given therein.\nL. Preserve all the Invariant Sections of the Document, unaltered in their text and in their\ntitles. Section numbers or the equivalent are not considered part of the section titles.\nM. Delete any section Entitled “Endorsements”. Such a section may not be included in\nthe Modified Version.\nN. Do not retitle any existing section to be Entitled “Endorsements” or to conflict in title\nwith any Invariant Section.\nO. Preserve any Warranty Disclaimers.\nIf the Modified Version includes new front-matter sections or appendices that qualify as\nSecondary Sections and contain no material copied from the Document, you may at your\noption designate some or all of these sections as invariant. To do this, add their titles to\nthe list of Invariant Sections in the Modified Version’s license notice. These titles must be\ndistinct from any other section titles.\nYou may add a section Entitled “Endorsements”, provided it contains nothing but endorse-\nments of your Modified Version by various parties—for example, statements of peer review\nor that the text has been approved by an organization as the authoritative definition of a\nstandard.\nYou may add a passage of up to five words as a Front-Cover Text, and a passage of up\nto 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified\nVersion. Only one passage of Front-Cover Text and one of Back-Cover Text may be added\nby (or through arrangements made by) any one entity. If the Document already includes\na cover text for the same cover, previously added by you or by arrangement made by the\nsame entity you are acting on behalf of, you may not add another; but you may replace the\nold one, on explicit permission from the previous publisher that added the old one.\nThe author(s) and publisher(s) of the Document do not by this License give permission to\nuse their names for publicity for or to assert or imply endorsement of any Modified Version.\n5. COMBINING DOCUMENTS\nYou may combine the Document with other documents released under this License, under\nthe terms defined in section 4 above for modified versions, provided that you include in the\ncombination all of the Invariant Sections of all of the original documents, unmodified, and\nlist them all as Invariant Sections of your combined work in its license notice, and that you\npreserve all their Warranty Disclaimers.\nThe combined work need only contain one copy of this License, and multiple identical\nInvariant Sections may be replaced with a single copy. If there are multiple Invariant\nAppendix A: Copying this manual 63\nSections with the same name but different contents, make the title of each such section\nunique by adding at the end of it, in parentheses, the name of the original author or\npublisher of that section if known, or else a unique number. Make the same adjustment to\nthe section titles in the list of Invariant Sections in the license notice of the combined work.\nIn the combination, you must combine any sections Entitled “History” in the various original\ndocuments, forming one section Entitled “History”; likewise combine any sections Entitled\n“Acknowledgements”, and any sections Entitled “Dedications”. You must delete all sections\nEntitled “Endorsements.”\n6. COLLECTIONS OF DOCUMENTS\nYou may make a collection consisting of the Document and other documents released under\nthis License, and replace the individual copies of this License in the various documents with\na single copy that is included in the collection, provided that you follow the rules of this\nLicense for verbatim copying of each of the documents in all other respects.\nYou may extract a single document from such a collection, and distribute it individually\nunder this License, provided you insert a copy of this License into the extracted document,\nand follow this License in all other respects regarding verbatim copying of that document.\n7. AGGREGATION WITH INDEPENDENT WORKS\nA compilation of the Document or its derivatives with other separate and independent\ndocuments or works, in or on a volume of a storage or distribution medium, is called an\n“aggregate” if the copyright resulting from the compilation is not used to limit the legal\nrights of the compilation’s users beyond what the individual works permit. When the\nDocument is included in an aggregate, this License does not apply to the other works in\nthe aggregate which are not themselves derivative works of the Document.\nIf the Cover Text requirement of section 3 is applicable to these copies of the Document,\nthen if the Document is less than one half of the entire aggregate, the Document’s Cover\nTexts may be placed on covers that bracket the Document within the aggregate, or the\nelectronic equivalent of covers if the Document is in electronic form. Otherwise they must\nappear on printed covers that bracket the whole aggregate.\n8. TRANSLATION\nTranslation is considered a kind of modification, so you may distribute translations of the\nDocument under the terms of section 4. Replacing Invariant Sections with translations\nrequires special permission from their copyright holders, but you may include translations\nof some or all Invariant Sections in addition to the original versions of these Invariant\nSections. You may include a translation of this License, and all the license notices in\nthe Document, and any Warranty Disclaimers, provided that you also include the original\nEnglish version of this License and the original versions of those notices and disclaimers. In\ncase of a disagreement between the translation and the original version of this License or a\nnotice or disclaimer, the original version will prevail.\nIf a section in the Document is Entitled “Acknowledgements”, “Dedications”, or “History”,\nthe requirement (section 4) to Preserve its Title (section 1) will typically require changing\nthe actual title.\n9. TERMINATION\nYou may not copy, modify, sublicense, or distribute the Document except as expressly pro-\nvided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute\nit is void, and will automatically terminate your rights under this License.\nHowever, if you cease all violation of this License, then your license from a particular copy-\nright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly\nand finally terminates your license, and (b) permanently, if the copyright holder fails to\nnotify you of the violation by some reasonable means prior to 60 days after the cessation.\nAppendix A: Copying this manual 64\nMoreover, your license from a particular copyright holder is reinstated permanently if the\ncopyright holder notifies you of the violation by some reasonable means, this is the first\ntime you have received notice of violation of this License (for any work) from that copyright\nholder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties\nwho have received copies or rights from you under this License. If your rights have been\nterminated and not permanently reinstated, receipt of a copy of some or all of the same\nmaterial does not give you any rights to use it.\n10. FUTURE REVISIONS OF THIS LICENSE\nThe Free Software Foundation may publish new, revised versions of the GNU Free Doc-\numentation License from time to time. Such new versions will be similar in spirit to\nthe present version, but may differ in detail to address new problems or concerns. See\nhttp://www.gnu.org/copyleft/.\nEach version of the License is given a distinguishing version number. If the Document\nspecifies that a particular numbered version of this License “or any later version” applies\nto it, you have the option of following the terms and conditions either of that specified\nversion or of any later version that has been published (not as a draft) by the Free Software\nFoundation. If the Document does not specify a version number of this License, you may\nchoose any version ever published (not as a draft) by the Free Software Foundation. If the\nDocument specifies that a proxy can decide which future versions of this License can be\nused, that proxy’s public statement of acceptance of a version permanently authorizes you\nto choose that version for the Document.\n11. RELICENSING\n“Massive Multiauthor Collaboration Site” (or “MMC Site”) means any World Wide Web\nserver that publishes copyrightable works and also provides prominent facilities for anybody\nto edit those works. A public wiki that anybody can edit is an example of such a server. A\n“Massive Multiauthor Collaboration” (or “MMC”) contained in the site means any set of\ncopyrightable works thus published on the MMC site.\n“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0 license published\nby Creative Commons Corporation, a not-for-profit corporation with a principal place of\nbusiness in San Francisco, California, as well as future copyleft versions of that license\npublished by that same organization.\n“Incorporate” means to publish or republish a Document, in whole or in part, as part of\nanother Document.\nAn MMC is “eligible for relicensing” if it is licensed under this License, and if all works that\nwere first published under this License somewhere other than this MMC, and subsequently\nincorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections,\nand (2) were thus incorporated prior to November 1, 2008.\nThe operator of an MMC Site may republish an MMC contained in the site under CC-BY-\nSA on the same site at any time before August 1, 2009, provided the MMC is eligible for\nrelicensing.\nAppendix A: Copying this manual 65\nADDENDUM: How to use this License for your documents\nTo use this License in a document you have written, include a copy of the License in the document\nand put the following copyright and license notices just after the title page:\nCopyright (C) year your name.\nPermission is granted to copy, distribute and/or modify this document\nunder the terms of the GNU Free Documentation License, Version 1.3\nor any later version published by the Free Software Foundation;\nwith no Invariant Sections, no Front-Cover Texts, and no Back-Cover\nTexts. A copy of the license is included in the section entitled ‘‘GNU\nFree Documentation License’’.\nIf you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the\n“with. . .Texts.” line with this:\nwith the Invariant Sections being list their titles, with\nthe Front-Cover Texts being list, and with the Back-Cover Texts\nbeing list.\nIf you have Invariant Sections without Cover Texts, or some other combination of the three,\nmerge those two alternatives to suit the situation.\nIf your document contains nontrivial examples of program code, we recommend releasing\nthese examples in parallel under your choice of free software license, such as the GNU General\nPublic License, to permit their use in free software.\nConcept Index 66\nConcept Index\n(Index is nonexistent)\nii\nTable of Contents\n1 Overview ....................................................... 1\n2 Invoking........................................................ 2\n2.1 URL Format ...................................................................... 2\n2.2 Option Syntax..................................................................... 3\n2.3 Basic Startup Options............................................................. 3\n2.4 Logging and Input File Options.................................................... 4\n2.5 Download Options................................................................. 5\n2.6 Directory Options................................................................ 13\n2.7 HTTP Options................................................................... 14\n2.8 HTTPS (SSL/TLS) Options...................................................... 20\n2.9 FTP Options..................................................................... 23\n2.10 FTPS Options .................................................................. 25\n2.11 Recursive Retrieval Options ..................................................... 25\n2.12 Recursive Accept/Reject Options................................................ 28\n2.13 Exit Status ..................................................................... 30\n3 Recursive Download ......................................... 31\n4 Following Links............................................... 32\n4.1 Spanning Hosts .................................................................. 32\n4.2 Types of Files.................................................................... 32\n4.3 Directory-Based Limits........................................................... 34\n4.4 Relative Links.................................................................... 35\n4.5 Following FTP Links............................................................. 35\n5 Time-Stamping............................................... 36\n5.1 Time-Stamping Usage............................................................ 36\n5.2 HTTP Time-Stamping Internals.................................................. 37\n5.3 FTP Time-Stamping Internals.................................................... 37\n6 Startup File................................................... 38\n6.1 Wgetrc Location ................................................................. 38\n6.2 Wgetrc Syntax ................................................................... 38\n6.3 Wgetrc Commands............................................................... 38\n6.4 Sample Wgetrc................................................................... 45\n7 Examples...................................................... 49\n7.1 Simple Usage..................................................................... 49\n7.2 Advanced Usage.................................................................. 49\n7.3 Very Advanced Usage ............................................................ 50\niii\n8 Various........................................................ 52\n8.1 Proxies........................................................................... 52\n8.2 Distribution...................................................................... 53\n8.3 Web Site......................................................................... 53\n8.4 Mailing Lists..................................................................... 53\nPrimary List ....................................................................... 53\nBug Notices List ................................................................... 53\nObsolete Lists...................................................................... 53\n8.5 Internet Relay Chat .............................................................. 53\n8.6 Reporting Bugs .................................................................. 53\n8.7 Portability ....................................................................... 54\n8.8 Signals........................................................................... 55\n9 Appendices ................................................... 56\n9.1 Robot Exclusion.................................................................. 56\n9.2 Security Considerations........................................................... 57\n9.3 Contributors ..................................................................... 57\nAppendix A Copying this manual ............................ 59\nA.1 GNU Free Documentation License ............................................... 59\nConcept Index.................................................... 66\n"
		},
		{
			"post_id": 2,
			"title": "New blog post",
			"date_published": 1462929649.728,
			"body": "just 4 test"
		},
		{
			"post_id": 1,
			"title": "Congratulations!",
			"date_published": 1433033779.604,
			"body": "Your zeronet blog has been successfully created!"
		}
	]
}