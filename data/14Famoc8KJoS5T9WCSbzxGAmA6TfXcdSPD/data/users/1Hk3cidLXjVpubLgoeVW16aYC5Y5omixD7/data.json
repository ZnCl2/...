{
	"next_topic_id": 7,
	"topic": [
		{
			"topic_id": 1632979036,
			"title": "IPFS研究",
			"body": "",
			"added": 1632979035,
			"parent_topic_uri": "1623916421_1GRCviBTHHhLzzBoSvknVHnkjWYFRG641w",
			"type": "group"
		},
		{
			"topic_id": 1632979098,
			"title": "IPFS 如何破除网站 404 的「魔咒」",
			"body": "什么是 IPFS\n\nIPFS 的全称是 InterPlanetary File System，中文译为「星际文件系统」。IPFS 不是一个区块链项目，而是一个底层的网络传输协议。该协议的提出者 Juan Benet 看到了当前互联网 HTTP 协议的缺陷，因此于 2014 年 5 月提出了 IPFS，目的是打造更开放、更安全的下一代互联网 Web3.0。\n\n\n\nIPFS 的提出者 Juan Benet \n\n那么当前互联网的 HTTP 协议到底有什么问题？\n\nHTTP 的全称是 Hypertext Transport Protocol，中文译为超文本传输协议，由万维网之父 Tim Berners-Lee 在 1991 年提出，主要规定了客户端和服务器之间的通信格式，该协议主要有三大缺陷：\n\n中心化\n\n成本高\n\n隐私保护差\n\n一、中心化\n\nHTTP 协议极度依赖中心化服务网络，服务器必须 24 小时开机运行。\n\n\n\n世界第一台 Web 服务器\n\n????这是 Tim Berners-Lee 在 CERN 欧洲核子研究中心工作时使用过的一台电脑，也是世界上第一台遵循 HTTP 协议的 Web 服务器，现已被淘汰存于博物馆。机箱上贴着纸条：\n\nThis machine is a server. Do not power down!（这是一台服务器，不要关机！）\n\n因为一旦关机，这台服务器所承载的网站信息就会消失不见。我们访问网站时就会看到网站页面不存在的 404 提醒。404 是 HTTP 协议的错误码，代表客户端在浏览网页时，服务器无法正常提供信息，或是服务器无法回应且不知原因。\n\n\n\n当我们在浏览器中输入网址后，浏览器会根据这个网址从服务器中进行信息检索并返回展示在客户端，即我们普通用户看到的样子。而一旦服务器关机，浏览器就无法检索到相关信息，于是我们就会看到网页 404 的界面。\n\n另外，虽然现在网站、App 很多，但是大多都运行在阿里云、亚马逊云、谷歌云等服务器商的服务器上，一旦这些云服务器出现问题，租用了服务的网站都会被牵连。\n\n2019 年 3 月 3 日，阿里云华北地区的服务器宕机 3 小时，租用了服务的众多互联网公司也因此处于服务瘫痪的状态。\n\n二、成本高\n\n\n\nGangnam Style\n\n还记得《江南 Style》么，这首歌在 2012 年风靡一时，是互联网历史上第一个点击量超过 10 亿次的视频（虽然我到现在也没明白这歌好听在哪????）。如果这个视频大小为 100 MB，那么 10 亿次的浏览就消耗了 100 PB 的网络流量。\n\n假设每 GB 的流量成本（包括网络带宽和服务器存储）是 0.01 美元，则总共的花费是 100 万美元。此外，中心化的数据服务对资源的利用效率低，比如中心化的模式要求各数据中心 365 天不间断运营，行业报告显示仅电力消耗就占据了 57% 的运营成本。可见在 HTTP 协议上，集中由数据中心向外传播信息的成本是非常昂贵的。\n\n三、隐私保护差\n\n互联网，顾名思义就是由连接到世界各地互联互通的网络组成的，而信息流经通信线路上的光缆和某些网络设备时，可能遭到监视。值得注意的一点是，全球的通信流量大部分都经过美国。\n\n美国国家安全局与多家电讯公司签署了《网络安全协议》，规定电讯企业要在美国本土建立「网络运行中心」。与此同时，美国的盟友英国、加拿大等也为其提供光缆监听情报。根据华盛顿邮报的消息，美国国家安全局 NSA 海底光缆的监控覆盖全球 4 大洲的 27 个国家地区。\n\n此外服务器一旦被成功入侵，存储其中的信息也会泄漏。2013 年 6 月，美国中央情报局（CIA）前雇员爱德华·斯诺登揭露了美国国家安全局代号为「棱镜」的秘密项目。棱镜是美国国家安全局（NSA）和联邦调查局（FBI）于 2007 年启动的一个秘密监控项目，可以直接进入微软、雅虎、苹果、谷歌等互联网巨头公司的中心服务器里获悉通讯记录以及双方通信的时间、地点等信息。\n\n\n\n爱德华·斯诺登\n\n正是看到了 HTTP 协议的诸多缺陷，Juan Benet 提出了 IPFS 的设想，并在 2015 年成立了 Protocol Labs 实验室，专门负责开发 IPFS。\n\nIPFS 的运作原理\n\n1、通过内容寻址进行唯一标识\n\n2、通过非对称加密保护文档隐私\n\n3、通过点对点传输加快文档传输速度\n\n一、内容寻址\n\nHTTP 协议是基于「域名的寻址」，浏览器会根据我们输入的网址到指定的服务器上获取文件，而 IPFS 是基于「内容的寻址」。IPFS 会将文件进行哈希得到一个以 Qm 开头的哈希值，我们提供哈希值就能检索获取对应的文件。\n\n这两者具体有什么不同呢？\n\n例如我想通过浏览器下载一个文件，按照 HTTP 协议，浏览器首先会查找服务器的位置，也就是域名寻址，接着向服务器索要文件的路径。这种体系下文件的位置取决于服务器的管理者，而我只能寄希望于文件的位置没有变动，并且服务器处于开机状态。\n\n此外，下载文件时，我无法确定客户端下载的文件和服务器上的文件是否一致，文件在下载传输的过程中可能会被人篡改，但我对此是无法感知的。\n\nIPFS 的做法则是撇开服务器和文件具体位置，只关注文件中的内容。当我把一个文件放到 IPFS 节点，它会根据文件内容计算出一串 Qm 开头的哈希值，比如这样????\n\nQmYqSCWuzG8Cyo4MFQzqKcC14ct4ybAWyrAc9qzdJaFYTL\n\n哈希算法从数学上确保了文档中的内容哪怕只修改一个标点，哈希值也会完全不同。每份存储在链上的内容都会分配得到独一无二的哈希值作为内容标识（Content Identifier，缩写 CID）。\n\n但有个隐私问题，任何人知道了哈希值，不就都能通过 IPFS 网络下载我的文件了么？这时就需要用到非对称加密技术了，是时候再次请出密码学的男女主角 Bob 和 Alice 了。\n\n二、非对称加密\n\n\n\n发送者：Bob ???? ，接收者：Alice ????\n\n1、Bob 想上传一份文档至 IPFS ，且只有 Alice 能查看该文档\n\n2、Bob 用 Alice 的公钥对文档进行加密\n\n3、Bob 将加密后的文档上传至 IPFS ，得到对应的哈希值作为内容标识\n\n4、加密后的文档被存储在 IPFS 系统中，Alice 可以凭借 Bob 提供的哈希值下载该文档\n\n5、Alice 用自己的私钥解密这份文档，获取文档中的内容\n\n6、未经授权的第三方由于没有 Alice 的私钥，即便下载了文档也无法解密。\n\nAlice 通过 IPFS 下载文档的过程类似于通过迅雷下载电影，是基于 P2P 点对点传输技术。\n\n三、点对点传输\n\n如果你读过比特币白皮书，点对点这个词听起来应该不会很陌生，因为它白皮书的标题就是《比特币，一种点对点的电子现金系统》\n\n\n\n点对点是根据 Peer-to-Peer 翻译过来的中文，简称 P2P，Peer 这个英文单词在字典有一个常见意思是身份或地位相同的人。\n\n在 HTTP 协议中，客户端想要获取信息时需要访问服务器，如果服务器访问量在短时间内剧增，就会出现访问失败的情况，你可以想想自己回家抢火车票时，订票平台宕机的情景。分布式拒绝服务攻击 DDoS 就是通过在短时间内借助数百甚至上千台设备对服务器发起请求，耗尽服务器的资源造成其他用户无法正常访问该网站。\n\nIPFS 采用的点对点传输技术，点就是指一台计算机。系统中的任何一台电脑都可以做为服务器，彼此之间共享文件，比如迅雷，电驴，酷狗都用到了 P2P 技术，实现彼此之间资源的共享。\n\n比如我想下载某个文件，那么我的电脑就会找到存有对应资源的多台电脑，从这些电脑上下载一个个小小的碎片，最后在我的电脑上拼成一个完整的文件。\n\n根据 HTTP 协议进行文档下载时，B、C、D 等多台电脑都要访问服务器 A 进行下载，访问量一多，服务器 A 就会宕机。而点对点传输技术可以使得 B 从 A 处下载，B 下载完后变成一个服务器， C 就可以从 A、B 处下载。C 下载完后也变成一个服务器，D 可以从 A、B、C 处下载文档，每一个存有文档的电脑都可以作为服务器，给其他下载用户提供信息。\n\n因此越到后面，可以作为服务器的电脑就越多，下载速度也就越快。此时 A、B、C、D 等多台电脑之间的地位是平等的，都可以作为服务器。原则上，与传统的 HTTP 协议相比，Alice 通过 IPFS 下载文档的速度更快。\n\n但这里有个问题，A、B、C、D 等多台电脑在没有任何奖励的情况下，为什么要白白给其他电脑提供资源下载？经济激励 Filecoin 就显得很有必要了。\n\nIPFS 与 Filecoin 的关系\n\n2017 年，Protocol Labs 实验室宣布成立基于 IPFS 的区块链项目 Filecoin。Filecoin 和 IPFS 虽然都由 Protocol Labs 创建，但 Filecoin 不等同于 IPFS，IPFS 是一个底层协议，而 Filecoin 是建立其上的经济激励层，通过发行代币 FIL 作为奖励，让各个节点有动力去存储和检索数据。\n\n当用户想要将文档上传至 IPFS 网络或者在网络中下载文档时，都需要支付 Filecoin 给矿工作为他们的辛苦费。Filecoin 网络的原生代币 FIL 总发行量为 20 亿枚，其中 70% 都会分配给矿工。\n\n同时，为了确保矿工不会中途删除存储的数据，矿工需要抵押一部分 FIL 代币，每 1 小时左右提交一次数据还在的证明。链上也会在每个出块时间随机验证数据是否存在，若验证失败，矿工抵押的代币会被扣除。",
			"added": 1632979096,
			"parent_topic_uri": "1632979036_1Hk3cidLXjVpubLgoeVW16aYC5Y5omixD7"
		},
		{
			"topic_id": 1632979139,
			"title": "聊聊IPFS无法支持动态网页的“缺陷”",
			"body": "在前面的系列文章中，我谈到了IPFS与当下一些去中心化项目相比的优缺点，尤其是它的缺点。\n\n这些缺点主要表现在：\n\n1)IPFS系统没有解决存储数据的安全问题：任何人只要拿到文件的哈希值就能拿到文件。\n\n2)IPFS系统没有解决数据可靠性问题：IPFS系统缺乏激励层保证数据能够有足够的备份在系统中存储，缺少备份就可能导致数据丢失。\n\n3)IPFS+Filecoin系统没有解决服务可靠性问题：Filecoin系统采用统一的算法来激励节点，这会导致某些节点因为网络状况，运算能力等方面的不足而影响整个系统所能提供的性能。\n\n我们有些读者在看完这些内容后继续深入研究发现了IPFS还有其它一些缺陷，比如被Yotta这个项目在其白皮书及多个场合提到的另一个缺陷：IPFS无法支持动态网页。\n\n这一个缺陷近来被很多读者提及。今天我就来和大家分析一下这其中的实际情况。\n\n什么是动态网页呢？\n\n所谓动态网页，是指跟静态网页相对的一种网页编程技术。静态网页就是一个网站页面的内容和显示效果一旦随代码生成后就基本上不会发生变化了——除非修改页面代码。而动态网页则不然，页面代码虽然没有变，但是显示的内容却是可以随着时间、环境或者数据库操作的结果而发生改变的。\n\n要实现这种效果就必须要将互联网基本的html用法与一些高级计算机编程语言比如Java、VB、VC等和数据库编程等多种技术相结合，以实现对网站内容和风格的高效、动态和交互式的管理。\n\n早期的互联网几乎所有的网站都是静态网页，后来随着人们需求的变化及发展，于是技术人员开发出一系列新的技术在网站的服务器端增加了大量的功能，使得内容能够更加丰富灵活的呈现，这便发展出了动态网页的技术。\n\n所以动态网页的功能和技术并不是一开始就有的，而是后来随着需求的发展才衍生出来。\n\n对于IPFS而言，它的根本目的和出发点是为了改进当今存储领域的中心化存储所带来的种种问题。\n\n无论是静态网页还是动态网页都依赖存储的数据，因此也都受到中心化存储带来的种种弊端。从这个角度来讲，IPFS是改变整个互联网基础的协议，所以说它有可能颠覆互联网的底层。\n\n但是颠覆底层并不代表它也具备立刻改变互联网上层应用协议的特点。\n\n这好比我们建房子，无论是建砖瓦房还是钢筋混凝土建筑，我们都需要用到砖。早年建房子用砖就够了，后来由于超高层建筑的需要人类就发明了钢筋混凝土材料，和砖一起用在超高层建筑中。\n\n现在有一个最新的技术能够造出强度更大，更耐用的砖，因此这种技术无论对砖瓦房还是钢筋混凝土建筑都是一次革命，对两者都有好处，但这并不意味着我们有了这种新的砖，它就能取代钢筋混凝土材料。该需要钢筋混凝土的建筑还是需要钢筋混凝土，仅仅靠砖还是不行。\n\nIPFS协议就是这个例子中能造出更强，更耐用的砖的技术，而静态网页就好比例子中的砖瓦房，动态网页就好比例子中的钢筋混凝土建筑。\n\n所以说IPFS无法取代动态网页这是非常正常的，它只是聚焦于存储，解决中心化存储的问题，而不是为了解决互联网所有的问题。\n\n但是有了IPFS技术，会对互联网底层协议进行一次革命，这个革命性意义已经足够颠覆足够影响互联网未来的发展。\n\n更重要的是，IPFS现在已经在区块链的各种应用中被广泛应用了，这种生态一旦形成，它的门槛和壁垒对后来者来说都是很难跨越的。这更是后来的竞争者应该聚焦和着力的地方。",
			"added": 1632979136,
			"parent_topic_uri": "1632979036_1Hk3cidLXjVpubLgoeVW16aYC5Y5omixD7"
		},
		{
			"topic_id": 1633224045,
			"title": "软件想象力",
			"body": "",
			"added": 1633224041,
			"parent_topic_uri": "1623916421_1GRCviBTHHhLzzBoSvknVHnkjWYFRG641w",
			"type": "group"
		},
		{
			"topic_id": 1633224287,
			"title": "群聊功能设计",
			"body": "数据导出\n消息记录定位\n群论坛\n频道\n机器人API\n无云同步\n群邮件\n邮件群聊\n邮件列表",
			"added": 1633224282,
			"parent_topic_uri": "1633224045_1Hk3cidLXjVpubLgoeVW16aYC5Y5omixD7"
		},
		{
			"topic_id": 1633227202,
			"title": "图文社交",
			"body": "纯文字社交",
			"added": 1633227196,
			"parent_topic_uri": "1630722132_125vWBHepSUHXMGnwoDtiteTo9AfNTCUXc"
		}
	],
	"topic_vote": {},
	"next_comment_id": 1,
	"comment": {},
	"comment_vote": {}
}