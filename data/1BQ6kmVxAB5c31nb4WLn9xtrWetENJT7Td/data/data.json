{
  "title": "约伊兹的萌狼乡手札",
  "description": "「虽然咱长久以来被尊为神，且被束缚在这块土地上，但咱根本不是什么伟大的神。咱就是咱。咱是赫萝。」",
  "links": "*   [](https://blog.yoitsu.moe)[约伊兹的萌狼乡手札 (PRESENT)](https://blog.yoitsu.moe)\n*   [约伊兹的萌狼乡手札](http://skweutxqjzxqguij.onion/) \n*   [(SUPER FUTURE 2323)](http://skweutxqjzxqguij.onion/)\n*   [Source code](https://github.com/HelloZeroNet)\n\n*   [](https://blog.yoitsu.moe)",
  "next_post_id": 67,
  "demo": false,
  "modified": 1498380695.937,
  "post": [
    {
      "post_id": 66,
      "title": " 群体中的人和气氛",
      "date_published": 1495036800,
      "body": "\n<p>那些咱讨厌的气氛，剩下的应该都喜欢 （或者至少不讨厌 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id4\">一份苍白无力的「免责声明」</a></h2>\n<blockquote>\n@ <a class=\"reference external\" href=\"/links.html#tcdw\">tcdw</a> (跑 😂</blockquote>\n<ul class=\"simple\">\n<li>咱不喜欢不代表大多数人不喜欢（有人说不定还喜欢 🤦‍）</li>\n<li>并不想针对某个群体或某个人 <del>如果真对号入座了还请装作没看见……</del></li>\n<li>然而有时咱自己也做了同样的事（ <del>这不是双重标准么……</del> ）</li>\n<li><del>还不是因为咱太敏感了……</del></li>\n</ul>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id5\">讨厌的气氛 （程度不分先后🤦‍</a></h2>\n<blockquote>\n可能以后还会更新…… 😂</blockquote>\n<ul>\n<li><p class=\"first\">一上来或者一言不合就菊苣啦大佬啦大神啦一类的叫。</p>\n<blockquote>\n<p>嗯地球上最不会灭绝的物种就这些了……</p>\n</blockquote>\n</li>\n<li><p class=\"first\">/me 提问然后没人搭理，一种被阿卡林附身的感觉 😂</p>\n<blockquote>\n<p>就算不知道说不知道也好啊（虽然有人认为不知道就保持沉默没什么问题……</p>\n</blockquote>\n</li>\n<li><p class=\"first\">解决问题时跑题跑的漫无边际，最后问题也没解决……</p>\n<blockquote>\n<p>先解决当下的问题再来优化好不好 ……</p>\n</blockquote>\n</li>\n<li><p class=\"first\">新人来提问然后被甩一脸提问的智慧然后被吓跑</p>\n<blockquote>\n<p>别忘了咱和汝曾经也是新手过嘛，态度温和点呗……</p>\n<p><del>虽然大家都很忙不想在朽木上浪费时间……</del></p>\n</blockquote>\n</li>\n<li><p class=\"first\">太早的给某人下判断，<del>例如笨蛋智障一类的</del></p>\n<blockquote>\n<p>🤦‍……</p>\n</blockquote>\n</li>\n<li><p class=\"first\">在主题群里跑题跑的漫无边际 😂</p>\n</li>\n<li><p class=\"first\">Don't feed ……</p>\n<blockquote>\n<p>the trolls ! 😂</p>\n</blockquote>\n</li>\n<li><p class=\"first\">没有共同语言……</p>\n<blockquote>\n<p>那咱进去干什么……</p>\n</blockquote>\n</li>\n</ul>\n<p>好吧一时就想起来这些…… 😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 65,
      "title": " 用 Arch Live 修 Arch 的某些姿势",
      "date_published": 1496160000,
      "body": "\n<p>修电脑三年（划掉 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n\n<div class=\"section\" id=\"live-arch\">\n<h2><a class=\"toc-backref\" href=\"#id3\">啥时候需要 Live 介质修 Arch ？</a></h2>\n<p>比如：</p>\n<ul class=\"simple\">\n<li>笨蛋 Windows 升级以后把 bootloader 赶跑了</li>\n<li>内核炸了没法启动又没有备用内核</li>\n<li>基础库炸了（例如 glibc ）</li>\n<li>pacman 自己因为某种原因炸了（还是例如 glibc 炸了）</li>\n<li>忘了密码……</li>\n</ul>\n<p>等等…… 😂</p>\n</div>\n<div class=\"section\" id=\"live-live\">\n<h2><a class=\"toc-backref\" href=\"#id4\">准备 Live 介质和进入 Live 环境</a></h2>\n<p>这个应该不用多说了吧 😂 简而言之 MBR 就 dd UEFI 就格式化完直接把 ISO 里的文件\n复制到 U 盘上咯~</p>\n<p>如果有 Windows 的话就用 rufus 😂</p>\n<p>然后启动进去进行必要的配置\n（ <a class=\"reference external\" href=\"/arch-linux/installing_arch_linux_for_complete_newbies.html\">例如参考咱原来写的那个？</a> ），\n不过因为只是修复而已，连上网设置好镜像就行（如果汝原来的系统里的 pacman 没坏的\n话，就连上网就行咯~）</p>\n<p>然后把原来的 Arch 挂载到某个目录 （例如 /mnt ）。</p>\n</div>\n<div class=\"section\" id=\"chroot\">\n<h2><a class=\"toc-backref\" href=\"#id5\">chroot 修复</a></h2>\n<p>当然是 arch-chroot 一把梭咯 😂</p>\n<blockquote>\narch-chroot /mnt</blockquote>\n<p>然后遇到啥问题就治啥咯~</p>\n</div>\n<div class=\"section\" id=\"pacman\">\n<h2><a class=\"toc-backref\" href=\"#id6\">修坏掉的 pacman</a></h2>\n<p>用 live 的 pacman 操作原来的系统的话，记得带上 --root 和 --dbpath 选项。</p>\n<p>例如这样重装 pacman :</p>\n<blockquote>\npacman -S pacman --root /mnt --dbpath /mnt/var/lib/pacman</blockquote>\n<p>或者这样隔空滚系统（雾：</p>\n<blockquote>\npacman -Syu --root /mnt --dbpath /mnt/var/lib/pacman</blockquote>\n<p>或者这样重装所有包（大雾：</p>\n<blockquote>\npacman -S $(pacman -Qq --dbpath /mnt/var/lib/pacman) --root /mnt --dbpath /mnt/var/lib/pacman</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">记得看看这些 😋</a></h2>\n<ul>\n<li><p class=\"first\"><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks\">https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks</a></p>\n</li>\n<li><p class=\"first\"><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Installation_guide\">https://wiki.archlinux.org/index.php/Installation_guide</a></p>\n<blockquote>\n<p>如果没法治疗的话，还可以重装啊（跑 😂</p>\n</blockquote>\n</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 63,
      "title": " Raspberry Pi + Arch Linux ARM + Shadowsocks = ?",
      "date_published": 1494259200,
      "body": "\n<p>利用树莓派+Arch Linux ARM+shadowsocks-透明代理 AP <del>搞大新闻……</del></p>\n<p>…… （此处应有风滚草 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id3\">首先是致谢（画风不太对劲……</a></h2>\n<ul class=\"simple\">\n<li>百合仙子 <a class=\"reference external\" href=\"/links.html#lilydjwg\">lilydjwg</a> 的\n<a class=\"reference external\" href=\"https://blog.lilydjwg.me/2016/9/13/wi-fi-share-in-linux.205870.html\">Linux 下的 Wi-Fi 分享</a></li>\n<li><a class=\"reference external\" href=\"/links.html#petercxy\">petercxy</a> 的\n<a class=\"reference external\" href=\"https://typeblog.net/set-up-shadowsocks-with-iptables-and-ipset-on-archlinux/\">在 ArchLinux 上配置 shadowsocks + iptables + ipset 实现自动分流</a></li>\n<li>百合和夏狼 <a class=\"reference external\" href=\"/links.html#sherlock_holo\">sherlock_holo</a> 还帮咱纠正了点 iptables 的配置。</li>\n</ul>\n<p>谢谢啦~ 😋</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id4\">一些准备工作</a></h2>\n<ul>\n<li><p class=\"first\">去买块树莓派，<del>吃了</del> 装好 Arch Linux ARM ：</p>\n<blockquote>\n<p>例如 <a class=\"reference external\" href=\"https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3\">https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3</a> ？</p>\n</blockquote>\n</li>\n<li><p class=\"first\">用 hostapd 做好热点。</p>\n</li>\n<li><p class=\"first\">在树莓派上设置好 shadowsocks 的自动分流。</p>\n<blockquote>\n<p>不过要修改 ss-redir 的配置文件，让 ss-redir 监听在 0.0.0.0 上 😂</p>\n</blockquote>\n</li>\n</ul>\n<p>这时连接汝的 AP 时应该能正常访问没被墙的网站，树莓派上也能访问被墙的网站（ curl 一下试试？）</p>\n</div>\n<div class=\"section\" id=\"iptables\">\n<h2><a class=\"toc-backref\" href=\"#id5\">就是多几行 iptables 规则而已 😂</a></h2>\n<p>如果汝和咱一样用了\n<a class=\"reference external\" href=\"https://github.com/PeterCxy/shadowsocks-auto-redir.sh\">PeterCxy 的简单粗暴的脚本</a>\n的话，打开那个脚本 （应该在 /opt/shadowsocks-auto-redir/shadowsocks-auto-redir )。</p>\n<p>然后找到这一行 ,在下面加上一行：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># Redirect to ss-redir port</span></span>\n<span class=\"code-line\"><span class=\"nv\">LOCAL_PORT</span><span class=\"o\">=</span><span class=\"sb\">`</span>jq -r <span class=\"s2\">\".local_port\"</span> <span class=\"nv\">$CONFIG_PATH</span><span class=\"sb\">`</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">do_iptables -t nat -A SHADOWSOCKS -p tcp -j REDIRECT --to-port <span class=\"nv\">$LOCAL_PORT</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\"># do_iptables -t nat -A PREROUTING -i &lt;汝 AP 的接口名称&gt; -p tcp -j REDIRECT --to-ports $LOCAL_PORT</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 这一行大概就是把来自汝 AP 的 TCP 连接转发给 $LOCAL_PORT 端口的 ss-redir 来处理？</span></span>\n<span class=\"code-line\">do_iptables -t nat -A PREROUTING -i wlan0_ap -p tcp -j REDIRECT --to-ports <span class=\"nv\">$LOCAL_PORT</span></span>\n</pre></div>\n<p>感觉自己还是用要学习一个 iptables 呐~</p>\n<blockquote>\n<a class=\"reference external\" href=\"http://ipset.netfilter.org/iptables.man.html\">http://ipset.netfilter.org/iptables.man.html</a></blockquote>\n<p>保存以后重新启动一下服务来试试效果呗~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 62,
      "title": " 为 MediaWiki 安装 RESTBase 和显示数学公式",
      "date_published": 1493827200,
      "body": "\n<p>为MediaWiki安装来自 <a class=\"reference external\" href=\"https://wikimediafoundation.org\">维基媒体基金会</a> 的\n<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/RESTBase\">RESTBase</a> 和顺便显示下数学公式…… 😂.</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">按常规先来解释下这些东西是啥 😂</a></h2>\n<blockquote>\n<p>RESTBase is a caching / storing API proxy backing the Wikimedia REST API.\nIts configuration is based on Swagger specs,\nand its primary storage backend is using Cassandra. It powers \"rest_v1\",\nthe Wikimedia REST content API used by VisualEditor to retrieve page HTML for editing.</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/RESTBase\">https://www.mediawiki.org/wiki/RESTBase</a></p>\n</blockquote>\n<p>嘛，大概就是给 MediaWiki 提供一层 RESTful API 方便各种应用访问（例如 VisualEditor\n和 Mathoid ……）</p>\n<p>然后偷张 WMF 自己画的结构图：</p>\n<object class=\"responsive-video\" data=\"https://upload.wikimedia.org/wikipedia/commons/a/ab/Restbase_request_flow.svg\" type=\"image/svg+xml\">\nParsoid的工作原理</object>\n<p>具体的效果大家可以先去 <a class=\"reference external\" href=\"https://www.mediawiki.org/api/rest_v1/\">MediaWiki.org</a> 瞅一眼…… 😂</p>\n<p>而 Mathoid 嘛：</p>\n<blockquote>\n<p>Mathoid is an application which takes various forms of math input and converts it to MathML + SVG or PNG output.</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Mathoid\">https://www.mediawiki.org/wiki/Mathoid</a></p>\n</blockquote>\n<p>本来 MediaWiki 是支持 latex 显示数学公式的，不过咱这里一直没出来 😂 然后就用这个了……</p>\n<blockquote>\n（立 flag）啥时候把这些东西搞进 AUR 啊……</blockquote>\n</div>\n<div class=\"section\" id=\"mathoid\">\n<h2><a class=\"toc-backref\" href=\"#id6\">安装 Mathoid</a></h2>\n<p><a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Mathoid\">https://www.mediawiki.org/wiki/Mathoid</a> &lt;- 官方的文档……</p>\n<p>首先先装上 nodejs 和 npm （装过 VisualEditor 的应该就有了啦）</p>\n<p>还有 Mathoid 的依赖，在 Arch 上大概是这些：</p>\n<blockquote>\n<p># pacman -S librsvg pkg-config</p>\n<p>然后从 AUR 装 <a href=\"https://aur.archlinux.org/packages/?O=0&amp;K=nodejs-mocha\" title=\"在 AUR 上搜索nodejs-mocha\">nodejs-mocha&nbsp;<sup>AUR</sup>&nbsp;</a></p>\n</blockquote>\n<p>然后新建个文件夹 <del>喜闻乐见 npm install ......</del></p>\n<blockquote>\n<p>npm install mathoid</p>\n<p>cd node_modules/mathoid</p>\n<p>npm test</p>\n<p>node server.js</p>\n</blockquote>\n<p>没问题的话 Mathoid 就应该跑在 <a class=\"reference external\" href=\"http://localhost:10044\">http://localhost:10044</a> 上了，<del>算了抄个 systemd 系统单元好了……</del></p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>[Unit]</span>\n<span class=\"code-line\">Description=Mediawiki Mathoid Service</span>\n<span class=\"code-line\">Documentation=https://www.mediawiki.org/wiki/Mathoid</span>\n<span class=\"code-line\">Wants=local-fs.target network.target</span>\n<span class=\"code-line\">After=local-fs.target network.target</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">[Install]</span>\n<span class=\"code-line\">WantedBy=multi-user.target</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">[Service]</span>\n<span class=\"code-line\">Type=simple</span>\n<span class=\"code-line\">User=nobody</span>\n<span class=\"code-line\">Group=nobody</span>\n<span class=\"code-line\">WorkingDirectory=/path/to/mathoid</span>\n<span class=\"code-line\">ExecStart=/usr/bin/node /path/to/mathoid/server.js</span>\n<span class=\"code-line\">KillMode=process</span>\n<span class=\"code-line\">Restart=on-success</span>\n<span class=\"code-line\">PrivateTmp=true</span>\n<span class=\"code-line\">StandardOutput=syslog</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">安装 RESTBase</a></h2>\n<p><a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Content_translation/cxserver/Setup#RESTBase_Server\">https://www.mediawiki.org/wiki/Content_translation/cxserver/Setup#RESTBase_Server</a> &lt;- 官方的文档……</p>\n<p>然后找个地方 clone 一下 RESTBase 的版本库，然后 <del>喜闻乐见 npm install ......</del> ，\n再把样例配置文件复制一份出来备用：</p>\n<blockquote>\n<p>git clone <a class=\"reference external\" href=\"https://github.com/wikimedia/restbase.git\">https://github.com/wikimedia/restbase.git</a></p>\n<p>cd restbase</p>\n<p>npm install</p>\n<p>cp config.example.yaml config.yaml</p>\n</blockquote>\n<p>接着改些字段，注意 yml 和 Python 一样要求一致的缩进 😂</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 跳过前面的一大把注释……</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">services</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\"><span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">restbase</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">module</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">hyperswitch</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">conf</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">port</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">7231</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">salt</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">secret</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">default_page_size</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">125</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">user_agent</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">RESTBase</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">ui_name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">RESTBase</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">ui_url</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://www.mediawiki.org/wiki/RESTBase</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">ui_title</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">RESTBase docs</span></span>\n<span class=\"code-line\">    <span class=\"l l-Scalar l-Scalar-Plain\">spec</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">x-request-filters</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">path</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">lib/security_response_header_filter.js</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">x-sub-request-filters</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">        <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">type</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span></span>\n<span class=\"code-line\">            <span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http</span></span>\n<span class=\"code-line\">            <span class=\"l l-Scalar l-Scalar-Plain\">options</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">            <span class=\"l l-Scalar l-Scalar-Plain\">allow</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">            <span class=\"c1\"># 设置允许哪些来源访问。</span></span>\n<span class=\"code-line\">            <span class=\"c1\"># 至少要把汝 wiki 的 API 和 Parsoid 的位置写进去。</span></span>\n<span class=\"code-line\">            <span class=\"c1\"># 一会儿还要把 Mathoid 的位置写进去</span></span>\n<span class=\"code-line\">            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pattern</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost/w/api.php</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">forward_headers</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span></span>\n<span class=\"code-line\">            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pattern</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:10044</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">forward_headers</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span></span>\n<span class=\"code-line\">            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pattern</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:8000</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">forward_headers</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span></span>\n<span class=\"code-line\">            <span class=\"c1\"># 这行是默认的，大概是允许所有 HTTPS 连接？</span></span>\n<span class=\"code-line\">            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">pattern</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/^https?:\\/\\//</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">paths</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">        <span class=\"c1\"># 汝 wiki 的域名，像设置 Parsoid 时一样。</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">/{domain:wiki.yoitsu.moe}</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">            <span class=\"l l-Scalar l-Scalar-Plain\">x-modules</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">            <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">path</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">projects/example.yaml</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">options</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">action</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                    <span class=\"c1\"># 汝 wiki api.php 的位置</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">apiUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://wiki.yoitsu.moe/w/api.php</span></span>\n<span class=\"code-line\">                    <span class=\"c1\"># RESTBase URI，默认像这个样子……</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">baseUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"{{'http://{domain}:7231/{domain}/v1'}}\"</span></span>\n<span class=\"code-line\">                    <span class=\"c1\"># 咱搞的像这个样子（暂时的）</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">baseUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"{{'http://localhost:7231/{domain}/v1'}}\"</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">parsoid</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                    <span class=\"c1\"># 汝的 Parsoid 的位置</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">host</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:8000</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># 只有需要 Mathoid 时需要这一段，把汝的 Mathoid 的位置写进去。</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">mathoid</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">host</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:10044</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">table</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">backend</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqlite</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">dbname</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">db.sqlite3</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">pool_idle_timeout</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">20000</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">retry_delay</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">250</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">retry_limit</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10</span></span>\n<span class=\"code-line\">                    <span class=\"l l-Scalar l-Scalar-Plain\">show_sql</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">        <span class=\"c1\"># 要搞 Mathoid 的贴上这一段。</span></span>\n<span class=\"code-line\">        <span class=\"c1\"># 咱不知道为啥能用 ……</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">/{domain:wikimedia.org}</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">        <span class=\"l l-Scalar l-Scalar-Plain\">x-modules</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">path</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">projects/wikimedia.org.yaml</span></span>\n<span class=\"code-line\">            <span class=\"l l-Scalar l-Scalar-Plain\">options</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">              <span class=\"l l-Scalar l-Scalar-Plain\">action</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># 汝 wiki api.php 的位置</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">apiUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">https://wiki.yoitsu.moe/w/api.php</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># RESTBase URI，默认像这个样子……</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">baseUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"{{'http://{domain}:7231/{domain}/v1'}}\"</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># 咱搞的像这个样子（暂时的）</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">baseUriTemplate</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"{{'http://localhost:7231/{domain}/v1'}}\"</span></span>\n<span class=\"code-line\">              <span class=\"l l-Scalar l-Scalar-Plain\">parsoid</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># 汝的 Parsoid 的位置</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">host</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:8000</span></span>\n<span class=\"code-line\">              <span class=\"l l-Scalar l-Scalar-Plain\">mathoid</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                <span class=\"c1\"># 汝的 Mathoid 的位置</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">host</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">http://localhost:10044</span></span>\n<span class=\"code-line\">              <span class=\"l l-Scalar l-Scalar-Plain\">table</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">backend</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">sqlite</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">dbname</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">db.sqlite3</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">pool_idle_timeout</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">20000</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">retry_delay</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">250</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">retry_limit</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">10</span></span>\n<span class=\"code-line\">                <span class=\"l l-Scalar l-Scalar-Plain\">show_sql</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">false</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\"># Finally, a standard service-runner config.</span></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">info</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">restbase</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">logging</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">name</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">restbase</span></span>\n<span class=\"code-line\"><span class=\"l l-Scalar l-Scalar-Plain\">level</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">info</span></span>\n</pre></div>\n<p>保存然后 npm start 🌕</p>\n<p>如果汝不是通过远程访问执行的命令,可以在浏览器上打开 <span class=\"tag\">http://localhost:7231</span> 来进行测试.试着加载 <span class=\"tag\">http://localhost:7231/汝设置的域名/v1/</span> 试试呗~</p>\n<p>或者祭出 curl ：</p>\n<blockquote>\ncurl <a class=\"reference external\" href=\"http://localhost:7231\">http://localhost:7231</a>/汝设置的域名/v1/page/html/汝wiki上的一个页面</blockquote>\n<p>成功的话会看到汝那个页面的 HTML 代码。</p>\n<p><del>再抄个 systemd 系统单元好了……</del></p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>[Unit]</span>\n<span class=\"code-line\">Description=Mediawiki RESTBase Service</span>\n<span class=\"code-line\">Documentation=https://www.mediawiki.org/wiki/RESTBase</span>\n<span class=\"code-line\">Wants=local-fs.target network.target</span>\n<span class=\"code-line\">After=local-fs.target network.target</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">[Install]</span>\n<span class=\"code-line\">WantedBy=multi-user.target</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">[Service]</span>\n<span class=\"code-line\">Type=simple</span>\n<span class=\"code-line\">User=nobody</span>\n<span class=\"code-line\">Group=nobody</span>\n<span class=\"code-line\">WorkingDirectory=/path/to/restbase</span>\n<span class=\"code-line\">ExecStart=/usr/bin/node /path/to/restbase/server.js</span>\n<span class=\"code-line\">KillMode=process</span>\n<span class=\"code-line\">Restart=on-success</span>\n<span class=\"code-line\">PrivateTmp=true</span>\n<span class=\"code-line\">StandardOutput=syslog</span>\n</pre></div>\n<p>然后启动这两个服务。</p>\n</div>\n<div class=\"section\" id=\"localsettings-php\">\n<h2><a class=\"toc-backref\" href=\"#id8\">设置 LocalSettings.php</a></h2>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"x\"># $wgVisualEditorRestbaseURL 大概像 http://汝RESTBase服务的位置/汝wiki的域名/v1/page/html/</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgVisualEditorRestbaseURL = \"http://localhost:7321/wiki.yoitsu.moe/v1/page/html/\";</span></span>\n<span class=\"code-line\"><span class=\"x\"># $wgVisualEditorFullRestbaseURL 大概像 http://汝RESTBase服务的位置/汝wiki的域名/</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgVisualEditorFullRestbaseURL = \"http://localhost:7321/wiki.yoitsu.moe/\";</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"x\"># 首先加载 Math 扩展</span></span>\n<span class=\"code-line\"><span class=\"x\">require_once \"$IP/extensions/Math/Math.php\";</span></span>\n<span class=\"code-line\"><span class=\"x\"># 设置渲染方式为源代码和 MathML</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgMathValidModes = array( 'source' ,'mathml');</span></span>\n<span class=\"code-line\"><span class=\"x\"># 设置默认使用 MathML</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgDefaultUserOptions['math'] = 'mathml';</span></span>\n<span class=\"code-line\"><span class=\"x\"># 汝的 Mathoid 服务的地址</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgMathMathMLUrl = 'http://localhost:10044/';</span></span>\n<span class=\"code-line\"><span class=\"x\"># 如果汝用了咱上面那种糊法，$wgMathFullRestbaseURL 这么写 🤦‍♀️</span></span>\n<span class=\"code-line\"><span class=\"x\">$wgMathFullRestbaseURL= 'http://localhost:7231/wikimedia.org/';</span></span>\n</pre></div>\n<p>如果需要的话运行下维护脚本。</p>\n<hr class=\"docutils\">\n<p>最后的效果大概像这样：</p>\n<img alt=\"RESTBase 效果\" class=\"responsive-img materialboxed\" src=\"https://blog.yoitsu.moe/images/restbase/1.png\">\n<p>两个编辑器之间的切换更顺畅了 😂</p>\n<blockquote>\n<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/2017_wikitext_editor\">2017 维基文本编辑器</a> ： 😌</blockquote>\n<img alt=\"RESTBase 效果 2\" class=\"responsive-img materialboxed\" src=\"/images/restbase/0.png\">\n<p>公式出来了 😂</p>\n<blockquote>\n下面的乐谱靠的是 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Extension:Score\">https://www.mediawiki.org/wiki/Extension:Score</a> 啦 😂</blockquote>\n<p>🤦‍ 不过介于 RESTBase 本身还在开发，所以小心翻车……</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 61,
      "title": " 在 Arch Linux 上安装 Ghost 博客系统",
      "date_published": 1455379200,
      "body": "\n<p>先祝大家 <ruby><rb>情人节</rb><rp>(</rp><rt>烧烤节</rt><rp>)</rp></ruby> 快乐~ (2333</p>\n<p><del>为了让旅伴发发牢骚,就装了一个 Ghost 博客系统咯~</del></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>先祝大家 <ruby><rb>情人节</rb><rp>(</rp><rt>烧烤节</rt><rp>)</rp></ruby> 快乐~ (2333</p>\n<p><del>为了让旅伴发发牢骚,就装了一个 Ghost 博客系统咯~</del></p>\n\n<div class=\"section\" id=\"ghost\">\n<h2><a class=\"toc-backref\" href=\"#id7\">汝连啥是 Ghost 都不知道?</a></h2>\n<blockquote>\n<p>Ghost是用JavaScript编写的博客平台，基于MIT许可证开放源代码。Ghost的设计主旨是简化个人网站发布以及网上出版的过程。</p>\n<p>Ghost是一款个人博客系统，它是使用Node.js语言和MySQL数据库开发的，同时支持MySQL、MariaDB、SQLite和PostgreSQL。用户可以在支持Node.js的服务器上使用自己的博客。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/Ghost_%28%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%29\">Wikipedia 上的 \"Ghost (博客平台)\" 条目</a></p>\n</blockquote>\n<p>简单来说,Ghost 是一套博客平台,是一套博客平台,是一套博客平台! <del>(重要的事情说三遍😂😂)</del></p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id8\">要安装 Ghost 需要啥?</a></h2>\n<p>因为 Ghost 是用 Node.js 写成的,所以要安装 Ghost , 汝需要先装上 Node.js 和 npm 呗~</p>\n<div class=\"tag warning fg-white compound\">\n<p class=\"compound-first\">截至写这篇文章时,Arch Linux 官方源里 Node.js 的版本是 5.6.0 ,而 Ghost 的计划是只支持 Node.js 的 <ruby><rb>LTS</rb><rp>(</rp><rt>长期支援</rt><rp>)</rp></ruby> 版本, 而 Node.js 的长期支援版本是 0.10x,0.12x和4.2 .所以嘛......</p>\n<p class=\"compound-last\">这里(和咱在 AUR 的 ghost 软件包里)用到了一个环境变量 <span class=\"tag\">GHOST_NODE_VERSION_CHECK=false</span> 来不让 ghost 来检查 node 的版本,在 Node.js 下一个 LTS 版本(6.x)出来前先凑合一下呗~</p>\n</div>\n<p>于是先安装 <a class=\"reference external\" href=\"https://www.archlinux.org/packages/?name=nodejs\">nodejs</a> 和 <a class=\"reference external\" href=\"https://www.archlinux.org/packages/?name=npm\">npm</a> :</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo pacman -S nodejs npm</span>\n</pre></div>\n<p>如果汝认为自己的博客会做的比较大,需要一个数据库系统的话,咱推荐 <a class=\"reference external\" href=\"https://www.archlinux.org/packages/?name=mariadb\">mariadb</a> 呗~</p>\n</div>\n<div class=\"section\" id=\"aur-ghost\">\n<h2><a class=\"toc-backref\" href=\"#id9\">从 AUR 安装 Ghost</a></h2>\n<p>然后从 AUR 安装 <a href=\"https://aur.archlinux.org/packages/?O=0&amp;K=ghost\" title=\"在 AUR 上搜索ghost\">ghost&nbsp;<sup>AUR</sup>&nbsp;</a> (这个包是咱更新的,有问题尽管 pia 咱~).</p>\n<p>如果汝有 yaourt 的话, <span class=\"tag\">yaourt -S ghost</span></p>\n<p>这会把 ghost 安装在 <span class=\"tag\">/srv/ghost/</span> 目录,由于创建的 ghost 用户不能通过 shell 登录,要修改这个目录的文件的话:</p>\n<ul>\n<li><p class=\"first\">修改 <span class=\"tag\">/etc/passwd</span> 文件:</p>\n<blockquote>\n<p>ghost:x:738:738::/srv/ghost:/usr/bin/nologin</p>\n<p>把 <span class=\"tag\">/usr/bin/nologin</span> 换成 <span class=\"tag\">/bin/bash</span> ,保存.</p>\n<p>这样以后可以通过 <span class=\"tag\">sudo su ghost</span> 切换到 ghost 用户对 /srv/ghost 目录写入了.</p>\n</blockquote>\n</li>\n<li><p class=\"first\">通过下面的命令以 ghost 用户运行一条命令:</p>\n<blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># su 后面的 -s 参数可以制定切换用户后运行的 shell ,</span></span>\n<span class=\"code-line\"><span class=\"c1\"># -c 参数可以指定要运行的命令.</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">sudo su ghost -s /bin/bash -c <span class=\"s2\">\"此处是汝的命令,记得带上引号\"</span></span>\n</pre></div>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id10\">通过源代码安装 Ghost</a></h2>\n<p>首先把 ghost 的源代码下载下来并解开:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 这时最新的版本是0.7.6.</span></span>\n<span class=\"code-line\">wget https://ghost.org/zip/ghost-0.7.6.zip</span>\n<span class=\"code-line\">unzip ghost-0.7.6.zip</span>\n<span class=\"code-line\"><span class=\"nb\">cd</span> ghost-0.7.6</span>\n</pre></div>\n<p>接下来通过 npm 安装需要的依赖,因为上面的提示嘛~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nv\">GHOST_NODE_VERSION_CHECK</span><span class=\"o\">=</span><span class=\"nb\">false</span> npm install</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">修改配置文件</a></h2>\n<p>如果是通过 AUR 安装的,配置文件位于 <span class=\"tag\">/srv/ghost/config.js</span></p>\n<p>如果是通过源代码安装的,从目录中先复制一份样例出来呗~</p>\n<blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>cp config.example.js config.js</span>\n</pre></div>\n</blockquote>\n<p>这里的例子是修改 <span class=\"tag\">Production</span> 一节\n(这一节是汝的 Ghost 实际运行时的配置,下面的 Development 一节是开发时的配置)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">    <span class=\"c1\">// ### Production</span></span>\n<span class=\"code-line\">    <span class=\"c1\">// When running Ghost in the wild, use the production environment.</span></span>\n<span class=\"code-line\">    <span class=\"c1\">// Configure your URL and mail settings here</span></span>\n<span class=\"code-line\">    <span class=\"nx\">production</span><span class=\"o\">:</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">        <span class=\"c1\">// 汝的网址?</span></span>\n<span class=\"code-line\">        <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">'http://localhost'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"nx\">mail</span><span class=\"o\">:</span> <span class=\"p\">{},</span></span>\n<span class=\"code-line\">        <span class=\"c1\">// 汝想使用那种数据库?</span></span>\n<span class=\"code-line\">        <span class=\"c1\">// 下面的例子是 sqlite3 数据库,配置文件中还有设置 MariaDB 数据库 的样例</span></span>\n<span class=\"code-line\">        <span class=\"nx\">database</span><span class=\"o\">:</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">            <span class=\"nx\">client</span><span class=\"o\">:</span> <span class=\"s1\">'sqlite3'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">            <span class=\"nx\">connection</span><span class=\"o\">:</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'/content/data/ghost.db'</span><span class=\"p\">)</span></span>\n<span class=\"code-line\">            <span class=\"p\">},</span></span>\n<span class=\"code-line\">            <span class=\"nx\">debug</span><span class=\"o\">:</span> <span class=\"nx\">falseProduction</span></span>\n<span class=\"code-line\">        <span class=\"p\">},</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">        <span class=\"nx\">server</span><span class=\"o\">:</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">            <span class=\"nx\">host</span><span class=\"o\">:</span> <span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">            <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"s1\">'2368'</span></span>\n<span class=\"code-line\">        <span class=\"p\">}</span></span>\n<span class=\"code-line\">    <span class=\"p\">},</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id12\">如果汝的 Ghost 和汝进行操作的电脑是同一个</a></h2>\n<p>通过下面的命令来测试汝的 Ghost 呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nb\">cd</span> /path/to/ghost</span>\n<span class=\"code-line\"><span class=\"nv\">GHOST_NODE_VERSION_CHECK</span><span class=\"o\">=</span><span class=\"nb\">false</span></span>\n</pre></div>\n<p>如果汝是从 AUR 安装的,可以通过 Systemd 来启动</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo systemctl start ghost</span>\n</pre></div>\n<p>现在打开 <span class=\"tag\">http://localhost:2368</span> 看看效果呗~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id13\">如果汝的 Ghost 和汝进行操作的电脑不是同一个</a></h2>\n<p>比如汝在 VPS 上安装了 Ghost,就需要用一个 web服务器通过反向代理来访问呗~</p>\n<p>首先修改 <span class=\"tag\">config.js</span> 把 Production 中的 URL 换成汝的网址啦~</p>\n<p>如果汝在用 Nginx, 把这一段增加到汝的 <span class=\"tag\">server</span> 块中:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>location / {</span>\n<span class=\"code-line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>\n<span class=\"code-line\">      proxy_set_header Host $http_host;</span>\n<span class=\"code-line\">      proxy_set_header X-Forwarded-Proto $scheme;</span>\n<span class=\"code-line\">      proxy_pass http://127.0.0.1:2368;</span>\n<span class=\"code-line\">      # 汝的更多自定义设置</span>\n<span class=\"code-line\">}</span>\n</pre></div>\n<p>如果汝在用 Apache, 把下面一段添加到汝的 httpd.conf 的 vhost 段中(首先要启用 mod_proxy 模块~):</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>ProxyPass / http://localhost:2368/</span>\n<span class=\"code-line\">ProxyPassReverse / http://localhost:2368/</span>\n<span class=\"code-line\">ProxyHTMLURLMap http://localhost:2368/ /</span>\n<span class=\"code-line\">RequestHeader set X-Forwarded-For $proxy_add_x_forwarded_for</span>\n<span class=\"code-line\">RequestHeader set Host $host</span>\n<span class=\"code-line\">RequestHeader set X-Forwarded-Proto $scheme</span>\n</pre></div>\n<p>然后重新启动 ghost 和 web 服务器以后试试通过汝的网址访问?</p>\n<p>打开 <span class=\"tag\">http://汝的ghost网址/ghost/</span> 开始设置汝的 Ghost 博客呗~</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id14\">参考资料</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://support.ghost.org/developers\">Ghost Blog 文档</a></li>\n<li><a class=\"reference external\" href=\"http://httpd.apache.org/docs/2.4/mod/mod_proxy.html\">Apache httpd mod_proxy 文档</a></li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 60,
      "title": " 为MediaWiki安装可视化编辑器",
      "date_published": 1470758400,
      "body": "\n<p>为MediaWiki安装来自 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor\">维基媒体基金会</a> 的 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor\">可视化编辑器</a> .</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>为MediaWiki安装来自 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor\">维基媒体基金会</a> 的 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor\">可视化编辑器</a> .</p>\n<!-- PELICAN_END_SUMMARY\n\n2016年8月9日更新：配置文件现在是 yaml 啦~ -->\n\n<div class=\"section\" id=\"hold\">\n<h2><a class=\"toc-backref\" href=\"#id10\">连维基百科都要Hold不住啦~</a></h2>\n<blockquote>\n<p>许多新用户不会着手大幅度修改，而只是做些细节调整，不过仅仅阅读源代码就必须学标记语言了。当我们的用户在演示操作时，这把他们吓走了。</p>\n<p>早在 2004 年，社群开始一再认识到必须采用更好的编辑方式。因为人们的请求，更重要的是他们的需要，所以我们开发了可视化编辑器。</p>\n<p>Wiki 标记语言让新人害怕，这种程度会随着其他站点的迁离而加剧。如果我们不开发可视化编辑器，那么图表的走势会在接下来五年中变得更加糟糕。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor/Portal/Why/zh\">MediaWiki.org</a></p>\n</blockquote>\n<p>所以他们才 <del>痛定思痛</del> 决定开发可视化编辑器么😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">开始之前-检查一下要求</a></h2>\n<p>可视化编辑器(下面就说VisualEditor呗~)还需要一个叫\n<a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/VisualEditor/Portal/Why/zh\">Parsoid</a>\n的程序来承担把wiki标记转化成html的任务啦(看下图)~,所以需要服务器来运行它呐~</p>\n<img alt=\"Parsoid的工作原理\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Parsoid_HTML-RDFa_content_model.svg.png\">\n</div>\n<div class=\"section\" id=\"parsoid-ubuntu-14-debian-7\">\n<h2><a class=\"toc-backref\" href=\"#id12\">安装Parsoid(Ubuntu 14+ / Debian 7+ )</a></h2>\n<p>上游的指南在这(好好学英语呗~) <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Parsoid/Setup\">https://www.mediawiki.org/wiki/Parsoid/Setup</a></p>\n<p>Ubuntu和Debian系统的话直接添加MediaWiki.org的软件源然后通过apt安装就好了啦~</p>\n<p>首先添加MediaWiki.org的GPG公钥:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo apt-key advanced --keyserver keys.gnupg.net --recv-keys 664C383A3566A3481B942F007A322AC6E84AFDD2</span>\n</pre></div>\n<p>然后添加Parsoid源:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo <span class=\"nb\">echo</span> <span class=\"s2\">\"deb https://releases.wikimedia.org/debian jessie-mediawiki main\"</span> &gt; /etc/apt/sources.list.d/parsoid.list</span>\n</pre></div>\n<p>安装需要的软件包:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo apt-get update <span class=\"o\">&amp;&amp;</span> sudo apt-get install curl parsoid</span>\n</pre></div>\n<p>然后看下下面一节的内容修改一下配置文件呗~</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id13\">其它系统?手动安装呗~</a></h2>\n<p>上游的指南在这(还是要好好学英语呗~) <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Parsoid/Developer_Setup\">https://www.mediawiki.org/wiki/Parsoid/Developer_Setup</a></p>\n<p>首先汝要装上Nodejs(&gt;0.8,建议0.10或更新的版本呐~),还有git.\n具体的安装方法为了避免降低正交性 <del>(其实是系统太多不好写......)</del>,就麻烦汝自己去找了呐~</p>\n<blockquote>\n「呵。咱是贤狼，不是神呐。如果汝开始会期待起咱能够泄露天机给汝，那咱就得从汝眼前消失了呗。」</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>node --version <span class=\"c1\"># 如果是Debian或Ubuntu ,输入 nodejs --version</span></span>\n</pre></div>\n<p>然后用git克隆版本库呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>git clone https://gerrit.wikimedia.org/r/p/mediawiki/services/parsoid</span>\n</pre></div>\n<p>用npm安装上相应的依赖:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>npm install</span>\n</pre></div>\n<p>然后看下面一节的内容修改一下配置文件呗~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id14\">修改配置文件</a></h2>\n<blockquote>\n<p>如果是通过软件源安装的,配置文件位于 <span class=\"tag\">/etc/mediawiki/parsoid/config.yaml</span></p>\n<p>如果是通过git下载的,从parsoid目录中先复制一份样例出来呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>cp config.example.yaml config.yaml</span>\n</pre></div>\n</blockquote>\n<p>打开配置文件,找到这一段内容,然后改它~:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"l l-Scalar l-Scalar-Plain\">mwApis</span><span class=\"p p-Indicator\">:</span></span>\n<span class=\"code-line\">    <span class=\"p p-Indicator\">-</span> <span class=\"c1\"># This is the only required parameter,</span></span>\n<span class=\"code-line\">      <span class=\"c1\"># the URL of you MediaWiki API endpoint.</span></span>\n<span class=\"code-line\">      <span class=\"l l-Scalar l-Scalar-Plain\">uri</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'http://localhost/w/api.php'</span></span>\n<span class=\"code-line\">      <span class=\"c1\"># The \"domain\" is used for communication with Visual Editor</span></span>\n<span class=\"code-line\">      <span class=\"c1\"># and RESTBase.  It defaults to the hostname portion of</span></span>\n<span class=\"code-line\">      <span class=\"c1\"># the `uri` property below, but you can manually set it</span></span>\n<span class=\"code-line\">      <span class=\"c1\"># to an arbitrary string.</span></span>\n<span class=\"code-line\">      <span class=\"l l-Scalar l-Scalar-Plain\">domain</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">'localhost'</span>  <span class=\"c1\"># optional</span></span>\n</pre></div>\n<p>其中\"uri\"对应汝的wiki的api.php的位置,\"domain\"是汝的域名啦~. <del>\"prefix\"可以自己起一个(反正因为换了API也没用啦~,不过测试时可能用得到)</del> Prefix 真的没了……</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id15\">启动服务</a></h2>\n<div class=\"section\" id=\"id7\">\n<h3><a class=\"toc-backref\" href=\"#id16\">从软件源安装的?</a></h3>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo systemctl start parsoid <span class=\"c1\"># Debian Jessie ,用Systemd启动</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">sudo service parsoid start <span class=\"c1\"># Debian Wheezy 或Ubuntu ,用init.d脚本启动.</span></span>\n</pre></div>\n<p>如果汝不是通过远程访问执行的命令,可以在浏览器上打开 <span class=\"tag\">http://localhost:8142</span> 来进行测试.试着加载 <span class=\"tag\">http://localhost:8142/汝设置的前缀/汝的wiki上的一个页面</span> 试试呗~</p>\n</div>\n<div class=\"section\" id=\"git\">\n<h3><a class=\"toc-backref\" href=\"#id17\">用git安装的?</a></h3>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>npm start</span>\n</pre></div>\n<p>或者:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>node bin/server.js</span>\n</pre></div>\n<p>可以用screen一类的工具让Parsoid在后台运行~</p>\n<p>或者可以自己写一个 Systemd 单元 （听说这样更清真？</p>\n<p>咱自己写了一个在这: <a class=\"reference external\" href=\"https://gist.github.com/KenOokamiHoro/44d6e1b20f5bad4a0f56e9e225d2049a\">https://gist.github.com/KenOokamiHoro/44d6e1b20f5bad4a0f56e9e225d2049a</a></p>\n<p>如果汝不是通过远程访问执行的命令,可以在浏览器上打开 <span class=\"tag\">http://localhost:8000</span> 来进行测试.试着加载 <span class=\"tag\">http://localhost:8000/汝设置的前缀/汝的wiki上的一个页面</span> 试试呗~</p>\n</div>\n<div class=\"section\" id=\"id8\">\n<h3><a class=\"toc-backref\" href=\"#id18\">修改监听地址便于远程测试</a></h3>\n<p>改这一段:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># Allow override of port/interface:</span></span>\n<span class=\"code-line\"><span class=\"c1\">#serverPort: 8000</span></span>\n<span class=\"code-line\"><span class=\"c1\">#serverInterface: '127.0.0.1'</span></span>\n</pre></div>\n<p>反注释最后一行并改成0.0.0.0,就可以通过 <span class=\"tag\">http://服务器的IP地址:8000</span> 访问啦~</p>\n</div>\n</div>\n<div class=\"section\" id=\"visualeditor\">\n<h2><a class=\"toc-backref\" href=\"#id19\">安装VisualEditor扩展</a></h2>\n<p>上游的指南在这: <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Extension:VisualEditor\">https://www.mediawiki.org/wiki/Extension:VisualEditor</a></p>\n<p>首先从 <a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Special:ExtensionDistributor/VisualEditor\">这里</a> 获得扩展然后上传到汝的wiki上的extensions目录呗~</p>\n<p>然后修改汝的LocalSettings.php:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>require_once \"$IP/extensions/VisualEditor/VisualEditor.php\";</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">// 反注释下一行来默认启用可视化编辑器</span>\n<span class=\"code-line\">#$wgDefaultUserOptions['visualeditor-enable'] = 1;</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">// 反注释下一行来启用测试中的功能</span>\n<span class=\"code-line\">#$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">//在除了主名字空间以外的名字空间中也启用可视化编辑器(下面的例子是用户名字空间)</span>\n<span class=\"code-line\">$wgVisualEditorNamespaces=array_merge($wgContentNamespaces,array( NS_USER ));</span>\n</pre></div>\n<p>完整的设置选项可以在扩展页面上找到.</p>\n<p>然后在汝的wiki上试试看呗~</p>\n<img alt=\"VisualEditor效果\" class=\"materialboxed responsive-img\" src=\"/images/visualeditor-test.png\">\n</div>\n\n  </div>"
    },
    {
      "post_id": 59,
      "title": " 新约伊兹的萌狼乡手札诞生全过程伪实录",
      "date_published": 1453080900,
      "body": "\n<p>说好的下一期来啦~,新的\"约伊兹的萌狼乡手札\"是怎么样诞生呐~马上就告诉汝呗~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>说好的下一期来啦~,新的\"约伊兹的萌狼乡手札\"是怎么样诞生呐~马上就告诉汝呗~</p>\n\n<div class=\"section\" id=\"pelican\">\n<h2><a class=\"toc-backref\" href=\"#id5\">安装Pelican然后进行初始设置</a></h2>\n<p>在咱写这篇文章时, <a class=\"reference external\" href=\"/links.html#farsserfc\">farsserfc</a> 已经把Pelican打好包放进Arch Linux 官方软件仓库啦好棒~</p>\n<p>Arch Linux用户可以这样安装:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo pacman -S pelican</span>\n</pre></div>\n<p>其它操作系统可以通过pip安装:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo pip install pelican</span>\n</pre></div>\n<p>接着运行设置程序建立一个工作文件夹:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>pelican-quickstart</span>\n</pre></div>\n<p>接着开始挖坑呗~,用 <a class=\"reference external\" href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a> 或 <a class=\"reference external\" href=\"http://wowubuntu.com/markdown/\">Markdown</a> 开始写文章然后放到 <span class=\"tag\">contents</span> 文件夹里,像这样:</p>\n<p>(reStructuredText)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"gh\">这里是标题</span></span>\n<span class=\"code-line\"><span class=\"gh\">===========================================</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"nc\">:lang:</span> <span class=\"nf\">这里填语言</span></span>\n<span class=\"code-line\"><span class=\"nc\">:date:</span> <span class=\"nf\">写文章的日期</span></span>\n<span class=\"code-line\"><span class=\"nc\">:Category:</span> <span class=\"nf\">分类</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">这里是内容</span>\n</pre></div>\n<p>(Markdown)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Title: 这里是标题</span>\n<span class=\"code-line\">date: 写文章的日期</span>\n<span class=\"code-line\">Category: 分类</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">这里是内容</span>\n</pre></div>\n<p>然后运行一个命令来测试</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>make html <span class=\"c1\"># 生成html</span></span>\n<span class=\"code-line\">make serve <span class=\"c1\"># 在127.0.0.1:8000 运行一个测试服务器.</span></span>\n</pre></div>\n<p>然后打开浏览器输入 <span class=\"tag\">localhost:8000</span> ，你就能看到一个初生的很 <ruby><rb>简洁</rb><rp>(</rp><rt>难看</rt><rp>)</rp></ruby> 的博客了，不过不要担心，它是只丑小鸭，很快就会像天鹅般美丽(真的么?)。</p>\n</div>\n<div class=\"section\" id=\"ruby-rb-rb-rp-rp-rt-rt-rp-rp-ruby-pelican\">\n<h2><a class=\"toc-backref\" href=\"#id6\"><ruby><rb>修改</rb><rp>(</rp><rt>调教</rt><rp>)</rp></ruby> Pelican的主题</a></h2>\n<p>可能是一时抽风没找到合适的Material Design风格的框架，<del>于是走上了Metro UI CSS的不归路......</del></p>\n<p>Metro UI CSS的项目主页在这里 <a class=\"reference external\" href=\"http://metroui.org.ua\">http://metroui.org.ua</a></p>\n<p>咱拿了pelican内置的simple主题做起步,把Metro UI CSS文件夹里的 <span class=\"tag\">/css</span> 和 <span class=\"tag\">/js</span> 复制到主题的 <span class=\"tag\">/statics</span> 文件夹里.</p>\n<p>现在的文件夹结构大概像这样:</p>\n<pre><span class=\"code-line\"></span>\n<span class=\"code-line\"><span style=\"color:blue;font-weight:bold;\">.</span></span>\n<span class=\"code-line\">├── <span style=\"color:blue;font-weight:bold;\">cache</span>             生成頁面的 pickle 緩存</span>\n<span class=\"code-line\">├── <span style=\"color:blue;font-weight:bold;\">content</span>           讀取的全部內容</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">&lt;categories&gt;</span>      按分類存放的文章</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">pages</span>             像 About 這樣的固定頁面</span>\n<span class=\"code-line\">│   └── <span style=\"color:blue;font-weight:bold;\">static</span>            文章內用到的靜態內容</span>\n<span class=\"code-line\">├── <span style=\"color:blue;font-weight:bold;\">drafts</span>            文章的草稿箱</span>\n<span class=\"code-line\">├── <span style=\"color:green;font-weight:bold;\">Makefile</span>          生成用的 makefile</span>\n<span class=\"code-line\">├── <span style=\"color:green;font-weight:bold;\">pelicanconf.py</span>    測試時用的快速 Pelican 配置</span>\n<span class=\"code-line\">├── <span style=\"color:green;font-weight:bold;\">publishconf.py</span>    部署時用的耗時 Pelican 配置</span>\n<span class=\"code-line\">├── <span style=\"color:teal;font-weight:bold;\">output</span>          -&gt; <span style=\"color:blue;font-weight:bold;\">../kenookamihoro.github.io</span></span>\n<span class=\"code-line\">├── <span style=\"color:teal;font-weight:bold;\">plugins</span>         -&gt; <span style=\"color:blue;font-weight:bold;\">../plugins</span></span>\n<span class=\"code-line\">└── <span style=\"color:teal;font-weight:bold;\">theme</span>           -&gt; <span style=\"color:blue;font-weight:bold;\">../yoitsu</span></span>\n</pre><p>然后这个内容 repo 中的三个符号链接分别指向三个子 repo（为啥没用 <span class=\"tag\">git submodule</span> ? 因为咱技术不精还不会用......）。\ntheme 指向 <a class=\"reference external\" href=\"https://github.com/KenOokamiHoro/yoitsu\">yoitsu</a> ，是咱修改过的 pelican 主题啦。\nplugins 指向 <a class=\"reference external\" href=\"https://github.com/getpelican/pelican-plugins\">pelican-plugins</a>\n最后 output 指向 <a class=\"reference external\" href=\"https://github.com/KenOokamiHoro/kenookamihoro.github.io\">kenookamihoro.github.io</a> 也就是发布的静态网站啦。</p>\n<p>而主题文件夹的结构大概像这样：</p>\n<pre><span class=\"code-line\"></span>\n<span class=\"code-line\"><span style=\"color:blue;font-weight:bold;\">.</span></span>\n<span class=\"code-line\">├── <span style=\"color:blue;font-weight:bold;\">static</span>         主题中用到的静态文件，例如js和css</span>\n<span class=\"code-line\">├── <span style=\"color:blue;font-weight:bold;\">templates</span>      供jinja使用的模板页面</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">archives.html</span>     文章归档</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">article.html</span>      每个文章</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">author.html</span>       作者</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">base.html</span>         所有模板的基础</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">category.html</span>     分类</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">index.html</span>        首页</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">page.html</span>         每个页面</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">pageination.html</span>  分页</span>\n<span class=\"code-line\">│   ├── <span style=\"color:blue;font-weight:bold;\">search.html</span>       搜索</span>\n<span class=\"code-line\">│   └── <span style=\"color:blue;font-weight:bold;\">tag.html</span>          标签</span>\n<span class=\"code-line\">└──</span>\n<span class=\"code-line\"></span>\n</pre><p>然后记得修改pelican.conf告诉Pelican那些页面是模板那些页面是直接生成的呐~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># DIRECT_TEMPLATES 告诉Pelican哪些页面是直接用来生成特定页面的......</span></span>\n<span class=\"code-line\"><span class=\"n\">DIRECT_TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"s1\">'archives'</span><span class=\"p\">,</span> <span class=\"s1\">'search'</span><span class=\"p\">))</span></span>\n</pre></div>\n<p>接下来开始调教主题呗~,直接给出官方的教程呗~ <a class=\"reference external\" href=\"http://docs.getpelican.com/en/3.6.3/themes.html\">Pelican doc:Creating Themes</a></p>\n<p>经过一番 <ruby><rb>仔细</rb><rp>(</rp><rt>无脑</rt><rp>)</rp></ruby> 调教以后,就成了汝等现在看到的样子了呐~</p>\n<p>PS:咱自己做的这套主题还木有到能拿来复用的程度(原因主要是咱有很多是直接写死在主题里的设置),所以这又是一个坑呗~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">装插件</a></h2>\n<p>作为一套博客系统,Pelican自然有很多的插件可以安装呐~,不信的话去看看`pelican-plugins里有多少插件呗~ &lt;<a class=\"reference external\" href=\"https://github.com/getpelican/pelican-plugins\">https://github.com/getpelican/pelican-plugins</a>&gt;`_</p>\n<p>咱启用的插件有这些:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"n\">PLUGINS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"better_codeblock_line_numbering\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'tipue_search'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'neighbors'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'series'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s2\">\"render_math\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'extract_toc'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'tag_cloud'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'sitemap'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'summary'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'bootstrapify'</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">           <span class=\"s1\">'twitter_bootstrap_rst_directives'</span><span class=\"p\">]</span></span>\n</pre></div>\n<p>具体的设置流程嘛,请允许咱引用一下 <a class=\"reference external\" href=\"http://farseerfc.me/redesign-pelican-theme.html#pelican-restructuredtext\">farseerfc.me:重新設計了 Pelican 的主題與插件</a> 呗~</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">实现动态格言</a></h2>\n<p>动态格言的实现来自 <a class=\"reference external\" href=\"/links.html#fiveyellowmice\">fiveyellowmice</a> 啦~(咱不是JavaScript专家呐~,就不谈具体的实现了呗~)</p>\n<p>首先是一段修改某一个元素的类的JavaScript(当然还需要 <a class=\"reference external\" href=\"http://julian.com/research/velocity/\">velocity</a> ):</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span> <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">\"/theme/js/velocity.min.js\"</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"> <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\"> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"DOMContentLoaded\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">   <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".menu-button\"</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"touchstart\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">     <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".menu-wrapper\"</span><span class=\"p\">).</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s2\">\"trigger\"</span><span class=\"p\">);</span></span>\n<span class=\"code-line\">     <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".nav-items\"</span><span class=\"p\">).</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"s2\">\":visible\"</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                     <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".nav-items\"</span><span class=\"p\">).</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"finish\"</span><span class=\"p\">)</span></span>\n<span class=\"code-line\">                     <span class=\"p\">.</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"slideUp\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">delay</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"nx\">easing</span><span class=\"o\">:</span> <span class=\"s2\">\"easeInQuad\"</span> <span class=\"p\">})</span></span>\n<span class=\"code-line\">                     <span class=\"p\">.</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"fadeOut\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">delay</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"nx\">easing</span><span class=\"o\">:</span> <span class=\"s2\">\"easeInQuad\"</span><span class=\"p\">,</span> <span class=\"nx\">queue</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span></span>\n<span class=\"code-line\">             <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                     <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".nav-items\"</span><span class=\"p\">).</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"finish\"</span><span class=\"p\">)</span></span>\n<span class=\"code-line\">                     <span class=\"p\">.</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"slideDown\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">delay</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"nx\">easing</span><span class=\"o\">:</span> <span class=\"s2\">\"easeOutQuad\"</span> <span class=\"p\">})</span></span>\n<span class=\"code-line\">                     <span class=\"p\">.</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"fadeIn\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">delay</span><span class=\"o\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nx\">duration</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"nx\">easing</span><span class=\"o\">:</span> <span class=\"s2\">\"easeOutQuad\"</span><span class=\"p\">,</span> <span class=\"nx\">queue</span><span class=\"o\">:</span> <span class=\"kc\">false</span> <span class=\"p\">});</span></span>\n<span class=\"code-line\">             <span class=\"p\">}</span></span>\n<span class=\"code-line\">   <span class=\"p\">});</span></span>\n<span class=\"code-line\"> <span class=\"p\">});</span></span>\n<span class=\"code-line\"><span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></span>\n</pre></div>\n<p>然后新建一个 Github gist 填上动态格言,像这样(大括号里的内容可以添加多个):</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"p\">[</span></span>\n<span class=\"code-line\">    <span class=\"p\">{</span></span>\n<span class=\"code-line\">        <span class=\"nt\">\"content\"</span><span class=\"p\">:</span><span class=\"s2\">\"example\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"nt\">\"author\"</span><span class=\"p\">:</span><span class=\"s2\">\"someone\"</span></span>\n<span class=\"code-line\">    <span class=\"p\">},</span></span>\n<span class=\"code-line\"><span class=\"p\">]</span></span>\n</pre></div>\n<p>再写个JavaScript来从JSON中提取格言然后填到html里:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">            <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">\"DOMContentLoaded\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".site-description\"</span><span class=\"p\">).</span><span class=\"nx\">after</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;blockquote&gt;\"</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"fortune\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"display\"</span><span class=\"p\">,</span> <span class=\"s2\">\"none\"</span><span class=\"p\">));</span></span>\n<span class=\"code-line\">                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".site-description\"</span><span class=\"p\">).</span><span class=\"nx\">after</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;blockquote&gt;\"</span><span class=\"p\">).</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"s2\">\"fortune\"</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s2\">\"line-height\"</span><span class=\"p\">,</span> <span class=\"s2\">\"1.4rem\"</span><span class=\"p\">));</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">                    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">getJSON</span><span class=\"p\">(</span> <span class=\"s2\">\"https://api.github.com/gists/07ca2edea6e507bf40f5\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">                            <span class=\"nx\">fortunes</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"s2\">\"quotes.json\"</span><span class=\"p\">].</span><span class=\"nx\">content</span><span class=\"p\">);</span></span>\n<span class=\"code-line\">                            <span class=\"nx\">randomFortune</span> <span class=\"o\">=</span> <span class=\"nx\">fortunes</span><span class=\"p\">[</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">floor</span><span class=\"p\">(</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"nx\">fortunes</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">)</span> <span class=\"p\">];</span></span>\n<span class=\"code-line\">                            <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">randomFortune</span><span class=\"p\">.</span><span class=\"nx\">author</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"p\">)</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#fortune\"</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span> <span class=\"s2\">\"&lt;p&gt;\"</span><span class=\"o\">+</span><span class=\"nx\">randomFortune</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"o\">+</span><span class=\"s2\">\"&lt;/p&gt;\"</span> <span class=\"p\">);</span></span>\n<span class=\"code-line\">                            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">                                    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#fortune\"</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span> <span class=\"s2\">\"&lt;p&gt;\"</span><span class=\"o\">+</span><span class=\"nx\">randomFortune</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"o\">+</span><span class=\"s2\">\"&lt;/p&gt;\"</span>  <span class=\"o\">+</span> <span class=\"s2\">\"&lt;small&gt;\"</span> <span class=\"o\">+</span> <span class=\"nx\">randomFortune</span><span class=\"p\">.</span><span class=\"nx\">author</span> <span class=\"o\">+</span> <span class=\"s2\">\"&lt;/small&gt;\"</span><span class=\"p\">);</span></span>\n<span class=\"code-line\">                            <span class=\"p\">}</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">                            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#fortune\"</span><span class=\"p\">).</span><span class=\"nx\">velocity</span><span class=\"p\">(</span><span class=\"s2\">\"slideDown\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">duration</span><span class=\"o\">:</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"nx\">easing</span><span class=\"o\">:</span> <span class=\"s2\">\"easeOutQuad\"</span> <span class=\"p\">});</span></span>\n<span class=\"code-line\">                    <span class=\"p\">});</span></span>\n<span class=\"code-line\">            <span class=\"p\">});</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></span>\n</pre></div>\n<p>最后的效果汝也应该看到了呗~</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">发布</a></h2>\n<p>通过几条命令可以发布~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>make publish</span>\n</pre></div>\n<p>然后用git提交到Github就好......</p>\n<p>好吧这就是咱的全过程啦(雾)</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 58,
      "title": " Tox新手入门",
      "date_published": 1453305600,
      "body": "\n<p>Tox,一种新型的聊天协议.如果汝关注安全和隐私,不妨来看看呗~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>Tox,一种新型的聊天协议.如果汝关注安全和隐私,不妨来看看呗~</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id9\">再说一遍Tox是啥?</a></h2>\n<p>Tox是一种新型的通讯协议,它的目标是——提供一个无法监控的 Skype 替代品——彻底的加密，没有后门，无需中间服务器。</p>\n<p>由于Tox就是一个协议框架,不同的开发者开发了不同的软件呗~</p>\n<p><a class=\"reference external\" href=\"https://wiki.tox.chat/clients\">Tox 官方维护的wiki上可以找到不同平台可用的客户端列表呐</a></p>\n<p>在下面的例子中咱会先拿 <a class=\"reference external\" href=\"https://github.com/tux3/qTox\">qtox</a> 来示范一下,汝可以从上面的列表中选择一个适合自己的客户端呗~</p>\n<p>首先按照上游的指南装好客户端呗~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id10\">新建一个Tox个人资料</a></h2>\n<p>运行qtox,会弹出这样的窗口:</p>\n<img alt=\"qTox欢迎画面\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/qtox_welcome.png\">\n<p>因为咱已经有一个Tox Profile所以是这样啦,汝直接按\"New Profile\"就好:</p>\n<img alt=\"qTox-新建个人资料\" class=\"materialboxed responsive-img\" src=\"/images/qtox_addprofile.png\">\n<p>在Username那挑个用户名,Password那输入个密码呗~</p>\n<div class=\"tag info fg-white compound\">\n<p>如果用SSH远程访问做类比的话,汝的Profile就是私钥,密码就是私钥的保护口令呗~</p>\n</div>\n<div class=\"tag warning fg-white compound\">\n<p class=\"compound-first\">汝输入的密码非常重要!</p>\n<p class=\"compound-middle\">1.挑一个好的密码,如果不怀好意的骇客同时得到了汝的密码和profile,就可以冒充汝发送消息了诶.</p>\n<p class=\"compound-last\">2,记住汝的密码!虽然安全性很重要,但是一旦汝忘了密码,基本上就无法恢复了呗~</p>\n</div>\n<p>确认完毕之后就会进入到qtox的主画面了呗~(旁边一圈是咱加上的注释,原谅咱不怎么会用GIMP......)</p>\n<img alt=\"qTox_main\" class=\"materialboxed responsive-img\" src=\"/images/qtox_main.png\">\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">修改个人资料</a></h2>\n<p>点击头像的区域就可以修改自己的个人资料了呗~</p>\n<img alt=\"qTox_profile\" class=\"materialboxed responsive-img\" src=\"/images/qtox_profile.png\">\n<div class=\"tag info fg-white compound\">\n<p>就像界面介绍的那样,Name和Status是公开的信息,所以仔细考虑一下选择一个合适的呗~</p>\n</div>\n<p>不过问题来啦,木有好友咧?</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id12\">添加好友</a></h2>\n<p>要添加好友的话,先让汝的好友把Ta的Tox ID用其他的手段让汝知道呗~</p>\n<blockquote>\n<p>E1F1C7DEA73D8126A1DEE9EAE5B45E21FB17E75F2319B7823A346B8C427EB272C80A89B69B4E</p>\n<p class=\"attribution\">—Tox ID 是像这样的十六进制数呗~</p>\n</blockquote>\n<p>然后到添加好友的界面把Tox ID输入进去.必要的话,附上一段消息让Ta知道汝是谁呗~</p>\n<img alt=\"qtox_addfriend\" class=\"materialboxed responsive-img\" src=\"/images/qtox_addfriend.png\">\n<p>一开始时汝的好友列表只会显示对方的Tox ID呐,像这样:</p>\n<img alt=\"qtox_addfriend_Pending\" class=\"materialboxed responsive-img\" src=\"/images/qtox_addfriend2.png\">\n<p>当Ta同意汝的好友请求以后,汝的好友列表上就会显示Ta的Name和Status呗~</p>\n<img alt=\"qtox_addfriend_success\" class=\"materialboxed responsive-img\" src=\"/images/qtox_addfriend3.png\">\n<p>然后像平常一样聊天呗~</p>\n<div class=\"tag info fg-white compound\">\n<p>要想让其他人和汝成为好友的话,把汝自己的Tox ID告诉Ta,让Ta像这样添加汝为好友呗~</p>\n</div>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id13\">发起群聊</a></h2>\n<p>Tox也是可以发起群聊的哟~首先创建一个(qtox里点击下方\"创建群聊\"按钮就可以了诶~)</p>\n<img alt=\"qtox_groupchat\" class=\"materialboxed responsive-img\" src=\"/images/qtox_groupchat.png\">\n<p>汝也可以邀请好友加入群聊呗~(qtox中右键点击某个好友-邀请加入群聊-汝的群聊名称呗~)</p>\n<p>只不过万一汝退出了tox,下次登录时是不会加入上次加入的群聊的,汝只好让好友再邀请汝一次呗~</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id14\">导出Tox的配置文件</a></h2>\n<p>必要时可以导出汝的配置文件,这样就可以在其他地方连接到汝的Tox用户了呗~</p>\n<p>qtox的话,可以在Profiles页面通过\"导出\"选项导出汝的配置文件呗~</p>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id15\">最后</a></h2>\n<p>这些就是tox基本的用法啦~,对于其他的客户端的话,不妨去阅读对应的文档呗~</p>\n<p>如果汝有意帮助开发Tox的话, <a class=\"reference external\" href=\"https://wiki.tox.chat/users/contributing\">来这看看呗~</a></p>\n<p>哦,差点忘记啦,这是咱的Tox ID,大家可以试试看呗~</p>\n<blockquote>\n7BC803F7F9B8A7230EE181AB45CA909DE446D36A7BC3A275D5576439E0CF7546FF4E2C4665CC</blockquote>\n</div>\n\n  </div>"
    },
    {
      "post_id": 57,
      "title": " AUR 纯萌新向入门教学(2)-创建一个软件包",
      "date_published": 1454428800,
      "body": "\n<p>上一次咱说了 <a class=\"reference external\" href=\"/aur_fresh_guidebook.html\">「从AUR中安装软件包」</a> ,其实如果汝足够 <del>触</del> 的话,不妨自己创建个软件包呗~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>上一次咱说了 <a class=\"reference external\" href=\"/aur_fresh_guidebook.html\">「从AUR中安装软件包」</a> ,其实如果汝足够 <del>触</del> 的话,不妨自己创建个软件包呗~</p>\n\n<div class=\"section\" id=\"archwiki\">\n<h2><a class=\"toc-backref\" href=\"#id15\">首先为啥不读读ArchWiki咧?</a></h2>\n<p><del>ArchWiki ,短小精悍,汝值得拥有呐~</del></p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Creating_packages_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">创建软件包</a></li>\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/PKGBUILD_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">PKGBUILD</a></li>\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_packaging_standards_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">Arch Linux 打包标准</a></li>\n</ul>\n<p>如果因为各种原因看了Wiki还不明白的话,接着往下看呗~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id16\">第一步:以普通的方式安装软件</a></h2>\n<p>看看 <span class=\"tag\">base-devel</span> 装了没?</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo pacman -S base-devel --needed</span>\n</pre></div>\n<p>从上游把软件的源代码下载下来,按照上游的文档编译和安装(典型的例子像这样):</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>./configure</span>\n<span class=\"code-line\">make</span>\n<span class=\"code-line\">make install</span>\n</pre></div>\n<p>如果汝为了顺利安装做了任何的调整(比如改了些源码或者打上了补丁),记下来操作步骤,待会儿编写PKGBUILD时要用到哟~</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id17\">第二步:编写PKGBUILD文件</a></h2>\n<blockquote>\n<p>PKGBUILD是一个shell脚本,包含 Arch Linux 在构建软件包时需要的信息.</p>\n<p>Arch Linux 用 makepkg 创建软件包.当 makepkg 运行时,它会在当前目录寻找 PKGBUILD 文件,并依照其中的指令去获取依赖文件,编译出 pkgname.pkg.tar.xz 文件.生成的包内有二进制文件和安装指令,可以使用 pacman 进行安装.</p>\n<p>pkgname,pkgver,pkgrel和arch是必须包含的变量.license在构建包时并不强制要求,但若要分享 PKGBUILD文件,推荐加上该变量,否则 makepkg 会有警告.</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/PKGBUILD_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">ArchWiki:PKGBUILD</a></p>\n</blockquote>\n<div class=\"section\" id=\"id4\">\n<h3><a class=\"toc-backref\" href=\"#id18\">获得原型</a></h3>\n<p>ArchWiki上关于PKGBUILD的介绍已经很详细啦~,从 <span class=\"tag\">/usr/share/pacman/</span> 找个合适的原型复制下来:</p>\n<ul class=\"simple\">\n<li>PKGBUILD.proto       (经典原型😂)</li>\n<li>PKGBUILD-vcs.proto   (如果汝的源码来自像SubVersion,Git,Mercurial一类的 <ruby><rb>SCCS</rb><rp>(</rp><rt>源代码控制系统</rt><rp>)</rp></ruby> 的话,看下这份原型呗~)</li>\n<li>PKGBUILD-split.proto (如果汝要做一个分包的话)</li>\n<li>proto.install        (希望在安装之前/之后运行一些别的命令?看看这份原型呗~)</li>\n</ul>\n<p>阅读原型上的注释,然后删掉(随汝心意啦,但是如果汝想上传软件包的话,[Maintainer/偶尔会有的Contributor]是必须的😂)</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"toc-backref\" href=\"#id19\">起个名字</a></h3>\n<p>软件包的名字保存在pkgname里,只能用小写字母、数字和@ . _ + - 这些字符，且不允许用.或者-作开头。</p>\n<p>别和 AUR 或官方仓库里面的软件包重名了哟~</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h3><a class=\"toc-backref\" href=\"#id20\">挑个许可协议</a></h3>\n<p>为了不造轮子,`传送门在此~ &lt;<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\">https://wiki.archlinux.org/index.php/PKGBUILD_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</a>)#license&gt;`_</p>\n</div>\n<div class=\"section\" id=\"id7\">\n<h3><a class=\"toc-backref\" href=\"#id21\">编译和安装时的命令</a></h3>\n<p>makepkg的运行顺序大概像这样(从上到下):</p>\n<ul>\n<li><p class=\"first\">获得,解压和检查源代码的散列值.</p>\n</li>\n<li><p class=\"first\">pkgver():在汝的源代码来自各种SCCS时会有用,用来更新软件包的版本号.</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/VCS_package_guidelines#The_pkgver.28.29_function\">ArchWiki:VCS_package_guidelines</a> 有一些范例,可以看看呗~</p>\n<p>不过记得得给 <span class=\"tag\">pkgver</span> 变量随便赋个值先......</p>\n</blockquote>\n</li>\n<li><p class=\"first\">prepare():一些预处理源文件以进行构建的命令,比如打补丁......</p>\n<blockquote>\n<p>把汝为了让源代码顺利编译而运行的操作加到这里.不过首先要切换到源码目录呗~</p>\n<p>如果汝在编译前不需要干任何事情,这个函数可以不用.</p>\n</blockquote>\n</li>\n<li><p class=\"first\">build():真正 <del>撸起袖子</del> 开始编译软件包的过程.</p>\n<blockquote>\n<p>如果汝的软件包啥都不用编译,这个函数可以不用.</p>\n<p>对于普通的configure-make-make install三部曲来说,build()可以写成这样(汝来决定那些注释的去留呗~)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 切换到源码目录</span></span>\n<span class=\"code-line\"><span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"nv\">$srcdir</span><span class=\"s2\">/</span><span class=\"nv\">$pkgname</span><span class=\"s2\">-</span><span class=\"nv\">$pkgver</span><span class=\"s2\">\"</span></span>\n<span class=\"code-line\"><span class=\"c1\"># configure 和 make ,按照Arch Linux的规范,软件包都装在/usr目录</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 汝也许要按照上游的指示添加别的参数呐~</span></span>\n<span class=\"code-line\">./configure --prefix<span class=\"o\">=</span>/usr</span>\n<span class=\"code-line\">make</span>\n</pre></div>\n<p>不要在这个函数中让用户进行交互,见 <a class=\"reference external\" href=\"https://bugs.archlinux.org/task/13214\">某个bug报告</a></p>\n</blockquote>\n</li>\n<li><p class=\"first\">check():用来执行make check和其他一些例行测试的地方,有时需要.</p>\n</li>\n<li><p class=\"first\">package():把生成的文件打包成软件包的函数, <strong>只有这个函数是必须的.</strong></p>\n<blockquote>\n<p>pkg目录复制了根目录下软件安装路径的继承关系.\n如果汝需要手动把文件放到根目录下,那么在这里你需要把文件放在pkg下相同的文件层级结构中诶~.\n比如,把一个文件安装到/usr/bin,那么在伪root环境中对应的路径为$pkgdir/usr/bin.</p>\n<p>对于普通的configure-make-make install三部曲来说,package()可以写成这样:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>make <span class=\"nv\">DESTDIR</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"nv\">$pkgdir</span><span class=\"s2\">/\"</span> install</span>\n</pre></div>\n<p>在一些很罕见的情况下,软件只有安装在单一目录下时才能运行.在这种情况下汝还是老老实实把它安装到$pkgdir/opt下吧.</p>\n<p>通常,软件在安装过程中会在pkg目录下先创建一系列子目录.如果没有的话,makepkg会报错,记得先在build()函数中提前手动创建这些目录哟.</p>\n<p>同build(),不要在这个函数中让用户进行交互.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id8\">\n<h3><a class=\"toc-backref\" href=\"#id22\">安装前后有事要做?</a></h3>\n<p>如果汝要在安装/升级/卸载前后运行其它命令,可以写个.install文件:</p>\n<ul class=\"simple\">\n<li>pre_install - 安装前运行的脚本,可以传递版本号为参数.</li>\n<li>post_install - 安装后运行的脚本,可以传递版本号为参数.</li>\n<li>pre_upgrade - 升级前运行的脚本,可以按新版本号,旧版本号的顺序传递参数.</li>\n<li>post_upgrade - 升级后运行的脚本,可以按新版本号,旧版本号的顺序传递参数.</li>\n<li>pre_remove - 卸载前运行的脚本,可以传递版本号为参数.</li>\n<li>post_remove - 卸载后运行的脚本,可以传递版本号为参数.</li>\n</ul>\n<p>这些函数运行的也是Bash脚本哦~</p>\n<p>然后在PKGBUILD中把 <span class=\"tag\">install</span> 变量指向汝的 <span class=\"tag\">.install</span> 文件的位置呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 一般来说,.install的文件名应该和软件包名一致.</span></span>\n<span class=\"code-line\"><span class=\"nv\">install</span><span class=\"o\">=</span><span class=\"s1\">'foo.install'</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id9\">\n<h3><a class=\"toc-backref\" href=\"#id23\">需要用到配置文件?</a></h3>\n<p>如果汝的软件包要有些用户编写的配置文件,记得添加到backups变量里.</p>\n<p>例如如果汝的配置文件是 <span class=\"tag\">/etc/foo</span> :</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nv\">backup</span><span class=\"o\">=(</span>etc/foo<span class=\"o\">)</span></span>\n</pre></div>\n<p>记得是相对于 <span class=\"tag\">/</span> 的路径.</p>\n<p>这样pacman就会在软件包升级时提醒用户合并新的和旧的文件,在卸载软件包时这些文件会被保留(除非用了 <span class=\"tag\">pacman -Rn</span> )</p>\n</div>\n<div class=\"section\" id=\"id10\">\n<h3><a class=\"toc-backref\" href=\"#id24\">依赖,依赖,依赖!</a></h3>\n<p><del>重要的事情说三遍--</del></p>\n<p>架构相关的变量可以通过下划线加架构的方式指定：depends_x86_64=(), optdepends_x86_64=().</p>\n<p>依赖相关的变量有这些:</p>\n<ul>\n<li><p class=\"first\">depends: <strong>真</strong> 运行时依赖</p>\n<blockquote>\n<p>运行时 <strong>必须</strong> 的软件包列表,可以使用比较运算符来描述版本限制,如：depends=('foobar&gt;=1.8.0').</p>\n<p>不过如果A依赖B,B又依赖C的话,A的depend里不用加上C😂😂</p>\n</blockquote>\n</li>\n<li><p class=\"first\">optdepends:运行时的可选依赖</p>\n<blockquote>\n<p>一组不影响软件主要功能,但能提供额外特性的软件包.应该简要说明每个包所能提供的额外功能.有些可选依赖如果不安装,软件包的个别程序可能无法正常使用.</p>\n<p>optdepends可以这样写:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nv\">optdepends</span><span class=\"o\">=(</span></span>\n<span class=\"code-line\">    <span class=\"s1\">'foo: some description'</span></span>\n<span class=\"code-line\"><span class=\"o\">)</span></span>\n</pre></div>\n<p>尽可能给每个可选依赖一个简洁的描述来方便用户决定装不装~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">makedepends:只在编译时需要的依赖</p>\n<blockquote>\n<p>仅在软件编译时需要的软件包列表.可以像depends序列里提到的一样指定最小版本依赖.</p>\n<p>不过不要包含 <del>base-devel</del> 组的软件包! (要运行makepkg的话这个软件包组应该已经装上了)</p>\n</blockquote>\n</li>\n<li><p class=\"first\">checkdepends:只在测试时需要的依赖</p>\n<blockquote>\n<p>运行测试组件时需要,而运行时不需要的包列表.和makedepends一样,不要包含 <del>base-devel</del> 组的软件包.</p>\n<p>只有编写了check()时再填这个变量哟~</p>\n</blockquote>\n</li>\n</ul>\n<p>makedepends和checkdepends中的软件包会因为makepkg的 -r 选项而在安装完成后删除.</p>\n</div>\n<div class=\"section\" id=\"id11\">\n<h3><a class=\"toc-backref\" href=\"#id25\">散列值:安全第一</a></h3>\n<p>记得加上文件的散列值,makepkg会在编译前检查文件的散列值(和PKGBUILD中的散列值比较),一定程度上确保源代码不会篡改.</p>\n<p>写法大概像这样:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">{</span>这里是汝选择的散列算法<span class=\"o\">}=(</span><span class=\"s1\">'{散列值}'</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>散列值的顺序取决于汝的sources变量,例如如果汝选择sha512sum的话:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nv\">sha512sums</span><span class=\"o\">=(</span><span class=\"s2\">\".....\"</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>建议使用sha256sums(或更高的位数),md5已经发现有 <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/MD5\">碰撞漏洞</a> ,sha1已经发现Preimage漏洞(已知校验和的情况下，可以生成一段字符串产生相同的校验和,)</p>\n<p>如果汝的源代码来自SCCS的话,因为文件在不断变化,所以需要让makepkg跳过散列值检查:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"nv\">sha512sums</span><span class=\"o\">=(</span><span class=\"s2\">\"SKIP\"</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>记得在修改某个文件以后用新的散列值这个变量呗~</p>\n</div>\n</div>\n<div class=\"section\" id=\"id13\">\n<h2><a class=\"toc-backref\" href=\"#id26\">测试,测试,再测试</a></h2>\n<div class=\"tag info fg-white compound\">\n<p><del>如果只是汝自己用的话，就不必做这个质量保证了，因为只有汝一个人需要忍受这些错误呗~.</del></p>\n</div>\n<p>运行下makepkg命令来确保没有问题。如果PKGBUILD没有错误，将会生成一个包，但是如果PKGBUILD被破坏或未完成，它会抛出一个错误。</p>\n<p>如果运行makepkg 成功，会生成一个名为$pkgname-$pkgver.pkg.tar.gz的新文件。\n这个文件可以使用pacman -U 安装一下试试呗~,不过，一个包被构建并不代表你的工作就完成了！\n只有当所有文件的结构都正确才能确保完成，例如前缀不对就不行。\n可以使用pacman的查询功能显示软件包包含的文件及依赖的文件，然后将它于你认为正确的对比。\"pacman -Qlp &lt;package file&gt;\" 和\"pacman -Qip &lt;package file&gt;\" 可以完成这项工作。</p>\n<p>如果包看起来是正确的，那汝的工作就完成了。但是如果汝打算发布这个包或PKGBUILD，还是需要确认确认再确认包的依赖关系。</p>\n<p>同样要确保安装的软件确实很完美的运行！就算汝释放了一个包括所有必需文件的包，但是由于一些配置选项使它不能很好的工作，这真是让人恼火。</p>\n<p>可以用namcap帮助检查软件包的依赖是否正确:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 检查PKGBUILD文件</span></span>\n<span class=\"code-line\">$ namcap PKGBUILD</span>\n<span class=\"code-line\"><span class=\"c1\"># 检查某个软件包</span></span>\n<span class=\"code-line\">$ namcap &lt;package file name&gt;.pkg.tar.xz</span>\n</pre></div>\n<p>Namcap会帮汝干这些事:</p>\n<blockquote>\n<ol class=\"arabic simple\">\n<li>检查PKGBUILD文件里的一些常见错误</li>\n<li>用ldd扫描包中所有的ELF文件，自动报告缺失或可去除的依赖。</li>\n<li>启发式搜寻缺失或冗余的依赖。</li>\n</ol>\n</blockquote>\n<p>理想的情况是没有输出(真的么?),如果遇到了错误,去ArchWiki上查找对应的解决方案呗~: <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Namcap\">https://wiki.archlinux.org/index.php/Namcap</a></p>\n</div>\n<div class=\"section\" id=\"id14\">\n<h2><a class=\"toc-backref\" href=\"#id27\">生成源码包</a></h2>\n<p>用下面的命令生成一个源码包:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>makepkg --source</span>\n</pre></div>\n<p>这会在当前目录生成一个 <span class=\"tag\">.src.tar.gz</span> 文件,汝可以在上传到AUR前先分享给其他人帮汝检查一下呗~</p>\n<p>到这里汝应该完成了一个软件包了呗~,下次咱会告诉汝怎么把汝创建的软件包提交到AUR上呗~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 56,
      "title": " 新的\"约伊兹的萌狼乡手札\"诞生啦~",
      "date_published": 1452908100,
      "body": "\n<p>就像标题描述的一样，新的\"约伊兹的萌狼乡手札\"以Pelican之姿再次出发啦~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>就像标题描述的一样，新的\"约伊兹的萌狼乡手札\"以Pelican之姿再次出发啦~</p>\n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">为啥要重做？</a></h2>\n<p>原来的 <a class=\"reference external\" href=\"https://wiki.yoitsu.moe/\">约伊兹的萌狼乡手札</a> 是基于MediaWiki搭建的,但是MediaWiki的本来用途并不是来做博客的呐~,不过咱还是一直拖着......直到 <a class=\"reference external\" href=\"https://www.archlinux.org/news/php-70-packages-released/\">Arch Linux 宣布PHP7进入官方软件仓库</a> ,咱升级以后两个关键的RSS扩展都坏掉啦~(应该都知道RSS对于博客型网站的重要性呗~),于是咱痛定思痛决定升级😂</p>\n</div>\n<div class=\"section\" id=\"pelican\">\n<h2><a class=\"toc-backref\" href=\"#id8\">为啥是Pelican?</a></h2>\n<p>主要的原因是 <del>人生赢家</del> <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 用的也是Pelican，这样咱可以照着他的经历少走一些弯路......</p>\n<p>为啥不用Hexo,Ghost一类的博客系统呢?因为咱不太会设置Node.js(想当初给MediaWiki装可视化编辑器就折腾了半天)😂😂😂</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">那么有哪些问题咧?</a></h2>\n<p>首先Pelican用的标记语言是rst(重组的文本)或是MarkDown,不过看情况Markdown是刚加入进来的,处理的还不够好,就先用rst呗~</p>\n<p>然而咱并不会rst的语法......只好找来个 <a class=\"reference external\" href=\"http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html\">语法指南</a> 先照着看......</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id10\">关于旧站的打算?</a></h2>\n<p>介于原来的网站也是咱折腾了一阵子才出来的,于是决定先留着.(这个新站的评论要靠它呐~)</p>\n<p>咱以后也会继续折腾MediaWiki,顺便在这记下来一些过程和经验呗~</p>\n<p>作为新博客的第一篇博文就说到这里,咱具体是怎么做的 <del>请听下回分解</del> 😂😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 55,
      "title": " MediaWiki 设置SMTP发送邮件",
      "date_published": 1455780000,
      "body": "\n<p>为 MediaWiki 设置通过 SMTP 发送邮件.就是这样  _(:з」∠)_</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>为 MediaWiki 设置通过 SMTP 发送邮件.就是这样  _(:з」∠)_</p>\n\n<div class=\"section\" id=\"smtp\">\n<h2><a class=\"toc-backref\" href=\"#id2\">为啥要搞 SMTP 发信?</a></h2>\n<ul class=\"simple\">\n<li>邮件功能在重置密码和通知时非常重要 (･ω･)</li>\n<li>听说用 PHP 的 mail() 函数发送的邮件容易被当成垃圾邮件(然而咱压根没收到😂</li>\n</ul>\n<p>所以才要搞 SMTP 呗~</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id3\">安装需要的库</a></h2>\n<p>PHP 7 木有 pear 啦 (Arch Linux 官方源在 PHP7 升级后从官方源里移除了 <span class=\"tag\">php-pear</span> )~,所以通过 composer 安装呗~</p>\n<p>首先安装上 composer ,如果汝在用 Arch Linux 的话:</p>\n<blockquote>\nsudo pacman -S php-composer</blockquote>\n<p>其它系统的话,可以参照 <a class=\"reference external\" href=\"https://getcomposer.org/download/\">Composer 官方的安装指南</a> 进行安装呗~</p>\n<p>在安装上 composer 以后安装 mail 和 smtp 包:</p>\n<blockquote>\ncomposer require --update-no-dev pear/mail pear/net_smtp</blockquote>\n<p>如果汝像咱一样安装的是 alpha 版(从 Git 下载的,去掉 <span class=\"tag\">--update-no-dev</span> 选项.</p>\n<p>还在用 PHP 5? 用 pear 安装:</p>\n<blockquote>\nsudo pear install Mail Net_SMTP</blockquote>\n</div>\n<div class=\"section\" id=\"wgsmtp-wgpasswordsender\">\n<h2><a class=\"toc-backref\" href=\"#id4\">设置 $wgSMTP 和 $wgPasswordSender 变量</a></h2>\n<p><a class=\"reference external\" href=\"https://www.mediawiki.org/wiki/Manual:$wgSMTP\">MediaWiki.org 的指南</a></p>\n<p><span class=\"tag\">$wgSMTP</span> 大概像这样:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"x\">$wgSMTP = array(</span></span>\n<span class=\"code-line\"><span class=\"x\">    'host'     =&gt; \"mail.example.com\", // SMTP 服务器的地址 (或IP).如果使用了SSL,记得加上 ssl://</span></span>\n<span class=\"code-line\"><span class=\"x\">    'IDHost'   =&gt; \"example.com\",      // 汝的域名,可选.如果不设置的话会设置成 $wgServer 的值.</span></span>\n<span class=\"code-line\"><span class=\"x\">    'port'     =&gt; 25,                 // 端口(一般是25,SSL是465,StartTLS是587)</span></span>\n<span class=\"code-line\"><span class=\"x\">    'auth'     =&gt; true,               // 是否需要 SMTP 认证 (多半都需要呗~)</span></span>\n<span class=\"code-line\"><span class=\"x\">    'username' =&gt; \"my_user_name\",     // SMTP 认证的用户名.</span></span>\n<span class=\"code-line\"><span class=\"x\">    'password' =&gt; \"my_password\"       // SMTP 认证的密码.</span></span>\n<span class=\"code-line\"><span class=\"x\">);</span></span>\n</pre></div>\n<p>举个栗子  _(:з」∠)_ :</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"x\">$wgSMTP = array(</span></span>\n<span class=\"code-line\"><span class=\"x\">    'host'     =&gt; \"smtp.yandex.com\", // 咱用的是 Yandex 的 Domain mail~</span></span>\n<span class=\"code-line\"><span class=\"x\">    'port'     =&gt; 587,                 // StartTLS =w=</span></span>\n<span class=\"code-line\"><span class=\"x\">    'auth'     =&gt; true,               // 需要登录 😂</span></span>\n<span class=\"code-line\"><span class=\"x\">    'username' =&gt; \"sender@yoitsu.moe\",     // 用户名啦~</span></span>\n<span class=\"code-line\"><span class=\"x\">    'password' =&gt; \"foo\"       // 密码啦~</span></span>\n<span class=\"code-line\"><span class=\"x\">);</span></span>\n</pre></div>\n<p>有些时候 SMTP 服务器要求外发邮件地址中的发件人和实际一致 (例如 Yandex ),这时需要设置 <span class=\"tag\">$wgPasswordSender</span> 变量:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"x\">$wgPasswordSender=\"sender@yoitsu.moe\";</span></span>\n</pre></div>\n<p>修改完以后用某个功能(例如修改邮件地址测试一下呗~):</p>\n<img alt=\"SMTP发信测试\" class=\"materialboxed responsive-img\" src=\"images/smtptest.png\">\n</div>\n\n  </div>"
    },
    {
      "post_id": 54,
      "title": " AUR 纯萌新向入门教学(1)-从AUR安装软件包",
      "date_published": 1454256000,
      "body": "\n<p><del>没玩过AUR好意思说自己是Arch Linux用户？</del></p>\n<p>尽管Arch Linux官方软件仓库里的软件包够多了,连MediaWiki或者OwnCloud一类的用 <del>最好的编程语言</del> PHP写的应用都有对应的软件包啦~( <del>TU:反正闲着也没事干,打个包呗~</del> ), 但是汝是不是有时试图pacman的时候:</p>\n<p>这时咋办咧?就该AUR上场了呗~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p><del>没玩过AUR好意思说自己是Arch Linux用户？</del></p>\n<p>尽管Arch Linux官方软件仓库里的软件包够多了,连MediaWiki或者OwnCloud一类的用 <del>最好的编程语言</del> PHP写的应用都有对应的软件包啦~( <del>TU:反正闲着也没事干,打个包呗~</del> ), 但是汝是不是有时试图pacman的时候:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>error: target not found: <span class=\"o\">{</span> 此处用汝希望安装的软件包名称替换呗~ <span class=\"o\">}</span></span>\n</pre></div>\n<p>这时咋办咧?就该AUR上场了呗~</p>\n\n<div class=\"section\" id=\"aur-arch-user-repository-arch\">\n<h2><a class=\"toc-backref\" href=\"#id4\">什么是AUR(Arch User Repository,Arch 用户软件仓库)?</a></h2>\n<blockquote>\n<p>Arch用户软件仓库（Arch User Repository，AUR）是为用户而建、由用户主导的Arch软件仓库。AUR中的软件包以软件包生成脚本（PKGBUILD）的形式提供，用户自己通过makepkg生成包，再由pacman安装。创建AUR的初衷是方便用户维护和分享新软件包，并由官方定期从中挑选软件包进入community仓库。</p>\n<p>许多官方仓库软件包都来自AUR。通过AUR，大家相互分享新的软件包生成脚本（PKGBUILD和其他相关文件）。用户还可以为软件包投票。如果一个软件包投票足够多、没有协议问题、打包质量好，那么它就很有希望被收录进官方[community]仓库（以后就可以直接通过pacman 或 abs 安装了）。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_User_Repository_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">ArchWiki:Arch User Repository</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"aur\">\n<h2><a class=\"toc-backref\" href=\"#id5\">安装AUR里的软件包前要做好哪些准备咧?</a></h2>\n<p>其实只有一项,安装 <span class=\"tag\">base-devel</span> 软件包组,内含编译软件包所需要的工具.</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>sudo pacman -S base-devel</span>\n</pre></div>\n<p>对于汝个人而言,需要 <strong>会使用</strong> 终端和 <strong>看得懂bash脚本</strong> (因为PKGBUILD其实就是bash脚本啦~,为了安全起见建议在安装时检查PKGBUILD呗~)</p>\n<p>下面是一句没啥用处的警告:</p>\n<div class=\"tag warning fg-white compound\">\n<p class=\"compound-first\">AUR packages are user produced content. Any use of the provided files is at your own risk.</p>\n<p class=\"compound-last\">AUR中的软件包是由用户上传的,使用即表示汝愿意风险自担呗~</p>\n</div>\n</div>\n<div class=\"section\" id=\"pkgbuild\">\n<h2><a class=\"toc-backref\" href=\"#id6\">第一步:寻找和获得软件包的PKGBUILD文件</a></h2>\n<p>这里是AUR的网址呗~: <a class=\"reference external\" href=\"https://aur.archlinux.org/\">https://aur.archlinux.org/</a> 打开后大概像这样:</p>\n<img alt=\"AUR 首页\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/aur_mainpage.png\">\n<p>可以在另一侧的\"English\"那里的下拉菜单里将AUR web 界面的语言修改成中文呗~</p>\n<div class=\"tag info fg-white compound\">\n<p>建议先 <a class=\"alert-link reference external\" href=\"https://aur.archlinux.org/register/\">注册一个账户</a> ,\n这样便可以使用更多功能呗~</p>\n</div>\n<p>然后在搜索框里输入需要的软件包的名称就可以搜索呗~</p>\n<img alt=\"在AUR里搜索软件包\" class=\"materialboxed responsive-img\" src=\"/images/aur_search.png\">\n<p>点击对应软件包的名称就可以进入软件包的详细信息呗~</p>\n<img alt=\"软件包的详细信息\" class=\"materialboxed responsive-img\" src=\"/images/aur_packageinfo.png\">\n<p>点击右侧的\"Download snapshot\"就可以下载到软件包的快照.(比如pypi-pip.tar.gz)\n一般包含PKGBUILD,有些软件包中可能包含其它文件(例如Systemd 单元啥的)\n可以用tar来解开它呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 如果汝不知道tar 怎么用的话,man一下呗~ (man tar)</span></span>\n<span class=\"code-line\">tar xzf pypi-pip.tar.gz</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">安装软件包</a></h2>\n<p>首先切换到软件包的目录，然后检查一下PKGBUILD：</p>\n<!-- code-block::bash\n\n# 用汝喜欢的编辑器替换$EDITOR呗~\n\n$EDITOR PKGBUILD -->\n<div class=\"tag warning fg-white compound\">\n<p>务必认真检查所有文件！\nPKGBUILD和所有.install文件都是shell脚本文件，包含若干函数，由makepkg调用并执行。\n这些函数可以调用任何命令，可能包含恶意或危险代码。\nmakepkg将通过fakeroot（意为“假root”）执行这些命令，能在一定程度防止恶意代码损坏系统，但还是小心为好。\n如有疑问，可以到论坛或邮件列表询问。</p>\n</div>\n<p>在 <ruby><rb>仔细</rb><rp>(</rp><rt>几乎没有</rt><rp>)</rp></ruby> 检查完所有文件以后,运行makepkg来创建并安装软件包呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 下面的三个选项分别是</span></span>\n<span class=\"code-line\"><span class=\"c1\"># (i) 在编译完成后安装,</span></span>\n<span class=\"code-line\"><span class=\"c1\"># (s) 安装编译时需要的依赖关系,</span></span>\n<span class=\"code-line\"><span class=\"c1\"># (r) 在安装完成后删除只在编译时需要的软件包</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 关于makepkg的更多帮助,可以查看手册页(man makepkg)</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 或者在ArchWiki上查阅呗~</span></span>\n<span class=\"code-line\">makepkg -rsi</span>\n</pre></div>\n<p>不过经常会出现这样的状况:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">==</span>&gt; 正在创建软件包：pypy-pip <span class=\"m\">8</span>.0.2-1 <span class=\"o\">(</span>2016年 01月 30日 星期六 <span class=\"m\">15</span>:18:38 CST<span class=\"o\">)</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在检查运行时依赖关系...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; <span class=\"nv\">正在检查编译时依赖关系</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在安装缺少的依赖关系...</span>\n<span class=\"code-line\">错误：未找到目标：pypy-setuptools</span>\n<span class=\"code-line\">错误：未找到目标：pypy3-setuptools</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 错误： <span class=\"s1\">'pacman'</span> 无法安装缺少的依赖关系。</span>\n</pre></div>\n<p>这表示这个软件包依赖的某些包也在AUR里,汝只好先把它们装上呗~,或者用个AUR Helper(一会儿咱会介绍一个AUR Helper)</p>\n<p>在安装完需要的依赖以后再运行下makepkg,大概像这样~:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">==</span>&gt; 正在创建软件包：pypy-pip <span class=\"m\">8</span>.0.2-1 <span class=\"o\">(</span>2016年 01月 30日 星期六 <span class=\"m\">15</span>:27:02 CST<span class=\"o\">)</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在检查运行时依赖关系...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; <span class=\"nv\">正在检查编译时依赖关系</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 获取源代码......</span>\n<span class=\"code-line\">    -&gt; 正在下载 pip-8.0.2.tar.gz...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在验证源代码文件 sha256sums...</span>\n<span class=\"code-line\">    pip-8.0.2.tar.gz ... <span class=\"nv\">通过</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在释放源码......</span>\n<span class=\"code-line\">    -&gt; 正在解压缩 pip-8.0.2.tar.gz，使用 <span class=\"nv\">bsdtar</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在进入 fakeroot 环境...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在开始 package_pypy-pip<span class=\"o\">()</span>...</span>\n<span class=\"code-line\">    <span class=\"c1\"># 省掉编译的过程.....</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在清理安装...</span>\n<span class=\"code-line\">  -&gt; 正在清除不打算要的文件...</span>\n<span class=\"code-line\">  -&gt; 正在删除 libtool 文件...</span>\n<span class=\"code-line\">  -&gt; 正在移除静态库文件……</span>\n<span class=\"code-line\">  -&gt; 正在压缩 man 及 info 文档...</span>\n<span class=\"code-line\">  -&gt; 正在从二进制文件和库中清除不需要的系统符号...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在创建软件包<span class=\"s2\">\"pypy-pip\"</span>......</span>\n<span class=\"code-line\">  -&gt; 正在生成 .PKGINFO 文件...</span>\n<span class=\"code-line\">  -&gt; 正在生成 .MTREE 文件......</span>\n<span class=\"code-line\">  -&gt; 正在压缩软件包...</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在离开 fakeroot 环境。</span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 完成创建：pypy-pip <span class=\"m\">8</span>.0.2-1 <span class=\"o\">(</span>2016年 01月 30日 星期六 <span class=\"m\">15</span>:27:40 CST<span class=\"o\">)</span></span>\n<span class=\"code-line\"><span class=\"o\">==</span>&gt; 正在安装 pypy-pip 软件包组，使用 pacman -U...</span>\n</pre></div>\n<p>如果汝有sudo的能力的话,接下来输入密码,然后像原来一样安装软件包呗~</p>\n<p>是不是感觉自己处理依赖关系和一遍遍的makepkg已经让汝开始挠头了么,接着往下看.</p>\n</div>\n<div class=\"section\" id=\"aur-helper\">\n<h2><a class=\"toc-backref\" href=\"#id8\">使用AUR helper简化安装过程</a></h2>\n<div class=\"tag warning fg-white compound\">\n<p>Arch官方永远不会提供安装AUR（和其他不受支持）软件包的便利工具，<strong>AUR用户应当对软件编译有一定了解。</strong></p>\n</div>\n<p>然而官方不做并不代表没有😂😂,有一个叫做yaourt的工具在Archer间口口相传.yaourt就是一个AUR helper.</p>\n<p><a class=\"reference external\" href=\"https://aur.archlinux.org/packages/yaourt/\">yaourt on AUR</a></p>\n<p>先用上面的方法安装好yaourt,然后像用pacman一样运行yaourt就好(除了不要以root用户运行)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>yaourt -S foo</span>\n</pre></div>\n<p>yaourt会帮汝下载PKGBUILD,安装需要的依赖,运行makepkg等一系列操作哟~</p>\n<div class=\"tag warning fg-white compound\">\n<p>2月1号Pacman更新到了5.0，和yaourt的兼容性还不明确……</p>\n</div>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id9\">登录到AUR以后可以进行的操作</a></h2>\n<p>登录到AUR以后,软件包描述页面右侧的\"软件包操作\"的若干命令就可以使用了:</p>\n<ul>\n<li><p class=\"first\">将这个包标记为过期</p>\n<blockquote>\n<p>如果汝发现上游更新了而AUR没更新的话,可以通过这样提醒维护者更新,长时间无人维护的软件包可能被删除.</p>\n</blockquote>\n</li>\n<li><p class=\"first\">为这个软件包投票</p>\n<blockquote>\n<p>觉得Ta好就给投一票呗~,票数多而且符合\n<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_packaging_standards\">Arch Linux 软件包规范</a>\n的软件包可能会被TU收录到官方软件仓库诶~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">当有新评论的时候提醒我</p>\n<blockquote>\n<p>评论可以用来回报软件包的问题或是改进建议等等,如果这个选项启用的话,当评论更新时汝就会收到通知呗~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">提交请求</p>\n<blockquote>\n<p>可以提交像是合并,更名或是移除软件包的请求.</p>\n</blockquote>\n</li>\n</ul>\n<p>诶好像有些长了呐~,所以下一次咱再说如何创建软件包并提交到AUR上呗~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 53,
      "title": " AUR 纯萌新向入门教学(3)-提交软件包到AUR",
      "date_published": 1454601600,
      "body": "\n<p>通过上一次的 <a class=\"reference external\" href=\"/aur_packaging_guidebook.html\">「创建一个软件包」</a> ,\n汝应该已经创建了一个 <del>(或是 N 个)</del> 软件包了吧,如果汝想分享给其它人的话,上传到 AUR 其实是最方便的方法呗~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>通过上一次的 <a class=\"reference external\" href=\"/aur_packaging_guidebook.html\">「创建一个软件包」</a> ,\n汝应该已经创建了一个 <del>(或是 N 个)</del> 软件包了吧,如果汝想分享给其它人的话,上传到 AUR 其实是最方便的方法呗~</p>\n<div class=\"tag info fg-white compound\">\n<p>前几天被 <a class=\"alert-link reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 的各位吐槽了中文和英文之间空格的问题,原谅咱写文章时太随性😂</p>\n</div>\n\n<div class=\"section\" id=\"arch-user-repository\">\n<h2><a class=\"toc-backref\" href=\"#id5\">再来回顾一下 Arch User Repository 的打包规范呗~</a></h2>\n<p><del>不合规范的软件包可能会在不经过提醒的话直接删除.</del></p>\n<ul>\n<li><p class=\"first\"><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_packaging_standards_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">Arch Linux 打包标准</a></p>\n<blockquote>\n<p>对于某些特定平台的软件包(例如 Web 应用)有不同的打包规范,记得看哦~</p>\n</blockquote>\n</li>\n<li><p class=\"first\"><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_User_Repository_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#.E6.8F.90.E4.BA.A4.E8.BD.AF.E4.BB.B6.E5.8C.85.E7.9A.84.E8.A7.84.E5.88.99\">提交软件包到 AUR 的规则</a></p>\n</li>\n</ul>\n<hr class=\"docutils\">\n<p>看了 Wiki 以后,是否觉得自己的软件包符合规范了?</p>\n<p>如果确定的话,接着往下看呗~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">第一步:注册一个 AUR 帐号</a></h2>\n<p>去 <a class=\"reference external\" href=\"https://aur.archlinux.org/register/\">https://aur.archlinux.org/register/</a> 注册一个帐号呗~</p>\n</div>\n<div class=\"section\" id=\"aur-ssh\">\n<h2><a class=\"toc-backref\" href=\"#id7\">第二步:为 AUR 准备一个 SSH 密钥</a></h2>\n<p>因为 AUR 现在用 Git 提交,所以没有一个 SSH 密钥是不行的呐~,\n建议为 AUR 生成一个新的证书,这样一旦发现问题就可以直接吊销诶(不要把鸡蛋放在一个篮子里~)</p>\n<p>可以用 <span class=\"tag\">ssh-keygen</span> 命令生成新的密钥:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ ssh-keygen</span>\n<span class=\"code-line\">Generating public/private rsa key pair.</span>\n<span class=\"code-line\"><span class=\"c1\"># 为汝的公钥和私钥决定一个存放的位置呗~</span></span>\n<span class=\"code-line\">Enter file in which to save the key <span class=\"o\">(</span>/home/horo/.ssh/id_rsa<span class=\"o\">)</span>:</span>\n<span class=\"code-line\">/home/horo/.ssh/example</span>\n<span class=\"code-line\"><span class=\"c1\"># 为私钥设置一个密码,可以省略,但是为了安全还是设置一个呐~</span></span>\n<span class=\"code-line\">Enter passphrase <span class=\"o\">(</span>empty <span class=\"k\">for</span> no passphrase<span class=\"o\">)</span>:</span>\n<span class=\"code-line\">Enter same passphrase again:</span>\n<span class=\"code-line\"><span class=\"c1\"># 汝的私钥保存在汝决定的路径中</span></span>\n<span class=\"code-line\">Your identification has been saved in /home/horo/.ssh/example.</span>\n<span class=\"code-line\"><span class=\"c1\"># 汝的公钥保存在汝决定的路径中,不过扩展名为.pub</span></span>\n<span class=\"code-line\">Your public key has been saved in /home/horo/.ssh/example.pub.</span>\n<span class=\"code-line\"><span class=\"c1\"># 这是汝的密钥指纹,用来区分不同的密钥</span></span>\n<span class=\"code-line\">The key fingerprint is:</span>\n<span class=\"code-line\">SHA256:mwk7FvA2E0ycw+E8NYOr1+OL3+0qnF6PFMZ/Ndxuw84 horo@Yotisu</span>\n<span class=\"code-line\">The key<span class=\"err\">'</span>s randomart image is:</span>\n<span class=\"code-line\">+---<span class=\"o\">[</span>RSA <span class=\"m\">2048</span><span class=\"o\">]</span>----+</span>\n<span class=\"code-line\"><span class=\"p\">|</span>     oo++        <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>     <span class=\"o\">=</span>*. o       <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>    . *o         <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>     o.o .    . .<span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>     .B.S +    oo<span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>    ...*o<span class=\"o\">=</span> o  .o.<span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>     .+o+oo . .oo<span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>     . <span class=\"nv\">o</span><span class=\"o\">=</span>+ + .o..<span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>      .o+o+o+  E <span class=\"p\">|</span></span>\n<span class=\"code-line\">+----<span class=\"o\">[</span>SHA256<span class=\"o\">]</span>-----+</span>\n</pre></div>\n<p>然后在 AUR Web 界面上点击 \"My Account (我的账户)\" ,把汝的公钥里的内容填进 \"SSH Public Key:\" 一节中,保存.</p>\n<p>接下来编辑 <span class=\"tag\">~/.ssh/config</span> ,\n告诉ssh命令连接到 <span class=\"tag\">aur.archlinux.org</span> 用汝新创建的密钥呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Host aur.archlinux.org</span>\n<span class=\"code-line\">    IdentityFile ~/.ssh/example <span class=\"c1\"># 记得用汝自己的私钥路径</span></span>\n<span class=\"code-line\">    User foo <span class=\"c1\"># 记得换成汝自己的用户名.</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">第三步:提交软件包到 AUR</a></h2>\n<p>用下面的命令创建一个新的仓库:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 用汝希望的名称替换foobar.</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 从不存在的仓库中克隆或推送，将会自动创建此仓库。</span></span>\n<span class=\"code-line\">git clone ssh://aur@aur.archlinux.org/foobar.git</span>\n</pre></div>\n<p>这时汝的当前目录下会多出一个以汝的软件包名命名的文件夹(例如 <span class=\"tag\">foobar</span> ),\n把汝的软件包需要的文件(PKGBUILD,有时还有些其他的文件)放到这个文件夹内.</p>\n<p>接着记得写一个 <span class=\"tag\">.SRCINFO</span> (供 AUR Web 界面解析的元数据),\n可以通过 <a class=\"reference external\" href=\"https://www.archlinux.org/packages/?name=pkgbuild-introspection\">pkgbuild-introspection</a> 包内的 <span class=\"tag\">mksrcinfo</span> 工具生成.</p>\n<div class=\"tag warning fg-white compound\">\n<p>每一次提交都要包含最新的 <span class=\"tag\">.SRCINFO</span> 文件!不然服务器会 <del>傲娇的</del> 拒绝汝的提交呐~</p>\n</div>\n<p>然后普通的使用 Git 来提交呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 还是老话,不要照抄,按汝实际的状况来.</span></span>\n<span class=\"code-line\">git add .</span>\n<span class=\"code-line\">git commit -m <span class=\"s2\">\"Example\"</span></span>\n<span class=\"code-line\">git push</span>\n</pre></div>\n<p>在 AUR 上搜索汝的软件包试试?(像这样 <a href=\"https://aur.archlinux.org/packages/?O=0&amp;K=parsoid-git\" title=\"在 AUR 上搜索parsoid-git\">parsoid-git&nbsp;<sup>AUR</sup>&nbsp;</a>)</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">可能的后续工作</a></h2>\n<p>汝以为把软件包提交上就结束了?</p>\n<ul class=\"simple\">\n<li>一旦上游更新了,汝就要及时的更新诶(年久失修的包会被删除)</li>\n<li>关注下方的评论,聆听用户的 <ruby><rb>建议</rb><rp>(</rp><rt>抱怨</rt><rp>)</rp></ruby> 并试着改进汝的软件包呗~</li>\n<li>发觉自己没有精力维护某个软件包?可以通过AURweb界面 disown 一个软件包或是在AUR邮件列表发条消息.</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 52,
      "title": " 凤凰卷家的 vps.to 的 OpenVZ VPS 试用小记",
      "date_published": 1456070400,
      "body": "\n<p>论感情牌+吐槽的必要性~（雾</p>\n<p>凤凰卷( <a class=\"reference external\" href=\"/links.html#phoenixlzx\">phoenixlzx</a> )家的 <a class=\"reference external\" href=\"http://vps.to\">vps.to</a> <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a> 最近新上线了 OpenVZ 架构的 VPS .卷说不会超售,咱相信她 (谁叫咱认为她是个好人咧~)</p>\n<p>因为没人搭理她,她还在 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=#archlinux-cn\">##archlinux-cn</a> 里吐槽了一番:</p>\n<p>不过说到底还是在吐槽 OpenVZ 架构……</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>论感情牌+吐槽的必要性~（雾</p>\n\n<p>凤凰卷( <a class=\"reference external\" href=\"/links.html#phoenixlzx\">phoenixlzx</a> )家的 <a class=\"reference external\" href=\"http://vps.to\">vps.to</a> <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a> 最近新上线了 OpenVZ 架构的 VPS .卷说不会超售,咱相信她 (谁叫咱认为她是个好人咧~)</p>\n<table class=\"black-text footnote stripped white docutils highlight\" frame=\"void\" id=\"id2\" rules=\"none\">\n<colgroup><col class=\"label\"><col></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td><td>其实和喵窝一样,真正的大 boss 藏在后面~ (逃~</td></tr>\n</tbody>\n</table>\n<p>因为没人搭理她,她还在 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=#archlinux-cn\">##archlinux-cn</a> 里吐槽了一番:</p>\n<blockquote>\n<p>[phoenixlzx] 没人理会透明卷</p>\n<p>[phoenixlzx] 还是滚去睡觉好了</p>\n<p>(quininer) 凤凰怎么了</p>\n<p>[phoenixlzx] 心情不好</p>\n<p>(quininer) momo</p>\n<p>[phoenixlzx] 当时要做的时候都说做做做做好了买买买</p>\n<p>[phoenixlzx] 然后现在做好了都不吱声了</p>\n<p>[phoenixlzx] 订单呢？订单呢？</p>\n<p>[phoenixlzx] 真是不靠谱</p>\n</blockquote>\n<p>不过说到底还是在吐槽 OpenVZ 架构……</p>\n<div class=\"section\" id=\"openvz\">\n<h2><a class=\"toc-backref\" href=\"#id8\">说到底还是在吐槽 OpenVZ 架构</a></h2>\n<blockquote>\n<p>OpenVZ是基于Linux内核和作业系统的操作系统级虚拟化技术。OpenVZ允许物理服务器运行多个操作系统，被称虚拟专用服务器（VPS，Virtual Private Server）或虚拟环境（VE，Virtual Environment）。</p>\n<p>与VMware这种虚拟机和Xen这种硬件辅助虚拟化技术相比，OpenVZ的主机与客户系统都必须是Linux（虽然在不同的虚拟环境里可以用不同的Linux发行版）。但是，OpenVZ声称这样做有性能上的优势。根据OpenVZ网站的说法，使用OpenVZ与使用独立的实体服务器相比，性能只会有1-3%的损失。</p>\n<p>OpenVZ是SWsoft, Inc.公司开发的专有软件Virtuozzo的基础。OpenVZ的授权为GPLv2。</p>\n<p>OpenVZ由两部分组成，一个经修改过的操作系统核心与一套用户工具。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/OpenVZ\">Wikipedia:OpenVZ</a></p>\n</blockquote>\n<p>简单来说,OpenVZ 架构不是像 KVM Vmware 一类的完全虚拟化.而且 <ruby><rb>容易</rb><rp>(</rp><rt>几乎总是</rt><rp>)</rp></ruby> 被服务商超售(不然咋会卖那么便宜😂😂).</p>\n<p>不过由于和 <ruby><rb>主机</rb><rp>(</rp><rt>母鸡</rt><rp>)</rp></ruby> 共享内核，听说会有性能优势？</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id9\">购买时的一点吐槽</a></h2>\n<p><a class=\"reference external\" href=\"https://portal.vpsto.com/cart.php?gid=9\">链接在这,标准的 WHMCS 面板.</a></p>\n<p>可是为啥服务开通的确认邮件被 Yandex Mail 当作 spam 了啊 (ノ=Д=)ノ┻━┻</p>\n<p>除了这个其它还OK,VPS 的管理界面也是标准的 SolusVM 面板。</p>\n<p><del>真的是太标准了好像连主题都没改😂😂</del></p>\n<p>另外没有咱喜欢的 Arch Linux 还是很遗憾呐~(卷把锅甩给了OpenVZ,因为母鸡定制的内核太老 (2.6.x) 😂😂</p>\n<p>顺便提一下这次咱买的是最便宜的那个(一个月也要99😂😂),配置大概像这样:</p>\n<blockquote>\n<p>1 Core CPU</p>\n<p>1 GB Guaranteed RAM</p>\n<p>25 GB HDD</p>\n<p>400 GB Premium Traffic @ 100Mbps Bandwidth</p>\n<p>SoftLayer Hong Kong Datacenter</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id10\">日常</a></h2>\n<p>刚开通时的系统是 CentOS 6 , <del>吓的咱赶紧换成了 Debian 8</del>,VPS 控制面板上就重装系统,大概一两分钟左右吧.</p>\n<p>登录,先 apt update 一下,连的好像是 Debian 官方的仓库,速度不够快.</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># apt update</span></span>\n<span class=\"code-line\">.....</span>\n<span class=\"code-line\">Fetched <span class=\"m\">528</span> kB in 5s <span class=\"o\">(</span><span class=\"m\">94</span>.2 kB/s<span class=\"o\">)</span></span>\n</pre></div>\n<p>接下来更新系统,速度在 2M/s 左右,还可以(懒得换镜像源了😂😂</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@s17931102:~# apt full-upgrade</span>\n<span class=\"code-line\">Reading package lists... Done</span>\n<span class=\"code-line\">Building dependency tree</span>\n<span class=\"code-line\">Reading state information... Done</span>\n<span class=\"code-line\">Calculating upgrade... Done</span>\n<span class=\"code-line\">The following NEW packages will be installed:</span>\n<span class=\"code-line\">    e2fsprogs init libss2</span>\n<span class=\"code-line\">The following packages will be upgraded:</span>\n<span class=\"code-line\">    cpio libc-bin libc6 libgcrypt20 locales multiarch-support</span>\n<span class=\"code-line\"><span class=\"m\">6</span> upgraded, <span class=\"m\">3</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">0</span> not upgraded.</span>\n<span class=\"code-line\">Need to get <span class=\"m\">11</span>.5 MB of archives.</span>\n<span class=\"code-line\">After this operation, <span class=\"m\">3327</span> kB of additional disk space will be used.</span>\n<span class=\"code-line\">Do you want to <span class=\"k\">continue</span>? <span class=\"o\">[</span>Y/n<span class=\"o\">]</span></span>\n<span class=\"code-line\">...</span>\n<span class=\"code-line\">Fetched <span class=\"m\">11</span>.5 MB in 4s <span class=\"o\">(</span><span class=\"m\">2705</span> kB/s<span class=\"o\">)</span></span>\n<span class=\"code-line\">...</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id11\">胡乱的性能测试</a></h2>\n<p><a class=\"reference external\" href=\"http://www.freehao123.com/vps-cpu-io-unixbench/\">咱照着这篇文章小小的测试了一下😂😂</a></p>\n<p>CPU 是 Intel(R) Xeon(R) CPU E5-2650 v3 @ 2.30GHz .</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># cat /proc/cpuinfo</span></span>\n<span class=\"code-line\">processor   : <span class=\"m\">0</span></span>\n<span class=\"code-line\">vendor_id   : GenuineIntel</span>\n<span class=\"code-line\">cpu family  : <span class=\"m\">6</span></span>\n<span class=\"code-line\">model               : <span class=\"m\">63</span></span>\n<span class=\"code-line\">model name  : Intel<span class=\"o\">(</span>R<span class=\"o\">)</span> Xeon<span class=\"o\">(</span>R<span class=\"o\">)</span> CPU E5-2650 v3 @ <span class=\"m\">2</span>.30GHz</span>\n<span class=\"code-line\">stepping    : <span class=\"m\">2</span></span>\n<span class=\"code-line\">microcode   : <span class=\"m\">45</span></span>\n<span class=\"code-line\">cpu MHz             : <span class=\"m\">2300</span>.033</span>\n<span class=\"code-line\">cache size  : <span class=\"m\">25600</span> KB</span>\n<span class=\"code-line\">......</span>\n</pre></div>\n<p><span class=\"tag\">free -m</span> 了一下:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@s17931102:~# free -m</span>\n<span class=\"code-line\">             total       used       free     shared    buffers     cached</span>\n<span class=\"code-line\">Mem:          <span class=\"m\">1024</span>        <span class=\"m\">315</span>        <span class=\"m\">708</span>         <span class=\"m\">14</span>          <span class=\"m\">0</span>        <span class=\"m\">292</span></span>\n<span class=\"code-line\">-/+ buffers/cache:         <span class=\"m\">23</span>       <span class=\"m\">1000</span></span>\n<span class=\"code-line\">Swap:            <span class=\"m\">0</span>          <span class=\"m\">0</span>          <span class=\"m\">0</span></span>\n</pre></div>\n<p>Debian 8 Minimal,还没有装任何软件时大概用掉了23M 内存.</p>\n<p><span class=\"tag\">dd</span> 了两下,速度不错:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@s17931102:~# dd <span class=\"k\">if</span><span class=\"o\">=</span>/dev/zero <span class=\"nv\">of</span><span class=\"o\">=</span><span class=\"nb\">test</span> <span class=\"nv\">bs</span><span class=\"o\">=</span>64k <span class=\"nv\">count</span><span class=\"o\">=</span>4k <span class=\"nv\">oflag</span><span class=\"o\">=</span>dsync</span>\n<span class=\"code-line\"><span class=\"m\">4096</span>+0 records in</span>\n<span class=\"code-line\"><span class=\"m\">4096</span>+0 records out</span>\n<span class=\"code-line\"><span class=\"m\">268435456</span> bytes <span class=\"o\">(</span><span class=\"m\">268</span> MB<span class=\"o\">)</span> copied, <span class=\"m\">1</span>.08052 s, <span class=\"m\">248</span> MB/s</span>\n<span class=\"code-line\">root@s17931102:~# dd <span class=\"k\">if</span><span class=\"o\">=</span>/dev/zero <span class=\"nv\">of</span><span class=\"o\">=</span><span class=\"nb\">test</span> <span class=\"nv\">bs</span><span class=\"o\">=</span>8k <span class=\"nv\">count</span><span class=\"o\">=</span>256k <span class=\"nv\">conv</span><span class=\"o\">=</span>fdatasync</span>\n<span class=\"code-line\"><span class=\"m\">262144</span>+0 records in</span>\n<span class=\"code-line\"><span class=\"m\">262144</span>+0 records out</span>\n<span class=\"code-line\"><span class=\"m\">2147483648</span> bytes <span class=\"o\">(</span><span class=\"m\">2</span>.1 GB<span class=\"o\">)</span> copied, <span class=\"m\">2</span>.51345 s, <span class=\"m\">854</span> MB/s</span>\n</pre></div>\n<p>下载一个来自 Cachefly 的测速文件,差不多跑满了 100Mb 的带宽:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@s17931102:~# wget http://cachefly.cachefly.net/100mb.test</span>\n<span class=\"code-line\">Resolving cachefly.cachefly.net <span class=\"o\">(</span>cachefly.cachefly.net<span class=\"o\">)</span>... <span class=\"m\">205</span>.234.175.175</span>\n<span class=\"code-line\">Connecting to cachefly.cachefly.net <span class=\"o\">(</span>cachefly.cachefly.net<span class=\"o\">)</span><span class=\"p\">|</span><span class=\"m\">205</span>.234.175.175<span class=\"p\">|</span>:80... connected.</span>\n<span class=\"code-line\">HTTP request sent, awaiting response... <span class=\"m\">200</span> OK</span>\n<span class=\"code-line\">Length: <span class=\"m\">104857600</span> <span class=\"o\">(</span>100M<span class=\"o\">)</span> <span class=\"o\">[</span>application/octet-stream<span class=\"o\">]</span></span>\n<span class=\"code-line\">Saving to: <span class=\"s1\">'100mb.test'</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">100mb.test                    <span class=\"m\">100</span>%<span class=\"o\">[===================================================</span>&gt;<span class=\"o\">]</span> <span class=\"m\">100</span>.00M  <span class=\"m\">11</span>.7MB/s   in <span class=\"m\">9</span>.0s</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"m\">2016</span>-02-22 <span class=\"m\">02</span>:52:54 <span class=\"o\">(</span><span class=\"m\">11</span>.1 MB/s<span class=\"o\">)</span> - <span class=\"s1\">'100mb.test'</span> saved <span class=\"o\">[</span><span class=\"m\">104857600</span>/104857600<span class=\"o\">]</span></span>\n</pre></div>\n<p>从 <a class=\"reference external\" href=\"/links.html#cuihao\">cuihao</a> 的镜像源下载 Arch Linux 的安装映像,也能跑满百兆带宽:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@s17931102:~# wget https://mirrors.ustc.edu.cn/archlinux/iso/2016.02.01/archlinux-2016.02.01-dual.iso</span>\n<span class=\"code-line\">Resolving mirrors.ustc.edu.cn <span class=\"o\">(</span>mirrors.ustc.edu.cn<span class=\"o\">)</span>... <span class=\"m\">202</span>.141.176.110, <span class=\"m\">2001</span>:da8:d800:95::110</span>\n<span class=\"code-line\">Connecting to mirrors.ustc.edu.cn <span class=\"o\">(</span>mirrors.ustc.edu.cn<span class=\"o\">)</span><span class=\"p\">|</span><span class=\"m\">202</span>.141.176.110<span class=\"p\">|</span>:443... connected.</span>\n<span class=\"code-line\">HTTP request sent, awaiting response... <span class=\"m\">200</span> OK</span>\n<span class=\"code-line\">Length: <span class=\"m\">735051776</span> <span class=\"o\">(</span>701M<span class=\"o\">)</span> <span class=\"o\">[</span>application/octet-stream<span class=\"o\">]</span></span>\n<span class=\"code-line\">Saving to: <span class=\"s1\">'archlinux-2016.02.01-dual.iso'</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">archlinux-2016.02.01-dual.iso <span class=\"m\">100</span>%<span class=\"o\">[===================================================</span>&gt;<span class=\"o\">]</span> <span class=\"m\">701</span>.00M  <span class=\"m\">11</span>.7MB/s   in 63s</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"m\">2016</span>-02-22 <span class=\"m\">02</span>:57:09 <span class=\"o\">(</span><span class=\"m\">11</span>.2 MB/s<span class=\"o\">)</span> - <span class=\"s1\">'archlinux-2016.02.01-dual.iso'</span> saved <span class=\"o\">[</span><span class=\"m\">735051776</span>/735051776<span class=\"o\">]</span></span>\n</pre></div>\n<p>由于没装web服务器所以先不测试出口带宽......</p>\n<p>运行了一个小脚本来测速,噫可赛艇~:</p>\n<p><a class=\"reference external\" href=\"http://freevps.us/downloads/bench.sh\">http://freevps.us/downloads/bench.sh</a></p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Speedtest <span class=\"o\">(</span>IPv4 only<span class=\"o\">)</span></span>\n<span class=\"code-line\">---------------------</span>\n<span class=\"code-line\">Your public IPv4 is foo</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Location            Provider        Speed</span>\n<span class=\"code-line\">CDN                 Cachefly        <span class=\"m\">11</span>.1MB/s</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Atlanta, GA, US             Coloat          <span class=\"m\">7</span>.26MB/s</span>\n<span class=\"code-line\">Dallas, TX, US              Softlayer       <span class=\"m\">8</span>.13MB/s</span>\n<span class=\"code-line\">Seattle, WA, US             Softlayer       <span class=\"m\">10</span>.6MB/s</span>\n<span class=\"code-line\">San Jose, CA, US    Softlayer       <span class=\"m\">9</span>.82MB/s</span>\n<span class=\"code-line\">Washington, DC, US  Softlayer       <span class=\"m\">9</span>.11MB/s</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Tokyo, Japan                Linode          <span class=\"m\">11</span>.2MB/s</span>\n<span class=\"code-line\">Singapore           Softlayer       <span class=\"m\">11</span>.5MB/s</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Rotterdam, Netherlands      id3.net         <span class=\"m\">6</span>.91MB/s</span>\n<span class=\"code-line\">Haarlem, Netherlands        Leaseweb        <span class=\"m\">7</span>.45MB/s</span>\n</pre></div>\n<p>综上所述,网速棒棒哒~</p>\n<p>编译来自 <a class=\"reference external\" href=\"http://lnmp.org\">lnmp.org</a> 的LNMP 一键安装包......</p>\n<p>用了40多分钟,算不算快咧 _(:з」∠)_</p>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id12\">一点总结</a></h2>\n<p>总之卷的 VPS 还是很棒呐~(๑•̀ㅂ•́)و✧，不过真的还是有些贵😂😂，对于只想搭个梯子的人来讲花销有些大 (´･ω･`).</p>\n<p><del>为了接着用 Arch Linux,咱还是回去用 conoha 吧 _(:з」∠)_</del></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 51,
      "title": " 这是所谓的时间管理浅说 _(:з」∠)_",
      "date_published": 1458230400,
      "body": "\n<p>时间管理到底是啥咱也不太知道呐~ <del>不过还是谢邀</del></p>\n<p>灵感来自前几天 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 的对话:</p>\n<p>其实咱对时间管理没有啥研究啦,这篇文章估计也只是简单地说说咱的 <ruby><rb>经验</rb><rp>(</rp><rt>瞎掰</rt><rp>)</rp></ruby> 而已 😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>时间管理到底是啥咱也不太知道呐~ <del>不过还是谢邀</del></p>\n\n<p>灵感来自前几天 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 的对话:</p>\n<blockquote>\n<p>ヨイツの賢狼ホロ, [14.03.16 22:23]\n/me 下一篇文章的方向是啥咧😂</p>\n<p>farseerfc 😂 0xC13D4796, [14.03.16 22:23]\n想看看萌狼聊時間/計劃管理</p>\n<p>pandada8, [14.03.16 22:24]\n时间管理 aka 怎样关掉im</p>\n<p>ヨイツの賢狼ホロ, [14.03.16 22:24]\n[In reply to farseerfc 😂 0xC13D4796]\n……</p>\n<p>ヨイツの賢狼ホロ, [14.03.16 22:24]\n现在纯粹是因为咱比较闲而已啦😂😂</p>\n<p>Frantic1048, [14.03.16 22:26]\n[In reply to farseerfc 😂 0xC13D4796]\n+1</p>\n<p>Kasei Wang, [14.03.16 22:26]\n想知道萌狼早上怎么起来的</p>\n<p>ヨイツの賢狼ホロ, [14.03.16 22:27]\n[In reply to Kasei Wang]\n直觉？😂</p>\n<p>Frantic1048, [14.03.16 22:27]\n论如何能够保持大一的作息水平 ~(&gt;_&lt;~)</p>\n<p>Kasei Wang, [14.03.16 22:29]\n[In reply to ヨイツの賢狼ホロ]\n讲一下怎么做到早起吧（今天起来十点半多了</p>\n<p>Frantic1048, [14.03.16 22:29]\n[In reply to Kasei Wang]\n9 点起的 +1</p>\n<p>ヨイツの賢狼ホロ, [14.03.16 22:29]\n怎么都那么晚😂😂</p>\n<p>Frantic1048, [14.03.16 22:30]\n[In reply to pandada8]\n不管怎么放都能连出自己都无法相信的纯熟的关闹钟手法 （´＿｀）</p>\n<p>pandada8, [14.03.16 22:30]\n我觉得你总不至于下床后再上床睡觉</p>\n<p>farseerfc 😂 0xC13D4796, [14.03.16 22:30]\n[In reply to Frantic1048]\n然後5分鐘內忘記並睡死</p>\n<p>---- Telegram 默认复制出来的格式就这样 😂😂😂</p>\n</blockquote>\n<p>其实咱对时间管理没有啥研究啦,这篇文章估计也只是简单地说说咱的 <ruby><rb>经验</rb><rp>(</rp><rt>瞎掰</rt><rp>)</rp></ruby> 而已 😂😂</p>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id12\">时间管理到底是啥玩意?</a></h2>\n<blockquote>\n<p>时间管理（Time Management）就是用技巧、技术和工具帮助人们完成工作，实现目标。\n时间管理并不是要把所有事情做完，而是更有效的运用时间。\n时间管理的目的除了要决定你该做些什么事情之外，另一个很重要的目的也是决定什么事情不应该做；\n时间管理不是完全的掌控，而是降低变动性。时间管理最重要的功能是透过事先的规划，做为一种提醒与指引。</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86\">Wikipedia:时间管理</a></p>\n</blockquote>\n<p>如此长的定义看的咱都要睡着了诶😴,如果咱没理解错的话,时间管理就是尽可能的提高时间利用率,在有限的时间里做最有效的事呗~</p>\n<blockquote>\n<p>「那个时候的咱呢，的确是不谙世事。相信世间看不惯的事情全都有解决的方法。\n讨厌被依赖崇敬的话就去旅行，没有朋友去交就好了。\n而且，从心底里相信温水般的快乐时间会永远持续下去。\n不过也经常因此哭鼻子就是。那也许很合汝的胃口呐。\n呵呵……不过呢，越是回想起苦涩的回忆，脸上就笑得越开心。」</p>\n<p>---- <del>时间管理的重要性(雾)</del></p>\n</blockquote>\n<p>从时间管理下还衍生出 <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Project_management\">项目管理</a> 和 <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Attention_management\">Attention management  (注意力管理?)</a> (´･ω･`)</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id13\">坊间流传的几种时间管理分析方法</a></h2>\n<p>关于坊间流传的几种时间管理分析方法咧, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Time_management\">英文维基百科</a> 上提到了几种</p>\n<p>(中文的坑好像还没填 (ノ=Д=)ノ┻━┻)</p>\n<p><del>就这样?</del></p>\n</div>\n<div class=\"section\" id=\"q1-kasei-wang\">\n<h2><a class=\"toc-backref\" href=\"#id14\">Q1:Kasei Wang:想知道萌狼早上怎么起来的</a></h2>\n<blockquote>\n~ Frantic1048:论如何能够保持大一的作息水平 ~(&gt;_&lt;~)</blockquote>\n<p>这个...... 咱不知道该怎么说好了  (╯°Д°)╯ ┻━┻</p>\n<p>如果咱要硬解释一下的话,可能就是老套的 \"早点睡觉\" 了~(&gt;_&lt;~)</p>\n<p>晚上早点睡 ~(&gt;_&lt;~) ,就是这样 😂😂</p>\n<blockquote>\n<p>「听说，上天是把我们的身体塑造成一天只需要睡一次觉。」</p>\n<p>「咱是狼呐。」</p>\n<p>「又没有人起床，也只能睡觉呗。不睡觉只会觉得冷，而且还会饿肚子。」</p>\n<p>「嗯，毕竟现在这季节比较冷清。不过，还真是怪异。」\"</p>\n<p>---- 这个时候说这个是不是不太合适 😂😂</p>\n</blockquote>\n<p>由此可以得出这样的结论 (雾):</p>\n<ul>\n<li><p class=\"first\">不要睡回笼觉  (╯￣Д￣)╯ ┻━┻</p>\n<blockquote>\n<p>但是如果汝觉得下午容易犯困的话,中午小憩一刻也无妨 (只是不要睡过头...... )</p>\n</blockquote>\n</li>\n<li><p class=\"first\">起床整理完以后记得吃早餐哟~  (´･ω･`)</p>\n<blockquote>\n<p>记得食用富含蛋白质的食物呐~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">如果汝有能力的话,可以拉拢和汝在一起的人也早起咯~ <del>不从的话就吃掉好了</del></p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"q2\">\n<h2><a class=\"toc-backref\" href=\"#id15\">Q2:为啥说咱很高产?</a></h2>\n<p>真相是咱不像 <a class=\"reference external\" href=\"/links.html#lilydywg\">lilydywg</a> , <a class=\"reference external\" href=\"/links.html#acgtyrent\">acgtyrent</a> 和 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 那样写的出相对比较有深度的文章啦~ ( 倒是萌新向教程比较多 😂😂 )</p>\n<blockquote>\n「咱可是贤狼啊。起码还是知道这世界上有很多东西是我所不了解的。」</blockquote>\n<p>如果真要说出啥原因的话,咱觉得应该有这几种:</p>\n<ul>\n<li><p class=\"first\">现在纯粹是因为咱没有工作因此比较闲而已啦~</p>\n</li>\n<li><p class=\"first\">平常想法比较多?</p>\n<blockquote>\n<p>比如在写这篇文章之前咱还计划过其他的主题呐~ (  (╯•̀_&gt;•́)╯ ┻━┻ 虽然到现在还没付诸实施就是了 )</p>\n</blockquote>\n</li>\n<li><p class=\"first\">没被太多强加的事情干预?</p>\n<blockquote>\n<blockquote>\n<p>「要如何看待事情是自己控制的。既然咱想要回到北方，不管怎样都得离开那里。既然没有人要拉住咱，咱用后脚踢砂子离开就是了，这样也比较能够死心。不过，咱不可能就这么安安静静离开。」</p>\n</blockquote>\n<p>就像这样? ( 然而想不做被强加的事情似乎很难的样子呢~ )</p>\n</blockquote>\n</li>\n<li><p class=\"first\">写博客算是一种真正的兴趣?</p>\n<blockquote>\n<blockquote>\n<p>如果你够幸运的话，还可以让“自己的兴趣”成为“自己的职业”——这是很幸福的事情 :)</p>\n<p>如此一来，就把“工作”和“娱乐”合为一体。你将不再有“工作时间”和“业余时间”的差异——不论是“工作时间”还是“业余时间”，对你而言都是“娱乐时间”。很爽的！</p>\n<p>当这两者统一之后，还有更多其它的好处。比如说，你在自己的工作中，就可以比别人走得更远，因此也就更有可能成为该领域的【优秀】者。</p>\n<p>---- <a class=\"reference external\" href=\"https://program-think.blogspot.com/2015/12/Hobbies-and-Interests.html\">编程随想的博客:什么是【真正的】兴趣爱好？以及它有啥好处？</a></p>\n</blockquote>\n<p>至少现在来说,写博客算是咱的一个兴趣吧 ~(&gt;_&lt;~)</p>\n</blockquote>\n</li>\n<li><p class=\"first\">不常刷微博和 SNS ?</p>\n<blockquote>\n<p>自从看了 <a class=\"reference external\" href=\"https://program-think.blogspot.com/2012/02/microblog-and-time-management.html\">为啥俺不常用微博——兼谈时间管理心得</a>\n和 <a class=\"reference external\" href=\"https://program-think.blogspot.com/2015/02/Is-Blogging-Dead.html\">“传统博客”过时了吗？——兼谈各种媒介形态的优缺点</a>\n再加上咱用 IFTTT 帮咱发文章更新,咱已经不知道有多久没上 Twitter 和 Google+ 了 （。＞ω＜）。</p>\n</blockquote>\n</li>\n</ul>\n<p>大概就这些 (っ╹ ◡ ╹ )っ?</p>\n</div>\n<div class=\"section\" id=\"id9\">\n<h2><a class=\"toc-backref\" href=\"#id16\">推荐一些时间管理相关的资源?</a></h2>\n<p>解释这些,当然要找专业的来啦 o(*￣3￣)o</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://www.zhihu.com/topic/19550921/top-answers\">知乎上的 \"时间管理\" 话题</a> ,干货丰富,注意前方争论出没 😂😂</li>\n<li><a class=\"reference external\" href=\"http://www.mifengtd.cn/\">褪墨</a> ,翻译和分享时间管理和个人提升等等主题上的内容和经验的网站,看起来比较专精 （´＿｀）</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 50,
      "title": " 在 Windows 上编织 Pelican 博客 -- MSYS2篇",
      "date_published": 1457096400,
      "body": "\n<p>用 Windows 那是迫不得已……</p>\n<p><del>人生赢家</del> <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 这样写到......</p>\n<p>确实,Pelican 虽然是跨平台的,但是......</p>\n<p>如果汝用了 <span class=\"tag\">pelican-quickstart</span> ,汝的目录下会有一个 <span class=\"tag\">Makefile</span> 文件,那么问题来了,\nWindows 里上哪读 Makefile 啦(ノ=Д=)ノ┻━┻</p>\n<p>所以只好在 Windows 里搞个类 <ruby><rb>Unix</rb><rp>(</rp><rt>Linux</rt><rp>)</rp></ruby> 环境了(´･ω･`)</p>\n<p><del>某人:其实把 Makefile 魔改成批处理文件也是可以的$#W#@$##%$^&amp;%^%^$^%&amp;%</del></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>用 Windows 那是迫不得已……</p>\n\n<p><del>人生赢家</del> <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 这样写到......</p>\n<blockquote>\n<p>寄宿在 Github Pages 上的静态博客通常有两种方案，其一是使用 Jekyll 方式撰写，\n这可以利用 Github Pages 原本就有的 Jekyll支持 生成静态网站。\n另一种是在 本地 也就是自己的电脑上生成好，然后把生成的 HTML 网站 push 到 Github Pages ，\n这种情况下 Github Pages 就完全只是一个静态页面宿主环境。</p>\n<p>我用 Pelican 生成博客，当然就只能选择后一种方式了。\n这带来一些不便，比如本地配置 pelican 还是有一点点复杂的，所以不能随便找台电脑就开始写博客。\n有的时候只是想修正一两个错别字， 这时候必须打开某台特定的电脑才能编辑博客就显得不太方便了。\n再比如 pelican 本身虽然是 python 写的所以跨平台，但是具体到博客的配置方面， Windows 环境和 Linux/OSX/Unix-like 环境下还是有 些许出入 的。\n还有就是没有像 wordpress 那样的基于 web 的编辑环境，在手机上就不能随便写一篇博客发表出来\n（不知道有没有勇士尝试过在 Android 的 SL4A 环境下的 python 中跑 pelican ，还要配合一个 Android 上的 git 客户端 ）。</p>\n<p>---- <a class=\"reference external\" href=\"https://farseerfc.me/travis-push-to-github-pages-blog.html\">Farseerfc.me:用 Travis-CI 生成 Github Pages 博客</a></p>\n</blockquote>\n<p>确实,Pelican 虽然是跨平台的,但是......</p>\n<p>如果汝用了 <span class=\"tag\">pelican-quickstart</span> ,汝的目录下会有一个 <span class=\"tag\">Makefile</span> 文件,那么问题来了,\nWindows 里上哪读 Makefile 啦(ノ=Д=)ノ┻━┻</p>\n<p>所以只好在 Windows 里搞个类 <ruby><rb>Unix</rb><rp>(</rp><rt>Linux</rt><rp>)</rp></ruby> 环境了(´･ω･`)</p>\n<p><del>某人:其实把 Makefile 魔改成批处理文件也是可以的$#W#@$##%$^&amp;%^%^$^%&amp;%</del></p>\n<div class=\"section\" id=\"msys2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">为啥是msys2?</a></h2>\n<blockquote>\n<a class=\"reference external\" href=\"/links.html#quininer\">quininer</a> :明明是 OneGet + PowerShell 大法好嘛~</blockquote>\n<p>在 Windows 世界里最出名的类 Unix 环境不是 <a class=\"reference external\" href=\"http://cygwin.com/\">Cygwin</a> 么?</p>\n<blockquote>\n<p>因为 msys2 有 pacman 啦~</p>\n<p>因为 msys2 有 pacman 啦 ~ (╯T▽T)╯ ┻━┻</p>\n<p>因为 msys2 有 pacman 啦 ~ (ノ=Д=)ノ┻━┻</p>\n<p class=\"attribution\">—<del>重要的事情说三遍</del> (๑•̀ㅂ•́)و✧</p>\n</blockquote>\n<p>总之为了 pacman 咱最后选了 msys2 😂😂😂</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id7\">安装和设置 msys2</a></h2>\n<p>去 <a class=\"reference external\" href=\"http://msys2.github.io/\">官方网站</a> 或是 <a class=\"reference external\" href=\"http://mirrors.ustc.edu.cn/msys2/Base/\">崔主席的镜像源</a> 下载基本组件包啦~ ( <a class=\"reference external\" href=\"/links.html#cuihao\">cuihao</a> 好棒~ )</p>\n<p>如果需要, <a class=\"reference external\" href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/msys2\">把软件仓库换成崔主席的镜像呗~</a></p>\n<p>接下来更新msys2和安装基本工具 ( 咱用了 Github 所以再装个 Git ):</p>\n<blockquote>\npacman -Syu\npacman -S base-devel make git</blockquote>\n<div class=\"tag warning fg-white compound\">\n<p class=\"compound-first\">截至写这篇文章时,咱从pacman安装的 pip ( <span class=\"tag\">mingw-w64-x86_64-python3-pip</span> ) 会因为一个 ImportError 没法装任何软件包呐~ ( pia之 (╯＠ω＠)╯ ┻━┻ )</p>\n<p class=\"compound-last\">所以只好装个 Windows 版的 Python 😂</p>\n</div>\n</div>\n<div class=\"section\" id=\"pelican-windows-python\">\n<h2><a class=\"toc-backref\" href=\"#id8\">安装 pelican 和 Windows 版 Python</a></h2>\n<p><a class=\"reference external\" href=\"https://www.python.org/downloads/windows/\">去 Python.org 下载啦~</a> ,记得把 <span class=\"tag\">python</span> 和 <span class=\"tag\">pip</span> 添加到系统的 <span class=\"tag\">PATH</span> 中.( msys2 好像可以用 Windows 的 PATH ~)</p>\n<p>接下来打开 msys2 shell (其实就是 Bash 啦 😂) 把 Windows 里的 python 软连接到 <span class=\"tag\">/usr/bin/python</span> 上</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 不知道在哪? 用 whereis 命令查一下啦~</span></span>\n<span class=\"code-line\">$ whereis python</span>\n<span class=\"code-line\">/c/python35/python.exe</span>\n<span class=\"code-line\"><span class=\"c1\"># 用 ln -s &lt;源路径&gt; &lt;目标路径&gt; 创建一个符号链接.</span></span>\n<span class=\"code-line\">$ ln -s /c/python35/python.exe /usr/bin/python</span>\n</pre></div>\n<p>然后用 pip 安装 pelican _(:з」∠)_</p>\n<blockquote>\npip install pelican</blockquote>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id9\">试验</a></h2>\n<p>先用各种不同的方法把汝的 pelican 文件夹复制到 msys2 的主文件夹里啦~ ( 在汝安装 msys2 的文件夹中有一个 <span class=\"tag\">home/&lt;汝 Windows 系统的用户名&gt;/</span> 的文件夹啦  (╯°∧°)╯ ┻━┻ )</p>\n<p>如果汝用了 <span class=\"tag\">pelican-quickstart</span> 生成了 develop_server.sh 那它喂给 sh 啦~</p>\n<blockquote>\nsh develop_server.sh start</blockquote>\n<p>如果没有的话,那就自己 make 呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 生成html</span></span>\n<span class=\"code-line\">make html</span>\n<span class=\"code-line\"><span class=\"c1\"># 运行测试服务器</span></span>\n<span class=\"code-line\">make serve</span>\n</pre></div>\n<p>有时汝可能用到一些其它程序,那么汝只好通过 pacman 安装或者自己编译啦 (╯‵﹏′)╯ ┻━┻</p>\n<p><del>这篇文章其实是在 Arch Linux 上完成的所以并没有啥截图😂😂😂</del></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 49,
      "title": " 装完 Arch Linux 再装 Windows 然后修引导~",
      "date_published": 1456131600,
      "body": "\n<p>装完 Arch Linux 再装 Windows 以后 GRUB 没啦~ Windows 出来背锅 _(:з」∠)_</p>\n<p><del>要啥 Windows 啊~</del></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>装完 Arch Linux 再装 Windows 以后 GRUB 没啦~ Windows 出来背锅 _(:з」∠)_</p>\n\n<p><del>要啥 Windows 啊~</del></p>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id3\">准备工作</a></h2>\n<ul class=\"simple\">\n<li>一个可启动的 Linux 的 Live USB ( 咱是用的 Arch Linux 的安装 ISO )</li>\n</ul>\n<p>好像没啥了诶~(最好要连上网,可以参阅 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Beginners'_guide\">ArchWiki</a> 呗~ ).</p>\n<p>如果汝使用 UEFI 主板，且 UEFI 启动模式（优于 BIOS/Legacy 模式）已启用，CD/USB 会自动通过systemd-boot 启动 Arch Linux。要确认是否已进入UEFI模式，检查下面目录是否有文件呗~：</p>\n<blockquote>\n# ls /sys/firmware/efi/efivars</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id4\">确定设备名称,然后挂载</a></h2>\n<p>用 <span class=\"tag\">lsblk</span> 确定汝 Linux 安装到哪个磁盘里呐~</p>\n<blockquote>\n<p>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</p>\n<p>sda         8:0    0 298.1G  0 disk</p>\n<p>├─sda1    8:1    0    40G  0 part</p>\n<p>├─sda2    8:2    0 256.1G  0 part</p>\n<p>└─sda3    8:3    0     2G  0 part</p>\n</blockquote>\n<p>咱这个栗子是 <span class=\"tag\">/dev/sda1</span> ,MBR 模式的. <span class=\"tag\">sda1</span> 是 <span class=\"tag\">/</span> ,:code:<cite>sda2</cite> 是 <span class=\"tag\">/home</span> (´･ω･`).</p>\n<p>然后挂载上, archiso 里有个天然的适合的挂载点~</p>\n<blockquote>\n<p># mount /dev/sda1 /mnt</p>\n<p># mount /dev/sda2 /mnt/home</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"chrooting\">\n<h2><a class=\"toc-backref\" href=\"#id5\">chrooting......</a></h2>\n<p>用 <span class=\"tag\">arch-chroot</span> chroot 进目标系统:</p>\n<blockquote>\n# arch-chroot /mnt /bin/bash</blockquote>\n</div>\n<div class=\"section\" id=\"mbr-grub\">\n<h2><a class=\"toc-backref\" href=\"#id6\">MBR  安装 GRUB (´･ω･`)</a></h2>\n<p>这样(记得用汝实际的磁盘名称替换 <span class=\"tag\">sda</span> ,不要后面的数字.)</p>\n<blockquote>\n<p># grub-install --target=i386-pc --recheck --debug /dev/sda</p>\n<p># grub-mkconfig -o /boot/grub/grub.cfg</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"uefi-grub\">\n<h2><a class=\"toc-backref\" href=\"#id7\">UEFI 安装 GRUB _(:з」∠)_</a></h2>\n<p>这样(某些系统的 <span class=\"tag\">--efi-directory</span> 可能是 :code`/boot/EFI` ,不管啦 (ノ=Д=)ノ┻━┻ )</p>\n<blockquote>\n<p># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck</p>\n<p># grub-mkconfig -o /boot/grub/grub.cfg</p>\n</blockquote>\n<hr class=\"docutils\">\n<p>最后离开 chroot 环境然后重启,记得拔掉U盘~</p>\n<blockquote>\n<p># exit</p>\n<p># reboot</p>\n</blockquote>\n<p>所以嘛,要啥 Windows 呐~ (ノ=Д=)ノ┻━┻</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 48,
      "title": " 简单总结一下咱自己用过的一些 CMS",
      "date_published": 1457884800,
      "body": "\n<p>仔细数数咱也用过不少 <ruby><rb>CMS</rb><rp>(</rp><rt>内容管理系统</rt><rp>)</rp></ruby> 了呐~，或许咱应该小小的总结一下？</p>\n<p>PS:本文会带有大量个人的主观意见😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>仔细数数咱也用过不少 <ruby><rb>CMS</rb><rp>(</rp><rt>内容管理系统</rt><rp>)</rp></ruby> 了呐~，或许咱应该小小的总结一下？</p>\n<p>PS:本文会带有大量个人的主观意见😂😂</p>\n\n<div class=\"section\" id=\"wordpress-cms\">\n<h2><a class=\"toc-backref\" href=\"#id3\">WordPress:大众和普通的CMS</a></h2>\n<p>WordPress 的大名想必各位都知道吧。</p>\n<blockquote>\n<p>WordPress是一个注重美学、易用性和网络标准的个人信息发布平台。WordPress虽为免费的开源软件，但其价值无法用金钱来衡量。</p>\n<p>WordPress的图形设计在性能上易于操作、易于浏览；在外观上优雅大方、风格清新、色彩诱人。</p>\n<p>使用WordPress可以搭建功能强大的网络信息发布平台，但更多的是应用于个性化的博客。\n针对博客的应用，WordPress能让您省却对后台技术的担心，集中精力做好网站的内容。</p>\n<p>---- <a class=\"reference external\" href=\"https://cn.wordpress.org\">WordPress 中文首页</a></p>\n</blockquote>\n<p>WordPress 也是咱第一个用的内容管理系统啦，作为希望用户专注于内容的 CMS ，WordPress 有几点做的非常棒：</p>\n<ul class=\"simple\">\n<li>内置可视化编辑器，无需掌握大量标记语法就可以开始写文章。</li>\n<li>每次大版本更新都会更新一套主题 (Twenty 系列),都非常赞~</li>\n<li>五分钟安装向导名副其实 (真的只要五分钟一个 WordPress 网站就可以投入使用了2333)</li>\n</ul>\n<p>当然缺点也是有的 :</p>\n<ul class=\"simple\">\n<li>作为用 <del>世界最好的</del> PHP 语言编写的 Web应用,需要一个资瓷 PHP 的 Web 服务器来运行😂😂</li>\n<li>树大招风,WordPress 也容易成为垃圾评论和骇客的目标 ( 前几星期的 Linux Mint 事件 就是骇客通过 WordPress入侵了他们的服务器 😂😂😂 )</li>\n<li>用默认主题显得同质化,自定义主题又太复杂......</li>\n</ul>\n<p>所以咱最后还是换掉了 WordPress 😂😂😂😂</p>\n</div>\n<div class=\"section\" id=\"mediawiki-wiki\">\n<h2><a class=\"toc-backref\" href=\"#id4\">MediaWiki:潜力无限的Wiki平台</a></h2>\n<p>没听过 MediaWiki 汝总该听说过维基百科吧,维基百科就是运行在维基媒体基金会开发的 MediaWiki 上呐~</p>\n<blockquote>\n<p>MediaWiki是一个最初为维基百科量身打造的自由wiki套件，用PHP语言写成。</p>\n<p>现在，非营利的维基媒体基金会下辖的所有wiki项目、互联网上的众多其他wiki网站也基于此套软件搭建。</p>\n<p>---- <a class=\"reference external\" href=\"https://www.mediawiki.org\">MediaWiki.org</a></p>\n</blockquote>\n<p>简单来说 MediaWiki 是一套 Wiki 系统,不过通过扩展也可以实现各种其他功能 ( 例如 <a class=\"reference external\" href=\"https://www.wikidata.org\">WikiData</a> ) .</p>\n<p>咱要说 MediaWiki 又有啥优点咧?</p>\n<ul class=\"simple\">\n<li>因为是 Wiki 系统嘛,所以方便 <ruby><rb>协作</rb><rp>(</rp><rt>一同填坑</rt><rp>)</rp></ruby> 😂😂</li>\n<li>文档丰富,基本上覆盖了大部分内容 ( 给用户的帮助在重写ing~ )</li>\n<li>扩展丰富,可以实现更多功能</li>\n</ul>\n<p>当然还是老样子,缺点也是有的:</p>\n<ul class=\"simple\">\n<li>和 WordPress 一样,作为用 <del>世界最好的</del> PHP 语言编写的 Web应用,需要一个资瓷 PHP 的 Web 服务器来运行😂😂</li>\n<li>(可能是唯一?) 不太适合博客型网站 (因为不方便生成RSS)</li>\n<li>部件繁杂,不知道哪里出问题就吐核了 (不过会有堆栈跟踪,偶尔会派上些用场😂😂)</li>\n<li><del>没有权限汪们想要的精确到条目的权限控制😂😂</del></li>\n<li>MediaWiki 标记太复杂啦 (╯・＿・)╯ ┻━┻  ( 或者可以 <a class=\"reference external\" href=\"/tech/visualeditor_for_mediawiki.html\">安装可视化编辑器</a> ,可还是好复杂 (╯X﹏X)╯ ┻━┻  )</li>\n</ul>\n<p>不过咱还在坚持用它当咱自己的资料库呗~</p>\n</div>\n<div class=\"section\" id=\"ghost\">\n<h2><a class=\"toc-backref\" href=\"#id5\">Ghost:轻博客的开端?</a></h2>\n<blockquote>\n<p>Ghost是用JavaScript编写的博客平台，基于MIT许可证开放源代码。Ghost的设计主旨是简化个人网站发布以及网上出版的过程。</p>\n<p>Ghost是一款个人博客系统，它是使用Node.js语言和MySQL数据库开发的，同时支持MySQL、MariaDB、SQLite和PostgreSQL。用户可以在支持Node.js的服务器上使用自己的博客。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/Ghost_%28%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0%29\">Wikipedia 上的 \"Ghost (博客平台)\" 条目</a></p>\n</blockquote>\n<p>咱曾经 <a class=\"reference external\" href=\"/tech/ghost_blog_archlinux.html\">安装过 Ghost</a> ,安装过程看着挺吓人,但是按照官方的文档来也可以一次成功~</p>\n<p>咱的第一印象就是:比 WordPress 轻多了,真的.</p>\n<p>Ghost 最大的优点是原生支持 Markdown 和 HTML ,汝就可以愉快的书写咯~~</p>\n<p>不过 Ghost 是 Node.js 应用，安装 Node.js 首先就是个大公程。</p>\n<p>另外作为开发中的软件，还有很大的空间……</p>\n</div>\n<div class=\"section\" id=\"pelican\">\n<h2><a class=\"toc-backref\" href=\"#id6\">Pelican:笔记本?</a></h2>\n<p>第一次接触到 Pelican 是 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 的博客+安利 (雾),\n然后正为 MediaWiki 的 RSS 扩展苦手的咱干脆就换成了 Pelican.</p>\n<p>farseerfc 说 Pelican 有这些优点:</p>\n<ul>\n<li><p class=\"first\">純 Python 實現。 這意味着我可以換用任何 Python 解釋器而不必擔心兼容性問題。比如我就換成了 PyPy。</p>\n<blockquote>\n<p>因为是纯 Python 实现,可以 <a class=\"reference external\" href=\"http://farseerfc.me/travis-push-to-github-pages-blog.html\">通过Travis-CI 自动生成 html</a>,\n也可以通过 msys2 在 Windows 上运行.没有方便的 Linux 环境再也不是偷懒的理由了呐~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">多語言支持。因爲 Pelican 的作者似乎是個法國人。不過這個似乎大部分人不需要…… 我是想儘量把一篇博客寫成三種語言作爲鍛鍊吧。</p>\n<blockquote>\n<p>fc 的博客就有三个语言啦~(虽然咱现在没用到)</p>\n</blockquote>\n</li>\n<li><p class=\"first\">ReST 。這樣我就可以用 Leo 的 @auto-rst 直接寫 ReST了。簡單方便快捷有效。</p>\n<blockquote>\n<p>ReST 的学习曲线有些陡峭,但掌握之后就是一马平川了哟☺🙂😄</p>\n</blockquote>\n</li>\n</ul>\n<p>咱说 Pelican 还有这些优点:</p>\n<ul class=\"simple\">\n<li>生成的是静态网站,找个 Web 服务器就可以放 (或者放在 Github Pages 上,极客风格 (?) 十足 )😂😂😂</li>\n<li>使用的是 jinja 模板引擎 (咱照着默认的 simple 主题做了现在这套主题, <del>虽然只是能看而已</del> 😂😂😂)</li>\n</ul>\n<p>不过 Pelican 也不是完美的:</p>\n<ul class=\"simple\">\n<li>静态网站的评论是个难题啊 ( 只能靠第三方服务,例如 Disqus )</li>\n<li>没有类似 WordPress , MediaWiki 和 Ghost 的文章编辑界面 ( 虽然 retext 很好用~ )</li>\n<li>Linux 风格的 Makefile 让迁移有些小小的难度 ( 不然为啥会在Windows 上用msys2...... )</li>\n</ul>\n<p>不过现在咱还要接着用 Pelican 呐~😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 47,
      "title": " Arch Linux 中文社区非官方生存手册",
      "date_published": 1479744000,
      "body": "\n<p>汝要入坑Arch Linux了吗?那还不赶紧加入Arch Linux中文社区~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>汝要入坑Arch Linux了吗?那还不赶紧加入Arch Linux中文社区~</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id12\">什么是Arch Linux?</a></h2>\n<blockquote>\n<p>Arch Linux 是一个针对 i686/x86-64 平台独立开发的 GNU/Linux 发行版，遵循轻量、简洁、优雅的开发原则，借灵活的架构应用于各种环境。Arch 安装后只提供最基本的系统，用户可以根据自己的需求来搭建不同的系统环境。官方并不提供图形化的配置工具，多数系统配置是通过修改文本文件来进行的。Arch 尽力提供最新稳定版本的软件。</p>\n<p>Arch Linux 使用 Pacman 作为包管理器，它在提供了一个简单的包管理器同时，也提供了一个易用的包构建系统，使用户能够轻松地管理和定制官方提供的、用户自己制作的、甚至是来自第三方的各种软件包。仓库系统也能够让用户轻松的构建和维护自己的编译脚本、软件包和仓库，这样将有助于社区的成长和建设。</p>\n<p>Arch Linux 的基本安装包由 [core] 软件库提供。此外 [extra], [community] 和 [testing] 软件库则提供了大量的的高品质软件以满足你的需求。Arch Linux 同时也通过 Arch 用户软件仓库(AUR)提供了 [unsupported] 软件库，里面有大量的编译脚本，用户可以通过 <cite>makepkg</cite> 工具轻松地从源码中编译软件。</p>\n<p>Arch Linux 采用“滚动升级”策略，这样可以实现“一次安装，永久更新”。升级到下一个“版本”的 Arch Linux 几乎不需要重新安装系统，只需一行命令，你就能轻松的享受到最新的 Arch Linux。</p>\n<p>Arch Linux 努力和上游软件源码保持一致，只有使程序能够在 Arch Linux 正常编译运行的补丁才会被加入更新中。</p>\n<p>总之， Arch Linux 是一个灵活、简洁的、满足有一定经验的 Linux® 用户的需求的发行版。它强大且易于管理的特性，使其成为可以完美胜任服务器和工作站的发行版。它可以变成任何你想要的样子。如果你也认为这是一个 GNU/Linux 发行版该做的，欢迎你来自由使用并参与其中，为社区做出贡献，欢迎来到 Arch Linux！</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://www.archlinuxcn.org/about/\">Arch Linux 中文社区</a> ,翻译自 <a class=\"reference external\" href=\"https://www.archlinux.org/about/\">Archlinux.org</a> .</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id13\">先把Arch Linux装上先~</a></h2>\n<p>ArchWiki的文档应该算比较详细的啦~</p>\n<ul class=\"simple\">\n<li>第一次安装Arch Linux的新手建议看看 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Beginners'_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">Beginners' guide</a></li>\n<li>有经验的用户可以看看 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Installation_guide_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">Installation guide</a></li>\n<li>想找交互式的安装程序? 可以试试 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Archboot\">ArchBoot</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id14\">加入Arch Linux中文社区论坛呗~</a></h2>\n<p>用Arch Linux时发现了些问题?英文水平不足担心发到 <a class=\"reference external\" href=\"https://bbs.archlinux.org\">官方论坛</a> 泥牛入海? 来中文论坛呗~</p>\n<p>中文论坛在这~: <a class=\"reference external\" href=\"https://bbs.archlinuxcn.org/\">https://bbs.archlinuxcn.org/</a></p>\n<p>和参加其他的论坛讨论一样,先读读 <a class=\"reference external\" href=\"/links.html#phoenixlzx\">phoenixlzx</a> 写的 <a class=\"reference external\" href=\"https://bbs.archlinuxcn.org/viewtopic.php?id=1072\">Arch Linux 中文社区 新手生存指南</a> , <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Forum_etiquette_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">官方编写的论坛礼仪指南</a> 也可以作为参考呗~</p>\n</div>\n<div class=\"section\" id=\"id8\">\n<h2><a class=\"toc-backref\" href=\"#id15\">加入中文社区的聊天频道呗~</a></h2>\n<p>和论坛相比,中文社区聊天频道更 <ruby><rb>活跃</rb><rp>(</rp><rt>洪水</rt><rp>)</rp></ruby> 呗~</p>\n<p>在多才多艺的百合仙子 <a class=\"reference external\" href=\"/links.html#lilydjwg\">lilydjwg</a> , <del>Tox传教士 quininer</del> (后来 toxsync 去了 #archlinux-cn-offtopic ) ,和 PhD <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 的协力下,社区交流群实现了irc+Telegram+xmpp+Tox的多通道联通,撒花~</p>\n<div class=\"section\" id=\"irc\">\n<h3><a class=\"toc-backref\" href=\"#id16\">加入irc频道</a></h3>\n<p>Web界面在这: <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a></p>\n<p>如果汝使用irc客户端的话:</p>\n<blockquote>\n<p>irc服务器: <span class=\"tag\">irc.freenode.net</span></p>\n<p>端口: <span class=\"tag\">7000</span> (SSL) / <span class=\"tag\">6667</span> (Plain)</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"xmpp\">\n<h3><a class=\"toc-backref\" href=\"#id17\">通过XMPP加入</a></h3>\n<p>使用XMPP帐号添加 <span class=\"tag\">talk@archlinuxcn.org</span> 为好友即可加入。成功加入将收到欢迎信息。</p>\n</div>\n<div class=\"section\" id=\"tox\">\n<h3><a class=\"toc-backref\" href=\"#id18\">通过Tox加入</a></h3>\n<p>添加下面那个Tox ID为好友,然后按照它的提示操作呗~</p>\n<blockquote>\n34922396155AA49CE6845A2FE34A73208F6FCD\n6190D981B1DBBC816326F26C6CDF3581F697E7</blockquote>\n</div>\n<div class=\"section\" id=\"telegram\">\n<h3><a class=\"toc-backref\" href=\"#id19\">通过Telegram加入</a></h3>\n<p>hmmm.....为保护群组不被外星人攻击，所以这里就不贴上链接啦~</p>\n<p>汝可以通过其它方法加入,贴上汝在Telegram的用户名呗~(其它已经在群里的用户会帮汝拉进来......)</p>\n<p><del>或者,在Telegram上添加@Jqs7Bot这个机器人,通过群组查询中的Linux分类找到#archlinux-cn(irc)的链接再加入呗~</del></p>\n<p>(后来链接被撤销了)</p>\n</div>\n<div class=\"section\" id=\"id9\">\n<h3><a class=\"toc-backref\" href=\"#id20\">群内的一般原则</a></h3>\n<ul class=\"simple\">\n<li><del>要优雅,不要污~</del></li>\n<li>(irc/xmpp/tox) 推荐一个由百合仙子帮忙的图床 <a class=\"reference external\" href=\"https://img.vim-cn.com/\">https://img.vim-cn.com/</a> 呗~</li>\n<li>(Telegram) 发没压缩的图片和声音的话irc可是收不到的哟~</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"id10\">\n<h2><a class=\"toc-backref\" href=\"#id21\">如果汝的英语水平也不错的话......</a></h2>\n<p>如果汝的英语水平不错的话，太棒啦~,社区正需要汝这样的人呐~</p>\n<p>汝可以......</p>\n<ul class=\"simple\">\n<li>帮助翻译ArchWiki,可以在 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/ArchWiki_Translation_Team_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29\">ArchWiki上翻到相应页面呗~</a></li>\n<li>创建软件包并提交到 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_User_Repository\">AUR(Arch Linux User Repository)</a> ,高质量的软件包可能会被TU(授信用户)收录到官方软件仓库呗~</li>\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Getting_involved\">参与开发</a> , <del>然后成为下一个像felixonmars一样的领袖😂😂😂</del></li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 46,
      "title": " 浅说基于 Linux 内核的操作系统 (0) - 写在前面",
      "date_published": 1458230400,
      "body": "\n<p>挖了个新坑,就是这样 _(:з」∠)_</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>挖了个新坑,就是这样 _(:з」∠)_</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">挖这个坑的动机</a></h2>\n<p>咱这学期以\"二周目成员\"的形式加入了学院的计算机社团,然后就是\"三周目成员\"的招募啦~,接着就要开始学习C语言啦,然而配置环境就是个复杂的工程呗.</p>\n<blockquote>\n<p>\"要啥Windows啦,换Linux多好.\"</p>\n<p>----咱是这么想的.</p>\n</blockquote>\n<p>然而当他们告诉咱没用过Linux时,😂😂😂(咱想不到该说什么了)</p>\n<p>接着咱去看了几本关于Linux的书,发现国内出版的书正交性不够(只针对特定的发行版),国外的书的话咱的同学看着会很痛苦😂</p>\n<p>于是咱就有了写这系列文章的动机,然而却一直拖着 (´･ω･`) ,直到社长说要让咱做一次基于 Linux 内核的操作系统的讲座  (╯•̀﹏•́)╯ ┻━┻</p>\n<blockquote>\n<p>「基本上，得记住的文字种类太多了。还有呐，莫名其妙的组合也太多了。虽然人类会说只要照着说话规则写字就好，但是这显然是骗人的呗。」</p>\n<p>---- 咱的水平明明还没那么高啊~</p>\n</blockquote>\n<p>然后在 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 又受到了调侃  (╯＠_＠)╯ ┻━┻</p>\n<blockquote>\n<p>ヨイツの賢狼ホロ, [19.03.16 05:20]\n/me 社长叫咱准备一期 Linux 相关的讲座😂😂</p>\n<p>archcnbot, [19.03.16 05:21]\n[KaseiWang] 狼主席什么时候上位啊</p>\n<p>ヨイツの賢狼ホロ, [19.03.16 05:22]\n[In reply to archcnbot]\n咱可不是主席😂😂</p>\n<p>archcnbot, [19.03.16 05:22]\n[Shirasaka-Hazumi] 要上台</p>\n<p>cuihao, [19.03.16 05:22]\n狼主席！</p>\n<p>archcnbot, [19.03.16 05:22]\n(quininer) 狼主席！</p>\n<p>StarDuster, [19.03.16 05:22]\n狼主席</p>\n<p>archcnbot, [19.03.16 05:22]\n[Shirasaka-Hazumi] Chair Lang</p>\n<p>archcnbot, [19.03.16 05:23]\n[felixonmars] 狼主席什么时候上位啊</p>\n<p>archcnbot, [19.03.16 05:23]\n[felixonmars] 我突然发现</p>\n<p>ヨイツの賢狼ホロ, [19.03.16 05:23]\n😂😂😂</p>\n<p>archcnbot, [19.03.16 05:23]\n(quininer) 突然发现</p>\n<p>archcnbot, [19.03.16 05:23]\n[felixonmars] 有个很厉害的搜索引擎，叫狼内存</p>\n<p>archcnbot, [19.03.16 05:24]\n(quininer) 'google 狼内存</p>\n<p>archcnbot, [19.03.16 05:24]\n[varia] quininer: Wolfram 中文名| Mathematica小组| 果壳网科技有意思 [ <a class=\"reference external\" href=\"http://www.guokr.com/post/653834/\">http://www.guokr.com/post/653834/</a>  ]</p>\n<p>archcnbot, [19.03.16 05:24]\n[Lisa] varia: ⇪网页标题: Wolfram 中文名 | Mathematica小组 | 果壳网 科技有意思</p>\n<p>StarDuster, [19.03.16 05:24]\n噗</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">咱参考了哪些内容?</a></h2>\n<p>咱参考了这些内容,先道个谢~</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://program-think.blogspot.com\">编程随想的博客</a> (他开了个头)</li>\n<li><a class=\"reference external\" href=\"http://linux.vbird.org/\">鸟哥的 Linux 私房菜</a> (写的比较透彻,值得一读)</li>\n<li><a class=\"reference external\" href=\"http://forum.ubuntu.org.cn/viewtopic.php?f=112&amp;t=162040\">笨兔兔的故事@Ubuntu中文论坛</a>  (基于Ubuntu8.04完成的一篇故事,咱会说是卖萌向?)</li>\n</ul>\n<hr class=\"docutils\">\n<p>既然是 \"写在前面\" 嘛,就不能说的太多 <del>其实是还没想好怎么写~</del> , 那么下次再见了😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 45,
      "title": " 浅说基于 Linux 内核的操作系统 (2) - 萌新向学习建议",
      "date_published": 1458748800,
      "body": "\n<p>咱到底该如何使用基于 Linux 内核的操作系统咧?</p>\n<p>本来想八卦一下 Linux 的历史来着,但是考虑到oo和oo,就决定 <a class=\"reference external\" href=\"http://forum.ubuntu.org.cn/viewtopic.php?f=112&amp;t=162040&amp;start=60\">放个传送门</a> ~</p>\n<p>为了省点字,接下来咱提到的 \"Linux\" 就是 \"基于 Linux 内核的操作系统\" 啦~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>咱到底该如何使用基于 Linux 内核的操作系统咧?</p>\n<p>本来想八卦一下 Linux 的历史来着,但是考虑到oo和oo,就决定 <a class=\"reference external\" href=\"http://forum.ubuntu.org.cn/viewtopic.php?f=112&amp;t=162040&amp;start=60\">放个传送门</a> ~</p>\n<p>为了省点字,接下来咱提到的 \"Linux\" 就是 \"基于 Linux 内核的操作系统\" 啦~</p>\n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">首先咱来排解一下几种常见的误区呗~</a></h2>\n<div class=\"section\" id=\"linux\">\n<h3><a class=\"toc-backref\" href=\"#id6\">哇,大家提到的都是命令,Linux 是不是很难学?</a></h3>\n<p>的确命令行界面 ( 而不是图形用户界面 ) 是 Linux 的精髓没错,但是汝不要因为这个就望而却步呐~</p>\n<p>有一些面向桌面的发行版就通过图形化的设置和管理界面和简单的设置指南赢得了 \"用户友好的发行版\"的 美誉(?)</p>\n<p>什么? 汝在怀疑 Linux 的易用性? <del>(拖出去砍了~)</del></p>\n<p>汝不妨去看看现在流行的 Android 系统,它就是基于 Linux 内核的哟~</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"toc-backref\" href=\"#id7\">那么 Linux 是不是学起来很容易?</a></h3>\n<p>容易的话就用不到咱写这些了呗~</p>\n<p>为啥很多人有这种想法捏？主要是被\"急功近利\"的风气影响，变得浮躁了呐~</p>\n<blockquote>\n<p>「像汝这么聪明的人，只要学会审情度势，一般的事情都能做得很好。不过呢，无论谁都有适合和不适合的事情。虽说是咱让汝做的，但看来汝可能不太适合这一行，感觉这不是汝所期望的。」</p>\n<p>「汝若真想和那些家伙一较高下的话，早就最大限度地利用上咱了。」</p>\n<p>「汝更希望能稳健地，一步一个脚印地前进，咱也认为这样更适合汝。而在咱所指引的前方，则是完全相反的结局。不是吗？」</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"oo-windows-linux-linux\">\n<h3><a class=\"toc-backref\" href=\"#id8\">oo 在 Windows 上能用 Linux 上就不行, Linux 真难用 ......</a></h3>\n<p>Linux : 怪我咯? 😂😂😂😂😂😂😂</p>\n<p>一般硬件厂商会优先开发市场占有率最高的那个系统的驱动程序,哪个系统?目前来说,就是 Windows 啦。而 Linux 就经常遇到一些无法使用的硬件,很多人还抱怨 Linux 无能,这不是冤枉么~~~</p>\n<blockquote>\n<p>「比起在书上抹墨水，汝会更热衷于在咱脸上抹黑。」</p>\n<p>「……你觉得自己说这句话很妙吗？」</p>\n<p>「因为汝这种人说谎不眨眼的啊。一定会有的没的乱写一通。真是的，汝究竟打算写什么书啊？」</p>\n<p>「你是不是想说我的脸皮跟书一样厚？」</p>\n</blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">那么到底该如何渐进的学习 Linux 咧?</a></h2>\n<blockquote>\n<p>「汝的脑筋虽然转得快，但经验还是不够。」</p>\n<p>「但是反过来说，只要经过岁月的累积就可以变成有智慧的人。」</p>\n<p>「你是说几百年后吗？」</p>\n<p>「哈哈哈哈哈，汝的脑筋转得真快。」</p>\n</blockquote>\n<p>( 这是咱的一种建议,仅供参考哦,如果汝有更好地建议的话,不妨来告诉咱呗~ )</p>\n<ul>\n<li><p class=\"first\">先从虚拟机开始尝试,等熟练以后再安装在实体机上</p>\n<blockquote>\n<p>虚拟机，顾名思义，是\"虚拟的\"啦。即使是格式化了虚拟机的硬盘，都不会影响到汝的实体机呐~（Host OS）</p>\n<p>在汝摸索的阶段，可以充分利用虚拟机的\"快照功能\"哦~\"快照功能\"就如同\"后悔药\"。\n万一汝不小心搞坏了系统，直接回退到这个快照，系统就恢复原样啦。</p>\n<p>常见的虚拟机软件（比如 VirtualBox、VMware），在虚拟系统（Guest OS）中仿真出来的虚拟硬件，往往是比较常见的硬件。\n因为是比较常见的虚拟硬件，Linux 通常都能直接识别出那些虚拟硬件啦~ 这就避免了折腾硬件驱动的麻烦。</p>\n<p>如果不知道怎样用虚拟机的话 ,`看看编程随想的 \"扫盲操作系统虚拟机\" 系列呗~ &lt;<a class=\"reference external\" href=\"https://program-think.blogspot.com/2012/10/system-vm-0.html\">https://program-think.blogspot.com/2012/10/system-vm-0.html</a>&gt;`_</p>\n</blockquote>\n</li>\n<li><p class=\"first\">从图形界面开始,一步一步掌握各种命令呗~</p>\n<blockquote>\n<p>首先汝试着先用图形界面完成日常化的操作呗~</p>\n<p>可以先从图形界面入手。先通过图形界面，了解 Linux 的各种功能。等到慢慢熟悉了，再逐步学习命令行界面的使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>　　命令行界面是 Linux 的精髓之一。善于使用命令行，汝的效率会成倍提高的呐~。</p>\n<p>　　所以，总有一天汝是要面对命令行界面的啦~。</p>\n<ul>\n<li><p class=\"first\">先从系统默认的配置开始,再逐渐 DIY 出属于汝自己的配置呗~</p>\n<blockquote>\n<p>有些\"傻瓜化\"的发行版，它会内置各种汝需要的软件。</p>\n<p>一旦装好系统之后，（只需使用它的默认设置）就可以完成日常操作了。显然，这类发行版更容易上手呐~。</p>\n</blockquote>\n</li>\n</ul>\n<p>　　但是，如果汝想在 Linux 领域有所深入，想要充分发挥其特长，不应该仅仅停留在\"傻瓜化\"的层面；</p>\n<p>　　汝需要逐渐的摸索，不断地折腾，搞定各种\"DIY\"。在折腾的过程中，汝自然会学到很多东西呐~ ( 折腾是生命的动力......) 。</p>\n<hr class=\"docutils\">\n<blockquote>\n<p>「应该只是你的脑袋用了太久，变得老旧不堪用吧。」</p>\n<p>「呵呵呵呵。汝知道狼为什么要在山里头袭击人类吗？」</p>\n<p>「那是因为狼想吃人类的脑袋，好得到人类的智慧。」</p>\n<p>「汝还太嫩了，根本不是咱的对手。」</p>\n</blockquote>\n<hr class=\"docutils\">\n<p>大概就这些? 下次咱再教汝选择一个合适的发行版呐~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 44,
      "title": " 自定 Pelican 主题",
      "date_published": 1459267200,
      "body": "\n<p><del>论颜值的重要性 (雾</del></p>\n<p>谁叫这是个看脸的世界呢~</p>\n<p>Pelican 的默认主题的效果是啥, <a class=\"reference external\" href=\"http://blog.getpelican.com/\">大概像这个样子 (╯&gt;＿&lt;)╯ ┻━┻</a></p>\n<p>觉得不爽,那就改它呗~</p>\n<p>首先把默认的 <ruby><rb>simple</rb><rp>(</rp><rt>什么都没有</rt><rp>)</rp></ruby> 主题复制出来,接下来就基于它来修改呗~</p>\n<p>不过话说回来为啥不直接看 Pelican 官方的文档咧?</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p><del>论颜值的重要性 (雾</del></p>\n<p>谁叫这是个看脸的世界呢~</p>\n<p>Pelican 的默认主题的效果是啥, <a class=\"reference external\" href=\"http://blog.getpelican.com/\">大概像这个样子 (╯&gt;＿&lt;)╯ ┻━┻</a></p>\n<p>觉得不爽,那就改它呗~</p>\n<p>首先把默认的 <ruby><rb>simple</rb><rp>(</rp><rt>什么都没有</rt><rp>)</rp></ruby> 主题复制出来,接下来就基于它来修改呗~</p>\n<blockquote>\n<p># cp 的 -R (--recursive) 参数表示递归的复制文件夹中的文件.</p>\n<p># 如果汝的 Python 安装在不同的目录下,记得改了.</p>\n<p>cp -R /usr/lib/python3.5/site-packages/pelican/themes/simple /path/to/your/pelican/</p>\n</blockquote>\n<p>不过话说回来为啥不直接看 Pelican 官方的文档咧?</p>\n<blockquote>\n<a class=\"reference external\" href=\"http://docs.getpelican.com/en/3.6.3/themes.html\">Creating themes</a></blockquote>\n\n<div class=\"section\" id=\"step-1-pelican\">\n<h2><a class=\"toc-backref\" href=\"#id2\">Step 1 : 了解一下 Pelican 主题的结构</a></h2>\n<p>典型的 Pelican 主题大概像这样:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>├── static                    // 各类静态数据</span>\n<span class=\"code-line\">│   ├── css                   // 例如 CSS.....</span>\n<span class=\"code-line\">│   └── images                // 和图像</span>\n<span class=\"code-line\">└── templates                 // 用来生成页面的模板</span>\n<span class=\"code-line\">    ├── base.html             // 模板的基础</span>\n<span class=\"code-line\">    ├── archives.html         // 文章归档</span>\n<span class=\"code-line\">    ├── period_archives.html  // 分时段的文章归档</span>\n<span class=\"code-line\">    ├── article.html          // 文章</span>\n<span class=\"code-line\">    ├── author.html           // 按作者分类的文章归档</span>\n<span class=\"code-line\">    ├── authors.html          // 作者列表</span>\n<span class=\"code-line\">    ├── categories.html       // 分类列表</span>\n<span class=\"code-line\">    ├── category.html         // 按分类的文章归档</span>\n<span class=\"code-line\">    ├── index.html            // 首页</span>\n<span class=\"code-line\">    ├── page.html             // 页面</span>\n<span class=\"code-line\">    ├── tag.html              // 标签</span>\n<span class=\"code-line\">    ├── pagination.html       // 分页</span>\n<span class=\"code-line\">    └── tags.html             // 标签列表</span>\n</pre></div>\n<p>如果觉得哪个用不到,直接删掉好了~</p>\n<p>另外,像首页啦,分类列表,标签列表这些直接生成一个页面的模板 ( 区分于文章和页面这样的模板 ),如果汝有用到其他的,记得在\n<span class=\"tag\">pelican.conf</span> 里设置:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 直接生成的页面的列表,不用加上 .html 的扩展名.</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"n\">DIRECT_TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"s1\">'index'</span><span class=\"p\">,</span> <span class=\"s1\">'archives'</span><span class=\"p\">,</span> <span class=\"s1\">'search'</span><span class=\"p\">))</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"step-2-base-html\">\n<h2><a class=\"toc-backref\" href=\"#id3\">Step 2 : 修改基础模板 ( base.html )</a></h2>\n<p>(请允许咱不厌其烦的把 html 代码贴在上面 _(:з」∠)_ )</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span></span>\n<span class=\"code-line\">    <span class=\"c\">&lt;!--</span></span>\n<span class=\"code-line\"><span class=\"c\">    像这样用大括号包围起来的是变量啦,可以来自 pelicanconf.py</span></span>\n<span class=\"code-line\"><span class=\"c\">    文章,页面,和分类也提供了一些变量呐~</span></span>\n<span class=\"code-line\"><span class=\"c\">    --&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">\"{{ DEFAULT_LANG }}\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"c\">&lt;!--</span></span>\n<span class=\"code-line\"><span class=\"c\">    其它模板页面可以扩展或是替换掉 block 中的内容呗~</span></span>\n<span class=\"code-line\"><span class=\"c\">    --&gt;</span></span>\n<span class=\"code-line\">    {% block head %}</span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>{% block title %}{{ SITENAME }}{% endblock title %}<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">\"utf-8\"</span> <span class=\"p\">/&gt;</span></span>\n<span class=\"code-line\">    <span class=\"c\">&lt;!--</span></span>\n<span class=\"code-line\"><span class=\"c\">    Python 中的 if 语句,如果后面的变量有内容的话,显示块中的内容呗~</span></span>\n<span class=\"code-line\"><span class=\"c\">    --&gt;</span></span>\n<span class=\"code-line\">    {% if FEED_ALL_ATOM %}</span>\n<span class=\"code-line\">    ......</span>\n<span class=\"code-line\">    {% endblock head %}</span>\n<span class=\"code-line\"><span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"index\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"home\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">header</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"banner\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"body\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">            <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ SITEURL }}/\"</span><span class=\"p\">&gt;</span>{{ SITENAME }} <span class=\"p\">&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span>{{ SITESUBTITLE }}<span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;/</span><span class=\"nt\">header</span><span class=\"p\">&gt;</span><span class=\"c\">&lt;!-- /#banner --&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">nav</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"menu\"</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">     <span class=\"c\">&lt;!--</span></span>\n<span class=\"code-line\"><span class=\"c\">    Python 中的 for 循环 &lt;(=﹁\"﹁=)&gt;</span></span>\n<span class=\"code-line\"><span class=\"c\">    --&gt;</span></span>\n<span class=\"code-line\">    {% for title, link in MENUITEMS %}</span>\n<span class=\"code-line\">        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ link }}\"</span><span class=\"p\">&gt;</span>{{ title }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    {% endfor %}</span>\n<span class=\"code-line\">    {% block content %}</span>\n<span class=\"code-line\">    {% endblock %}</span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">footer</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"contentinfo\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"body\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">            <span class=\"p\">&lt;</span><span class=\"nt\">address</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">\"about\"</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"vcard body\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">            Proudly powered by <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://getpelican.com/\"</span><span class=\"p\">&gt;</span>Pelican<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>,</span>\n<span class=\"code-line\">            which takes great advantage of <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"http://python.org\"</span><span class=\"p\">&gt;</span>Python<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>.</span>\n<span class=\"code-line\">            <span class=\"p\">&lt;/</span><span class=\"nt\">address</span><span class=\"p\">&gt;</span><span class=\"c\">&lt;!-- /#about --&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;/</span><span class=\"nt\">footer</span><span class=\"p\">&gt;</span><span class=\"c\">&lt;!-- /#contentinfo --&gt;</span></span>\n<span class=\"code-line\"><span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\"><span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></span>\n</pre></div>\n<p>因为 Pelican 用的是 Jinja2 模板引擎嘛,所以 <a class=\"reference external\" href=\"http://jinja.pocoo.org/docs/dev/\">先去看看 Jinja 的文档嘛~</a></p>\n<p>如果看不懂的话,pia 啦~  (╯・﹏・)╯ ┻━┻ 这里只举一个加入 CSS 的栗子:</p>\n<p>首先把 CSS 放到 <span class=\"tag\">static/css</span> 文件夹里,然后修改 <span class=\"tag\">base.html</span></p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>{% block head %}</span>\n<span class=\"code-line\">    <span class=\"c\">&lt;!-- static 文件夹输出以后就是 /theme 啦~ --&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"{{ SITEURL }}/theme/css/metro.css\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"stylesheet\"</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">{% endblock head %}</span>\n</pre></div>\n<p>就这样 ~(&gt;_&lt;~)</p>\n</div>\n<div class=\"section\" id=\"step-3\">\n<h2><a class=\"toc-backref\" href=\"#id4\">Step 3 : 修改子模板</a></h2>\n<p>再举一个文章的栗子 (´・ω・`)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c\">&lt;!-- entends 就是扩展啦,后面是基于的模板页面的名称 --&gt;</span></span>\n<span class=\"code-line\">{% extends \"base.html\" %}</span>\n<span class=\"code-line\">{% block head %}</span>\n<span class=\"code-line\"><span class=\"c\">&lt;!-- 用 super () 来包含 block 默认的内容 --&gt;</span></span>\n<span class=\"code-line\">{{ super() }}</span>\n<span class=\"code-line\">{% for keyword in article.keywords %}</span>\n<span class=\"code-line\"><span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">\"keywords\"</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">\"{{keyword}}\"</span> <span class=\"p\">/&gt;</span></span>\n<span class=\"code-line\">{% endfor %}</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">{% endblock %}</span>\n<span class=\"code-line\">{% block content %}</span>\n<span class=\"code-line\"><span class=\"c\">&lt;!-- 这里加上需要的内容 --&gt;</span></span>\n<span class=\"code-line\">{% endfor %}</span>\n<span class=\"code-line\"><span class=\"p\">&lt;/</span><span class=\"nt\">dl</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">{% endblock %}</span>\n</pre></div>\n<p>本来打算贴出模板里能用的变量的，不过咱有了要翻译 Pelican 文档的想法了呐~ （ todo list 要爆炸的节奏 )</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 43,
      "title": " 浅说基于 Linux 内核的操作系统 (3) - 选择一个发行版",
      "date_published": 1458835200,
      "body": "\n<p>有这么多 Linux 发行版,咱该选哪个呢?</p>\n<p>Linux 的发行版实在是太多啦~,光是比较知名的就有数十种\n( <a class=\"reference external\" href=\"http://distrowatch.com/\">DistroWatch 是个比较各种发行版流行程度的网站~</a> ).</p>\n<p>如何选择真是个难题呐~  (╯＠_&gt;＠)╯ ┻━┻</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>有这么多 Linux 发行版,咱该选哪个呢?</p>\n<p>Linux 的发行版实在是太多啦~,光是比较知名的就有数十种\n( <a class=\"reference external\" href=\"http://distrowatch.com/\">DistroWatch 是个比较各种发行版流行程度的网站~</a> ).</p>\n<p>如何选择真是个难题呐~  (╯＠_&gt;＠)╯ ┻━┻</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id8\">萌新选择发行版的第一奥义 (๑•̀ㅂ•́)و✧</a></h2>\n<p>萌新选择发行版的第一奥义是......</p>\n<blockquote>\n一定要选择一个成熟的发行版~</blockquote>\n<p>大多数成熟的发行版都具有这样的特征:</p>\n<ul>\n<li><p class=\"first\">用户和活跃的开发者很多呐~</p>\n<blockquote>\n<p>成熟的发行版名气都比较大,自然用户就很多呗~</p>\n<p>用户可是有可能转变成 (大多数) 不吃人的开发者呐~</p>\n<p>成熟的发行版通常都会有很多新人遇到几乎相同的问题,于是就有了第二个特征~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">有详尽的文档</p>\n<blockquote>\n<p><del>被要求控制自己的本能的</del> 开发者为了方便回答各种萌新向问题,就会写出各种各样的文档啦~</p>\n<p>成熟的发行版通常都会有完善的文档 (有些发行版还有多语言版的文档呐~)</p>\n</blockquote>\n</li>\n<li><p class=\"first\">有一群有爱的开发者~</p>\n<blockquote>\n<p>成熟的发行版一般都会有一群有爱的开发者啦~</p>\n<p>他/她/它们编织代码和文档,尽心尽力的回答用户的问题,\n努力跟踪上游的更改.Ta们可是很辛苦的哟~</p>\n<p>别害怕啦,Ta们 (多数) 不会吃人啦~</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"act-2\">\n<h2><a class=\"toc-backref\" href=\"#id9\">Act 2 : 选择发行版时要考虑的几个因素</a></h2>\n<p>说了这么多,那么选择发行版时到底要考虑哪些因素咧? o(*￣3￣)o</p>\n<div class=\"section\" id=\"or\">\n<h3><a class=\"toc-backref\" href=\"#id10\">发行版的制作群 : 社区发行版 or 商业发行版</a></h3>\n<p>汝以为以为\"非营利组织\"的研发能力不如\"商业公司\"?</p>\n<p>其实不然——非营利组织也可以做出精品。想想浏览器的例子：非营利组织开发的 Firefox 远远好于（头号软件公司）微软开发的 IE。</p>\n<p>对于这两者的选择，主要的考虑因素是：隐私。</p>\n<p>商业发行版在隐私保护方面不如社区发行版。举个栗子 ヨイツの賢狼ホロ, _(:з」∠)_\nUbuntu 属于商业发行版（其后台是 Canonical公司）。Ubuntu曾经爆了一个丑闻：其桌面搜索功能存在隐私泄露风险（相关报道在 <a class=\"reference external\" href=\"https://www.eff.org/deeplinks/2012/10/privacy-ubuntu-1210-amazon-ads-and-data-leaks\">这里</a> ）</p>\n<p>简而言之: 如果汝在意自己的隐私,那么建议用社区发行版呐~</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"toc-backref\" href=\"#id11\">发行版的定位 : 通用 or 专用</a></h3>\n<p>所谓的\"通用发行版\"，顾名思义就是：这个发行版可以派上各种用场；反之，\"专用发行版\"是为特定用途设计，只能用于某些特定场合。</p>\n<p>两种各有优缺点——通用发行版虽然用途广，但汝需要自己定制一下啦~。专用发行版虽然用途单一，但很多软件和配置预先都帮你设置好了,可以达到 \"开箱即用\" 的标准呗~</p>\n<p>所以:</p>\n<ul>\n<li><p class=\"first\">如果汝第一次尝试 Linux?</p>\n<blockquote>\n<p>建议先尝试\"面向桌面\"的专用发行版。它们的用户数都比较大，门槛都比较低，上手相对容易。</p>\n<p>用了一段时间之后，如果汝觉得要进一步学习的话,不妨来试试那些通用发行版呗~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">已经在用某个 Linux 发行版,想进一步提高?</p>\n<blockquote>\n<p>去试试通用发行版呗~\n一般通用发行版的文档都很齐备,有问题可以先去查查文档,也可以提高汝的英语水平呐~</p>\n</blockquote>\n</li>\n</ul>\n<p>( 汝问哪个发行版算通用/专用 ,待会儿告诉汝啊~所以现在先别着急 😂😂😂 )</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h3><a class=\"toc-backref\" href=\"#id12\">软件的更新速度 : 保守型 or 激进型</a></h3>\n<p>简单来说,保守型的发行版通常更在意系统和软件的稳定性/可靠性/安全性。\n为了做到这点，适当地牺牲了\"新功能\"。所以，它们通常都不会采用最新版本的内核或软件。而是采用不太新，但久经考验的版本。</p>\n<p>而激进型的呢,这类发行版优先保证\"新功能\"。所以它们总是第一时间升级内核版本或软件版本。</p>\n<p>所以:</p>\n<p>如果汝比较关注安全性/稳定性,就选择保守型的发行版. 喜欢新功能就选择激进型的发行版呗~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"toc-backref\" href=\"#id13\">发行版的发布周期 : 基于版本发布 or 滚动更新</a></h3>\n<p>按版本发布的发行版，就像Windows 和 OS X 一样,按周期发布一个新版本 (只是有些发行版升级版本时经常挂掉以至于只好重装......)。</p>\n<p>但是有少部分发行版采用滚动发布，对于\"滚动发布\"的模式，不存在版本号，也不需要重装系统。对于这类系统，你只需要安装一次，以后只要通过更新就可以更新系统啦~</p>\n<p>采用滚动方式发布的 Linux，通常都是激进型的啦 (￣ε(#￣)☆╰╮(￣▽￣///)</p>\n<p>简而言之:</p>\n<p>看汝的喜好啦~</p>\n</div>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id14\">说了这么多,到底该选择哪个发行版咧? &lt;(ノ=﹁\"﹁=)ノ┻━┻</a></h2>\n<p>下面咱就推荐一些发行版咯~ 汝可以根据上面几个因素,挑出几个汝认为合适的发行版试试呗~</p>\n<p>(按字母顺序排序,顺便夹杂一些咱自己的偏见 😂😂😂 )</p>\n<div class=\"section\" id=\"arch-linux\">\n<h3><a class=\"toc-backref\" href=\"#id15\">Arch Linux</a></h3>\n<p>属性:激进的社区发行版</p>\n<blockquote>\n<p>Arch Linux 是一个针对 i686/x86-64 平台独立开发的 GNU/Linux 发行版，遵循轻量、简洁、优雅的开发原则，借灵活的架构应用于各种环境。Arch 安装后只提供最基本的系统，用户可以根据自己的需求来搭建不同的系统环境。官方并不提供图形化的配置工具，多数系统配置是通过修改文本文件来进行的。Arch 尽力提供最新稳定版本的软件。</p>\n<p>Arch Linux 采用“滚动升级”策略，这样可以实现“一次安装，永久更新”。升级到下一个“版本”的 Arch Linux 几乎不需要重新安装系统，只需一行命令，你就能轻松的享受到最新的 Arch Linux。</p>\n<p>Arch Linux 努力和上游软件源码保持一致，只有使程序能够在 Arch Linux 正常编译运行的补丁才会被加入更新中。</p>\n<p>总之， Arch Linux 是一个灵活、简洁的、满足有一定经验的 Linux® 用户的需求的发行版。它强大且易于管理的特性，使其成为可以完美胜任服务器和工作站的发行版。它可以变成任何你想要的样子。如果你也认为这是一个 GNU/Linux 发行版该做的，欢迎你来自由使用并参与其中，为社区做出贡献，欢迎来到 Arch Linux！</p>\n<p>---- <a class=\"reference external\" href=\"https://www.archlinuxcn.org\">Arch Linux 中文社区</a></p>\n</blockquote>\n<p>( PS : 咱现在在用这个  o(*￣3￣)o ,目前感觉良好~ )</p>\n</div>\n<div class=\"section\" id=\"debian\">\n<h3><a class=\"toc-backref\" href=\"#id16\">Debian</a></h3>\n<p>属性:偏保守的社区发行版</p>\n<blockquote>\n<p>Debian 计划是一个致力于创建一个自由操作系统的合作组织。我们所创建的这个操作系统名为 Debian。</p>\n<p>操作系统是使计算机运行的基本程序和工具的集合，其中最主要的部分称为内核 (kernel)。内核是计算机中最重要的程序，负责一切基本的调度工作，并让您运行其他程序。</p>\n<p>Debian 系统目前采用 Linux 内核或者 FreeBSD 内核。 Linux 是一个最初由 Linus Torvalds 创建，目前由全球成千上万的程序师共同维护的软件。 FreeBSD 是一个包括内核和其它软件的操作系统。</p>\n<p>我们所创建的这个操作系统中的大部分基本工具来自于 GNU 工程；因此我们把它们命名为 GNU/Linux 。这些工具同样都是自由的。</p>\n<p>当然，人们真正需要的是应用软件，也就是帮助他们完成工作的程序：从文档编辑，到电子商务，到游戏娱乐，到软件开发。Debian 带来了超过 43000 个 软件包 (为了能在您的机器上轻松的安装，这些软件包都已经被编译包装为一种方便的格式) — 这些全部都是自由软件。</p>\n<p>这有点像一个高塔：在最底层的是内核，在内核上面的是所有的基本工具，然后是所有您在计算机上运行的软件。最后，在这个高塔顶端的就是 Debian — 把每件事情谨慎的组织和配合在一起，使得它们能够在一起和谐地运作。</p>\n<p>---- <a class=\"reference external\" href=\"https://www.debian.org/intro/about.zh-cn.html\">Debian.org</a></p>\n</blockquote>\n<p>( PS : 咱在 Arch 前就在用 Debian,后来为了使用新软件和因为升级版本时挂了才换的 Arch ~ )</p>\n</div>\n<div class=\"section\" id=\"fedora\">\n<h3><a class=\"toc-backref\" href=\"#id17\">Fedora</a></h3>\n<p>属性:偏激进的社区发行版</p>\n<blockquote>\n<p>Fedora 是一个基于 Linux 的操作系统，旨在为用户提供稳定、安全且易于使用和管理的自由和开源软件。Fedora 发行版是 Fedora 项目的各种自由软件创造中最大的一个。由于其与生俱来的优势，\"Fedora\" 这个单词通常可以用于表达 Fedora 项目或 Fedora 发行版二者之中的任意一个。</p>\n<p>我们尝试总是做正确的事情，并只提供自由开源的软件。我们积极努力保护和推广任何人都可以自由使用和重新发布的解决方案。为此，Fedora 本身的基础设施均由自由软件强力驱动。有鉴于此，所有的开发人员都专注的与 上游开发团队一起紧密工作，于是所有人都能从我们的工作中受益，并尽可能快地获得我们所做的改变。由于 Fedora 推动了大量的 创新项目，这个重点已经有显著和持久的影响。</p>\n<p>我们认为软件专利是有害的，它是阻碍软件创新的拦路虎，且不符合自由开源软件的价值观。尽管通过紧密集成专有软件或专利组件可能在表面上改进易用性，但这决不是长久之计。在短期的易用和自由软件的长期发展之间，Fedora 始终倾向于后者。</p>\n<p>---- <a class=\"reference external\" href=\"https://fedoraproject.org/wiki/Overview/zh-cn\">Fedora Project Wiki</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"gentoo-linux\">\n<h3><a class=\"toc-backref\" href=\"#id18\">Gentoo Linux</a></h3>\n<p>属性:激进的社区发行版</p>\n<blockquote>\n<p>首先，欢迎使用Gentoo，您将会进入一个选择自由和性能至上的世界。Gentoo的一切都是为了自由选择。在安装Gentoo时就数次明确表明了这一特点——用户可以自己选择想要编译的一切内容、选择安装Gentoo的方式、选择想用的系统日志程序等等。</p>\n<p>Gentoo 是一个快速、现代化的元发行版，它的设计简洁、灵活。Gentoo 围绕自由软件建立，它不会对它的用户隐瞒“引擎盖下的细节”。Gentoo 所使用的软件包维护系统 Portage 是用 Python 编写的，这意味着用户可以轻松地查看和修改它的源代码。 Gentoo 的软件包管理系统使用源代码包（虽然也支持预编译软件包），并通过标准的文本文件配置Gentoo。换句话说，开放无处不在。</p>\n<p>“自由选择”是 Gentoo 运行的关键，这点很重要，大家要理解。我们尽量不强迫用户去做任何他们不喜欢的事情。</p>\n<p>---- <a class=\"reference external\" href=\"https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation/zh-cn\">Gentoo Wiki</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"opensuse\">\n<h3><a class=\"toc-backref\" href=\"#id19\">openSUSE</a></h3>\n<p>属性:可保守可激进的社区发行版</p>\n<blockquote>\n<p>openSUSE 发行版是一个稳定、易用和完整的多用途发行版，适用于从普通用户到开发者，从个人电脑到服务器，从初学者、有经验的用户到超级极客，总而言之，她适用于任何人！</p>\n<p>最近发布的 openSUSE 13.2 ，更新了所有的应用程序的版本，包括服务器的应用程序和桌面的应用程序，并引入一些新的特性，目前她吸纳了1000多个的开源项目。</p>\n<p>此外，openSUSE 还是 SUSE 公司屡获大奖的 SUSE Linux 企业版 的产品基础。</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.opensuse.org/Portal:Distribution\">openSUSE wiki</a></p>\n</blockquote>\n<p>openSUSE 有 接近滚动更新的 Tumbleweed ( 风滚草 ) 分支和偏保守的 Leap 分支.</p>\n<p>它的一个特色功能是 YaST。这玩意儿类似 Windows 的控制面板，帮你搞定一大堆系统管理的杂事（比如：硬盘分区、软件升级、用户管理、网络配置、等等）</p>\n</div>\n<div class=\"section\" id=\"ubuntu-desktop\">\n<h3><a class=\"toc-backref\" href=\"#id20\">Ubuntu Desktop</a></h3>\n<p>属性 : 跟保守的比偏激进、跟激进的比偏保守，所以不知道该算是激进还是保守的商业发行版</p>\n<blockquote>\n<p>Ubuntu是基于Debian发行版和GNOME桌面环境，与Debian的不同在于它每6个月会发布一个新版本（即每年的四月与十月)，每2年发布一个LTS长期支援版本。</p>\n<p>普通的桌面版可以获得发布后18个月内的支援，标为LTS（长期支持）的桌面版可以获得更长时间的支援。例如，Ubuntu 8.04 LTS（代号Hardy Heron），其桌面应用系列可以获得为期3年的技术支援，伺服器版可以获得为期5年的技术支援。</p>\n<p>而自Ubuntu 12.04 LTS开始，桌面版和伺服器版均可获得为期5年的技术支援。2013年3月有消息指出，Ubuntu计划在4月25日Ubuntu 13.04发布后，将非LTS版本的支援时间自18个月缩短至9个月，并采用滚动发布模式，允许开发者在不升级整个发行版的情况下升级单个核心套件。</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.wikipedia.org/zh-hans/Ubuntu\">Wikipedia:Ubuntu</a></p>\n</blockquote>\n<hr class=\"docutils\">\n<p>其实 Linux 发行版远不只这几个啦~ 维基百科上有一篇叫做 <a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88\">Linux 发行版</a> 的条目,上面有更丰富的介绍呐~</p>\n<p>那么汝现在赶紧去挑一个发行版啦~ 下一次咱会八卦一下 Linux 的软件包管理器呗~</p>\n</div>\n</div>\n\n  </div>"
    },
    {
      "post_id": 42,
      "title": " 为啥汝不放弃不自由？",
      "date_published": 1458576000,
      "body": "\n<p>是什么让汝甘愿选择被不自由限制而不是放弃封闭走向自由？</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>是什么让汝甘愿选择被不自由限制而不是放弃封闭走向自由？</p>\n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">这个算不算引子?</a></h2>\n<blockquote>\n<p>解放一个习惯于被奴役的民族比奴役一个习惯于自由的民族更难</p>\n<p>----孟德斯鸠 (启蒙思想家)</p>\n</blockquote>\n<p><a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 里的 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 说自己要离开 Telegram 了,于是用 fishroom 换掉了兢兢业业若干年 <del>虽然偶尔会黑化</del> 的阿卡林......</p>\n<p>原因好像是 Telegram 有要变的封闭的趋势:</p>\n<blockquote>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:53]\n我不认为他们会开</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:53]\n我也不希望开源。。</p>\n<p>farseerfc 😂 0xC13D4796, [21.03.16 20:53]\n從一開始就說要開，然後到現在連協議都封閉了，只有官方授權的客戶端開發者能看到最新協議……</p>\n<p>wicast C, [21.03.16 20:53]\n开源也没啥卵用感觉…</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:53]\n除非能出现第二个freenode</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:53]\n不然开了等于没用</p>\n<p>wicast C, [21.03.16 20:54]\n卧槽…连协议都封闭了么…</p>\n<p>teleboto, [21.03.16 20:54]\n[toxsync] (quininer) 其实不如把现有功能做成 xmpp 插件</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:54]\n我看文档和以前一样</p>\n<p>wicast C, [21.03.16 20:54]\n吃枣药丸</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:54]\n反正本来就看不懂</p>\n<p>teleboto, [21.03.16 20:55]\n[toxsync] (yatseni) 是freenode是悲剧吗</p>\n<p>farseerfc 😂 0xC13D4796, [21.03.16 20:55]\ncutegram 的開發者抱怨了很久了，所以現在二步驗證什麼的都還在從開源出的客戶端代碼慢慢逆向協議</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:55]\n<a class=\"reference external\" href=\"https://core.telegram.org/mtproto\">https://core.telegram.org/mtproto</a></p>\n<p>teleboto, [21.03.16 20:55]\n[xmppbot] [Lisa] teleboto: ⇪网页标题: MTProto Mobile Protocol</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:55]\n🌚这个一直是这样</p>\n<p>teleboto, [21.03.16 20:55]\n[toxsync] (quininer) 中心服务爱好者快转 wire 吧</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:56]\nwire有什么好转的。。</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:56]\n。。还不如转WhatsApp</p>\n<p>teleboto, [21.03.16 20:56]\n[toxsync] (quininer) wire 很好啊 =-=</p>\n<p>wicast C, [21.03.16 20:56]\n[In reply to farseerfc 😂 0xC13D4796]\n有不开源的部分？</p>\n<p>teleboto, [21.03.16 20:56]\n[toxsync] (quininer) wire 是完整的 axolotl 协议实现</p>\n<p>teleboto, [21.03.16 20:57]\n[toxsync] (yatseni) qtox 1.3.0有什么改进？</p>\n<p>teleboto, [21.03.16 20:57]\n[toxsync] (quininer) yatseni: markdown 支持？</p>\n<p>farseerfc 😂 0xC13D4796, [21.03.16 20:57]\n<a class=\"reference external\" href=\"https://core.telegram.org/schema\">https://core.telegram.org/schema</a> 這邊公開到 layer 23 ， cutegram 支持到 layer 25</p>\n<p>teleboto, [21.03.16 20:57]\n[xmppbot] [Lisa] teleboto: ⇪网页标题: Current TL-schema</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:57]\ntelegram至少还有bot API</p>\n<p>wicast C, [21.03.16 20:57]\n真是吃枣药丸🌚</p>\n<p>farseerfc 😂 0xC13D4796, [21.03.16 20:58]\n[In reply to wicast C]\n這倒沒有的樣子，總之協議現在在代碼裏……</p>\n<p>wicast C, [21.03.16 20:58]\nTg也就前端的东西做的还行</p>\n<p>teleboto, [21.03.16 20:58]\n[toxsync] (quininer) bot api 这部分是完全闭源的吧？</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:59]\n是的。</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:59]\n但是至少有。。</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:59]\n其他中心化服务哪个有。。</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 20:59]\nwire这玩意连自己艹都没办法</p>\n<p>farseerfc 😂 0xC13D4796, [21.03.16 21:00]\n<a class=\"reference external\" href=\"https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/mtproto/mtpCoreTypes.h#L371\">https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/mtproto/mtpCoreTypes.h#L371</a> 現在 tdesktop 在 layer 49 了已經……</p>\n<p>David Huang, [21.03.16 21:00]\n[In reply to Peter Cai - PGP C297B594]\ntelegram总有一天要走向封闭的（</p>\n<p>teleboto, [21.03.16 21:00]\n[toxsync] (quininer) 不用说\"总有一天\"，一直是封闭的</p>\n<p>Peter Cai - PGP C297B594, [21.03.16 21:01]\n[Forwarded from teleboto]\n[toxsync] (quininer) 不用说\"总有一天\"，一直是封闭的</p>\n</blockquote>\n<p>然后咱突然想到了百合姐的某篇文章:</p>\n<blockquote>\n<p>在那个世界里我活得很好。即使是遭受重大的人生挫折时也不曾对那个世界感到疲惫，依旧会写代码，写博客。</p>\n<p>可现在，我累了。</p>\n<p>其实我有好些想写博客的材料，但是都没有写。我也有好些项目的想法，可是它们还在我的 TODO wiki 里。Arch Linux 中文社区还有许多要做的事情，可我也不想去做了。</p>\n<p>我不知道是为什么。也许是孤单吧。一直以来都只有自己。即使 Arch Linux 社区，在做事的人也渐渐少了。而曾经在网上认识的朋友，渐渐地都有了自己的生活。随着 Google Hangout 取代 Google Talk、新浪微博取代 Twitter，还有微信，这些封闭的东西取代了自由的工具，可以放有用或者有意思的机器人的地方却越来越荒芜了。</p>\n<p>也许是年纪渐渐大了。青春越来越少，而我却依旧在飘荡。</p>\n<p>---- <a class=\"reference external\" href=\"http://lilydjwg.is-programmer.com/posts/179502.html\">依云's Blog:我想我失去了最后的领地</a></p>\n</blockquote>\n<p>连咱也何尝不是如此? 虽然咱会用像 XMPP , Tox 和 GNU/Linux 一类的自由软件,也曾经试图以 Richard Stallman 为目标,然而还是没法做到. Pia!&lt;(=ｏ ‵-′)ノ☆</p>\n<p>最后咱还是不得不承认咱没办法完全放弃不自由呐~ 那么到底是为啥咧?</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">自由对自己的代价太大  _(:з」∠)_</a></h2>\n<p>( 也就是获得自由带来的损失比不自由所带来的限制更大? )</p>\n<p>举一个咱自己的栗子 (´･ω･`) :</p>\n<p>前几天入手一部预装 <ruby><rb>Windows</rb><rp>(</rp><rt>Windoge</rt><rp>)</rp></ruby> 10 的平板,想当然的咱想装上 Arch Linux 啦,结果当咱装上以后:</p>\n<ul class=\"simple\">\n<li>触屏和网卡是废的 ( (╯T∧T)╯ ┻━┻ 装 Arch Linux 时没有网可是致命的 )</li>\n<li>分辨率太高以致于默认的字太小😂😂😂 ( GNOME 的 HiDPI 只能整数倍调整差评,KDE plasma 调一调倒是能看了...... )</li>\n</ul>\n<p>于是只好留着 Windows 😂😂😂</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id8\">所谓的自由根本没法实现？</a></h2>\n<p>比如 iOS 和 Windows Phone ,汝都没法更换上面的操作系统,也不知道上面的系统都干了些啥......</p>\n<p>尽管 Telegram 越来越封闭 , 现在它还有相对开放的 Client / Bot API,而更 \"流行\" 的 QQ / 微信 / WhatsAPP / Skype /.... 咧?</p>\n<p>尽管 Android 手机 / Windows 设备可以刷机,然而流行的硬件却没有一个是彻底开放的,谁能相信后门不会在固件或是硬件上?</p>\n<blockquote>\n(╯°△°)╯ ┻━┻</blockquote>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id9\">没法带领身边的朋友逃离不自由?</a></h2>\n<p>还是举咱自己的栗子?  (╯&gt;▽&lt;)╯ ┻━┻ :</p>\n<ul>\n<li><p class=\"first\">尽管咱卸载了 QQ ,但还是装在了另一台手机上......</p>\n<blockquote>\n<p>周围的人和学校的辅导员都还在用 QQ , 咱试图向社团的同学安利 Telegram ,然而......</p>\n<blockquote>\n<p>(╯=﹁\"﹁=)╯ ┻━┻ <del>(亏还把自己称作计算机精英协会......干脆全吃掉然后解散好了(雾))</del></p>\n</blockquote>\n</blockquote>\n</li>\n<li><p class=\"first\">虽然咱自己很少用 Windows 了,然而经常被拉去修 Windows 电脑:</p>\n<blockquote>\n<p>Baka Windows 总是会越来越慢,而原因基本上都是招来了病毒,木马或是oo全家桶😂😂</p>\n<p>就算咱耐心的一个一个卸载,过几天还是会以同样的理由被拉回去重修......</p>\n<p>以后就干脆直接重装系统了 (╯´︿`)╯ ┻━┻</p>\n<p>/me <del>再遇到这样的事干脆直接砸了好了</del></p>\n</blockquote>\n</li>\n<li><p class=\"first\">明明有那么多种纯文字的标记语言可以用可咱还是要用 Office (ノ=Д=)ノ┻━┻</p>\n<blockquote>\n<p>(╯T▽T)╯ ┻━┻ 哪怕是 LibreOffice 也好啊 (然而并没有)</p>\n<p>(╯=﹁\"﹁=)╯ ┻━┻ 没 LibreOffice 哪怕是新版的 Microsoft Office 能部分兼容 OpenDocument 也好啊 (然而几乎全都是 03 )</p>\n<p>嘿嘿嘿......像造点大新闻了呐~</p>\n<p><del>某学校 M$ Office 用户一夜间全部失踪</del> ( 雾 again~ )</p>\n</blockquote>\n</li>\n</ul>\n<p>等等等等......</p>\n<hr class=\"docutils\">\n<blockquote>\n<p>「真是太感谢了。我终于能融入这个新世界了。」</p>\n<p>「我们没法像过去那样自由自在了，但是……」</p>\n<p>「但是，这个世上还有我们的位置，还有我们的任务。虽然故乡还未曾得见，但不要哭鼻子哦？不能给这个年轻人添麻烦。」</p>\n</blockquote>\n<p>给渴望自由的人的空间越来越少了呐~所谓的自由,大概一直在路上吧......</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 41,
      "title": " 入手 Raspberry Pi 3",
      "date_published": 1460390400,
      "body": "\n<p>社团为了完成某个和咱没有关系的项目买了块树莓派3诶，然而不妨碍咱玩就是了~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>社团为了完成某个和咱没有关系的项目买了块树莓派3诶，然而不妨碍咱玩就是了~</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id10\">汝不会连树莓派是啥都不知道吧 😂😂</a></h2>\n<blockquote>\n<p>树莓派（英语：Raspberry Pi），是一款基于Linux的单板机电脑。它由英国的树莓派基金会所开发，目的是以低价硬件及自由软件刺激在学校的基本计算机科学教育。</p>\n<p>树莓派基金会提供了基于ARM架构的Debian、Arch Linux和Fedora等的发行版供大众下载，还计划提供支持Python作为主要编程语言，支持BBC BASIC(通过RISC OS映像或者Linux的\"Brandy Basic\"克隆)、C语言和Perl等编程语言。</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.wikipedia.org/zh-cn/%E6%A0%91%E8%8E%93%E6%B4%BE\">Wikipedia:树莓派</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id11\">若干准备动作 _(:з」∠)_</a></h2>\n<p>树莓派3的配置大概像这样：</p>\n<blockquote>\n<ul class=\"simple\">\n<li><ruby><rb>SoC</rb><rp>(</rp><rt>系统单晶片</rt><rp>)</rp></ruby> : Broadcom BCM2837（CPU，GPU DSP和SDRAM、USB）</li>\n<li>CPU : ARM Cortex-A53 64位 (ARMv8系列) 1.2GHz (四核心)</li>\n<li>GPU :Broadcom VideoCore IV</li>\n<li>RAM : 1GB</li>\n<li>和上一代比多内置了了无线网卡和蓝牙模块</li>\n</ul>\n</blockquote>\n<p>当然因为只是块板子嘛,还要准备些外设:</p>\n<ul class=\"simple\">\n<li>一个显示器 ( 当然其实可以用 <ruby><rb>GPIO</rb><rp>(</rp><rt>通用输入/输出</rt><rp>)</rp></ruby> 连接串口 ) 和 HDMI 线</li>\n<li>一张 MicroSD 卡</li>\n<li>USB 接口的鼠标和键盘</li>\n<li>至少 5V/2A 的电源适配器和 Micro USB 线 ( 这个给汝的手机充电的插座和数据线应该能满足呗~ )</li>\n<li>以太网线 ( 如果汝打算用有线连接 )</li>\n</ul>\n<p>于是在准备完成以后......</p>\n</div>\n<div class=\"section\" id=\"arch-linux-arm\">\n<h2><a class=\"toc-backref\" href=\"#id12\">为树莓派写入系统 ( Arch Linux ARM )</a></h2>\n<p>作为 Arch Linux 用户,当然最好是接着用 Arch 啦,还好有 Arch Linux ARM 😂</p>\n<p>在 <a class=\"reference external\" href=\"https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3#installation\">Arch Linux ARM 文档</a>\n的光辉照耀下,一切正常.</p>\n<p>然后把写入好系统的 MicroSD 卡插入树莓派,连上显示器和电源,开机.</p>\n</div>\n<div class=\"section\" id=\"raspbian\">\n<h2><a class=\"toc-backref\" href=\"#id13\">为树莓派写入系统 ( Raspbian )</a></h2>\n<p>Rsapbian 是基于 Debian 修改成的,树莓派基金会官方支持的操作系统啦~</p>\n<p><a class=\"reference external\" href=\"https://www.raspberrypi.org/downloads/raspbian/\">下载在这里</a> , <a class=\"reference external\" href=\"https://www.raspberrypi.org/documentation/installation/installing-images/README.md\">安装教程在这里</a> .</p>\n<p><del>然而后面的操作都是在 Arch Linux ARM 上的 😂😂</del></p>\n</div>\n<div class=\"section\" id=\"xfce\">\n<h2><a class=\"toc-backref\" href=\"#id14\">安装 Xfce 桌面环境</a></h2>\n<p>首先要连上网,准备好接受 ArchWiki <del>的圣光</del> 呗~</p>\n<blockquote>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Network_configuration\">有线网络</a></li>\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Wireless_network_configuration\">无线网络</a></li>\n</ul>\n</blockquote>\n<p>默认的 alarm 用户竟然没有 sudo 权限 Pia!&lt;(=ｏ ‵-′)ノ☆ , 不过没啥关系,\n<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Sudo\">接着被圣光笼罩呗~</a></p>\n<p>默认的 <a class=\"reference external\" href=\"http://mirror.archlinuxarm.org/\">http://mirror.archlinuxarm.org/</a> 会自动解析到离用户较近的镜像,\n也可以手动换成 <ruby><rb>中科大</rb><rp>(</rp><rt>崔土豪</rt><rp>)</rp></ruby> 源, <a class=\"reference external\" href=\"https://lug.ustc.edu.cn/wiki/mirrors/help/archlinuxarm\">方法在这</a> .</p>\n<p>换好源以后更新一下系统 ( 记得两个 y 是强制刷新~ )</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ sudo pacman -Syyu</span>\n</pre></div>\n<p>然后安装需要的软件 ( xorg xfce 和一个登录管理器,这里是 lightdm )</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ sudo pacman -S xorg xfce lightdm lightdm-greeter</span>\n</pre></div>\n<p>至于如何配置 lightdm 咱就偷下懒推荐一下百合仙子 <a class=\"reference external\" href=\"/links.html#lilydjwg\">lilydjwg</a> 的 <a class=\"reference external\" href=\"http://lilydjwg.is-programmer.com/2015/11/4/from-slim-to-lightdm.187512.html\">从 slim 到 lightdm</a> 啦~</p>\n<p>然后启动 <span class=\"tag\">lightdm</span> 服务:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ sudo systemctl start lightdm</span>\n</pre></div>\n<p>树莓派3的性能写写博客还是可以的啦~</p>\n<p><del>只是在生成 HTML 的时候系统负载会飙升  😂😂</del></p>\n<img alt=\"rpi3 写博客中~\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/rpi3_blogging.png\">\n</div>\n\n  </div>"
    },
    {
      "post_id": 40,
      "title": " Weechat + Glowing Bear 打造一个网页版 IRC",
      "date_published": 1459008000,
      "body": "\n<p>Weechat + Glowing Bear 打造一个网页版 IRC ,这样在哪里都可以聊天了呐~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>Weechat + Glowing Bear 打造一个网页版 IRC ,这样在哪里都可以聊天了呐~</p>\n\n<div class=\"section\" id=\"irc\">\n<h2><a class=\"toc-backref\" href=\"#id4\">为啥要自己搭建一个网页版 IRC 咧?</a></h2>\n<ul class=\"simple\">\n<li>不是啥设备都有聊天软件客户端呐~ (比如 PS Vita )  (╯＠Д＠)╯ ┻━┻</li>\n<li><a class=\"reference external\" href=\"https://webchat.freenode.net\">freenode 的 WebIRC</a> 很不错,但是验证码是 Google 的,于是又引出了怎么翻墙的问题 ~</li>\n</ul>\n</div>\n<div class=\"section\" id=\"weechat\">\n<h2><a class=\"toc-backref\" href=\"#id5\">为啥是 WeeChat ?</a></h2>\n<p>多半是 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 的安利呗~</p>\n</div>\n<div class=\"section\" id=\"prolgue-weechat\">\n<h2><a class=\"toc-backref\" href=\"#id6\">Prolgue: 安装 weechat</a></h2>\n<p>weechat 在好几个平台上都有二进制包啦~</p>\n<ul class=\"simple\">\n<li>Arch Linux: pacman -S weechat</li>\n<li>Cygwin (Windows): select WeeChat packages in setup.exe</li>\n<li>Debian 及其衍生发行版: apt-get install weechat-curses</li>\n<li>Fedora Core: dnf install weechat</li>\n<li>Gentoo: emerge weechat</li>\n<li>Mandriva/RedHat (或其他基于 RPM 包管理器的发行版): rpm -i /path/to/weechat-x.y.z-1.i386.rpm</li>\n<li>openSUSE: zypper in weechat</li>\n<li>Sourcemage: cast weechat</li>\n<li>OS X + Homebrew :  brew install weechat --with-python --with-perl</li>\n</ul>\n<p>如果需要编译的话 , <a class=\"reference external\" href=\"https://weechat.org/files/doc/stable/weechat_user.en.html#source_package\">去看 weechat 的文档啦~</a></p>\n</div>\n<div class=\"section\" id=\"act-0-ssl\">\n<h2><a class=\"toc-backref\" href=\"#id7\">Act 0 : 准备 SSL 证书</a></h2>\n<p>首先运行一次 weechat 来生成需要的文件,然后输入 <span class=\"tag\">/quit</span> 来退出.</p>\n<blockquote>\n$ weechat &amp;&amp; mkdir -p ~/.weechat/ssl</blockquote>\n<div class=\"tag info fg-white compound\">\n<p class=\"compound-first\">如果汝有自己的域名的话,为何不试试 <a class=\"alert-link reference external\" href=\"https://letsencrypt.org/\">Let's Encrypt</a> ?</p>\n<p class=\"compound-last\">如果没有的话,那就只好自己签名一个证书啦 _(:з」∠)_</p>\n</div>\n<ul>\n<li><p class=\"first\">如果汝自己有证书:</p>\n<blockquote>\n<p>把证书和私钥保存成一个文件:</p>\n<p>$ cat /path/to/your/cert /path/to/your/privkey &gt;&gt; ~/.weechat/ssl/relay.pem</p>\n</blockquote>\n</li>\n<li><p class=\"first\">如果没有域名的话,只好自己生成一个证书啦  (╯´ー`)╯ ┻━┻</p>\n<blockquote>\n<p>$ cd ~/.weechat/ssl</p>\n<p>$ openssl req -nodes -newkey rsa:2048 -keyout relay.pem -x509 -days 365 -out relay.pem</p>\n</blockquote>\n</li>\n<li><p class=\"first\">接下来运行一下 weechat 来设置一下 relay:</p>\n<blockquote>\n<p># 咱不知道怎么把 weechat 设置成服务,于是就用 screen 了 😂😂</p>\n<p>$ screen weechat</p>\n<p># 加载证书和私钥</p>\n<p>/relay sslcertkey</p>\n<p># 为 relay 设置一个密码 ( 用实际的密码替换 \"mypassword\" )</p>\n<p>/set relay.network.password \"mypassword\"</p>\n<p># 打开中继</p>\n<p>/relay add ssl.weechat 9001</p>\n<p>然后可以用 Ctrl + a + d 断开 screen 了 (´・ω・`)</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"act-1-relay\">\n<h2><a class=\"toc-backref\" href=\"#id8\">Act 1 : 连接到 relay</a></h2>\n<p>如果汝不想自己搭建的话,可以用 glowing-bear 自己的呗~</p>\n<p><a class=\"reference external\" href=\"https://www.glowing-bear.org/\">链接在这: https://www.glowing-bear.org/</a></p>\n<p>按照上面的指南来连接吧~</p>\n<p>如果汝要自己搭建一个的话,首先需要一个 Web 服务器啦~ ( Apache 和 Nginx 都不错,ArchWiki 上能找到文档~)</p>\n<dl class=\"docutils\">\n<dt>然后从</dt>\n<dd><p class=\"first\"><a class=\"reference external\" href=\"https://github.com/glowing-bear/glowing-bear\">glowing-bear 的 Github 项目页面上参考上面的提示把 glowing-bear 下载到本地呐~</a></p>\n<p class=\"last\">就是这样?</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id9\">常用操作一览</a></h2>\n<ul>\n<li><p class=\"first\">指定一个服务器:</p>\n<blockquote>\n<p>/server add &lt;名称&gt;/&lt;端口&gt; &lt;irc服务器的域名&gt; [ -ssl ( 启用SSL ) ] [ -autoconnect 在启动时自动连接 ]</p>\n<p>/server add freenode chat.freenode.net/6697 -ssl -autoconnect</p>\n</blockquote>\n</li>\n<li><p class=\"first\">连接到服务器:</p>\n<blockquote>\n<p>/connect &lt;名称&gt;</p>\n<p>/connect freenode</p>\n</blockquote>\n</li>\n<li><p class=\"first\">修改昵称</p>\n<blockquote>\n<p>/nick &lt;新昵称&gt;</p>\n</blockquote>\n</li>\n<li><p class=\"first\">加入一个频道</p>\n<blockquote>\n<p>/join &lt;频道名称&gt;</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id10\">(´・ω・`)</a></h2>\n</div>\n\n  </div>"
    },
    {
      "post_id": 39,
      "title": " 发布 Pelican 博客的几种方式",
      "date_published": 1458316800,
      "body": "\n<p>汝的 Pelican 博客有几篇文章了没？想不想让其他人也看到？</p>\n<p>如果汝在一开始使用了 <span class=\"tag\">pelican-quickstart</span> 来创建汝的博客的话,后面可能会方便点呗~\n( 因为它帮汝生成了一个 Makefile 呐~ 然而 baka Windows 并不能用 Makefile (ノ=Д=)ノ┻━┻ )</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>汝的 Pelican 博客有几篇文章了没？想不想让其他人也看到？</p>\n<p>如果汝在一开始使用了 <span class=\"tag\">pelican-quickstart</span> 来创建汝的博客的话,后面可能会方便点呗~\n( 因为它帮汝生成了一个 Makefile 呐~ 然而 baka Windows 并不能用 Makefile (ノ=Д=)ノ┻━┻ )</p>\n\n<div class=\"section\" id=\"pelican-quickstart-makefile\">\n<h2><a class=\"toc-backref\" href=\"#id6\">没用 pelican-quickstart ? 可以自己来写一个 Makefile 呗~</a></h2>\n<p>样例在这：</p>\n<script src=\"https://gist.github.com/KenOokamiHoro/223974ff5884c6eb82a5.js\"></script><p>(这里用到了 Github Gist 嘛,如果看不到的话, <a class=\"reference external\" href=\"https://gist.github.com/KenOokamiHoro/223974ff5884c6eb82a5\">链接在这</a> )</p>\n<p>对于喜欢自己动手的 <del>菊苣</del> 来说, Makefile 里的命令稍加改造就可以直接执行呐~</p>\n<p>在下面的例子中，上面是 Make 规则，下面是实际运行的命令呗~</p>\n<p>( <span class=\"tag\">/path/to/your/content/</span> 是汝的内容存放的目录, <span class=\"tag\">path/to/your/settings.py</span> 是汝设置文件的目录,\n记得用汝实际的位置替换呗~ )</p>\n<blockquote>\nmake html</blockquote>\n<hr class=\"docutils\">\n<blockquote>\npelican /path/to/your/content/ -s path/to/your/settings.py</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">首先当然是要生成汝的博客啦~</a></h2>\n<p>如果加上 <span class=\"tag\">-r</span> 或者 <span class=\"tag\">--autoreload</span> 参数, Pelican 就会在源文件更改时自动更新输出哟~</p>\n<p>如果汝在一开始使用了 <span class=\"tag\">pelican-quickstart</span> ,会生成一个发布时使用的 <span class=\"tag\">publishconf.py</span> 文件呐~</p>\n<p>(需要时就用它呗)</p>\n<blockquote>\nmake html</blockquote>\n<hr class=\"docutils\">\n<blockquote>\npelican /path/to/your/content/ [-s path/to/your/settings.py]</blockquote>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">接下来先在本机上预览一下~</a></h2>\n<p>如果出了错再重新上传一遍岂不是很痛苦 (╯&gt;＿&lt;)╯ ┻━┻</p>\n<p>如果汝在一开始使用了 <span class=\"tag\">pelican-quickstart</span> 会在汝的文件夹下生成一个 <span class=\"tag\">developer_server.sh</span> 文件,像这样?</p>\n<script src=\"https://gist.github.com/KenOokamiHoro/011731f75ee363ef4460.js\"></script><p>(这里用到了 Github Gist 嘛,如果看不到的话, <a class=\"reference external\" href=\"https://gist.github.com/KenOokamiHoro/011731f75ee363ef4460\">链接在这 again~</a> )</p>\n<p>如果是这样的话让它帮忙就好了啦~</p>\n<blockquote>\n<p># 一共有 start | stop | restart 三个选项,该知道是啥了吧 (´･ω･`)</p>\n<p>sh developer_server.sh start</p>\n</blockquote>\n<p>或者切换到输出的目录,然后直接运行 <span class=\"tag\">pelican.server</span></p>\n<blockquote>\npython -m pelican.server</blockquote>\n<p>在汝的浏览器上打开 <span class=\"tag\">http://localhost:8000</span> 看看效果呗~</p>\n<p>如果一切 OK 的话,用 <span class=\"tag\">publishconf.py</span> 生成发布时用的文件呗~</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">如果汝用自己的服务器?</a></h2>\n<p>如果汝用自己的服务器的话,修改汝的 Makefile 的这一段:</p>\n<p>如果汝在用FTP : ( 不过为啥还在用不安全的 FTP 啊 (╯‵Д′)╯ ┻━┻ )</p>\n<blockquote>\n<p>FTP_HOST=localhost # 这是主机的域名或者 IP 地址</p>\n<p>FTP_USER=anonymous # 这是用户名</p>\n<p>FTP_TARGET_DIR=/ # 这是上传到的文件夹</p>\n</blockquote>\n<p>然后安装 lftp ( Makefile 里用的是这个 )</p>\n<p>如果汝在用 SFTP (SCP/SSH) :</p>\n<blockquote>\n<p>SSH_HOST=localhost # 这是主机的域名或者 IP 地址</p>\n<p>SSH_PORT=22 # 如果主机的 SSH 端口不是默认的记得改~</p>\n<p>SSH_USER=root # 这是用户名</p>\n<p>SSH_TARGET_DIR=/var/www # 这是上传到的文件夹</p>\n</blockquote>\n<p>然后安装 scp ( Makefile 里用的是这个 )</p>\n<p>接下来只要直接 Make 相应的目标就可以啦~</p>\n<blockquote>\nmake ssh_upload</blockquote>\n<hr class=\"docutils\">\n<blockquote>\n<p>pelican /path/to/your/content/ -s path/to/your/publishconf.py</p>\n<p>scp -P $(SSH_PORT) -r $(OUTPUTDIR)/* $(SSH_USER)@$(SSH_HOST):$(SSH_TARGET_DIR)</p>\n</blockquote>\n<hr class=\"docutils\">\n<blockquote>\nmake ftp_upload</blockquote>\n<hr class=\"docutils\">\n<blockquote>\n<p>pelican /path/to/your/content/ -s path/to/your/publishconf.py</p>\n<p>lftp <a class=\"reference external\" href=\"ftp://$(FTP_USER)@$(FTP_HOST\">ftp://$(FTP_USER)@$(FTP_HOST</a>) -e \"mirror -R $(OUTPUTDIR) $(FTP_TARGET_DIR) ; quit\"</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"github-pages\">\n<h2><a class=\"toc-backref\" href=\"#id10\">如果汝打算用 Github Pages ?</a></h2>\n<p><a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 写过一篇利用 Travis 生成 Github Pages 的教程:</p>\n<blockquote>\n<a class=\"reference external\" href=\"http://farseerfc.me/travis-push-to-github-pages-blog.html\">用 Travis-CI 生成 Github Pages 博客</a></blockquote>\n<hr class=\"docutils\">\n<p>要上传到像 Amazon S3 ,Dropbox 一类的地方 , <a class=\"reference external\" href=\"http://docs.getpelican.com/en/3.6.3/publish.html\">还是看Pelican官方的文档吧</a></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 38,
      "title": " 浅说基于 Linux 内核的操作系统 (1) - 一些名词解释",
      "date_published": 1459353600,
      "body": "\n<p>是不是有时觉得 Linux 中的概念有点天花乱坠 _(:з」∠)_</p>\n<p>这篇文章会随着系列的更新介绍咱用到的术语的意思呐,也许汝不一定都要知道~有更新时会通知汝啦~</p>\n<p>但是咱不是专业的啦,如果汝正好是个 Linux 高手的话, 来评论里或是直接和咱交流下呗~</p>\n<p>本文 <ruby><rb>部分</rb><rp>(</rp><rt>几乎全部</rt><rp>)</rp></ruby> 内容来自于维基百科 o(*￣3￣)o ( 不过和咱一样都是知识共享 署名-相同方式共享 3.0协议授权啦~ )</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>是不是有时觉得 Linux 中的概念有点天花乱坠 _(:з」∠)_</p>\n<p>这篇文章会随着系列的更新介绍咱用到的术语的意思呐,也许汝不一定都要知道~有更新时会通知汝啦~</p>\n<p>但是咱不是专业的啦,如果汝正好是个 Linux 高手的话, 来评论里或是直接和咱交流下呗~</p>\n<p>本文 <ruby><rb>部分</rb><rp>(</rp><rt>几乎全部</rt><rp>)</rp></ruby> 内容来自于维基百科 o(*￣3￣)o ( 不过和咱一样都是知识共享 署名-相同方式共享 3.0协议授权啦~ )</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id8\">基本中的基本概念 _(:з」∠)_</a></h2>\n<div class=\"section\" id=\"id2\">\n<h3><a class=\"toc-backref\" href=\"#id9\">操作系统</a></h3>\n<p>操作系统（英语：operating system，缩写：OS）是管理计算机硬件与软件资源的计算机程序，同时也是计算机系统的核心与基石。\n操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出装置、操作网络与管理文件系统等基本事务。\n操作系统也提供一个让使用者与系统互动的操作界面。\n操作系统的型态非常多样，不同机器安装的操作系统可从简单到复杂，可从非智慧型手机的嵌入式系统到超级电脑的大型作业系统。\n许多操作系统制造者对它涵盖范畴的定义也不尽一致，例如有些操作系统整合了图形用户界面，而有些仅使用命令行界面，而将图形用户界面视为一种非必要的应用程式。</p>\n<p>操作系统理论在计算机科学中，为历史悠久而又活跃的分支；而操作系统的设计与实现则是软件工业的基础与核心。</p>\n<p>(下面是一幅典型的操作系统架构图~)</p>\n<img alt=\"典型的操作系统结构图\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Linux/1280px-Operating_system_architecture.svg.png\">\n<p>操作系统位于底层硬件与用户之间，是两者沟通的桥梁。用户可以通过操作系统的用户界面，输入命令。操作系统则对命令进行解释，驱动硬件设备，实现用户要求。以现代标准而言，一个标准PC的操作系统应该提供以下的功能：</p>\n<ul class=\"simple\">\n<li>进程管理（Processing management）</li>\n<li>内存管理（Memory management）</li>\n<li>文件系统（File system）</li>\n<li>网络通信（Networking）</li>\n<li>安全机制（Security）</li>\n<li>用户界面（User interface）</li>\n<li>驱动程序（Device drivers）</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"toc-backref\" href=\"#id10\">操作系统内核</a></h3>\n<p>在計算機科學中，内核（英语：Kernel），又稱核心，是一個電腦程式，用來管理軟體發出的資料I/O（輸入與輸出）要求，將這些要求轉譯為資料處理的指令，\n交由中央處理器（CPU）及電腦中其他電子元件進行處理，是現代操作系统中最基本的部分。它是为众多应用程序提供对计算机硬件的安全访问的一部分软件，\n这种访问是有限的，并由内核决定一个程序在什么时候对某部分硬件操作多长时间。直接对硬件操作是非常复杂的。所以内核通常提供一种硬件抽象的方法，\n来完成这些操作。通过进程间通信机制及系统调用，应用进程可间接控制所需的硬件资源（特别是处理器及IO设备）。</p>\n<p>严格地说，内核并不是计算机系统中必要的组成部分。程序可以直接地被调入计算机中执行；这样的设计，\n说明了设计者不希望提供任何硬件抽象和操作系统的支持；它常见于早期计算机系统的设计中。最终，一些辅助性程序，例如程序加载器和调试器，\n被设计到机器核心当中，或者写入在只读记忆体里。这些变化发生时，操作系统内核的概念就渐渐明晰起来了。</p>\n<p>所谓的\"操作系统内核\"，就是操作系统最核心最关键的部件啦。它负责一些最基本的工作，比如：管理硬件驱动、管理内存、管理文件系统、管理进程、等等。这些工作只要少了任何一样，整个操作系统都没法运转。</p>\n</div>\n</div>\n<div class=\"section\" id=\"linux\">\n<h2><a class=\"toc-backref\" href=\"#id11\">Linux 相关  ~(&gt;_&lt;~)</a></h2>\n<div class=\"section\" id=\"id4\">\n<h3><a class=\"toc-backref\" href=\"#id12\">Linux 内核</a></h3>\n<p>Linux内核（英语：Linux kernel），是一种计算机操作系统内核，以C语言和汇编语言写成，符合POSIX标准，以GNU通用公共许可证釋出。Linux内核最早是由芬兰黑客林納斯·托瓦茲为尝试在自己的英特尔x86架构计算机上提供自由免费的类Unix系统而开发的。该计划开始于1991年，林納斯·托瓦茲当时在Usenet新闻组comp.os.minix登载帖子[7]，这份著名的帖子標示着Linux内核计划的正式开始。</p>\n<p>在计划的早期有一些Minix的黑客提供了协助，而今天全球有无数程序员正在为该计划无偿提供帮助。</p>\n<p>从技术上说Linux只是一个内核。“内核”指的是一个提供硬件抽象层、磁盘及文件系统控制、多任务等功能的系统软件。一个内核并不是一套完整的操作系统。有一套基于Linux内核的完整操作系统叫作Linux操作系统，或是GNU/Linux（在该系统中包含了很多GNU计划的系统组件）。</p>\n<p>Linux 内核的特点是：彻底的开放性。所谓的\"开放性\"包括如下几方面：</p>\n<ol class=\"arabic simple\">\n<li>任何人都可以随意获取（可以从 Linux Kernel 官网直接下）</li>\n<li>任何人都可以免费获取（完全不用花银子）</li>\n<li>任何人都可以参与开发（阿猫阿狗都可以向 Linux 社区提交代码，只要你提交的代码符合要求，就会被合并到内核主线）</li>\n</ol>\n</div>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"toc-backref\" href=\"#id13\">Linux 操作系统</a></h3>\n<p>Linux 是一種自由和開放源碼的類UNIX作業系統。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。\n在加上使用者空間的應用程式之後，成為Linux作業系統。Linux也是自由软件和开放源代码软件发展中最著名的例子。\n只要遵循GNU通用公共许可证，任何个人和机构都可以自由地使用Linux的所有底层源代码，也可以自由地修改和再发布。\n大多數Linux系統還包括像提供GUI的X Window之類的程序。除了一部分專家之外，大多數人都是直接使用Linux發行版，而不是自己選擇每一樣組件或自行設置。</p>\n<p>严格来讲，术语Linux只表示操作系统内核本身，但通常采用Linux内核来表达该意思。Linux则常用来指基于Linux内核的完整操作系统，\n包括GUI组件和许多其他实用工具。由于这些支持用户空间的系统工具和库主要由理查德·斯托曼于1983年发起的GNU计划提供，自由软件基金会提议将该组合系统命名为GNU/Linux，但Linux不屬於GNU計劃。</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h3><a class=\"toc-backref\" href=\"#id14\">Linux 发行版</a></h3>\n<p>Linus 领导的开源社区只负责开发内核，不开发其它的东西（比如：运行库、图形界面、应用软件、等）。</p>\n<p>这就引出一个问题——光有一个赤裸裸的内核，用户是没法用的（就好比你光拿到一个汽车引擎，你是没法开车的）。为此，就有一大帮开源社区或商业公司，在这个裸露的内核外面，再包上一些东西（比如：运行库、应用软件）。经过这样包装之后，就成为\"发行版\"。</p>\n<p>在这种模式下，会有各种各样的发行版，正好可以覆盖千奇百怪的需求；其次，同质化的发行版之间会产生竞争，最终只有优秀的发行版会存活，差劲的发行版会逐渐消亡——这就是开源生态圈的\"达尔文主义\"。</p>\n<p>如果用一个词来形容 Linux 的优点，那就是——多元化。内核的开发是多元化的（任何人都可以参与），发行版是多元化的（任何人都可以搞发行版）。</p>\n</div>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id15\">硬盘相关</a></h2>\n<div class=\"section\" id=\"mbr-master-boot-record\">\n<h3><a class=\"toc-backref\" href=\"#id16\">MBR ( Master Boot Record , 主引导记录 )</a></h3>\n<p>主引导记录（Master Boot Record，缩写：MBR），又叫做主引导扇区，是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。在深入讨论主引导扇区内部结构的时候，有时也将其开头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。因此，在使用“主引导记录”（MBR）这个术语的时候，需要根据具体情况判断其到底是指整个主引导扇区，还是主引导扇区的前446字节。</p>\n<p>从主引导记录的结构可以知道，它仅仅包含一个64个字节的硬盘分区表。由于每个分区信息需要16个字节，所以对于采用MBR型分区结构的硬盘，最多只能识别4个主要分区（Primary partition）。所以对于一个采用此种分区结构的硬盘来说，想要得到4个以上的主要分区是不可能的。这里就需要引出扩展分区了。扩展分区也是主要分区的一种，但它与主分区的不同在于理论上可以划分为无数个逻辑分区。[2]</p>\n<p>扩展分区中逻辑驱动器的引导记录是链式的。每一个逻辑分区都有一个和MBR结构类似的扩展引导记录（EBR），其分区表的第一项指向该逻辑分区本身的引导扇区，第二项指向下一个逻辑驱动器的EBR，分区表第三、第四项没有用到。</p>\n<p>Windows系统默认情况下，一般都是只划分一个主分区给系统，剩余的部分全部划入扩展分区。这里有下面几点需要注意：</p>\n<ul class=\"simple\">\n<li>在MBR分区表中最多4个主分区或者3个主分区＋1个扩展分区，也就是说扩展分区只能有一个，然后可以再细分为多个逻辑分区。</li>\n<li>在Linux系统中，硬盘分区命名为sda1－sda4或者hda1－hda4（其中a表示硬盘编号可能是a、b、c等等）。在MBR硬盘中，分区号1－4是主分区（或者扩展分区），逻辑分区号只能从5开始。</li>\n<li>在MBR分区表中，一个分区最大的容量为2T，且每个分区的起始柱面必须在这个disk的前2T内。你有一个3T的硬盘，根据要求你至少要把它划分为2个分区，且最后一个分区的起始扇区要位于硬盘的前2T空间内。[3]如果硬盘太大则必须改用GPT。</li>\n</ul>\n</div>\n<div class=\"section\" id=\"uefi-unified-extensible-firmware-interface\">\n<h3><a class=\"toc-backref\" href=\"#id17\">UEFI ( Unified Extensible Firmware Interface, 统一可扩展固件界面)</a></h3>\n<p>统一可扩展固件界面（Unified Extensible Firmware Interface, UEFI）是一种个人电脑系统规格，用来定义作业系统与系统固件之间的软件界面，作为BIOS的替代方案[1]。可扩展固件接口负责加电自检（POST）、连系作业系统以及提供连接作业系统与硬体的介面。</p>\n<p>UEFI的前身是Intel在1998年开始开发的Intel Boot Initiative，后来被重命名为可延伸韧体介面（Extensible Firmware Interface, EFI）。Intel在2005年将其交由统一可扩展固件接口论坛（Unified EFI Forum）来推广与发展，为了凸显这一点，EFI也更名为UEFI（Unified EFI）。UEFI论坛的创始者是11家知名电脑公司，包括Intel、IBM等硬件厂商，软件厂商Microsoft，及BIOS厂商AMI、Insyde及Phoenix。</p>\n</div>\n</div>\n\n  </div>"
    },
    {
      "post_id": 37,
      "title": " 浅说基于 Linux 内核的操作系统 (6) - 安装 Debian",
      "date_published": 1460995200,
      "body": "\n<p>接着咱再来装 Debian  ~(&gt;_&lt;~)</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>接着咱再来装 Debian  ~(&gt;_&lt;~)</p>\n\n<div class=\"section\" id=\"debian\">\n<h2><a class=\"toc-backref\" href=\"#id5\">下载 Debian</a></h2>\n<p><del>话说 Debian 从官网到 Wiki 都有一种年久失修的气息😂😂</del></p>\n<p><a class=\"reference external\" href=\"https://www.debian.org/distrib/\">这是官方的下载页面</a></p>\n<p>嗯……看不懂的话直接去崔土豪源吧😂😂</p>\n<p>DVD : <a class=\"reference external\" href=\"https://mirrors.ustc.edu.cn/debian-cd/8.4.0/amd64/iso-dvd/\">https://mirrors.ustc.edu.cn/debian-cd/8.4.0/amd64/iso-dvd/</a></p>\n<p>( 不用下载带 Update 的 iso )</p>\n<p>Live DVD : <a class=\"reference external\" href=\"https://mirrors.ustc.edu.cn/debian-cd/8.4.0-live/amd64/iso-hybrid/\">https://mirrors.ustc.edu.cn/debian-cd/8.4.0-live/amd64/iso-hybrid/</a></p>\n<p>( 后面的 xxxx-desktop 表示的是某种环境的 Live 系统 )</p>\n<p>然而咱并没有找到 Debian 的系统需求啊 (╯•̀∧•́)╯ ┻━┻</p>\n<p>后面咱就用 DVD 映像啦 ~(&gt;_&lt;~)</p>\n</div>\n<div class=\"section\" id=\"mbr-uefi\">\n<h2><a class=\"toc-backref\" href=\"#id6\">区分 MBR 和 UEFI 系统 | ω・`)</a></h2>\n<p>MBR 系统启动安装映像之后大概像这样 _(:з」∠)_</p>\n<img alt=\"MBR 系统启动之后大概像这样\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Installing_Debian/1.png\">\n<ul class=\"simple\">\n<li>Install ： 基于终端的安装界面</li>\n<li>Graphical Install : 基于 GUI 的安装界面 | ω・`)</li>\n<li>Advanced Options : 高级选项......</li>\n<li>Help : 帮助</li>\n<li>Install with speech synchesis : 在文字转语音支持下安装 ( 然而估计用不到 😂😂 )</li>\n</ul>\n<p>( 对于 Live ISO ,会多一个 \"Start Debian Live\" 的选项,可以来进行测试 o(*￣3￣)o</p>\n<p>而 UEFI 启动大概像这样 (´・ω・`)</p>\n<img alt=\"UEFI啦~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/2.png\">\n<p>那么 Advanced Options 都有哪些咧 ?</p>\n<img alt=\"这是高级选项 _(:з」∠)_\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/3.png\">\n<ul class=\"simple\">\n<li>Expert Install : 以 Expert Mode 进行安装 ( <ruby><rb>专家</rb><rp>(</rp><rt>啰嗦</rt><rp>)</rp></ruby> 模式 )</li>\n<li>Rescue Mode : 修复当前系统的急救模式</li>\n<li>Automated Install : 自动安装 ( 然而咱没用过 😂😂 )</li>\n</ul>\n<p>( 下面三个带 Graphical 的选项就是图形界面下的啦~ )</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">第一阶段：语言和区域，设置网络和创建用户</a></h2>\n<ul class=\"simple\">\n<li>选择语言，在安装程序中选择的语言会是汝安装好的系统的语言呗~</li>\n</ul>\n<img alt=\"选择语言\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/4.png\">\n<ul class=\"simple\">\n<li>例行提示所选语言的翻译不完整  _(:з」∠)_</li>\n</ul>\n<img alt=\"提示翻译不完整……\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/5.png\">\n<ul class=\"simple\">\n<li>选择汝的区域,一般选择汝所在的位置就好啦~</li>\n</ul>\n<img alt=\"选择区域\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/6.png\">\n<ul class=\"simple\">\n<li>配置键盘映射,默认的应该就合适 &lt;(=﹁\"﹁=)&gt;</li>\n</ul>\n<img alt=\"键盘映射\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/7.png\">\n<ul>\n<li><p class=\"first\">探测网络设备,偶尔会提示缺少某些驱动,先记下来.</p>\n<blockquote>\n<p>( VirtualBox 不缺驱动所以没截图 😂😂 )</p>\n</blockquote>\n</li>\n<li><p class=\"first\">探测连接,没有的直接按取消吧 😂😂</p>\n</li>\n</ul>\n<img alt=\"探测网络连接\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/9.png\">\n<ul class=\"simple\">\n<li>探测网络连接失败,接着选 \"现在不进行网络设置\" 然后下一步.</li>\n</ul>\n<img alt=\"探测网络连接失败   _(:з」∠)_\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/8.png\">\n<ul class=\"simple\">\n<li>设置一个主机名,一般可以随便些~</li>\n</ul>\n<img alt=\"设置主机名\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/10.png\">\n<ul>\n<li><p class=\"first\">这里可以选择为 root 用户设置一个密码,也可以不设置</p>\n<blockquote>\n<p>考虑到安全性还是不要设置的好  &lt;(=﹁\"﹁=)&gt;</p>\n</blockquote>\n</li>\n</ul>\n<img alt=\"可选为 root 用户设置个密码\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/12.png\">\n<ul class=\"simple\">\n<li>接着创建一个用户,因为 root 没有密码,所以这个用户可以通过 sudo 获得 root 权限 ~(&gt;_&lt;~)</li>\n</ul>\n<img alt=\"创建新用户\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/13.png\">\n<img alt=\"创建新用户\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/14.png\">\n<img alt=\"为新用户设置密码\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/15.png\">\n<p>然后又到最坑的环节啦 😂😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">第二阶段 : 磁盘分区和安装基本系统 Σ( ° △ °|||)</a></h2>\n<ul class=\"simple\">\n<li>选择一种分区方式,为了不坑选择手动 ʃ ̂͜•̄ ̱̩ ̄͜►</li>\n</ul>\n<img alt=\"选择一种分区方式\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/16.png\">\n<ul>\n<li><p class=\"first\">如果汝计划在一块新硬盘上安装系统的话,先创建一下分区表呗~</p>\n<blockquote>\n<p>点击设备名称来创建分区表 &lt;(ノ=﹁\"﹁=)ノ┻━┻</p>\n</blockquote>\n</li>\n</ul>\n<img alt=\"分区菜单\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/18.png\">\n<img alt=\"为设备创建分区表\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/19.png\">\n<ul class=\"simple\">\n<li>接下来点击那个新的 \"空闲空间\" 创建一个新分区呗~</li>\n</ul>\n<img alt=\"创建新分区\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/20.png\">\n<ul class=\"simple\">\n<li>设置新分区的大小.</li>\n</ul>\n<img alt=\"新分区的大小\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/21.png\">\n<ul class=\"simple\">\n<li>调整新分区的属性,一般设置挂载点就好 ( <span class=\"tag\">/</span> 是必须的 (╯ˊ_&gt;ˋ)╯ ┻━┻ )</li>\n</ul>\n<img alt=\"编辑分区的详细信息\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/22.png\">\n<ul class=\"simple\">\n<li>然后效果大概像这样 _(:з」∠)_</li>\n</ul>\n<img alt=\"分区的详细信息\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/23.png\">\n<ul class=\"simple\">\n<li>对于 UEFI 系统，还需要一个 EFI 系统分区呗~</li>\n</ul>\n<img alt=\"创建一个 EFI 系统分区\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/24.png\">\n<img alt=\"包括 EFI 系统分区的分区表\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/25.png\">\n<ul>\n<li><p class=\"first\">单击 \"分区设定结束并将设置写入磁盘\" ,这时会提示没有创建交换空间 😂😂</p>\n<blockquote>\n<p>对于 RAM 小于 1GB 的用户，交换空间通常是推荐的 ( 一般推荐是RAM 的两倍...... )，但是对于拥有大量的物理内存的用户来说是否使用主要看个人口味了 (尽管它对于休眠到硬盘支持是必须的)。</p>\n<p>自己看着办呗~ ......</p>\n<p><del>大土壕 hjc 这样说:</del></p>\n<p>David Huang 🌚, [16.04.16 04:38]\n有啊</p>\n<p>David Huang 🌚, [16.04.16 04:38]\n能把更冷的内存压缩后放磁盘上，将腾出来的空间用于更热的缓存</p>\n<p>David Huang 🌚, [16.04.16 04:39]\n比如我chrome泄露了50个G的内存</p>\n<p>David Huang 🌚, [16.04.16 04:39]\n我总共有64G内存</p>\n<p>David Huang 🌚, [16.04.16 04:39]\n这个时候系统就会把这50G压缩后放在硬盘上</p>\n<p>David Huang 🌚, [16.04.16 04:40]\n然后这些空间用于缓存</p>\n<p>David Huang 🌚, [16.04.16 04:40]\n明显提高系统运行速度</p>\n<p>David Huang 🌚, [16.04.16 04:40]\n→_→</p>\n</blockquote>\n</li>\n</ul>\n<img alt=\"提示没有交换空间 ......\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/26.png\">\n<ul>\n<li><p class=\"first\">接着该确认了.</p>\n<blockquote>\n<p>一旦选了是,就没有回头路了呐~</p>\n</blockquote>\n</li>\n</ul>\n<img alt=\"确认提交对硬盘分区的更改\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/27.png\">\n<ul class=\"simple\">\n<li>开始安装基本系统,去喝杯咖啡呗~ 😂</li>\n</ul>\n</div>\n<div class=\"section\" id=\"dvd\">\n<h2><a class=\"toc-backref\" href=\"#id9\">只有 DVD 安装需要的第三阶段 : 设置软件包管理器</a></h2>\n<ul class=\"simple\">\n<li>只有在汝有其他的 DVD 映像的时才需要扫描呐~</li>\n</ul>\n<img alt=\"插别的 DVD ?\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/28.png\">\n<ul class=\"simple\">\n<li>虽然可以在这里选择网络映像，但前提汝要有足够的网速和时间 😂😂</li>\n</ul>\n<img alt=\"使用网络镜像\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/29.png\">\n<ul class=\"simple\">\n<li>要不要参加软件包流行度调查随便啦~</li>\n</ul>\n<img alt=\"参加软件包流行度调查?\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/31.png\">\n<ul class=\"simple\">\n<li>选择安装的软件包组，一般就是再选一个桌面环境 😂</li>\n</ul>\n<img alt=\"选择软件包集\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/32.png\">\n<ul class=\"simple\">\n<li>然后接着装（可以去把刚刚泡的咖啡喝了 😂</li>\n</ul>\n<img alt=\"安装软件包\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/33.png\">\n</div>\n<div class=\"section\" id=\"mbr-grub\">\n<h2><a class=\"toc-backref\" href=\"#id10\">只有 MBR 安装需要的第三阶段 : 安装 GRUB 启动管理器</a></h2>\n<p>（ 其实 UEFI 安装也有这一步啦。只是不需要汝手动设置啦~ ）</p>\n<ul class=\"simple\">\n<li>要把 GRUB 安装到 MBR 上吗? ( 当然是要啦~ )</li>\n</ul>\n<img alt=\"要把 GRUB 安装到 MBR 上吗?\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/34.png\">\n<ul class=\"simple\">\n<li>然后选择要安装到的硬盘上呗~</li>\n</ul>\n<img alt=\"然后选择要安装到的硬盘\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/35.png\">\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id11\">最后 ......</a></h2>\n<ul class=\"simple\">\n<li>收工重启 ......</li>\n</ul>\n<img alt=\"重启\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/38.png\">\n<ul class=\"simple\">\n<li>两个选项，分别是启动系统和高级选项 _(:з」∠)_</li>\n</ul>\n<img alt=\"GRUB\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/39.png\">\n<ul class=\"simple\">\n<li>高级选项的两个选项，第一和刚刚的第一个一样，第二个是进入恢复模式 (╯T皿T)╯ ┻━┻</li>\n</ul>\n<img alt=\"高级选项\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/40.png\">\n<ul class=\"simple\">\n<li>该登录啦~</li>\n</ul>\n<img alt=\"登录\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Debian/41.png\">\n<hr class=\"docutils\">\n<p><del>咱要不要再装个 openSUSE 😂😂</del></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 36,
      "title": " 权限的边界-关于社区的一些无关思考",
      "date_published": 1461600000,
      "body": "\n<p>权限到底有没有边界？如果有的话，又在哪里？</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>权限到底有没有边界？如果有的话，又在哪里？</p>\n\n<div class=\"section\" id=\"ooxx\">\n<h2><a class=\"toc-backref\" href=\"#id6\">为了避免oo和xx，先来个前提声明呗~</a></h2>\n<ul class=\"simple\">\n<li>咱绝对没有炮轰文中提到的人 <del>(或非人)</del> 的意思,虽然他/她/它们之间曾经 (或是现在正在) 有过节. <del>但是这和咱又有啥关系呐~</del></li>\n<li>建议汝先读读 <a class=\"reference external\" href=\"https://program-think.blogspot.com/2014/02/freedom-of-speech.html?m=0\">政治常识扫盲：澄清“言论自由”的各种误区</a> 这篇文章来扫除一下汝内心中可能存在的几个误区呗~</li>\n<li>由于各种原因这篇文章可能写的很长?</li>\n<li>......</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">从一件小事开始?</a></h2>\n<p>前几天 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 的 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 在 Telegram 上创建了一个日语学习群,虽然一开始加的人挺多的,但是......</p>\n<p>请原谅咱一字不落的贴出聊天记录 ( 至少是现在,如果将来有人要求删掉又是另一回事了</p>\n<p>Star Brilliant , [27.04.16 04:50]\n刚刚是谁踢我的</p>\n<p>Star Brilliant , [27.04.16 04:50]\n某卷？</p>\n<p>teleboto, [27.04.16 04:50]\n[u] 同被踢</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:50]\n😂</p>\n<p>Star Brilliant , [27.04.16 04:50]\n搞得好像那群是他家似的</p>\n<p>Star Brilliant , [27.04.16 04:50]\n我进到群里看到他在说话都没说什么</p>\n<p>Star Brilliant , [27.04.16 04:50]\n大不了不打理得了</p>\n<p>Star Brilliant , [27.04.16 04:51]\n私事公办很不对吧</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:51]\n😂😂😂</p>\n<p>Henry King, [27.04.16 04:51]\n@m13253 他的意思是你进群之后秀水平了</p>\n<p>Star Brilliant , [27.04.16 04:51]\n[In reply to Henry King]\n哦？</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:52]\n[In reply to jm33_m0]\n😂😂</p>\n<p>Star Brilliant , [27.04.16 04:52]\n因为我“有一点基础所以不应该学习”</p>\n<p>Star Brilliant , [27.04.16 04:52]\n如果那个群他是管理员我就不管了</p>\n<p>farseerfc 😂 0xC13D4796, [27.04.16 04:52]\n他是管理員啊，我和他一起開的……</p>\n<p>Star Brilliant , [27.04.16 04:52]\n或者说如果那个群是他办的我就无所谓了</p>\n<p>Star Brilliant , [27.04.16 04:52]\n[In reply to farseerfc 😂 0xC13D4796]\n那我就不管了</p>\n<p>Star Brilliant , [27.04.16 04:53]\n总之我和他有仇</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:53]\n/me 默默的围观就好了😂</p>\n<p>Star Brilliant , [27.04.16 04:53]\n而我现在出现在 #archlinux-cn 的原因，正是因为这个群不是他自己加的</p>\n<p>Star Brilliant , [27.04.16 04:53]\n自己家的</p>\n<p>teleboto, [27.04.16 04:53]\n[u] 我进去似乎不到一分钟……</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:53]\n（但是话说回来咱可没秀水平啊😂</p>\n<p>Star Brilliant , [27.04.16 04:53]\n“开始踢人”，砰！消失了</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:54]\n[In reply to Star Brilliant ]\n和 @acgtyrant 一样 😂</p>\n<p>Star Brilliant , [27.04.16 04:54]\n[In reply to ヨイツの賢狼ホロ 😋(🍎*)]\n我想你不知道5年前那个盖子/opensuse事件</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:55]\n[In reply to Star Brilliant ]\n/me 咱就是把Telegram放在后台一会儿😂</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:55]\n[In reply to Star Brilliant ]\n前一阵子翻暴君的老Arch博客来着😂</p>\n<p>wicast C, [27.04.16 04:56]\n群关了！！？</p>\n<p>wicast C, [27.04.16 04:56]\n洗个碗就不见了🌚</p>\n<p>Henry King, [27.04.16 04:56]\n[In reply to Star Brilliant ]\n😅 五年前啊。那个时候我还没怎么用 G+。</p>\n<p>逐光入暗 TJM ¦ PGP 9F6B2D7D, [27.04.16 04:56]\n[In reply to Star Brilliant ]\n求科普</p>\n<p>teleboto, [27.04.16 04:56]\n[LastAvengers] u: 日语群么？</p>\n<p>Star Brilliant , [27.04.16 04:56]\n[In reply to 逐光入暗 TJM ¦ PGP 9F6B2D7D]\n这里不方便说</p>\n<p>paco tacitus, [27.04.16 04:57]\n[In reply to Star Brilliant ]\n啥事件？</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 04:57]\n五年前咱还是Debian用户😂</p>\n<p>逐光入暗 TJM ¦ PGP 9F6B2D7D, [27.04.16 04:57]\n[In reply to Star Brilliant ]\n口以私了</p>\n<p>Star Brilliant , [27.04.16 04:57]\n[In reply to 逐光入暗 TJM ¦ PGP 9F6B2D7D]\n我建议你问盖子本人</p>\n<p>paco tacitus, [27.04.16 04:57]\n我私聊不了</p>\n<p>逐光入暗 TJM ¦ PGP 9F6B2D7D, [27.04.16 04:57]\n[In reply to Star Brilliant ]\nO.O</p>\n<p>Star Brilliant , [27.04.16 04:57]\n因为我不知道事情的（完整）前因，但是知道后果</p>\n<p>paco tacitus, [27.04.16 04:57]\n[In reply to Star Brilliant ]\n能google吗</p>\n<p>高坂 きりの, [27.04.16 04:58]\n五年前是2011吗</p>\n<p>Star Brilliant , [27.04.16 04:58]\n[In reply to paco tacitus]\nない，大部分文字记录被“逼迫要求删除”了</p>\n<p>高坂 きりの, [27.04.16 04:58]\n关键字搜不到啊</p>\n<p>Star Brilliant , [27.04.16 04:59]\n大部分情况下，我会选择少一点人际关系的问题</p>\n<p>Star Brilliant , [27.04.16 04:59]\n钻研技术就好</p>\n<p>Felix Yan, [27.04.16 04:59]\n🌚 五年前……那时候盖子还很小吧（捂脸</p>\n<p>teleboto, [27.04.16 05:01]\n[u] LastAvengers: tg太伤人了😢😢</p>\n<p>teleboto, [27.04.16 05:03]\n[phoenixlzx] 我已經不知道该说什么好了，一个认真的学习群一群人在里面开始瞎扯，被踢了就开始自己瞎猜然后翻我旧账，翻旧帐也就罢了这么多年了也没查证过到底是谁的问题</p>\n<p>Star Brilliant , [27.04.16 05:04]\n“瞎扯”</p>\n<p>paco tacitus, [27.04.16 05:06]\n就搜到了关于yum作者去世的事。。比尔盖子？</p>\n<p>Star Brilliant , [27.04.16 05:07]\n[In reply to paco tacitus]\n都是徒劳，该毁灭的都毁灭了</p>\n<p>Star Brilliant , [27.04.16 05:07]\n我还留存一份然而可能找不到了</p>\n<p>Star Brilliant , [27.04.16 05:07]\n没必要翻旧账了</p>\n<p>paco tacitus, [27.04.16 05:07]\n奇怪</p>\n<p>paco tacitus, [27.04.16 05:07]\n好吧</p>\n<p>Star Brilliant , [27.04.16 05:07]\n因为我不想劝说任何人改变对任何人/事物的看法</p>\n<p>teleboto, [27.04.16 05:07]\n[phoenixlzx] 然而刚才你就在这么做</p>\n<p>Star Brilliant , [27.04.16 05:08]\n我不希望你们因为听说了这些事情而对中国开源社区产生什么不好的印象</p>\n<p>teleboto, [27.04.16 05:08]\n[phoenixlzx] 而且五年前你也在这么做</p>\n<p>paco tacitus, [27.04.16 05:08]\n🌚👍</p>\n<p>teleboto, [27.04.16 05:10]\n[phoenixlzx] 再回来说这个日语群，本来也只是我自己想学而已，死皮赖脸去找fc前辈来带路，结果突然就来了一群人在聊东聊西，还有自以为比别人优秀就在秀的，这个群还怎么学习</p>\n<p>teleboto, [27.04.16 05:11]\n[phoenixlzx] 一堆呆在日本几年的人拉进来帮忙的，都还没说话呢</p>\n<p>Star Brilliant , [27.04.16 05:11]\n简直</p>\n<p>David Huang, [27.04.16 05:11]\n🌚</p>\n<p>teleboto, [27.04.16 05:12]\n[phoenixlzx] 不要太把自己当大爷了</p>\n<p>paco tacitus, [27.04.16 05:12]\n好吧。。我搜到那个事了🌚</p>\n<p>paco tacitus, [27.04.16 05:12]\n有点过分</p>\n<p>ヨイツの賢狼ホロ 😋(🍎*), [27.04.16 05:12]\n[ 😂 (sticker) ]</p>\n<p>Star Brilliant , [27.04.16 05:14]\n[In reply to teleboto]\n我想告诉你的是，因为种种原因，我B了你，然而我在群里看到你存在的时候都“宽容”（暂且这么说）地忍了，你的做法真的合适么？</p>\n<p>Star Brilliant , [27.04.16 05:14]\n“聊东聊西”得说出点证据</p>\n<p>Star Brilliant , [27.04.16 05:14]\n至于某旧账，我也不想多说</p>\n<p>Star Brilliant , [27.04.16 05:15]\n本来我是想点到为止，你自己一个人知道就好</p>\n<p>Star Brilliant , [27.04.16 05:15]\n毕竟群里其他人都不知道这个事情</p>\n<p>Star Brilliant , [27.04.16 05:15]\n有人问我这个事情到底怎么回事的时候我也没说</p>\n<p>teleboto, [27.04.16 05:15]\n[phoenixlzx] 首先这个群是我和fc开的，我B你的时候你还没B我呢知道伐？本来我也可以看到你进来就直接踢掉你然而还是觉得既然来学习也就算了</p>\n<p>teleboto, [27.04.16 05:16]\n[phoenixlzx] 结果呢</p>\n<p>Star Brilliant , [27.04.16 05:16]\n你应该知道我b人一般不会点击“b”</p>\n<p>Star Brilliant , [27.04.16 05:16]\n而是肉眼打码</p>\n<p>Star Brilliant , [27.04.16 05:16]\n结果怎么</p>\n<p>teleboto, [27.04.16 05:16]\n[phoenixlzx] 我不管你怎么样 那是你自己的权利和我无关</p>\n<p>Star Brilliant , [27.04.16 05:16]\n结果我说了什么跑题的话了么？</p>\n<p>Star Brilliant , [27.04.16 05:17]\n那就无关好了</p>\n<p>Star Brilliant , [27.04.16 05:18]\n我不想刁难你</p>\n<p>Star Brilliant , [27.04.16 05:18]\n我也不希望你刁难</p>\n<p>Star Brilliant , [27.04.16 05:18]\n我</p>\n<p>Star Brilliant , [27.04.16 05:19]\n过往的恩怨也无所谓</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id8\">那么,来大致梳理一下情况呗~</a></h2>\n<ul class=\"simple\">\n<li>farseerfc 在 Telegram 上创建了一个日语学习群.然后在 #archlinux-cn 邀请加入.</li>\n<li>因为 fc 的邀请有好几个人加入了 (比如咱)</li>\n<li>一开始在试着用日语交流,还挺正常. (不过咱就是一直在发表情 😂😂)</li>\n<li>(然后咱把 Telegram 最小化到后台了一阵子)</li>\n<li>再打开发现咱已经被移除出群了 (当然不止咱一个)</li>\n<li>然后就是上面那些聊天记录了😂😂</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id9\">一些不负责小分析 _(:з」∠)_</a></h2>\n<ul>\n<li><p class=\"first\">那个群是 farseerfc 开的, 然后给了 phoenixlzx Administrator,姑且算他俩的私人空间</p>\n<blockquote>\n<p>因为不满足公共空间的第一个特征:\"不属于任何个人，不属于任何组织/机构。\"</p>\n</blockquote>\n</li>\n<li><p class=\"first\">很显然,因为是私人空间,所以其他人有没有言论自由,要看管理员是否愿意给.</p>\n</li>\n<li><p class=\"first\">然后,因为是学习向群组,一定不希望被无关内容打扰.(这个好像大家都默许)</p>\n</li>\n<li><p class=\"first\">最后,因为太多人开始跑题于是 phoenixlzx 开始把某些她认为造成跑题的人移出群.</p>\n</li>\n<li><p class=\"first\">对此创建者 farseerfc 既没有表示反对又没有采取补救措施?</p>\n<blockquote>\n<p>当然也是因为被移除的人都没有要求再回去的缘故,所以咱认为这不是 fc 的锅</p>\n</blockquote>\n</li>\n<li><p class=\"first\">就是这样, <del>事实已经说明了一切</del></p>\n</li>\n</ul>\n<p>于是咱自己的结论如下:</p>\n<ul>\n<li><p class=\"first\">如果只发表情和 sticker 算是对消息流的干扰而导致咱被移除的话,那是咱的错.</p>\n</li>\n<li><p class=\"first\">但是如果 phoenixlzx 能给个更准确的解释说不定更好?</p>\n<blockquote>\n<p>或者他希望通过私聊解释只是因为不是双向联系人做不到 (Telegram 一大天坑 😂😂😂 )</p>\n</blockquote>\n</li>\n<li><p class=\"first\">不管怎么样,咱并没有对 phoenixlzx 的做法表示不满,毕竟:</p>\n<blockquote>\n<p>\"在【别人的】私人空间有没有言论自由捏？这就要看那个私人空间的主人是否给你言论自由。如果空间的主人允许，你就有；反之，则没有。\"</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"del-del\">\n<h2><a class=\"toc-backref\" href=\"#id10\"><del>好吧下面进入自问自答环节 😂</del></a></h2>\n<p>但是仔细想想还是先把问题列出来再分开回答吧 <del>(才不是没时间了呐~)</del></p>\n<p>Q1 : 社区或群组要不要有规则,如果有的话,谁来制定,怎样制定?</p>\n<p>Q2 : 有比一般用户更高权限的用户是否该有更高的限制?</p>\n<p>Q3 : 在群组中防止信息流被无关信息干扰是不是共识,具体操作起来呐?</p>\n<p>Q4 : 关于封禁或移除之类的措施要不要在事后由操作者给相关人员一个看似合理的解释?</p>\n<p>Q5 : 曾经在某个项目有过节的两人能不能在另一个项目上重归于好?</p>\n<p>......</p>\n<hr class=\"docutils\">\n<p>暂时想到的就这么多,欢迎各位在下方的评论里给出自己的解答或是邮件联系咱呗~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 35,
      "title": " 浅说基于 Linux 内核的操作系统 (5) - 安装 Fedora",
      "date_published": 1460131200,
      "body": "\n<p>汝是不是想说'废话少说快教我怎么装 Linux 发行版'啦~</p>\n<p>如果汝已经在运行一个 Linux 发行版的话,那么可以跳过接下来的几节.</p>\n<p>如果汝有些心虚,想在虚拟机上先尝试一下,可以先去读一下\n<a class=\"reference external\" href=\"https://program-think.blogspot.com/2012/10/system-vm-0.html#index\">扫盲操作系统虚拟机系列@ 编程随想的博客</a></p>\n<p>如果汝要直接装在电脑上,先做个USB启动盘啦~</p>\n<p>( 啥? 不会? <a class=\"reference external\" href=\"https://program-think.blogspot.com/2013/12/create-bootable-usb-stick-from-iso.html\">看看这个 ?</a> )</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>汝是不是想说'废话少说快教我怎么装 Linux 发行版'啦~</p>\n<p>如果汝已经在运行一个 Linux 发行版的话,那么可以跳过接下来的几节.</p>\n<p>如果汝有些心虚,想在虚拟机上先尝试一下,可以先去读一下\n<a class=\"reference external\" href=\"https://program-think.blogspot.com/2012/10/system-vm-0.html#index\">扫盲操作系统虚拟机系列@ 编程随想的博客</a></p>\n<p>如果汝要直接装在电脑上,先做个USB启动盘啦~</p>\n<p>( 啥? 不会? <a class=\"reference external\" href=\"https://program-think.blogspot.com/2013/12/create-bootable-usb-stick-from-iso.html\">看看这个 ?</a> )</p>\n\n<div class=\"section\" id=\"fedora-workstation\">\n<h2><a class=\"toc-backref\" href=\"#id7\">下载 Fedora Workstation</a></h2>\n<blockquote>\n<p>Fedora Workstation Live 镜像让您可以为自己电脑制作完整的立即可用的 Fedora Workstation 系统介质。您可以使用 Live 镜像测试、体验 Fedora，同时无需改动硬盘内容。当您满意之后，您可以从 Live 镜像安装 Fedora 到您的硬盘。</p>\n<p>要使用该镜像，您需要可创建或刻录 DVD 的驱动器或者至少跟镜像大小一样的 USB 闪存盘。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://getfedora.org/zh_CN/workstation/download/\">这是官方的下载页面</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"fedora-23-workstation\">\n<h2><a class=\"toc-backref\" href=\"#id8\">Fedora 23 Workstation 系统需求  😂</a></h2>\n<p>这是最低需求啦~</p>\n<blockquote>\n<ul class=\"simple\">\n<li>CPU : 1Ghz 及以上</li>\n<li>内存 : 1GB 及以上 ( 如果汝不需要桌面环境可以少些 ~(&gt;_&lt;~) )</li>\n<li>硬盘空间 : 10GB 或更多的剩余空间</li>\n</ul>\n</blockquote>\n<p>如果汝希望使用硬件加速 3D 图形,汝需要:</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">GMA9xx/GeForce FX5xxx /Radeon 9500 或更新的显卡 _(:з」∠)_ 或者</p>\n</li>\n<li><p class=\"first\">汝的 CPU 支持 SSE2 指令集,这样就可以通过 LLVMpipe 利用 CPU 加速 3D 图形.</p>\n<blockquote>\n<p>看看汝的 <span class=\"tag\">/proc/cpuinfo</span> 的 code:<cite>flags</cite> 一节里有没有 code:<cite>SSE2</cite> 啦~</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</div>\n<div class=\"section\" id=\"windows-iso\">\n<h2><a class=\"toc-backref\" href=\"#id9\">在 Windows 下检查 ISO 的散列值</a></h2>\n<p>1, 从 <a class=\"reference external\" href=\"https://fedoraproject.org/verify\">https://fedoraproject.org/verify</a> 根据选用的映像下载需要的散列值文件,\n并把它们放在一起啦~</p>\n<p>2, 打开 Windows PowerShell.切换到放置映像和散列值文件的文件夹.</p>\n<p>3, 收集计算散列值需要的信息.</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>&gt; <span class=\"nv\">$image</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;此处是汝的 ISO 文件的名称&gt;\"</span></span>\n<span class=\"code-line\">&gt; <span class=\"nv\">$checksum_file</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;此处是汝的 ISO 文件的散列值文件名称&gt;\"</span></span>\n<span class=\"code-line\">&gt; <span class=\"nv\">$sha256</span> <span class=\"o\">=</span> New-Object -TypeName System.Security.Cryptography.sha256CryptoServiceProvider</span>\n<span class=\"code-line\">&gt; <span class=\"nv\">$expected_checksum</span> <span class=\"o\">=</span> <span class=\"o\">((</span>Get-Content <span class=\"nv\">$checksum_file</span> <span class=\"p\">|</span> Select-String -Pattern <span class=\"nv\">$image</span><span class=\"o\">)</span> -split <span class=\"s2\">\" \"</span><span class=\"o\">)[</span><span class=\"m\">0</span><span class=\"o\">]</span>.ToLower<span class=\"o\">()</span></span>\n</pre></div>\n<p>4, 计算 ISO 的散列值,放轻松些 ( 可以去煮杯咖啡~ )</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>&gt; <span class=\"nv\">$download_checksum</span> <span class=\"o\">=</span> <span class=\"o\">[</span>System.BitConverter<span class=\"o\">]</span>::ToString<span class=\"o\">(</span><span class=\"nv\">$sha256</span>.ComputeHash<span class=\"o\">([</span>System.IO.File<span class=\"o\">]</span>::ReadAllBytes<span class=\"o\">(</span><span class=\"s2\">\"</span><span class=\"nv\">$PWD</span><span class=\"s2\">\\$image\"</span><span class=\"o\">)))</span>.ToLower<span class=\"o\">()</span> -replace <span class=\"s1\">'-'</span>, <span class=\"s1\">''</span></span>\n</pre></div>\n<p>5, 然后比较~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>&gt; <span class=\"nb\">echo</span> <span class=\"s2\">\"Download Checksum: </span><span class=\"nv\">$download_checksum</span><span class=\"s2\">\"</span></span>\n<span class=\"code-line\">&gt; <span class=\"nb\">echo</span> <span class=\"s2\">\"Expected Checksum: </span><span class=\"nv\">$expected_checksum</span><span class=\"s2\">\"</span></span>\n<span class=\"code-line\">&gt; <span class=\"k\">if</span> <span class=\"o\">(</span> <span class=\"nv\">$download_checksum</span> -eq <span class=\"s2\">\"</span><span class=\"nv\">$expected_checksum</span><span class=\"s2\">\"</span> <span class=\"o\">)</span> <span class=\"o\">{</span></span>\n<span class=\"code-line\"><span class=\"nb\">echo</span> <span class=\"s2\">\"Checksum test passed!\"</span></span>\n<span class=\"code-line\"><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span></span>\n<span class=\"code-line\"><span class=\"nb\">echo</span> <span class=\"s2\">\"Checksum test failed.\"</span></span>\n<span class=\"code-line\"><span class=\"o\">}</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"mbr-uefi\">\n<h2><a class=\"toc-backref\" href=\"#id10\">区分 MBR 和 UEFI 系统 | ω・`)</a></h2>\n<p>MBR 系统启动安装映像之后大概像这样 _(:з」∠)_</p>\n<img alt=\"MBR 系统启动之后大概像这样\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Installing_Fedora/1.png\">\n<ul class=\"simple\">\n<li>Start Fedora Live : 启动 Fedora 的 Live 环境,可以试用或是进行安装.</li>\n<li>Troubleshooting : 供排解问题使用的额外选项 | ω・`)</li>\n<li>按下 Tab 键可以在启动前修改内核参数 <del>( 然而啥是内核参数咧 😂😂 )</del></li>\n</ul>\n<p>那么 Troubleshooting 都有哪些咧 ?</p>\n<img alt=\"这是疑难解答选项 _(:з」∠)_\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/2.png\">\n<ul class=\"simple\">\n<li>Start Fedora Live in basic graphics mode : 以基本图形 (不启用硬件加速模式) 启动 Fedora 的 Live 环境.</li>\n<li>Test this media &amp; start Fedora Live : 在启动 Fedora 的 Live 环境之前先检查一下安装介质的完整性 Σ( ° △ °|||)</li>\n<li>Run a memory test : 运行内存测试.....</li>\n<li>Boot from local drive : 从本地硬盘启动操作系统.....</li>\n</ul>\n<p>而 UEFI 启动大概像这样 (´・ω・`)</p>\n<img alt=\"UEFI啦~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/26.png\">\n<p>那还等啥? 直接 \"Start Fedora Live\" 啦~</p>\n<img alt=\"准备安装啦~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/3.png\">\n<p>如果汝选择的是 \"Try Fedora\" , 从左侧的 <ruby><rb>Activities</rb><rp>(</rp><rt>活动</rt><rp>)</rp></ruby> 中可以找到安装程序  (╯￣-￣)╯ ┻━┻</p>\n<img alt=\"从左侧的 Activities (活动) 中可以找到安装程序 (╯￣-￣)╯ ┻━┻\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/4.png\">\n<p>就是这里啦~ (用鼠标往左上角推)</p>\n<img alt=\"Install Fedora to disk 在这里啦~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/5.png\">\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id11\">开始安装 (σ≧∀≦)σ</a></h2>\n<p>首先选择安装时使用的语言啦~</p>\n<img alt=\"选择安装时使用的语言\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/6.png\">\n<p>接下来进入安装程序摘要,一般来说只要选择 \"安装位置\" 来调整存储设备就好.</p>\n<img alt=\"安装程序摘要\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/8.png\">\n<hr class=\"docutils\">\n<div class=\"tag info fg-white compound\">\n<p class=\"compound-first\">咱是在 VirtualBox 中演示的安装,汝的屏幕上显示的内容可能和咱的不一样.</p>\n<p class=\"compound-last\">不过还是小心些好~</p>\n</div>\n<hr class=\"docutils\">\n<img alt=\"&quot;准备存储设备&quot;菜单\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/9.png\">\n<p>先从上方选择汝的硬盘,然后选择 \"我要手动配置分区\" ( 毕竟汝不大可能在一块全新的硬盘上安装吧~ ),\n再点击 \"完成\" 进入下一步.</p>\n<img alt=\"&quot;准备存储设备&quot;菜单again~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/10.png\">\n<div class=\"section\" id=\"mbr\">\n<h3><a class=\"toc-backref\" href=\"#id12\">对于 MBR 系统</a></h3>\n<p>至少要有一个根分区 ( <span class=\"tag\">/</span> ) _(:з」∠)_</p>\n<p>点击下面的 + 号图标来创建一个新的分区:</p>\n<blockquote>\n<img alt=\"创建一个新的分区~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/12.png\">\n</blockquote>\n<p>选择挂载点和容量,然后确定.</p>\n</div>\n<div class=\"section\" id=\"uefi\">\n<h3><a class=\"toc-backref\" href=\"#id13\">对于 UEFI 系统</a></h3>\n<p>除了根分区以外还需要一个 EFI 系统分区~</p>\n<img alt=\"UEFI 分区举例\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/28.png\">\n<p>( 咱偷懒用了自动分区 😂😂😂 )</p>\n<hr class=\"docutils\">\n<p>准备好分区后,按 \"完成\" 提交汝的更改呗~</p>\n<img alt=\"提交更改\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/14.png\">\n</div>\n</div>\n<div class=\"section\" id=\"o\">\n<h2><a class=\"toc-backref\" href=\"#id14\">这才是真正的开始安装啦 o(*≧▽≦)ツ</a></h2>\n<p>这时汝会发现最下面的 \"开始安装\" 可以点击了诶~</p>\n<img alt=\"&quot;开始安装&quot; 可以点击了诶~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/17.png\">\n<img alt=\"开始安装\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/18.png\">\n<p>接下来就开始安装啦~ 但是还需要再做两件事 _(:з」∠)_</p>\n<ul>\n<li><p class=\"first\">为 root用户设置密码:</p>\n<blockquote>\n<div class=\"tag success fg-white compound\">\n<p class=\"compound-first\">root 用户和  Windows 中的  Administrator 账户类似,都具有控制整个系统的权限,</p>\n<p class=\"compound-last\">因此汝要设置一个安全的密码并保管好它哟~</p>\n</div>\n</blockquote>\n</li>\n</ul>\n<img alt=\"设置 root 用户的密码\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/19.png\">\n<ul class=\"simple\">\n<li>然而由于 root 的权限太大,所以一般不建议用 root 进行日常操作,下一步就是创建一个普通用户,并为它设置一个密码.</li>\n</ul>\n<img alt=\"创建一个新用户并设置密码\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/20.png\">\n<div class=\"tag info fg-white compound\">\n<p class=\"compound-first\">如果汝选择 \"将此用户设置为管理员\" 那么这个用户就可以通过 <span class=\"tag\">sudo</span> 命令来获得管理员权限.</p>\n<p class=\"compound-last\">( 有点像 Windows 里的用户账户控制 😂😂 )</p>\n</div>\n<p>然后稍等一会儿就好啦~</p>\n<img alt=\"安装完成啦~\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/22.png\">\n</div>\n<div class=\"section\" id=\"fedora\">\n<h2><a class=\"toc-backref\" href=\"#id15\">重启进入新安装的 Fedora</a></h2>\n<p>要从 Live 环境重新启动,点击右上角,再点击电源图标,选择 \"重启\" _(:з」∠)_</p>\n<img alt=\"重启\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/23.png\">\n<p>重启以后就会进入到这个 <ruby><rb>简洁</rb><rp>(</rp><rt>简陋</rt><rp>)</rp></ruby> 的启动选项界面啦~</p>\n<p>一般选第一个 ( 第二个是恢复模式 _(:з」∠)_ )</p>\n<img alt=\"选择启动选项\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/24.png\">\n<p>然后稍候片刻进入登录画面,用汝刚刚创建的用户和密码登录吧~</p>\n<img alt=\"登录界面\" class=\"materialboxed responsive-img\" src=\"/images/Installing_Fedora/25.png\">\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id16\">参考资料</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://docs.fedoraproject.org\">Fedora 文档</a></li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 34,
      "title": " 浅说基于 Linux 内核的操作系统 (4) - 八卦一下软件包管理器",
      "date_published": 1458921600,
      "body": "\n<p>软件包管理器差不多是 Linux 发行版的标准配置了吧~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>软件包管理器差不多是 Linux 发行版的标准配置了吧~</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id6\">软件包和软件包管理器是啥?</a></h2>\n<p>软件包是对于一种软件所进行打包的方式。一般来说一个软件包包含这些内容呐~</p>\n<ul class=\"simple\">\n<li>软件的源代码或可执行文件.</li>\n<li>一些供其它应用 ( 例如软件包管理器 ) 解析的元数据. (例如软件的名称,描述,版本,等等......)</li>\n<li>一组用来执行安装前后事务的脚本.</li>\n</ul>\n<p>而软件包管理器,当然就是来安装/卸载/更新软件包的一组应用程序咯~</p>\n<p>软件包管理器是在电脑中自动安装、配制、卸载和升级软件包的工具组合，\n在各种系统软件和应用软件的安装管理中均有广泛应用。</p>\n<p>一般来说,一个软件包管理器有这样的功能:</p>\n<ul class=\"simple\">\n<li>从软件仓库中查询软件包的信息,并在需要时下载.</li>\n<li>同时处理软件包需要的其它软件 ( 常常称作\"依赖\" )</li>\n<li>验证下载的文件的完整性 ( 例如通过散列值或是数字签名 )</li>\n<li>通过归档工具解开软件包,然后把文件安放到正确的位置上.</li>\n<li>其它方便用户的功能 ( 例如软件包组,自动检查更新等等 )</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">为啥需要个软件包管理器?</a></h2>\n<p>首先大家先来回忆一下在 Windows 里是如何装软件的呗~</p>\n<ul class=\"simple\">\n<li>打开搜索引擎搜索一下</li>\n<li>找到个没被墙的下载网站.....</li>\n<li>从网页上数十个硕大而带有欺骗性的广告的缝隙中找到真正的下载链接.</li>\n<li>然后下载......</li>\n<li>下完以后运行,挑掉一堆勾😂😂,一路下一步直到完成 _(:з」∠)_</li>\n</ul>\n<p>是不是很痛苦? 不过通过软件包管理器,汝就可以把安装软件的过程简化到 \"安装某个软件\" 就可以啦~</p>\n<p>而且大多数软件包管理器都是从特定的软件仓库下载软件包,一般不用担心会夹带私货等问题 o(*￣3￣)o</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">大家经常说的软件源,镜像源是啥?</a></h2>\n<p>软件包管理器会自动上网去下载软件,但他可不是四处瞎找,而是去固定的地方找。</p>\n<p>这个固定的地方有个名字,叫做软件源。那里专门提供各\n种打包好的软件以及相关的信息介绍,供软件包管理器们下载。</p>\n<p>这样的软件源有很多,遍布世界各地,软件包管理器应该去哪个呢?其实他自己也不知道,</p>\n<p>他需要一个列表,一个软件源列表。软件包管理器工作的时候,就会去一个软件源列表记录的地方去下载软件。</p>\n<p>有的人可能离的挺近,去默认的源就很方便,有的人去默认的源可能就很费劲,没准得绕过半个地\n球才行。默认的源不够快,自然就需要找个快一点的源来代替。</p>\n<p>然后世界各地的 Linux 用户们就会去建设不同的镜像源来方便本地的 Linux 用户呐~ ( 例如有爱的崔土豪 <a class=\"reference external\" href=\"/links.html#cuihao\">cuihao</a> ~)</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">典型的软件包管理器的工作方式 _(:з」∠)_</a></h2>\n<p>咱来举个安装软件包的栗子~</p>\n<blockquote>\n<p>用户 : 我想安装foo</p>\n<p>软件包管理器 : 先让咱在软件仓库里找一下 (´・ω・`)</p>\n<p>如果找不到的话,软件包管理器就会告诉用户 \"咱找不到汝说的 foo 软件包呐~\"</p>\n<p>如果找的到的话:</p>\n<blockquote>\n<p>\"咱在软件仓库里找到 foo 了呐~,不过 foo 说要带上它的助手 baz 才会来嘛~</p>\n<p>( 就是说要安装 foo 需要同时安装它的依赖项 baz )</p>\n<p>如果用户同意了的话,软件包管理器就会去软件仓库把 foo 和 baz 带回来\n( 也就是下载这两个软件包 )</p>\n<p>接着软件包管理器会检查下载来的软件包是否和数据库中的描述 (散列值 ) 一致,\n如果相同的话就会开始安装啦~</p>\n</blockquote>\n<p>在安装结束后,软件包管理器一般都会把具体过程写到自己的日记 (日志) 里方便以后使用呗~</p>\n</blockquote>\n<p>当然啦,不同的软件包管理器有不同的表现呐~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id10\">几种常见的软件包管理器 (及其前端)</a></h2>\n<div class=\"section\" id=\"dpkg-debian-package-manager-debian\">\n<h3><a class=\"toc-backref\" href=\"#id11\">dpkg ( Debian Package Manager, Debian 软件包管理器 )</a></h3>\n<p>dpkg是Debian软件包管理器的基础，它被伊恩·默多克创建于1993年。\n用于安装、卸载和供给和.deb软件包相关的信息。</p>\n<p>dpkg本身是一个底层的工具。上层的工具，像是APT，被用于从远程获取软件包以及处理复杂的软件包关系。</p>\n<p>apt-get / apt / aptitude 和 Synaptic (新立得软件包管理器) 是流行的 dpkg 前端.</p>\n<p>基于 Debian 的发行版 (例如 Ubuntu 和 Linux Mint ) 也采用 dpkg 作为包管理器.</p>\n</div>\n<div class=\"section\" id=\"rpm-the-rpm-package-manager-rpm\">\n<h3><a class=\"toc-backref\" href=\"#id12\">RPM ( The RPM Package Manager,RPM 包管理器)</a></h3>\n<p>RPM包管理员（简称RPM，全称为The RPM Package Manager）是在Linux下广泛使用的软件包管理器。</p>\n<p>RPM此名词可能是指.rpm的文件格式的软件包，也可能是指其本身的软件包管理器(RPM Package Manager)。</p>\n<p>最早由Red Hat研制，现在也由开源社区开发。RPM通常随附于Linux发行版，但也有单独将RPM作为应用软件发行的发行版（例如Gentoo）</p>\n<p>不过和 dpkg 不一样的是使用 RPM 的 Linux 发行版都喜欢自己造轮子呐~</p>\n<ul>\n<li><p class=\"first\">Yum（Yellow dog Updater, Modified）,最常见的 RPM 前端.</p>\n<blockquote>\n<p>由Duke University团队，修改Yellow Dog Linux的Yellow Dog Updater开发而成.\nYellow Dog Linux本身，Fedora (22 以前)、Red Hat Enterprise Linux,和 CentOS 都在使用它作为前端.</p>\n</blockquote>\n</li>\n<li><p class=\"first\">DNF，全称Dandified Yum，是RPM发行版的软件包管理器 Yellowdog Updater, Modified（yum）的下一代版本。Fedora 22 开始成为默认的 RPM 前端.</p>\n</li>\n<li><p class=\"first\">ZYpp （或称 libzypp ） 是一个软件包管理引擎，通常在 openSUSE/SUS E以 YaST 、Zypper 为前端使用。不像其他的软件包管理器，它提供一个强力的可满足性求解器来计算软件包相依性，也提供了一组方便的软件包管理API.它是一个由 Novell 所赞助的开放源代码且为自由软件的项目，采用GNU通用公共许可证第二版或更新授权。</p>\n</li>\n<li><p class=\"first\">urpmi 是 Mageia/Mandriva Linux 及其派生发行版的软件包管理系统，它解决了RPM包管理员容易让用户经常遇到相依性地狱的问题,也可以从官方或非官方的来源获得软件包.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"pacman\">\n<h3><a class=\"toc-backref\" href=\"#id13\">pacman</a></h3>\n<p>pacman软件包管理器是 Arch Linux 的一大亮点。它将一个简单的二进制包格式和易用的构建系统结合了起来。\n不管软件包是来自官方的 Arch 库还是用户自己创建，pacman 都能方便得管理。</p>\n<p>pacman 通过和主服务器同步软件包列表来进行系统更新，\n这使得注重安全的系统管理员的维护工作成为轻而易举的事情。</p>\n<p>这种服务器/客户端模式可以使用一条命令就下载/安装软件包，同时安装必需的依赖包。\npacman 用 C 语言编写，使用 .pkg.tar.xz 打包格式。</p>\n<p>Arch Linux 和 基于 Arch Linux 的发行版使用 pacman 作为软件包管理器.</p>\n<p>( 最早 pacman 既是前端又是后端,后来为了方便 pacman 和其它程序协作,分离出 libalpm 作为后端 )</p>\n<p>作为现 Arch Linux 用户，自然要挺一下 Pacman 啦~ ,这里贴出 Arch Linux Trust User <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a>\n在知乎上的一篇回答呗~</p>\n<p><a class=\"reference external\" href=\"https://www.zhihu.com/question/40297380/answer/85848637\">为什么说Arch Linux的pacman包管理系统更先进？相比与apt或rpm等好在哪里呢? - fc farseer 的回答 - 知乎</a></p>\n</div>\n<div class=\"section\" id=\"portage\">\n<h3><a class=\"toc-backref\" href=\"#id14\">Portage</a></h3>\n<p>Portage是Gentoo Linux所使用的包管理器，基于ports collection机制。Portage的高度灵活性令Gentoo独立于操作系统并获得了元发行版的称号。</p>\n<p>Portage主要特色是从源码编译用户所需要安装的软件包。此过程中用户可以调整编译器和目标程序的选项以符合系统需要或自己的喜好。与系统管理相关的功能包括：允许平行版本安装、追踪跨软件包依赖、维护记录已安装软件的数据库、提供本地ebuild库、使本地库与远程库相同步。与个别软件包安装相关的功能有：为目标机器指定编译选项、定制构成软件包的组件。</p>\n<p>只是作为基于源代码的软件包管理器,即时编译很消耗 CPU 和 时间 😂😂😂</p>\n<hr class=\"docutils\">\n<p>由于软件包管理器的命令都不相同,咱接下来的文章中会用到 apt / dnf / pacman 当作例子呗~</p>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Pacman/Rosetta\">ArchWiki 上的 Pacman/Rosetta 页面</a> 有几种常见的软件包管理器的命令比较呗~</p>\n<p>按照汝的发行版学习一些基本的操作吧 （下次咱要说啥咧？）</p>\n</div>\n</div>\n\n  </div>"
    },
    {
      "post_id": 33,
      "title": " 在 Windows 中写 C 程序",
      "date_published": 1465747200,
      "body": "\n<p>说着说着一个学年就要过去了啦~</p>\n<p>要说这半年（现在不是六月了么）印象最深刻的是啥，就是帮忙解决了身边不少同学的相同的问题……</p>\n<p><del>--farseerfc 果然是先知啊（雾</del></p>\n<p>好了玩笑开完了（再纠结这个的话要不要亲自体验一下？😋）。其实就是因为这学期的 C 语言课，然后就栽在用啥写程序这个问题上了……</p>\n<p>然而那些搞得咱想 <ruby><rb>**</rb><rp>(</rp><rt>😋</rt><rp>)</rp></ruby> 的老师竟然还在用 VC6?? 对，就是那个老掉牙的而且在 Windows 7 以后的系统不好装的 Visual C++ 6 (╯^﹏^)╯ ┻━┻</p>\n<p>所以在 <ruby><rb>问的不耐烦</rb><rp>(</rp><rt>实在吃不下</rt><rp>)</rp></ruby> 之后，咱决定写点啥了……</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>说着说着一个学年就要过去了啦~</p>\n<p>要说这半年（现在不是六月了么）印象最深刻的是啥，就是帮忙解决了身边不少同学的相同的问题……</p>\n\n<p><del>--farseerfc 果然是先知啊（雾</del></p>\n<blockquote>\n<p>ヨイツの賢狼ホロ 😋, [11.06.16 20:43]\n😂😂</p>\n<p>ヨイツの賢狼ホロ 😋, [11.06.16 20:43]\n/me 刚刚解决了些问题👍</p>\n<p>ヨイツの賢狼ホロ 😋, [11.06.16 20:44]\n解决了些社团同学的问题😂</p>\n<p>farseerfc 😂, [11.06.16 20:44]\n[In reply to ヨイツの賢狼ホロ 😋]\n感覺牙縫裡還夾著頭髮（</p>\n<p>ヨイツの賢狼ホロ 😋, [11.06.16 20:44]\n[In reply to farseerfc 😂]\n😂啥</p>\n<p>莉莉艾塔·K·A (Лилы-Айта К.А.) , [11.06.16 20:44]\n[In reply to farseerfc 😂]\n?!</p>\n<p>farseerfc 😂, [11.06.16 20:44]\n[In reply to ヨイツの賢狼ホロ 😋]\n一些骨頭在萌狼肚子裡（解決</p>\n<p>ヨイツの賢狼ホロ 😋, [11.06.16 20:45]\n😂</p>\n<p>Felix Yan, [11.06.16 20:45]\n太可怕了</p>\n<p>Felix Yan, [11.06.16 20:45]\n狼最近食欲很好啊</p>\n</blockquote>\n<p>好了玩笑开完了（再纠结这个的话要不要亲自体验一下？😋）。其实就是因为这学期的 C 语言课，然后就栽在用啥写程序这个问题上了……</p>\n<p>然而那些搞得咱想 <ruby><rb>**</rb><rp>(</rp><rt>😋</rt><rp>)</rp></ruby> 的老师竟然还在用 VC6?? 对，就是那个老掉牙的而且在 Windows 7 以后的系统不好装的 Visual C++ 6 (╯^﹏^)╯ ┻━┻</p>\n<p>所以在 <ruby><rb>问的不耐烦</rb><rp>(</rp><rt>实在吃不下</rt><rp>)</rp></ruby> 之后，咱决定写点啥了……</p>\n<div class=\"section\" id=\"linux\">\n<h2><a class=\"toc-backref\" href=\"#id3\">最简单的方法：换 Linux 啦~</a></h2>\n<blockquote>\n此处 Linux = 基于 Linux 内核的操作系统 😂</blockquote>\n<p>确实 Linux 上写 C 程序更方便些啦~</p>\n<ul class=\"simple\">\n<li>大多数的 Linux 发行版上都带有 GCC (啥?汝不会连 GCC 都不知道是啥吧 , <a class=\"reference external\" href=\"https://zhwp.org/GCC\">赶紧补习一下吧~</a></li>\n<li>可能还会有手册页,包括标准库的大多数内容.</li>\n<li>另外,如果想继续深入学习的话,Linux 应该也算一门技能吧......</li>\n</ul>\n<p>然而:</p>\n<ul class=\"simple\">\n<li>Linux 是个操作系统,这就注定了汝可能要花好长的时间先去学习如何使用这个操作系统😂</li>\n<li>......</li>\n</ul>\n<p>所以咧?</p>\n<p>如果汝有心情在这一领域深入下去 (而不是为了通过考试) ,可以尝试一下~ 😋</p>\n</div>\n<div class=\"section\" id=\"windows-unix\">\n<h2><a class=\"toc-backref\" href=\"#id4\">或者在 Windows 上搭建一个类 Unix 子系统？</a></h2>\n<p>最适合觉得装在真机或者虚拟机上太麻烦的人啦~</p>\n<p>类 Unix 子系统其实就是运行在 Windows 上的一个程序啦~ 它用来提供POSIX系统调用的API，\n这样在 Linux 等类 Unix 系统上写成的程序就可以通过重新编译来在 Windows 下运行啦~</p>\n<p>目前名气最大的类 Unix 子系统有两个，分别是 <a class=\"reference external\" href=\"https://cygwin.com/\">Cygwin</a> 和 <a class=\"reference external\" href=\"https://msys2.github.io/\">MSYS2</a> ,\n如果非要咱钦定一个的话......那一定是 MSYS2 啦,因为有咱喜欢的 pacman 😋</p>\n<p>考虑到长度的关系具体怎么安装咱下次再说吧 (挖坑的节奏......)</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">挑一个合适的集成开发环境？</a></h2>\n<blockquote>\n<p>集成开发环境（Integrated Development Environment，简称IDE）是一种辅助程式开发人员开发软体的应用软体，\n在开发工具内部就可以辅助编写原始码文本、并编译打包成为可用的程序，有些甚至可以设计图形介面。</p>\n<p>IDE通常包括程式语言编辑器、自动构建工具、通常还包括除错器。有些IDE包含编译器／直译器，\n如微软的Microsoft Visual Studio，有些则不包含，如Eclipse、SharpDevelop等，\n这些IDE是通过调用第三方编译器来实现代码的编译工作的。有时IDE还会包含版本控制系统和一些可以设计图形用户界面的工具。\n许多支援物件导向的现代化IDE还包括了类别浏览器、物件检视器、物件结构图。\n虽然目前有一些IDE支援多种程式语言（例如Eclipse、NetBeans、Microsoft Visual Studio），但是一般而言\n，IDE主要还是针对特定的程式语言而量身打造（例如Visual Basic）。</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\">Wikipedia:集成开发环境</a></p>\n</blockquote>\n<p>所以已经有先人想到了这个问题制作了很多(?)的集成开发环境啦~\n然而咱并没用过 (咱都是直接用 Arch Linux 的😏) ,这里列出几个咱见过的集成开发环境.</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://www.programarts.com/cfree_ch/\">C-Free</a> 好像是中国人开发的 IDE,好想要付费的样子 🤔</li>\n<li><a class=\"reference external\" href=\"http://www.codeblocks.org/\">Code::Blocks</a> 跨平台的自由软件。</li>\n<li><a class=\"reference external\" href=\"http://www.bloodshed.net/devcpp.html\">Dev-Cpp</a> 也是跨平台的自由软件. (话说学校的电脑里明明装着 Dev-Cpp 为啥还用 VC6  (╯￣﹏￣)╯ ┻━┻ )</li>\n<li><a class=\"reference external\" href=\"https://www.zhihu.com/question/40929777/answer/90029159\">Visual Studio</a> ,这其实是个大型 IDE，对初学者来讲太重了些。不过最近更新的 Visual Studio 2015 Update 1 加入了 clang 作为编译器的功能，也可以拿来做 C 编译器啦~</li>\n</ul>\n</div>\n<div class=\"section\" id=\"gcc\">\n<h2><a class=\"toc-backref\" href=\"#id6\">GCC+文字编辑器？</a></h2>\n<p>其实上面提到的 IDE 里面一定是有编译器的,多半是GCC😂</p>\n<p>其实 GCC 是有向 Windows 移植的,就是 MinGW 啦:</p>\n<blockquote>\n<p>MinGW（Minimalist GNU for Windows），又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。</p>\n<p>另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展.</p>\n<p>---- <a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/MinGW\">Wikipedia:MinGW</a></p>\n</blockquote>\n<p>实际应用上咧，多半会有已经打包好的 MinGW，可以帮助汝快速的准备工作啦~，例如 <a class=\"reference external\" href=\"https://www.zhihu.com/question/40929777/answer/90015056\">tdm-gcc</a></p>\n<p>然后就是找个合适的文字编辑器啦~ 无论是 <a class=\"reference external\" href=\"https://atom.io\">Atom</a> ,\n<a class=\"reference external\" href=\"https://www.visualstudio.com/products/code-vs\">Visual Studio Code</a> ,\n或者 <a class=\"reference external\" href=\"https://notepad-plus-plus.org/\">Notepad++</a> 等等，挑一个自己顺手的就行啦~</p>\n<hr class=\"docutils\">\n<p>好吧咱又算 <ruby><rb>抛砖引玉</rb><rp>(</rp><rt>挖坑</rt><rp>)</rp></ruby> 了一次 😂😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 32,
      "title": " 入手 Surface Book",
      "date_published": 1463068800,
      "body": "\n<p><del>这可不是oo什么的......</del> 😂😂</p>\n<p>简单说就是咱搞了台 Surface Book 回来 (不是顶配所以不要说咱土豪啦😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p><del>这可不是oo什么的......</del> 😂😂</p>\n<p>简单说就是咱搞了台 Surface Book 回来 (不是顶配所以不要说咱土豪啦😂😂</p>\n\n<div class=\"section\" id=\"windows\">\n<h2><a class=\"toc-backref\" href=\"#id2\">搞 Windows _(:з」∠)_</a></h2>\n<ul class=\"simple\">\n<li>升级到了最新的预览版 ( 用 Microsoft 账户登录就好)</li>\n<li>装了 Office 2016 (汝会明白为啥的😏</li>\n<li>把 osu! 复制到了 Surface Book 上 (用 Surface Pen 玩 osu! 的感觉真是酸爽😏</li>\n</ul>\n<p>当然作为 Arch Linux 用户怎么不会去装 Arch Linux 呐?</p>\n<ul>\n<li><p class=\"first\">于是和 <a class=\"reference external\" href=\"https://blog.yoitsu.moe/linux/linux_newbie_mixboot.html\">上篇文章</a> 一样,用 Windows 内置的磁盘管理收缩了一个空闲分区出来. &lt;(ノ=﹁\"﹁=)ノ┻━┻</p>\n</li>\n<li><p class=\"first\">因为懒得用 hashtool 给内核签名,于是咱直接关了安全启动:</p>\n<blockquote>\n<p>开机时按住音量加键和电源键进入 Sueface UEFI,在 \"Security\" 一节里把 \"Secure Boot\" 设置成 \"Disabled\" 就好.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"arch-linux\">\n<h2><a class=\"toc-backref\" href=\"#id3\">装 Arch Linux ~(&gt;_&lt;~)</a></h2>\n<p>因为咱原来有个装着 Arch Linux 的移动硬盘,所以咱就计划直接把移动硬盘上的 Arch Linux 复制到 Surface Book 上.</p>\n<p>但是因为 Linux 里其实是有些虚拟文件系统 ( 例如 <span class=\"tag\">/dev</span> , <span class=\"tag\">/proc</span> 一类的 ),\n所以只好先用另一个 Arch Linux 的 Live ISO 启动 (╯￣皿￣)╯ ┻━┻</p>\n<blockquote>\n截至咱写这篇文章的时候, Arch ISO 里的内核 ( 像是4.4? ) 没法驱动 Surface Book 的键盘底座,所以坠吼搞一个 USB 键盘 😂</blockquote>\n<ul class=\"simple\">\n<li>首先按照 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Beginners%27_guide\">ArchWiki 的 Beginning Guide</a> ,把刚刚分配出来的空闲空间新建一个分区.</li>\n<li>然后把原来的 Arch Linux 分区和新的分区挂载到两个位置 (假设源分区是 <span class=\"tag\">/mnt</span> ,目标分区是 <span class=\"tag\">/target</span> )</li>\n<li>接下来用 rsync 来同步内容:</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># rsync的 -a 参数表示 \"归档\" 选项.</span></span>\n<span class=\"code-line\"><span class=\"c1\"># -A 是保留 :ruby:`ACL|访问控制列表`</span></span>\n<span class=\"code-line\"><span class=\"c1\"># -X 是保留扩展属性</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\"># rsync -aAX /mnt/ /target</span></span>\n</pre></div>\n<ul class=\"simple\">\n<li>然后如果有需要,参照 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Installation_guide\">Installation Guide</a> 调整一下其他的参数.</li>\n<li>后来从 AUR 编译了 <a href=\"https://aur.archlinux.org/packages/?O=0&amp;K=linux-surfacepro3\" title=\"在 AUR 上搜索linux-surfacepro3\">linux-surfacepro3&nbsp;<sup>AUR</sup>&nbsp;</a> 内核,键盘和触控板就可以用了. 😶</li>\n</ul>\n<p>最后上一张图 😂</p>\n<img alt=\"最后上一张图\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/surfacebook.jpg\">\n</div>\n\n  </div>"
    },
    {
      "post_id": 31,
      "title": " 浅说基于 Linux 内核的操作系统 (7) - 双系统 Tips & Tricks",
      "date_published": 1462723200,
      "body": "\n<p>终于决定跳出虚拟机啦~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>终于决定跳出虚拟机啦~</p>\n\n<div class=\"section\" id=\"linux\">\n<h2><a class=\"toc-backref\" href=\"#id6\">到底是啥原因让汝决定在自己的电脑上装 Linux 咧?</a></h2>\n<p>简单来说有下面两点:</p>\n<ul class=\"simple\">\n<li>虚拟机的性能不足 <del>(卡卡的很贴心)</del></li>\n<li>认为自己积累了一定的经验,希望再向前一步呗~</li>\n</ul>\n</div>\n<div class=\"section\" id=\"act-1-bios-uefi\">\n<h2><a class=\"toc-backref\" href=\"#id7\">Act 1:该知道汝的电脑是 BIOS 还是 UEFI 启动了呗~</a></h2>\n<p>如果不知道的话,😋</p>\n<ul class=\"simple\">\n<li>首先打开设置 ( Windows 8/8.1 叫做 \"电脑设置\"),然后通过 \"更新和恢复\" -&gt; \"恢复\" -&gt; \"高级启动\" 重启电脑.</li>\n</ul>\n<p>如果是 UEFI 启动的话,大概是这个样子:</p>\n<img alt=\"UEFI 系统启动之后大概像这样\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Linux_mixboot/0.png\">\n<p>没错就是有个 \"使用设备\" 的选项 😂</p>\n</div>\n<div class=\"section\" id=\"act-2\">\n<h2><a class=\"toc-backref\" href=\"#id8\">Act 2:在硬盘上准备一块空闲空间</a></h2>\n<p>不然要把 Linux 装到哪里去呐？</p>\n<p>这里拿来演示的是 Windows 7 以后都自带的 “磁盘管理” 程序，应该能解决大多数问题 _(:з」∠)_</p>\n<ul class=\"simple\">\n<li>Windows 8 以后的系统可以通过按下 Windows + X 的菜单里找到 “磁盘管理”</li>\n</ul>\n<img alt=\"磁盘管理在这~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/1.png\">\n<ul class=\"simple\">\n<li>嗯，大概就是这样子的呗 (虽然具体的磁盘分区可能和咱的不一样)</li>\n</ul>\n<img alt=\"大概长这样~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/2.png\">\n<ul class=\"simple\">\n<li>汝哪个硬盘分区比较空闲? 右键点击它,有一个\"压缩卷的选项\"</li>\n</ul>\n<img alt=\"”压缩卷“ 在这~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/3.png\">\n<ul class=\"simple\">\n<li>输入压缩的大小 _(:з」∠)_</li>\n</ul>\n<img alt=\"多少\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/4.png\">\n<ul class=\"simple\">\n<li>然后就多了一块未分配的空间 😂</li>\n</ul>\n<img alt=\"多了一块未分配的空间\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/5.png\">\n<p>如果汝的硬盘分区有些刁钻而磁盘管理没法解决的话，AOMEI 家的分区助手不错， <a class=\"reference external\" href=\"http://disktool.cn\">这是官方网站</a> ,\n<a class=\"reference external\" href=\"http://disktool.cn/jiaocheng/index.html\">这是分区教程</a></p>\n</div>\n<div class=\"section\" id=\"act-3\">\n<h2><a class=\"toc-backref\" href=\"#id9\">Act 3:准备安装介质</a></h2>\n<p>其实基本上用的都是 U盘啦~</p>\n<p>于是继续推荐编程随想的\n<a class=\"reference external\" href=\"https://program-think.blogspot.com/2013/12/create-bootable-usb-stick-from-iso.html\">如何用 ISO 镜像制作 U 盘安装盘（通用方法、无需 WinPE）</a></p>\n<p><del>啥时候咱自己写一篇类似的......</del> 😂😂</p>\n</div>\n<div class=\"section\" id=\"act-4-uefi\">\n<h2><a class=\"toc-backref\" href=\"#id10\">Act 4:(UEFI 专属环节 (雾)) 关掉安全启动</a></h2>\n<div class=\"section\" id=\"id3\">\n<h3><a class=\"toc-backref\" href=\"#id11\">啥是安全启动? 为啥要关掉咧?</a></h3>\n<blockquote>\n<p>安全启动是一个由电脑行业的成员开发的安全标准，它有助于确保仅使用受制造商信任的软件启动你的电脑。</p>\n<p>当电脑启动时，固件会检查每个启动软件的数字签名，包括固件驱动器（选项 ROM）和操作系统。如果签名正常，则电脑启动，而且固件会将控制权交给操作系统。</p>\n</blockquote>\n<p>然而默认情况下预装 Windows 的电脑中只会默认带有 Microsoft 的签名,而不是所有的 Linux 发行版都有能力获得签名的 Pia!&lt;(=ｏ ‵-′)ノ☆</p>\n<p>所以就要关掉啦~ 😂😂</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h3><a class=\"toc-backref\" href=\"#id12\">那么怎么关咧?</a></h3>\n<p>不过各种硬件实在是太多啦,咱实在是没法一一列举嘛~</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://technet.microsoft.com/zh-cn/library/dn481258.aspx\">Microsoft 提供的概述</a></li>\n<li>对于预装 Windows 的电脑,最好去看看生产商的支持网站.</li>\n<li>或者可以 Google 一下 ~(&gt;_&lt;~)</li>\n</ul>\n<hr class=\"docutils\">\n<p>然后就是开始安装啦~如果遇到问题的话,先学习一下\n<a class=\"reference external\" href=\"https://github.com/FredWe/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\">提问的智慧</a> ,\n然后去汝安装的发行版的支持论坛问问呗~</p>\n</div>\n</div>\n\n  </div>"
    },
    {
      "post_id": 30,
      "title": " 给 GNU/Linux 萌新的 Arch Linux 安装指南",
      "date_published": 1477584000,
      "body": "\n<p>给彻头彻尾的 GNU/Linux 新手的 Arch Linux 安装指南 😣</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>给彻头彻尾的 GNU/Linux 新手的 Arch Linux 安装指南 😣</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id19\">为啥要搞这个？</a></h2>\n<p>因为 ArchWiki 上的 Beginner Guide 已经和 Installation Guide 合成一个啦😂，然后有小白开始抱怨看不懂啦（误 (╯・∧・)╯ ┻━┻</p>\n<p><del>其实咱最早看的也是 Beginner Guide ……</del></p>\n<p>算了概念用到时再解释 😂</p>\n<blockquote>\n<p>我是一个彻头彻尾的Linux新手，我应该用Arch吗？</p>\n<p>如果你是新手，要使用 Arch 就必须愿意花时间学习新系统，接受 Arch 是一个 DIY 的系统，每个用户都是自己系统的组建者。</p>\n<p>在开始问任何问题之前，自己先通过Google、Wiki或者论坛进行搜索。我们为你创建了这些资源并让你可以随时访问，上千志愿者为你提供了大量的信息资源。</p>\n<p>推荐阅读: <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Arch_terminology#RTFM\">Arch terminology#RTFM</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id20\">备份……</a></h2>\n<p>万一手抖格错了盘别抱怨 Linux ……</p>\n</div>\n<div class=\"section\" id=\"iso\">\n<h2><a class=\"toc-backref\" href=\"#id21\">下载 ISO</a></h2>\n<p><a class=\"reference external\" href=\"https://www.archlinux.org/download/\">https://www.archlinux.org/download/</a></p>\n<p>BT 种子和磁力链接在上面，直接下载的话往下拉，找 China 下面的镜像网站挑一个下载就好。 (っ╹ ◡ ╹ )っ</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id22\">确定启动类型</a></h2>\n<ul class=\"simple\">\n<li>首先打开设置 ( Windows 8/8.1 叫做 \"电脑设置\"),然后通过 \"更新和恢复\" -&gt; \"恢复\" -&gt; \"高级启动\" 重启电脑.</li>\n</ul>\n<p>如果是 UEFI 启动的话,大概是这个样子:</p>\n<img alt=\"UEFI 系统启动之后大概像这样\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Linux_mixboot/0.png\">\n<p>没错就是有个 \"使用设备\" 的选项 😂</p>\n<ul class=\"simple\">\n<li>或者同时按下键盘上的 Windows 徽标键（就是有 Windows 标志那个） 和 R 键，会打开“运行” 对话框。</li>\n</ul>\n<img alt=\"“运行”对话框\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/1.png\">\n<p>在里面输入 <span class=\"tag\">msinfo32</span> 然后回车（按 Enter 键）确认，打开”系统信息”应用。</p>\n<img alt=\"“系统信息”窗口\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/2.png\">\n<p>看“BIOS模式”里是不是 UEFI 😂😂，还有下面那个 “安全启动状态”是不是“以关闭”（咱这台电脑的 UEFI 太旧所以显示的是不支持）</p>\n<p>如果安全启动是打开的还需要自己进 UEFI 固件设置里手动关闭 😂</p>\n<blockquote>\n具体怎么关因为每种电脑的方法不一样于是汝要自己 STFW (Search the f**king Web，搜索一下) 了😂</blockquote>\n<ul class=\"simple\">\n<li>再或者打开磁盘管理（Windows 8 以后的系统可以通过按下 Windows + X 的菜单里找到 “磁盘管理”）</li>\n</ul>\n<img alt=\"磁盘管理在这~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/1.png\">\n<p>嗯，大概就是这样子的呗 (虽然具体的磁盘分区可能和咱的不一样)</p>\n<img alt=\"大概长这样~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/2.png\">\n<p>看汝的硬盘上有没有一个 EFI 系统分区 😂😂😂</p>\n<hr class=\"docutils\">\n<p>还是搞不懂的下面也不用看了，准备下最后的晚餐吧 😋 （误</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id23\">在硬盘上准备一块空闲空间</a></h2>\n<p>不然要把 Linux 装到哪里去呐？</p>\n<p>这里拿来演示的是 Windows 7 以后都自带的 “磁盘管理” 程序，应该能解决大多数问题 _(:з」∠)_</p>\n<ul class=\"simple\">\n<li>Windows 8 以后的系统可以通过按下 Windows + X 的菜单里找到 “磁盘管理”</li>\n</ul>\n<img alt=\"磁盘管理在这~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/1.png\">\n<ul class=\"simple\">\n<li>嗯，大概就是这样子的呗 (虽然具体的磁盘分区可能和咱的不一样)</li>\n</ul>\n<img alt=\"大概长这样~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/2.png\">\n<ul class=\"simple\">\n<li>汝哪个硬盘分区比较空闲? 右键点击它,有一个\"压缩卷的选项\"</li>\n</ul>\n<img alt=\"”压缩卷“ 在这~\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/3.png\">\n<ul class=\"simple\">\n<li>输入压缩的大小 _(:з」∠)_</li>\n</ul>\n<img alt=\"多少\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/4.png\">\n<ul class=\"simple\">\n<li>然后就多了一块未分配的空间 😂</li>\n</ul>\n<img alt=\"多了一块未分配的空间\" class=\"materialboxed responsive-img\" src=\"/images/Linux_mixboot/5.png\">\n<p>如果汝的硬盘分区有些刁钻而磁盘管理没法解决的话，AOMEI 家的分区助手不错， <a class=\"reference external\" href=\"http://disktool.cn\">这是官方网站</a> ,\n<a class=\"reference external\" href=\"http://disktool.cn/jiaocheng/index.html\">这是分区教程</a></p>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id24\">制作启动盘</a></h2>\n<p>但前提是汝的电脑能从 U 盘启动 😂 （不过最近几年生产的电脑都应该可以了吧……</p>\n<p>Windows 下咱比较推荐一个叫 rufus 的软件，<a class=\"reference external\" href=\"https://rufus.akeo.ie/\">官方网站在这</a></p>\n<p>下载完以后双击运行，需要管理员权限，记得看有没有数字签名。（有数字签名时用户账户控制的对话框是蓝色的）</p>\n<p>Rufus 自带多国语言（当然也包括中文啦），如果汝系统语言不是中文的话，点击那个地球图标就可以修改语言了啦~</p>\n<img alt=\"选择语言\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/3.png\">\n<p>然后戳有点像光盘的按钮选择刚下载好的 ISO 镜像</p>\n<img alt=\"选择映像\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/4.png\">\n<p>然后选择一种启动类型，UEFI 就选最后一个，不是的话就选第一个。</p>\n<img alt=\"选择启动类型\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/5.png\">\n<p>写入方式选推荐的就好 （´＿｀）</p>\n<img alt=\"选择写入方式\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/6.png\">\n<p>确认（要知道汝按下确认以后就没有回头路了，所以记得提前备份 U 盘上的资料 😂）</p>\n<img alt=\"确认\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/7.png\">\n<p>然后坐等完成，完成以后汝的 U 盘卷标应该是 \"ARCH_201610\" 这样的 （后面四位年份和两位月份），不要改成别的，万一不对记得照 ISO 改回来 😂😂</p>\n</div>\n<div class=\"section\" id=\"id9\">\n<h2><a class=\"toc-backref\" href=\"#id25\">准备启动</a></h2>\n<p>重启电脑，然后让电脑从 U 盘启动。</p>\n<blockquote>\n具体怎么搞还是要看电脑的硬件啦 😂</blockquote>\n<ul class=\"simple\">\n<li>MBR 成功启动以后像这样</li>\n</ul>\n<img alt=\"MBR\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/8.png\">\n<p>选第一项。😂 （除了 CPU 不支持的都应该用x86_64 😋）</p>\n<ul class=\"simple\">\n<li>UEFI 成功启动以后像这样</li>\n</ul>\n<img alt=\"UEFI\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/9.png\">\n<p>还是选第一项。😂</p>\n<p>然后等待一会以后会出现……</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\">#</span></span>\n</pre></div>\n<p>这就表示已经启动完毕啦  ~(&gt;_&lt;~)</p>\n<blockquote>\n<p>root是用戶名，前面那個數字是上一個命令的exit status啦，如果正常結束的命令exit status是0，就不會顯示出來，你有 1 2 127 這種都是某種東西報錯了.</p>\n<p>----现任 Arch Linux TU 之一的 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 在 <a class=\"reference external\" href=\"https://www.zhihu.com/question/45329752/answer/98733823\">https://www.zhihu.com/question/45329752/answer/98733823</a> 中写到……</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id10\">\n<h2><a class=\"toc-backref\" href=\"#id26\">联网</a></h2>\n<p>首先当然是联网啦，如果是自动获取 IP 地址的有线网络，那么应该啥也不用做，ping 一下试试？</p>\n<blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># ping archlinux.org</span></span>\n</pre></div>\n</blockquote>\n<p>（把电脑用网线接到家里的路由器上就有相同的效果）</p>\n<p>如果没网的话…… 😂</p>\n<hr class=\"docutils\">\n<ul class=\"simple\">\n<li>先用 <span class=\"tag\">ip link</span> 确定一下网卡</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># ip link</span></span>\n<span class=\"code-line\"><span class=\"m\">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class=\"m\">65536</span> qdisc noqueue state UNKNOWN mode DEFAULT group default qlen <span class=\"m\">1</span></span>\n<span class=\"code-line\">    link/loopback <span class=\"m\">00</span>:00:00:00:00:00 brd <span class=\"m\">00</span>:00:00:00:00:00</span>\n<span class=\"code-line\"><span class=\"m\">2</span>: enp4s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class=\"m\">1500</span> qdisc fq_codel state DOWN mode DEFAULT group default qlen <span class=\"m\">1000</span></span>\n<span class=\"code-line\">    link/ether c8:9c:dc:a8:ab:c3 brd ff:ff:ff:ff:ff:ff</span>\n<span class=\"code-line\"><span class=\"m\">3</span>: wlp0s29u1u1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class=\"m\">1500</span> qdisc mq state UP mode DORMANT group default qlen <span class=\"m\">1000</span></span>\n<span class=\"code-line\">    link/ether <span class=\"m\">44</span>:94:fc:0f:63:b9 brd ff:ff:ff:ff:ff:ff</span>\n</pre></div>\n<p>这个例子里，lo 是本地环回不用管它，enp 开头的是有线网卡，wlp 开头的是无线网卡。</p>\n<p>如果汝明明有无线网卡却没识别的话，有可能汝是某无线网卡厂商受害者😂😂</p>\n<p>这时可以：</p>\n<blockquote>\n<ul class=\"simple\">\n<li>有 Android 手机的话，手机连 WiFi ，然后用“USB 网络共享”共享给电脑。</li>\n<li>找个 USB 无线网卡插上 😂</li>\n<li>连有线😂😂</li>\n</ul>\n</blockquote>\n<ul class=\"simple\">\n<li>如果有无线网卡的话，试试连接到 WiFi ……</li>\n</ul>\n<p>** 输入 <span class=\"tag\">wifi-menu</span> ,等一下会看到找到的 WiFi 网络的列表</p>\n<img alt=\"WiFi 列表\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/10.png\">\n<p>** 选择一个网络，保存网络配置文件</p>\n<img alt=\"保存配置文件\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/11.png\">\n<p>** 如果有密码的话，输入密码</p>\n<img alt=\"WiFi 密码\" class=\"materialboxed responsive-img\" src=\"/images/Arch_for_newbie/12.png\">\n<p>** 然后按 Enter 确认，连到 WiFi 的话会返回 Shell。</p>\n<p>谁叫 Arch 连不上网的话都装不了 😂</p>\n</div>\n<div class=\"section\" id=\"id11\">\n<h2><a class=\"toc-backref\" href=\"#id27\">时间同步</a></h2>\n<p>用 <span class=\"tag\">timedatectl set-ntp true</span> 保证时间同步 。</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># timedatectl set-ntp true</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\"># timedatectl status</span></span>\n<span class=\"code-line\">    Local time: Fri <span class=\"m\">2016</span>-10-28 <span class=\"m\">17</span>:39:42 UTC</span>\n<span class=\"code-line\">Universal time: Fri <span class=\"m\">2016</span>-10-28 <span class=\"m\">17</span>:39:42 UTC</span>\n<span class=\"code-line\">        RTC time: Fri <span class=\"m\">2016</span>-10-28 <span class=\"m\">17</span>:39:42</span>\n<span class=\"code-line\">    Time zone: UTC <span class=\"o\">(</span>UTC, +0000<span class=\"o\">)</span></span>\n<span class=\"code-line\">Network <span class=\"nb\">time</span> on: yes</span>\n<span class=\"code-line\">NTP synchronized: no</span>\n<span class=\"code-line\">RTC in <span class=\"nb\">local</span> TZ: no</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id12\">\n<h2><a class=\"toc-backref\" href=\"#id28\">准备硬盘空间</a></h2>\n<p>这里用 cgdisk (UEFI)/ cfdisk (MBR) 来给硬盘分区。</p>\n<p>两个看起来差不多所以咱偷会儿懒😂</p>\n<p>首先输入 <span class=\"tag\">lsblk</span> 看看汝的硬盘是哪个设备：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># lsblk</span></span>\n<span class=\"code-line\">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span>\n<span class=\"code-line\">sda      <span class=\"m\">8</span>:0    <span class=\"m\">0</span> <span class=\"m\">463</span>.9G  <span class=\"m\">0</span> disk</span>\n<span class=\"code-line\">├─sda1   <span class=\"m\">8</span>:1    <span class=\"m\">0</span>   512M  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─sda2   <span class=\"m\">8</span>:2    <span class=\"m\">0</span>    16M  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─sda3   <span class=\"m\">8</span>:3    <span class=\"m\">0</span> <span class=\"m\">103</span>.4G  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">└─sda4   <span class=\"m\">8</span>:4    <span class=\"m\">0</span> <span class=\"m\">253</span>.4G  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">sdb      <span class=\"m\">8</span>:16   <span class=\"m\">1</span>   <span class=\"m\">7</span>.5G  <span class=\"m\">0</span> disk</span>\n<span class=\"code-line\">└─sdb1   <span class=\"m\">8</span>:17   <span class=\"m\">1</span>   <span class=\"m\">7</span>.5G  <span class=\"m\">0</span> part /run/archiso/bootmnt</span>\n<span class=\"code-line\">sr0     <span class=\"m\">11</span>:0    <span class=\"m\">1</span>  1024M  <span class=\"m\">0</span> rom</span>\n<span class=\"code-line\">loop0    <span class=\"m\">7</span>:0    <span class=\"m\">0</span> <span class=\"m\">346</span>.1M  <span class=\"m\">1</span> loop /run/archiso/sfs/airootfs</span>\n</pre></div>\n<p>比如咱这里 sda 是咱的硬盘，于是运行 cgdisk 时加上 /dev/sda 这个参数：</p>\n<blockquote>\n/dev 是一个虚拟文件夹（也就是并不在硬盘上），它会把电脑上的设备映射成一个个文件  _(:з」∠)_</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># cgdisk /dev/sda</span></span>\n</pre></div>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>                                            cgdisk <span class=\"m\">1</span>.0.1</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">                                        Disk Drive: /dev/sda</span>\n<span class=\"code-line\">                                    Size: <span class=\"m\">972906545</span>, <span class=\"m\">463</span>.9 GiB</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Part. <span class=\"c1\">#     Size        Partition Type            Partition Name</span></span>\n<span class=\"code-line\">----------------------------------------------------------------</span>\n<span class=\"code-line\">            <span class=\"m\">1007</span>.0 KiB  free space</span>\n<span class=\"code-line\"><span class=\"m\">1</span>           <span class=\"m\">512</span>.0 MiB   EFI System                EFI system partition</span>\n<span class=\"code-line\"><span class=\"m\">2</span>           <span class=\"m\">16</span>.0 MiB    Microsoft reserved        Microsoft reserved partition</span>\n<span class=\"code-line\"><span class=\"m\">3</span>           <span class=\"m\">103</span>.4 GiB   Microsoft basic data      Basic data partition</span>\n<span class=\"code-line\"><span class=\"m\">4</span>           <span class=\"m\">253</span>.4 GiB   Microsoft basic data      Basic data partition</span>\n<span class=\"code-line\">            <span class=\"m\">106</span>.6 GiB   free space</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">    <span class=\"o\">[</span> Align  <span class=\"o\">]</span>  <span class=\"o\">[</span> Backup <span class=\"o\">]</span>  <span class=\"o\">[</span>  Help  <span class=\"o\">]</span>  <span class=\"o\">[</span>  Load  <span class=\"o\">]</span>  <span class=\"o\">[</span>  New   <span class=\"o\">]</span>  <span class=\"o\">[</span>  Quit  <span class=\"o\">]</span>  <span class=\"o\">[</span> Verify <span class=\"o\">]</span>  <span class=\"o\">[</span> Write  <span class=\"o\">]</span></span>\n</pre></div>\n<p>cgdisk 的界面大概像这样啦，用上下方向键把光标移动到汝之前的空闲空间上去（例如咱这里是最后一个）</p>\n<p>新硬盘的话应该只有一个 free space 😂</p>\n<p>用左右方向键把下面一排按钮上的光标移动到 New 上，然后按 Enter。</p>\n<p>（这里看不出光标😂，黑色背景下光标应该是白的吧😂😂）</p>\n<p>接下来会问几个问题（# 开头的是咱加上的注释😂）：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 数字可能和汝看到的不一样😂</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 起始扇区的位置，直接 Enter 就行</span></span>\n<span class=\"code-line\">First sector <span class=\"o\">(</span><span class=\"m\">749424640</span>-972906511, <span class=\"nv\">default</span> <span class=\"o\">=</span> <span class=\"m\">749424640</span><span class=\"o\">)</span>:</span>\n<span class=\"code-line\"><span class=\"c1\"># 大小，可以是扇区数，也可以是实际的大小（例如 100M，20G一类的），要用掉整个剩余空闲空间的话，直接 Enter 就行。</span></span>\n<span class=\"code-line\">Size in sectors or <span class=\"o\">{</span>KMGTP<span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"nv\">default</span> <span class=\"o\">=</span> <span class=\"m\">223481872</span><span class=\"o\">)</span>:</span>\n<span class=\"code-line\"><span class=\"c1\"># 分区类型，默认的就好</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 但是如果要建立新的 EFI 系统分区的话 ，分区类型是 :code:`ef00`</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 但是如果要建立新的 交换空间（就是虚拟内存啦）的话 ，分区类型是 :code:`8200`</span></span>\n<span class=\"code-line\">Current <span class=\"nb\">type</span> is <span class=\"m\">8300</span> <span class=\"o\">(</span>Linux filesystem<span class=\"o\">)</span></span>\n<span class=\"code-line\">Hex code or GUID <span class=\"o\">(</span>L to show codes, <span class=\"nv\">Enter</span> <span class=\"o\">=</span> <span class=\"m\">8300</span><span class=\"o\">)</span>:</span>\n<span class=\"code-line\"><span class=\"c1\"># 设置卷标，不设置也行。</span></span>\n<span class=\"code-line\">Current partition name is <span class=\"s1\">''</span></span>\n<span class=\"code-line\">Enter new partition name, or &lt;Enter&gt; to use the current name:</span>\n</pre></div>\n<p>然后汝应该会发现下面的空闲空间变成 Linux filesystem 了呗~</p>\n<p>要保存分区表的话，用左右方向键把下面一排按钮上的光标移动到 Write 上，然后按 Enter。</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Are you sure you want to write the partition table to disk? <span class=\"o\">(</span>yes or no<span class=\"o\">)</span>:</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">        Warning!! This may destroy data on your disk!</span>\n</pre></div>\n<p>在这里输入 <span class=\"tag\">yes</span> （就是 yes，不是 y Y YES 啥的😂），然后按 Enter。</p>\n<p>然后下面会闪过一行 \"The operation has completed successfully\" ,这时就可以退出了。</p>\n<p>用左右方向键把下面一排按钮上的光标移动到 Quit 上，然后按 Enter。</p>\n<p>然而汝以为这样就结束了？还没格式化呢 (╯°Д°）╯︵/(.□ . )</p>\n</div>\n<div class=\"section\" id=\"id13\">\n<h2><a class=\"toc-backref\" href=\"#id29\">创建文件系统+挂载</a></h2>\n<p>首先还是用 <span class=\"tag\">lsblk</span> 确定一下分区的名称，为了以防万一记得加上 -f 参数：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># lsblk -f</span></span>\n<span class=\"code-line\">NAME   FSTYPE   LABEL       UUID                                 MOUNTPOINT</span>\n<span class=\"code-line\">sda</span>\n<span class=\"code-line\">├─sda1 vfat               3C44-B4ED</span>\n<span class=\"code-line\">├─sda2</span>\n<span class=\"code-line\">├─sda3 ntfs               42E243C5E243BBC3</span>\n<span class=\"code-line\">├─sda4 ntfs   新加卷      58741F29741F0A00</span>\n<span class=\"code-line\">└─sda5</span>\n<span class=\"code-line\">sdb</span>\n<span class=\"code-line\">└─sdb1 vfat   ARCH_201610 EAC8-F012                            /run/archiso/bootmnt</span>\n<span class=\"code-line\">sr0</span>\n<span class=\"code-line\">loop0  squashfs                                                  /run/archiso/sfs/airootfs</span>\n</pre></div>\n<p>第一排分别表示设备名称，文件系统类型，卷标，UUID和挂载点。</p>\n<p>咱这里的话 sda1 那个 vfat 分区就是 EFI 系统分区啦，sda5 就是刚刚新建的分区啦~（因为还没格式化所以没有文件系统😂）</p>\n<p>用 <span class=\"tag\">mkfs.ext4</span> 把那个分区格式化成 ext4 文件系统咯~</p>\n<blockquote>\n记得自己看清楚是哪个分区别格式化错了 😂</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># mkfs.ext4 /dev/sda5</span></span>\n<span class=\"code-line\">mke2fs <span class=\"m\">1</span>.43.3 <span class=\"o\">(</span><span class=\"m\">04</span>-Sep-2016<span class=\"o\">)</span></span>\n<span class=\"code-line\">Creating filesystem with <span class=\"m\">27935234</span> 4k blocks and <span class=\"m\">6987776</span> inodes</span>\n<span class=\"code-line\">Filesystem UUID: a3943e57-6217-4a5f-8e57-ade5771315c0</span>\n<span class=\"code-line\">Superblock backups stored on blocks:</span>\n<span class=\"code-line\">    <span class=\"m\">32768</span>, <span class=\"m\">98304</span>, <span class=\"m\">163840</span>, <span class=\"m\">229376</span>, <span class=\"m\">294912</span>, <span class=\"m\">819200</span>, <span class=\"m\">884736</span>, <span class=\"m\">1605632</span>, <span class=\"m\">2654208</span>,</span>\n<span class=\"code-line\">    <span class=\"m\">4096000</span>, <span class=\"m\">7962624</span>, <span class=\"m\">11239424</span>, <span class=\"m\">20480000</span>, <span class=\"m\">23887872</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Allocating group tables: <span class=\"k\">done</span></span>\n<span class=\"code-line\">Writing inode tables: <span class=\"k\">done</span></span>\n<span class=\"code-line\">Creating journal <span class=\"o\">(</span><span class=\"m\">131072</span> blocks<span class=\"o\">)</span>: <span class=\"k\">done</span></span>\n<span class=\"code-line\">Writing superblocks and filesystem accounting information: <span class=\"k\">done</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\">#</span></span>\n</pre></div>\n<p>等一排文字闪过就格式化完了……</p>\n<blockquote>\n<p>如果要格式化新的 EFI 系统分区的话，用 <span class=\"tag\">mkfs.vfat</span></p>\n<p>如果要格式化新的 交换空间的话，用 <span class=\"tag\">mkswap</span></p>\n</blockquote>\n<p>接下来用 mount 挂载分区啦~ （。＞ω＜）。</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># mount &lt;设备名称&gt; &lt;目标文件夹&gt;</span></span>\n<span class=\"code-line\"><span class=\"c1\"># /mnt 挺合适的</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\"># mount /dev/sda5 /mnt</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 如果要挂载 EFI 系统分区的话，建议挂载到 /mnt/boot</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 所以先建立相应的文件夹</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\"># mkdir /mnt/boot</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\"># mount /dev/sda1 /mnt/boot</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 有交换空间的话不用挂载，用 swapon 命令。</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\"># swapon /dev/sda6</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id14\">\n<h2><a class=\"toc-backref\" href=\"#id30\">选择软件仓库镜像</a></h2>\n<blockquote>\n软件仓库（在Debian系发行版中，又叫做“软件源”）是软件包存储的地方。通常我们所说的软件仓库指在线软件仓库，亦即用户从互联网获取软件的地方。</blockquote>\n<p>用 nano 打开 <span class=\"tag\">/etc/pacman.d/mirrorlist</span></p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># nano /etc/pacman.d/mirrorlist</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">GNU nano <span class=\"m\">2</span>.7.0                        File: /etc/pacman.d/mirrorlist</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">##</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Arch Linux repository mirrorlist</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Sorted by mirror score from mirror status page</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Generated on 2016-10-01</span></span>\n<span class=\"code-line\"><span class=\"c1\">##</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.2, France</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://archlinux.polymorf.fr/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.3, France</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://arch.tamcore.eu/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.3, Germany</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://mirrors.cicku.me/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.3, Czech Republic</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://ftp.sh.cvut.cz/arch/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.3, Germany</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://mirror.js-webcoding.de/pub/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.4, Netherlands</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://ftp.nluug.nl/os/Linux/distr/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\">## Score: 0.4, Poland</span></span>\n<span class=\"code-line\">                                        <span class=\"o\">[</span> Read <span class=\"m\">517</span> lines <span class=\"o\">]</span></span>\n<span class=\"code-line\">^G Get Help    ^O Write Out   ^W Where Is    ^K Cut Text    ^J Justify     ^C Cur Pos     ^Y Prev Page</span>\n<span class=\"code-line\">^X Exit        ^R Read File   ^<span class=\"se\">\\ </span>Replace     ^U Uncut Text  ^T To Spell    ^_ Go To Line  ^V Next Page</span>\n</pre></div>\n<p>这是 GNU nano 的主界面，最简单的方法还是把下面那些 Mirrors 先全删掉然后输入一个新的，\n用光标指向某一行以后同时按下 Ctrl+K 就好。然后自己输入一个 Mirror ，下面给出几个中国国内的 Mirror：</p>\n<p>（所谓的 Ctrl+K 就是这两个键一起按😂）</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 网易</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> http://mirrors.163.com/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 清华大学 TUNA 协会</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 中国科学技术大学</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> https://mirrors.ustc.edu.cn/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 西安交通大学</span></span>\n<span class=\"code-line\"><span class=\"nv\">Server</span> <span class=\"o\">=</span> https://mirrors.xjtu.edu.cn/archlinux/<span class=\"nv\">$repo</span>/os/<span class=\"nv\">$arch</span></span>\n</pre></div>\n<p>输入完以后按下 Ctrl+O 写入，按 Enter 确定，再按 Ctrl+X 退出。</p>\n<p>然后用 <span class=\"tag\">pacman -Syy</span> 刷新一下软件包数据库。</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># pacman -Syy</span></span>\n<span class=\"code-line\">:: Synchronizing package databases...</span>\n<span class=\"code-line\">core                                  <span class=\"m\">120</span>.9 KiB  <span class=\"m\">4</span>.92M/s <span class=\"m\">00</span>:00 <span class=\"o\">[</span><span class=\"c1\">##################################] 100%</span></span>\n<span class=\"code-line\">extra                                <span class=\"m\">1755</span>.6 KiB  <span class=\"m\">5</span>.24M/s <span class=\"m\">00</span>:00 <span class=\"o\">[</span><span class=\"c1\">##################################] 100%</span></span>\n<span class=\"code-line\">community                               <span class=\"m\">3</span>.7 MiB  <span class=\"m\">6</span>.82M/s <span class=\"m\">00</span>:01 <span class=\"o\">[</span><span class=\"c1\">##################################] 100%</span></span>\n<span class=\"code-line\">root@archiso ~ <span class=\"c1\">#</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id15\">\n<h2><a class=\"toc-backref\" href=\"#id31\">安装基本系统</a></h2>\n<p>用 pacstrap 安装基本系统，默认会安装 base 组，要通过 AUR 或者 ABS 编译安装软件包,还需要安装 base-devel 啦：</p>\n<blockquote>\n评论里 farseerfc 提到装几个连接无线网络需要的软件包。(iw dialog wpa_supplicant wpa_actiond)</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># pacstrap /mnt base base-devel iw dialog wpa_supplicant wpa_actiond</span></span>\n</pre></div>\n<p>这个组并没有包含全部 live 环境中的程序，有些需要额外安装，\n<a class=\"reference external\" href=\"https://projects.archlinux.org/archiso.git/tree/configs/releng/packages.both\">packages.both</a>\n页面包含了它们的差异呗~</p>\n<p>其他软件以后会用 pacman 再安装啦~</p>\n<p>安装完以后大概会是这个样子 (´・ω・｀)</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>pacstrap /mnt base base-devel   <span class=\"m\">29</span>.09s user <span class=\"m\">2</span>.61s system <span class=\"m\">85</span>% cpu <span class=\"m\">37</span>.271 total</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"chroot\">\n<h2><a class=\"toc-backref\" href=\"#id32\">准备进入 chroot 环境</a></h2>\n<p>生成 fstab 啦 ~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># genfstab</span></span>\n<span class=\"code-line\">usage: genfstab <span class=\"o\">[</span>options<span class=\"o\">]</span> root</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Options:</span>\n<span class=\"code-line\">    -L             Use labels <span class=\"k\">for</span> <span class=\"nb\">source</span> identifiers <span class=\"o\">(</span>shortcut <span class=\"k\">for</span> -t LABEL<span class=\"o\">)</span></span>\n<span class=\"code-line\">    -p             Exclude pseudofs mounts <span class=\"o\">(</span>default behavior<span class=\"o\">)</span></span>\n<span class=\"code-line\">    -P             Include printing mounts</span>\n<span class=\"code-line\">    -t TAG         Use TAG <span class=\"k\">for</span> <span class=\"nb\">source</span> identifiers</span>\n<span class=\"code-line\">    -U             Use UUIDs <span class=\"k\">for</span> <span class=\"nb\">source</span> identifiers <span class=\"o\">(</span>shortcut <span class=\"k\">for</span> -t UUID<span class=\"o\">)</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">    -h             Print this <span class=\"nb\">help</span> message</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">genfstab generates output suitable <span class=\"k\">for</span> addition to an fstab file based on the</span>\n<span class=\"code-line\">devices mounted under the mountpoint specified by the given root.</span>\n</pre></div>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span></span>\n</pre></div>\n<p>然后向新系统出发~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># arch-chroot -help</span></span>\n<span class=\"code-line\">usage: arch-chroot chroot-dir <span class=\"o\">[</span>command<span class=\"o\">]</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">    -h                  Print this <span class=\"nb\">help</span> message</span>\n<span class=\"code-line\">    -u &lt;user&gt;<span class=\"o\">[</span>:group<span class=\"o\">]</span>   Specify non-root user and optional group to use</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">If <span class=\"s1\">'command'</span> is unspecified, arch-chroot will launch /bin/bash.</span>\n</pre></div>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>root@archiso ~ <span class=\"c1\"># arch-chroot /mnt /bin/bash</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id16\">\n<h2><a class=\"toc-backref\" href=\"#id33\">设置基本系统</a></h2>\n<blockquote>\n# 开头只表示以 root 用户运行，汝不用把 # 输入到终端里啦~</blockquote>\n<ul class=\"simple\">\n<li>设置时区（中国的时区是 Asia/Shanghai）</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># ln -s &lt;源文件&gt; &lt;目标&gt; 创建一个符号链接</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\"># ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span>\n</pre></div>\n<ul class=\"simple\">\n<li>设置时间标准 为 UTC，并调整 时间漂移:</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># hwclock --systohc --utc</span></span>\n</pre></div>\n<ul class=\"simple\">\n<li>/etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，去掉对应行前面的注释符号（＃）就可以啦，还是用 nano 打开，建议选择帶UTF-8的項：</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># nano /etc/locale.gen</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">en_US.UTF-8 UTF-8</span>\n<span class=\"code-line\">zh_CN.UTF-8 UTF-8</span>\n<span class=\"code-line\">zh_TW.UTF-8 UTF-8</span>\n</pre></div>\n<ul class=\"simple\">\n<li>执行 locale-gen 以生成 locale 讯息：</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># locale-gen</span></span>\n</pre></div>\n<ul>\n<li><p class=\"first\">创建 locale.conf 并提交您的本地化选项：</p>\n<blockquote>\n<p>将系统 locale 设置为en_US.UTF-8，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。用户可以设置自己的 locale。</p>\n<p>警告: 不推荐在此设置任何中文locale，或导致tty乱码。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># echo 用来输出某些文字，后面的大于号表示把输出保存到某个文件里啦~</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\"># echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</span></span>\n</pre></div>\n<ul class=\"simple\">\n<li>设置一个喜欢的主机名（用汝的主机名代替 myhostname ）：</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># echo myhostname &gt; /etc/hostname</span></span>\n</pre></div>\n<ul class=\"simple\">\n<li>设置 root 的密码（输入密码的时候就是啥也没有 ╮(￣▽￣)╭ ）：</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>root@archiso /<span class=\"o\">]</span><span class=\"c1\"># passwd</span></span>\n<span class=\"code-line\">New password:</span>\n<span class=\"code-line\">Retype new password:</span>\n<span class=\"code-line\">passwd: password updated successfully</span>\n</pre></div>\n<ul class=\"simple\">\n<li>安装启动管理器（例如 GRUB ）：</li>\n</ul>\n<p>** UEFI 用户先再安装几个必要的软件包咯~</p>\n<blockquote>\n# pacman -S efibootmgr dosfstools</blockquote>\n<p>** 然后安装 GRUB</p>\n<blockquote>\n# pacman -S grub os-prober</blockquote>\n<p>** 把 GRUB 安装到硬盘：</p>\n<blockquote>\n<p># MBR 用户这么做 （记得用汝自己硬盘的名称代替 sda ，不要带上表示分区的数字啦~）：</p>\n<p># grub-install --target=i386-pc /dev/sda --recheck</p>\n<p># UEFI 用户这么做：</p>\n<p># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck</p>\n</blockquote>\n<p>EFI 安装成功以后大概像这样 😂</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>root@archiso /<span class=\"o\">]</span><span class=\"c1\"># grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck</span></span>\n<span class=\"code-line\">Installing <span class=\"k\">for</span> x86_64-efi platform.</span>\n<span class=\"code-line\">Installation finished. No error reported.</span>\n</pre></div>\n<p>然后生成必要的配置文件：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>root@archiso /<span class=\"o\">]</span><span class=\"c1\"># grub-mkconfig -o /boot/grub/grub.cfg</span></span>\n<span class=\"code-line\">Generating grub configuration file ...</span>\n<span class=\"code-line\">Found linux image: /boot/vmlinuz-linux</span>\n<span class=\"code-line\">Found initrd image<span class=\"o\">(</span>s<span class=\"o\">)</span> in /boot: initramfs-linux.img</span>\n<span class=\"code-line\">Found fallback initrd image<span class=\"o\">(</span>s<span class=\"o\">)</span> in /boot: initramfs-linux-fallback.img</span>\n<span class=\"code-line\">WARNING: Failed to connect to lvmetad. Falling back to device scanning.</span>\n<span class=\"code-line\"><span class=\"k\">done</span></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id17\">\n<h2><a class=\"toc-backref\" href=\"#id34\">安装桌面环境 （可能不一定需要）</a></h2>\n<ul class=\"simple\">\n<li>安装桌面环境需要的基础包 （就是 xorg 啦）</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>root@archiso /<span class=\"o\">]</span><span class=\"c1\"># pacman -S xorg</span></span>\n<span class=\"code-line\">:: There are <span class=\"m\">80</span> members in group xorg:</span>\n<span class=\"code-line\">:: Repository extra</span>\n<span class=\"code-line\"><span class=\"m\">1</span><span class=\"o\">)</span> xf86-input-evdev  <span class=\"m\">2</span><span class=\"o\">)</span> xf86-input-joystick  <span class=\"m\">3</span><span class=\"o\">)</span> xf86-input-keyboard  <span class=\"m\">4</span><span class=\"o\">)</span> xf86-input-libinput</span>\n<span class=\"code-line\"><span class=\"m\">5</span><span class=\"o\">)</span> xf86-input-mouse  <span class=\"m\">6</span><span class=\"o\">)</span> xf86-input-synaptics  <span class=\"m\">7</span><span class=\"o\">)</span> xf86-input-vmmouse  <span class=\"m\">8</span><span class=\"o\">)</span> xf86-input-void</span>\n<span class=\"code-line\"><span class=\"m\">9</span><span class=\"o\">)</span> xf86-video-amdgpu  <span class=\"m\">10</span><span class=\"o\">)</span> xf86-video-ark  <span class=\"m\">11</span><span class=\"o\">)</span> xf86-video-ati  <span class=\"m\">12</span><span class=\"o\">)</span> xf86-video-dummy</span>\n<span class=\"code-line\"><span class=\"m\">13</span><span class=\"o\">)</span> xf86-video-fbdev  <span class=\"m\">14</span><span class=\"o\">)</span> xf86-video-glint  <span class=\"m\">15</span><span class=\"o\">)</span> xf86-video-i128  <span class=\"m\">16</span><span class=\"o\">)</span> xf86-video-intel</span>\n<span class=\"code-line\"><span class=\"m\">17</span><span class=\"o\">)</span> xf86-video-mach64  <span class=\"m\">18</span><span class=\"o\">)</span> xf86-video-neomagic  <span class=\"m\">19</span><span class=\"o\">)</span> xf86-video-nouveau  <span class=\"m\">20</span><span class=\"o\">)</span> xf86-video-nv</span>\n<span class=\"code-line\"><span class=\"m\">21</span><span class=\"o\">)</span> xf86-video-openchrome  <span class=\"m\">22</span><span class=\"o\">)</span> xf86-video-r128  <span class=\"m\">23</span><span class=\"o\">)</span> xf86-video-savage  <span class=\"m\">24</span><span class=\"o\">)</span> xf86-video-siliconmotion</span>\n<span class=\"code-line\"><span class=\"m\">25</span><span class=\"o\">)</span> xf86-video-sis  <span class=\"m\">26</span><span class=\"o\">)</span> xf86-video-tdfx  <span class=\"m\">27</span><span class=\"o\">)</span> xf86-video-trident  <span class=\"m\">28</span><span class=\"o\">)</span> xf86-video-vesa</span>\n<span class=\"code-line\"><span class=\"m\">29</span><span class=\"o\">)</span> xf86-video-vmware  <span class=\"m\">30</span><span class=\"o\">)</span> xf86-video-voodoo  <span class=\"m\">31</span><span class=\"o\">)</span> xorg-bdftopcf  <span class=\"m\">32</span><span class=\"o\">)</span> xorg-docs  <span class=\"m\">33</span><span class=\"o\">)</span> xorg-font-util</span>\n<span class=\"code-line\"><span class=\"m\">34</span><span class=\"o\">)</span> xorg-fonts-100dpi  <span class=\"m\">35</span><span class=\"o\">)</span> xorg-fonts-75dpi  <span class=\"m\">36</span><span class=\"o\">)</span> xorg-fonts-encodings  <span class=\"m\">37</span><span class=\"o\">)</span> xorg-iceauth</span>\n<span class=\"code-line\"><span class=\"m\">38</span><span class=\"o\">)</span> xorg-luit  <span class=\"m\">39</span><span class=\"o\">)</span> xorg-mkfontdir  <span class=\"m\">40</span><span class=\"o\">)</span> xorg-mkfontscale  <span class=\"m\">41</span><span class=\"o\">)</span> xorg-server  <span class=\"m\">42</span><span class=\"o\">)</span> xorg-server-common</span>\n<span class=\"code-line\"><span class=\"m\">43</span><span class=\"o\">)</span> xorg-server-devel  <span class=\"m\">44</span><span class=\"o\">)</span> xorg-server-xdmx  <span class=\"m\">45</span><span class=\"o\">)</span> xorg-server-xephyr  <span class=\"m\">46</span><span class=\"o\">)</span> xorg-server-xnest</span>\n<span class=\"code-line\"><span class=\"m\">47</span><span class=\"o\">)</span> xorg-server-xvfb  <span class=\"m\">48</span><span class=\"o\">)</span> xorg-server-xwayland  <span class=\"m\">49</span><span class=\"o\">)</span> xorg-sessreg  <span class=\"m\">50</span><span class=\"o\">)</span> xorg-setxkbmap</span>\n<span class=\"code-line\"><span class=\"m\">51</span><span class=\"o\">)</span> xorg-smproxy  <span class=\"m\">52</span><span class=\"o\">)</span> xorg-x11perf  <span class=\"m\">53</span><span class=\"o\">)</span> xorg-xauth  <span class=\"m\">54</span><span class=\"o\">)</span> xorg-xbacklight  <span class=\"m\">55</span><span class=\"o\">)</span> xorg-xcmsdb</span>\n<span class=\"code-line\"><span class=\"m\">56</span><span class=\"o\">)</span> xorg-xcursorgen  <span class=\"m\">57</span><span class=\"o\">)</span> xorg-xdpyinfo  <span class=\"m\">58</span><span class=\"o\">)</span> xorg-xdriinfo  <span class=\"m\">59</span><span class=\"o\">)</span> xorg-xev  <span class=\"m\">60</span><span class=\"o\">)</span> xorg-xgamma</span>\n<span class=\"code-line\"><span class=\"m\">61</span><span class=\"o\">)</span> xorg-xhost  <span class=\"m\">62</span><span class=\"o\">)</span> xorg-xinput  <span class=\"m\">63</span><span class=\"o\">)</span> xorg-xkbcomp  <span class=\"m\">64</span><span class=\"o\">)</span> xorg-xkbevd  <span class=\"m\">65</span><span class=\"o\">)</span> xorg-xkbutils  <span class=\"m\">66</span><span class=\"o\">)</span> xorg-xkill</span>\n<span class=\"code-line\"><span class=\"m\">67</span><span class=\"o\">)</span> xorg-xlsatoms  <span class=\"m\">68</span><span class=\"o\">)</span> xorg-xlsclients  <span class=\"m\">69</span><span class=\"o\">)</span> xorg-xmodmap  <span class=\"m\">70</span><span class=\"o\">)</span> xorg-xpr  <span class=\"m\">71</span><span class=\"o\">)</span> xorg-xprop</span>\n<span class=\"code-line\"><span class=\"m\">72</span><span class=\"o\">)</span> xorg-xrandr  <span class=\"m\">73</span><span class=\"o\">)</span> xorg-xrdb  <span class=\"m\">74</span><span class=\"o\">)</span> xorg-xrefresh  <span class=\"m\">75</span><span class=\"o\">)</span> xorg-xset  <span class=\"m\">76</span><span class=\"o\">)</span> xorg-xsetroot  <span class=\"m\">77</span><span class=\"o\">)</span> xorg-xvinfo</span>\n<span class=\"code-line\"><span class=\"m\">78</span><span class=\"o\">)</span> xorg-xwd  <span class=\"m\">79</span><span class=\"o\">)</span> xorg-xwininfo  <span class=\"m\">80</span><span class=\"o\">)</span> xorg-xwud</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Enter a selection <span class=\"o\">(</span><span class=\"nv\">default</span><span class=\"o\">=</span>all<span class=\"o\">)</span>:</span>\n</pre></div>\n<p>这时会让汝选择需要哪些软件包啦,其实大多数时候默认的就行……</p>\n<ul>\n<li><p class=\"first\">接下来挑一个喜欢的桌面环境包组装上咯~</p>\n<blockquote>\n<p>（咱这里就只举例 GNOME KDE 和 xfce 啦，其他官方支持的桌面环境可以去\n<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Desktop_environment_(简体中文)\">ArchWiki</a>\n查看）</p>\n<p>GNOME , 想要 GNOME 全家桶的话带上 gnome-extras</p>\n<p># pacman -S gnome</p>\n<p>KDE Plasma , 想要 KDE 全家桶的话用 kde-applications 代替 kde-applications-meta,\n还有中文翻译包：</p>\n<p># pacman -S plasma kde-applications-meta sddm kde-l10n-zh_cn</p>\n<p>或者只安装 Dolphin （文件管理器），Kate（文字编辑器）和Konsole（终端模拟器）</p>\n<p># pacman -S plasma dolphin kate konsole sddm kde-l10n-zh_cn</p>\n<p>xfce4，xfce 不带显示管理器，所以要装个其他的（例如 sddm ）</p>\n<p># pacman -S xfce4 xfce4-goodies sddm</p>\n<p>桌面环境大多数使用 NetworkManager ：</p>\n<p># pacman -S networkmanager</p>\n</blockquote>\n</li>\n<li><p class=\"first\">然后安装中文字体（ 同样 pacman -S  😋）</p>\n<blockquote>\n<p>Google Noto Fonts 系列： noto-fonts noto-fonts-cjk noto-fonts-emoji</p>\n<p>思源黑体：adobe-source-han-sans-otc-fonts</p>\n<p>文泉驿：wqy-microhei wqy-zenhei</p>\n</blockquote>\n</li>\n</ul>\n<p>更多的字体可以在 <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php\">https://wiki.archlinux.org/index.php</a>/Fonts_(简体中文) 找到。</p>\n<ul>\n<li><p class=\"first\">新建一个用户</p>\n<blockquote>\n<p>-m 为新用户创建一个文件夹，-s 设置用户的登录 Shell</p>\n<p>记得最后是用户名就好 😂</p>\n<p># useradd -m -s /bin/bash  horo</p>\n<p>然后设置密码</p>\n<p># passwd horo</p>\n</blockquote>\n</li>\n<li><p class=\"first\">激活需要的服务（显示管理器啦）</p>\n<blockquote>\n<p># systemctl enable gdm</p>\n<p>or</p>\n<p># systemctl enable sddm</p>\n<p>当然还有 NetworkManager：</p>\n<p># systemctl enable NetworkManager</p>\n<p>（这个里面有大写😂）</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id18\">\n<h2><a class=\"toc-backref\" href=\"#id35\">完工啦~</a></h2>\n<ul>\n<li><p class=\"first\">离开 chroot 环境：</p>\n<blockquote>\n<p># exit</p>\n</blockquote>\n</li>\n<li><p class=\"first\">卸载挂载的分区，（其实不是必须的，因为马上就重启啦~）</p>\n<blockquote>\n<p># umount -R /mnt</p>\n</blockquote>\n</li>\n<li><p class=\"first\">重新启动，准备迎接新的系统吧  ~(&gt;_&lt;~)</p>\n</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 29,
      "title": " 闲聊技术文章的写作姿势",
      "date_published": 1461340800,
      "body": "\n<p>不过真的有一种正确的姿势么 _(:з」∠)_</p>\n<p>其实咱为啥写这个 <del>几乎全是瞎扯</del> 的博客的一个主要原因就是有时找不到合适的文章或文档 😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>不过真的有一种正确的姿势么 _(:з」∠)_</p>\n\n<p>其实咱为啥写这个 <del>几乎全是瞎扯</del> 的博客的一个主要原因就是有时找不到合适的文章或文档 😂😂</p>\n<div class=\"section\" id=\"tt\">\n<h2><a class=\"toc-backref\" href=\"#id14\">所以,技术文章怎么啦~ (╯T︿T)╯ ┻━┻</a></h2>\n<p>擅长前端的 <del>老司机</del> 卡夫 ( <a class=\"reference external\" href=\"/links.html#frantic1048\">frantic1048</a> ) 推荐了一篇叫做\n<a class=\"reference external\" href=\"http://remotesynthesis.com/general/2016/02/11/common-problems-with-technical-articles/\">技术文章常见的 5 个问题</a>\n的文章. o(*￣3￣)o</p>\n<p>里面提到了撰写技术文章遇到的常见的问题:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>目的不明确。“所以，搞着些玩意儿是要干啥？”</li>\n<li>文章内容太过狭窄。“噢，这篇文章只面向 20 岁的见习风系魔法学徒使用，不看了”</li>\n<li>贴代码没注释。“这个野生的咒语是干啥的？”</li>\n<li>前后不一致的口吻。“我感觉快要精分了 ~(&gt;_&lt;~)”</li>\n<li>写到最后没有个结论。“(..•˘_˘•..)﻿”</li>\n</ul>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://www.zhihu.com/question/40716838/answer/88209954\">frantic1048 in 知乎</a></p>\n</blockquote>\n<p>( ,,´･ω･)ﾉ\"(´っω･｀｡)</p>\n<blockquote>\n提前注明一下 : 下面的栗子纯属虚构呐~ 如有雷同..... (放心这不会发生的😋</blockquote>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id15\">技术文章问题之一 : 目的不明确 &lt;(=﹁\"﹁=)&gt;</a></h2>\n<p><del>由于深受语文教育的毒害</del> ,一般都会认为一篇文章都要有一个主要表达的意图或是观点呗\n( 没错就是那个众人寻他千百度却在灯火阑珊处的中心思想😂😂 ),\n当然汝说的如果是一篇 <del>形散神聚的</del> 散文那就又是另一个怎么也解释不清的玄学了\n<del>(明明是我先的......</del></p>\n<p>然而实际情况是,有时容易搞不清楚文章的主题,典型的情况就是...... ( 咱给忘了 (つд⊂)</p>\n<p>试想一下一个希望看到某个主题的读者在看到全篇都在讲另一个主题的时候的感觉, <del>真的好想把浪费咱时间的作者咬死 😂😂</del></p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id16\">技术文章问题之二 : 文章内容过于狭窄 ~(&gt;_&lt;~)</a></h2>\n<p>内容过于狭窄就容易给读者 \"这篇文章不适合咱\" 的错觉,于是就关掉了......</p>\n<p>有可能是因为很多时候自己的博客有点像自己的笔记,解决一个问题以后写一篇,于是整片文章都在讨论如何解决某一个具体的\n问题,看着就 \"内容过于狭窄\" 了 | ω・`)</p>\n<blockquote>\n在这里咱要好好反省一下自己,因为咱好像一直在写像是教程一类的东西于是就没有多少深度 😂</blockquote>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id17\">技术文章问题之三 : 贴代码没注释  (╯&gt;_&lt;)╯ ┻━┻</a></h2>\n<p>写代码没注释就像汝拿着一本魔法书却不知道怎么使用呐~</p>\n<blockquote>\n“这个野生的咒语是干啥的？” _(:з」∠)_</blockquote>\n<p>比如上面那个歪果仁提的栗子：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c\">&lt;!-- offset 2 --&gt;</span></span>\n<span class=\"code-line\">{{ range $index, $element := .Site.Pages }}</span>\n<span class=\"code-line\">    {{ if gt $index 1 }}</span>\n<span class=\"code-line\">    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">        <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"date\"</span><span class=\"p\">&gt;</span>{{ .Date.Format \"Jan\" }}</span>\n<span class=\"code-line\">        <span class=\"p\">&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span>{{ .Date.Format \"2\"}}<span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">        <span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"link\"</span><span class=\"p\">&gt;</span>{{ .Title }}<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>{{.Description}}<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span></span>\n<span class=\"code-line\">    {{ end }}</span>\n<span class=\"code-line\">{{ end }}</span>\n</pre></div>\n<p>尽管因为咱以前用过 Jinja2 所以知道这是 Jinja 模板的一部分，但肯定有好多人看到 HTML 就一阵惊慌失措啦\n( 更别提 HTML 里还有一堆大括号啦 (╯&gt;▽&lt;)╯ ┻━┻ )</p>\n<blockquote>\n<p>在这里咱要好好反省一下自己*2,好像咱也经常忘记写注释......</p>\n<p>顺便给 <a class=\"reference external\" href=\"/links.html#frantic1048\">frantic1048</a> 点个赞 ( <a class=\"reference external\" href=\"http://frantic1048.logdown.com/posts/517113-test-redux-application-windowfetch-api-request\">例如这篇</a> )</p>\n<p>o(*￣3￣)o</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id18\">技术文章问题之四 : 前后不一致的措辞 (￣ε(#￣)☆╰╮(￣▽￣///)</a></h2>\n<p>比如前面用 \"我\" 后面不知道到了哪里就变成了 \"我们\" 这一类的问题,</p>\n<p>读起来感觉自己都要精分啦 (╯＠﹏＠)╯ ┻━┻</p>\n</div>\n<div class=\"section\" id=\"id8\">\n<h2><a class=\"toc-backref\" href=\"#id19\">技术文章问题之五 : 没有总结 “(..•˘_˘•..)”</a></h2>\n<p>......</p>\n<p><del>上面就是一个绝佳的栗子 😂😂</del></p>\n</div>\n<div class=\"section\" id=\"id9\">\n<h2><a class=\"toc-backref\" href=\"#id20\">那么啥样的姿势比较好咧？ ~(&gt;_&lt;~)</a></h2>\n<p>其实上面那篇文章里也给出了四个建议 😂😂</p>\n</div>\n<div class=\"section\" id=\"id10\">\n<h2><a class=\"toc-backref\" href=\"#id21\">建议之一 : 拥有个性 (σ≧∀≦)σ</a></h2>\n<p>要知道汝写的是文章而不是 <del>死板的</del> API 文档呐~\n一个好的写作风格说不定可以帮汝拉来新读者哟~ 😋</p>\n</div>\n<div class=\"section\" id=\"id11\">\n<h2><a class=\"toc-backref\" href=\"#id22\">建议之二 : 但是也不要个性过了头 &lt;(ノ=﹁\"﹁=)ノ┻━┻</a></h2>\n<p>既然是技术博客嘛，一定的严谨和专业性还是有必要的啦~ ( 比如不要有太多的错别字啦 (╯＠_&gt;＠)╯ ┻━┻ )</p>\n</div>\n<div class=\"section\" id=\"id12\">\n<h2><a class=\"toc-backref\" href=\"#id23\">建议之三 : 主线要有主线的存在感 ʃ ̂͜•̄ ̱̩ ̄͜►</a></h2>\n<p>不要把主线搞得像阿卡林一样没有存在感啦~</p>\n<p>即使要插支线剧情也要以不同的形式让读者能轻易分辨，不要和主线混在一起，以及别太长。</p>\n</div>\n<div class=\"section\" id=\"id13\">\n<h2><a class=\"toc-backref\" href=\"#id24\">建议之四 : 基本的排版 (・∀・)</a></h2>\n<p>文章分节的标题之类的可以帮助读者能够快速了解文章大体内容啦~</p>\n<hr class=\"docutils\">\n<p>介于咱也不是什么写博客的菊苣,咱也就只能抛个砖引个玉.欢迎各位大触前来指教呗~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 28,
      "title": " MediaWiki 网站搬家记",
      "date_published": 1464537600,
      "body": "\n<p>如何把 MediaWiki 网站搬到另外一个服务器上?</p>\n<p><del>这篇纯粹是来凑数的2333~</del></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>如何把 MediaWiki 网站搬到另外一个服务器上?</p>\n<p><del>这篇纯粹是来凑数的2333~</del></p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id5\">第一步:备份数据库 ......</a></h2>\n<p>说实话咱只用过 MySQL/MariaDB 😂,所以 <span class=\"tag\">mysqldump</span> 解决 😂</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 这里用了一个重定向标准输出到某个文件</span></span>\n<span class=\"code-line\"><span class=\"c1\"># mysqldump [连接数据库的各种选项,例如用户名啥的] [数据库名称] &gt; somefile.sql</span></span>\n<span class=\"code-line\">$ mysqldump -u wikiuser -p somedb &gt; somefile.sql</span>\n</pre></div>\n<p>然后输入密码,稍等片刻就会发现汝的当前目录下多了个文件 (例如 somefile.sql ),这就是导出的数据库啦~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">第二步:传输文件</a></h2>\n<p>假设汝的 MediaWiki 安装在 <span class=\"tag\">/path/to/mediawiki</span> 😂</p>\n<p>如果汝能物理访问汝的两台服务器,\n那就直接把 <span class=\"tag\">/path/to/mediawiki</span> 和上一步备份的 SQL 转储复制过去不就好啦~  (╯・ω・)╯ ┻━┻</p>\n<p>或者如果汝能用 SSH 连接两台服务器的话,可以试试这个:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>tar czf - /path/to/mediawiki <span class=\"p\">|</span> ssh username@server tar xzf - -C /path/to/mediawiki</span>\n</pre></div>\n<p>这一行命令做了这些:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt>把 /path/to/mediawiki 打包成归档文件,不过输出到标准输出.</dt>\n<dd><del>(千万别说汝不知道啥叫管道以及管道怎么用)</del> 😂</dd>\n</dl>\n</li>\n<li>通过 ssh 连接到目标服务器.后面是连接到服务器上以后执行的命令.</li>\n<li>后面的 tar 命令解开一个归档文件,中间孤独的 hyphen (\"-\") 表示要解开的文件来自标准输入. <span class=\"tag\">-C</span> 参数用于改变解开到的目录.</li>\n</ul>\n<p>别忘了把转储的数据库文件也 copy 过去😂</p>\n<p>然后输入密码,稍等片刻 again ......</p>\n<p>如果不行的话,那就传统的 FTP Copy 过去,就是可能慢点 😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">第三步: 还原数据库备份</a></h2>\n<p>mysql (MariaDB 也是这个命令):</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 这里用了一个重定向某个文件到标准输入</span></span>\n<span class=\"code-line\"><span class=\"c1\"># mysql -u [用户名] -p [数据库名] &lt; somefile.sql</span></span>\n<span class=\"code-line\">$ mysql -u wikiuser -p somedb &lt; somefile.sql</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id8\">一些收尾工作</a></h2>\n<ul class=\"simple\">\n<li>数据库连接信息变了就去 <span class=\"tag\">LocalSettings.php</span> 里改😏</li>\n<li>连外网的就去改 DNS 😂</li>\n</ul>\n<p>好了大概就是这个 <del>鬼</del> 样子😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 27,
      "title": " 从零开始的 GnuPG 学习笔记 [0] - PGP,GPG 等相关概念扫盲",
      "date_published": 1470412800,
      "body": "\n<p>GnuPG 密钥从创建到注销，顺便丢一只雷姆 （雾  <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMAY -->\n<p>GnuPG 密钥从创建到注销，顺便丢一只雷姆 （雾  <a class=\"footnote-reference\" href=\"#id2\" id=\"id1\">[1]</a></p>\n<table class=\"black-text footnote stripped white docutils highlight\" frame=\"void\" id=\"id2\" rules=\"none\">\n<colgroup><col class=\"label\"><col></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id1\">[1]</a></td><td>雷姆（レム/Rem）是动画 「Re：从零开始的异世界生活 」（日文：Re:ゼロから始める異世界生活）的角色之一。</td></tr>\n</tbody>\n</table>\n\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id4\">为啥需要密码学技术？</a></h2>\n<blockquote>\n<p>对于计算机的使用后果，没人比乔治·奥威尔在《1984》中的预言错得更离谱了。到目前为止，计算机创造的几乎所有实际的可能性空间都表明，计算机是权威的终结而非权威的开始。</p>\n<p class=\"attribution\">—《失控》</p>\n</blockquote>\n<p>在计算机和互联网的领域，自由和开放大概是主流。那些试图管制和封闭互联网的方法几乎都失败了呗~</p>\n<p>类似 <a class=\"reference external\" href=\"https://www.torproject.org\">Tor</a>  ，<a class=\"reference external\" href=\"https://geti2p.net\">I2p</a>  一类的匿名网络访问工具正被无数人（可能汝也是其中之一😋）用来因为各种原因隐藏自己的身份。\n而类似 <a class=\"reference external\" href=\"https://zeronet.io/\">ZeroNet</a> 的新兴软件更多的用到了 Bitorrent 一类的分布式技术。</p>\n<p>而这些工具要如何安全的进行数据交换呢，就需要用到各种密码学技术了呐，\n其实在上网的过程中，汝已经不知不觉的和各种密码学技术打交道了呢~</p>\n<blockquote>\n<ul class=\"simple\">\n<li>在浏览各种 <a class=\"reference external\" href=\"https://\">https://</a> 网站 （例如咱这里）时，汝的浏览器会和网站的服务器进行认证来保证汝要访问的服务器真的是这个网站所使用的服务器呐~</li>\n<li>在登录到各类网络服务时，总不能明文（就是按原样）传输汝的个人信息（其中可能会有汝的密码哦）吧？这时就需要客户端和服务器约定一种相互理解的方法来加密/解密各类数据呗~</li>\n<li>……</li>\n</ul>\n</blockquote>\n<p>而各类密码学技术和工具正是帮助汝在这个无法完全（或是根本不能）信任的互联网中相对安全的传递数据的帮手咯~</p>\n<p>好啦好啦……其实咱并不是密码学专家啦😋</p>\n</div>\n<div class=\"section\" id=\"pgp-openpgp-gpg-gnupg\">\n<h2><a class=\"toc-backref\" href=\"#id5\">PGP，OpenPGP 和 GPG（GnuPG）都是些啥玩意？</a></h2>\n<p>（啥，汝到现在连这三个词都没听说过？😂😂）</p>\n<p>良好隐私密码法（英语：Pretty Good Privacy，缩写为PGP），一套用于讯息加密、验证的应用程序，采用IDEA的散列算法作为加密与验证之用。</p>\n<p>PGP的主要开发者是菲尔·齐默尔曼（Phil Zimmermann）。齐默曼于1991年将PGP在互联网上免费发布。</p>\n<p>后来，PGP 被 Symantec 公司收购成为了商业软件。</p>\n<p>OpenPGP 是一套标准，大多数 PGP 软件（例如 GnuPG）都遵循这一标准。</p>\n<p>GNU Privacy Guard（GnuPG或GPG）是一种加密软件，它是PGP加密软件的满足GPL的替代物。GnuPG依照由IETF订定的OpenPGP技术标准设计。GnuPG用于加密、数字签名及产生非对称匙对的软件。</p>\n<p>GnuPG是自由软件基金会的GNU计划的一部分，目前受德国政府资助。以GNU通用公共许可证第三版授权。</p>\n<p>而大多数 Linux 发行版中内置（或者在软件仓库中）的应该都是 GnuPG 啦。汝可以在终端里输入 <span class=\"tag\">gpg --version</span> 来查看一下版本呗~（如果已经安装了的话）</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\">#咱的 gpg --version 大概像这样，某些发行版（例如 Ubuntu ）里可能还会有 gpg2~</span></span>\n<span class=\"code-line\">gpg <span class=\"o\">(</span>GnuPG<span class=\"o\">)</span> <span class=\"m\">2</span>.1.14</span>\n<span class=\"code-line\">libgcrypt <span class=\"m\">1</span>.7.2</span>\n<span class=\"code-line\">Copyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2016</span> Free Software Foundation, Inc.</span>\n<span class=\"code-line\">License GPLv3+: GNU GPL version <span class=\"m\">3</span> or later &lt;https://gnu.org/licenses/gpl.html&gt;</span>\n<span class=\"code-line\">This is free software: you are free to change and redistribute it.</span>\n<span class=\"code-line\">There is NO WARRANTY, to the extent permitted by law.</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Home: /home/horo/.gnupg</span>\n<span class=\"code-line\">支持的算法：</span>\n<span class=\"code-line\">公钥：RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span>\n<span class=\"code-line\">对称加密：IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256,</span>\n<span class=\"code-line\">    TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256</span>\n<span class=\"code-line\">散列：SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span>\n<span class=\"code-line\">压缩：不压缩, ZIP, ZLIB, BZIP2</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"gnupg\">\n<h2><a class=\"toc-backref\" href=\"#id6\">GnuPG 的作用是？</a></h2>\n<p>至少咱自己经历过的作用有这两种呗~</p>\n<ul>\n<li><p class=\"first\">签名</p>\n<blockquote>\n<p>用来证明这个文件是某个人创建的，而且在到达汝的过程中没有被篡改呗~</p>\n<p>大部分 Linux 发行版的软件包管理器已经用上这个用途了呐~\n（所以咱推测 gpg 应该已经安装在汝的系统上了呗~）</p>\n</blockquote>\n</li>\n<li><p class=\"first\">加密</p>\n<blockquote>\n<p>在某处用汝自己的密钥对加密某些文字，或是文件。然后传输到某个地方以后再使用汝自己的密钥对解密这些内容，在传输的过程中，如果私钥不泄露的话，其他人只会看到约等于无意义的乱码而已呐~</p>\n</blockquote>\n</li>\n</ul>\n<p>然后请允许咱从维基百科上抄一张图下来😂😂</p>\n<img alt=\"PGP 加密/解密的原理图\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/PGP_diagram_.png\">\n<hr class=\"docutils\">\n<p>于是这另一个新坑就挖好了呢（雾😂😂，下次就文字直播生成一个汝自己的密钥对好啦~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 26,
      "title": " AOSCC 2016 游记 - 第一天",
      "date_published": 1469116800,
      "body": "\n<p>AOSCC 2016 围观日记 （误</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>AOSCC 2016 围观日记 （误</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了😂😂</p>\n\n<div class=\"section\" id=\"aosc-c\">\n<h2><a class=\"toc-backref\" href=\"#id2\">AOSC(C) 是啥？</a></h2>\n<p>AOSC ,全称 <del>Always Overuse Shell Community</del> Anthon Open Source Community ,安同开源社区。\n是一个主要学生组成的开源社区，主要致力于 AOSC OS 的开发工作。</p>\n<p>AOSC OS 是安同开源社区的主要项目，它是一个“白”手起家（？），采用 dpkg 作为软件包管理器的 Linux 发行版，\n按照 <a class=\"reference external\" href=\"/links.html#jeffbai\">jeffbai</a>: 可爱的特首(误) Jelly Bai 的想法：</p>\n<blockquote>\n“在我们的发行版真的拿得出手前（希望至少能和 Arch 比比整洁度），真不希望我们像 Deepin 一样被捧来捧去......”</blockquote>\n<p>而后面加个 C (Conference) 就是一年一度的见面会啦~ (今年好像是第二届?</p>\n<p>然后作为在其间打酱油的咱怎么会想到去参加这个呢? (难道是因为被调侃了?</p>\n<blockquote>\n<p>liushuyu 🐟, [09.07.16 17:52]\n萌狼跟谁住啊（</p>\n<p>ヨイツの賢狼ホロ 😋(*), [09.07.16 17:55]\n🌚</p>\n<p>Cheng Cao, [09.07.16 17:57]\n[In reply to liushuyu 🐟]\n会发生什么</p>\n<p>ヨイツの賢狼ホロ 😋(*), [09.07.16 18:03]\n[In reply to Cheng Cao]\n😋</p>\n<p>liushuyu 🐟, [09.07.16 18:05]\n[In reply to Cheng Cao]\n旭日初升，恶臭四溢。AOSCC 与会人员们寻着气味而走，赫然发现【xxx】身首异处，躯体被撕成了碎片。这回糟了！</p>\n<p>KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966, [09.07.16 18:17]\n[In reply to Cheng Cao]\n会被吃</p>\n<p>KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966, [09.07.16 18:17]\n[In reply to liushuyu 🐟]\n萌狼：“下一个吃谁呢~”</p>\n<p>ヨイツの賢狼ホロ 😋(*), [09.07.16 18:18]\n😂</p>\n</blockquote>\n<p><del>请听题:上面要补多少个括号?</del> 😂😂</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id3\">第一天......</a></h2>\n<p>多图杀猫+原谅咱的渣照相技术😂</p>\n<img alt=\"前奏:当地桥好像很多的样子......\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/AOSCC/Day1/1.jpg\">\n<p>(当地桥好像很多的样子~)</p>\n<img alt=\"前奏:这是啥?\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/4.jpg\">\n<p>(当心电离辐射......#滑稽)</p>\n<img alt=\"前奏:导向牌\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/6.jpg\">\n<p>(简朴的导向标志)</p>\n<p><del>AOSCC 与会人员们聚集在会场 —— 大家都如释重负，因为昨晚似乎无人受袭。</del></p>\n<img alt=\"正在打游戏的 A2 ww~\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/7.jpg\">\n<img alt=\"正在打游戏的 A2 ww~\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/8.jpg\">\n<p>在白特首来之前先来围观下 A2 ~</p>\n<img alt=\"维他柠檬茶\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/9.jpg\">\n<p>夭寿辣,会场聚众吸毒啦😂😂</p>\n<img alt=\"locale-gen\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/10.jpg\">\n<p>现场生成 locale 中(貌似 AOSC 没给 /etc/locale.gen 上注释😂</p>\n<img alt=\"ThinkPads\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/11.jpg\">\n<p>ThinkPad 信仰充值中心一分部 😂 (画面中间的是果冻特首的 W541 ,旁边的是 A2 的 X1 Carbon)</p>\n<img alt=\"Longson\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/13.jpg\">\n<p>还有特首的龙芯笔记本~</p>\n<img alt=\"WhiteBoard\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/14.jpg\">\n<p>Hmm...清真猪肉公共许可证, <del>嗯可以,这很清真</del></p>\n<img alt=\"Raspberrypi\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/15.jpg\">\n<p>现场装 X 中的树莓派 (然而不久有人把线碰掉然后就关机了, <del>毕竟出来混迟早是要还的嘛</del> 😂)</p>\n<img alt=\"AOSCC17\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/19.jpg\">\n<img alt=\"AOSCC201\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/20.jpg\">\n<p>AOSCC 2017,下一站广州!😋</p>\n<img alt=\"AOSCC Core 4\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/22.jpg\">\n<p>AOSCC 2016 与会者选出的 AOSC OS Core 4 的开发代号是 \"Duang-Duang\"（努力保持严肃……）；</p>\n<p><del>夜幕降临，人们都活在恐惧中，彻夜难眠。这漫长的夜晚竟然有几个小时！</del> 😂😂</p>\n</div>\n<div class=\"section\" id=\"extra\">\n<h2><a class=\"toc-backref\" href=\"#id4\">Extra</a></h2>\n<img alt=\"Naive Blue\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day1/18.jpg\">\n<p>😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 25,
      "title": " 火狐娘兼职 RSS 阅读器~",
      "date_published": 1461772800,
      "body": "\n<p>火狐娘也可以兼职做 RSS 阅读器呐~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>火狐娘也可以兼职做 RSS 阅读器呐~</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">啥？ 又来问啥是 RSS ??</a></h2>\n<p>如果连 RSS 是啥都不知道那这篇文章就不用看了 (╯&gt;_&lt;)╯ ┻━┻</p>\n<blockquote>\n「自知之明者，谓之贤也。」</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">让火狐娘兼职 RSS 阅读器的好处和问题是啥咧?</a></h2>\n<ul class=\"simple\">\n<li>好处:又可以少开一个应用啦~ ( 不过对于用 Owncloud News 的咱来说好像没啥区别😂😂</li>\n<li>问题:好像没有大多数 RSS 阅读器那样把所有的文章安排在一个流里的功能 _(:з」∠)_</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id6\">咱们来开始呗~</a></h2>\n<p>首先打开汝的 Firefox 😂😂 , 在右边的长条菜单里找到那个孤零零 (?) 的 \"定制\" 选项.</p>\n<img alt=\"定制在这~\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/Firefox_rss/1.png\">\n<p>在左边就可以看到\"订阅\"按钮啦,把它拉到工具栏或者菜单里呗~ <del>(订阅:我在这快来拉我~)</del></p>\n<img alt=\"订阅:我在这快来拉我~\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/2.png\">\n<p>然后打开一个博客 ( 例如 百合仙子 <a class=\"reference external\" href=\"/links.html#lilydjwg\">lilydjwg</a> 的 <a class=\"reference external\" href=\"https://blog.lilydjwg.me\">https://blog.lilydjwg.me</a> )</p>\n<img alt=\"举一个栗子~\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/4.png\">\n<p>如果这个网站有 RSS 的话 ， RSS 那个图标就会亮起来，就像上面那样~</p>\n<hr class=\"docutils\">\n<blockquote>\n<p>那么这个具体是咋实现的呢？ 原理就在于这段 HTML 代码上~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"https://blog.lilydjwg.me/posts.rss\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"alternate\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"Blog RSS\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/rss+xml\"</span> <span class=\"p\">/&gt;</span></span>\n</pre></div>\n<p>这段链接到了一个 MIME 类型是 application/rss+xml 的文件呐~ 所以火狐娘看到这个就知道这个网站有 RSS 可以看了呢~</p>\n<p>除了 RSS 以外火狐娘还认得 <ruby><rb>Atom Syndication Format</rb><rp>(</rp><rt>Atom供稿格式</rt><rp>)</rp></ruby> 的标准哟~ ( 虽然也是 RSS 阅读器们的必修课 ~(&gt;_&lt;~) ), 像这样:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">\"/feeds/all.atom.xml\"</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">\"application/atom+xml\"</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">\"alternate\"</span> <span class=\"na\">title</span><span class=\"o\">=</span><span class=\"s\">\"约伊兹的萌狼乡手札 Full Atom Feed\"</span> <span class=\"p\">/&gt;</span></span>\n</pre></div>\n</blockquote>\n<p>如果有时 RSS 源不止一个,就挑一个呗~ ( 比如第一个 )</p>\n<img alt=\"有时 RSS 源不止一个......\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/5.png\">\n<p>然后汝就会打开一个这样的页面呗~ 其实还可以支持其它方式 ( 例如 Owncloud 新闻阅读器 ) 订阅收取点,不过这次咱就用火狐娘的固有技能 \"实时书签\" 呗~</p>\n<img alt=\"FireFox 解析的 RSS 页面~\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/6.png\">\n<hr class=\"docutils\">\n<img alt=\"使用 &quot;实时书签&quot; 订阅收取点\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/7.png\">\n<p>实时书签大概像这样,如果汝订阅的网站更新了的话文件夹和每篇文章旁边的 RSS 图标会亮起来的啦~</p>\n<img alt=\"实时书签长这样~\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/8.png\">\n<p>当然如果汝习惯 RSS 那种文章流,把 RSS 页面加为书签呗~</p>\n<img alt=\"把 RSS 页面加为书签呗~\" class=\"materialboxed responsive-img\" src=\"/images/Firefox_rss/9.png\">\n</div>\n\n  </div>"
    },
    {
      "post_id": 24,
      "title": " 知乎自答两则",
      "date_published": 1471622400,
      "body": "\n<p>学 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> ,顺便测试一下咱写的 creatissue 脚本 😂😂</p>\n<p>懒得加内文里的链接了呢~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>学 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> ,顺便测试一下咱写的 creatissue 脚本 😂😂</p>\n\n<p>懒得加内文里的链接了呢~</p>\n<div class=\"section\" id=\"arch-linux\">\n<h2><a class=\"toc-backref\" href=\"#id3\">使用 Arch Linux 做桌面有何优势和注意事项？</a></h2>\n<p><a class=\"reference external\" href=\"https://www.zhihu.com/question/46322733/answer/101649684\">https://www.zhihu.com/question/46322733/answer/101649684</a></p>\n<p>既然是前 Debian Testing 用户，就认为汝有一定的 Linux 发行版使用经验呗~</p>\n<p>顺便猜汝问的是“日常使用 Arch Linux”呗.</p>\n<ol class=\"arabic simple\">\n<li>Arch Linux 有啥特性？</li>\n</ol>\n<p>其实 Arch Linux 和其它发行版一样就只是一个发行版呐~然而每一个发行版的生态不一样，\nArch 这边信奉的是以 “Keep It Simple, Stupid” 为核心的 Arch 之道啦。哦对了，还有一个名字叫做 Pacman 的软件包管理器。\n滚动更新算不算是一个特性咧？</p>\n<ol class=\"arabic simple\" start=\"2\">\n<li>Arch Linux 的优势？</li>\n</ol>\n<p>应该是软件更新速度快和（更新时）比较稳定？ （可以说都是拜 Arch 的滚动发行版属性所赐呗~）</p>\n<p>还有比较完善的 Wiki ~</p>\n<p>还有比较完善的 Wiki ~</p>\n<p>还有比较完善的 Wiki ~\n（重要的话说三遍2333）</p>\n<p>Arch compared to other distributions (简体中文) 上有 Arch Linux 和几个发行版的比较，去看下呗~</p>\n<ol class=\"arabic simple\" start=\"3\">\n<li>安装 Arch Linux 要注意啥？</li>\n</ol>\n<p>Beginners' guide (简体中文) 和 Installation guide (简体中文) 都是非常好的参考来源呐~\n按 wiki 的说法，前者适合新安装 Arch Linux 的用户，后者适合有经验的 Linux 用户呗。</p>\n<ol class=\"arabic simple\" start=\"4\">\n<li>使用 Arch Linux 时要注意啥？</li>\n</ol>\n<p>首先要学习如何使用 Arch Linux 的招牌（？） pacman 啦。\nPacman (简体中文) 上有些常用命令，如果汝有使用其它软件包管理器 （例如 Debian 里的 apt）的经验，可以看一下 Pacman/Rosetta ，\n那里列出了几种不同的软件包管理器的不同命令的比较。</p>\n<p>关于各种操作（例如安装各类软件，外观定制，系统维护等等） General recommendations 里有各种操作的索引，去看一下呗~</p>\n<p>如果遇到了问题，ArchWiki ，Arch Linux Forums ， Arch Linux 中文论坛 和 IRC channels (简体中文) 都是解决问题的合适的地方咯~ （当然要遵守各自的规则啦）</p>\n<ol class=\"arabic simple\" start=\"5\">\n<li>啥？有人说 Arch Linux 容易滚挂？</li>\n</ol>\n<p>到底是从啥时候开始有这个说法的</p>\n<p>怎样才能尽量避免archlinux滚挂？ - Arch Linux 这里的几个回答非常棒，咱就简单的总结一下呗~</p>\n<p>System maintenance (简体中文) 有些系统维护的常见技巧。</p>\n<p>大家都认为长期不更新的 Arch Linux 更容易挂……所以至少要记得定期更新一下系统吧~</p>\n<p>订阅 Arch Linux 新闻 （邮件列表 arch-announce  或者RSS： <a class=\"reference external\" href=\"https://www.archlinux.org/feeds/news/\">https://www.archlinux.org/feeds/news/</a> ）消息不是很频繁，一般是在有重大更新时会提醒大家。</p>\n<p>不要在一无所知的情况下打开 [testing] 仓库。如果想打开的话，\nArch Linux TU 兼 Developer 成员 @晏然FelixYan 写了篇 Arch Linux [testing] 系列仓库简介 可以参考。</p>\n<p>有时 pacman 会提示生成了一些 .pacnew 文件，这是为了避免覆盖一个之前被修改过的已存在文件呐\n，汝最好在更新完毕以后马上合并这些改动啦~（如果不处理，不当的配置可能导致软件功能出问题，甚至完全无法使用。）</p>\n<p>不要使用某些 pacman 命令 （例如 --force，但是官方发通告要求这样做时除外~）</p>\n<p>最后，手边最好准备一个 Live 环境（万一一不小心把系统搞挂了……）</p>\n<ol class=\"arabic simple\" start=\"6\">\n<li>最后……</li>\n</ol>\n<p>每个人都可以为 Arch Linux 贡献自己的一分力量，如果汝有意愿的话， wiki 上的 Getting involved 页面有各种贡献的途径呐~</p>\n<p>还有一件事…… 欢迎来 Arch Linux 中文社区玩！\n（ IRC 频道 #archlinux-cn @ freenode 是中心，同时还有 Telegram ， XMPP，Tox 和 Gitter 多平台联通，可能是第二水的 IRC 中文频道？）\n其他平台的加入方式在 IRC 上问问其他人就好啦~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id4\">Arch Linux的用户都有理想主义倾向吗？</a></h2>\n<p><a class=\"reference external\" href=\"https://www.zhihu.com/question/49439472/answer/116599094\">https://www.zhihu.com/question/49439472/answer/116599094</a></p>\n<p>（话说知乎啥时候能内置水平线标记……）</p>\n<p>其实不止 Arch Linux ，几大主流发行版不都是一群有着相同理想主义倾向的用户/开发者们一手构建起来的呗~</p>\n<p>Debian ：以创建一个自由的类 Unix 操作系统为己任，大部分尽可能的采用自由软件\n（后来从 Debian 衍生出的完全自由的发行版 gNewSense 获得了自由软件基金会的赞助 ）。</p>\n<p>Fedora ：和 Debian 同样更多的专注于自由软件。和 Debian 偏向稳定不同，\nFedora 的开发者更多的会和上游紧密协作，尽可能的快速推动新技术的应用和完善。</p>\n<p>openSUSE：这个咱没用过，只知道他/她/它们做了个很出色的系统配置工具 YaST ，\n还有能给 openSUSE 和其他各种发行版构建软件包的 Open Build Service (OBS)。\n至于 openSUSE 为啥没有其它发行版那么流行的原因，活跃于 openSUSE 社区的苏姐的回答应该解释的比较全面 ：\nopenSUSE 的人气为何远不如 Ubuntu 和 Fedora ？ - 瑪麗蘇的回答</p>\n<p>Gentoo：应该是除了 LFS （Linux From Scratch）以外定制程度最高的 Linux 发行版，\n用户可以自由的选择自己喜欢的组件，无论是安装方式，需要的程序，\n以至于init 程序（ Gentoo 是目前为数不多的不默认采用 Systemd 的 Linux 发行版之一）。\n许多用户喜欢的就是 Gentoo 的高度可定制性，\n例如 长期使用Arch，Gentoo等滚动更新的发行版是怎样的一种体验？ - 李小的回答 和\n长期使用Arch，Gentoo等滚动更新的发行版是怎样的一种体验？ - ZX Huo 的回答 。</p>\n<p>Arch Linux：自称 \" a lightweight and flexible Linux® distribution that tries to Keep It Simple.\" ，\n一个轻量化，可定制，试图遵循 KISS 原则 （ Keep It Simple, Stupid，对应中文为“保持简单，且一目了然”）的 Linux 发行版。\n简洁，现代，实用和以用户为中心构成了 Arch Linux 用户和开发者们一贯共识的 “Arch 之道”（Arch Linux - ArchWiki）</p>\n<p>（Ubuntu ？那是啥，好吃吗？啦啦啦……）</p>\n<p>关于 Arch Linux 的可定制性，现任 Trusted User 之一的 fc farseer 这么写到：</p>\n<blockquote>\n<p>我自己用 Ubuntu 從 8.04 經歷多次版本升級升到 12.04 ，期間雙系統裝裹 OpenSuSE 和Arch ，\n然後在 OpenSuSE 上完成了畢業設計（那時候只有suse提供了Xen補丁內核，這是我的畢業設計需要），\n之後本科畢業後新臺機直接裝 Arch，現在3年多了一切穩定完好。這 3 年多我經歷了 Arch 從 rc.conf 到 systemd 的轉變，\n經歷了 grub legacy 到 grub 2 的轉變，換過好幾個 DE 和 WM 然後現在穩定在 Awesome3.4 兩年多，\n系統分區從原本的 ext4 換到過 btrfs 分區然後現在組 btrfs raid1 ，我換過顯卡，換過好幾塊硬盤，\n期間滾掛過好幾次然後都修好了，自己作死折騰btrfs壞過也從備份中恢復好了。重要的是這個系統一直活着而且活得很好，\npacman.log裏的裝機歷史能一直追溯到3年前裝的第一個包，我知道這裏面只有我需要的包，\n只有我做過的配置，發生任何問題我都知道是系統的哪裏的問題。這是 Arch給我的安心感，\n是Ubuntu不能給我的。反觀我用Ubuntu的那段時間，每次 dist-upgrade 都要麼立刻掛掉要麼用一段時間掛掉，\n要麼就是升級的方案實在太將就然後換新的重裝。都說 debian穩定ubuntu穩定，\n而那時的我沒有任何穩定的感覺，那時的我害怕每一個小包的升級，因爲我不知道升級了一個包之後會對別的包造成什麼不可預知的後果。\n服務器系統那種有管理員管理的計算機集羣需要的穩定性，和桌面用戶需要的穩定性，在我看來是不同的概念。\n我不怕一個升級之後東西壞掉然後需要我花兩個小時找方案把它修好，\n但是我怕爲了某個新版本的庫而不得不升級的時候，\n整個系統都變得面目全非導致我不得不花兩個小時重裝系統，然後這個全新的系統我不再認識了。</p>\n<p class=\"attribution\">—长期使用Arch，Gentoo等滚动更新的发行版是怎样的一种体验？ - fc farseer 的回答</p>\n</blockquote>\n<p>所以嘛，既然选择了滚动更新的发行版，就要学会适应这种快速的变化呗~</p>\n<p>另外还有一句，Arch Linux 的滚动更新模型是不支持部分升级的。</p>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/System_maintenance#Partial_upgrades_are_unsupported\">https://wiki.archlinux.org/index.php/System_maintenance#Partial_upgrades_are_unsupported</a></p>\n<p>还有，Archer 哪里说要秒杀各大软件公司了啦 ？明明咱们连有多少用户都不怎么在意：</p>\n<blockquote>\n<p>许多 Linux 发行版都试图变得更“用户友好”，Arch Linux 则一直是，永远会是“以用户为中心”。\n此发行版是为了满足贡献者的需求，而不是为了吸引尽可能多的用户。\nArch 适用于乐于自己动手的用户，他们愿意花时间阅读文档，解决自己的问题。</p>\n<p>报告问题、完善 Wiki 社区文档、为其它用户提供技术支持。\nArch 用户仓库 收集用户贡献的软件包。Arch 开发者都是志愿者，活跃的贡献者很快就能称为开发人员。</p>\n</blockquote>\n<p>不要以偏概全好不好……</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 23,
      "title": " AOSCC 2016 游记 - 第三天",
      "date_published": 1469289600,
      "body": "\n<p>AOSCC 2016 围观日记最终章（大雾</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了 *3 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>AOSCC 2016 围观日记最终章（大雾</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了 *3 😂</p>\n<blockquote>\n怪了，今天有人没出席拖延症患者互助协会的活动。</blockquote>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id5\">第三天......</a></h2>\n<p>还是多图杀猫+原谅咱的渣照相技术😂</p>\n<img alt=\"前奏\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/AOSCC/Day3/1.jpg\">\n<p>今天是个平常的一天，大家都在各自摸鱼🐟，甚至又玩起了 UNO 牌😂</p>\n<img alt=\"又玩起了 UNO 牌😂\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/2.jpg\">\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">😐 果冻特首的打包教室</a></h2>\n<img alt=\"Install AOSC OS on  Deepin\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/3.jpg\">\n<p>特首试图用 Deepin 的 LiveUSB 安装 AOSC OS （然后失败了😂</p>\n<img alt=\"这是色彩校正\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/4.jpg\">\n<p>这个看起来和摄像头类似的物体竟然是用来校正色彩的 🤦</p>\n<img alt=\"ThinkPad 信仰充值中心二分部 😂\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/5.jpg\">\n<p>ThinkPad 信仰充值中心二分部 😂</p>\n<img alt=\"换大屏幕\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/10.jpg\">\n<p>换大屏幕以后就舒服多了~</p>\n<img alt=\"现场修 issue\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/11.jpg\">\n<p>特首施展了现场修 issue 技能 😂</p>\n</div>\n<div class=\"section\" id=\"ast\">\n<h2><a class=\"toc-backref\" href=\"#id7\">😅 AST 讨论区兼微软信仰充值中心 😂</a></h2>\n<img alt=\"画风突变\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/6.jpg\">\n<p>画风突变😂😂</p>\n<img alt=\"来排排坐\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/8.jpg\">\n<p>AOSCC 微软信仰充值中心 😂</p>\n</div>\n<div class=\"section\" id=\"aosc-os\">\n<h2><a class=\"toc-backref\" href=\"#id8\">😯 AOSC OS 要成为模拟器系统么 （雾</a></h2>\n<img alt=\"新鲜出炉的 vba-m\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/24.jpg\">\n<p>新鲜出炉的 vba-m 😂</p>\n<img alt=\"隔壁 OS X 来砸场啦\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/13.jpg\">\n<p>OS X 来砸场啦 😂</p>\n<img alt=\"NDSL\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/12.jpg\">\n<p>真机笑而不语😏</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id9\">各种小插曲......</a></h2>\n<img alt=\"Icenowy\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/7.jpg\">\n<img alt=\"Icenowy\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/15.jpg\">\n<p><del>被特首抢了观众的</del> Icenowy 在默默的继续调试自己的板子……</p>\n<img alt=\"Icenowy\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/23.jpg\">\n<p>（好像有啥奇怪的东西混进来了😂</p>\n<img alt=\"现场直播白学\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/9.jpg\">\n<p>白学家进入现场， <del>打死！</del></p>\n<img alt=\"围观狮子赶工社区网站\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/16.jpg\">\n<p>🙄 围观狮子赶工社区网站中……</p>\n<img alt=\"FSF\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/17.jpg\">\n<img alt=\"FSF\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/18.jpg\">\n<p>听说有人要加入 FSF 神教？ 😂</p>\n<img alt=\"Coding.net x GitCafe\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/22.jpg\">\n<p>GitCafe 的精神继任 Coding.net 借尸还魂啦😂</p>\n</div>\n<div class=\"section\" id=\"del-del\">\n<h2><a class=\"toc-backref\" href=\"#id10\"><del>这不清真</del> 😂</a></h2>\n<img alt=\"这不清真\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/19.jpg\">\n<img alt=\"这不清真 Act 2\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/20.jpg\">\n<img alt=\"这不清真 Act 3\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day3/21.jpg\">\n<p>糟糕！你们竟然昏了头脑把圣战者公审了！他引爆了藏在衣服里的炸弹，和所有人同归于尽了 #圣战者胜。😂</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id11\">然后……</a></h2>\n<p>Jelly Bai 在 BroncoTc 的提醒下发现忘记像去年一样照集体照了 🤣😂</p>\n<blockquote>\n<p>BroncoTc | Keybase√, [18.07.16 19:16]\n卧槽</p>\n<p>BroncoTc | Keybase√, [18.07.16 19:16]\n我们忘了拍合影。</p>\n<p>liushuyu 🐟, [18.07.16 19:16]\nGG</p>\n<p>liushuyu 🐟, [18.07.16 19:17]\n建议开始 AOSCC 2017 的筹划</p>\n<p>Mingcong Bai, [18.07.16 19:17]\nOh sh*t.</p>\n<p>ヨイツの賢狼ホロ 😋(*), [18.07.16 19:18]\n下一次第一天就拍合影吼不吼啊😂</p>\n<p>Mingcong Bai, [18.07.16 19:18]\n[In reply to ヨイツの賢狼ホロ 😋(*)]\n吼啊</p>\n<p>gumblex, [18.07.16 19:18]\n[In reply to BroncoTc | Keybase√]\n🌚这应该是第一天中午的事情</p>\n<p>Mogician Yang, [18.07.16 19:18]\n滋磁一个</p>\n<p>Jactry Zeng, [18.07.16 19:19]\n[In reply to Mingcong Bai]\n这次会续了不少啊 xD</p>\n<p>ヨイツの賢狼ホロ 😋(*), [18.07.16 19:19]\n[In reply to Mingcong Bai]\n😂 /me 然而下一次来不来难说了</p>\n<p>KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966, [18.07.16 19:19]\n[In reply to ヨイツの賢狼ホロ 😋(*)]\n还真应该这样……有时候不知道谁就突然不见了（比如今天中午的A2</p>\n<p>KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966, [18.07.16 19:20]\n[In reply to KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966]\n还有昨天还是前天的 Bob Cao（</p>\n<p>Icenowy 请大家不要在 SoC 上套用 PC 的 GPU 概念, [18.07.16 19:20]\n[In reply to KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966]\na2 最后回来啦</p>\n<p>IMisakaTransferFrame4e21 神乐坂美蒋, [18.07.16 19:21]\n应该和AOSCC 2015一样，人没到齐就合多张</p>\n<p>KayMW | Syntax-Breaker | 不想猎取灵魂的咸鱼不是好灵魂画手 | 0x547E5906116A1966, [18.07.16 19:21]\n[In reply to Icenowy 请大家不要在 SoC 上套用 PC 的 GPU 概念]\n然而那个时候人基本走光啦（</p>\n</blockquote>\n</div>\n\n  </div>"
    },
    {
      "post_id": 22,
      "title": " AOSCC 2016 游记 - 第二天",
      "date_published": 1469203200,
      "body": "\n<p>AOSCC 2016 围观日记续集（误</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了 *2 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>AOSCC 2016 围观日记续集（误</p>\n<p>去 AOSCC 会场围观了下，然后拖延症又发作了 *2 😂</p>\n<blockquote>\n你是拖延症患者，每天除了摸鱼🐟什么都不干，你很忧心，为此加入了拖延症患者互助协会。</blockquote>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id3\">第二天......</a></h2>\n<p>还是多图杀猫+原谅咱的渣照相技术😂</p>\n<img alt=\"前奏:出发~\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/AOSCC/Day2/0.jpg\">\n<p><del>「昨晚，秘密警察突然失踪，说不定是有人报复？想必是凶多吉少了……」酒店老板在收了一笔可观的小费之后，告诉了大家这个情报。</del></p>\n<img alt=\"还是A2的游戏直播\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/1.jpg\">\n<p>还是老样子，开始前先玩会儿游戏~</p>\n</div>\n<div class=\"section\" id=\"gumblex\">\n<h2><a class=\"toc-backref\" href=\"#id4\">🐷 Gumblex 的表情高清重制直播</a></h2>\n<img alt=\"Gumblex 的表情高清重制直播\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/2.jpg\">\n<p>(道具是自由且开源的 Inkscape 哦~)</p>\n<img alt=\"Gumblex 的表情高清重制直播\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/3.jpg\">\n<img alt=\"Gumblex 的表情高清重制直播\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/4.jpg\">\n<p>这张用了 <ruby><rb>全景</rb><rp>(</rp><rt>不能</rt><rp>)</rp></ruby> 变焦以后更糊了 😂</p>\n<img alt=\"Gumblex 的表情高清重制直播\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/6.jpg\">\n</div>\n<div class=\"section\" id=\"junde-yhi\">\n<h2><a class=\"toc-backref\" href=\"#id5\">😯 Junde Yhi 关于安同开始程序的介绍</a></h2>\n<p>安同开始程序（Anthon Starter Kit），可以去 repo.aosc.io 获取演讲时用到的幻灯片。</p>\n<blockquote>\n（原谅咱真找不到更合适的词啦，况且 LibreOffice Impress 也叫“幻灯片” 😂😂</blockquote>\n<p><a class=\"reference external\" href=\"https://repo.aosc.io/aosc-documentation/aoscc-2016/junde-yhi-ast-startup-kit/speech-anthon-starter.pdf\">https://repo.aosc.io/aosc-documentation/aoscc-2016/junde-yhi-ast-startup-kit/speech-anthon-starter.pdf</a></p>\n<img alt=\"唔~\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/-1.png\">\n<p>唔~</p>\n<img alt=\"AST Speech\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/17.jpg\">\n<img alt=\"Uno😂\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/10.jpg\">\n<p>然后后面有人玩起了 Uno 牌😂</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">😂 插曲：狮子产效果拔群的绿化器</a></h2>\n<img alt=\"狮子产效果拔群的绿化器\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/14.jpg\">\n<p><del>效果拔群</del></p>\n</div>\n<div class=\"section\" id=\"junde-yhi-liushuyu-abbs\">\n<h2><a class=\"toc-backref\" href=\"#id7\">😋 Junde Yhi 和 liushuyu 🐟 关于分布式 ABBS 的构想</a></h2>\n<p>ABBS ，全称 AutoBuild Build Service 。是 AOSC OS 管理软件包编译配置树的工具（目前是这样</p>\n<p>还是老样子，演讲时的幻灯片在这:</p>\n<p><a class=\"reference external\" href=\"https://repo.aosc.io/aosc-documentation/aoscc-2016/junde-yhi-distributed-abbs/distributed-abbs.pdf\">https://repo.aosc.io/aosc-documentation/aoscc-2016/junde-yhi-distributed-abbs/distributed-abbs.pdf</a></p>\n<img alt=\"DABBS_1\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/8.jpg\">\n<img alt=\"DABBS_2\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/11.jpg\">\n<img alt=\"DABBS_3\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/12.jpg\">\n<img alt=\"DABBS_4\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/13.jpg\">\n<p>（瓶装毒品😂😂）</p>\n</div>\n<div class=\"section\" id=\"icenowy-gnu-linux-arm\">\n<h2><a class=\"toc-backref\" href=\"#id8\">🙄 Icenowy 关于 GNU/Linux 向 ARM 移植的相关介绍</a></h2>\n<p>然而咱只拍了一张照片，而且用了 <ruby><rb>全景</rb><rp>(</rp><rt>不能</rt><rp>)</rp></ruby> 变焦以后更糊了 😂</p>\n<p><a class=\"reference external\" href=\"https://repo.aosc.io/aosc-documentation/aoscc-2016/xingda-zheng-way-to-gnu-linux-on-arm/Way%20to%20ARM%20Linux.pdf\">https://repo.aosc.io/aosc-documentation/aoscc-2016/xingda-zheng-way-to-gnu-linux-on-arm/Way%20to%20ARM%20Linux.pdf</a></p>\n<img alt=\"Icenowy's GNU/Linux on ARM\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/19.jpg\">\n</div>\n<div class=\"section\" id=\"extra\">\n<h2><a class=\"toc-backref\" href=\"#id9\">照例还是 Extra:</a></h2>\n<img alt=\"Arthur2e5 is playing NEKOPARA ~\" class=\"materialboxed responsive-img\" src=\"/images/AOSCC/Day2/7.jpg\">\n<p><del>这回怪了，没人投票？你们终于意识到投票杀人是不人道的了吗？</del></p>\n<p><del>夜幕降临，人们都活在恐惧中，彻夜难眠。这漫长的夜晚竟然......还是有好几个小时</del> 😂😂</p>\n<p>😋</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 21,
      "title": " 从零开始的 GnuPG 学习笔记 [1] - 创建密钥对",
      "date_published": 1475078400,
      "body": "\n<p>在 GNU/Linux 上用 gpg 创建自己的密钥对~</p>\n<p>对于 Windows 用户,可以试试 <a class=\"reference external\" href=\"https://www.gpg4win.org/\">Gpg4win</a> ,\nGpg4win 提供了一套 Windows 下可用的 GPG 解决方案.</p>\n<p>Gpg4win内置的是 Kleopatra ,\n<a class=\"reference external\" href=\"https://docs.kde.org/stable/en/kdepim/kleopatra/index.html\">官方文档在这</a> ,\n其它人写的教程 Google 一下应该也找的到.</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMAY -->\n<p>在 GNU/Linux 上用 gpg 创建自己的密钥对~</p>\n\n<p>对于 Windows 用户,可以试试 <a class=\"reference external\" href=\"https://www.gpg4win.org/\">Gpg4win</a> ,\nGpg4win 提供了一套 Windows 下可用的 GPG 解决方案.</p>\n<p>Gpg4win内置的是 Kleopatra ,\n<a class=\"reference external\" href=\"https://docs.kde.org/stable/en/kdepim/kleopatra/index.html\">官方文档在这</a> ,\n其它人写的教程 Google 一下应该也找的到.</p>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">创建密钥对</a></h2>\n<p>从终端中运行 <span class=\"tag\">gpg --full-gen-key --expert</span> :</p>\n<blockquote>\n<p>--full-gen-key 是使用完整的步骤创建密钥对.</p>\n<p class=\"attribution\">—expert 顾名思义就是 <del>砖</del> 专家模式啦,\n例如可以选择更多种(例如新式的)加密方式呗~</p>\n</blockquote>\n<blockquote>\n有些发行版可能会用 gpg2 来代表版本 2+ 的 gpg.</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ gpg --full-gen-key --expert</span>\n<span class=\"code-line\">gpg <span class=\"o\">(</span>GnuPG<span class=\"o\">)</span> <span class=\"m\">2</span>.1.15<span class=\"p\">;</span> Copyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2016</span> Free Software Foundation, Inc.</span>\n<span class=\"code-line\">This is free software: you are free to change and redistribute it.</span>\n<span class=\"code-line\">There is NO WARRANTY, to the extent permitted by law.</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">请选择您要使用的密钥种类：</span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span> RSA and RSA <span class=\"o\">(</span>default<span class=\"o\">)</span></span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">2</span><span class=\"o\">)</span> DSA and Elgamal</span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">3</span><span class=\"o\">)</span> DSA <span class=\"o\">(</span>仅用于签名<span class=\"o\">)</span></span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">4</span><span class=\"o\">)</span> RSA <span class=\"o\">(</span>仅用于签名<span class=\"o\">)</span></span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">7</span><span class=\"o\">)</span> DSA <span class=\"o\">(</span>自定义用途<span class=\"o\">)</span></span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">8</span><span class=\"o\">)</span> RSA <span class=\"o\">(</span>自定义用途<span class=\"o\">)</span></span>\n<span class=\"code-line\">   <span class=\"o\">(</span><span class=\"m\">9</span><span class=\"o\">)</span> ECC and ECC</span>\n<span class=\"code-line\">  <span class=\"o\">(</span><span class=\"m\">10</span><span class=\"o\">)</span> ECC <span class=\"o\">(</span>sign only<span class=\"o\">)</span></span>\n<span class=\"code-line\">  <span class=\"o\">(</span><span class=\"m\">11</span><span class=\"o\">)</span> ECC <span class=\"o\">(</span><span class=\"nb\">set</span> your own capabilities<span class=\"o\">)</span></span>\n<span class=\"code-line\">您的选择？</span>\n</pre></div>\n<p>可能汝和咱的有些不一样(因为 ECC 加密算法在 gpg 2.14 才开始支持).</p>\n<p>ECC 又称椭圆曲线密码学,主要优势是在某些情况下\n它比其他的方法使用更小的密钥——比如RSA加密算法——提供相当的或更高等级的安全。</p>\n<p>不过有些地方还不能用这种新加密算法,这里示范咱就只用默认的 RSA 啦😂</p>\n<p>输入密钥种类前面的数字(不带括号),然后确认.</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>RSA 密钥长度应在 <span class=\"m\">1024</span> 位与 <span class=\"m\">4096</span> 位之间。</span>\n<span class=\"code-line\">您想要用多大的密钥尺寸？<span class=\"o\">(</span><span class=\"m\">2048</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>在这里设置一个密钥长度,默认的长度应该足够安全了.如果有需要,也可以增加.</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>RSA 密钥长度应在 <span class=\"m\">1024</span> 位与 <span class=\"m\">4096</span> 位之间。</span>\n<span class=\"code-line\">What keysize <span class=\"k\">do</span> you want <span class=\"k\">for</span> the subkey? <span class=\"o\">(</span><span class=\"m\">2048</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>然后为子密钥设置密钥长度.</p>\n<blockquote>\n<p>是不是想问啥是子密钥 (subkey) ?</p>\n<p>一个密钥对下可以添加不同的子密钥,这样做的好处有啥咧?</p>\n<ul class=\"simple\">\n<li>区分目的:例如一个子密钥用于加密,另一个子密钥用于电子邮件签名等等......</li>\n<li>区分设备:比如某些安全性稍差的设备(例如手机),汝可以只把一对专用的子密钥放到里面.</li>\n<li>保护主密钥:如果子密钥泄漏,只要吊销相应的子密钥就好,而主密钥依然安全~</li>\n</ul>\n</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>请设定这把密钥的有效期限。</span>\n<span class=\"code-line\">     <span class=\"nv\">0</span> <span class=\"o\">=</span> 密钥永不过期</span>\n<span class=\"code-line\">  &lt;n&gt;  <span class=\"o\">=</span> 密钥在 n 天后过期</span>\n<span class=\"code-line\">  &lt;n&gt;w <span class=\"o\">=</span> 密钥在 n 周后过期</span>\n<span class=\"code-line\">  &lt;n&gt;m <span class=\"o\">=</span> 密钥在 n 月后过期</span>\n<span class=\"code-line\">  &lt;n&gt;y <span class=\"o\">=</span> 密钥在 n 年后过期</span>\n<span class=\"code-line\">密钥的有效期限是？<span class=\"o\">(</span><span class=\"m\">0</span><span class=\"o\">)</span></span>\n</pre></div>\n<p>接下来为密钥设置有效期啦~</p>\n<p>不用担心密钥过期啦,因为在密钥过期前汝还是可以用 gpg --edit-key 命令来重新设置有效期呗~</p>\n<p>设定完过期时间以后输入 y 确认.</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id6\">标识密钥对</a></h2>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>You need a user ID to identify your key<span class=\"p\">;</span> the software constructs the user ID</span>\n<span class=\"code-line\">from the Real Name, Comment and Email Address in this form:</span>\n<span class=\"code-line\">    <span class=\"s2\">\"Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;\"</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">真实姓名：</span>\n<span class=\"code-line\">电子邮件地址：</span>\n<span class=\"code-line\">注释：</span>\n</pre></div>\n<p>在这里用姓名,电子邮件地址和注释标识这把密钥吧~</p>\n<p>gpg 会用这些信息生成特定的用户 ID ,以后对密钥进行操作都需要用到用户 ID 呐~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>您选定了这个用户标识：</span>\n<span class=\"code-line\">    “ThisIsAName <span class=\"o\">(</span>Comment<span class=\"o\">)</span> &lt;mailaddress@domain.tld&gt;”</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">更改姓名<span class=\"o\">(</span>N<span class=\"o\">)</span>、注释<span class=\"o\">(</span>C<span class=\"o\">)</span>、电子邮件地址<span class=\"o\">(</span>E<span class=\"o\">)</span>或确定<span class=\"o\">(</span>O<span class=\"o\">)</span>/退出<span class=\"o\">(</span>Q<span class=\"o\">)</span>？</span>\n</pre></div>\n<p>在输入完成之后会有一次确认的机会,觉得没问题就输入 O 继续吧~</p>\n<p>接下来会弹出一个对话框,提示汝输入一个密码来保护私钥.至于如何创建一个强密码......</p>\n<p>然后.....</p>\n<blockquote>\n我们需要生成大量的随机字节。这个时候您可以多做些琐事(像是敲打键盘、移动\n鼠标、读写硬盘之类的)，这会让随机数字发生器有更好的机会获得足够的熵数。</blockquote>\n<p>于是随便做些啥吧~</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id7\">完工啦~</a></h2>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>gpg: 密钥 A4A7BA4D077C612F 被标记为绝对信任</span>\n<span class=\"code-line\">gpg: revocation certificate stored as</span>\n<span class=\"code-line\"><span class=\"s1\">'/home/horo/.gnupg/openpgp-revocs.d/2A35F5ED3FB328E39DFADA2AA4A7BA4D077C612F.rev'</span></span>\n<span class=\"code-line\">公钥和私钥已经生成并经签名。</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">pub   rsa2048 <span class=\"m\">2016</span>-09-29 <span class=\"o\">[</span>SC<span class=\"o\">]</span></span>\n<span class=\"code-line\">    2A35F5ED3FB328E39DFADA2AA4A7BA4D077C612F</span>\n<span class=\"code-line\">    uid                      ThisIsAName <span class=\"o\">(</span>Comment<span class=\"o\">)</span> &lt;mailaddress@domain.tld&gt;</span>\n<span class=\"code-line\">    sub   rsa2048 <span class=\"m\">2016</span>-09-29 <span class=\"o\">[</span>E<span class=\"o\">]</span></span>\n</pre></div>\n<p>这个时候就表示密钥生成好啦~</p>\n<p>像 A4A7BA4D077C612F 这样的就是汝的用户 ID 啦,有时也会用到下面那个比较长的 ID.</p>\n<p>同时会在 .gnupg/openpgp-revocs.d/ 文件夹下生成一份吊销证书,当汝因为某些原因\n丢失了私钥或者怀疑密钥被窃时,可以用这个吊销证书来吊销汝的密钥.</p>\n<p>这样一对密钥就创建好啦~,下次再细水长流密钥的应用咯 😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 20,
      "title": " 一瞥 Arch Linux 中的 filesystem 软件包",
      "date_published": 1469376000,
      "body": "\n<p>闲来无事，然后就没有然后啦😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>闲来无事，然后就没有然后啦😂</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id5\">动机？</a></h2>\n<p>今天看了看知乎上的某个问题：\n<a class=\"reference external\" href=\"https://www.zhihu.com/question/37720991\">长期使用Arch，Gentoo等滚动更新的发行版是怎样的一种体验？</a></p>\n<p>好几个 Arch Linux 用户都是在一开始列出了 <span class=\"tag\">/var/log/pacman.log</span> 的第一行，用的是 <span class=\"tag\">head</span> 命令。</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># 咱没有各位的历史悠久啦~</span></span>\n<span class=\"code-line\">$ head -1 /var/log/pacman.log</span>\n<span class=\"code-line\"><span class=\"o\">[</span><span class=\"m\">2014</span>-11-18 <span class=\"m\">19</span>:37<span class=\"o\">]</span> installed filesystem <span class=\"o\">(</span><span class=\"m\">2014</span>.10-1<span class=\"o\">)</span></span>\n</pre></div>\n<p>然后这个 filesystem 是啥咧？</p>\n<p>然后 <a class=\"reference external\" href=\"/links.html#farseerfc\">farseerfc</a> 这么写到：</p>\n<blockquote>\npacman -Ql filesystem 看下它都有什麼唄。\n這個包就是提供最基礎的 Arch Linux 的目錄結構和一些不屬於任何別的包的配置文件。\n這樣 Arch Linux 裏面任何系統文件都在 pacman 管轄範圍內了。</blockquote>\n<p>嗯……😋</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">😋 开始行动</a></h2>\n<p>那就首先照着 fc 的写法来一遍呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>horo@yoitsu-surfacebook ~<span class=\"o\">]</span>$ pacman -Ql filesystem</span>\n<span class=\"code-line\">filesystem /bin</span>\n<span class=\"code-line\">filesystem /boot/</span>\n<span class=\"code-line\">filesystem /dev/</span>\n<span class=\"code-line\">filesystem /etc/</span>\n<span class=\"code-line\">filesystem /etc/arch-release</span>\n<span class=\"code-line\">filesystem /etc/crypttab</span>\n<span class=\"code-line\">filesystem /etc/fstab</span>\n<span class=\"code-line\">filesystem /etc/group</span>\n<span class=\"code-line\">filesystem /etc/gshadow</span>\n<span class=\"code-line\">filesystem /etc/host.conf</span>\n<span class=\"code-line\">filesystem /etc/hosts</span>\n<span class=\"code-line\">filesystem /etc/issue</span>\n<span class=\"code-line\">filesystem /etc/ld.so.conf</span>\n<span class=\"code-line\">filesystem /etc/ld.so.conf.d/</span>\n<span class=\"code-line\">filesystem /etc/motd</span>\n<span class=\"code-line\">filesystem /etc/mtab</span>\n<span class=\"code-line\">filesystem /etc/nsswitch.conf</span>\n<span class=\"code-line\">filesystem /etc/passwd</span>\n<span class=\"code-line\">filesystem /etc/profile</span>\n<span class=\"code-line\">filesystem /etc/profile.d/</span>\n<span class=\"code-line\">filesystem /etc/profile.d/locale.sh</span>\n<span class=\"code-line\">filesystem /etc/resolv.conf</span>\n<span class=\"code-line\">filesystem /etc/securetty</span>\n<span class=\"code-line\">filesystem /etc/shadow</span>\n<span class=\"code-line\">filesystem /etc/shells</span>\n<span class=\"code-line\">filesystem /etc/skel/</span>\n<span class=\"code-line\">filesystem /home/</span>\n<span class=\"code-line\">filesystem /lib</span>\n<span class=\"code-line\">filesystem /lib64</span>\n<span class=\"code-line\">filesystem /mnt/</span>\n<span class=\"code-line\">filesystem /opt/</span>\n<span class=\"code-line\">filesystem /proc/</span>\n<span class=\"code-line\">filesystem /root/</span>\n<span class=\"code-line\">filesystem /run/</span>\n<span class=\"code-line\">filesystem /sbin</span>\n<span class=\"code-line\">filesystem /srv/</span>\n<span class=\"code-line\">filesystem /srv/ftp/</span>\n<span class=\"code-line\">filesystem /srv/http/</span>\n<span class=\"code-line\">filesystem /sys/</span>\n<span class=\"code-line\">filesystem /tmp/</span>\n<span class=\"code-line\">filesystem /usr/</span>\n<span class=\"code-line\">filesystem /usr/bin/</span>\n<span class=\"code-line\">filesystem /usr/include/</span>\n<span class=\"code-line\">filesystem /usr/lib/</span>\n<span class=\"code-line\">filesystem /usr/lib/modprobe.d/</span>\n<span class=\"code-line\">filesystem /usr/lib/modprobe.d/usb-load-ehci-first.conf</span>\n<span class=\"code-line\">filesystem /usr/lib/os-release</span>\n<span class=\"code-line\">filesystem /usr/lib64</span>\n<span class=\"code-line\">filesystem /usr/local/</span>\n<span class=\"code-line\">filesystem /usr/local/bin/</span>\n<span class=\"code-line\">filesystem /usr/local/etc/</span>\n<span class=\"code-line\">filesystem /usr/local/games/</span>\n<span class=\"code-line\">filesystem /usr/local/include/</span>\n<span class=\"code-line\">filesystem /usr/local/lib/</span>\n<span class=\"code-line\">filesystem /usr/local/man/</span>\n<span class=\"code-line\">filesystem /usr/local/sbin/</span>\n<span class=\"code-line\">filesystem /usr/local/share/</span>\n<span class=\"code-line\">filesystem /usr/local/share/man</span>\n<span class=\"code-line\">filesystem /usr/local/src/</span>\n<span class=\"code-line\">filesystem /usr/sbin</span>\n<span class=\"code-line\">filesystem /usr/share/</span>\n<span class=\"code-line\">filesystem /usr/share/man/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man1/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man2/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man3/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man4/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man5/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man6/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man7/</span>\n<span class=\"code-line\">filesystem /usr/share/man/man7/archlinux.7.gz</span>\n<span class=\"code-line\">filesystem /usr/share/man/man8/</span>\n<span class=\"code-line\">filesystem /usr/share/misc/</span>\n<span class=\"code-line\">filesystem /usr/src/</span>\n<span class=\"code-line\">filesystem /var/</span>\n<span class=\"code-line\">filesystem /var/cache/</span>\n<span class=\"code-line\">filesystem /var/empty/</span>\n<span class=\"code-line\">filesystem /var/games/</span>\n<span class=\"code-line\">filesystem /var/lib/</span>\n<span class=\"code-line\">filesystem /var/lib/misc/</span>\n<span class=\"code-line\">filesystem /var/local/</span>\n<span class=\"code-line\">filesystem /var/lock</span>\n<span class=\"code-line\">filesystem /var/log/</span>\n<span class=\"code-line\">filesystem /var/log/old/</span>\n<span class=\"code-line\">filesystem /var/mail</span>\n<span class=\"code-line\">filesystem /var/opt/</span>\n<span class=\"code-line\">filesystem /var/run</span>\n<span class=\"code-line\">filesystem /var/spool/</span>\n<span class=\"code-line\">filesystem /var/spool/mail/</span>\n<span class=\"code-line\">filesystem /var/tmp/</span>\n</pre></div>\n<p>嗯 filesystem 的作用大概有这几个：</p>\n<ul>\n<li><p class=\"first\">首先摆好一个 Linux 发行版基本的目录结构。</p>\n<blockquote>\n<p>大多数 Linux 发行版的目录结构都是遵循 <a class=\"reference external\" href=\"https://zh.wikipedia.org/zh/文件系统层次结构标准\">文件系统层次结构标准</a>\n的啦，Arch 也不例外~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">然后放些 Arch 特有的文件</p>\n<blockquote>\n<p>例如默认设置啦（ <del>这不是废话么</del> ），甚至还有一个手册页（汝不妨试试 <span class=\"tag\">man archlinux</span> ?）</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id7\">所以嘛……</a></h2>\n<ul>\n<li><p class=\"first\">这下所有的文件都在 pacman 的纪录之下了呗~</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Pacman/Tips_and_tricks#Identify_files_not_owned_by_any_package\">ArchWiki 上有篇条目写着如何寻找不属于任何软件包的文件</a></p>\n</blockquote>\n</li>\n<li><p class=\"first\"><del>所以咱很无聊咯~</del> 😂😂</p>\n</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 19,
      "title": " 编译 OpenWrt 和加入 Alljoyn Framework 支持",
      "date_published": 1481558400,
      "body": "\n<p>编译 OpenWrt 和加入 Alljoyn Framework 支持（纯粹是为了完成任务……）😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>编译 OpenWrt 和加入 Alljoyn Framework 支持（纯粹是为了完成任务……）😂</p>\n\n<div class=\"section\" id=\"openwrt-alljoyn\">\n<h2><a class=\"toc-backref\" href=\"#id5\">OpenWrt 和 Alljoyn 分别是啥？</a></h2>\n<blockquote>\n<p>OpenWrt是适合于嵌入式设备的一个Linux发行版。</p>\n<p>相对原厂固件而言，OpenWrt不是一个单一、静态的固件，而是提供了一个可添加软件包的可写的文件系统。\n这使使用者可以自由的选择应用程序和配置，而不必受设备提供商的限制，并且可以使用一些适合某方面应用的软件包来定制你的设备。\n对于开发者来说，OpenWrt是一个框架，开发者不必麻烦的构建整个固件就能得到想要的应用程序；\n对于使用者来说，这意味着完全定制的能力，与以往不同的方式使用设备，OPKG包含超过3500个软件。\n默认使用LuCI作为web交互界面。</p>\n<p><a class=\"reference external\" href=\"https://openwrt.org\">OpenWrt</a></p>\n<p>AllJoyn，由高通公司主导的高通创新中心（Qualcomm Innovation Center）所开发的开放原始码专案，\n主要用于近距离无线传输，透过Wifi或蓝牙技术，进行定位与点对点档案传输。</p>\n<p>后来成为了 Linux 基金会赞助的项目之一。</p>\n<p><a class=\"reference external\" href=\"https://allseenalliance.org/\">AllSeen Alliance</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id6\">第一步：准备编译环境</a></h2>\n<p>OpenWrt 官方的文档在这： <a class=\"reference external\" href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\">https://wiki.openwrt.org/doc/howto/buildroot.exigence</a></p>\n<p>首先需要保证汝的硬盘上还剩下至少 4GiB 左右的剩余空间啦~</p>\n<p>然后安装编译所需的工具，Arch 的话大概 <span class=\"tag\">base-devel</span> 组就够了吧 😂</p>\n<blockquote>\n# pacman -S base-devel git</blockquote>\n<p>官方文档 “Table of known prerequisites and their corresponding packages”\n一节列出了编译不同组件各自需要的软件包，\n还是装上吧😂,用 <span class=\"tag\">--needed</span> 参数跳过已经安装的包。</p>\n<blockquote>\n# pacman -S asciidoc bash bc binutils bzip2 fastjar flex git\ngcc util-linux gawk gtk2 intltool zlib make cdrkit ncurses patch\nperl-extutils-makemaker python2 rsync ruby sdcc unzip wget gettext\nlibxslt zlib boost libusb bin86 sharutils jdk7-openjdk</blockquote>\n<p>除了编译 lilo 需要的 bcc &lt;- 这个在 AUR： <a class=\"reference external\" href=\"https://aur.archlinux.org/packages/bcc/\">https://aur.archlinux.org/packages/bcc/</a></p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">第二步：准备源代码</a></h2>\n<p>这个时候就要打开汝的终端啦😋</p>\n<p>和其它项目类似，不同的 git 分支也是不同的版本呗~：</p>\n<blockquote>\n<p>git clone git://github.com/openwrt/openwrt.git</p>\n<p>（master 分支，也就是 openwrt 的 trunk 版本）</p>\n<p>git clone -b chaos_calmer git://github.com/openwrt/openwrt.git</p>\n<p>（openwrt 的 chaos_calmer (15.05) 版本）</p>\n<p>git clone -b barrier_breaker git://github.com/openwrt/openwrt.git</p>\n<p>（openwrt 的 barrier_breaker (14.09) 版本）</p>\n</blockquote>\n<p>如果要像咱一样添加第三方软件（例如 Alljoyn）的话，用文字编辑器打开汝的 <span class=\"tag\">feeds.conf</span>\n（有可能是 <span class=\"tag\">feeds.conf.default</span>，记得编辑完保存成 <span class=\"tag\">feeds.conf</span>），加上适当的feed：</p>\n<p>（咱还是用 Alljoyn 做例子呐~）</p>\n<blockquote>\n<p>src-git alljoyn <a class=\"reference external\" href=\"https://git.allseenalliance.org/gerrit/core/openwrt_feed;barrier_breaker\">https://git.allseenalliance.org/gerrit/core/openwrt_feed;barrier_breaker</a></p>\n<p>（因为咱是 barrier_breaker 啦，官方还支持  Attitude Adjustment 和 12.09，像下面那样）</p>\n<p>src-git alljoyn <a class=\"reference external\" href=\"https://git.allseenalliance.org/gerrit/core/openwrt_feed;attitude_adjustment\">https://git.allseenalliance.org/gerrit/core/openwrt_feed;attitude_adjustment</a></p>\n<p>（Attitude Adjustment）</p>\n<p>src-git alljoyn <a class=\"reference external\" href=\"https://git.allseenalliance.org/gerrit/core/openwrt_feed;openwrt_12.09\">https://git.allseenalliance.org/gerrit/core/openwrt_feed;openwrt_12.09</a></p>\n<p>（official OpenWrt v12.09 tagged release）</p>\n</blockquote>\n<p>记住按汝自己的版本选择一个添加进去就好😂</p>\n<p>然后更新 feeds 列表：</p>\n<blockquote>\n<p>./scripts/feeds update -a</p>\n<p>PS: 有拉黑过 Wosign 和 StartCom 证书的用户会在 clone Alljoyn 仓库时遇到证书错误，像这样😂：</p>\n<blockquote>\nfatal: unable to access '<a class=\"reference external\" href=\"https://git.allseenalliance.org/gerrit/core/openwrt_feed/\">https://git.allseenalliance.org/gerrit/core/openwrt_feed/</a>':\nSSL certificate problem: unable to get local issuer certificate</blockquote>\n<p>( Linux Foundation 竟然没用自己赞助的 Let's Encrypt 😹)</p>\n<p>所以只好委曲求全先让 git 对证书错误睁一只眼闭一只眼吧 😿:</p>\n<blockquote>\n<p>export GIT_SSL_NO_VERIFY=true</p>\n<p>./scripts/feeds update -a</p>\n<p>unset GIT_SSL_NO_VERIFY</p>\n</blockquote>\n</blockquote>\n<p>然后安装需要的包，安装以后稍后的 <span class=\"tag\">make menuconfig</span> 中就可以见到了 😂</p>\n<blockquote>\n<p>./scripts/feeds install {package_name}</p>\n<p>要偷懒的话可以先全装上 😂</p>\n<p>./scripts/feeds install -a</p>\n<p>和咱一样要装 Alljoyn 的就再这样 😂😂</p>\n<p>./scripts/feeds install -a -p alljoyn</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">第三步：设置编译选项</a></h2>\n<p>（咱不知道 menuconfig 怎么说😂）</p>\n<p>接下来运行 <span class=\"tag\">make menuconfig</span> 打开设置界面：</p>\n<img alt=\"大概像这个样子😂\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/openwrt/menuconfig.png\">\n<p>⬆️大概像这个样子，自己编译过 Linux 内核的话应该不会陌生吧😂</p>\n<p>然而选项太多所以还是需要自己选择 😂</p>\n<ul>\n<li><p class=\"first\">Target System 选择成汝路由器的平台，这个可以在 <a class=\"reference external\" href=\"https://wiki.openwrt.org/toh/start\">https://wiki.openwrt.org/toh/start</a> 的每个型号的 TechData 中找到。</p>\n</li>\n<li><p class=\"first\">Target Profile 选择汝路由器的型号，或者保留默认的 Default Profile (all drivers) 选项，不过这会生成所有设备的映像😂</p>\n<blockquote>\n<p>对于选择的选项：</p>\n<blockquote>\n<p>[*] built-in ，表示这项功能内置在生成的映像中（小心映像空间爆炸装不上😂)</p>\n<p>[ ] excluded  ，就是不含啦😂</p>\n<p>&lt;M&gt; module  ，这项功能会在编译时生成将来能通过 opkg 安装的软件包呗~</p>\n<p>&lt; &gt; module capable （😂，这啥……）</p>\n</blockquote>\n<p>和咱一样要装 Alljoyn 的话,Alljoyn 在 Network 一节里。</p>\n</blockquote>\n</li>\n</ul>\n<p>编辑完成以后就用下边的 Save 选项保存呗~</p>\n<blockquote>\n<p>*** End of the configuration.</p>\n<p>*** Execute 'make' to start the build or try 'make help'.</p>\n</blockquote>\n<p>应该会有这么两行😂</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">第四步：开始编译</a></h2>\n<p>接下来就开始编译呗：</p>\n<blockquote>\nmake</blockquote>\n<p>或者后台编译：</p>\n<blockquote>\nionice -c 3 nice -n19 make -j 2</blockquote>\n<p>或者打开喋喋不休模式😂：</p>\n<blockquote>\nmake V=s</blockquote>\n<p>然后可以洗洗睡了（雾😹</p>\n<hr class=\"docutils\">\n<p><del>转天早上醒来如果没出错的话就能在  <buildroot_dir>/bin （ <buildroot_dir> 换成汝 OpenWrt 目录的文件夹）</buildroot_dir></buildroot_dir></del>\n<del>看到生成的映像了呗~</del></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 18,
      "title": " 用 dm-crypt 加密一下 Parabola",
      "date_published": 1492358400,
      "body": "\n<p>用 dm-crypt 加密一下 btrfs 上的 Parabola……</p>\n<p><del>纯粹是闲的无聊……</del></p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>用 dm-crypt 加密一下 btrfs 上的 Parabola……</p>\n<p><del>纯粹是闲的无聊……</del></p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id9\">为啥要加密？</a></h2>\n<p>简单说：文件加密可以防范失窃，保护隐私or备份数据，和提防某些人……</p>\n<p>复杂点的话……\n<a class=\"reference external\" href=\"https://program-think.blogspot.com/2011/05/file-encryption-overview.html\">看看这个咯~</a></p>\n</div>\n<div class=\"section\" id=\"dm-crypt\">\n<h2><a class=\"toc-backref\" href=\"#id10\">为啥是 dm-crypt?</a></h2>\n<p>因为是 Linux 内核内置哒~ （好没有说服力的借口呐）</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">加密开始前的准备工作</a></h2>\n<ul>\n<li><p class=\"first\">准备一个外部硬盘（放加密过程中备份的系统啦）</p>\n</li>\n<li><p class=\"first\">一个 Live USB （因为中间要格掉原来的系统……）</p>\n</li>\n<li><p class=\"first\">然后备份一下系统。</p>\n<blockquote>\n<p>btrfs 的话可以用发送快照的方式呗~</p>\n<ul>\n<li><p class=\"first\">首先创建一个只读快照：</p>\n<blockquote>\n<p># btrfs subvolume snapshot -r &lt;源位置&gt; &lt;目标位置&gt;</p>\n<p>例如 btrfs subvolume snapshot -r / /root_backup 就会在 /root_backup 新建一个 / 的快照~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">然后发送出去：</p>\n<blockquote>\n<p># btrfs send &lt;快照名称&gt; | btrfs receive &lt;目标位置&gt;</p>\n<p>例如咱把一个硬盘挂载到了 /mnt 的话：</p>\n<p># btrfs send /root_backup | btrfs receive /mnt/</p>\n</blockquote>\n</li>\n</ul>\n<p>不是 btrfs 的话就自行发挥想象力咯~ （比如\n<a class=\"reference external\" href=\"/arch-linux/get_surface_book.html\">和咱以前一样用 rsync</a> ~ ）</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id12\">创建加密分区</a></h2>\n<p>如果汝一开始不是安装了整个 core 组的话，先把 cryptsetup 装上咯~ _(:з」∠)_</p>\n<p>然后创建加密分区：</p>\n<blockquote>\n# cryptsetup luksFormat &lt;设备文件的名称&gt;</blockquote>\n<p>如果需要的话，可以在 luksFormat 之前加上一些选项呐：</p>\n<blockquote>\n<table border=\"1\" class=\"black-text white stripped docutils highlight\">\n<colgroup>\n<col width=\"14%\">\n<col width=\"18%\">\n<col width=\"20%\">\n<col width=\"48%\">\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">参数的名称</th>\n<th class=\"head\">这啥？</th>\n<th class=\"head\">推荐是多少？</th>\n<th class=\"head\"><del>一些废话</del></th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>--cipher</td>\n<td>加密方式</td>\n<td>aes-xts-plain64</td>\n<td>AES 加密算法搭配 XTS 模式</td>\n</tr>\n<tr><td>--key-size</td>\n<td>密钥长度</td>\n<td>512</td>\n<td>XTS 模式需要两对密钥，\n每个的长度是256</td>\n</tr>\n<tr><td>--hash</td>\n<td>散列算法</td>\n<td>sha512</td>\n<td>&nbsp;</td>\n</tr>\n<tr><td>--iter-time</td>\n<td>迭代时间</td>\n<td>&gt;10000</td>\n<td>单位是毫秒。该值越大，暴力破解越难；\n但是相应的汝打开加密分区时就要等一下啦~</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<p>例如这样？</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># cryptsetup --cipher aes-xts-plain64 --key-size 512 --hash sha512 --iter-time 10000 luksFormat /dev/nvme0n1p1</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">WARNING!</span>\n<span class=\"code-line\"><span class=\"o\">========</span></span>\n<span class=\"code-line\">这将覆盖 /dev/nvme0n1p1 上的数据，该动作不可取消。</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">Are you sure? <span class=\"o\">(</span>Type uppercase yes<span class=\"o\">)</span>:</span>\n<span class=\"code-line\"><span class=\"c1\"># 上面要打大写的 YES</span></span>\n<span class=\"code-line\"><span class=\"c1\"># 然后输入两遍加密分区的密码。</span></span>\n<span class=\"code-line\">输入密码：</span>\n<span class=\"code-line\">确认密码：</span>\n</pre></div>\n<p>然后等一下就好咯~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id13\">打开加密分区</a></h2>\n<blockquote>\n# cryptsetup open &lt;已经加密的设备文件名称&gt; &lt;映射名称&gt;</blockquote>\n<p>解密的分区会映射到 /dev/mapper/&lt;汝设置的映射名称&gt; 呗~</p>\n<p>例如咱解密 /dev/nvme0n1p1 ，然后映射到 /dev/mapper/sysroot :</p>\n<blockquote>\n# cryptsetup open /dev/nvme0n1p1 sysroot</blockquote>\n<p>接下来就像操作普通分区一样操作 /dev/mapper/sysroot 就好啦~</p>\n<p>然后把刚刚备份好的系统再搬回来 _(:з」∠)_</p>\n<blockquote>\n<p>如果汝也是用 btrfs send receive 搬回来的，别忘了让快照可写:</p>\n<blockquote>\n# btrfs property set -ts &lt;快照的位置&gt; ro false</blockquote>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id14\">重新设置一下系统 ~</a></h2>\n<p>相比与原来的系统，现在的变化就是分区和启动方式改变了呐~</p>\n<p>下面咱就假设它在 /mnt 啦 ~</p>\n<div class=\"section\" id=\"fstab-chroot\">\n<h3><a class=\"toc-backref\" href=\"#id15\">fstab + chroot</a></h3>\n<p>首先重新生成一下 fstab ：</p>\n<blockquote>\n# genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab</blockquote>\n<p>然后打开它，检查一下有没有问题 ( ⚆ _ ⚆ )</p>\n<p>接着 chroot 进去：</p>\n<blockquote>\n# arch-chroot /mnt</blockquote>\n</div>\n<div class=\"section\" id=\"mkinitcpio\">\n<h3><a class=\"toc-backref\" href=\"#id16\">mkinitcpio</a></h3>\n<p>因为加密了嘛，所以要让内核知道怎么解开咯~ （就是带上 encrypt HOOK 啦……</p>\n<p>打开 /etc/mkinitcpio.conf ：</p>\n<blockquote>\n<ul>\n<li><p class=\"first\">为了用键盘加上 keyboard</p>\n</li>\n<li><p class=\"first\">如果汝有用 systemd hooks 的话，把 sd-encrypt 添加到 block 和 filesystems 之间咯，像这样：</p>\n<blockquote>\n<p>HOOKS=\"base systemd autodetect keyboard modconf block sd-encrypt filesystems fsck\"</p>\n</blockquote>\n</li>\n<li><p class=\"first\">不是的话加上 encrypt 咯~</p>\n<blockquote>\n<p>HOOKS=\"base udev autodetect keyboard consolefont modconf block encrypt filesystems fsck\"</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<p>最后重新生成一下 initramfs ：</p>\n<blockquote>\n# mkinitcpio -p linux</blockquote>\n<p>如果汝在用其它内核的话，用内核的名称（例如 linux-mainline ) 换掉 linux 呐~</p>\n</div>\n<div class=\"section\" id=\"sysytemd\">\n<h3><a class=\"toc-backref\" href=\"#id17\">内核参数 （非 sysytemd ）</a></h3>\n<blockquote>\n如果汝用了 sd-encrypt HOOK，跳过看下面的 &gt;_&lt;</blockquote>\n<p>这时就需要 cryptdevices 参数啦~，大概这么写:</p>\n<blockquote>\ncryptdevices=&lt;加密的分区&gt;:&lt;解密后使用的映射&gt;</blockquote>\n<p>例如咱解密 /dev/nvme0n1p1 ，然后映射到 /dev/mapper/sysroot 的话：</p>\n<blockquote>\ncryptdevices=/dev/nvme0n1p1:sysroot</blockquote>\n<p>如果有不止一个加密分区的话，就挨个写，然后用分号分开，就像这样：</p>\n<blockquote>\ncryptdevices=/dev/nvme0n1p1:sysroot;/dev/nvme0n1p2:sysext</blockquote>\n<p>如果汝是手动设置的 root 参数的话，记得换成刚刚写的映射位置:</p>\n<blockquote>\nroot=/dev/mapper/sysroot</blockquote>\n</div>\n<div class=\"section\" id=\"id7\">\n<h3><a class=\"toc-backref\" href=\"#id18\">内核参数 （ sysytemd ）</a></h3>\n<blockquote>\n用了 sd-encrypt HOOK 来看啦~</blockquote>\n<p>首先汝需要加密分区的 UUID，lsblk -f 看一下就好啦~</p>\n<p>然后写一个 luks.name 参数:</p>\n<blockquote>\nluks.name=&lt;加密的分区的UUID&gt;=&lt;解密后使用的映射&gt;</blockquote>\n<p>像这样？</p>\n<blockquote>\nluks.name=160577ec-674c-4792-bdf5-3f4edd4aa00c=sysroot</blockquote>\n<p>如果汝是手动设置的 root 参数的话，记得换成刚刚写的映射位置:</p>\n<blockquote>\nroot=/dev/mapper/sysroot</blockquote>\n</div>\n<div class=\"section\" id=\"bootloaders\">\n<h3><a class=\"toc-backref\" href=\"#id19\">bootloaders</a></h3>\n<p>GRUB 的话可以把刚刚的内核参数加到 /etc/default/grub 的 GRUB_CMDLINE_LINUX 参数里，\n然后重新生成下配置文件咯</p>\n<p>systemd-boot 的话，把刚刚写的内核参数加进 conf 文件里的 options 参数咯~</p>\n</div>\n</div>\n<div class=\"section\" id=\"id8\">\n<h2><a class=\"toc-backref\" href=\"#id20\">收尾工作</a></h2>\n<blockquote>\n<p>卸载然后关闭加密分区：</p>\n<blockquote>\n<p># umount -R &lt;某个挂载点&gt;</p>\n<p># cryptsetup close &lt;映射名称&gt;</p>\n</blockquote>\n</blockquote>\n<p>如果需要的话，擦除一下刚刚用的备份分区 ( ⚆ _ ⚆ )</p>\n<hr class=\"docutils\">\n<p>然后重新启动就好啦~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 17,
      "title": " 某个自白和告白书",
      "date_published": 1492876800,
      "body": "\n<p>今天又是崩坏的日常呢……</p>\n<p>又一次在退了 #archlinux-cn-offtopic 的 Telegram 分部以后退掉了所有 Telegram 群。</p>\n<p>又一次辜负了大家对咱的信任呐~</p>\n<p>特别是一直在努力关照咱的 <a class=\"reference external\" href=\"/links.html#void001\">void001</a> 呢 😭</p>\n<p>好像这一次大家的怒火也终于爆发出来了（=咱彻底被讨厌了）的样子……</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>今天又是崩坏的日常呢……</p>\n<p>又一次在退了 #archlinux-cn-offtopic 的 Telegram 分部以后退掉了所有 Telegram 群。</p>\n<p>又一次辜负了大家对咱的信任呐~</p>\n<p>特别是一直在努力关照咱的 <a class=\"reference external\" href=\"/links.html#void001\">void001</a> 呢 😭</p>\n<p>好像这一次大家的怒火也终于爆发出来了（=咱彻底被讨厌了）的样子……</p>\n<blockquote>\n夏娜对不起 😭 （虽然这一次真的是得不到原谅了……</blockquote>\n<div class=\"section\" id=\"id2\">\n<h2>所以呢？</h2>\n<p>大概这就是咱让人讨厌的地方吧：</p>\n<ul class=\"simple\">\n<li>什么都不懂，却总想被关照……</li>\n<li>莫名其妙的讨厌一些其它人认为习以为常的事物</li>\n<li>心理脆弱不堪（不知道这样的行为已经是第几次了可还是毫无知觉</li>\n<li>伤得最深的往往是最关注的人……</li>\n<li>一时冲动闹出不少笑话</li>\n<li>想的太多做的太少</li>\n<li>尽管如此还是逞强挤出一副一眼被看穿的笑容</li>\n<li>然后又一次伤了最关注的人</li>\n<li>总是想寻求存在感却不会争取</li>\n<li>然后被后来居上，被嘲笑，被遗忘……</li>\n<li>喜欢自己定些毫无依据的规则，还要强行套在其它人身上</li>\n<li>最后自己也没得执行只能不了了之</li>\n<li>随便给人贴标签，然后一次次的……</li>\n<li>……</li>\n<li>知道如此却不会改正，咱就是这么悲哀啊……</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 16,
      "title": " 使用 SSH 远程连接运行 GNU/Linux 的计算机",
      "date_published": 1492876800,
      "body": "\n<p>约等于 Windows 的远程桌面……</p>\n<p>本文里用到的是 GNU/Linux 发行版一般都会有的 ssh 命令啦~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>约等于 Windows 的远程桌面……</p>\n\n<p>本文里用到的是 GNU/Linux 发行版一般都会有的 ssh 命令啦~</p>\n<div class=\"section\" id=\"ssh\">\n<h2><a class=\"toc-backref\" href=\"#id8\">SSH 是啥？</a></h2>\n<blockquote>\n<p>Secure Shell（縮寫为SSH），由IETF的網路工作小組（Network Working Group）所制定；SSH為一项建立在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。</p>\n<p>而SSH是目前较可靠，專为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。透過SSH可以對所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p>\n<p>SSH之另一項優點為其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的「通道」。</p>\n</blockquote>\n<p>当然现在用的更多的是 SSH 的一种叫做 OpenSSH 的自由实现啦~</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id9\">做点准备工作</a></h2>\n<p>首先要把 openssh 装上啦，具体看发行版了呗（比如有些是把客户端和服务端拆分成\nopenssh-client 和 openssh-server 一类的，有的就直接是一个大包 openssh 了呗~ ）</p>\n<p>然后服务器上生成一下主机密钥咯，这个操作大概启动 sshd （ssh daemon 的缩写？）服务\n时多半就会自动完成了吧…… 大概像这样？</p>\n<blockquote>\n<p>有 Systemd 的发行版：</p>\n<p># systemctl start sshd</p>\n<p>有 sysVinit 或者 upStart 的发行版：</p>\n<p># /etc/init.d/sshd start</p>\n</blockquote>\n<p>然后记下来服务器的 IP 地址咯~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id10\">最简单的连接</a></h2>\n<blockquote>\nssh [&lt;用户名&gt;@]&lt;主机名或者IP地址&gt;</blockquote>\n<p>如果没有用户名的话，就会用汝当前的用户名作为连接到服务器时使用的用户名咯~</p>\n<blockquote>\n<p>下面的例子里咱其实是自己连自己了……</p>\n<p>$ ssh <a class=\"reference external\" href=\"mailto:horo@localhost\">horo@localhost</a></p>\n</blockquote>\n<p>第一次连接时大概像这样：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>The authenticity of host <span class=\"s1\">'localhost (::1)'</span> can<span class=\"err\">'</span>t be established.</span>\n<span class=\"code-line\">ECDSA key fingerprint is SHA256:ZrEikKJj6wqLk8Cqgs6JWXGX3FgS2iQI6aK73GTCHVk.</span>\n<span class=\"code-line\">Are you sure you want to <span class=\"k\">continue</span> connecting <span class=\"o\">(</span>yes/no<span class=\"o\">)</span>?</span>\n</pre></div>\n<p>大概的意思就是“咱好像不记得汝要去的这个地方呐~”，毕竟是第一次连接嘛。</p>\n<blockquote>\n如果汝在连接其它人的服务器的话，可以让他/她/它把服务器的指纹发来确认一下。</blockquote>\n<p>如果确认了以后，就输入 yes 让 ssh 客户端记下来。</p>\n<p>然后：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Warning: Permanently added <span class=\"s1\">'localhost'</span> <span class=\"o\">(</span>ECDSA<span class=\"o\">)</span> to the list of known hosts.</span>\n<span class=\"code-line\">horo@localhost<span class=\"err\">'</span>s password:</span>\n</pre></div>\n<p>这里输入密码。记得输入密码时就是什么都没有，不用担心键盘坏了啦~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Last login: Thu Mar  <span class=\"m\">9</span> <span class=\"m\">23</span>:00:10 <span class=\"m\">2017</span></span>\n<span class=\"code-line\"><span class=\"o\">[</span>horo@Yoitsu_SurfaceBook horo<span class=\"o\">]</span> $</span>\n</pre></div>\n<p>这样大概就是登录成功了呗，如果工作做完了以后，记得关闭连接呐~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>horo@Yoitsu_SurfaceBook horo<span class=\"o\">]</span> $ <span class=\"nb\">exit</span></span>\n<span class=\"code-line\">Connection to localhost closed.</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">使用密钥连接</a></h2>\n<p>为啥要用密钥登录？其实咱也说不清楚……</p>\n<blockquote>\n<p>大概是因为不容易泄漏和不容易暴力破解？</p>\n<p>或者上 <a class=\"reference external\" href=\"https://security.stackexchange.com/questions/69407/why-is-using-an-ssh-key-more-secure-than-using-passwords\">Stack Exchange</a> 问问？</p>\n</blockquote>\n<p>首先生成一对密钥：</p>\n<blockquote>\n<p>$ ssh-keygen -t rsa -b 4096</p>\n<p>其中的 -t rsa 表示加密算法的类型是 RSA\n其中的 -b 4096 表示密钥是 4096 bit</p>\n<p>注意不同加密算法的位数是没有可比性的啦~\n对于 RSA 加密算法而言， &gt;2048 bit 应该足够安全了呗~\n（然而默认是 1024 bit 的，只好手动加点……）</p>\n</blockquote>\n<p>整个过程大概像这样：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"o\">[</span>horo@Yoitsu_SurfaceBook ~<span class=\"o\">]</span>$ ssh-keygen -t rsa</span>\n<span class=\"code-line\">Generating public/private rsa key pair.</span>\n<span class=\"code-line\"><span class=\"c1\"># 密钥存在哪？</span></span>\n<span class=\"code-line\">Enter file in which to save the key <span class=\"o\">(</span>/home/horo/.ssh/id_rsa<span class=\"o\">)</span>:</span>\n<span class=\"code-line\"><span class=\"c1\"># 为私钥设置一个密码</span></span>\n<span class=\"code-line\">Enter passphrase <span class=\"o\">(</span>empty <span class=\"k\">for</span> no passphrase<span class=\"o\">)</span>:</span>\n<span class=\"code-line\">Enter same passphrase again:</span>\n<span class=\"code-line\">Your identification has been saved in /home/horo/.ssh/id_rsa.</span>\n<span class=\"code-line\">Your public key has been saved in /home/horo/.ssh/id_rsa.pub.</span>\n<span class=\"code-line\">The key fingerprint is:</span>\n<span class=\"code-line\"><span class=\"c1\"># 这是密钥的指纹啦~</span></span>\n<span class=\"code-line\">SHA256:nySil+IhkH0yDg1eYFIOdY8Zq7j3vxo6Wlab9znx17Q horo@Yoitsu_SurfaceBook</span>\n<span class=\"code-line\">The key<span class=\"err\">'</span>s randomart image is:</span>\n<span class=\"code-line\">+---<span class=\"o\">[</span>RSA <span class=\"m\">2048</span><span class=\"o\">]</span>----+</span>\n<span class=\"code-line\"><span class=\"p\">|</span><span class=\"nv\">o</span><span class=\"o\">=</span>o o            <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>oo.. *           <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>. ..+ .          <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>.*..             <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span><span class=\"o\">=</span>.* o . S .      <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span> <span class=\"o\">=</span> <span class=\"o\">=</span> + o.+ .  .  <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>. * B +  oo  o . <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span> +.<span class=\"o\">=</span> * .... . E  <span class=\"p\">|</span></span>\n<span class=\"code-line\"><span class=\"p\">|</span>....+oo.o. .     <span class=\"p\">|</span></span>\n<span class=\"code-line\">+----<span class=\"o\">[</span>SHA256<span class=\"o\">]</span>-----+</span>\n</pre></div>\n<p>把这对密钥的公钥（ /home/horo/.ssh/id_rsa.pub ）添加到 authorized_keys 里：</p>\n<blockquote>\n<p>$ cat /home/horo/.ssh/id_rsa.pub &gt; /home/horo/.ssh/authorized_keys</p>\n<p>因为 sshd 默认会从 authorized_keys 里寻找接受哪些密钥连接啦~</p>\n</blockquote>\n<p>把私钥 （/home/horo/.ssh/id_rsa ）复制到汝自己的电脑上咯~</p>\n<p>然后连接服务器时，用 -i 参数指定使用哪一个私钥文件：</p>\n<blockquote>\n$ ssh [&lt;用户名&gt;@]&lt;主机名或者IP地址&gt; -i &lt;私钥文件的路径&gt;</blockquote>\n<p>如果汝遇到了这样的错误：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span>\n<span class=\"code-line\">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span>\n<span class=\"code-line\">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span>\n<span class=\"code-line\">Permissions 0755 for '/home/horo/.ssh/id_rsa' are too open.</span>\n<span class=\"code-line\">It is required that your private key files are NOT accessible by others.</span>\n<span class=\"code-line\">This private key will be ignored.</span>\n<span class=\"code-line\">Load key \"/home/horo/.ssh/id_rsa\": bad permissions</span>\n</pre></div>\n<p>这表示汝的私钥的权限设置的不对啦 &gt;_&lt;</p>\n<p>对于私钥文件这种只需要读取的文件来说，自己能读就足够啦~</p>\n<blockquote>\n<p>$ chmod 400 &lt;私钥文件的路径&gt;</p>\n<p>类 Unix 系统的权限位大多数都是像这样的八进制数啦，三位从左向右\n分别表示文件的所有者，所属于的组，和其它人分别拥有的权限。</p>\n<p>而其中 4 表示读，2表示写，1表示执行啦~</p>\n<p>所以 400 = 自己只能读，所属的组和其它人看都不能看！</p>\n<p>关于文件权限的更多内容，就先从维基百科开始咯~：</p>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/File_system_permissions\">https://en.wikipedia.org/wiki/File_system_permissions</a></p>\n<p>而保护私钥文件的措施，推荐这篇文章：</p>\n<p><a class=\"reference external\" href=\"https://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html\">https://martin.kleppmann.com/2013/05/24/improving-security-of-ssh-private-keys.html</a></p>\n</blockquote>\n<p>如果汝设置了私钥密码的话，需要在连接时输入私钥的密码（而不再是汝用户的密码了呐~）</p>\n<p>如果可以成功登录了的话，就可以关掉密码登录了呗：</p>\n<blockquote>\n<p>用汝喜欢的文字编辑器（和 root 权限）打开 /etc/ssh/sshd_config 文件，\n找到 PasswordAuthentication 这一行，把后面的 yes 改成 no 。</p>\n<p>如果没有的话就自己加一行 PasswordAuthentication no 咯~</p>\n</blockquote>\n<p>顺便可以禁止用 root 登录：</p>\n<blockquote>\n<p>找到 PermitRootLogin 这一行，把后面的 yes 改成 no 。</p>\n<p>如果没有的话就自己加一行 PermitRootLogin no 咯~</p>\n</blockquote>\n<p>然后保存，记得需要重新启动 sshd 服务才能生效咯~</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id12\">用不同的端口连接</a></h2>\n<p>可以稍微防止被扫描到？</p>\n<blockquote>\n<p>用汝喜欢的文字编辑器（和 root 权限）打开 /etc/ssh/sshd_config 文件，\n找到 #Port 22 这一行，去掉前面的 # 号，然后自己设定一个数。</p>\n<p>保存，记得需要重新启动 sshd 服务才能生效咯~</p>\n<p>另外，大多数配置文件中 # 开头的行都是为了方便记忆和理解写下的注释，\n虽然程序不会用到，但是有时也很有用呐~</p>\n</blockquote>\n<p>如果设置了不同的端口，连接时加上 -p 选项：</p>\n<blockquote>\n$ ssh [&lt;用户名&gt;@]&lt;主机名或者IP地址&gt; -i &lt;私钥文件的路径&gt; -p &lt;汝所设置的端口&gt;</blockquote>\n<p>其实 ssh 的选项很多啦（不过咱就会这几个……），其它的选项怎么用，\n汝可以 man 一下咯~</p>\n<blockquote>\n$ man ssh</blockquote>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id13\">本地写点配置文件方便连接</a></h2>\n<p>随着命令越来越复杂，写的也越来越长，对记忆力也是个考验了呐~</p>\n<p>所以 ssh 客户端可以通过配置文件来简化一些操作呐~</p>\n<p>用汝喜欢的文字编辑器打开汝主文件夹下的 .ssh/config 文件，\n（如果没有的话就自己建立一个咯~</p>\n<p>然后每一个服务器这样写：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>Host &lt;这里可以起一个名字，一会儿会用到&gt;</span>\n<span class=\"code-line\">    HostName                  &lt;服务器的主机名或 IP 地址&gt;</span>\n<span class=\"code-line\">    Port                      &lt;端口&gt;</span>\n<span class=\"code-line\">    User                      &lt;用户名&gt;</span>\n<span class=\"code-line\">    PreferredAuthentications  publickey</span>\n<span class=\"code-line\">    # 偏好的验证方法，这里选择公钥验证</span>\n<span class=\"code-line\">    IdentityFile              &lt;汝的私钥文件路径&gt;</span>\n</pre></div>\n<p>然后汝可以通过 ssh &lt;刚刚设置的别名&gt; 来连接了哦~</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h2><a class=\"toc-backref\" href=\"#id14\">有时可能……</a></h2>\n<p>有时汝可能会遇到这样的错误呗~</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span>\n<span class=\"code-line\">   @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span>\n<span class=\"code-line\">   @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span>\n<span class=\"code-line\">   IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span>\n<span class=\"code-line\">   Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span>\n<span class=\"code-line\">   It is also possible that a host key has just been changed.</span>\n<span class=\"code-line\">   The fingerprint for the ECDSA key sent by the remote host is</span>\n<span class=\"code-line\">   SHA256:S8zGzMsXj0FbOyrTM9OTalx8pbddwmMdxeVXaKQaaA0.</span>\n<span class=\"code-line\">   Please contact your system administrator.</span>\n<span class=\"code-line\">   Add correct host key in /home/horo/.ssh/known_hosts to get rid of this message.</span>\n<span class=\"code-line\">   Offending ECDSA key in /home/horo/.ssh/known_hosts:2</span>\n<span class=\"code-line\">   ECDSA host key for localhost has changed and you have requested strict checking.</span>\n<span class=\"code-line\">   Host key verification failed.</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">这表示服务器发送来的主机密钥和汝 known_hosts 中的不相同呗~</span>\n<span class=\"code-line\">有可能是遇到了中间人攻击，或者只是汝重装了系统或者重新生成了主机密钥而已……</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">如果汝在连接其它人的服务器的话，最好还是确认一下为好~</span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\">要真的是汝重装了系统了的话，就把新的主机密钥记下来呗~找到 known_hosts 对应的那一行修改一下就好了啦~</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id15\">最后……</a></h2>\n<p>其实保护服务器只靠这些还是不够啦~，可以考虑使用一些防暴力攻击的软件，或者防火墙\n（例如 ufw ），当然上网搜索一些前人的姿势也大有裨益咯~</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 15,
      "title": " 在 Arch Linux 上用 Prosody 搭建 XMPP 服务器",
      "date_published": 1486224000,
      "body": "\n<p>在 Arch Linux 上用 Prosody 搭建 XMPP 服务器😋</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>在 Arch Linux 上用 Prosody 搭建 XMPP 服务器😋</p>\n\n<div class=\"section\" id=\"xmpp\">\n<h2><a class=\"toc-backref\" href=\"#id4\">XMPP 是啥？</a></h2>\n<p>😂 连这个都不知道？</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://tonghuix.io/2015/03/xmpp-chat/\">https://tonghuix.io/2015/03/xmpp-chat/</a></p>\n<p>⇪网页标题：弃用QQ和微信！全面转向基于XMPP(Jabber)的即时聊天</p>\n</blockquote>\n<p>这篇文章简单的介绍了下 XMPP 的基本特点，也推荐了些不同平台的客户端。</p>\n</div>\n<div class=\"section\" id=\"prosody\">\n<h2><a class=\"toc-backref\" href=\"#id5\">为啥是 Prosody ？</a></h2>\n<p>因为好像大家都推荐😂</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id6\">😂 那么怎么搞？</a></h2>\n<p>按惯例先上 ArchWiki : <a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Prosody\">https://wiki.archlinux.org/index.php/Prosody</a> 😂</p>\n<p>和 Prosody 自己的文档: <a class=\"reference external\" href=\"https://prosody.im/doc/\">https://prosody.im/doc/</a></p>\n<p>首先安装 Prodosy （和它的依赖）：</p>\n<blockquote>\n# pacman -S prosody lua51-sec</blockquote>\n<p>lua51-sec 为 Prosody 提供了加密支持。所以还是装上它呗~</p>\n<p>然后修改下配置文件 /etc/prosody/prosody.cfg.lua :</p>\n<blockquote>\n顺便说一句 Lua 的注释是每一行前面的连字号呐~</blockquote>\n<p>下面写些咱做的修改😂</p>\n<ul class=\"simple\">\n<li>在 modules_enabled 中取消启用 version 和 uptime 模块，顺便启动些其他的模块。</li>\n<li>如果需要允许在客户端上注册的话，把 allow_registration 设置成 true 。</li>\n<li>开启 TLS 加密：</li>\n</ul>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"n\">ssl</span> <span class=\"o\">=</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 私钥文件的路径</span></span>\n<span class=\"code-line\">    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"s2\">\"/etc/prosody/certs/privkey.pem\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 证书文件的路径</span></span>\n<span class=\"code-line\">    <span class=\"n\">certificate</span> <span class=\"o\">=</span> <span class=\"s2\">\"/etc/prosody/certs/fullchain.pem\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 要点是证书和私钥要对 prosody 用户可读😂</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 咱一开始就是没搞对然后 prosody 默默的以不加密模式运行了 😂</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 可以使用的协议，Prosody 0.10以上版本，可以使用\"tlsv1_2+\"；</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 若是较旧版本，可以使用\"sslv23\"开启所有协议支持，</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 然后在options中关闭除TLSv1.2之外的协议支持。</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 但是咱因为兼容性需要用的还是 tlsv1+ 😂</span></span>\n<span class=\"code-line\">    <span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"tlsv1+\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 加密选项，</span></span>\n<span class=\"code-line\">    <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span></span>\n<span class=\"code-line\">        <span class=\"c1\">--- 旧版加上这几行关掉老协议</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_tlsv1\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_tlsv1_1\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_sslv2\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_sslv3\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"c1\">--- 剩下的其实是 prosody 的默认选项😂</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_ticket\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"no_compression\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"cipher_server_preference\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"single_dh_use\"</span><span class=\"p\">,</span></span>\n<span class=\"code-line\">        <span class=\"s2\">\"single_ecdh_use\"</span></span>\n<span class=\"code-line\">        <span class=\"p\">};</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 为客户端到服务器（c2s）和服务器到服务器（s2s）打开认证</span></span>\n<span class=\"code-line\">    <span class=\"n\">verify</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s2\">\"peer\"</span><span class=\"p\">,</span> <span class=\"s2\">\"peer\"</span> <span class=\"p\">};</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- ciphers 是所使用的加密算法，写法就是 openSSL 的 cipher string 😂</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 这是默认配置</span></span>\n<span class=\"code-line\">    <span class=\"n\">ciphers</span> <span class=\"o\">=</span> <span class=\"s2\">\"HIGH+kEDH:HIGH+kEECDH:HIGH:!PSK:!SRP:!3DES:!aNULL\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 某个全是前向安全算法的配置 😂</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- 有没有大佬推荐个更好的配置啊 😂</span></span>\n<span class=\"code-line\">    <span class=\"n\">ciphers</span> <span class=\"o\">=</span> <span class=\"s2\">\"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\">    <span class=\"c1\">--- dhparam 文件的路径，要对 prosody 用户可读😂</span></span>\n<span class=\"code-line\">    <span class=\"n\">dhparam</span> <span class=\"o\">=</span> <span class=\"s2\">\"/etc/prosody/certs/dhparams.pem\"</span><span class=\"p\">;</span></span>\n<span class=\"code-line\"><span class=\"p\">}</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- Force clients to use encrypted connections? This option will</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- prevent clients from authenticating unless they are using encryption.</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- 对客户端到服务器强制启用加密</span></span>\n<span class=\"code-line\"><span class=\"n\">c2s_require_encryption</span> <span class=\"o\">=</span> <span class=\"kc\">true</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- 对服务器到服务器强制启用加密</span></span>\n<span class=\"code-line\"><span class=\"n\">s2s_require_encryption</span> <span class=\"o\">=</span> <span class=\"kc\">true</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- Force certificate authentication for server-to-server connections?</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- This provides ideal security, but requires servers you communicate</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- with to support encryption AND present valid, trusted certificates.</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- NOTE: Your version of LuaSec must support certificate verification!</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- For more information see https://prosody.im/doc/s2s#security</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- 是否验证远程服务器的证书？</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"n\">s2s_secure_auth</span> <span class=\"o\">=</span> <span class=\"kc\">true</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- Many servers don't support encryption or have invalid or self-signed</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- certificates. You can list domains here that will not be required to</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- authenticate using certificates. They will be authenticated using DNS.</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- 为某些不资瓷加密或者没设置好的辣鸡服务器换用DNS验证……</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">--s2s_insecure_domains = { \"gmail.com\" }</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- Even if you leave s2s_secure_auth disabled, you can still require valid</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- certificates for some domains by specifying a list here.</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- 如果 s2s_secure_auth = false ，可以在这里设置那些服务器一定启用验证</span></span>\n<span class=\"code-line\"><span class=\"c1\">--s2s_secure_domains = { \"jabber.org\" }</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"c1\">-- Select the authentication backend to use. The 'internal' providers</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- use Prosody's configured data storage to store the authentication data.</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- To allow Prosody to offer secure authentication mechanisms to clients, the</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- default provider stores passwords in plaintext. If you do not trust your</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- server please see https://prosody.im/doc/modules/mod_auth_internal_hashed</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- for information about using the hashed backend.</span></span>\n<span class=\"code-line\"><span class=\"c1\">-- 认证方式，\"internal_hashed\" 一般情况下就够了。</span></span>\n<span class=\"code-line\"><span class=\"n\">authentication</span> <span class=\"o\">=</span> <span class=\"s2\">\"internal_hashed\"</span></span>\n</pre></div>\n<ul>\n<li><p class=\"first\">某些其它设置……</p>\n<blockquote>\n<p>--- 新用户注册通知，会发到管理员的帐号上。\nregistration_notification = \"User $username just registered on $host from $ip\"\n--- 如果启用了 welcome 插件，在这里自定义欢迎消息\nwelcome_message = \"\"</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id7\">试用😂</a></h2>\n<p>然后测试下配置文件对不对(啥输出都没有就正常😂)</p>\n<blockquote>\nlua -p /etc/prosody/prosody.cfg.lua</blockquote>\n<p>一切正常的话就启动服务试试呗~</p>\n<blockquote>\n# systemctl start prosody</blockquote>\n<p>如果没开启允许客户端注册的话，用 prosodyctl 注册账户</p>\n<blockquote>\n# prosodyctl adduser &lt;JID&gt;</blockquote>\n</div>\n<hr class=\"docutils\">\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">参考来源 😂</a></h2>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Prosody\">https://wiki.archlinux.org/index.php/Prosody</a></p>\n<p>⇪网页标题：Prosody - ArchWiki</p>\n<p><a class=\"reference external\" href=\"https://blog.ayanami.re/archives/3/\">https://blog.ayanami.re/archives/3/</a></p>\n<p>⇪网页标题：自建 XMPP 的二三事 - El Virilea via Kralisch</p>\n</blockquote>\n</div>\n\n  </div>"
    },
    {
      "post_id": 14,
      "title": " 利用 CUPS 和 Samba 在 Arch Linux 和 Windows 间共享打印机",
      "date_published": 1473782400,
      "body": "\n<p>社团新买的打印机到啦,于是就要设置一下呗~ 😋</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>社团新买的打印机到啦,于是就要设置一下呗~ 😋</p>\n\n<div class=\"section\" id=\"cups-samba\">\n<h2><a class=\"toc-backref\" href=\"#id4\">CUPS,Samba 都是些啥？</a></h2>\n<blockquote>\n<p>CUPS（以前为 Common Unix Printing System，UNIX 通用打印系统的缩写，但现无官方全名）\n是一个类Unix操作系统的组合式印刷系统，允许一台电脑作为打印服务器。\nCUPS接受一个客户端的电脑进程，并送到相应的打印机。</p>\n<p>虽然有其他的打印程序包例如LPRNG，但CUPS是相当流行和相对容易使用的。\n它是Arch linux及许多其他Linux发行版缺省的打印系统。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/CUPS_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">ArchWiki:CUPS</a></p>\n</blockquote>\n<blockquote>\n<p>Samba是一个用于局域网中的计算机间文件共享的软件，这么说您大概还摸不着头脑，那么网上邻居您听说过吧？\n对，Samba就是干这个的。当年那个有点软公司设计了一套局域网计算机间的文件共享协议，\n起名叫做SMB，就是Server Message Block的缩写。当时所有的Windows系统就都集成这种协议，\n因此这个协议在局域网系统中的影响还比较大。后来，国际互联网，也就是Internet逐渐流行了起来，\n有点软公司希望他们的这个协议能够一个用在Internet上，因此对其进行的整理，\n更名为CIFS,也就是Common Internet File System。从名字可以看出，他们的期望是很高的\n，不过实际呢……反正，你现在用网上邻居上搜狐么？当然，不管怎样，CIFS或者说SMB协议在局域网中传输文件还是非常方便的。\n当然，我们Linux系统之间也有很好的局域网共享文件的协议，叫做NFS，\n网络文件系统的缩写。但无奈那该死的查皮不支持这个协议嘛，所以要想网络上的查皮和我之间能共享文件的话，\n要么我这里有人能懂CIFS协议，要么查皮那里有软件能解析NFS协议。\n然而毕竟还是我这里的软件大度一些，所以就有了用于支持SMB协议的软件——Samba。</p>\n<p class=\"attribution\">—<a class=\"reference external\" href=\"http://forum.ubuntu.org.cn/viewtopic.php?f=112&amp;t=162040\">笨兔兔的故事 - Ubuntu中文论坛</a></p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id5\">首先……😋</a></h2>\n<p>在 Windows 上连接好打印机，安装上驱动，再通过“设备与打印机”共享这个打印机，Windows 上的设置就完成啦~</p>\n<p>记得记下来 Windows 电脑的 IP 地址和打印机的名称，还有给共享打印机的账户设置个密码。</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">然后……😋😋</a></h2>\n<p>打开汝的 Arch Linux ，先安装必要的软件包：</p>\n<blockquote>\n# pacman -S cups, ghostscript gsfonts samba</blockquote>\n<p>然后激活并启动 CUPS 服务:</p>\n<blockquote>\n# systemctl enable org.cups.cupsd.service --now</blockquote>\n<p>这个时候就可以通过 <a class=\"reference external\" href=\"http://localhost:631\">http://localhost:631</a> 访问到 CUPS 的 Web 界面啦~</p>\n<img alt=\"CUPS Web 界面\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/cups_sharing_printer/-1.png\">\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">添加打印机 😋😋😋</a></h2>\n<p>首先点击 \"Administration\" 打开管理界面:</p>\n<img alt=\"CUPS Administration 界面\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/0.png\">\n<p>然后点击 \"Add printer\",这时会要求汝登录.咱只试过 root 登录能成功.....</p>\n<img alt=\"登录到管理界面\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/1.png\">\n<p>接下来选择要连接到哪种打印机啦,连接 Windows 打印机就选择\n\"Windows Printer via SAMBA\" (通过 Samba 连接 Windows 打印机) 呗~</p>\n<img alt=\"选择一种协议\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/2.png\">\n<p>接下来输入打印机的 URI 啦,\n对于 Windows 打印机 ,URI 大概像这样:</p>\n<blockquote>\n<span class=\"tag\">smb://{用户名}:{密码}@{Windows 的 IP 地址}/{打印机名称}</span></blockquote>\n<img alt=\"要连接到哪个打印机?\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/2b.png\">\n<p>接着用人类的语言描述一下这台打印机（例如名字和位置啦）~</p>\n<img alt=\"描述这台打印机\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/3.png\">\n<p>然后依照打印机的品牌和型号选择适合的驱动程序呗：</p>\n<blockquote>\n<p>咱这台 Samsung M2070 的打印机要从三星的网站上下载驱动 _(:з」∠)_</p>\n<p><a class=\"reference external\" href=\"http://www.samsung.com/printersetup\">http://www.samsung.com/printersetup</a></p>\n</blockquote>\n<img alt=\"选择打印机驱动程序\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/4.png\">\n<p>接着修改默认打印参数，保存，新的打印机就添加好啦~ 😋</p>\n<img alt=\"修改默认打印参数\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/5.png\">\n<p>为了测试打印机，可以从 Maintaince 菜单中选择 “Print Test Page” 打印一张测试页试试 😋</p>\n<img alt=\"Maintaince 菜单\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/6.png\">\n<p>还有记得添加汝自己成为可以使用打印机的用户：</p>\n<img alt=\"Administration 菜单\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/7.png\">\n<img alt=\"添加允许使用打印机的用户\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/8.png\">\n<p>然后桌面环境下的程序应该可以看到打印机了啦~（例如 GNOME）</p>\n<img alt=\"GNOME 下的打印机菜单\" class=\"materialboxed responsive-img\" src=\"/images/cups_sharing_printer/9.png\">\n<p>😋</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 13,
      "title": " 再续自绝后路之旅",
      "date_published": 1490716800,
      "body": "\n<p>咱成功的被忘掉了呢~</p>\n<p>那就继续一个人走下去咯~</p>\n<p>啦啦啦~</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMARY\n\n就是这样。 -->\n<p>咱成功的被忘掉了呢~</p>\n<p>那就继续一个人走下去咯~</p>\n<p>啦啦啦~</p>\n<hr class=\"docutils\">\n<ul>\n<li><p class=\"first\">前两篇扔进 draft 文件夹了，想取笑咱的可以去看 :</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"https://gitlab.com/KenOokamiHoro/pelican-yoitsu/tree/master\">https://gitlab.com/KenOokamiHoro/pelican-yoitsu/tree/master</a></p>\n</blockquote>\n</li>\n<li><p class=\"first\">换成 GitLab 了，于是评论就废了（反正也没人来了……</p>\n<blockquote>\n<p>真的想找咱的话就给咱发邮件： echo aG9yb0B5b2l0c3UubW9lCg== | base64 -d</p>\n<p>目前还没有用或者造轮子的想法……</p>\n</blockquote>\n</li>\n<li><p class=\"first\">......</p>\n<blockquote>\n<p>在这看不到的地方向 #archlinux-cn 和 #dev-horo 的曾经的友人说声抱歉吧，不过也没有必要原谅咱。</p>\n</blockquote>\n</li>\n</ul>\n\n  </div>"
    },
    {
      "post_id": 12,
      "title": " Windows Subsystem for Linux + Arch Linux",
      "date_published": 1475510400,
      "body": "\n<p>把 Bash on Ubuntu on Windows 上的 Ubuntu 换成 Arch Linux 😋</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>把 Bash on Ubuntu on Windows 上的 Ubuntu 换成 Arch Linux 😋</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">这啥？😂</a></h2>\n<p>从 Windows 10 Insider Preview 开始，加入了 Windows Subsystem for Linux (适用于 Linux 的 Windows 子系统) 功能.</p>\n<p>Windows Subsystem for Linux（简称WSL）是一个为在Windows 10上能够原生运行 Linux 二进制可执行文件（ELF 格式）的兼容层。\n它是由微软与 Canonical 公司合作开发，目标是使纯正的 Ubuntu Trusty Tahr映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p>\n<p>WSL提供了一个微软开发的 Linux 兼容内核接口（不包含Linux代码），来自 Ubuntu 的用户模式二进制文件在其上运行</p>\n<p>WSL 的具体应用就是 Bash on Ubuntu on Windows 啦，在 Windows 上实现了一个 Ubuntu 子系统。</p>\n<p>和常见的 Windows 上运行 Linux 的一系列方法相比：</p>\n<ul class=\"simple\">\n<li>相比虚拟机，不必运行整个系统，相应减少了资源占用（当然不保证提高编译效率🌚</li>\n<li>相比 Cygwin，Msys2 一类的解决方案，运行在 Ubuntu 上的软件（可能）不需要重新编译就能在 Bash on Ubuntu on Windows 上使用，也能使用 Ubuntu 软件仓库提供的软件包</li>\n<li>……</li>\n</ul>\n<p>听起来是不是很诱人啊😋</p>\n<p>然而……\n------------------------------‘</p>\n<p>上面的子系统是 Ubuntu…… (╯•̀-•́)╯ ┻━┻</p>\n<p>上面的子系统是 Ubuntu……  (╯・﹏・)╯ ┻━┻</p>\n<p>上面的子系统是 Ubuntu……  (╯＠△＠)╯ ┻━┻</p>\n<p><del>重要的事情说三遍</del> 😂😂</p>\n<p>于是把里面的 Ubuntu 换成其它系统的想法就应运而生了……</p>\n<p>其实已经有人这么做过了虽然并不完美 😂：\n<a class=\"reference external\" href=\"https://github.com/Microsoft/BashOnWindows/issues/992\">https://github.com/Microsoft/BashOnWindows/issues/992</a></p>\n<p>直到最近 Insider Preview 更新到 14396，终于实现了 chroot 系统调用\n（ <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/commandline/wsl/release_notes\">-&gt; Change Log</a> ），\n才使得在 WSL 上运行其它发行版的可用性更近了一步😂</p>\n<p>作为现 Arch Linux 用户，当然想在 WSL 上运行 Arch Linux 啦😋</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">开工 😏</a></h2>\n<p>首先得首先是要把 Bash on Ubuntu on Windows 装上 😂</p>\n<blockquote>\n<ul class=\"simple\">\n<li>更新到最新的 Windows 10 Insider Preview （现在是 14396.1000 ）</li>\n<li>从”设置-更新与恢复-适用于开发人员“中把开发人员模式打开。</li>\n<li>从”控制面板-程序和功能-启用或关闭 Windows 功能“中打开”适用于 Linux 的 Windows 子系统“</li>\n<li>重新启动，打开命令提示符或者 Windows PowerShell ，输入 bash 回车然后按提示完成安装……</li>\n</ul>\n</blockquote>\n<p>首先需要一个现成的 Arch Linux ，在上面用 arch-install-scripts 装好一个新的 Arch Linux，然后打包成 Tarball。</p>\n<p>然后进入 Bash on Ubuntu on Windows ，把刚刚的 Tarball 解开到某个位置。</p>\n<blockquote>\n<p>如果汝手边没有可用的 Linux 系统的话，也可以试试 ArchISO 的 rootfs：</p>\n<ul class=\"simple\">\n<li>从 ArchISO 中提取出 /arch/x86_64/airoot.sfs 文件放在 Bash on Ubuntu on Windows 能读取的目录下，然后复制/移动到能写入的目录。</li>\n<li>安装  squashfs-tools ，然后以 root 用户运行 <span class=\"tag\">unsquashfs airoot.sfs</span> ，把 ArchISO 的 Live 系统提取出来。</li>\n</ul>\n</blockquote>\n<p>然后把 Bash 窗口关掉，到 <span class=\"tag\">C:\\Users\\&lt;这是汝的用户名&gt;\\AppData\\Local\\Lxss</span> 文件夹中。</p>\n<blockquote>\n这个文件夹可能在文件资源管理器里看不到咧？可以选择在文件夹选项\n中把“隐藏受保护的操作系统文件”选项取消，或者直接在导航栏输入路径打开。</blockquote>\n<p>rootfs 文件夹就是 Bash 中的 / 啦，从里面找到刚解压出来的 tarball 的文件夹放在 lxss 目录下。</p>\n<p>把原来的 rootfs 文件夹重命名一下，再把刚解压出来的 tarball 的文件夹重命名为rootfs。</p>\n<p>打开命令提示符或者 Windows PowerShell ，<del>输入 bash</del> 等等先别着急打开 bash ，\n先用 <span class=\"tag\">lxrun /setdefaultuser root</span> 把默认的用户换成root\n（或者其它已经在 tarball 的 /etc/passwd 里的用户，例如 AOSC 的 tarball 里默认还会有一个 aosc 用户）</p>\n<p>然后再打开 bash ，Duang~</p>\n<img alt=\"WSL with Arch Linux\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/WSL_Arch/1.png\">\n<p>那个 screenfetch 是咱后来装的 😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id6\">现在还有点小问题 😂</a></h2>\n<p>fakeroot 在 WSL 里有点问题（可是咱忘了记下来日志了觉得咱自己好菜啊），只好写个假的 fakeroot 糊弄过去 😂：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"ch\">#!/bin/bash</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"-v\"</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span></span>\n<span class=\"code-line\">    <span class=\"nb\">echo</span> <span class=\"m\">1</span>.0</span>\n<span class=\"code-line\">    <span class=\"nb\">exit</span></span>\n<span class=\"code-line\"><span class=\"k\">fi</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"nb\">export</span> <span class=\"nv\">FAKEROOTKEY</span><span class=\"o\">=</span><span class=\"m\">1</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"nb\">exec</span> <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span></span>\n<span class=\"code-line\"></span>\n<span class=\"code-line\"><span class=\"nb\">unset</span> FAKEROOTKEY</span>\n</pre></div>\n<p>现在记得在 /etc/pacman.conf 里忽略 fakeroot 包 _(:з」∠)_</p>\n<p>按 <a class=\"reference external\" href=\"https://msdn.microsoft.com/en-us/commandline/wsl/release_notes\">WSL 的 Change Log</a> ,现在最新的 Build 14396\n会在某些 Socket 连接（例如 ssh / X ）时蓝屏报错 “ATTEMPTED EXECUTE OF NOEXECUTE MEMORY” ，这个只能等他们修复了_(:з」∠)_</p>\n<!-- ……\n不知道说什么好。\n还是不知道该说啥。\n算啦，谁何尝不是另一个人世界中的过客，\n少了咱一个又怎么样。\n嗯…… -->\n</div>\n\n  </div>"
    },
    {
      "post_id": 11,
      "title": " #archlinux-cn 活动手册（?）",
      "date_published": 1479744000,
      "body": "\n<p>Arch Linux 中文社区聊天频道 #archlinux-cn <del>伪</del> 活动手册 😋</p>\n<p><del>话说又一个月啥也没写了啊……果然不够才思泉涌……</del></p>\n<p>最近 #archlinux-cn 的新人越来越多了呐~ <del>(这不是很好么，咱就不愁没的吃了是呗~)</del> 😋</p>\n<p>于是为了 <ruby><rb>帮助新人</rb><rp>(</rp><rt>凑数</rt><rp>)</rp></ruby> 这篇文章就出炉啦 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>Arch Linux 中文社区聊天频道 #archlinux-cn <del>伪</del> 活动手册 😋</p>\n\n<p><del>话说又一个月啥也没写了啊……果然不够才思泉涌……</del></p>\n<p>最近 #archlinux-cn 的新人越来越多了呐~ <del>(这不是很好么，咱就不愁没的吃了是呗~)</del> 😋</p>\n<p>于是为了 <ruby><rb>帮助新人</rb><rp>(</rp><rt>凑数</rt><rp>)</rp></ruby> 这篇文章就出炉啦 😂</p>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id5\">前言</a></h2>\n<p>如果还不知道 Arch Linux 中文社区是啥的话……😋</p>\n<p>去看看这个呗\n<a class=\"reference external\" href=\"https://blog.yoitsu.moe/arch-linux/life/archlinux_cn_community_unoffical_newbie_guide.html\">Arch Linux 中文社区非官方生存手册</a></p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">各个接入点</a></h2>\n<blockquote>\n<del>我们的同志遍布五湖四海，甚至打入了某些组织的内部……</del></blockquote>\n<p>简单说就是连接到 Arch Linux 中文社区聊天频道的方法有很多啦……</p>\n<ul>\n<li><p class=\"first\">IRC</p>\n<blockquote>\n<p>IRC（Internet Relay Chat的缩写，“因特网中继聊天”）是一种通过网络的即时聊天方式。\n其主要用于群体聊天，但同样也可以用于个人对个人的聊天。</p>\n<p>就是 <a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn\">#archlinux-cn</a> 啦~</p>\n<p>直接戳上面的链接会打开 freenode 的 webchat 界面，\n输入昵称然后完成Google 的 NoCaptcha 验证后，点击连接（Connect）就可以进入本IRC频道啦~</p>\n<p>正在使用某种 IRC 客户端的话参阅汝所使用的 IRC 客户端的文档在 irc.freenode.net 上加入\n#archlinux-cn 就可以啦~</p>\n<p>想进一步了解 IRC 的使用方法的话推荐下维基百科的教程呗：</p>\n<p><a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/Wikipedia:IRC%E6%95%99%E7%A8%8B\">Wikipedia:IRC教程</a></p>\n</blockquote>\n</li>\n<li><p class=\"first\">XMPP</p>\n<blockquote>\n<p>XMPP（Extensible Messaging and Presence Protocol，前称Jabber）\n是一种以XML为基础的开放式即时通讯协定，是经由网际网路工程工作小组（IETF）通过的网际网路标准。</p>\n<p>习惯 XMPP 的用户可以添加 <a class=\"reference external\" href=\"mailto:talk@archlinuxcn.org\">talk@archlinuxcn.org</a> 为联系人，成功添加以后会收到一条消息呗~</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"mailto:talk@archlinuxcn.org\">talk@archlinuxcn.org</a>: 欢迎加入 Arch Linux 中文 XMPP 群！</p>\n<p>注意！非Arch系统的问题请提前声明系统</p>\n<p>你的昵称默认为「&lt;这里应该是个随机昵称然而咱不记得是啥了……&gt;」，\n使用「-nick 新昵称」来修改。</p>\n</blockquote>\n<p>设置一个新昵称然后打下招呼吧 😄</p>\n</blockquote>\n</li>\n<li><p class=\"first\">Telegram</p>\n<blockquote>\n<p>Telegram Messenger 是一个跨平台的即时通讯软件，它的客户端是自由及开放源代码软件，\n但是它的服务器是专有软件。</p>\n<p>使用者可以相互交换加密与自解构的讯息，以及相片、影片、文件，支援所有的档案类型。</p>\n<p>官方提供移动端(Android、iOS、Windows Phone)、\n桌面端(Windows、macOS、Linux)和网页端(Web version)应用；</p>\n<p>同时官方开放应用程序接口，因此会有一些第三方的客户端。</p>\n<p>后来为了防止破坏 Telegram 的群链接就取消啦，所以先用其它的方法进入频道，\n把自己的 Telegram Username 告诉其它人，再让已经在 Telegram 群里的人邀请呗~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">Gitter</p>\n<blockquote>\n<p>用 Github 或者 Twitter 账户登录，然后加入\n<a class=\"reference external\" href=\"https://gitter.im/archlinuxcn/generic\">https://gitter.im/archlinuxcn/generic</a> 这个聊天室呗~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">Martix</p>\n<blockquote>\n<p>用汝自己的 Martix 客户端 （比较常见的是以前叫做 vector 的 Riot）添加\n#freenode_#archlinux-cn:matrix.org\n这个房间就可以啦~</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"topic\">\n<h2><a class=\"toc-backref\" href=\"#id7\">熟读 topic 确保人身安全 （雾 😂</a></h2>\n<p>Topic set by farseerfc\n(<a class=\"reference external\" href=\"mailto:~farseerfc@archlinux/tu/farseerfc\">~farseerfc@archlinux/tu/farseerfc</a>) on Fri, 04 Nov 2016 21:11:36</p>\n<p>Arch Linux 欢迎喵 *^-^* | <del>卖萌</del></p>\n<p>不是 arch 请事先声明发行版 | 因为大家默认都是 Arch 😂 另外衍生发行版也要明确</p>\n<p>ttf-dejavu 注意新闻 | FFmpeg 3.1.1 | 中间大概会插两行官网的新闻和新的软件包</p>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org\">https://wiki.archlinux.org</a> | ArchWiki</p>\n<p><a class=\"reference external\" href=\"https://bbs.archlinuxcn.org\">https://bbs.archlinuxcn.org</a> | 中文论坛</p>\n<p><a class=\"reference external\" href=\"https://github.com/archlinuxcn\">https://github.com/archlinuxcn</a> | 中文社区软件仓库</p>\n<p>长文 <a class=\"reference external\" href=\"https://cfp.vim-cn.com\">https://cfp.vim-cn.com</a> | 因为 IRC 没断行于是直接贴长文会刷屏😂，用法见那个网站</p>\n<p>贴图 <a class=\"reference external\" href=\"https://img.vim-cn.com\">https://img.vim-cn.com</a> | 😂 如果用 Telegram 或者 Martix 的话可以直接发图，传话机器人能完成转换</p>\n<p>不要对着 teleboto xmppbot 说话，它们都是桥接机器人，人类的名字在它们后面 | 桥接机器人就是打通各个聊天软件的机器人啦~ 😋</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id8\">机器人列表</a></h2>\n<p>除了上面说的桥接机器人以外，目前待命中的机器人还有(括号里是操作者的名字)：</p>\n<p>具体的功能还是各位慢慢发掘呗~</p>\n<ul class=\"simple\">\n<li>xmppbot 里的 Lisa ( lilydjwg )</li>\n<li>varia ( gauge )</li>\n<li>labots ( lastavengers )</li>\n<li>Horobot ( FiveYellowMice )</li>\n<li>MoBot ( Youmu )</li>\n</ul>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id9\">分支频道</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"//webchat.freenode.net/?channels=archlinux-cn-offtopic\">#archlinux-cn-offtopic</a> ,计划中的水群频道，然而一直没实现 😂</li>\n</ul>\n<hr class=\"docutils\">\n<p>说好的 FAQ 呢  (╯‵_′)╯ ┻━┻ ？？</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 10,
      "title": " 这不是结束",
      "date_published": 1481644800,
      "body": "\n<p><del>这不是结束，</del></p>\n<p><del>（下一次会在哪里开始，又是以什么样开始呢，咱不知道……</del></p>\n<p>借口都已经找好了呢（😂），对没错就是重新画了个主题😂😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMARY\n\n:del:`因为根本就没有开始……`\n\n借口都已经找好了呢（😂） -->\n<p><del>这不是结束，</del></p>\n<blockquote>\n<p><del>因为根本就没有开始。</del></p>\n<p><del>那场短暂的梦境，是时候该醒来了。</del></p>\n<p><del>就这样吧，再见了。</del></p>\n</blockquote>\n<p><del>（下一次会在哪里开始，又是以什么样开始呢，咱不知道……</del></p>\n<hr class=\"docutils\">\n<p>借口都已经找好了呢（😂），对没错就是重新画了个主题😂😂</p>\n\n  </div>"
    },
    {
      "post_id": 9,
      "title": " 啥？一年了？？",
      "date_published": 1484582400,
      "body": "\n<p>啥？这样一年就过去了？？😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMARY\n\n真的么😂 -->\n\n<p>啥？这样一年就过去了？？😂</p>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id4\">咱这一年都干了啥？</a></h2>\n<ul>\n<li><p class=\"first\"><del>觅食……</del> 😋</p>\n</li>\n<li><p class=\"first\">注册了个 Telegram 帐号，然后去 #archlinux-cn 吹水， <del>再删号</del> ……</p>\n</li>\n<li><p class=\"first\">买了 Surface Book ，又从社团借（？）来不少好玩的东西。</p>\n</li>\n<li><p class=\"first\">一个小时里总有那么几十分钟在迷茫😂，然后干了不少可笑的事（比如把 GitHub 帐号删了几天以后又重新注册这样的……）</p>\n</li>\n<li><p class=\"first\">沉迷音游不能自拔（虽然手残……）😂</p>\n</li>\n<li><p class=\"first\">为了 Project DIVA Future Tone 买了 PS4 😂</p>\n<blockquote>\n<img alt=\"就是这个\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/PDFT.jpg\">\n<p>⬆️ 就是这个😂</p>\n</blockquote>\n</li>\n<li><p class=\"first\">赶工粗制滥造了两套 Pelican 主题（根本就没有达到可以复用的层次……）😂</p>\n</li>\n<li><p class=\"first\">挖了不知道多少坑没填 😂😭</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"future-tone\">\n<h2><a class=\"toc-backref\" href=\"#id5\">最近沉迷 Future Tone 不能自拔 😂</a></h2>\n<p>虽然一直被虐……</p>\n<img alt=\"就是这个\" class=\"materialboxed responsive-img\" src=\"/images/one_year/2.jpg\">\n<p><del>一定是因为玩这个的人不多……</del></p>\n<img alt=\"就是这个\" class=\"materialboxed responsive-img\" src=\"/images/one_year/3.jpg\">\n<p>/me 手残没法治😂</p>\n<img alt=\"Extreme 就只有被虐的份😂\" class=\"materialboxed responsive-img\" src=\"/images/one_year/4.png\">\n<p>Extreme 就只有被虐的份😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id6\">接下来咱要干啥？</a></h2>\n<ul class=\"simple\">\n<li><del>接着觅食……</del> 😋</li>\n<li>整理下长草的 wiki 然后放点东西上去……</li>\n<li>写些小程序（和微信那个啥关系都没有……）</li>\n<li>为社团下学期 GNU/Linux 桌面培训（自称）准备讲义😂</li>\n<li><del>继续玩 Project DIVA Future Tone ……</del></li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 8,
      "title": " 在腾讯云服务器中重装 Windows 系统为 Arch Linux",
      "date_published": 1482854400,
      "body": "\n<p>灵感来自 <a class=\"reference external\" href=\"https://danknest.org/install-linux-on-qcloud-windows-cvm\">https://danknest.org/install-linux-on-qcloud-windows-cvm</a> 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>灵感来自 <a class=\"reference external\" href=\"https://danknest.org/install-linux-on-qcloud-windows-cvm\">https://danknest.org/install-linux-on-qcloud-windows-cvm</a> 😂</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id7\">为啥？😂</a></h2>\n<blockquote>\n<p>腾讯云只给 Linux 系统的云服务器赠送 <del>8G</del> 20G 系统盘以强行推销数据盘，\n而 <del>由于这样抠门的限制在 Windows 系统上是显然行不通的，</del> 给 Windows 系统赠送 50G 系统盘。</p>\n<p>😒</p>\n<p>所以…… 😏</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id8\">前期准备</a></h2>\n<p>准备 Arch Linux 和 Debian 的安装 ISO 就行 😹</p>\n<img alt=\"前期工作……\" class=\"materialboxed responsive-img\" src=\"https://blog.yoitsu.moe/images/QVM_Arch/2.png\">\n<p>然后打开 控制面板-网络连接 记下现在的网络信息 （谁叫没有 DHCP 用😂</p>\n<img alt=\"网络信息\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/1.png\">\n<p>然后照 <a class=\"reference external\" href=\"/arch-linux/installing_arch_linux_for_complete_newbies.html#id4\">这里</a></p>\n<p>准备一个新分区出来，大小比 Arch Linux ISO 大点，然后记得格式化成 FAT32 😂</p>\n<img alt=\"分区\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/5.png\">\n<p>接着把两个 ISO 挂载上。</p>\n<img alt=\"挂载 ISO\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/6.png\">\n</div>\n<div class=\"section\" id=\"debian\">\n<h2><a class=\"toc-backref\" href=\"#id9\">用 Debian 安装程序加载器生成启动项</a></h2>\n<p>用兼容性选项设置 Debian 安装盘下的 setup.exe 以 Windows Vista 运行（不然会报错说不支持 Windows NT 6.x\n( 好像只支持 Vista 就是 6.0 的样子 😂 )</p>\n<img alt=\"兼容性设置\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/7.png\">\n<p>然后运行，不过先别忙着重启……</p>\n<img alt=\"running……\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/9.png\">\n<p>这个时候把 Arch ISO 的文件复制到新的分区上，然后照着 ISO 改一下卷标 😂</p>\n<img alt=\"改卷标……\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/15.png\">\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id10\">改启动项 + 重启</a></h2>\n<p>把 ISO 或者硬盘上 /arch/boot/x86_64/ 里的 vmlinuz 和 archiso.img 复制到\nC 盘的根目录，必要的话改成小写</p>\n<img alt=\"这\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/17.png\">\n<img alt=\"那\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/18.png\">\n<p>然后打开 C:/win32-loader/grub.cfg 改成这样 （记得把卷标换成汝自己的）：</p>\n<blockquote>\n<p>linux /vmlinuz archisobasedir=arch archisolabel=ARCH_201612</p>\n<p>initrd /archiso.img</p>\n<p>boot</p>\n</blockquote>\n<img alt=\"😂\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/19.png\">\n<p>最后重启，用 CVM 的控制台登录，选 Debian 啥的那项😂:</p>\n<img alt=\"😂\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/21.png\">\n<p>等若干秒：</p>\n<img alt=\"😂\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/22.png\">\n<p>😂😂</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id11\">连上网</a></h2>\n<p>（之前说过企鹅云不给 DHCP 😂</p>\n<p>于是拿出刚刚抄下来的网络信息备用。</p>\n<p>首先，用 ip link 确定一下接口 （咱是ens3 😂</p>\n<img alt=\"ip link\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/23.png\">\n<p>然后添加 IP 地址：</p>\n<blockquote>\n<p>ip addr add {用 CIDR 表示的 IP 地址} dev {汝的网卡名称}</p>\n<p>(CIDR = <a class=\"reference external\" href=\"https://zh.wikipedia.org/wiki/无类别域间路由\">无类别域间路由</a> )</p>\n</blockquote>\n<p>例如咱的子网掩码是 255.255.192.0 就这么写：</p>\n<blockquote>\nip addr add 10.141.60.78/18 dev ens3</blockquote>\n<p>接着添加网关：</p>\n<blockquote>\nip route add default via {网关 IP 地址}</blockquote>\n<p>最后编辑 /etc/resolv.conf 改成抄下来的 DNS 服务器地址 😂:</p>\n<img alt=\"/etc/resolv.conf\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/24.png\">\n<p>然后联网试试？😂</p>\n<img alt=\"😂\" class=\"materialboxed responsive-img\" src=\"/images/QVM_Arch/25.png\">\n<hr class=\"docutils\">\n<p>然后在 CVM 上直接装或者打开 sshd 用自己的电脑连上去啥的就自己围观 ArchWiki 好啦：</p>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Installation_guide\">https://wiki.archlinux.org/index.php/Installation_guide</a></p>\n<p><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Install_from_SSH\">https://wiki.archlinux.org/index.php/Install_from_SSH</a></p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 7,
      "title": " systemd-boot 从安装到吃电脑（误",
      "date_published": 1492272000,
      "body": "\n<p>systemd-boot 从安装到吃电脑（误 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>systemd-boot 从安装到吃电脑（误 😂</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id8\">Systemd-boot 是啥？</a></h2>\n<blockquote>\n<p>systemd-boot (以前被称为gummiboot)\n是可以执行 EFI 镜像文件的简单 UEFI 启动管理器。\n启动的内容可以通过一个配置(glob)或者屏幕菜单选择。Arch 默认安装的 systemd 提供了这个功能。</p>\n<p>配置很简单，但是只能启动 EFI 可执行程序，\n例如 Linux 内核 EFISTUB, UEFI Shell, GRUB, Windows Boot Manager等。</p>\n</blockquote>\n<p>Systemd: 😋 =&gt; gummiboot</p>\n<p>现在 Arch 的安装 ISO 在 UEFI 启动时用的就是这个启动管理器 😂</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id9\">安装之前</a></h2>\n<ul>\n<li><p class=\"first\"><strong>这是个 UEFI 启动管理器，于是 BIOS 系统是不能用的</strong> 😂</p>\n</li>\n<li><p class=\"first\"><strong>首先汝的 EFI 系统分区最好足够大而且挂载在 /boot 上……</strong> 😂</p>\n<blockquote>\n<ul class=\"simple\">\n<li>用 UEFI 该知道 EFI 系统分区是啥了吧😂</li>\n<li>（不知道从哪里听说的）推荐大小是 512M ，Windows 自动创建的应该也够用（ ~260M? ）</li>\n</ul>\n</blockquote>\n</li>\n<li><p class=\"first\">Arch Linux 的话还要安装上 efibootmgr 和 dosfstools 这两个包。</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"systemd-boot-efi\">\n<h2><a class=\"toc-backref\" href=\"#id10\">请 systemd-boot 入 EFI 系统分区 😋</a></h2>\n<blockquote>\n<p># bootctl install --path=/boot</p>\n<p>⬆️ 像这样安装 systemd-boot 咯，--path 是 EFI 系统分区的位置。</p>\n<p>如果不在电脑的内置硬盘上安装的话，加上 --no-variables ，就不会碰本机的 efivars 啦 😄</p>\n<p>（下面可都当作把 EFI 系统分区挂载在 /boot 了咯~</p>\n</blockquote>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id11\">配置文件怎么写？</a></h2>\n<p>（教会 systemd-boot 去哪里找汝的 GNU/Linux 系统的内核和如何启动等其它参数咯 😃</p>\n<p>systemd-boot 的配置文件都放在 /boot/loader 呐~ ，里面还有一个 entries 文件夹\n用来存放不同的启动项。</p>\n<blockquote>\n如果存在的话,bootctl 会自动为 \"Windows Boot Manager (Windows 启动管理器)\"\n(\\EFI\\Microsoft\\Boot\\Bootmgfw.efi), \"EFI Shell\" (\\shellx64.efi) 和\n\"EFI Default Loader\" (\\EFI\\Boot\\bootx64.efi) 增加启动选项哦。于是就不用写这三个了呐~</blockquote>\n<p>基本配置 /boot/loader/loader.conf 像这样：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>default  arch    &lt;- 默认启动选项的文件名（没有 .conf 哦</span>\n<span class=\"code-line\">timeout  <span class=\"m\">4</span>       &lt;- 选择启动选项的时间（如果没有这一项的话，启动时就不会弹出菜单</span>\n<span class=\"code-line\">                    而是直接启动默认启动项呐~不过启动时按住按键还是会显示启动菜单的啦😸</span>\n<span class=\"code-line\">editor   <span class=\"m\">0</span>       &lt;- 要不要允许在启动选项前按 e 键来更改启动选项呢？</span>\n</pre></div>\n<p>一个 systemd-boot 配置文件大概像这样：</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title          在启动管理器中显示的标题</span>\n<span class=\"code-line\">version        内核版本,只在有多个 title 时需要.</span>\n<span class=\"code-line\">machine-id     通过 /etc/machine-id用于区分不同设备的名称, 只在有多个title 和 version 时需要</span>\n<span class=\"code-line\">efi            要启动的EFI应用程序的位置,以 EFI 系统分区为相对路径哦<span class=\"p\">;</span></span>\n<span class=\"code-line\">               例如 /vmlinuz-linux （记住 systemd-boot 不会找 EFI 系统分区以外的分区上的文件 &gt;_&lt;</span>\n<span class=\"code-line\">options        传递给 EFI 应用程序或内核启动的参数,可选.</span>\n<span class=\"code-line\">               比如启动 linux 内核就需要 <span class=\"nv\">initrd</span><span class=\"o\">=</span>efipath 和 <span class=\"nv\">root</span><span class=\"o\">=</span>dev 选项呐~</span>\n</pre></div>\n<p>不过汝要是启动 Linux 内核的话，可以不用 efi 而这么写</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>linux          &lt; vmlinuz的位置 &gt;</span>\n<span class=\"code-line\">initrd         path-to-initramfs</span>\n</pre></div>\n<p>initrd 会自动转换成 efi path 和 options initrd=path 咯~</p>\n<p>– 这个语法只是为了方便,在功能上并没有区别的啦 (つ°ω°)つ</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id12\">动手写配置文件啦~ 🤣</a></h2>\n<p>首先用 lsblk 确定汝的根分区是哪一个设备:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>$ lsblk</span>\n<span class=\"code-line\">NAME        MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT</span>\n<span class=\"code-line\">nvme0n1     <span class=\"m\">259</span>:0    <span class=\"m\">0</span> <span class=\"m\">238</span>.5G  <span class=\"m\">0</span> disk</span>\n<span class=\"code-line\">├─nvme0n1p1 <span class=\"m\">259</span>:1    <span class=\"m\">0</span>   260M  <span class=\"m\">0</span> part  /boot</span>\n<span class=\"code-line\">├─nvme0n1p2 <span class=\"m\">259</span>:2    <span class=\"m\">0</span>   128M  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─nvme0n1p3 <span class=\"m\">259</span>:3    <span class=\"m\">0</span>  <span class=\"m\">50</span>.1G  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─nvme0n1p4 <span class=\"m\">259</span>:4    <span class=\"m\">0</span>    60G  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─nvme0n1p5 <span class=\"m\">259</span>:5    <span class=\"m\">0</span>   900M  <span class=\"m\">0</span> part</span>\n<span class=\"code-line\">├─nvme0n1p6 <span class=\"m\">259</span>:6    <span class=\"m\">0</span>   124G  <span class=\"m\">0</span> part  /</span>\n<span class=\"code-line\">└─nvme0n1p7 <span class=\"m\">259</span>:7    <span class=\"m\">0</span>   <span class=\"m\">3</span>.1G  <span class=\"m\">0</span> part</span>\n</pre></div>\n<p>比如咱的是 /dev/nvme0n1p7 (就是哪一个的 MOUNTPOINT 是 / 咯) 😂</p>\n<p>然后获得它的 PARTUUID 😋</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span><span class=\"c1\"># blkid -s PARTUUID -o value /dev/nvme0n1p6</span></span>\n<span class=\"code-line\">d39fe55a-0aa1-455e-84d7-0325e917b47b</span>\n</pre></div>\n<p>所以下面咱就用 d39fe55a-0aa1-455e-84d7-0325e917b47b 作为咱的 PARTUUID 咯~</p>\n<blockquote>\n汝的一定和咱的不一样，所以别一个字不差的照抄！ 😡</blockquote>\n<div class=\"section\" id=\"id5\">\n<h3><a class=\"toc-backref\" href=\"#id13\">最简单的配置文件</a></h3>\n<p>如果汝的 / 既不是 LVM 又没加密的话:</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title          Arch Linux</span>\n<span class=\"code-line\">linux          /vmlinuz-linux</span>\n<span class=\"code-line\">initrd         /initramfs-linux.img</span>\n<span class=\"code-line\">options        <span class=\"nv\">root</span><span class=\"o\">=</span><span class=\"nv\">PARTUUID</span><span class=\"o\">=</span>d39fe55a-0aa1-455e-84d7-0325e917b47b rw</span>\n</pre></div>\n<ul class=\"simple\">\n<li>可以把 title 换成汝喜欢的名字，如果汝用了其它内核（例如 linux-mainline ），\n记得修改一下 linux 和 initrd 选项。</li>\n<li>如果需要加载 Intel microcode 的话，就再来一行 initrd 咯~</li>\n<li>如果还有其它的内核参数，加在 rw 后面咯~</li>\n</ul>\n</div>\n<div class=\"section\" id=\"lvm\">\n<h3><a class=\"toc-backref\" href=\"#id14\">用了 LVM？</a></h3>\n<blockquote>\n😣 等等！如果汝 LVM 逻辑卷组的外面没有一个单独的 /boot 的话就不能用 systemd-boot 了~</blockquote>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title          Arch Linux <span class=\"o\">(</span>LVM<span class=\"o\">)</span></span>\n<span class=\"code-line\">linux          /vmlinuz-linux</span>\n<span class=\"code-line\">initrd         /initramfs-linux.img</span>\n<span class=\"code-line\">options        <span class=\"nv\">root</span><span class=\"o\">=</span>/dev/mapper/&lt;VolumeGroup-LogicalVolume&gt; rw</span>\n</pre></div>\n<p>记得把 VolumeGroup 和 LogicalVolume 换成汝自己的 LVM 逻辑卷的卷组和卷名称啊~</p>\n<p>当然用 UUID 也可以啦~</p>\n</div>\n<div class=\"section\" id=\"id6\">\n<h3><a class=\"toc-backref\" href=\"#id15\">加密的 / ？</a></h3>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title           Arch Linux Encrypted</span>\n<span class=\"code-line\">linux           /vmlinuz-linux</span>\n<span class=\"code-line\">initrd          /initramfs-linux.img</span>\n<span class=\"code-line\">options         <span class=\"nv\">cryptdevice</span><span class=\"o\">=</span><span class=\"nv\">PARTUUID</span><span class=\"o\">=</span>d39fe55a-0aa1-455e-84d7-0325e917b47b:&lt;mapped-name&gt; <span class=\"nv\">root</span><span class=\"o\">=</span>/dev/mapper/&lt;mapped-name&gt; quiet rw</span>\n</pre></div>\n<p>mapped-name 是解密后的分区映射到的位置咯~，只要 cryptdevice 和 root 里的一样就行！~</p>\n</div>\n<div class=\"section\" id=\"btrfs\">\n<h3><a class=\"toc-backref\" href=\"#id16\">btrfs 子卷？</a></h3>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title          Arch Linux</span>\n<span class=\"code-line\">linux          /vmlinuz-linux</span>\n<span class=\"code-line\">initrd         /initramfs-linux.img</span>\n<span class=\"code-line\">options        <span class=\"nv\">root</span><span class=\"o\">=</span><span class=\"nv\">PARTUUID</span><span class=\"o\">=</span>d39fe55a-0aa1-455e-84d7-0325e917b47b rw <span class=\"nv\">rootflags</span><span class=\"o\">=</span><span class=\"nv\">subvol</span><span class=\"o\">=</span>ROOT</span>\n</pre></div>\n<p>记得用汝自己的子卷名称换掉 rootflags=subvol=ROOT 里的 ROOT 啦 ~</p>\n</div>\n<div class=\"section\" id=\"uefi\">\n<h3><a class=\"toc-backref\" href=\"#id17\">其它 UEFI 应用程序？</a></h3>\n<p>例如 EFI Shell ？</p>\n<div class=\"highlight\"><pre><span class=\"code-line\"><span></span>title  UEFI Shell x86_64 v2</span>\n<span class=\"code-line\">efi    /EFI/shellx64_v2.efi</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"id7\">\n<h2><a class=\"toc-backref\" href=\"#id18\">参考来源</a></h2>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://wiki.archlinux.org/index.php/Systemd-boot\">ArchWiki:Systemd-boot</a></li>\n<li><a class=\"reference external\" href=\"http://www.freedesktop.org/wiki/Software/systemd/systemd-boot/\">http://www.freedesktop.org/wiki/Software/systemd/systemd-boot/</a></li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 6,
      "title": " /dev/horo ~",
      "date_published": 1487520000,
      "body": "\n<p>在 <a class=\"reference external\" href=\"/links.html#void001\">void001</a> 的推动下这个 <ruby><rb>玩具</rb><rp>(</rp><rt>挖坑</rt><rp>)</rp></ruby> 项目终于开始做了呢 😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMARY\n\nDevice as a Wolf!\n\n将赫萝放入你的电脑，与(Cheng)她(Wei)愉(Ta)快(De)玩(Shi)耍(Wu)吧！ 😋 -->\n\n<p>在 <a class=\"reference external\" href=\"/links.html#void001\">void001</a> 的推动下这个 <ruby><rb>玩具</rb><rp>(</rp><rt>挖坑</rt><rp>)</rp></ruby> 项目终于开始做了呢 😂</p>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id2\">那么这个到底是啥？ 😂</a></h2>\n<blockquote>\n<p>FiveYellowMice：可以成为萌狼的食物主人。</p>\n<p>lilydjwg：@FiveYellowMice: s/主人/奴隶/</p>\n</blockquote>\n<p>现在做的像是一个设备文件咯😂,然后可以通过 echo / cat 一类的命令和她沟通呐~</p>\n<img alt=\"Examples\" class=\"materialboxed responsive-img\" src=\"https://wiki.yoitsu.moe/whttps://blog.yoitsu.moe/images/3/31/Dev-horo.jpg\">\n<hr class=\"docutils\">\n<p><del>没错今天就是来安利顺便凑数的😂</del></p>\n<p>其实最需要的还是脑洞😂,所以召集新用(shi)户(wu)中😋</p>\n<blockquote>\n<p>😋 /dev/horo 绝赞开发中～</p>\n<p>Device as a Wolf!</p>\n<p>将赫萝放入你的电脑，与(Cheng)她(Wei)愉(Ta)快(De)玩(Shi)耍(Wu)吧！ 😋</p>\n<p><a class=\"reference external\" href=\"https://github.com/VOID001/dev.horo\">https://github.com/VOID001/dev.horo</a></p>\n<p><a class=\"reference external\" href=\"https://wiki.yoitsu.moe/wiki/Portal:Dev.horo\">https://wiki.yoitsu.moe/wiki/Portal:Dev.horo</a></p>\n<p>😋😋😋</p>\n<p><a class=\"reference external\" href=\"https://t.me/joinchat/AAAAAEIBdwBe63jlCgq_XQ\">https://t.me/joinchat/AAAAAEIBdwBe63jlCgq_XQ</a> &lt;- Telegram 水群</p>\n<p><a class=\"reference external\" href=\"//webchat.freenode.net/?channels=dev-horo\">#dev-horo</a> &lt;- IRC 连接到主群😂</p>\n</blockquote>\n</div>\n\n  </div>"
    },
    {
      "post_id": 5,
      "title": " 入手 Surface Book （续集）",
      "date_published": 1487692800,
      "body": "\n<p>为 Surface Book 添加触屏和电磁笔支持😂</p>\n<p>感谢 <a class=\"reference external\" href=\"https://github.com/ipts-linux-org/ipts-linux-new\">https://github.com/ipts-linux-org/ipts-linux-new</a>\n和 <a class=\"reference external\" href=\"https://github.com/jimdigriz/debian-mssp4\">https://github.com/jimdigriz/debian-mssp4</a> 的资源😂</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>为 Surface Book 添加触屏和电磁笔支持😂</p>\n<p>感谢 <a class=\"reference external\" href=\"https://github.com/ipts-linux-org/ipts-linux-new\">https://github.com/ipts-linux-org/ipts-linux-new</a>\n和 <a class=\"reference external\" href=\"https://github.com/jimdigriz/debian-mssp4\">https://github.com/jimdigriz/debian-mssp4</a> 的资源😂</p>\n\n<div class=\"section\" id=\"windows\">\n<h2><a class=\"toc-backref\" href=\"#id3\">还是搞 Windows _(:з」∠)_</a></h2>\n<p>从 Windows 中把系统盘的 Windows/INF/PreciseTouch/Intel 文件夹复制出来备用。</p>\n</div>\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">装内核 😂</a></h2>\n<p>从 AUR 安装 <a href=\"https://aur.archlinux.org/packages/?O=0&amp;K=linux-surface-pro-4-git\" title=\"在 AUR 上搜索linux-surface-pro-4-git\">linux-surface-pro-4-git&nbsp;<sup>AUR</sup>&nbsp;</a></p>\n<p>然而这个内核有两个问题😂:</p>\n<ul class=\"simple\">\n<li>如果是在键盘和屏幕分离时启动会 Kernel Panic</li>\n<li>如果没设置好接下来的 ipts 会在关机或重启时 Kernel Panic</li>\n</ul>\n<p>😂</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">链接驱动文件 😂</a></h2>\n<p>首先把刚刚从 Windows 偷来的文件复制到相应的位置上：</p>\n<blockquote>\n<p># mkdir -p /usr/lib/firmware/intel/ipts</p>\n<p># cp /path/to/Windows/INF/PreciseTouch/Intel /usr/lib/firmware/intel/ipts/</p>\n</blockquote>\n<p>然后链接相应的文件（如果提示目标已存在，就删掉再试一次咯😂</p>\n<blockquote>\n<p># ln -s iaPreciseTouchDescriptor.bin /lib/firmware/intel/ipts/intel_desc.bin</p>\n<p># ln -s SurfaceTouchServicingDescriptorMSHW0076.bin /lib/firmware/intel/ipts/vendor_desc.bin</p>\n<p># ln -s SurfaceTouchServicingKernelSKLMSHW0076.bin /lib/firmware/intel/ipts/vendor_kernel.bin</p>\n<p># ln -s SurfaceTouchServicingSFTConfigMSHW0076.bin /lib/firmware/intel/ipts/config.bin</p>\n<p>/me 有 0076/0078/0079 ,其中 0076 可用，0078 没法加载，0079 触屏方向相反了😂</p>\n</blockquote>\n<hr class=\"docutils\">\n<p>好了，重启一下试试？😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 4,
      "title": " 换到了 Parabola GNU/Linux Libre",
      "date_published": 1491408000,
      "body": "\n<p>在 <del>清真</del> 自由之路越走越远……</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>在 <del>清真</del> 自由之路越走越远……</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">什么是 Parabola GNU/Linux Libre？</a></h2>\n<blockquote>\n<p>Parabola GNU/Linux-libre 是一个基于 Arch Linux 的自由软件项目，旨在提供完全自由的 GNU/Linux 发行版，并针对 i686，x86_64, ARM 三种 CPU 进行了优化。 Parabola 旨在保持包管理工具的简单化。其主要目的是为了让用户完全掌控自己的系統以及100%的自由软件。 作为一个完全自由的发行版，Parabola GNU/Linux-libre 被列在自由软件基金会上。</p>\n<p>Parabola 发展的重点是简洁，优雅，源代码的正确性和最前沿的自由软件之间的平衡。</p>\n<p>它轻量简约的设计使它易于扩展，可以根据自己的需求来塑造系统。</p>\n</blockquote>\n<p>就是自由化的 Arch Linux 咯~</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id5\">怎么换？</a></h2>\n<p><a class=\"reference external\" href=\"https://wiki.parabola.nu/Migration_from_Arch_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\">https://wiki.parabola.nu/Migration_from_Arch_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87</a>)</p>\n<p>Wiki 写的挺详细的 （咱顺手糊了翻译…… 😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id6\">然后呢？ 😂</a></h2>\n<ul class=\"simple\">\n<li>只比 Arch Linux 少了个无线网卡诶（😂其实本来 Arch 就没剩下多少……，找个 USB 无线网卡插上凑合一下……</li>\n<li>不少官方源的包和 <a class=\"reference external\" href=\"https://www.parabola.nu/packages/libre/any/your-freedom/\">your-freedom</a> 冲突， <del>被批判了一番……</del> ，然后被卸载了。</li>\n<li>Firefox 和 ThunderBird 因为 Mozilla 的商标问题换成了 Iceweasel 和 IceDove ，然而 Firefox 那蜜汁 Emoji 显示…… 😂</li>\n</ul>\n</div>\n<div class=\"section\" id=\"del-del\">\n<h2><a class=\"toc-backref\" href=\"#id7\"><del>没错又水了篇文章……</del></a></h2>\n<p>嗯……😂😂😂</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 3,
      "title": " 所谓的近况？",
      "date_published": 1492185600,
      "body": "\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    <!-- PELICAN_BEGIN_SUMMARY\n\n啥？😂\n\n一年过去了咱还是不会说话，于是直接开始咯~ -->\n\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">在完整和坏掉之间徘徊？</a></h2>\n<p>(咱就是那么容易坏掉啊……当然也很容易修好就是了 😂</p>\n<p>所以还是多多关照~</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">最近?</a></h2>\n<p><del>说 blog 要关门啥的好像不是不可能......</del> 😂</p>\n<p>其实最近又开始玩物丧志了……  😂</p>\n<blockquote>\n<p><a class=\"reference external\" href=\"http://p.eagate.573.jp/game/eac2dx/infinitas/p/common/top.html\">http://p.eagate.573.jp/game/eac2dx/infinitas/p/common/top.html</a></p>\n<p>⬆ 没错就是它， beatmania IIDX INFINITAS 😂</p>\n</blockquote>\n<p>（然而还是很菜就是了，另外这不是让这长草的借口 😂</p>\n<p>其实是想写点啥的，例如 ssh 的用法什么的……不过好像大家都会的样子……</p>\n</div>\n<div class=\"section\" id=\"id4\">\n<h2><a class=\"toc-backref\" href=\"#id8\">评论框消失了？</a></h2>\n<p>换成 GitLab 了，于是评论就废了 （其实是懒得整 Gitlab 的API 😂</p>\n<p><del>另外也没有用其它评论框的想法（还是懒……</del> 算了还是先用着Disqus了 😂</p>\n<p>所以找咱的话，邮件/Twitter 都可以啦~</p>\n</div>\n<div class=\"section\" id=\"id5\">\n<h2><a class=\"toc-backref\" href=\"#id9\">其它杂记</a></h2>\n<p>最近在看 <a class=\"reference external\" href=\"https://github.com/renormalizable/ircbot\">gauge 的 varia 的代码</a> ，\n也想自己写一个……叫什么名字好呢？</p>\n</div>\n\n  </div>"
    },
    {
      "post_id": 2,
      "title": " Project Wolves （仮）先行稼动开始~",
      "date_published": 1493654400,
      "body": "\n<p>推出 Project Wolves（虽然名字还是暂定）😋</p>\n---\n\n<div class=\"entry-content text-accent\" id=\"article-content\">\n    \n<p>推出 Project Wolves（虽然名字还是暂定）😋</p>\n\n<div class=\"section\" id=\"id1\">\n<h2><a class=\"toc-backref\" href=\"#id4\">所以这是啥？</a></h2>\n<p>其实就是个 Telegram Channel 啦 🤦‍ ，虽然有个奇怪的名字，\n还随便用 bot 糊了把 mastodon / Twitter 同步 😂</p>\n</div>\n<div class=\"section\" id=\"channel\">\n<h2><a class=\"toc-backref\" href=\"#id5\">这 Channel 有啥特别之处？</a></h2>\n<p>😂 好像真没啥特别的（毕竟才建起来？）</p>\n<p>硬塞一个特点的话就是 Writer 都是狼？😂</p>\n<p>算了以后慢慢塑造好了……</p>\n</div>\n<div class=\"section\" id=\"id2\">\n<h2><a class=\"toc-backref\" href=\"#id6\">那么入口呢？</a></h2>\n<p>哇汝想来了啊 😋 <del>勇气可嘉……</del></p>\n<ul>\n<li><p class=\"first\">如果有 Telegram 的话 ：<a class=\"reference external\" href=\"https://t.me/Project_Wolves\">https://t.me/Project_Wolves</a></p>\n</li>\n<li><p class=\"first\">或者 Twitter ：<a class=\"reference external\" href=\"https://twitter.com/WolvesOfYoitsu\">https://twitter.com/WolvesOfYoitsu</a></p>\n<blockquote>\n<p>Twitter 字数限制比 Mastodon 少啦~</p>\n</blockquote>\n</li>\n<li><p class=\"first\">或者 Mastodon : <a class=\"reference external\" href=\"https://sn.angry.im/@wolves\">https://sn.angry.im/@wolves</a></p>\n<blockquote>\n<p>首先感谢 <a class=\"reference external\" href=\"/links.html#petercxy\">petercxy</a> 的 instance 😊</p>\n<p>然后转发到 Mastodon 的机器人是咱最近糊出来的，所以可能会炸…… 😂</p>\n</blockquote>\n</li>\n</ul>\n<hr class=\"docutils\">\n<blockquote>\n<p>[xmppbot] [Lisa] KenOokamiHoro: 老板问我今天晚上加班么我说不加，问我为啥，我说有约。问我是上回周五约我那个么，我说不是，我每周五都有不同的人约。老板想了一下说：你约完把他们都杀了么。</p>\n<p>[[HoroServ]] 他们都被吃掉了</p>\n<p>[ヨイツの賢狼ホロ 😋(🍎🍏👤*)] 😋😋😋</p>\n<p>[Chino 🐇 (Frantic1048 )] 这很萌狼(</p>\n</blockquote>\n<p>😂</p>\n</div>\n<div class=\"section\" id=\"id3\">\n<h2><a class=\"toc-backref\" href=\"#id7\">接下来画啥饼？</a></h2>\n<ul class=\"simple\">\n<li>接入 IRC / RSS 支持？</li>\n<li>……</li>\n</ul>\n</div>\n\n  </div>"
    },
    {
      "post_id": 1,
      "title": "Congratulations!",
      "date_published": 1433033779.604,
      "body": "Your zeronet blog has been successfully created!"
    }
  ],
  "tag": [
    {
      "value": "",
      "post_id": 2
    },
    {
      "value": "Telegram",
      "post_id": 2
    },
    {
      "value": "Wolves",
      "post_id": 2
    },
    {
      "value": "",
      "post_id": 3
    },
    {
      "value": "",
      "post_id": 4
    },
    {
      "value": "Arch/Linux",
      "post_id": 4
    },
    {
      "value": "GNU",
      "post_id": 4
    },
    {
      "value": "凑数",
      "post_id": 4
    },
    {
      "value": "",
      "post_id": 5
    },
    {
      "value": "Arch/Linux",
      "post_id": 5
    },
    {
      "value": "devices",
      "post_id": 5
    },
    {
      "value": "",
      "post_id": 6
    },
    {
      "value": "Arch/Linux",
      "post_id": 6
    },
    {
      "value": "/dev/horo",
      "post_id": 6
    },
    {
      "value": "",
      "post_id": 7
    },
    {
      "value": "Arch/Linux",
      "post_id": 7
    },
    {
      "value": "bootloader",
      "post_id": 7
    },
    {
      "value": "UEFI",
      "post_id": 7
    },
    {
      "value": "",
      "post_id": 8
    },
    {
      "value": "Arch/Linux",
      "post_id": 8
    },
    {
      "value": "VM",
      "post_id": 8
    },
    {
      "value": "",
      "post_id": 9
    },
    {
      "value": "",
      "post_id": 10
    },
    {
      "value": "",
      "post_id": 11
    },
    {
      "value": "Arch/Linux",
      "post_id": 11
    },
    {
      "value": "",
      "post_id": 12
    },
    {
      "value": "Arch/Linux",
      "post_id": 12
    },
    {
      "value": "Windows",
      "post_id": 12
    },
    {
      "value": "",
      "post_id": 13
    },
    {
      "value": "",
      "post_id": 14
    },
    {
      "value": "Arch/Linux",
      "post_id": 14
    },
    {
      "value": "",
      "post_id": 15
    },
    {
      "value": "Arch/Linux",
      "post_id": 15
    },
    {
      "value": "XMPP",
      "post_id": 15
    },
    {
      "value": "Prosody",
      "post_id": 15
    },
    {
      "value": "",
      "post_id": 16
    },
    {
      "value": "Linux",
      "post_id": 16
    },
    {
      "value": "SSH",
      "post_id": 16
    },
    {
      "value": "操作",
      "post_id": 16
    },
    {
      "value": "",
      "post_id": 17
    },
    {
      "value": "",
      "post_id": 18
    },
    {
      "value": "加密",
      "post_id": 18
    },
    {
      "value": "dm-crypt",
      "post_id": 18
    },
    {
      "value": "",
      "post_id": 19
    },
    {
      "value": "software",
      "post_id": 19
    },
    {
      "value": "openwrt",
      "post_id": 19
    },
    {
      "value": "",
      "post_id": 20
    },
    {
      "value": "Arch/Linux",
      "post_id": 20
    },
    {
      "value": "packages",
      "post_id": 20
    },
    {
      "value": "",
      "post_id": 21
    },
    {
      "value": "GnuPG",
      "post_id": 21
    },
    {
      "value": "Software",
      "post_id": 21
    },
    {
      "value": "Cryptology",
      "post_id": 21
    },
    {
      "value": "",
      "post_id": 22
    },
    {
      "value": "社区",
      "post_id": 22
    },
    {
      "value": "Trip",
      "post_id": 22
    },
    {
      "value": "",
      "post_id": 23
    },
    {
      "value": "社区",
      "post_id": 23
    },
    {
      "value": "Trip",
      "post_id": 23
    },
    {
      "value": "",
      "post_id": 24
    },
    {
      "value": "zhihu",
      "post_id": 24
    },
    {
      "value": "opinions",
      "post_id": 24
    },
    {
      "value": "凑数",
      "post_id": 24
    },
    {
      "value": "",
      "post_id": 25
    },
    {
      "value": "software",
      "post_id": 25
    },
    {
      "value": "rss",
      "post_id": 25
    },
    {
      "value": "凑数",
      "post_id": 25
    },
    {
      "value": "",
      "post_id": 26
    },
    {
      "value": "社区",
      "post_id": 26
    },
    {
      "value": "Trip",
      "post_id": 26
    },
    {
      "value": "",
      "post_id": 27
    },
    {
      "value": "GnuPG",
      "post_id": 27
    },
    {
      "value": "Software",
      "post_id": 27
    },
    {
      "value": "Cryptology",
      "post_id": 27
    },
    {
      "value": "",
      "post_id": 28
    },
    {
      "value": "mediawiki",
      "post_id": 28
    },
    {
      "value": "notes",
      "post_id": 28
    },
    {
      "value": "",
      "post_id": 29
    },
    {
      "value": "opinions",
      "post_id": 29
    },
    {
      "value": "闲谈",
      "post_id": 29
    },
    {
      "value": "",
      "post_id": 30
    },
    {
      "value": "Arch/Linux",
      "post_id": 30
    },
    {
      "value": "Windows",
      "post_id": 30
    },
    {
      "value": "安装",
      "post_id": 30
    },
    {
      "value": "长篇",
      "post_id": 30
    },
    {
      "value": "",
      "post_id": 31
    },
    {
      "value": "Linux",
      "post_id": 31
    },
    {
      "value": "凑数",
      "post_id": 31
    },
    {
      "value": "",
      "post_id": 32
    },
    {
      "value": "Arch/Linux",
      "post_id": 32
    },
    {
      "value": "devices",
      "post_id": 32
    },
    {
      "value": "凑数",
      "post_id": 32
    },
    {
      "value": "",
      "post_id": 33
    },
    {
      "value": "software",
      "post_id": 33
    },
    {
      "value": "",
      "post_id": 34
    },
    {
      "value": "Linux",
      "post_id": 34
    },
    {
      "value": "",
      "post_id": 35
    },
    {
      "value": "Linux",
      "post_id": 35
    },
    {
      "value": "",
      "post_id": 36
    },
    {
      "value": "opinions",
      "post_id": 36
    },
    {
      "value": "freedom",
      "post_id": 36
    },
    {
      "value": "",
      "post_id": 37
    },
    {
      "value": "Linux",
      "post_id": 37
    },
    {
      "value": "",
      "post_id": 38
    },
    {
      "value": "Linux",
      "post_id": 38
    },
    {
      "value": "",
      "post_id": 39
    },
    {
      "value": "pelican",
      "post_id": 39
    },
    {
      "value": "blog",
      "post_id": 39
    },
    {
      "value": "",
      "post_id": 40
    },
    {
      "value": "notes",
      "post_id": 40
    },
    {
      "value": "software",
      "post_id": 40
    },
    {
      "value": "irc",
      "post_id": 40
    },
    {
      "value": "凑数",
      "post_id": 40
    },
    {
      "value": "",
      "post_id": 41
    },
    {
      "value": "Arch/Linux",
      "post_id": 41
    },
    {
      "value": "devices",
      "post_id": 41
    },
    {
      "value": "",
      "post_id": 42
    },
    {
      "value": "opinions",
      "post_id": 42
    },
    {
      "value": "freedom",
      "post_id": 42
    },
    {
      "value": "",
      "post_id": 43
    },
    {
      "value": "Linux",
      "post_id": 43
    },
    {
      "value": "",
      "post_id": 44
    },
    {
      "value": "pelican",
      "post_id": 44
    },
    {
      "value": "blog",
      "post_id": 44
    },
    {
      "value": "",
      "post_id": 45
    },
    {
      "value": "Linux",
      "post_id": 45
    },
    {
      "value": "",
      "post_id": 46
    },
    {
      "value": "Linux",
      "post_id": 46
    },
    {
      "value": "凑数",
      "post_id": 46
    },
    {
      "value": "",
      "post_id": 47
    },
    {
      "value": "Arch/Linux",
      "post_id": 47
    },
    {
      "value": "中文社区",
      "post_id": 47
    },
    {
      "value": "",
      "post_id": 48
    },
    {
      "value": "CMS",
      "post_id": 48
    },
    {
      "value": "opinions",
      "post_id": 48
    },
    {
      "value": "凑数",
      "post_id": 48
    },
    {
      "value": "",
      "post_id": 49
    },
    {
      "value": "windows",
      "post_id": 49
    },
    {
      "value": "grub",
      "post_id": 49
    },
    {
      "value": "凑数",
      "post_id": 49
    },
    {
      "value": "",
      "post_id": 50
    },
    {
      "value": "pelican",
      "post_id": 50
    },
    {
      "value": "blog",
      "post_id": 50
    },
    {
      "value": "",
      "post_id": 51
    },
    {
      "value": "opinions",
      "post_id": 51
    },
    {
      "value": "",
      "post_id": 52
    },
    {
      "value": "",
      "post_id": 53
    },
    {
      "value": "Arch/Linux",
      "post_id": 53
    },
    {
      "value": "AUR",
      "post_id": 53
    },
    {
      "value": "Guides",
      "post_id": 53
    },
    {
      "value": "",
      "post_id": 54
    },
    {
      "value": "Arch/Linux",
      "post_id": 54
    },
    {
      "value": "AUR",
      "post_id": 54
    },
    {
      "value": "Guides",
      "post_id": 54
    },
    {
      "value": "",
      "post_id": 55
    },
    {
      "value": "mediawiki",
      "post_id": 55
    },
    {
      "value": "notes",
      "post_id": 55
    },
    {
      "value": "",
      "post_id": 56
    },
    {
      "value": "yoitsu",
      "post_id": 56
    },
    {
      "value": "pelican",
      "post_id": 56
    },
    {
      "value": "blog",
      "post_id": 56
    },
    {
      "value": "",
      "post_id": 57
    },
    {
      "value": "Arch/Linux",
      "post_id": 57
    },
    {
      "value": "AUR",
      "post_id": 57
    },
    {
      "value": "Guides",
      "post_id": 57
    },
    {
      "value": "",
      "post_id": 58
    },
    {
      "value": "notes",
      "post_id": 58
    },
    {
      "value": "software",
      "post_id": 58
    },
    {
      "value": "",
      "post_id": 59
    },
    {
      "value": "yoitsu",
      "post_id": 59
    },
    {
      "value": "pelican",
      "post_id": 59
    },
    {
      "value": "blog",
      "post_id": 59
    },
    {
      "value": "python",
      "post_id": 59
    },
    {
      "value": "",
      "post_id": 60
    },
    {
      "value": "mediawiki",
      "post_id": 60
    },
    {
      "value": "notes",
      "post_id": 60
    },
    {
      "value": "",
      "post_id": 61
    },
    {
      "value": "Arch/Linux",
      "post_id": 61
    },
    {
      "value": "partner",
      "post_id": 61
    },
    {
      "value": "",
      "post_id": 62
    },
    {
      "value": "mediawiki",
      "post_id": 62
    },
    {
      "value": "notes",
      "post_id": 62
    },
    {
      "value": "",
      "post_id": 63
    },
    {
      "value": "Arch/Linux",
      "post_id": 63
    },
    {
      "value": "devices",
      "post_id": 63
    },
    {
      "value": "rpi",
      "post_id": 63
    },
    {
      "value": "",
      "post_id": 65
    },
    {
      "value": "",
      "post_id": 66
    }
  ]
}
