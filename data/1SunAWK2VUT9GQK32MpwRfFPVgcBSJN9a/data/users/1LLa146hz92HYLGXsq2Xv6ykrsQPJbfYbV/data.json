{
	"next_post_id": 3,
	"next_comment_id": 2,
	"next_follow_id": 1,
	"avatar": "generate",
	"user_name": "Anyonee",
	"hub": "1SunAWK2VUT9GQK32MpwRfFPVgcBSJN9a",
	"intro": "新 ZeroNet 用户",
	"post": [
		{
			"post_id": 1,
			"date_added": 1523628617,
			"body": "你好 ZeroMe!"
		},
		{
			"post_id": 1535112778,
			"body": "ZeroNet结构解析/全动态网站/无限制网站\non May 18, 2016 · 3 min read 6 最后修改: on May 21, 2016 \n标签: 后台网站\n本文面向对ZeroNet全动态网站/无限制网站开发有兴趣的爱好者\nZeroNet本身尚在发展阶段，开发者提供了最基本的框架和几个demo试用(也就是ZeroChat/ZeroBlog/ZeroTalk)。大家在使用这几个demo的过程中可能觉得ZeroNet不够强大，限制多多。对ZeroNet建立全功能网站的能力有所怀疑，但经过这段时间的摸索，我确认只要开发得当，ZeroNet完全可以做到和传统网站一样全动态和无限制。\n\n首先我们必须理解传统的动态网站的运行模式\n\n\n\n其中网站后台程序使用PHP等语言开发，可以实现任意的动态结果返回，后台数据库和存储空间都放在网站服务器上，也是没有任何限制的。\n\nZeroNet的浏览器访问一个已同步好网站时的流程则是如下图所示\n\n此过程所有的网站数据都是由本地运行的ZeroNet提供的。这个过程不能使用任何网站后台语言，只能读取网站中已有的静态数据（包括使用js查询ZeroNet自动生成的json数据库缓存）。其实从功能上来讲只不过把动态过程从后台语言移动到了前台js而已。只要你能把网站数据组织成合适的json数据结构，就完全可以替代后台语言对数据库的使用，区别只不过是性能上有差异(后文将使用其他办法来解决这个问题)。\n\n网站的动态交互性体现在两部分上\n\n将网站已有的固定内容按用户的需求提供给用户\n比如ZeroBlog中的日志，不论是按日期索引，按标签索引，还是翻到第N页，（甚至可以添加站内搜索）都仅仅是对已有固定内容的不同展示方式。用户的任何请求所产生的页面结果仅对当前操作用户产生效果，而不会反映到其他访问者的浏览结果中。\n这部分功能，完全由网站发布者控制，只有发布者更新网站，浏览者才能看到新的内容。\n\n用户可以提交自定义的数据，并对其他人的浏览结果产生影响。\n比如ZeroBlog中提交的评论，ZeroTalk中的回复，ZeroChat中的留言。这部分功能，规则(限定可提交的类型和大小)由网站发布者制定，内容由每个浏览者自行控制。只要浏览者提交的数据符合网站规则，就可以形成互动效果。\n\n用户最希望的动态交互是第二点。下面就以最简单但是最能体现第二点的ZeroChat的模型来分析这一功能。\n\n\n\nZeroChat本身只有一个空的留言页面，全部内容都是依靠所有用户提交的留言json来产生。ZeroChat的/data/users/content.json文件中规定了每个用户只能提交json文件且不能超出提交上限，每个用户都在/data/users/用户publickey目录/data.json保存自己所有的留言。这一结构很重要，因为publickey不重复，所以每个用户提交的数据都不会冲突，既然不冲突，那任一用户的数据都可以在任意时间同步而不会影响其他人的数据(比如同步失败)，所以才能达成每个用户的分布式存储而无需中央存储。\n\n当用户彼此提交的数据发布并且同步后，页面接收到来自本地ZeroNet程序的fileDone提醒，并重新加载json数据库，从而完成用户自定义数据影响最终页面的目的。\n\n这种动态网站交互，动态效果的产生完全依靠用户数据提交和前台js展示，我称其为\"无后台动态网\"(动态内容不是由后台产生)。ZeroBlog，ZeroTalk，ZeroChat都属于这种类型。这种网站虽然只依赖ZeroNet本身的功能，但是却有两个缺陷：\n\n用户提交数据有上限，达到数据上限后用户必须删除部分数据（如删除自己的回复或者主题），才能继续发布新的内容。但这不是用户希望的使用方式。\n不能做服务端校验，这是最大的问题。数据提交完全是用户的行为，只要符合网站规则（限定的类型和尺寸），内容无法做校验。比如ZeroBlog，用户回复时提交的数据完全是依靠前台js构建，但用户可以修改js代码，提交任意不合法的数据（比如把自己的回复时间改成10年前来抢沙发）。就如p2p所言，只要懂一点ZeroNet论坛的原理，只用一个帐号就可以大量刷屏，轻易使论坛处于瘫痪状态。尽管可以用权限功能屏蔽刷屏用户，但这只能被刷屏之后的补救措施。\n那么，是否可以将传统网站的无限制存储和服务端校验融合到ZeroNet中？\n\n可以\n\n不光可以实现无限制存储和服务端校验，还可以使用任意后台语言进行网站构建。再来回顾一下传统网站的操作流程，客户端（浏览器）将请求（或者说就是自定义数据）发送到服务器，服务器响应后回复动态数据\n\n再来对比下ZeroChat这种多用户交互的ZeroNet结构\n\n可以看出，其实对于ZeroNet而言，用户数据的发布是广播向所有ZeroNet程序的，你可以把这种广播行为理解成传统网站流程中的客户端请求（只不过客户端不光是浏览器，还包括了做广播的ZeroNet），而ZeroNet站主更新站点的内容，将会广播向所有的访问者，你可以把这看作是传统网站流程中的返回动态结果。\n\n也就是说，只要你运行一个自动应答程序，接收用户的数据提交，并按照你的逻辑更新这个站点，那么你就实现了一个完全可控的动态ZeroNet网站，你可以使用任何传统网站的开发功能\n\n\n其中步骤1,2,3对应于传统网站中的客户端请求，步骤4,5,6对应于传统网站中的服务端响应。只不过客户端是浏览器+ZeroNet程序，服务端是后台程序+ZeroNet程序。服务端只需要运行在站主的机器之上，切可以访问任意的存储空间和数据库。访问者使用的仍然是无需任何修改的ZeroNet程序。我称之为有后台的动态网。\n\n这一流程并不是我的独创，实际上ZeroNet中为新站点做种的 New 0Net Sites就使用了这个流程：用户提交的zeronet网址写入data/users/publickey/data.json并发布，而运行在站主机器上的定时任务扫描这些地址并访问本地的ZeroNet，从而达到自动做种的功能。\n\n回到前面的问题，有后台相比无后台者有何优势？\n\n实现服务端校验。站主不再依赖无校验的用户数据，而是完全可控页面可见的内容，如果有恶意用户提交非法数据，可以选择不更新页面，并且可以自动屏蔽恶意用户。\n配合归档实现无限制的用户数据保存。以ZeroChat为例，后台程序在接收到用户留言之后，自动将通过服务端校验的数据归档到网站的静态数据中，并通知客户端哪些数据已经归档，客户端js即可根据此信息自动回收已归档的数据空间，从而实现无限制的用户数据保存。只要前台js是配合归档数据逻辑编写，可以无缝将归档数据和用户提交但尚未通过服务器归档的数据合并，做到用户透明。\n用户数据由服务端统一处理，可以保证可重现性。例如我们实现一个多人在线游戏，虽然不同玩家接收到其他玩家数据的时间都是不一致的，但是在后台程序运行的机器上看来，仅会发生一个接收的序列，那么这一固定序列生成的游戏流程对于每个人来说都是一致的。但假如没有后台，那么游戏的流程只能依靠前台js脚本对接收到的他人数据做处理，每个人都可能是不同的接收过程，从而导致每个人看到不同的游戏结果(当然这也未必就一定是不好，我们可以根据这一特性来编写一个搞笑性质的“蝴蝶效应”游戏)。\n4.可以完全实现用户权限控制。ZeroNet虽然也有一些权限控制能力，但是相比后台程序的无限灵活性来说仍显不够。\n部分问题考虑：\n\n传统网站的请求和响应都是很快的，ZeroNet的这种模拟会不会太慢？\n\n尚在实践当中。ZeroNet添加了差分传输之后，对于大文件的小修改传输性能是可以接受的，对此尚有疑惑的人，可以尝试telegram同步网查看新信息出现的速度，或者自己在telegram添加@zeronet_bot自己测试延迟。\n\n如果很多用户同时向后台发出请求，站点如何能够在一个站点里向不同用户展示他们各自的动态结果？\n\n后台程序更新站点的结果未必就必须是一个完整页面，他也可以是一个携带着自定义信息的json文件，比如其中可以描述此次更新中每个发出请求的用户各自得到的动态结果分别是什么，再通过客户端的js进行鉴别并展示，每个用户就得到了自己的结果。\n\n假如实现了用户数据的自动归档，那么比如ZeroTalk中自己已经被归档的留言回复，就变成了网站内容的一部分，而不是用户数据的一部分，是不是就没法像现在一样修改了？\n\n不是的。虽然数据已经被服务端归档成静态数据，但是网站可以设计一套“修改归档数据请求协议”，用户可以发布一个“我要修改归档数据”的请求，后台根据这一请求来修改已经归档的数据，实现一样的功能。实际上由于服务端校验的实现，这一功能可以更加限制严格，比如被锁定的主题的内容不可被更改。\n\n归档解决了用户数据限制的问题，但是不会让网站越来越大吗？\n\n取决于网站如何设计。例如ZeroChat，大部分只关心最新的聊天内容是什么，而很少有人愿意翻到上一页的全部历史，那么完全可以把用户数据归档变成optional_file，只有有需要的人才去查询历史数据。\n\n传统网站都提供了私信功能，但是用户数据文件是广播给所有人的，怎么确保不会被他人看到所有内容？怎么保证我在这个网站的信息不会泄露(例如一个日记网站)?或者说我想存自己的银行密码，连网站本身都不信任，怎么办？\n\n公钥加密。就像ZeroMail一样，你只要用私信对象的公钥来加密信息，就可以确保只有接收者本人能解密信息（就如同ZeroMail）。你只要用你自己的公钥加密信息，就可以确保只有你本人能解密信息。ZeroNet的API中是无法在js中获取用户密钥的，而只能通过特定的API接口和用户的id来解密信息(ZeroNet的user.json中维护着用户id和对应的密钥)，因此你完全不用担心网站会盗取你的私钥，并且网站所有的代码都躺在你的硬盘里，你可以随时检阅他们是否有风险。同样的，也可以使用公钥加密来保护每个用户与网站之间的私密性。比如，网站为每一个访问用户生成一个随机密钥对，用每个用户的公钥对随机公钥进行加密并发送给客户端，每个客户端使用自己的私钥解密，即得到了服务端独一无二的随机公钥，之后向服务器发送的所有信息都以此随机公钥进行加密，就保证了其他用户不可见自己与服务器后台之间的所有通信。",
			"date_added": 1535112776
		}
	],
	"post_like": {},
	"comment": [
		{
			"comment_id": 1,
			"body": "111",
			"post_uri": "1LLa146hz92HYLGXsq2Xv6ykrsQPJbfYbV_1",
			"date_added": 1534403270
		}
	],
	"follow": []
}