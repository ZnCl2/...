{
	"pages": [
		{
			"id": "2f35c6d0-cf44-11e9-8ec1-2f0c09877324",
			"body": "[[ZeroNet Design]]\n\n# ZeroFrame API\n\n## About ZeroFrame API\n\nZeroFrame is an API that allows ZeroNet websites to interact with the ZeroNet daemon. It allows sites to save/retrieve files, publish changes and many other things. A copy of the library is included at js/ZeroFrame.js whenever a new site is created.\n\n[ZeroFrame API Reference](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/zeroframe_api_reference/)\n\n## In the Sites\n\nLet's follow the communications of a call to the back-end.  If your site does the following:  \n\n```javascript\n    page = new ZeroFrame()\n    page.cmd(\"wrapperPermissionAdd\", \"NOSANDBOX\", function(res) {\n        if (!res.error) page.cmd(\"wrapperReload\")\n    })\n```\n\nyou first get an instance of ZeroFrame.  You then call the asynchronous `cmd` method, which has two required parameters, the command and its parameters, and an optional response handler.  \n\nThis adds the wrapper nonce and an incremental message id resulting in this message being sent to the parent window:\n\n```json\n{\n  cmd: cmd,\n  params: params,\n  wrapper_nonce: wrapper_nonce,\n  id, next_message_id\n}\n```\nto the parent window, which is the wrapper for the IFrame containing your site, effectively using this:\n\n  window.parent.[postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)(message, '*')\n\nIf you have a response handler (callback), it is put on a map indexed by the message id.  \n\nThe Wrapper class is defined in [src/UI/media/Wrapper.coffee](/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/media/Wrapper.coffee@master).  Running ZN in DEBUG mode compiles this Coffee Script into Javascript, and put it in the all.js, which is loaded by [Wrapper.html](http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/template/wrapper.html@master), the template used to wrap the site's page with an IFrame.\n\n## In the Local Programs\n\n   \nZeroFrame API can also be used in local programs. This can be done with specific libraries which connect themselves to ZeroFrame WebSocket API.\n\n* [[ZeroFrameJS|ZeroFrame WebSocket API for JavaScript]]\n* [[ZeroFramePy|ZeroFrame WebSocket API for Python]]",
			"date_added": 1567622736829,
			"slug": "zeroframe"
		},
		{
			"id": "f05520a0-cf43-11e9-9c7f-e13638986c9f",
			"body": "[[ZeroNet Design]]\n\n# ZeroFrame API\n\n## About ZeroFrame API\n\nZeroFrame is an API that allows ZeroNet websites to interact with the ZeroNet daemon. It allows sites to save/retrieve files, publish changes and many other things. A copy of the library is included at js/ZeroFrame.js whenever a new site is created.\n\n[ZeroFrame API Reference](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/zeroframe_api_reference/)\n\n## In the Sites\n\nLet's follow the communications of a call to the back-end.  If your site does the following:  \n\n```javascript\n    page = new ZeroFrame()\n    page.cmd(\"wrapperPermissionAdd\", \"NOSANDBOX\", function(res) {\n        if (!res.error) page.cmd(\"wrapperReload\")\n    })\n```\n\nyou first get an instance of ZeroFrame.  You then call the asynchronous `cmd` method, which has two required parameters, the command and its parameters, and an optional response handler.  \n\nThis adds the wrapper nonce and an incremental message id resulting in this message being sent to the parent window:\n\n```json\n{\n  cmd: cmd,\n  params: params,\n  wrapper_nonce: wrapper_nonce,\n  id, next_message_id\n}\n```\nto the parent window, which is the wrapper for the IFrame containing your site, effectively using this:\n\n  window.parent.[postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)(message, '*')\n\nIf you have a response handler (callback), it is put on a map indexed by the message id.  \n\nThe Wrapper class is defined in [src/UI/media/Wrapper.coffee](/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/media/Wrapper.coffee@master).  Running ZN in DEBUG mode compiles this Coffee Script into Javascript, and put it in the all.js, which is loaded by [Wrapper.html](http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/template/wrapper.html@master), the template used to wrap the site's page with an IFrame.\n\n## In the Local Programs\n\n   \nZeroFrame API can also be used in local programs. This can be done with specific libraries which connect themselves to ZeroFrame WebSocket API.\n\n* [[ZeroFrameJS|JavaScript]]\n* [[ZEroFramePy|Python]]",
			"date_added": 1567622631338,
			"slug": "zeroframe"
		},
		{
			"id": "ea8f5050-cf43-11e9-9c7f-e13638986c9f",
			"body": "[[ZeroNet Design]]\n\n# ZeroFrame API\n\n## About ZeroFrame API\n\n[ZeroFrame API Reference](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/zeroframe_api_reference/)\n\nZeroFrame is an API that allows ZeroNet websites to interact with the ZeroNet daemon. It allows sites to save/retrieve files, publish changes and many other things. A copy of the library is included at js/ZeroFrame.js whenever a new site is created.\n\n## In the Sites\n\nLet's follow the communications of a call to the back-end.  If your site does the following:  \n\n```javascript\n    page = new ZeroFrame()\n    page.cmd(\"wrapperPermissionAdd\", \"NOSANDBOX\", function(res) {\n        if (!res.error) page.cmd(\"wrapperReload\")\n    })\n```\n\nyou first get an instance of ZeroFrame.  You then call the asynchronous `cmd` method, which has two required parameters, the command and its parameters, and an optional response handler.  \n\nThis adds the wrapper nonce and an incremental message id resulting in this message being sent to the parent window:\n\n```json\n{\n  cmd: cmd,\n  params: params,\n  wrapper_nonce: wrapper_nonce,\n  id, next_message_id\n}\n```\nto the parent window, which is the wrapper for the IFrame containing your site, effectively using this:\n\n  window.parent.[postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)(message, '*')\n\nIf you have a response handler (callback), it is put on a map indexed by the message id.  \n\nThe Wrapper class is defined in [src/UI/media/Wrapper.coffee](/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/media/Wrapper.coffee@master).  Running ZN in DEBUG mode compiles this Coffee Script into Javascript, and put it in the all.js, which is loaded by [Wrapper.html](http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/template/wrapper.html@master), the template used to wrap the site's page with an IFrame.\n\n## In the Local Programs\n\n   \nZeroFrame API can also be used in local programs. This can be done with specific libraries which connect themselves to ZeroFrame WebSocket API.\n\n* [[ZeroFrameJS|JavaScript]]\n* [[ZEroFramePy|Python]]",
			"date_added": 1567622621653,
			"slug": "zeroframe"
		},
		{
			"id": "d4849d10-cf43-11e9-bb71-c35e05e2314a",
			"body": "[[ZeroNet Design]]\n\n# ZeroFrame API\n\n## About ZeroFrame API\n\n[ZeroFrame API Reference](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/zeroframe_api_reference/)\n\n> ZeroFrame is an API that allows ZeroNet websites to interact with the ZeroNet daemon. It allows sites to save/retrieve files, publish changes and many other things. A copy of the library is included at js/ZeroFrame.js whenever a new site is created.\n\n## In the Sites\n\nLet's follow the communications of a call to the back-end.  If your site does the following:  \n\n```javascript\n    page = new ZeroFrame()\n    page.cmd(\"wrapperPermissionAdd\", \"NOSANDBOX\", function(res) {\n        if (!res.error) page.cmd(\"wrapperReload\")\n    })\n```\n\nyou first get an instance of ZeroFrame.  You then call the asynchronous `cmd` method, which has two required parameters, the command and its parameters, and an optional response handler.  \n\nThis adds the wrapper nonce and an incremental message id resulting in this message being sent to the parent window:\n\n```json\n{\n  cmd: cmd,\n  params: params,\n  wrapper_nonce: wrapper_nonce,\n  id, next_message_id\n}\n```\nto the parent window, which is the wrapper for the IFrame containing your site, effectively using this:\n\n  window.parent.[postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)(message, '*')\n\nIf you have a response handler (callback), it is put on a map indexed by the message id.  \n\nThe Wrapper class is defined in [src/UI/media/Wrapper.coffee](/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/media/Wrapper.coffee@master).  Running ZN in DEBUG mode compiles this Coffee Script into Javascript, and put it in the all.js, which is loaded by [Wrapper.html](http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/file/?1P4w4Rvh4vS9r6G5xTiSh8qEW87EKZtnJB/src/Ui/template/wrapper.html@master), the template used to wrap the site's page with an IFrame.\n\n## In the Local Programs\n\n   \nZeroFrame API can also be used in local programs. This can be done with specific libraries which connect themselves to ZeroFrame WebSocket API.\n\n* [[ZeroFrameJS|JavaScript]]\n* [[ZEroFramePy|Python]]",
			"date_added": 1567622584673,
			"slug": "zeroframe"
		},
		{
			"id": "95f8c310-cf42-11e9-8021-255169a537e1",
			"body": "ZeroFrame WebSocket API for Python\n===============================\n\nThis is [[Python]] WebSocket client for [[ZeroFrame]] API. It supports (almost) same features as default ZeroFrame that is included in ZeroNet sites, but it is using WebSocket client so it can be used in local programs.\n\nProject is available on [GitHub][link-github] and [GitCenter][link-gitcenter]. It is licensed under MIT license.\n\n[link-github]: https://github.com/filips123/ZeroFramePy/\n[link-gitcenter]: http://127.0.0.1:43110/178UMrEt8vxf5Z6LPxkrcWFPXPfD9XNNH7/",
			"date_added": 1567622050241,
			"slug": "zeroframepy"
		},
		{
			"id": "7335ba80-cd8b-11e9-b614-03808c29e6f1",
			"body": "ZeroFrame WebSocket API for JavaScript\n==================================\n\nThis is [[JavaScript]] WebSocket client for [[ZeroFrame]] API. It supports (almost) same features as default ZeroFrame that is included in ZeroNet sites, but it is using WebSocket client so it can be used in local programs, such as Node.js and Electron. It can't be used in browsers because of CORS restrictions.\n\nProject is available on [GitHub][link-github] and [GitCenter][link-gitcenter]. It is licensed under MIT license.\n\n[link-github]: https://github.com/filips123/ZeroFrameJS/\n[link-gitcenter]: http://127.0.0.1:43110/1HJS6quLaqNLYxHVM9nL2rfmAsRvumqC1H/",
			"date_added": 1567433442856,
			"slug": "zeroframejs"
		},
		{
			"id": "130bf610-cd8b-11e9-ae35-df439d21a606",
			"body": "ZeroFrame WebSocket API for JavaScript\n==================================\n\nThis is JavaScript WebSocket client for ZeroFrame API. It supports (almost) same features as default ZeroFrame that is included in ZeroNet sites, but it is using WebSocket client so it can be used in local programs, such as Node.js and Electron. It can't be used in browsers because of CORS restrictions.\n\nProject is available on [GitHub][link-github] and [GitCenter][link-gitcenter]. It is licensed under MIT license.\n\n[link-github]: https://github.com/filips123/ZeroFrameJS/\n[link-gitcenter]: http://127.0.0.1:43110/1HJS6quLaqNLYxHVM9nL2rfmAsRvumqC1H/",
			"date_added": 1567433281521,
			"slug": "zeroframejs"
		},
		{
			"id": "0f363e10-c1e7-11e9-87c0-413073b22192",
			"body": "# Creating Zites\n\nZeroNet Sites (Zites) are creating using typical static content such as HTML, JavaScript, CSS and images with a file-system based database.  \n\n[Site Development Documentation](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/getting_started/)\n\n[[ZeroNet Crypto]] - User signing and encrypting.  \n\n[ZeroNet Dev Center](http://127.0.0.1:43110/DevCenter.bit/) - dated intro docs.\n\nYou can use [[ZeroTemplate]] to create advanced ZeroNet sites with NPM dependencies and automatic building and releasing.\n\nYou can [create an Angular site](/1KmgpXc9BLFxw1ccGANYVzvDh3YG95tSe3/?Topic:1565993644_1D9oYXWZH2S55PeoCFDKTqq8roNXqZqP7n/Testing+a+static+Angular+site+in+ZeroNet).\n\n## Handling SPAM\n\n[How to blacklist/block zeronet identity provider/authority in content.json, but whitelist some of this ID provider certificates](/Talk.ZeroNetwork.bit/?Topic:1565715792_1L4dZcDF2maSKHDy788yhxpYnBWnXadUtS/How+to+blacklist+block+zeronet+identity+provider+authority+in+content+json+but+whitelist+some+of+this+ID+provider+certificates)\nDescribes how to assign a 0 user limit size for self-signed certs to allow anonymous viewing, but require a Provider ID to publish.  \n",
			"date_added": 1566153374833,
			"slug": "creating-zites"
		},
		{
			"id": "fe0e0000-c1e6-11e9-bcb4-81974fb7cd8e",
			"body": "# Creating Zites\n\nZeroNet Sites (Zites) are creating using typical static content such as HTML, JavaScript, CSS and images with a file-system based database.  \n\n[Site Development Documentation](/1DocsYf2tZVVMEMJFHiDsppmFicZCWkVv1/site_development/getting_started/)\n\n[[ZeroNet Crypto]] - User signing and encrypting.  \n\n[ZeroNet Dev Center](http://127.0.0.1:43110/DevCenter.bit/) - dated intro docs.\n\nYou can use [[ZeroTamplate]] to create advanced ZeroNet sites with NPM dependencies and automatic building and releasing.\n\nYou can [create an Angular site](/1KmgpXc9BLFxw1ccGANYVzvDh3YG95tSe3/?Topic:1565993644_1D9oYXWZH2S55PeoCFDKTqq8roNXqZqP7n/Testing+a+static+Angular+site+in+ZeroNet).\n\n## Handling SPAM\n\n[How to blacklist/block zeronet identity provider/authority in content.json, but whitelist some of this ID provider certificates](/Talk.ZeroNetwork.bit/?Topic:1565715792_1L4dZcDF2maSKHDy788yhxpYnBWnXadUtS/How+to+blacklist+block+zeronet+identity+provider+authority+in+content+json+but+whitelist+some+of+this+ID+provider+certificates)\nDescribes how to assign a 0 user limit size for self-signed certs to allow anonymous viewing, but require a Provider ID to publish.  \n",
			"date_added": 1566153346048,
			"slug": "creating-zites"
		},
		{
			"id": "b234e2c0-c1e6-11e9-9a31-61e78f1d6f54",
			"body": "ZeroNet Template\n================\n\nTemplate for creating and developing ZeroNet sites.\n\nIt supports NPM dependencies and it uses Gulp and Browserify for bundling scripts. It also supports SASS and automatic deployments with Travis CI.\n\nProject is available on [GitHub][link-github] and [GitCenter][link-gitcenter]. It is licensed under MIT license.\n\n[link-github]: https://github.com/filips123/ZeroTemplate/\n[link-gitcenter]: http://127.0.0.1:43110/1Aob9QXahTnn6iBriSSQ6qg8qXkHdkaX2x/\n",
			"date_added": 1566153218796,
			"slug": "zerotemplate"
		}
	]
}