/**
 * ojraskatzeronet v0.1.0
 * @author Otto J. Rask
 */
function test(e,t){tap.test(e,function(e){t(e,new Markdown),e.end()})}var markdown=require("../lib/markdown"),tap=require("tap"),Markdown=markdown.Markdown,mk_block=Markdown.mk_block;test("split_block",function(e,t){e.equivalent(t.split_blocks("# h1 #\n\npara1\npara1L2\n  \n\n\n\npara2\n"),[mk_block("# h1 #","\n\n",1),mk_block("para1\npara1L2","\n  \n\n\n\n",3),mk_block("para2","\n",9)],"split_block should record trailing newlines"),e.equivalent(t.split_blocks("\n\n# heading #\n\npara\n"),[mk_block("# heading #","\n\n",3),mk_block("para","\n",5)],"split_block should ignore leading newlines")}),test("headers",function(e,t){e.equivalent(t.dialect.block.setextHeader("h1\n===\n\n",[]),[["header",{level:1},"h1"]],"Atx and Setext style H1s should produce the same output"),e.equivalent(t.dialect.block.atxHeader.call(t,"# h1\n\n"),[["header",{level:1},"h1"]],"Closing # optional on atxHeader"),e.equivalent(h2=t.dialect.block.atxHeader.call(t,"## h2\n\n",[]),[["header",{level:2},"h2"]],"Atx h2 has right level"),e.equivalent(t.dialect.block.setextHeader.call(t,"h2\n---\n\n",[]),[["header",{level:2},"h2"]],"Atx and Setext style H2s should produce the same output")}),test("code",function(e,t){var l=t.dialect.block.code,n=[mk_block("next")];e.equivalent(l.call(t,mk_block("    foo\n    bar"),n),[["code_block","foo\nbar"]],"Code block correct"),e.equivalent(n,[mk_block("next")],"next untouched when its not code"),n=[],e.equivalent(l.call(t,mk_block("    foo\n  bar"),n),[["code_block","foo"]],"Code block correct for abutting para"),e.equivalent(n,[mk_block("  bar")],"paragraph put back into next block"),e.equivalent(l.call(t,mk_block("    foo"),[mk_block("    bar")]),[["code_block","foo\n\nbar"]],"adjacent code blocks "),e.equivalent(l.call(t,mk_block("    foo","\n  \n      \n"),[mk_block("    bar")]),[["code_block","foo\n\n\nbar"]],"adjacent code blocks preserve correct number of empty lines")}),test("bulletlist",function(e,t){var l=function(){return t.dialect.block.lists.apply(t,arguments)};e.equivalent(l(mk_block("* foo\n* bar"),[]),[["bulletlist",["listitem","foo"],["listitem","bar"]]],"single line bullets"),e.equivalent(l(mk_block("* [text](url)"),[]),[["bulletlist",["listitem",["link",{href:"url"},"text"]]]],"link in bullet"),e.equivalent(l(mk_block("* foo\nbaz\n* bar\nbaz"),[]),[["bulletlist",["listitem","foo\nbaz"],["listitem","bar\nbaz"]]],"multiline lazy bullets"),e.equivalent(l(mk_block("* foo\n  baz\n* bar\n  baz"),[]),[["bulletlist",["listitem","foo\nbaz"],["listitem","bar\nbaz"]]],"multiline tidy bullets"),e.equivalent(l(mk_block("* foo\n     baz"),[]),[["bulletlist",["listitem","foo\n baz"]]],"only trim 4 spaces from the start of the line"),e.equivalent(l(mk_block("  * one"),[mk_block("    two")]),[["bulletlist",["listitem",["para","one"],["para","two"]]]],"loose bullet lists can have multiple paragraphs"),e.equivalent(l(mk_block(" *\nfoo")),void 0,"Space required after bullet to trigger list"),e.equivalent(l(mk_block(" * \nfoo\nbar"),[]),[["bulletlist",["listitem","foo\nbar"]]],"space+continuation lines",{todo:!0}),e.equivalent(l(mk_block(" * foo\n      * bar\n    * baz"),[]),[["bulletlist",["listitem","foo",["bulletlist",["listitem","bar",["bulletlist",["listitem","baz"]]]]]]],"Interesting indented lists I"),e.equivalent(l(mk_block(" * foo\n      * bar\n * baz"),[]),[["bulletlist",["listitem","foo",["bulletlist",["listitem","bar"]]],["listitem","baz"]]],"Interesting indented lists II"),e.equivalent(l(mk_block("  * foo\n   * bar\n* baz\n * fnord"),[]),[["bulletlist",["listitem","foo",["bulletlist",["listitem","bar"],["listitem","baz"],["listitem","fnord"]]]]],"Interesting indented lists III"),e.equivalent(l(mk_block(" * foo"),[mk_block(" 1. bar\n")]),[["bulletlist",["listitem",["para","foo"]],["listitem",["para","bar"]]]],"Different lists at same indent IV"),e.equivalent(l(mk_block("   * foo\n  * bar\n * baz"),[]),[["bulletlist",["listitem","foo",["bulletlist",["listitem","bar"],["listitem","baz"]]]]],"Indenting Case V"),e.equivalent(l(mk_block("* one\n    * two\n        * three\n            * four"),[]),[["bulletlist",["listitem","one",["bulletlist",["listitem","two",["bulletlist",["listitem","three",["bulletlist",["listitem","four"]]]]]]]]],"deep nested lists VI"),e.equivalent(l(mk_block("   * foo\n  * bar\n * baz\n* HATE\n  * flibble\n   * quxx\n    * nest?\n        * where\n      * am\n     * i?"),[]),[["bulletlist",["listitem","foo",["bulletlist",["listitem","bar"],["listitem","baz"],["listitem","HATE"],["listitem","flibble"]]],["listitem","quxx",["bulletlist",["listitem","nest?",["bulletlist",["listitem","where"],["listitem","am"],["listitem","i?"]]]]]]],"Indenting Case VII"),e.equivalent(l(mk_block("   * one\n    1. two\n        * three\n                * four","\n\n"),[mk_block("                foo")]),[["bulletlist",["listitem",["para","one"],["numberlist",["listitem",["para","two"],["bulletlist",["listitem",["para","three\n    * four"],["code_block","foo"]]]]]]]],"Case VIII: Deep nesting and code block")}),test("horizRule",function(e,t){var l=t.dialect.block.horizRule,n=["---","_ __","** ** **","--- "];n.forEach(function(n){e.equivalent(l.call(t,mk_block(n),[]),[["hr"]],"simple hr from "+require("util").inspect(n))})}),test("blockquote",function(e,t){var l=t.dialect.block.blockquote;e.equivalent(l.call(t,mk_block("> foo\n> bar"),[]),[["blockquote",["para","foo\nbar"]]],"simple blockquote"),e.equivalent(l.call(t,mk_block("> foo\n> bar\n>\n>- - - "),[]),[["blockquote",["para","foo\nbar"],["hr"]]],"blockquote with interesting content"),e.equivalent(l.call(t,mk_block("p\n> a","\n\n",1),[mk_block("> b","\n",4)]),[["para","p"],["blockquote",["para","a"],["para","b"]]],"blockquote with abutting paragraph")}),test("referenceDefn",function(e,t){var l=t.dialect.block.referenceDefn;['[id]: http://example.com/  "Optional Title Here"',"[id]: http://example.com/  'Optional Title Here'","[id]: http://example.com/  (Optional Title Here)"].forEach(function(n){t.tree=["markdown"],e.equivalent(l.call(t,mk_block(n)),[],"ref processed"),e.equivalent(t.tree[1].references,{id:{href:"http://example.com/",title:"Optional Title Here"}},"reference extracted")}),t.tree=["markdown"];var n=[];e.equivalent(l.call(t,mk_block("[id]: example.com\npara"),n),[],"ref processed"),e.equivalent(t.tree[1].references,{id:{href:"example.com"}},"reference extracted"),e.equivalent(n,[mk_block("para")],"paragraph put back into blocks")}),test("inline_br",function(e,t){e.equivalent(t.processInline("foo  \n\\[bar"),["foo",["linebreak"],"[bar"],"linebreak+escape")}),test("inline_escape",function(e,t){e.equivalent(t.processInline("\\bar"),["\\bar"],"invalid escape"),e.equivalent(t.processInline("\\*foo*"),["*foo*"],"escaped em")}),test("inline_code",function(e,t){e.equivalent(t.processInline("`bar`"),[["inlinecode","bar"]],"code I"),e.equivalent(t.processInline("``b`ar``"),[["inlinecode","b`ar"]],"code II"),e.equivalent(t.processInline("```bar``` baz"),[["inlinecode","bar"]," baz"],"code III")}),test("inline_strong_em",function(e,t){e.equivalent(t.processInline("foo *abc* bar"),["foo ",["em","abc"]," bar"],"strong/em I"),e.equivalent(t.processInline("*abc `code`"),["*abc ",["inlinecode","code"]],"strong/em II"),e.equivalent(t.processInline("*abc**def* after"),[["em","abc**def"]," after"],"strong/em III"),e.equivalent(t.processInline("*em **strong * wtf**"),[["em","em **strong "]," wtf**"],"strong/em IV"),e.equivalent(t.processInline("*foo _b*a*r baz"),[["em","foo _b"],"a*r baz"],"strong/em V")}),test("inline_img",function(e,t){e.equivalent(t.processInline("![alt] (url)"),[["img",{href:"url",alt:"alt"}]],"inline img I"),e.equivalent(t.processInline("![alt](url 'title')"),[["img",{href:"url",alt:"alt",title:"title"}]],"inline img II"),e.equivalent(t.processInline("![alt] (url 'tit'le') after')"),[["img",{href:"url",alt:"alt",title:"tit'le"}]," after')"],"inline img III"),e.equivalent(t.processInline('![alt] (url "title")'),[["img",{href:"url",alt:"alt",title:"title"}]],"inline img IV"),e.equivalent(t.processInline('![Alt text](/path/to/img\\\\.jpg "Optional title")'),[["img",{href:"/path/to/img\\.jpg",alt:"Alt text",title:"Optional title"}]],"inline img IV"),e.equivalent(t.processInline("![alt][id]"),[["img_ref",{ref:"id",alt:"alt",original:"![alt][id]"}]],"ref img I"),e.equivalent(t.processInline("![alt] [id]"),[["img_ref",{ref:"id",alt:"alt",original:"![alt] [id]"}]],"ref img II")}),test("inline_link",function(e,t){e.equivalent(t.processInline("[text] (url)"),[["link",{href:"url"},"text"]],"inline link I"),e.equivalent(t.processInline("[text](url 'title')"),[["link",{href:"url",title:"title"},"text"]],"inline link II"),e.equivalent(t.processInline("[text](url 'tit'le') after')"),[["link",{href:"url",title:"tit'le"},"text"]," after')"],"inline link III"),e.equivalent(t.processInline('[text](url "title")'),[["link",{href:"url",title:"title"},"text"]],"inline link IV"),e.equivalent(t.processInline("[text][id]"),[["link_ref",{ref:"id",original:"[text][id]"},"text"]],"ref link I"),e.equivalent(t.processInline("[text] [id]"),[["link_ref",{ref:"id",original:"[text] [id]"},"text"]],"ref link II"),e.equivalent(t.processInline("[to put it another way][SECTION 1] or even [link this](#SECTION-1)"),[["link_ref",{ref:"section 1",original:"[to put it another way][SECTION 1]"},"to put it another way"]," or even ",["link",{href:"#SECTION-1"},"link this"]],"ref link II")}),test("inline_autolink",function(e,t){e.equivalent(t.processInline("<http://foo.com>"),[["link",{href:"http://foo.com"},"http://foo.com"]],"autolink I"),e.equivalent(t.processInline("<mailto:foo@bar.com>"),[["link",{href:"mailto:foo@bar.com"},"foo@bar.com"]],"autolink II"),e.equivalent(t.processInline("<foo@bar.com>"),[["link",{href:"mailto:foo@bar.com"},"foo@bar.com"]],"autolink III")}),test("line_endings",function(e,t){var l=["markdown",["para","Foo"],["para","Bar"]];e.equivalent(t.toTree("Foo\n\nBar",["markdown"]),l,"Unix line endings"),e.equivalent(t.toTree("Foo\r\n\r\nBar",["markdown"]),l,"Windows line endings"),e.equivalent(t.toTree("Foo\r\rBar",["markdown"]),l,"Mac line endings"),e.equivalent(t.toTree("Foo\r\n\nBar",["markdown"]),l,"Mixed line endings")}),test("header_in_paragraph",function(e,t){var l=["markdown",["para","Foo"],["header",{level:1},"Title"],["para","Bar"]];e.equivalent(t.toTree("Foo\n#Title\nBar",["markdown"]),l,"Header in praragraph"),e.equivalent(t.toTree("Foo\n\n#Title\n\nBar",["markdown"]),l,"Header in praragraph")});