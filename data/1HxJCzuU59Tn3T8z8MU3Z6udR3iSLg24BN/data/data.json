{
	"title": "WALL-E",
	"description": "Explore Everything",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 15,
	"demo": false,
	"modified": 1464788925,
	"post": [
		{
			"post_id": 14,
			"title": "LNMP安装配置",
			"date_published": 1464788798.218,
			"body": "## 使用 debian nginx php mysql\n\n**Init**\n\n`vi remove.sh`\n\n```bash\napt-get update -y\nfor removepackages in apache2 apache2-doc apache2-utils apache2.2-common apache2.2-bin apache2-mpm-prefork apache2-doc apache2-mpm-worker mysql-client mysql-server mysql-common mysql-server-core-5.5 mysql-client-5.5 php5 php5-common php5-cgi php5-cli php5-mysql php5-curl php5-gd;\ndo apt-get purge -y $removepackages; done\nkillall apache2\ndpkg -l |grep apache \ndpkg -P apache2 apache2-doc apache2-mpm-prefork apache2-utils apache2.2-common\ndpkg -l |grep mysql \ndpkg -P mysql-server mysql-common libmysqlclient15off libmysqlclient15-dev\ndpkg -l |grep php \ndpkg -P php5 php5-common php5-cli php5-cgi php5-mysql php5-curl php5-gd\napt-get autoremove -y && apt-get clean\n```\n\n安装必要的软件\n\n```bash\n~ $ apt-get update\n~ $ apt-get install php5-fpm php5-gd php5-mcrypt nginx php5-mysql mysql-server mysql-server php-apc\n```\n\n---\n\n修改 Nginx 的配置文件添加或修改以下内容\n\n`~ $ vi /etc/nginx/nginx.conf`\n\n```nginx\nevents\n    {\n    use epoll;\n}\nhttp \n    {\n    server_names_hash_bucket_size 128;\n    client_header_buffer_size 32k;\n    large_client_header_buffers 4 32k;\n    client_max_body_size 50m;\n    \n    sendfile   on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 256k;  \n\n    gzip on;\n    gzip_min_length  1k;\n    gzip_buffers     4 16k;\n    gzip_http_version 1.1;\n    gzip_comp_level 2;\n    gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml application/xml+rss;\n    gzip_vary on;\n    gzip_proxied   expired no-cache no-store private auth;\n    gzip_disable   \"MSIE [1-6]\\.\";\n}\n```\n\n修改 nginx 网站配置文件\n\n`~ $ vi /etc/nginx/sites-enabled/default`\n\n```nginx\nserver\n{\n    root /var/www/default;\n\n    server_name foo.com www.foo.com;\n\n    index index.html index.htm index.php;\n\n    try_files $uri $uri/ /index.php?$args;\n\n    location /phpmyadmin {\n    }\n    \n    location ~ \\.php$ {\n        # fastsgi_split_path_info ^(.+\\.php)(/.+)$;\n        # 2016-05-29\n        fastcgi_pass unix:/var/run/php5-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        # $document_root 也可改为 nginx 的根目录路径 /var/www/default\n        # 2016-05-29\n        include fastcgi_params;\n    }\n    location ~/\\.ht {\n        deny all;\n    }\n}\n```\n\n安装 phpmyadmin 方便管理数据库\n\n```sh\n~ $ apt-get install phpmyadmin\n~ $ ln -s /usr/share/phpmyadmin/ /var/www/default/\n~ $ ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default\n~ $ chown -R www-data:www-data default/\n```\n\n修改 php 的配置文件\n\n`~ $ vi /etc/php5/fpm/php.ini`\n\n```\ncgi.fix_pathinfo = 0\nupload_max_filesize = 20M\npost_max_size = 20M\nexpose_php = off\nmax_execution_time = 90\nmemory_limit = 256M\n```\n\n修改 `php-apc` 的配置文件\n\n`~ $ vi /etc/php5/fpm/conf.d/20-apc.ini`\n\n```\nextension=apc.so\n\napc.enabled=1\napc.shm_size=128M\napc.ttl=3600\napc.user_ttl=7200\napc.gc_ttl=3600\napc.max_file_size=1M\n```\n\n测试 nginx 配置并重启服务\n\n```bash\n~ $ nginx -t\n~ $ service php5-fpm restart\n~ $ service mysql restart\n~ $ service nginx restart\n```\n\n> ```\n/etc/php5/fpm/php-fpm.conf\n/etc/php5/fpm/php.ini\n/etc/php5/fpm/pool.d/www.conf\n/etc/mysql/my.cnf\n```\n\n## 使用 debian nginx php mariadb\n\n安装必要的软件\n\n`~ $ apt-get install nginx php5-fpm php5-gd php5-mcrypt php5-mysql php-apc`\n\n安装 mariadb\n\n<https://downloads.mariadb.org/mariadb/repositories/>\n\n```bash\n~ $ sudo apt-get install python-software-properties\n~ $ sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db\n~ $ sudo add-apt-repository 'deb http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.0/debian wheezy main'\n~ $ sudo apt-get update\n    ~ $ sudo apt-get install mariadb-server\n```\n\n同上。\n\n## 使用 debian nginx php sqlite\n\n安装必要软件\n\n`~ $ apt-get install nginx php5-fpm php5-sqlite sqlite3 php-apc`\n\n下载 sqlite-integration\n\n<http://wordpress.org/plugins/sqlite-integration/>\n\n<https://downloads.wordpress.org/plugin/sqlite-integration.1.8.1.zip>\n\nExpand sqlite-integration.1.8.1.zip.\n\nMove sqlite-integration folder to wordpress/wp-content/plugins/ directory.\n\nCopy db.php file in the sqlite-integration folder to wp-conent folder.\n\nCopy wordpress/wp-config-sample.php to wp-config.php and some editing.Editing point is below.\n\n<https://api.wordpress.org/secret-key/1.1/salt/>\n\n编辑 WordPress 的配置文件\n\n`~ $ vi wp-config.php`\n\n```\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n```\n\nYou can get Authentication Unique Keys from <https://api.wordpress/secret-key/1.1/salt> as the comment says. Access this address with your browser and copy what you get here. You are recommended but not required to change the table prefix.\n\n编辑网站目录属性\n\n`~ $ sudo chown -R www-data:www-data default/`\n\nAfter you finish installing, you can activate this plugin (this is optional but I recommend you to).\n\nIf you use both SQLite and MySQL\n\nYou can use MySQL without uninstalling SQLite Integration by adding the next line to wp-config.php.\n\n`define('USE_MYSQL', true);`\n\nAs you know, the data in SQLite is not migrated automatically. And patched plugins won’t work properly with MySQL, so you can’t use them on both MySQL and SQLite.\n\nIf you change the database to SQLite again, change the line as below or remove the line from wp-config.php.\n\n`define('USE_MYSQL', 0);`\n\nIf you change your database file name or directory\n\nSQLite Integration creates \"wp-content/database/\" directory and puts the database file \".ht.sqlite\" in that directory. You can change this directory and file name. To change the directory, add this line in your wp-config.php file.\n\n`define('DB_DIR', '/your_directory_path/');`\n\nTo change the database file name, add this line.\n\n`define('DB_FILE', 'db_file_name');`\n\nYou can change either of them or both of them.\n\n### 注:Nginx配置SSL证书部署HTTPS网站\n\n所有版本已申请的证书放在 `/etc/letsencrypt/archive` 下，`/etc/letsencrypt/live` 是指向最新版本的符号链接。\n\n**生成2048位 DH parameters：**\n\n`$ sudo openssl dhparam -out /etc/ssl/certs/dhparams.pem 2048`\n\n```nginx\n##\n# You should look at the following URL's in order to grasp a solid understanding\n# of Nginx configuration files in order to fully unleash the power of Nginx.\n# http://wiki.nginx.org/Pitfalls\n# http://wiki.nginx.org/QuickStart\n# http://wiki.nginx.org/Configuration\n#\n# Generally, you will want to move this file somewhere, and start with a clean\n# file but keep this around for reference. Or just disable in sites-enabled.\n#\n# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.\n##\n\n# Default server configuration\n#\n\nserver {\n        listen 443 ssl default_server;\n        listen [::]:443 ssl default_server;\n        \n        server_name fb2kfans.tk www.fb2kfans.tk;\n        \n        ssl on;\n        ssl_certificate /path/to/chained.pem;\n        ssl_certificate_key /path/to/domain.key;\n        ssl_session_timeout 5m;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA';\n        ssl_session_cache shared:SSL:50m;\n        ssl_dhparam /etc/ssl/certs/dhparams.pem;\n        ssl_prefer_server_ciphers on;\n\n        root /var/www/jekyll;\n        \n        location / {\n                # First attempt to serve request as file, then\n                # as directory, then fall back to displaying a 404.\n                try_files $uri $uri/ $uri.html /404.html;\n        }\n}\n\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        # SSL configuration\n        #\n        # listen 443 ssl default_server;\n        # listen [::]:443 ssl default_server;\n        #\n        # Self signed certs generated by the ssl-cert package\n        # Don't use them in a production server!\n        #\n        # include snippets/snakeoil.conf;\n\n        #root /var/www/jekyll;\n\n        # Add index.php to the list if you are using PHP\n        index index.html index.htm;\n\n        server_name fb2kfans.tk www.fb2kfans.tk;\n\n        return 301 https://$server_name$request_uri;\n\n        #location / {\n        #        # First attempt to serve request as file, then\n        #        # as directory, then fall back to displaying a 404.\n        #        try_files $uri $uri/ $uri.html /404.html;\n        #}\n\n        #location /.well-known/acme-challenge/ {\n        #    alias /var/www/challenges/;\n        #    try_files $uri =404;\n        #}\n\n        #error_page 403 http://$host/404.html;\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #       include snippets/fastcgi-php.conf;\n        #\n        #       # With php5-cgi alone:\n        #       fastcgi_pass 127.0.0.1:9000;\n        #       # With php5-fpm:\n        #       fastcgi_pass unix:/var/run/php5-fpm.sock;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #       deny all;\n        #}\n}\n\n\n# Virtual Host configuration for example.com\n#\n# You can move that to a different file under sites-available/ and symlink that\n# to sites-enabled/ to enable it.\n#\n#server {\n#       listen 80;\n#       listen [::]:80;\n#\n#       server_name example.com;\n#\n#       root /var/www/example.com;\n#       index index.html;\n#\n#       location / {\n#               try_files $uri $uri/ =404;\n#       }\n#}\n```\n\n检测配置文件没问题后重新读取 Nginx 即可\n\n`nginx -t && nginx -s reload`\n\n**配置 http 强制跳转到 https：**\n\n```nginx\nserver {\n    listen      80;\n    server_name example.me;\n    rewrite     ^ https://$server_name$request_uri? permanent;\n}\n```\n\n```nginx\nserver {\n\n    listen 80;\n\n    server_name www.saxieyu.com;\n\n    return 301 https://$server_name$request_uri;\n\n}\n```\n\n还有一种方法，非常规手段，即利用 497 状态码。\n\n当此虚拟机只允许 HTTPS 来访问时，用 HTTP 访问会让 Nginx 报 497 错误，然后利用 error_page 将链接重定向至 HTTPS 上，即：\n\n```nginx\nserver {\n    listen 443 ssl;\n    listen 80;\n    server_name domain.com;\n    ssl on;\n    # other\n    error_page 497 https://$server_name$request_uri;\n}\n```\n\n当然 497 一般用于非标准端口上，譬如 9443 端口默认使用使用 ssl\n\n```nginx\nserver {\n    listen 9443 ssl;\n    server_name domain.com;\n    # other\n    error_page 497 https://$server_name$server_port$request_uri;\n}\n```\n\n同时，如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问\n\n```\nadd_header Strict-Transport-Security max-age=63072000;\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\n```\n\n*2016-05-13*\n\n构建网站下载的方法有很多，比如搭建 ftp 服务器。\n\n但是 ftp 服务器搭建配置非常麻烦和复杂，对小白来说很难入手。\n下面配置Nginx的目录功能构建网站资源下载站\n\n安装nginx\n\n`apt-get install nginx //debian,ubuntu`\n\n编辑 `nginx.conf` 文件\n\n在 `server` 或 `location` 段里添加上\n\n`autoindex on;`\n\n重启 nginx 即可，把资源文件拷贝到 nginx 网站根目录下即可，也可以直接在 nginx.conf 指定网站根目录。\n下面是可选参数\n\n`autoindex_exact_size off;`\n\n默认为 `on`，显示出文件的确切大小，单位是 `bytes`。\n\n改为 `off` 后，显示出文件的大概大小，单位是 kB 或者 MB 或者 GB\n\n`autoindex_localtime on;`\n\n默认为 off，显示的文件时间为 GMT 时间。\n\n改为 on 后，显示的文件时间为文件的服务器时间\n"
		},
		{
			"post_id": 13,
			"title": "Raspbian 使用 Xware 远程下载",
			"date_published": 1461678322.077,
			"body": ">Raspberry PI B+ , Raspbian , Xware\n\n[下载迅雷固件Xware](http://luyou.xunlei.com/thread-12545-1-1.html)选择 Xware1.0.31_armel_v5te_glibc.zip 。\n\n```\nmkdir xunlei\ncd xunlei\nunzip Xware1.0.31_armel_v5te_glibc.zip\n./portal\n```\n\n记下 `THE ACTIVE CODE IS:******`\n\n其中 `******` 为六位激活码。\n\n或者打开 <http://localhost:9000/getsysinfo> 从返回的结果中，找到6位数的激活码\n\n然后登录迅雷远程下载官网 [http://yuancheng.xunlei.com/](http://yuancheng.xunlei.com/) 先登录，再在我的下载器后的添加中的激活码框中输入之前的机器码。\n\n---\n\n返回结果对应说明：\n\n`[result, is_net_ok, is_license_ok, is_bind_ok, \"bind_acktive_key\", is_disk_ok, \"version\", \"user_name\", is_ever_binded, userid, vip_level]`\n\n```\nresult: 0表示返回结果成功\nis_net_ok: 1表示检测网络正常，0表示检测网络异常\nis_license_ok: 1表示license检测通过，0表示license检测不通过\nis_bind_ok: 1表示已绑定成功，0表示未绑定\nbind_acktive_key: 此字符串为绑定key，在未绑定的情况下，会返回绑定的key；已绑定成功时，或返回空\nis_disk_ok: 1表示磁盘挂载检测成功，0表示磁盘挂载检测失败\nversion: 目前运行的迅雷库版本\nuser_name: 如果已绑定，返回绑定的用户名；否则返回为空\nis_ever_binded: 如果曾经绑定，则为1，从未绑定过则为0，一般在网络断开时检查此字段判断是否可以查看任务列表\nuserid: 绑定的迅雷会员ID\nvip_level: 绑定的迅雷会员等级\n```\n\n解除绑定 <http://localhost:9000/unbind> 若返回结果为[0]，则解绑成功，否则不成功\n\n设置开机启动\n\n```\nsudo vi /etc/rc.local\nsu pi -c /home/pi/xunlei/portal +\n```"
		},
		{
			"post_id": 12,
			"title": "使用 ZeoroNet 记录",
			"date_published": 1461509446.998,
			"body": "[ZeoroNet 地址](https://github.com/hellozeronet/zeronet)\n[ZeoroNet 下载地址](https://github.com/HelloZeroNet/ZeroBundle/releases/)\n\n下载 ZeoroBundle 之后，解压到任意目录，运行 `*\\ZeoroBundle\\zeronet.cmd`\n\n即可启动 ZeoroNet 。\n\n通过 [ZeroID](http://127.0.0.1:43110/zeroid.bit)注册一个 ZeroID 。\n\n通过 [Welcome to ZeroNet](http://127.0.0.1:43110/) 的 [ZeroMail](http://127.0.0.1:43110/Mail.ZeroNetwork.bit/) 激活 ZeroMail 。\n\n备份 ZeroNet 账号，ZeroNet 的账号为 `*\\ZeroBundle\\ZeroNet\\data\\users.json` 文件，在其它设备，通过还原此文件，即可还原账号。\n\n---\n\n**让 ZeroNet 通过 Tor 连接网络**，要求 Tor 版本最低为: 0.2.7.5\n\n下载 [Expert Bundle](https://www.torproject.org/download/download.html) 即 `tor-win32-*.zip`\n\n将 `*\\tor-win32-*.zip\\Tor\\` 中的所有文件复制到 `*\\ZeroBundle\\ZeroNet\\tools\\tor` 目录下，复制 `*\\tor-win32-*.zip\\Data\\Tor` 下的文件复制到 `*\\ZeroBundle\\ZeroNet\\tools\\tor\\Data` 目录下（Date 目录需要创建）。\n\n完成之后，tor的目录结构为：\n```\n*\\ZeroBundle\\ZeroNet\\tools\\tor:\n │ libeay32.dll\n │ libevent-2-0-5.dll\n │ libevent_core-2-0-5.dll\n │ libevent_extra-2-0-5.dll\n │ libgcc_s_sjlj-1.dll\n │ libssp-0.dll\n │ manual_install.txt\n │ ssleay32.dll\n │ start.cmd\n │ tor.exe\n │ torrc\n │ zlib1.dll\n\ntools\\tor\\data:\n │ geoip\n │ geoip6\n```\n\n备份并编辑 `*\\ZeroBundle\\ZeroNet\\tools\\tor\\torrc` 文件。\n```\n# Tor config for ZeroNet\n\n# Use Http/Https proxy or Socks5 proxy\n# HTTPSProxy 127.0.0.1:8123\nSocks5Proxy 127.0.0.1:1080\n\nDataDirectory data\nDirReqStatistics 0\nGeoIPFile geoip\\geoip\nGeoIPv6File geoip\\geoip6\n\n# Log notice file data\\notice.log\n```\n\n启动 ZeoroNet ,它将运行 `*\\ZeroBundle\\ZeroNet\\tools\\tor\\tor.exe` 文件。\n\n页面 [Welcome to ZeroNet](http://127.0.0.1:43110/) 右上角 Tor 状态将为 `TOR: OK` 。 在 `TOR: OK` 的菜单中选择 `Enable Tor for every connection (slower)`，即可将所有连接通过TOR。\n\n**创建一个 ZeoroNet 网站**\n\n如果 ZeoroNet 正在运行，则将其关闭。打开 `CMD` 切换到 ZeoroNet 所在的目录。\n\n```\nMicrosoft Windows [版本 6.1.7601]\n版权所有 (c) 2009 Microsoft Corporation。保留所有权利。\n\nC:\\Users\\thedawn>X:\nX:\\>cd ZeroBundle\\ZeroNet\n\nX:\\ZeroBundle\\ZeroNet>\"../python/python.exe\" zeronet.py siteCreate\n...\n- Site private key: 23DKQpzxhbVBrAtvLEc2uvk7DZweh4qL3fn3jpM3LgHDczMK2TtYUq\n- Site address: 13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2\n...\n- Site created!\n```\n\n创建的网站地址为 `13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2` 每次执行 `siteCreate` 产生的地址都不一样，只需要将 `13DNDkMUExRf9Xa9ogwPKqp7zyHFEqbhC2` 显示的地址替换为相应的地址。\n\n**NOTE**: 注意保管 `Site private key` 。\n\n这样就在 `*\\ZeroBundle\\ZeroNet\\data\\[yoursiteaddress]` 目录下创建了一个网站。\n\n复制 `*\\ZeroBundle\\ZeroNet\\data\\1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8` 目录下的所有文件到 `*\\ZeroBundle\\ZeroNet\\data\\[yoursiteaddress]` 文件夹下，删除其中的 `date` 目录，并将 `data-default` 复制一份重命名为 `date` 来产生一个空的，干净的网站，重命名 `[yoursiteaddress]\\data\\users\\content-default.json` 文件为 `[yoursiteaddress]\\data\\users\\content.json` \n\n运行 ZeoroNet 打开网站 http://127.0.0.1:43110/[yoursiteaddress] 添加新内容，通过 `Sign & Publish new content` 来提交更新，需输入 `Site private key`。\n\n也可以通过侧边栏（按住右上角的菜单按钮向右拉），将 `This is my site` 点绿可以修改网站的标题和描述，通过 `sign` 和 `Publish` 来提交更新，需先 sign 再 publish 。\n\n**修改头像**\n\n将需要修改为头像的图片保存为 60x60 的 `avatar.png` , 并替换 `*\\ZeroBundle\\ZeroNet\\data\\[yoursiteaddress]\\img` 目录下的 avatar.png 之后，通过 `This is my site` 下的 `sign` 和 `Publish` 来提交更新。"
		},
		{
			"post_id": 11,
			"title": "Raspberry Pi B+ 安装配置记录",
			"date_published": 1461497844.485,
			"body": ">树莓派配备一枚博通（Broadcom）出产的ARM架构700MHz BCM2835处理器，256MB內存（B型已升级到512MB内存），使用SD卡当作存储媒体，且拥有一个Ethernet、两个USB接口、以及HDMI（支持声音输出）和RCA端子输出支持。\n\n###登陆树莓派\n```\n$ login as:pi\n$ password:\n$ sudo passwd root\n$ sudo passwd --unlock root\n$ sudo raspi-config\n    1 Expand Filesystem\n    2 Change User Password\n    3 Internationalisation Options\n    ---I1 Change Locale\n    ---I2 Change Timezone\n```\n\n**Note**:可能用到的命令\n`~ $ sudo apt-get update`\n`~ $ sudo apt-get upgrade`\n`~ $ sudo rpi-update`\n\n---\n\n###设置无线网卡\n\n修改 `sudo vi /etc/network/interfaces` 文件\n\n```\nauto lo\n\niface lo inet loopback\niface eth0 inet dhcp\n\nallow-hotplug wlan0\niface wlan0 inet manual\nwpa-roam /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp\n```\n\n修改 `sudo vi /etc/wpa_supplicant/wpa_supplicant.conf` 文件\n```\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\n    ssid=\"foo\"\n    psk=\"foo\"\n}\n```\n\n**注1**：\n```\n1、wifi没有密码\nnetwork={\n    ssid=\"foo\"\n    key_mgmt=NONE\n}\n2、wifi使用WEP加密\nnetwork={\n    ssid=\"foo\"\n    key_mgmt=NONE\n    wep_key0=\"foo\"\n}\n3、wifi使用WPA/WPA2加密\nnetwork={\n    ssid=\"foo\"\n    key_mgmt=WPA-PSK\n    psk=\"foo\"\n}\n4、如果设置多个wifi，其中 priority=n ,n值越大优先级越高。\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\nnetwork={\n    ssid=\"foo\"\n    psk=\"foo\"\n    priority=1\n}\nnetwork={\n    ssid=\"foo\"\n    psk=\"foo\"\n    priority=2\n}\nnetwork={\n    ssid=\"foo\"\n    psk=\"foo\"\n    priority=3\n}\n```\n\n**注2**：\n```\n使用静态 IP 地址\n~ $ cd /etc/network\n~ $ sudo vi interfaces\n把iface eth0 inet dhcp中的dhcp换成static也就是以下文本\niface eth0 inet static\naddress 192.168.1.100\nnetmask 255.255.255.0\ngateway 192.168.1.1\n最后重启。\n```\n\n###修改DNS\n\n`~ $ sudo vi /etc/resolv.conf`\n\n加入:\n```\nnameserver 223.5.5.5\nnameserver 223.6.6.6\n```\n\n**注**：\n```\nsudo cp /etc/resolv.conf /home/pi/.alidns\nvi /etc/rc.local\ncat /home/pi/.alidns > /etc/resolv.conf\nmount /dev/sda1 /home/pi/downloads\n```\n\n###SSH密钥认证\n```\nputtygen.exe\n~ $ vi ~/.ssh/authorized_keys\n公钥只有一行。\n```\n\n###修改更新源\n\n`~ $ sudo vi /etc/apt/sources.list`\n\n添加以下内容：\n```\ndeb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main non-free contrib\ndeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main non-free contrib\n```\n\n###安装 htop tmux nethogs tsocks\n\n`~ $ sudo apt-get update`\n`~ $ sudo apt-get install htop tmux tsocks`\n`~ $ vi /etc/tsocks.conf`\n\n修改 `/etc/tsocks.conf` 以下内容：\n```\nlocal = 192.168.1.0/255.255.255.0\nlocal = 10.0.0.0/255.0.0.0\nlocal = 127.0.0.0/255.0.0.0\npath {\n        reaches = 150.0.0.0/255.255.0.0\n        reaches = 150.1.0.0:80/255.255.0.0\n        server = 10.1.7.25\n        server_type = 5\n        default_user = delius\n        default_pass = hello\n}\nserver = 127.0.0.1\nserver_type = 5\nserver_port = 1080\n```\n\n###可以用proxychains代替tsocks\n\nInstall [proxychains](http://proxychains.sourceforge.net/).\n\n`~ $ apt-get install proxychains`\n    \n配置文件说明\n```\n# Dynamic - Each connection will be done via chained proxies\n# all proxies chained in the order as they appear in the list\n# at least one proxy must be online to play in chain\n# (dead proxies are skipped)\n# otherwise EINTR is returned to the app\n动态模式\n按照列表内指定的代理的顺序执行代理操作，遇到不可用代理时会自动切换\n至少需要一个可用代理\n\n# Strict - Each connection will be done via chained proxies\n# all proxies chained in the order as they appear in the list\n# all proxies must be online to play in chain\n# otherwise EINTR is returned to the app\n严格模式\n代理顺序严格按照列表顺序来，列表内代理必须全部处于可用状态\n# Random - Each connection will be done via random proxy\n# (or proxy chain, see chain_len) from the list\n# this option is good for scans\n随机模式\n随机选择代理代理列表里面的代理，代理个数由chain_len决定（如果你的代理个数少于chain_len个数，会报错）\n[ProxyList]配置节指定了代理列表。支持socks4/5 http等\n还支持带认证的代理\n比如\ntype host port [user pass]\nsocks5 192.168.67.78 1080 lamer secret\n```\n\n**[注]**：配置文件样例 `vi ~/.proxychains/proxychains.conf`\n```\nstrict_chain\nproxy_dns \nremote_dns_subnet 224\ntcp_read_time_out 15000\ntcp_connect_time_out 8000\nlocalnet 127.0.0.0/255.0.0.0\nquiet_mode\n\n[ProxyList]\nsocks5  127.0.0.1 1080\n```\n\n或者 `vi /etc/proxychains.conf`\n```\n#cat /etc/proxychains.conf |grep -v \"#\" |sed /^$/d\ndynamic_chain\nchain_len = 1\ntcp_read_time_out 15000\ntcp_connect_time_out 10000\n[ProxyList]\nsocks5  127.0.0.1   1080\n```\n\n使用方法和tsocks是一样的，比如\n```\n~ $ proxychains curl https://www.twitter.com/\n~ $ proxychains git push origin master\n```\n\n或者\n```\n~ $ proxychains bash\n~ $ curl https://www.twitter.com/\n~ $ git push origin master\n```"
		},
		{
			"post_id": 10,
			"title": "Git安装配置和命令摘要 ",
			"date_published": 1461287851.84,
			"body": ">Git是一个分散式版本控制软件，最初由林纳斯·托瓦兹（Linus Torvalds）创作，于2005年以GPL发布。最初目的是为更好地管理Linux内核开发而设计。应注意的是，这与GNU Interactive Tools（一个类似Norton Commander界面的文件管理器）有所不同。\n\n```\n[注]:\n1.命令说明\n$ ssh-keygen -t ecdsa -b 521 -C \"$(whoami)@$(hostname)-$(date -I)\" -f ~/.ssh/rpi\nssh-keygen 生成了一对长度为 521 bit (-b 521) 的 ECDSA (-t ecdsa) 加密的密钥对，comment 为 -C \"$(whoami)@$(hostname)-$(date -I)\", 密钥对存储为 -f ~/.ssh/rpi 不需要后缀名。\n2.如果您的 SSH 服务器忽略了您的 SSH 密钥对，您需要检查一下相关文件的权限是否正确。\n本地机器上：\n$ chmod 700 ~/\n$ chmod 700 ~/.ssh\n$ chmod 600 ~/.ssh/id_ecdsa\n服务器上：\n$ chmod 700 ~/\n$ chmod 700 ~/.ssh\n$ chmod 600 ~/.ssh/authorized_keys\n不修改密钥对的情况下修改密码短语\n您可以使用 ssh-keygen 命令来修改密码短语，而无需改动密钥对。假设您要修改的密钥对使用 RSA 加密，输入以下命令即可：\n$ ssh-keygen -f ~/.ssh/id_rsa -p\n管理多组密钥对\n您可以创建 ~/.ssh/config 来管理多组密钥对，每一个 SSH 服务器对应一组密钥对。或者，您甚至可以对所有的 SSH \t服务器使用同一组密钥对。不过如果您觉得这样不合适，还是编辑配置文件：\n```\n\n---\n\n`vi ~/.ssh/config`\n\n```\nHost SERVERNAME1\n  IdentitiesOnly yes\n  IdentityFile ~/.ssh/id_rsa_SERVER1\n  # CheckHostIP yes\n  # Port 22\nHost SERVERNAME2\n  IdentitiesOnly yes\n  IdentityFile ~/.ssh/id_rsa_SERVER2\n  # CheckHostIP no\n  # Port 2177\nControlMaster auto\nControlPath /tmp/%r@%h:%p\n```\n之后删除 ~/.ssh/known_hosts 中相应的host内容。\n\n### Generating SSH keys\n```\nls -al ~/.ssh                                            # Check for SSH keys\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"    # Generate a new SSH key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"    # Generate a new SSH key\n$ ssh-agent -s                                           # If you are using Git Bash, turn on ssh-agent\n$ eval $(ssh-agent -s)                                   # If you are using another terminal prompt, such as msysgit, turn on ssh-agent\n  - Agent pid 59566\n$ ssh-add ~/.ssh/id_rsa                                  # Add your SSH key to the ssh-agent\n$ clip < ~/.ssh/id_rsa.pub                               # Copy the SSH key to your clipboard.\n  - change the filename from id_rsa.pub to the one that matches your key\n```\n\nAdd the copied key to GitHub : Settings > SSH keys > Add SSH key > Add key.\n\n`$ ssh -T git@github.com                                  # Test the connection`\n\nYou may see this warning, type yes.\n\nHi `username!` You've successfully authenticated, but GitHub does not provide shell access. If the username in the message is yours, you've successfully set up your SSH key!\n\n### 设置本地用户信息\n\n`$ git config --global user.name \"foo\"`\n`$ git config --global user.email \"foo\"`\n\n设置 / 取消代理\n\n`$ git config --global http.proxy http://127.0.0.1:7777`\n`$ git config --global --unset http.proxy`\n\n### 命令摘要\n```\nCreate new local repository\n$ git init\n$ git remote add origin foo\n\nPush an existing repository\n$ git remote add origin foo\n\n$ git status\n$ git add file\n  - $ git add .\n$ git status\n$ git commit -m \"foo\"\n$ git push origin master\n  - $ git pull origin master\n\n$ git tag\n$ git tag v0.0.0.0\n$ git push origin --tags\n\n$ git branch -a                                          # 查看远程分支\n$ git push origin --delete foo                           # 删除远程分支\n$ git push origin --delete tag foo                       # 删除tag\n$ git push origin :foo                                   # 推送一个空分支到远程分支，其实就相当于删除远程分支\n$ git tag -d foo\n$ git push origin :refs/tags/foo                         # 推送一个空tag到远程tag\n$ git push --tags                                        # 把本地tag推送到远程\n$ git fetch origin tag foo                               # 获取远程tag\n```"
		},
		{
			"post_id": 9,
			"title": "Windows 上使用 aria2c",
			"date_published": 1461203582.268,
			"body": ">Windows 10 , (x64)\n\n[aria2](https://aria2.github.io/)\n\n下载 aria2c windows版本程序，将所有文件解压到：D:\\Program Files\\aria2\\\n\n```\nD:\\Program Files\\aria2\n                  ├─aria2.conf\n                  ├─aria2.lnk\n                  ├─Aria2.log\n                  ├─aria2.session\n                  ├─aria2c.exe\n                  ├─AUTHORS\n                  ├─ChangeLog\n                  ├─COPYING\n                  ├─HideRun.vbs\n                  ├─LICENSE.OpenSSL\n                  ├─NEWS\n                  ├─README.html\n                  └─README.mingw\n```\n\n`Aria2.log` 和 `aria2.session` 为新建的空文件，分别对应日志和下载历史。\n\n创建并使用 `HideRun.vbs` 运行。\n\nHideRun.vbs 内容为：\n\n`CreateObject(\"WScript.Shell\").Run \"D:\\Progra~1\\aria2\\aria2c.exe --conf-path=aria2.conf\",0`\n\n注：其中 `D:\\Progra~1\\aria2\\aria2c.exe` 为 aria2c.exe 所在地址，可适当修改比如： `C:\\Windows\\aria2c.exe` 。\n\n`aria2.lnk` 为创建 `HideRun.vbs` 的快捷方式，复制到 `C:\\Users\\ZHANG\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup` 中即可自动开机启动。\n\n---\n\n创建或修改 `aria2.conf` 内容为：\n\n```\n# 基本配置\n# 下载目录\ndir=D:\\Downloads\\\n# log=D:\\Program Files\\aria2\\Aria2.log\n# 下载从这个文件中找到的 urls, 需自己建立这个文件\n# touch /home/pi/.aria2/aria2.session\ninput-file=D:\\Program Files\\aria2\\aria2.session\n# 最大同时下载任务数，默认 5\nmax-concurrent-downloads=3\n# 断点续传，只适用于 HTTP(S)/FTP\ncontinue=true\n\n# HTTP/FTP 配置\n# 关闭连接如果下载速度等于或低于这个值，默认 0\nlowest-speed-limit=0\n# 对于每个下载在同一个服务器上的连接数，默认 5\nmax-connection-per-server=5\n# 每个文件最小分片大小，例如文件 20M，设置 size 为 10M, 则用2个连接下载，默认 20M\nmin-split-size=10M\n# 下载一个文件的连接数，默认 5\nsplit=5\n\n# BT 特殊配置\n# 启用本地节点查找，默认 false\nbt-enable-lpd=true\n# 指定最大文件数对于每个 bt 下载，默认 100\nbt-max-open-files=100\n# 单种子最大连接数，默认 55\nbt-max-peers=55\n# 设置最低的加密级别，可选全连接加密 arc4，默认是头加密 plain\nbt-min-crypto-level=plain\n# 总是使用 obfuscation handshake，防迅雷必备，默认 false\nbt-require-crypto=true\n# 如果下载的是种子文件则自动解析并下载，默认 true\nfollow-torrent=true\n# 为 BT 下载设置 TCP 端口号，确保开放这些端口，默认 6881-6999\nlisten-port=6881-6999\n# 整体上传速度限制，0 表示不限制，默认 0\nmax-overall-upload-limit=0\n# 每个下载上传速度限制，默认 0\nmax-upload-limit=0\n# 种子分享率大于1, 则停止做种，默认 1.0\nseed-ratio=1\n# 做种时间大于2小时，则停止做种\nseed-time=120\n\n# RPC 配置\n# 开启 JSON-RPC/XML-RPC 服务，默认 false\nenable-rpc=true\n# 允许所有来源，web 界面跨域权限需要，默认 false\nrpc-allow-origin-all=true\n# 允许外部访问，默认 false\nrpc-listen-all=true\n# rpc 端口，默认 6800\nrpc-listen-port=6800\n# 设置最大的 JSON-RPC/XML-RPC 请求大小，默认 2M\nrpc-max-request-size=2M\n# rpc 密码，可不设置\n# rpc-passwd=raspberry\n# rpc 用户名，可不设置\n# rpc-user=aria2pi\n\n# 高级配置\n# This is useful if you have to use broken DNS and\n# want to avoid terribly slow AAAA record lookup.\n# 默认 false\ndisable-ipv6=true\n# 指定文件分配方法，预分配能有效降低文件碎片，提高磁盘性能，缺点是预分配时间稍长\n# 如果使用新的文件系统，例如 ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc 是最好的选择\n# 如果设置为 none，那么不预先分配文件空间，默认 prealloc\n# file-allocation=falloc\n# 整体下载速度限制，默认 0\nmax-overall-download-limit=0\n# 每个下载下载速度限制，默认 0\nmax-download-limit=0\n# 保存错误或者未完成的下载到这个文件\n# 和基本配置中的 input-file 一起使用，那么重启后仍可继续下载\nsave-session=D:\\Program Files\\aria2\\aria2.session\n# 每5分钟自动保存错误或未完成的下载，如果为 0, 只有 aria2 正常退出才回保存，默认 0\nsave-session-interval=300\n\n# 若要用于 PT 下载，需另外的配置，这里没写\n```\n\n注：`dir=D:\\Downloads\\` 为下载地址。\n\n大文件不使用百度云下载：\n将要下载的文件所在的页面地址栏中的 `http://***` 添加 `s` 改为 `https://***` 载入页面，再点击下载。\n\naria2 伪装百度云：在 `aria2.conf` 文件的末尾添加\n```\nuser-agent=netdisk;5.2.7;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia\nreferer=http://pan.baidu.com/disk/home\n```\nJSON_RPC Path: `http://localhost:6800/jsonrpc`\n\n[Aria2 WebUI](http://ziahamza.github.io/webui-aria2/)\n\n[Yet Another Aria2 Web Frontend](http://binux.github.io/yaaw/demo/)"
		},
		{
			"post_id": 8,
			"title": "aria2的安装记录",
			"date_published": 1461160814.934,
			"body": ">RaspberryPI B Plus , Raspbian\n\n###安装 aria2\n\n`~ $ sudo apt-get update`\n`~ $ sudo apt-get install aria2`\n\n###创建必要目录并修改 `aria2` 的配置文件\n\n`~ $ mkdir /home/pi/.aria2`\n`~ $ touch /home/pi/.aria2/aria2.conf`\n`~ $ touch /home/pi/.aria2/aria2.session`\n`~ $ vi /home/pi/.aria2/aria2.conf`\n\n---\n\n###基本配置\n```\t\n# 下载目录\ndir=/home/pi/downloads\n# 下载从这个文件中找到的 urls, 需自己建立这个文件\n# touch /home/pi/.aria2/aria2.session\ninput-file=/home/pi/.aria2/aria2.session\n# 最大同时下载任务数，默认 5\nmax-concurrent-downloads=3\n# 断点续传，只适用于 HTTP(S)/FTP\ncontinue=true\n\n# HTTP/FTP 配置\n# 关闭连接如果下载速度等于或低于这个值，默认 0\nlowest-speed-limit=0\n# 对于每个下载在同一个服务器上的连接数，默认 5\nmax-connection-per-server=5\n# 每个文件最小分片大小，例如文件 20M，设置 size 为 10M, 则用2个连接下载，默认 20M\nmin-split-size=10M\n# 下载一个文件的连接数，默认 5\nsplit=5\n\n# BT 特殊配置\n# 启用本地节点查找，默认 false\nbt-enable-lpd=true\n# 指定最大文件数对于每个 bt 下载，默认 100\nbt-max-open-files=100\n# 单种子最大连接数，默认 55\nbt-max-peers=55\n# 设置最低的加密级别，可选全连接加密 arc4，默认是头加密 plain\nbt-min-crypto-level=plain\n# 总是使用 obfuscation handshake，防迅雷必备，默认 false\nbt-require-crypto=true\n# 如果下载的是种子文件则自动解析并下载，默认 true\nfollow-torrent=true\n# 为 BT 下载设置 TCP 端口号，确保开放这些端口，默认 6881-6999\nlisten-port=6881-6999\n# 整体上传速度限制，0 表示不限制，默认 0\nmax-overall-upload-limit=0\n# 每个下载上传速度限制，默认 0\nmax-upload-limit=0\n# 种子分享率大于1, 则停止做种，默认 1.0\nseed-ratio=1\n# 做种时间大于2小时，则停止做种\nseed-time=120\n\n# RPC 配置\n# 开启 JSON-RPC/XML-RPC 服务，默认 false\nenable-rpc=true\n# 允许所有来源，web 界面跨域权限需要，默认 false\nrpc-allow-origin-all=true\n# 允许外部访问，默认 false\nrpc-listen-all=true\n# rpc 端口，默认 6800\nrpc-listen-port=6800\n# 设置最大的 JSON-RPC/XML-RPC 请求大小，默认 2M\nrpc-max-request-size=2M\n# rpc 密码，可不设置\n# rpc-passwd=raspberry\n# rpc 用户名，可不设置\n# rpc-user=pi\n\n# 高级配置\n# This is useful if you have to use broken DNS and\n# want to avoid terribly slow AAAA record lookup.\n# 默认 false\ndisable-ipv6=true\n# 指定文件分配方法，预分配能有效降低文件碎片，提高磁盘性能，缺点是预分配时间稍长\n# 如果使用新的文件系统，例如 ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc 是最好的选择\n# 如果设置为 none，那么不预先分配文件空间，默认 prealloc\nfile-allocation=falloc\n# 整体下载速度限制，默认 0\nmax-overall-download-limit=0\n# 每个下载下载速度限制，默认 0\nmax-download-limit=0\n# 保存错误或者未完成的下载到这个文件\n# 和基本配置中的 input-file 一起使用，那么重启后仍可继续下载\nsave-session=/home/pi/.aria2/aria2.session\n# 每5分钟自动保存错误或未完成的下载，如果为 0, 只有 aria2 正常退出才回保存，默认 0\nsave-session-interval=300\n```\n添加开机自启动\n```\n~ $ aria2c --conf-path=/home/pi/.aria2/aria2.conf\n~ $ vi /etc/rc.local\n    aria2c --conf-path=/home/pi/.aria2/aria2.conf -D\n```\n[Aria2 WebUI](http://ziahamza.github.io/webui-aria2/)\n\n[Yet Another Aria2 Web Frontend](http://binux.github.io/yaaw/demo/)"
		},
		{
			"post_id": 4,
			"title": "Hello World!",
			"date_published": 1461156250.632,
			"body": "Hello World!\n2016-04-20 20:45 ."
		},
		{
			"post_id": 1,
			"title": "Congratulations!",
			"date_published": 1433033779.604,
			"body": "Your zeronet blog has been successfully created!"
		}
	]
}