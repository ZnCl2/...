{
	"title": "Shadowsky",
	"description": "Shadowsky ZeroBlog.",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 7,
	"demo": false,
	"modified": 1468229691,
	"post": [
		{
			"post_id": 6,
			"title": "ubuntu 14.04 MySQL 复制介绍及搭建",
			"date_published": 1462084635,
			"body": "## **MySQL复制介绍**\n**MySQL复制有那些好处**：\n- 第一是解决宕机带来的数据不一致，因为MySQL复制可以实时备份数据；\n- 第二点是减轻数据库服务器的压力，多台服务器的性能一般比单台要好。但是MySQL复制不适合大数据量，大数据量推荐使用集群。\n---\n**MySQL复制过程分成三步**：\n- master将改变记录到二进制日志（binary log）。这些记录过程叫做二进制日志事件，binary log events；\n- slave将master的binary log events拷贝到它的中继日志（relay log）；\n- slave重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的。\n\n## **MySQL复制搭建**\n**环境准备**\nmaster 192.168.1.5\nslave 192.168.1.6\nOS：ubuntu 14.04\nMySQL：5.5.49\n\n**Master配置**\n1）分配复制权限\n主库和从库均需要执行\n```\nmysql> grant replication client,replication slave on *.* to 'root'@'192.168.1.%' identified by 'root';\nQuery OK, 0 rows affected (0.00 sec)\n```\n2）编辑mysql配置文件，去掉#注释。\n```\n#nano /etc/mysql/my.cnf\nserver-id = 1\n```\n3）清空日志文件\n主从库都是默认开启二进制日志文件\n```\nmysql> show binary logs;\n+------------------+-----------+\n| Log_name         | File_size |\n+------------------+-----------+\n| mysql-bin.000001 |     26636 |\n| mysql-bin.000002 |   1069399 |\n| mysql-bin.000003 |     26636 |\n| mysql-bin.000004 |   1069399 |\n| mysql-bin.000005 |       536 |\n+------------------+-----------+\n5 rows in set (0.00 sec)\n\nmysql> reset master;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql> show binary logs;\n+------------------+-----------+\n| Log_name         | File_size |\n+------------------+-----------+\n| mysql-bin.000001 |       107 |\n+------------------+-----------+\n1 row in set (0.00 sec)\n```\n需要注意的是，如果不想清空日志文件的话，需要记录当前master的log_file和log_pos，并在下面启用复制操作时指定这两个参数或者在slave的配置文件指定。\n\n**Slave设置**\n1） 编辑mysql配置文件，修改从服务器server-id。\n```\n#nano /etc/mysql/my.cnf\nserver-id = 2\n```\n修改完以后需要重启数据库\n2）清空日志文件，同Master\n3）启用复制\n让slave连接master并开始重做master二进制日志中的事件\n```\nmysql> change master to \nmaster_host='192.168.1.5',master_user='root',master_password='root',master_port=3306,master_log_file='mysql-bin.000001',master_log_pos=0;\n```\nmaster_log_pos的值为0，因为它是日志的开始位置；master_log_file是初始日志文件。如果master日志没有被清空，这里就是当前master的日志信息\n\n需要注意的是，默认情况下，会同步该用户下所有的DB，如果想限定哪些DB，有3种思路\n\n在master上的/etc/mysql/my.cnf中通过参数binlog-do-db、binlog-ignore-db设置需要同步的数据库。\n在执行grant分配权限操作的时候，限定数据库\n在slave上限定数据库使用replicate-do-db=dbname\n4）开启slave\n```\nmysql> start slave;\nQuery OK, 0 rows affected (0.00 sec)\n```\n5）确认Slave是否和Mater成功通信。如果 Slave_IO_Running和Slave_SQL_Running都是yes，则证明配置成功\n```\nmysql> show slave status\\G;\n*************************** 1. row ***************************\n               Slave_IO_State: Waiting for master to send event\n                  Master_Host: 192.168.1.5\n                  Master_User: root\n                  Master_Port: 3306\n                Connect_Retry: 60\n              Master_Log_File: mysql-bin.000001\n          Read_Master_Log_Pos: 107\n               Relay_Log_File: rac-node2-relay-bin.000002\n                Relay_Log_Pos: 253\n        Relay_Master_Log_File: mysql-bin.000001\n            **Slave_IO_Running: Yes**\n            **Slave_SQL_Running: Yes**\n              Replicate_Do_DB: \n          Replicate_Ignore_DB: \n           Replicate_Do_Table: \n       Replicate_Ignore_Table: \n      Replicate_Wild_Do_Table: \n  Replicate_Wild_Ignore_Table: \n                   Last_Errno: 0\n                   Last_Error: \n                 Skip_Counter: 0\n          Exec_Master_Log_Pos: 107\n              Relay_Log_Space: 413\n              Until_Condition: None\n               Until_Log_File: \n                Until_Log_Pos: 0\n           Master_SSL_Allowed: No\n           Master_SSL_CA_File: \n           Master_SSL_CA_Path: \n              Master_SSL_Cert: \n            Master_SSL_Cipher: \n               Master_SSL_Key: \n        Seconds_Behind_Master: 0\nMaster_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error: \n               Last_SQL_Errno: 0\n               Last_SQL_Error: \n  Replicate_Ignore_Server_Ids: \n             Master_Server_Id: 1\n1 row in set (0.00 sec)\n```\n**测试**\n\nMaster创建数据库\n```\nmysql> create database d;\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| d                  |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n```\nSlave查看数据库已同步\n```\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| d                  |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n```\nMaster创建表插入数据\n```\nmysql> use d\nmysql> create table t(id int);\nmysql> insert into t values(1);\nmysql> commit;\n```\nSlave查看\n```\nmysql> use d;\nmysql> show tables;\nmysql> select * from t;\n+------+\n| id   |\n+------+\n|    1 |\n+------+\n```\n通过以上验证，可以看到主服务器上的修改能够正常同步到从服务器。\n\n**补充说明**\n\n1）做了MySQL主从复制以后，使用mysqldump对数据备份时，一定要注意按照如下方式：\n```\nmysqldump –master-data –single-transaction –user=username –password=password dbname> dumpfilename\n```\n这样就可以保留file和position的信息，在新搭建一个slave的时候，还原完数据库，file和position的信息也随之更新，接着再start slave 就可以很迅速的完成增量同步。\n\n## **其他复制方式**\n\n**主主复制**\n\nmaster-slave只能进行单向操作，像网络中的半双工。master-master可以实现服务器之间互相同步，且主主复制可以避免出现单点故障后整个系统宕机。主主复制最大的问题就是数据插入或更新冲突。配置方法同主从复制，反过来让slave同步master。注意master_log_file和master_log_pos参数要与master上对应。具体可以参考这里\n\n**单一master和多slave**\n\n由一个master和多个slave组成的复制系统比较简单。slave之间并不互相通信，只能与master通信。如果写操作较少，读操作很多，可以采用。可以将读操作分布到其他slave，从而减轻master的压力。但slave增加到一定数量时，slave对master的负载以及网络带宽都会成为问题。\n\n**主从多级复制**\n\n读操作很多可以采用单一maste和多slave，但增大到一定slave后连到master的slaveIO线程太多会造成master压力增大，从而造成数据复制延时。多级复制就是为了解决这个问题。如果想实现主-从（主）-从多级复制，需要设置log-slave-updates参数。同时二进制日志也必须启用。\n\n当然，增加复制的级联层次，同一个变更传到最底层的Slave所需要经过的MySQL也会更多，同样可能造成延时较长的风险。如果条件允许，倾向于通过拆分成多个Replication集群来解决。\n\n参考：\nhttp://heylinux.com/archives/1004.html\nhttp://blog.csdn.net/hguisu/article/details/7325124\n\n本文转自[MySQL复制介绍及搭建](http://bestvivi.com/2015/09/06/MySQL%E5%A4%8D%E5%88%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA/), 根据自身环境做了适当修改。"
		},
		{
			"post_id": 3,
			"title": "Shadowsky使用教程",
			"date_published": 1461593120.2,
			"body": "##第一步：下载安装客户端\n**桌面端**\n- Windows：客户端有原版和SSR两种，建议下SSR那个([点此前往下载页面](https://www.shadowsky.site/clients))，因为这个支持混淆插件，可以更好的避免墙的探测，下载文件解压后，里面有两个可执行文件，一般情况下，win8及以上系统运行4.0那个，以下运行2.0那个。\n\n---\n- Mac和Linux：大同小异。\n\n**移动端**\n- Android：下载安装，没什么好说的。([下载](https://www.shadowsky.site/clients))\n\n- Iphone：安装 surge或shadowrocket，去市场搜吧。\n\n\n##第二步：配置\n\n**桌面端**\n登陆后到节点列表页面点击“下载pc配置文件”下载得到gui-config.json，然后把这个文件复制到客户端同目录下，重启客户端并开启系统代理即可。至此所有配置就已经完成了，不出意外可以直接第三步了。\n\n**移动端**\n- Android：如果有安装条形码扫描器，可以扫描网站各节点二维码自动完成配置。如果没有，可以进入网站节点列表页面点击“android导入所有节点”按钮，这会导入所有节点到客户端自动完成配置，然后点击app右上角的纸飞机图标开启代理。\n\n- Iphone：百度或谷歌搜索吧，因为我没iphone，我也不清楚。\n\n##第三步：Start your travel\n打开浏览器畅游世界吧。\n\n\n本站网址：<a href=\"https://www.shadowsky.site\" target=\"_blank\">https://www.shadowsky.site</a>"
		},
		{
			"post_id": 1,
			"title": "Congratulations!",
			"date_published": 1433033779.604,
			"body": "Your zeronet blog has been successfully created!"
		}
	]
}