{
	"next_comment_id": 2,
	"comment": [
		{
			"comment_id": 1,
			"body": "If you are looking for something that will allow you to catelouge and store git-annex is what I use for manging my 7,000 songs. You might also want to look at tahoe lafs (but you can not delete files from there)\n\ngit-annex\n====\nI make 1 repo add files and it will track files, eg. if I do not have \"filex\" it will tell me which git remote (or other remote) has \"filex\"\n\nIt can work in a distributed or centralized manner and can allow you to have multiple people read/writing to a repo and it sort of handles conflicts (it just renames them both and does not sync them anymore until you delete 1 of them at least, then it resyncs that file back through the git work flow)\n\nIt can also use regular git servers to store the database of files and then store the contents elsewhere; IPFS, http(s), webdav, ssh, rsync, sneakernet, and git.\n\nIts awesome in conjunction with players like MPD but its a BITCH to use it if you are not privy to the terminal and will have it quirks on NTFS/FAT/mobile devices\n\nSo this may not be what you are looking for but it is worth mentioning because it is awesome. I've used it for a while and I haven't even scratched the surface.\n\nTahoe LAFS\n==== \n\n- can't delete a file once you upload it\n- can be decentralized or centralized\n- tahoe storage grid can span various networks (tor, i2p, etc.)\n- everything is encrypted\n\nOnly downside are\n- it can be hard to set up servers\n- IDR how it handles conflicts\n\nBut this may be a better solution.\n\nYou might even get away with have all of this stored via Zeronet... but I haven't really played with it. ",
			"post_id": 4,
			"date_added": 1473567490
		}
	],
	"comment_vote": {},
	"topic_vote": {}
}