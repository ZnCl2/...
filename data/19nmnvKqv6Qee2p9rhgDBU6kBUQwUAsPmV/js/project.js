// Generated by CoffeeScript 1.10.0
(function() {
  var Head, Play, Site, SiteList, SiteLists,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Head = (function() {
    function Head() {}

    Head.prototype.render = function() {
      return h("div#Head", [
        h("div.logo", [
          h("img", {
            "src": "img/zero.png",
            "width": 0,
            "height": 0
          }), h("h1", "Zeronet DEMO Central"), h("h2", "This is a dev demo, please visit: http://127.0.0.1:43110/16vhfxZCzEtSDCVu9RngG4NYoSydMZLE5w")
        ])
      ]);
    };

    return Head;

  })();

  window.Head = Head;

  Site = (function() {
    function Site(row1) {
      this.row = row1;
      this.render = bind(this.render, this);
      this;
    }

    Site.prototype.render = function() {
      return h("a.site", {
        href: Text.fixLink("http://127.0.0.1:43110/" + this.row.address),
        key: this.row.address,
        enterAnimation: Animation.slideDown,
        exitAnimation: Animation.slideUp
      }, [h("div.go", "\u203A"), h("div.title", this.row.title), this.row.category === 'forum' ? h("div.tag.tag-new", "Forum") : void 0, this.row.category === 'blog' ? h("div.tag.tag-popular", "Blog") : void 0, this.row.category === 'other' ? h("div.tag.tag-other", "Other") : void 0, h("div.description", this.row.description)]);
    };

    return Site;

  })();

  window.Site = Site;

  SiteList = (function() {
    function SiteList(row1) {
      this.row = row1;
      this.item_list = new ItemList(Site, "address");
      this.sites = this.item_list.items;
      this.item_list.sync(this.row.sites);
    }

    SiteList.prototype.render = function() {
      return h("div.sitelist", [
        h("span.num", "Number of sites:" + this.sites.length), this.sites.length > 0 ? h("div.sites", [
          this.sites.map(function(item) {
            return item.render();
          })
        ]) : void 0
      ]);
    };

    return SiteList;

  })();

  window.SiteList = SiteList;

  SiteLists = (function(superClass) {
    extend(SiteLists, superClass);

    function SiteLists() {
      this.render = bind(this.render, this);
      var key, sitelist;
      this.sitelists_db = {};
      this.sitelists_db["all"] = new SiteList({
        "title": "all",
        "sites": []
      });
      this.sitelists = (function() {
        var ref, results;
        ref = this.sitelists_db;
        results = [];
        for (key in ref) {
          sitelist = ref[key];
          results.push(sitelist);
        }
        return results;
      }).call(this);
      Page.on_site_info.then((function(_this) {
        return function() {
          return _this.updateSitelists();
        };
      })(this));
    }

    SiteLists.prototype.updateSitelists = function() {
      return Page.cmd("dbQuery", ["SELECT * FROM site ORDER BY sort, title COLLATE NOCASE"], (function(_this) {
        return function(rows) {
          var category, i, len, row, sites, sites_db;
          sites_db = {};
          for (i = 0, len = rows.length; i < len; i++) {
            row = rows[i];
            if (sites_db["all"] == null) {
              sites_db["all"] = [];
            }
            sites_db["all"].push(row);
          }
          for (category in sites_db) {
            sites = sites_db[category];
            _this.sitelists_db[category].item_list.sync(sites);
          }
          return Page.projector.scheduleRender();
        };
      })(this));
    };

    SiteLists.prototype.render = function() {
      return h("div#SiteLists", h("a.addsite", {
        "href": Text.fixLink("http://127.0.0.1:43110/0list.bit")
      }, ""), h("div.sitelists", this.sitelists.map(function(sitelist) {
        return sitelist.render();
      })));
    };

    SiteLists.prototype.onSiteInfo = function(site_info) {
      var action, inner_path, ref;
      if (site_info.event) {
        ref = site_info.event, action = ref[0], inner_path = ref[1];
        if (action === "file_done" && inner_path === "data/data.json") {
          return this.updateSitelists();
        }
      }
    };

    return SiteLists;

  })(Class);

  window.SiteLists = SiteLists;

  window.h = maquette.h;

  Play = (function(superClass) {
    extend(Play, superClass);

    function Play() {
      this.reloadServerInfo = bind(this.reloadServerInfo, this);
      this.reloadSiteInfo = bind(this.reloadSiteInfo, this);
      this.onOpenWebsocket = bind(this.onOpenWebsocket, this);
      return Play.__super__.constructor.apply(this, arguments);
    }

    Play.prototype.init = function() {
      this.params = {};
      this.site_info = null;
      this.server_info = null;
      this.address = null;
      this.on_site_info = new Promise();
      this.on_local_storage = new Promise();
      return this.local_storage = null;
    };

    Play.prototype.createProjector = function() {
      this.projector = maquette.createProjector();
      this.head = new Head();
      this.sitelists = new SiteLists();
      if (base.href.indexOf("?") === -1) {
        this.route("");
      } else {
        this.route(base.href.replace(/.*?\?/, ""));
      }
      this.projector.replace($("#Head"), this.head.render);
      return this.projector.replace($("#SiteLists"), this.sitelists.render);
    };

    Play.prototype.route = function(query) {
      this.params = Text.parseQuery(query);
      this.log("Route", this.params);
      if (this.params.to) {
        this.on_site_info.then((function(_this) {
          return function() {
            return _this.message_create.show(_this.params.to);
          };
        })(this));
        this.cmd("wrapperReplaceState", [{}, "", this.createUrl("to", "")]);
      }
      if (this.params.url === "Sent") {
        return this.leftbar.folder_active = "sent";
      }
    };

    Play.prototype.createUrl = function(key, val) {
      var params, vals;
      params = JSON.parse(JSON.stringify(this.params));
      if (typeof key === "Object") {
        vals = key;
        for (key in keys) {
          val = keys[key];
          params[key] = val;
        }
      } else {
        params[key] = val;
      }
      return "?" + Text.encodeQuery(params);
    };

    Play.prototype.loadLocalStorage = function() {
      return this.on_site_info.then((function(_this) {
        return function() {
          _this.log("Loading localstorage");
          return _this.cmd("wrapperGetLocalStorage", [], function(local_storage) {
            var base1;
            _this.local_storage = local_storage;
            _this.log("Loaded localstorage");
            if (_this.local_storage == null) {
              _this.local_storage = {};
            }
            if ((base1 = _this.local_storage).sites_orderby == null) {
              base1.sites_orderby = "peers";
            }
            return _this.on_local_storage.resolve(_this.local_storage);
          });
        };
      })(this));
    };

    Play.prototype.saveLocalStorage = function(cb) {
      if (this.local_storage) {
        return this.cmd("wrapperSetLocalStorage", this.local_storage, (function(_this) {
          return function(res) {
            if (cb) {
              return cb(res);
            }
          };
        })(this));
      }
    };

    Play.prototype.onOpenWebsocket = function(e) {
      this.reloadSiteInfo();
      return this.reloadServerInfo();
    };

    Play.prototype.reloadSiteInfo = function() {
      return this.cmd("siteInfo", {}, (function(_this) {
        return function(site_info) {
          _this.address = site_info.address;
          return _this.setSiteInfo(site_info);
        };
      })(this));
    };

    Play.prototype.reloadServerInfo = function() {
      return this.cmd("serverInfo", {}, (function(_this) {
        return function(server_info) {
          return _this.setServerInfo(server_info);
        };
      })(this));
    };

    Play.prototype.onRequest = function(cmd, params) {
      if (cmd === "setSiteInfo") {
        return this.setSiteInfo(params);
      } else {
        return this.log("Unknown command", params);
      }
    };

    Play.prototype.setSiteInfo = function(site_info) {
      if (site_info.address === this.address) {
        this.site_info = site_info;
      }
      this.on_site_info.resolve();
      return this.sitelists.onSiteInfo(site_info);
    };

    Play.prototype.setServerInfo = function(server_info) {
      this.server_info = server_info;
      return this.projector.scheduleRender();
    };

    Play.prototype.returnFalse = function() {
      return false;
    };

    return Play;

  })(ZeroFrame);

  window.Page = new Play();

  window.Page.createProjector();

}).call(this);
