{
	"next_topic_id": 2,
	"topic": [
		{
			"topic_id": 1524258152,
			"title": "[Solved] Any way to disable all.css generation?",
			"body": "Just trying to remove all dubious features that may interfere with debugging my duct-tape code. I don't see much point anyway (some minor bandwidth savings? why force them by default?) and it certainly can make developer's life harder because it adds yet another \"what if it breaks?\" factor..",
			"added": 1524258151
		}
	],
	"topic_vote": {
		"1517355233_1Cz74bvSRgWqHaLCBUTrJPW7uvKyr8P8RC": 1,
		"1537907056_1b9urVTLtAAZAidg6hchWqhrVtYXUaoj7": 1
	},
	"next_comment_id": 3,
	"comment": {
		"1524258152_13oRBYqNeUr6Tvgt4KkAT9FT4XRiKFBjnE": [
			{
				"comment_id": 1,
				"body": "> [nofish](#comment_5_1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj): It's only merged when running it in debug mode. The easiest way to disable it change the filename to anything else. If that not an option for you I can add a command line argument that disable the merging. [...]\n\nAh, thanks for the explanation. I guess it makes sense especially for badly-written (or static) zites and non-localhost 0net installations.\n\nIt turns out that the `all.css` that got me confused wasn't even generated for my zite. It was one for the 0net's ui. I should've been paying more attention to the addresses when using network request debug thingy.\n\nAnyway, my specific problem was solved (and as expected had nothing to do with 0net), and hopefully i won't need to debug any more web any time soon.\n\n> [binchan2](#comment_7_1AWwhg4EiWAVttfQboJZ4wJfX3WawfJT3h): Tip: use \"ignore\": \"((js|css)/(?!all.(js|css)))\", in content.json for avoiding signing and publishing other css and js files except all.js and all.css.\n\nThat's about all i could find when searching for the info on `all.css` ;)\n\nIf i ever do \"serious\" webdev, i'll likely generate ugly unreadable bundles of code myself, though. For non-serious i prefer ease of debugging over users' page-loading experience.",
				"added": 1524317606
			}
		],
		"1541435317_1L4dZcDF2maSKHDy788yhxpYnBWnXadUtS": [
			{
				"comment_id": 2,
				"body": ">`\"files_allowed\": \"(data.json|avatar.jpg|webm|mp4|gif|zip|7z|avatar.png|msgpack)\"`\n\nThis doesn't make much sense, simply allowing files literally named \"zip\", \"webm\" etc to exist. Second regexp\n\n>`\".*\\.(png|jpg|gif|zip|7z|txt|mp4|webm|msgpack)\"`\n\nshould probably be `\".*\\\\.(png|jpg|gif|zip|7z|txt|mp4|webm|msgpack)\"` and otherwise does what one can expect from it in 0net context. Although python's `re.compile(..).match(\"something.png.js\")` would pass for this pattern, apparently it's circumvented by appending \"^\" to these patters.",
				"added": 1541445304
			}
		]
	},
	"comment_vote": {}
}