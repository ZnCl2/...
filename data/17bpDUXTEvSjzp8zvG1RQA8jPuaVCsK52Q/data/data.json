{
	"title": "Hacking to the Gate~",
	"description": "<img src=\"img/homuciferavy.png\" style=\"border-radius:100%;margin-left:auto;margin-right:auto;display:block\"></img>\nMe conocen como Raito. Soy un entusiasta del software libre y las redes distribuidas y descentralizadas. Soy miembro de Pandilla4Gatos y co-administrador de sus servidores. Además de ser fan del anime, el manga y otras cosas frikis.",
	"links": "<img src=\"img/gnu-social.png\"></img> [GNU Social](https://bobinas.pandilla4gatos.tk/raito)\n<img src=\"img/email.png\"></img>GPG: 0x1BB8A823\nBitMessage:\n<code style='max-width:220px; font-size:15px'>BM-2cV6TXki1n6h2r25FqPUh2r4k5xS1GnVrp </code>\n<img src=\"img/xmpp.png\"></img> raito@pandilla4gatos.tk",
	"next_post_id": 13,
	"demo": false,
	"modified": 1455727844,
	"post": [
		{
			"post_id": 12,
			"title": "ZeroNet remoto",
			"date_published": 1455346769.51,
			"body": "Este artículo explica como instalar y configurar ZeroNet en una máquina que usaremos para acceder remotamente a esta red, por ejemplo desde un teléfono móvil o un ordenador diferente al tuyo. Es verdad que esto se puede lograr accediendo desde un *ZeroProxy* (como [este](http://bit.no.com:43110) o [este](https://zeronet.classcoder.com)), pero la gran ventaja de hacerlo de esta manera es que tienes control completo sobre la instalación: los sitios que siembras, los nuevos **NewsFeed** en ZeroHello y tu identidad siempre disponible para dejar comentarios o editar los sitios de los que eres propietario.\n\n---\n\nObviamente lo primero es instalar ZeroNet en la máquina que vamos a utilizar, lo hacemos como se describe en mi otro articulo.\n\n```\nsudo pip install gevent msg-python\ngit clone https://github.com/HelloZeroNet/ZeroNet.git\ncd ZeroNet\n```\n\nAhora activamos el plugin UiPassword, que permite proteger la interfaz de ZeroNet con una contraseña, después de todo no queremos que cualquiera tenga acceso a esto y pueda publicar en nuestro nombre.\n\n```\nmv plugins/disabled-UiPassword plugins/UiPassword\n```\n\nE iniciamos ZeroNet con la opción --ui_ip '\\*' que le dice que escuche en todas las interfaces, no solo 127.0.0.1 y con --ui_password que establece la contraseña, escojan una que sea fuerte.\n\n```\npython zeronet.py --ui_ip '*' --ui_password 'contraseña'\n```\n\nListo, podemos conectarnos desde la ip (o dominio) de la máquina remota por el puerto 43110. Nos preguntará por la contraseña que hemos establecido y al ingresarla nos llevará a ZeroHello. Para evitar escribir el comando anterior cada vez que se inicie ZeroNet se puede editar el archivo `zeronet.conf` (crearlo si no existe) y agregar estas líneas:\n\n```\n[global]\nui_ip = *\nui_password = contraseña\n```\n\nY ahora para iniciarlo simplemente usamos:\n\n```\npython zeronet.py\n```\n\nSi deseas usar la identidad de tu instalación *local* sólo copia el archivo `data/users.json` a la instalación remota.\n\n##Nginx\n\nUtilizar un proxy reverso por medio de Nginx nos permite acceder desde redes que tengan bloqueadas las conexiones por puertos diferentes a los usuales. Aunque es verdad que se puede especificar cualquier puerto en la configuración de ZeroNet, para usar el puerto 80 por ejemplo necesitaríamos correr el proceso como *root*, lo cual no es recomendable, y por otra parte nos ocuparía este puerto por el cual podríamos querer correr otros servicios. Otra ventaja es que podemos usar HTTPS, ya que estamos pasando una contraseña y tal vez otros datos que no queremos que se transporten como texto plano. No voy a explicar como obtener un certificado SSL, puedes usar uno autofirmado o conseguir uno con una CA (con Let's Encrypt puedes obtenerlo gratis).\n\nIniciamos creando el archivo de configuración del sitio con tu editor favorito y permisos de super usuario, en `/etc/nginx/sites-enabled/zeronet` y agregando la siguiente configuración:\n\n```\nserver {\n\tlisten 443;\n\tserver_name tudominio.tld;\n\n\tssl on;\n\tssl_certificate ruta/a/tu/certificado;\n\tssl_certificate_key ruta/a/tu/certificado;\n\tssl_session_timeout 5m;\n\tssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\tssl_ciphers 'ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4';\n\tssl_prefer_server_ciphers on;\n\tssl_session_cache builtin:1000 shared:SSL:10m;\n\n\tlocation / {\n\t\tproxy_pass http://127.0.0.1:43110;\n\t\tproxy_redirect off;\n\t\tproxy_buffering off;\n\t\tproxy_set_header Host $host;\n\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\tproxy_http_version 1.1;\n\t\tproxy_set_header Upgrade $http_upgrade;\n\t\tproxy_set_header Connection \"upgrade\";\n\t}\n}\n```\n\nDebes modificar las opciones server_name, ssl_certificate y ssl_certificate_key con los datos correspondientes. Si de todos modos quieres utilizarlo sin SSL, lo cual no recomiendo, puedes eliminar o comentar todas las líneas que empiezan con ssl y cambiar la opción listen a 80.\n\nCreamos un enlace simbólico para activar el sitio:\n\n```\nsudo ln -s /etc/nginx/sites-available/zeronet /etc/nginx/sites-enabled/zeronet\n```\n\nY reiniciamos el servicio de Nginx.\n\nCon esto ya no necesitaremos activar la opción --ui_ip, así que la quitamos de nuestro archivo de configuración `zeronet.conf`:\n\n```\n[global]\nui_password = contraseña\n```\n\nFinalmente iniciamos ZeroNet:\n\n```\npython zeronet.py\n```\n\nAhora puedes abrir tu *url* en el navegador y disfrutar de ZeroNet en todas partes.\n"
		},
		{
			"post_id": 11,
			"title": "Cifrando con Imagemagick",
			"date_published": 1455122018.769,
			"body": "Esto es algo que descubrí por casualidad jugando con las opciones de Imagemagick y recurriendo al siempre práctico y útil *RTFM!*. Si bien cuando pensamos en cifrado lo primero que nos viene a la mente de seguro es GnuPG, OTR y similares, este método resulta interesante por varias razones, para empezar por que es bastante fácil de usar, además el resultado es una imagen que puede ser tratada y visualizada como cualquier otra, y para ser sincero el efecto *Snowcrash* o estática de TV que toma el resultado se ve realmente genial. La principal diferencia es que con este método se utiliza cifrado simétrico, en otras palabras la clave para descifrar la imagen es la misma que la que se usó para cifrarla, que en este caso es un archivo (puede ser de cualquier tipo, texto, otra imagen, un documento) por lo tanto si se piensa compartir con otra persona, esta deberá tener el archivo.\n\n![???](img/cipher.png)\n\n---\n\nPara cifrar una imagen utilizamos este comando:\n\n```convert -encipher archivo_clave imagen_original resultado```\n\nEs recomendable usar el formato png para la imágen de salida, pues esto no funciona correctamente con otros formatos como jpg o gif, sin embargo la imágen original puede ser de cualquier formato. Un ejemplo más preciso sería:\n\n```convert -encipher clave.txt foto1.jpg cifrada.png```\n\nY para descifrar una imágen usamos:\n\n```convert -decipher archivo_clave imagen_cifrada resultado```\n\nComo dije antes, esto es muy sencillo, e incluso se podría facilitar más con una pequeña interfaz gráfica. Y por cierto, la imágen que acompaña a esta publicación se puede descifrar con la que aparece en la publicación \"Suscripciones en ZeroNet\", por si quieren practicar con este cifrado.\n"
		},
		{
			"post_id": 10,
			"title": "ZeroNet + Tor",
			"date_published": 1454809701.281,
			"body": "La otra de las actualizaciones de ZeroNet de las que hablaba en el artículo anterior es un soporte más completo de Tor. Esto significa que ahora ZeroNet incluye opciones para iniciarlo con Tor, en lugar de usarlo como proxy genérico, además de detectar si está activado, mostrar estadísticas del tráfico que genera y usar direcciones onion en lugar de ip.\n\n![ZeroNet Tor](img/zerotor.png)\n\n---\n\nPara usarlo, obviamente debemos tener instalado y corriendo Tor (versión 0.2.7.5 o superior) en nuestro sistema, lo cual no voy a explicar por que no tengo ganas, y tener activado el *Control Port*. En GNU/Linux basta con editar el archivo de configuración de Tor, que normalmente se encuentra en `/etc/tor/torrc` y agregar (o descomentar) la linea `ControlPort 9051`, finalmente reiniciar el servicio.\n\nListo, ahora podemos iniciar ZeroNet usando:\n\n```\npython zeronet.py --tor enable\n```\n\nO para el soporte completo (aunque también puedes activarlo desde el nuevo ZeroHello):\n\n```\npython zeronet.py --tor always\n```\n"
		},
		{
			"post_id": 9,
			"title": "Suscripciones en ZeroNet",
			"date_published": 1454803509.882,
			"body": "Me encanta ZeroNet. En el poco tiempo que llevo usándola he notado que está en continua evolución y mejora. Hace algunos días celebraban su primer aniversario y poco antes de eso habían traído un par de actualizaciones muy interesantes, a las que les dedicaré un artículo.\n\nComo menciona el título y como podrán notar en este mismo blog, una de ellas es que han añadido la posibilidad de seguir el contenido de las webs, similar al RSS de toda la vida. Para ello han hecho un completo rediseño de la página de inicio, conocida como ZeroHello, la cual ahora además de mostrar los sitios que *sembramos* sirve como lector de los ***Newsfeed*** a los que \nestamos suscritos.\n\n![ZeroHello](img/zerohello.png)\n\n---\n\nPor supuesto que al clonar **ZeroBlog** tendrás disponible este nuevo botón de seguir, pero si quieres agregarlo a tu blog ya existente también es posible. La forma fácil y que funcionará sin problemas es copiar los archivos `index.html`, `css/all.js` y `js/all.js` que vienen dentro del directorio `data/1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8` de tu instalación de ZeroNet al directorio de tu blog (también se encuentra en data/tudireccion). Claro que si has modificado cualquiera de estos archivos tendrás que adaptarlos a tus cambios (yo aproveché para cambiar un poco el diseño).\n\nEspero que más blogs vayan adoptando esta nueva caracteristica, pues es en verdad muy práctica y realmente hacía falta algo así dentro de ZeroNet. Y si aún no estás en ZeroNet tal vez esto te anime a venir al lado oscuro, que esto necesita más y más peers.\n"
		},
		{
			"post_id": 8,
			"title": "ReGeX, jugando con expresiones regulares",
			"date_published": 1452577805.345,
			"body": "**ReGeX** es un juego para Android cuyo objetivo es escribir expresiones regulares que coincidan con algunas cadenas generadas al azar y al mismo tiempo no coincidan con otras. Sí, una verdadera *frikada*. El juego va aumentando de nivel dependiendo de la cantidad de retos resueltos y el puntaje, al resolver un reto se asigna una puntuación basada en el número de caracteres especiales usados, el largo de la expresión regular y *otras variables* (sinceramente esto lo saqué del readme del juego, no sé exactamente cuales sean esas variables).\n\n![ReGeX](img/regex.png)\n\nSin dudas es una maravillosa aplicación para aprender, practicar, familiarizarse y memorizar de forma divertida expresiones regulares; y por que no, hasta para pasar el rato. Puede instalarse desde los repositorios libres de Fdroid.\n"
		},
		{
			"post_id": 7,
			"title": "¡Es hora de aprender Vim!",
			"date_published": 1451757494,
			"body": "Sí, probablemente estás pensando que soy un loco por sugerir esto, que esa cosa es imposible de usar para un humano, que es un editor arcano inútil en estos tiempos, que no te hace falta aprender algo tan complicado para una tarea tan sencilla como editar textos. Y probablemente tengas razón, **Vim no es para todos** (no quiero decir que sea para eres superiores) pero tal vez si es para ti y aún no lo sabes por que no le has dado una oportunidad de verdad.\n\nCréeme que entiendo tu odio o tu fobia al editor, casi todos tuvimos una primera mala, muy mala experiencia con Vim, pues tiene una interfaz completamente diferente a lo que estamos acostumbrados. Recuerdo que la primera vez que use Vi lancé maldiciones en nombre de todos los dioses, en vez de escribir lo que quería el editor hacía cosas raras y luego la terrible desesperación de no saber como cerrarlo. Eso me mantuvo alejado por un tiempo de Vi/Vim, hasta que me entró curiosidad de por que la gente lo utiliza y volví a intentarlo, esta vez un poco más informado.\n\nNo puedo decir que no me costó trabajo al principio, pero poco a poco me fui \"enamorando\" del poder de Vim, de su forma de trabajar, a tal punto que actualmente pienso que **Vim es la mejor interfaz de usuario que ha sido creada**. Y aparentemente no soy el único, no por nada los atajos de teclado de Vi/Vim se encuentran presentes en muchos otros programas: las shells incluyen un modo Vi; navegadores web, ya sea en forma de plugins (Vimperator, Pentadactyl, Vimium) o diseñados para funcionar de esa forma (uzbl, dwb, luakit); software diverso como gestores de archivos o lectores de pdf; e incluso en otros editores e IDEs, hasta el mismo Emacs, su eterno rival, tiene un plugin llamado *Evil Mode* que brinda algunas características similares a Vim. Pero claro que su funcionamiento sea portado a otros programas no prueba mi anterior afirmación, así que mejor hablar de algunas de las bondades que me hacen pensarlo.\n\n---\n\n##El teclado\n\n![Vim Cheat Sheet](img/vimcheatsheet1.png)\n\nCon Vim cada tecla toma un significado, una función o una orden a ejecutar. Por eso cuando se abre y se intenta simplemente escribir como en cualquier otro editor se obtienen resultados inesperados. Recordar tantas funciones puede parecer demasiado complicado, pero es todo lo contrario, la gran mayoría son fáciles de asociar a la tecla que corresponden, por ejemplo `d` es borrar (en inglés delete), `i` es insertar, `p` es pegar y así con la mayoría de las letras.\n\n##Movimientos\n\nAlgo que siempre es criticado de Vi/Vim es el famoso hjkl para moverse a la izquierda, abajo, arriba y derecha respectivamente. Tengo que admitirlo, es raro, pero permite tener tu mano derecha en donde se supone que debe estar normalmente y con el tiempo se vuelve algo natural, casi automático, si no crees que esto sea posible sólo pregúntale a un *gamer* que prefiera el wasd. Pero esa no es la única manera de moverse en Vim, de hecho la capacidad de *saltar como ninja* en el buffer de texto es una de sus principales ventajas. Se puede llegar al inicio del documento con `gg` y al final con `G`; al inicio de lo que se ve en pantalla con H, al centro con M y al final con L; al inicio de la linea actual con 0, al primer caracter *no vacio* con `^` y al final con `$`. También se puede llegar a la primera coincidencia de cierto caracter con `f` (seguido del caracter que queremos encontrar) y `F` en reversa. Pero lo más interesante es moverse entre objetos de texto.\n\n##Objetos de texto\n\nY es que Vim entiende ciertos elementos del texto que está en su buffer, lo que permite moverse entre palabras con `w` hacia adelante y con `b` hacia atrás; `e` nos lleva al último caracter de la palabra sobre la que esta el cursor; entre oraciones con `)` y `(`; entre párrafos o bloques de código (dependiendo de que editamos) con `}` y `{`. Y aunque eso es apenas un poco de lo que se puede hacer con los objetos de texto prefiero dejar el tema para otro artículo ya que es un tema extenso.\n\n##Repitiendo\n\nVim evita que tengas que presionar una tecla repetidamente, basta con poner un número antes del comando para que el editor repita la orden determinado número de veces. Para pegar 5 veces un texto se usa `5p`, para moverte 3 palabras hacia adelante se usa `3w`, para moverte 7 líneas hacia arriba `7k`. Y también se puede repetir el último comando usado con `.`.\n\n##Combinando todo\n\nAhora empieza lo realmente interesante, además de poderse combinar con números para repetirse, los comandos pueden combinarse entre sí y lo hacen de una manera tan natural que casi parece que estás *hablando con el editor*. Por ejemplo `c` significa cambiar y se puede combinar de diferentes maneras, por ejemplo `cw` cambia la palabra sobre la que está el cursor o `c$` que cambia todo hasta el fin de la línea. Pero también se pueden combinar nuevamente con números para que la operación afecte varias veces al texto, por ejemplo con el comando `y` que significa *yank* que es lo que conocemos normalmente como copiar se puede usar `y3b` que traducido viene quedando como *\"copia 3 palabras hacia atrás\"*; para borrar los siguientes 6 caracteres se usaría `d6l` (recuerda que en hjkl, l es derecha, osea 6 caracteres hacia la derecha). Obviamente todo se puede sustituir para formar diferentes órdenes, donde he puesto `y3b` podría ir `c3b` para cambiar 3 palabras hacia atrás o `y3j` para copiar la línea actual y las tres siguientes.\n\nCon esto las posibilidades se vuelven infinitas, mas cuando se combinan muchos comando para lograr acciones mas complejas, como mover las primeras 5 líneas de un archivo al final, que se hace con `ggd4jGp`. ¿Complicado? No tanto si lo partimos y lo vamos traduciendo, `gg` nos lleva al inicio del archivo, `d4j` borra (aunque en Vim lo borrado se guarda temporalmente, lo que lo hace más bien como cortar) la línea actual y las cuatro siguientes, como estamos al inicio del buffer esto es igual a las primeras 5 líneas, `G` nos lleva a la última línea y ahí usamos `p` para pegar las líneas que habíamos borrado.\n\n##Los modos\n\nAhora resulta obvio por que el editor hace cosas extrañas al presionar teclas sin entrar al modo INSERTAR que es el que permite que escribamos en el buffer. Vim tiene diversas maneras de entrar al modo INSERTAR, la más básica es `i` para escribir en la posición del cursor, `c` con cualquier combinación nos lleva al modo INSERTAR borrando previamente el texto a ser cambiado, `a` nos deja escribir justo después de la posición del cursor, `I` al inicio de la línea y `A` al final. Lo más recomendable es permanecer en el modo INSERTAR solo cuando se escribe texto e inmediatamente presionar ESC para volver al modo NORMAL que nos permite usar comandos y movernos en el texto.\n\nExisten otros modos, como el VISUAL o el de REEMPLAZAR, pero de nuevo no quiero alargar más esta introducción.\n\n¿Y cómo se cierra el editor? Simple, desde el modo NORMAL se escribe `:q` (quit, de nuevo fácil de recordar) o `:q!` (quit!, ¡salte ahora mismo!) para salir sin guardar ningún cambio o `:wq` (write quit) para guardar los cambios y salir.\n\n##Conclusión\n\nAl final el artículo me quedó mucho mas largo de lo que esperaba y me dejé mucho en el tintero, hay muchas mas cualidades de las que no hable como los plugins o la capacidad de personalización. Si con todo esto aún no te convences de intentarlo o no tienes tiempo para aprender a usarlo, no lo hagas, son dos de las cosas que se requieren para aprender Vim. No puedo negar que la curva de aprendizaje es muy empinada, yo llevo dos años usando Vim como mi editor principal y aún me falta mucho por aprender. Pero si le das una oportunidad hazlo sinceramente, esfuérzate y no lo dejes a la primera que algo no te sale, puedes iniciar ejecutando vimtutor desde tu terminal. También recomiendo ir con calma, aprender poco a poco y no abusar de las configuraciones ni de los plugins. Buena suerte y que la fuerza los acompañe.\n"
		},
		{
			"post_id": 6,
			"title": "Novedades con ZeroNet",
			"date_published": 1450939517.192,
			"body": "Esta será una publicación corta anunciando algunos pequeños avances con mi experiencia en ZeroNet.\nPara comenzar como podrán notar he traducido la mayor parte del blog, con unos ligeros ajustes en el código HTML y Javascript que usa ZeroBlog. Por supuesto que si a alguien le interesa puede ponerse en contacto conmigo y con gusto les compartiré los archivos modificados.\n\nMientras revisaba dicho código me di cuenta que es posible \"partir\" las entradas en la página de inicio para que solo muestren una parte de ellas y no ocupen tanto espacio, esto se logra agregando `---` a la publicación después del texto que se quiere mostrar.\n\nY para finalizar, si son usuarios de ZeroNet tal vez ya conozcan su más reciente servicio, ZeroMail. Me parece una de las características más útiles de ZeroNet, un sistema de mensajes cifrados y completamente distribuidos. Me pueden encontrar como raito si quieren contactarme por ese medio."
		},
		{
			"post_id": 5,
			"title": "Editar archivos cifrados en Vim",
			"date_published": 1450335964.306,
			"body": "_Publicado originalmente en [ElBinario](https://elbinario.net/2015/12/17/editar-archivos-cifrados-en-vim/)_\n\nQuien alguna vez haya trabajado con archivos de texto cifrados sabrá lo tedioso que es escribirlos en texto plano, cifrarlos y luego eliminar el archivo original (usando shred para estar más seguros). Por si esto fuera poco, para modificar su contenido se tiene que descifrar, editar el archivo descifrado, volverlo a cifrar y de nuevo asegurarnos de no dejar rastro del archivo en texto plano.\n\nPor suerte en **Vim** contamos con el plugin **vim-gnupg** que nos ahorra todo ese molesto trabajo. Con este plugin podemos editar archivos cifrados de forma transparente, esto significa que al abrirlos se descifran en un buffer del editor y al guardarlos el contenido vuelve a ser cifrado antes de ser escrito al archivo.\n\n---\n\nSi usas el magnifico gestor de plugins **pathogen** puedes instalarlo como cualquier otro plugin:\n\n```cd .vim/bundle```\n```git clone 'https://github.com/jamessan/vim-gnupg'```\n\nDe lo contrario se puede instalar manualmente:\n\n```mkdir -p .vim/plugin```\n```wget -P .vim/plugin 'https://raw.githubusercontent.com/jamessan/vim-gnupg/master/plugin/gnupg.vim'```\n\nTambién se encuentra disponible en los repositorios de algunas distribuciones, en Gentoo y Funtoo se puede instalar con emerge y en Arch y derivadas se puede obtener desde [AUR](https://aur.archlinux.org/packages/vim-gnupg/).\n\nUna vez instalado podemos abrir un archivo cifrado con la extensión .gpg, .pgp o .asc y observar al plugin hacer su magia. Si el archivo existe nos pedirá la _passphrase_ para descifrar el contenido (si no la has ingresado con un gpg-agent); de lo contrario nos abrirá dos buffers, en el primero debemos ingresar los identificadores de las llaves con las que se cifrará el archivo -sólo las personas con las llaves privadas correspondientes podrán leer el contenido- que puede ser el nombre de la llave (ejemplo: Pepito), el email (ejemplo pepito@pepitomail.org) o la llave pública (ejemplo 12345678), uno por línea, y al finalizar guardar y cerrar ese buffer. Ahora podemos editarlo como cualquier otro archivo y dejar que el plugin se encargue del cifrado.\n\nPor último podemos ver las llaves con las que se está cifrando el mensaje con `:GPGViewRecipients` y modificarlas con `:GPGEditRecipients.`"
		},
		{
			"post_id": 4,
			"title": "Glitxt",
			"date_published": 1449367092.888,
			"body": "Hace algún tiempo publiqué sobre **Glitxt** en GNU Social, pero supongo que merece un pequeño artículo. [Glitxt](https://glitxt.github.io/) es, como mencionan en su web, _esteganografía para la cultura pop_, permite ocultar mensajes en imágenes (creando un curioso efecto _[Glitch](https://es.wikipedia.org/wiki/Glitch)_) y posteriormente descubrir esos mensajes secretos con tan sólo unos cuantos clics.\n\n<img src=\"img/glitch.jpg\"  />\nAunque todo el proceso se realiza en tu propio navegador, está claro que la **esteganografía no reemplaza al cifrado** y no es recomendable usar este medio para transmitir información importante."
		},
		{
			"post_id": 3,
			"title": "ZeroNet, la web P2P",
			"date_published": 1449206947.111,
			"body": "_Publicado originalmente en [ElBinario](https://elbinario.net/2015/12/03/zeronet-la-web-p2p/)_\n\nVivimos tiempos en los que preocuparse por tu privacidad y por la libertad de expresión te convierte en terrorista, compartir cultura y conocimientos te hace un pirata sin necesidad de tener un barco, cifrar tus comunicaciones y alejarte de los grandes ser-vicios te vuelve un criminal en potencia. Sin embargo es bueno que en medio de toda esa mierda surgen canales alternativos, como Zeronet. Zeronet es una red peer 2 peer, una especie de web distribuida basada en la criptografía usada por BitCoin.\n\nEl concepto de ZeroNet es simple: cuando visitas una web de ZeroNet esta se descarga a tu ordenador y comienzas a servirla (seed) como los torrent de toda la vida. Para asegurarse de que el contenido ha sido agregado por el creador original de la web (o con su permiso) se firman los archivos con una clave privada que se genera al momento de crear la web.\n\n---\n\nInstalar y usar ZeroNet es bastante sencillo, basta con instalar python2 en tu máquina (muy probablemente ya lo tengas) y sus otras dependencias, gevent y msg-pack-python. Para esto pueden usar el gestor de paquetes de su distribución, aunque es posible que las versiones de sus repos no sean compatibles (muy antiguas), por lo que podemos usar pip para asegurarnos de tener una versión reciente:\n\n```sudo pip install gevent msgpack-python```\n\nUna vez que tengamos las dependencias instaladas, clonamos el repositorio de ZeroNet:\n\n```git clone https://github.com/HelloZeroNet/ZeroNet.git```\n\nY lo iniciamos:\n\n```\ncd ZeroNet\npython zeronet.py\n```\n\nTambien se puede usar con Tor como proxy para ocultar nuestra IP real:\n\n```python zeronet.py --proxy 127.0.0.1:9050 --disable_udp```\n\nAhora abrimos en el navegador http://127.0.0.1:43110/ para empezar a usar ZeroNet. Les dirá que no está abierto el puerto 15441, no es necesario abrirlo para navegar aunque recomiendan hacerlo si se piensa crear un sitio en esa red, dado a que esto es diferente en cada router se los dejo de tarea.\n\nPoner un sitio en ZeroNet es fácil, se puede clonar uno de los ejemplos que vienen en la página de inicio, activando el sitio y dando clic en la esquina superior derecha del recuadro para desplegar un menú, luego escoger la opción clonar. También es posible crearlo manualmente, desde el directorio de ZeroNet con el siguiente comando:\n\n```python zeronet.py site Create```\n\nAl finalizar les dará una clave privada, que deben guardarla en un lugar seguro, pues es necesaria para modificar el sitio posteriormente y la dirección del sitio que pueden ingresar en su navegador como http://127.0.0.1:43110/(tu dirección)\n\nPara modificar un sitio basta con firmar los archivos (te preguntará por la clave privada si creaste el sitio a mano) y publicarlo a los peers:\n\n```python zeronet.py siteSign (tu dirección)```\n```python zeronet.py sitePublish (tu dirección)```\n\nBien, pues espero que se animen a usar esta ZeroNet, aun está algo verde pero es un concepto muy interesante. Si quieren pueden regalarme una visita en: http://127.0.0.1:43110/17bpDUXTEvSjzp8zvG1RQA8jPuaVCsK52Q y no se olviden de usar el buscador: http://127.0.0.1:43110/zerosearch.bit"
		},
		{
			"post_id": 2,
			"title": "Mantenlo simple, estúpido",
			"date_published": 1449159287.753,
			"body": "_Publicado originalmente en [Ágora](https://agora.pandilla4gatos.tk/mantenlo-simple-estupido/)_\n\nBien dijo da Vinci que “La simplicidad es la máxima sofisticación”. Menos es más, no hay nada más cierto que eso sobre todo si hablamos de informática.\n\nEl concepto de mantener las cosas lo más simple posibles (en inglés Keep It Simple, Stupid! o K.I.S.S.) ha estado presente desde los inicios del diseño de software y sistemas. Se encuentra presente en otra de mis filosofías favoritas, la filosofía Unix, aquella que habla de que los programas deben hacer una sola cosa, y que fue clave en el maravilloso diseño de ese mítico sistema operativo y de todos sus descendientes, incluyendo a nuestro amado GNU/Linux.\n\n---\n\nEl resultado de llevar a la práctica ese diseño fue la creación de una gran cantidad de pequeños pero poderosos programas que en conjunto forman un sistema operativo completo, robusto, seguro y muy estable. Además de permitir realizar tareas más complejas mediante la unión de esos programas simples por medio de tuberías o scripts sencillos, evitando de esa manera tener que programar una aplicación que realice específicamente esa tarea y la tan odiada duplicación de esfuerzos.\n\nPese a todas esas ventajas hay quien piensa que la simplicidad es algo obsoleto, incluso hay intentos de desterrar la filosofía Unix de GNU/Linux, como el famoso systemd. Por una parte se puede argumentar que es un concepto que viene de una época remota en que los ordenadores eran apenas más poderosos que una cafetera y es innecesaria con el potente hardware de la actualidad. Por la otra se habla de las grandes virtudes de aquellos programas que son similares a navajas suizas cargados de funciones para realizar una infinitud de tareas.\n\nAunque tengan razón en ciertos puntos, la simplicidad está muy lejos de ser obsoleta. Es verdad que se cuentan con muchos mayores recursos y que los programas complejos pueden ser muy convenientes además de en muchos casos más fáciles de usar, después de todo simplicidad no es lo mismo que facilidad. Sin embargo los programas simples siguen siendo superiores en muchos aspectos: son más rápidos, ligeros, eficientes, modulares y sumamente configurables. Además mantener el sistema simple crea entornos de trabajo hechos a la medida, pues es el mismo usuario quien elige los componentes que necesita y los configura de la forma que mejor se le adapte.\n\nSi complicar las cosas es de estúpidos, entonces mantenerlas simples es algo de genios, pues en palabras del mismo Dennis Ritchie, creador del lenguaje de programación C y uno de los principales responsables del sistema Unix: “UNIX es muy simple, solo que se necesita ser un genio para entender su simplicidad”.\n"
		},
		{
			"post_id": 1,
			"title": "Probando Zeronet",
			"date_published": 1448951940,
			"body": "Bueno esto es la primera prueba de esta que parece ser una magnifica red distribuida. Tener un blog sin necesidad de hospedaje, que se mantiene gracias a las personas que lo visitan es una idea demasiado tentadora para no intentarlo. Espero con el tiempo publicar bastantes cosas interesantes que sean del agrado de los posibles lectores."
		}
	]
}