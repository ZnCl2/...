{
	"title": "Geekless.Twitter",
	"description": "Микроблог для лытдыбра",
	"links": "*   [Geekless.Blog](http://127.0.0.1:43110/1BLoGBTid3NhGu8ts3fAfHJprnbrH3wfTV/)\n\n*   [Geekless@ZeroMe](/Me.ZeroNetwork.bit/?Profile/1SunAWK2VUT9GQK32MpwRfFPVgcBSJN9a/1GooUE19488nDwG3TdkM8seYAHct4gjkq4/geekless@zeroid.bit)\n\n* * *\n\n* [Glasba.Blog](http://127.0.0.1:43110/1GLasbBp15K5B4cdkQDitJhJpGxywMdipP/)\n\n* * *\n\n*   [ZeroNet.Ru](http://127.0.0.1:43110/1zeroRvxd42DSWUETotiaa8k5a5mDGvJs/)\n\n*   [Talks@ZeroNet.Ru](http://127.0.0.1:43110/1TALK5znjVqrULiRUiSuNALaCiKpWS1Xq)",
	"next_post_id": 57,
	"demo": false,
	"modified": 1636178462,
	"post": [
		{
			"post_id": 56,
			"title": "(untitled)",
			"date_published": 1636178295.767,
			"body": "> Пароль должен быть от 7 до 15 символов и должен содержать цифры, заглавные и строчные латинские буквы.\n\nВаш пароль должен содержать заглавные и строчные буквы, цифры, символ, вдохновляющий посыл, заклятие, криминальную кличку любимого гангстера из США 30-х годов, иероглиф и кровь девственницы.\n\nУ меня десять рандомных цифр в пароле. Что ж тебе еще, гадина, надо."
		},
		{
			"post_id": 55,
			"title": "(untitled)",
			"date_published": 1617120523.652,
			"body": "Я оформил себе домен и взял VPS-ку под персональный сайт. Угадайте, что случилось потом? А потом случилось вообще, что только могло случиться. (: И в личной жизни, и на работе, и в здоровье. В общем, стало слегка не до настройки блога.\n\nТак что я пока пишу здесь. Всё-таки самая удобная штука.\n\nУ меня есть идея объединить три принципиально разных движка, чтобы получить единый UI для блога в вебе и тут. Но это потом. А сейчас меня ждёт починка сборки образа ZeroNet для докера."
		},
		{
			"post_id": 54,
			"title": "list comprehensions",
			"date_published": 1603721893,
			"body": "В очередной раз при правке кода на питоне у меня пригорело от `list comprehensions`.\n\nА вот что пишут настоящие живые люди, которых никто не заставляет под дулом пистолета:\n\n>  I find the list comprehension much clearer than `filter`+`lambda`\n\nИли:\n\n> Personally I find list comprehensions easier to read. It is more explicit what is happening from the expression `[i for i in list if i.attribute == value]` as all the behaviour is on the surface not inside the filter function.\n\nНу давайте посмотрим, как этот much clearer way выглядит in the wild. Как-то так:\n\n```python\n    def getSupportedTrackers(self):\n        trackers = self.getTrackers()\n\n        if not self.site.connection_server.tor_manager.enabled:\n            trackers = [tracker for tracker in trackers if \".onion\" not in tracker]\n\n        trackers = [tracker for tracker in trackers if self.getAddressParts(tracker)]  # Remove trackers with unknown address\n\n        if \"ipv6\" not in self.site.connection_server.supported_ip_types:\n            trackers = [tracker for tracker in trackers if helper.getIpType(self.getAddressParts(tracker)[\"ip\"]) != \"ipv6\"]\n\n        return trackers\n```\n\nПросто сплошной `[blabla for blabla in blablas if ...blabla...]`.\n\nПросто в начале каждой такой строки ты должен мысленно стирать кусок `[tracker for tracker in trackers if` и читать, что же там дальше. И как писал Роберт Мартин в «Чистом коде», любые конструкции, которые принуждают читателя тренироваться пропускать себя мимо глаз, являются источником скрытых ошибок. Пропустив 500 раз мимо глаз типовой фрагмент кода, на 501-й раз вы пропускаете ПОЧТИ такой же фрагмент, в котором содержится ошибка. И в силу одинаковой натренированности рефлексов у всех разработчиков продукта, эта ошибка может оставаться незамеченной годами.\n\nДавайте посмотрим, как этот же код можно преписать на лямбдах на руби:\n\n```ruby\n    def getSupportedTrackers():\n        trackers = @getTrackers()\n\n        if not @site.connection_server.tor_manager.enabled\n            trackers = trackers.filter {|tracker| not tracker.include? \".onion\"}\n        end\n\n        trackers = trackers.filter {|tracker| @getAddressParts(tracker)}\n\n        if not @site.connection_server.supported_ip_types.include? \"ipv6\"\n            trackers = trackers.filter {|tracker| helper.getIpType(@getAddressParts(tracker)[\"ip\"]) != \"ipv6\"}\n        end\n\n        return trackers\n    end\n```\n\nУже стало лучше за счёт уменьшения количества бойлерплейта, который приходится пропускать мимо. Но 3 вызова `trackers.filter` подряд и два идентичных вызова `getAddressParts` говорят нам, что этот код надо переписать.\n\nЗаметьте, что необходимость рефакторинга для устранения дублирования не была очевидна в коде с `list comprehensions`, потому что они за своей многословностью и нечитабельным синтаксисом скрывают суть происходящего.\n\nУбираем дублирование:\n\n```ruby\n    def getSupportedTrackers()\n        tor_enabled = @site.connection_server.tor_manager.enabled\n        ipv6_enabled = @site.connection_server.supported_ip_types.include? \"ipv6\"\n\n        trackers = @getTrackers()\n\n        trackers = trackers.filter {|tracker|\n            if (not tor_enabled) and (tracker.include? \".onion\")\n                next false\n            end\n\n            address_parts = @getAddressParts(tracker)\n            if not address_parts\n                next false\n            end\n\n            if (not ipv6_enabled) and (helper.getIpType(address_parts[\"ip\"]) == \"ipv6\")\n                next false\n            end\n\n            next true\n        }\n\n        return trackers\n    end\n```\n\nЭтот код хотя и выглядит не так компактно при взгляде на экран издалека, на самом деле проще в чтении и в поддержке. Здесь нет дублирования, которое заставляет читателя многократно сверять строки, чтобы убедиться, что разработчик имел в виду именно то, что увидел читатель. А каждая строка выражает свою мысль без лишних бессмысленных слов, которые нужно отфильтровывать глазами.\n\n"
		},
		{
			"post_id": 53,
			"title": "История успеха",
			"date_published": 1601875473.986,
			"body": "*   Завести блог в ЖЖ.\n*   Написать туда два поста.\n*   Не заходить месяц.\n*   ?????\n*   «Этот журнал заблокирован.»\n\nГде вообще теперь можно писать в инете на технические темы без риска получить бан от Большого Брата? Кажется, уже нигде...\n\nЯ вертел на хую ваше политическое и социальное безумие, меня интересует только код.\n\nПопробую восстановить учётку и погрызть кактус под названием blogger.com. Интересно, там тоже за упоминание ZeroNet банят?"
		},
		{
			"post_id": 52,
			"title": "(копипаста) Про автоматизацию",
			"date_published": 1598611116.769,
			"body": "Интересная заметка попалась в комментах на форуме. Утащу к себе.\n\n* * *\n\n[Всё что вы хотели знать о роботах: neznaika_nalune — ЖЖ](https://neznaika-nalune.livejournal.com/824146.html)\n\n# Всё что вы хотели знать о роботах\n\nПо жж-шке ходит [статья из MIT Technology Review](http://www.technologyreview.com/featuredstory/515926/how-technology-is-destroying-jobs/), про \"новую революцию\" в автоматизации и роботизации [вот здесь](http://sputnikipogrom.com/economics/3668/how-technology-is-destroying-jobs/) есть перевод на русский. Статья несколько наивная.\n\nВот как обычно в реальности:\n\n_... 24\\. Робот сортирует коробки по штрихкодам, которые предварительно клеятся на них на весах в цеху упаковки (packing). Если они наклеены не по центру коробки, криво, или кверх ногами (так тоже бывает), робот сбрасывает коробку обратно. Местный, который стоит на весах, клеит наклейки как попало, а мы потом весь день переклеиваем их на движущихся коробках. Нет такой силы, которая способна заставить его начать это делать по-человечески. Он говорит «Ok, Sorry» ( «Хорошо, извините»), и продолжает в том же духе. Я предполагаю, что это для него просто непосильная задача. Он просто НЕ МОЖЕТ. Но хуже этого, только местный, который приходит на овертайм в субботу или воскресенье. Потому что он приходит пьяный, после ночи в пабе. И тогда, роботы просто останавливаются, потому что не могут прочитать ту ахинею, которая наклеена на коробках. А еще, местный товарищ, может прийти обкуренный или объевшийся галюциногенных грибов, которые на острове растут в огромных количествах.\n...\n26\\. Одну неделю у нас работал Кевин из коптильни. Его поставили вывозить готовые паллеты с роботов. Для этого надо остановить робота, зайти в зону его работы, вывезти паллет роклой и снова включить робота. Но Кевин всё время путал последовательность кнопок, даже несмотря на то, что все они были разного цвета. И первое,что происходило после его нажатия на кнопки, вместо останова, робот брал пустую паллету, и с размаху одевал ее сверху на полную с рыбой. Раздавался хлопок, во все стороны разлеталась рыба, лед и пенопласт, а потом все мы, 30 минут разгребали последствия, потому что надо было собрать разбитые доски от паллетов, куски пенопласта, рыбу и перепаковать всё заново в 24 коробки. Завод в это время стоял . Когда это повторилось несколько раз, Кевину запретили подходить к роботам..._\n[http://www.freecity.lv/bestseller/55/](http://www.freecity.lv/bestseller/55/)\n\nНет такого роботизированного процесса которого бы не мог бы полностью испортить средний мудак нажатием пары кнопок. Это примерно как старый анекдот про сибирских мужиков и японскую пилораму (\"Ага! - торжествующе воскликнули сибирские мужики, засунув в японскую пилораму стальной рельс\").\n\nПримерно так все роботы и работают. То есть когда с ними всё нормально - очень хорошо, автоматика, высокая производительность. Но примерно половину времени нужно чтобы обычным низкооплачиваемым работникам разгребать последствия роботизированных факапов.\n\nНу вот, например, у нас, в высокоавтоматизированной логистике, только одно из многих звеньев: 6-осный робот подхватывает упаковку, скажем, с банками томатного соуса с конца конвейера и кладёт её на определённое место в паллете. Операция, в принципе, довольно простая. Но вот, по какой-то причине, это оказалась двухслойная упаковка из банок, а у робота в программе заложены размеры однослойной упаковки (все коробки - разного размера, поэтому возможностей для ошибок - великое множество). И вот, вместо того чтобы обжать эту коробку снизу и сверху, робот со всей силы пронзает её верхними хваталками как вилами, так что томатный соус вместе с осколками банок разлетается на несколько метров вокруг, по конвейерам, моторам и датчикам общей стоимостью в сотню тысяч долларов. Процесс останавливается, и работяги в течении получаса отскребают рабочее пространство автоматизированной системы (если повезёт, без долгосрочных последствий).\n\nНе без моей помощи, впрочем, стало существенно лучше. Помню, дело было в середине декабря 2011, и незадолго до этого на нашем автоматизированном складе [был внедрен мой алгоритм 3-мерной упаковки ящиков](http://neznaika-nalune.livejournal.com/774086.html) - самая сложная часть всей системы управления роботами и паллетизацией. Как раз за год до этого я только начал вообще заниматься этой задачей, потому что это оказалось самым узким местом всей большой логистической системы. Тот проект (он так и проходил под официальным названием \"KP\") был фантастикой - за год я не только создал с нуля и отладил принципиально новый алгоритм (в задаче над которой множество математиков работают по десятку лет), но и всё было переписано в рабочий код, вместе с графическими интерфейсами, соединениями с базами данных и прочими обвязками и свистелками, прошло SQA и уже вовсю работало на практике.\n\nЯ приехал в ночную смену понаблюдать за процессом. Процесс в целом происходил весьма неплохо, но не без проблем. В софтвере имелся ещё не устранённый баг (не в самом моём алгоритхме, а в имплементации в рабочем коде), в результате чего у ящиков в паллете могло быть недостаточное \"сцепление\" друг за друга, и они в результате комбинации всяких ошибок и неточностей движений робота могли частично обвалиться, [вот примерно так](http://images.vfl.ru/ii/1374986994/e4282297/2780129.jpg).\n\nТо и дело процесс останавливался по разным причинам и работягам на смене нужно было вручную хватать и класть ящики. Самое удивительное впечатление в ту ночь - что практически все присутсвующие работяги периодически подходили ко мне засвидетельствовать почтение и рассказать как облечилась их работа с введением в действие моего алгоритма. То есть сам факт что они знали меня в лицо и знали про некий \"KP packing algorithm\" (чего никогда официально не обьявляли, а наоборот максимально держали в секрете) - само по себе было нетривиально. Мне было жалко их, работа - не позавидуешь, каждые несколько минут требуется ручное вмешательство, поправлять или перекладывать ящики. \"Да ты чо,\" - говорили они мне - \"сейчас так хорошо стало по сравнению с тем что было раньше\". Раньше нужно было перекладывать вручную каждую вторую или третью паллету, и большинство паллет, даже не считая ошибок самих роботов, были небольшого размера и выглядели как конструкция из кубиков, сделанная 3-летним ребёнком - с башнями и пустотами и готовая развалиться в любой момент.\n\nВ общем, хорошая математика сильно помогла процессу, на он всё равно далёк от 100% автоматизации. 6-осный робот - вещь ныне стандартная но довольно дубовая. У него очень точные движения (ошибка в траектории последнего звена - меньше миллиметра), но точной траектории движения ещё недостаточно. Основная проблема - хваталка (gripper), который может при обратном движении зацеплять ящик и немного волочить его обратно. В результате случаются ошибки в укладке на несколько сантиметров (а для плотной упаковки требуется чтобы точность была лучше чем сантиметр). Так что поправлять вручную криво положенные ящики и обвалившиеся паллеты всё равно приходится."
		},
		{
			"post_id": 51,
			"title": "Еще немного новостей из дурдома",
			"date_published": 1598606044.522,
			"body": "Опенсорсные проприетарщики из проекта PaleMoon [блокировали доступ пользователей форка Mypal к каталогу дополнений](https://www.opennet.ru/opennews/art.shtml?num=53606)."
		},
		{
			"post_id": 50,
			"title": "(во мгле)",
			"date_published": 1598605507.574,
			"body": "https://www.linux.org.ru/forum/talks/15873522\n\nРазработчики из Miscrosoft не осилили найти в почтовике, как отправить plaintext.\n\nТак и живём."
		},
		{
			"post_id": 49,
			"title": "(untitled)",
			"date_published": 1585237383.252,
			"body": "![i.jpeg (980x768)](data/img/post_49_i.jpeg)"
		},
		{
			"post_id": 48,
			"title": "В поиске самодокументированных названий переменных для конфига:",
			"date_published": 1562948861.427,
			"body": "```python\n    def getDefaultConfig(self):\n        return {\n            \"settings\": {\n                \"enable\": False,\n                \"enable_only_in_tor_always_mode\": False,\n                \"listen_on_public_ips\": False,\n                \"listen_on_temporary_onion_address\": False,\n                \"listen_on_persistent_onion_address\": False\n            }\n        }\n```"
		},
		{
			"post_id": 47,
			"title": "JS повреждает мозг",
			"date_published": 1562948613.379,
			"body": "После JS постоянно ловлю себя на том, что пишу `some_dict.some_key` вместо `some_dict[\"some_key\"]` во всех интерпретируемых языках. Как теперь выздороветь?"
		},
		{
			"post_id": 45,
			"title": "Добавил в код ZeroBlog++ поддержку произвольного количества провайдеров сертификатов",
			"date_published": 1561400624.822,
			"body": "Заметил, что на ZeroTalk добавили поддержку [kxoid.bit](http://127.0.0.1:43110/kxonet.bit/?/kxoid) и стал смотреть, как это сделано. Сделано методом грубой силы: захардкодили в трех местах в исходниках и один раз указали в конфиге.\n\nДобавил в [ZeroBlog++](http://127.0.0.1:43110/19fZJhX7FGENeRRLB8ftgrziBJ5vsLtFog/) автоматическое получение списка провайдеров из конфига — [код тривиален](http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/commit/?15u2FYH7eVQPKLuyfX4AA8sjB3775kbN2W/f9af579bfb7bbdbdd953debd96b1b2a1843c8cc3).\n\n**UPDATE:** Добавил то же самое на [ZeroTalk++](http://127.0.0.1:43110/1EgyL4nj9DmeSSQg3fytxGJjihxtmMon5y/)."
		},
		{
			"post_id": 44,
			"title": "NetBSD в Vagrant",
			"date_published": 1556774829.258,
			"body": "Продолжаю пробовать разные виды кактуса. NetBSD 8.0 в виртуалке через Vagrant.\n\n* * *\n\n```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  config.vm.guest = :netbsd\n  config.vm.box = \"NetBSD/NetBSD-8.0\"\n  config.vm.box_version = \"1.0.0\"\n  config.ssh.shell = \"sh\"\n\n  config.vm.define \"fp-worker-netbsd-8-0\" do |t| end\n\n  config.vm.provider \"virtualbox\" do |v|\n    v.name = \"fp-worker-netbsd-8-0\"\n  end\n\n  config.vm.synced_folder \"../shared\", \"/vagrant\", type: \"rsync\"\n  config.vm.provision :shell, :path => \"bootstrap.sh\", :run => \"always\"\nend\n```\n\nСинхронизация через rsync не пашет:\n\n**1\\.** Нет primary-группы vagrant, поэтому мы получаем вот что:\n\n```no-highlight\nThere was an error while attempting to run the post rsync\ncommand for a synced folder. Please inspect the error message\nbelow for more info.\n\nHost path: /media/stuff/vagrant-machines/shared/\nGuest path: /vagrant\nError: The following SSH command responded with a non-zero exit status.\nVagrant assumes that this means the command failed!\n\nfind /vagrant '!' -type l -a '(' ! -user vagrant -or ! -group vagrant ')' -exec chown vagrant:vagrant '{}' +\n\nStdout from the command:\n\n\n\nStderr from the command:\n\nfind: -group: vagrant: no such group\n```\n\nА потому что это вам не Linux:\n\n```no-highlight\n$ id\nuid=1000(vagrant) gid=100(users) groups=100(users),0(wheel)\n```\n\nЛадно, победили:\n\n```no-highlight\n# groupadd -g 1000 vagrant\n# usermod -g vagrant vagrant\n# usermod -G users vagrant\n\n$ id\nuid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant),0(wheel),100(users)\n```\n\n**2\\.** Однохренственно не пашет, теперь так:\n\n```no-highlight\nThere was an error while attempting to run the post rsync\ncommand for a synced folder. Please inspect the error message\nbelow for more info.\n\nHost path: /media/stuff/vagrant-machines/shared/\nGuest path: /vagrant\nError: The following SSH command responded with a non-zero exit status.\nVagrant assumes that this means the command failed!\n\nfind /vagrant '!' -type l -a '(' ! -user vagrant -or ! -group vagrant ')' -exec chown vagrant:vagrant '{}' +\n\nStdout from the command:\n\n\n\nStderr from the command:\n\nfind: chown: No such file or directory\n```\n\nДолго ломал голову, что тут не так. Если команду запускать вручную, всё работает как и должно.\n\nТак, а где у нас chown?\n\n```no-highlight\n# which chown\n/sbin/chown\n```\n\nПравильно — потому что это вам не Linux. Похоже, что `/sbin` отсутствует в PATH при вызове команды.\n\nВоспроизводим баг:\n\n```no-highlight\n# export PATH=/bin:/usr/bin\n# localhost# find /vagrant '!' -type l -a '(' ! -user vagrant -or ! -group vagrant ')' -exec chown vagrant:vagrant '{}' +\nfind: chown: No such file or directory\n```\n\nА какими путями Vagrant исполняет эту команду в гостевой VM? В `/var/log/authlog` видно только это:\n\n```no-highlight\nMay  2 05:09:14 localhost sudo:  vagrant : TTY=unknown ; PWD=/home/vagrant ; USER=root ; COMMAND=/bin/sh\n```\n\nВоспроизводим с хоста:\n\n```no-highlight\n$ vagrant ssh -c 'sudo /bin/sh'\n# echo $PATH\n/usr/bin:/bin:/usr/pkg/bin:/usr/local/bin\n```\n\nПробуем подкрутить параметры в `/etc/login.conf`. Там уже даже есть нужный конфиг, нужно только раскомментировать:\n\n```no-highlight\ndefault:\\\n        :path=/usr/bin /bin /usr/sbin /sbin /usr/X11R7/bin /usr/pkg/bin /usr/pkg/sbin /usr/local/bin:\n```\n\nИ наконец-то rsync начинает работать."
		},
		{
			"post_id": 43,
			"title": "DragonFly BSD",
			"date_published": 1556764401.645,
			"body": "Поставил DragonFly BSD в виртуалку. Покопался в ней пару часов, а когда выключал, ядро выдало kernel panic при размонтировании ФС. На сайте пишут:\n\n> *Is DragonFly ready for production?*\n> \n> Yes. DragonFly is generally stable and speedy at this point.\n\nНу как-то так."
		},
		{
			"post_id": 42,
			"title": "Изобретаю макросы для autoconf",
			"date_published": 1556713802.091,
			"body": "Возможно, я велосипед изобрел, но в документации ничего такого не нашел.\n\nЕсли почитать [Autotools Mythbuster на тему, как правильно обрабатывать зависимости пакетов](https://autotools.io/autoconf/arguments.html), и написать максимально правильный код, получится простыня примерно такого вида:\n\n* * *\n\n```\nAC_ARG_WITH([alsa],\n    [AS_HELP_STRING(\n        [--with-alsa],\n        [enable ALSA support for volumealsa plugin @<:@default=auto@:>@]\n    )],\n    [],\n    [with_alsa=auto]\n)\n\nAC_MSG_CHECKING([--with-alsa])\nAC_MSG_RESULT([$with_alsa])\n\nhave_alsa=no\nAS_IF([test \"x$with_alsa\" != xno], [\n    AC_CHECK_HEADERS([alsa/asoundlib.h], [\n        AC_CHECK_LIB([asound], [snd_seq_open], [\n            have_alsa=yes\n        ])\n    ])\n])\n\nAS_IF([test \"x$with_alsa\" = \"xyes\" -a \"x$have_foo\" != \"xyes\"], [\n    AC_MSG_ERROR([alsa requested but not found])\n])\n\nautodetected_plugin_volumealsa=\"$have_alsa\"\n```\n\nВ результате мы имеем автодектирование, а также принудительное включение и выключение опции через ключи запуска `./configure`. На выходе этот кусок кода устанавливает переменную have_alsa в значение yes или no с учетом всех возможных вариантов , либо завершается с ошибкой, если зависимость была принудительно включена, но не найдена. Как-то так:\n\n```\n   (нет ключа)     -> есть библиотека     -> have_alsa=yes\n   (нет ключа)     -> нет библиотеки      -> have_alsa=no\n   --with-alsa     -> есть библиотека     -> have_alsa=yes\n   --with-alsa     -> нет библиотеки      -> сообщение об ошибке\n   --without-alsa  -> пофиг на библиотеку -> have_alsa=no\n```\n\nНаписать этот код меня хватило только один раз. Я представил, как мне копипастить эти простыни для каждой опциональной зависимости в каждом проекте, так что пошел и [запилил макрос](https://github.com/sde-gui/devel-tools/blob/master/m4-sde/sde-with.m4).\n\nС макросом всё становится по красоте:\n\n```\nSDE_WITH([alsa], [enable ALSA support for volumealsa plugin @<:@default=auto@:>@], [\n    AC_CHECK_HEADERS([alsa/asoundlib.h], [\n        AC_CHECK_LIB([asound], [snd_seq_open], [\n            have_alsa=yes\n        ])\n    ])\n])\n\nautodetected_plugin_volumealsa=\"$have_alsa\"\n```\n\nЕще пример:\n\n```\nSDE_WITH([oss], [enable support of the Open Sound System for volume plugin @<:@default=auto@:>@], [\n    AC_CHECK_HEADERS([sys/soundcard.h], have_oss=\"yes\")\n    AC_CHECK_HEADERS([linux/soundcard.h], have_oss=\"yes\")\n])\n\nautodetected_plugin_volume=\"$have_oss\"\n```\n\nХз, почему этого нет в autoconf из коробки."
		},
		{
			"post_id": 41,
			"title": "Ход работ по SDE",
			"date_published": 1556478479.987,
			"body": "Портирую https://github.com/sde-gui на FreeBSD.\n\n* stuurman и stuurman-desktop (со всеми библиотеками под капотом) компилируются и работают.\n* spicview компилируется и работает.\n  * Не реализована динамическая регулировка размера кэша изображения в зависимости от объема свободной памяти. Нужно написать соответствующий кусок кода для FreeBSD.\n* waterline компилируется и работает частично.\n  * Половина плагинов Linux-специфична - а точнее, те, которые показывают температуру процессора, состояние батареи и другие параметры железа. Буду заимствовать код из GNOME2/Mate/Xfce.\n\n"
		},
		{
			"post_id": 40,
			"title": "Впечатления от FreeBSD 12 и мысли об устройстве софта",
			"date_published": 1556265930.853,
			"body": "Пользуюсь системой полторы недели. Последний раз я пользовался FreeBSD на десктопе больше 10 лет назад. Потом сталкивался только периодически.\n\n* * *\n\nПо большому счету, за 10 лет в соотношении сил ничего не изменилось. Преимущество FreeBSD в качественной документации (по сравнению с большинством дистрибутивов GNU/Linux), академичности и цельности - вы получаете готовую систему от централизованной команды разработчиков, плюс отдельно обширный набор приложений в пакетах, а не как в Линуксе - мешок разрозненных утилит, причесанный мейнтейнерами дистрибутива, чтобы как-то работало. А недостаток - в худшей поддержке десктопного железа.\n\nЧем мне нравятся BSD и такие дистрибутивы Линукса как Arch, Artix или Void - при наличии некоторого базового уровня знаний о том, как устроены операционные системы, вы легко разберетесь, в том, как всё это работает. ПО не пытается прикидываться тем, чем оно не является - чем-то интеллектуальным, и даже дружественным к вам, скрывая за этой оболочкой своё реальное устройство и принципы работы. А это значит, что вы с самого начала работы с системой получаете все рычаги в свои руки. Чем больше вы изучаете, тем более вы компетентны. В кривой обучения не будет такого места, когда вам придётся выкинуть все ваши навыки по взаимодействию с \"дружественной\" частью системы, потому что вы столкнулись с задачей, которая не решается \"дружественными\" методами.\n\nКак я писал в предыдущей заметке, BSD можно установить простым копированием файлов. Это звучит сложно? Если вы не занимались этим ни разу - да. Но если вы имеете небольшой опыт, вы можете таким образом установить или починить любой Linux, BSD, Illumos и т.п. Важно, что вы имеете дело с универсальными концепциями.\n\nНедавно я установил [Mageia](https://www.mageia.org/en/) в виртуалке, посмотреть, что нового в бета-версии. Установщик системы задавал вопросы, потом долго копировал файлы, снова задавал вопросы, скачивал обновления, и наконец, закончил. Что пользователь может извлечь для себя из этого процесса? Абсолютно ничего - произошла какая-то магия, и вот спустя час после начала установки загрузилась Mageia. Что делать, если установка происходит с какими-то ошибками? Что делать, если при загрузке что-то сломалось? Из каких шагов должна состоять цепь событий, и как выяснить, на каком из шагов что-то пошло не так? На этом дружественность системы заканчивается.\n\nКогда-то я установил Arch Linux. Он устанавливается вручную, по мануалу на сайте. Это сложнее, чем ответить на вопросы установщика, но что в результате? В результате операция \"установить Arch Linux\" не привносит никакой *отдельной* сложности в вашу деятельность. В процессе установки вам не нужно изучать ничего нового сверх того, что вам и так нужно знать при обслуживании компьютеров. Разметка диска? Распаковка пакетов? Установка и настройка загрузчика? Управление службами? Управление пользователями? Настройка сети? Всё это вам понадобится миллион раз. А установка операционной системы - нет такой отдельной области навыков.\n\nС тех пор мне ни разу не потребовалось «устанавливать» Arch Linux, хотя за годы я его установил на несколько различных компьютеров и виртуальных машин. Установка не привносит собственной сложности. Например, если я переношу установленную систему, я знаю, что мне надо \"скопировать вот это, отредактировать вот там, запустить ту команду\". Если что-то пошло не так, я точно знаю, в каком месте искать проблему.\n\nЭтот же принцип действует во всех остальных областях работы с софтом. Сведение задачи до универсальных операций и практика применения именно этих операций в долгосрочной перспективе всегда оказываются полезнее узкоспециализированных ad-hoc решений.\n\nОбратно к FreeBSD. Вот проблемы, с которыми я на данный момент столкнулся:\n\n* Нет звука через наушники. Конфиг, сгенерированный драйвером, выглядит здраво, и все нужные действия по переключению звука система выполняет, но в наушниках звук не появляется. Видимо, драйвер что-то недовключает в железе. Мне не повезло быть владельцем ноутбука с кодеком Realtek ALC269, который требует отдельного набора костылей для разных моделей ноутбуков. Вообще, можно оценить объем костылей и подпорок для Realtek-ов в [Linux](https://github.com/torvalds/linux/blob/master/sound/pci/hda/patch_realtek.c) и во [FreeBSD](https://github.com/freebsd/freebsd/blob/master/sys/dev/sound/pci/hda/hdaa_patches.c). Хочу покопаться в драйверах и заставить их работать, но как обычно вопрос в наличии времени.\n\n* Система не выходит из сна. Точнее, выходит, но не включает экран. Хотя бы реагирует на Ctrl+Alt+Del - перезагружает компьютер. Возможно, что-то можно подшаманить в конгфигах, еще не разбирался.\n\n* При переключении из Xorg в виртуальный терминал, иногда заглючивает клавиатурный ввод, но потом разглючивает.\n\n* Задержка в несколько секунд при переключении в Xorg. Возможно, та же плавающая проблема, что проявляется под Linux на некоторых интеловских встройках. (На этом компе под линуксом всё работает нормально, но глючит на другом.)\n\nВ остальном проблем нет. В наборе пакетов нашел весь необходимый софт, приложения работают так же, как и под линуксом. Если бы не несовместимость файловых систем, так бы и пользовался системой всю неделю. Приходится перезагружаться туда-сюда.\n\n"
		},
		{
			"post_id": 39,
			"title": "Установка FreeBSD на раздел реального диска из-под другой ОС",
			"date_published": 1556251842,
			"body": "Уже писал об этом на [LOR-e](https://www.linux.org.ru/forum/talks/14937054), продублирую сюда.\n\nНебольшой HOWTO, как быстро установить FreeBSD из-под GNU/Linux без лишних действий. Записал по ходу установки, возможно, кому-нибудь пригодится.\n\n* * *\n\nВходные данные в моём случае:\n\n* Есть неиспользуемый раздел на диске, разбитом через MBR. (Большая часть места на накопителях занята LVM-ом с кучей томов.)\n* Весь раздел целиком буду монтировать в корень, не используя разбивку bsdlabel. Система ставится больше для экспериментов, чем для реальной работы, так что нет смысла заморачиваться с точной разметкой.\n* По той же причине в качестве файловой системы использую UFS, а не ZFS.\n* Хочется весь процесс провести из-под основной ОС, не тратя время на создание загрузочной флешки.\n* В роли первичного загрузчика буду использовать grub, поэтому BSD-специфичный boot loader нас не интересует.\n\nНа одном из дисков я заранее зарезервировал четыре 20-гигабайтных раздела под эксперименты с разными ОС. На один из таких разделов установлю FreeBSD:\n\n```no-highlight\n[root@aquila ~]# fdisk -l /dev/sda\nДиск /dev/sda: 698,7 GiB, 750156374016 байт, 1465149168 секторов\nDisk model: Hitachi HTS54757\nЕдиницы: секторов по 1 * 512 = 512 байт\nРазмер сектора (логический/физический): 512 байт / 4096 байт\nРазмер I/O (минимальный/оптимальный): 4096 байт / 4096 байт\nТип метки диска: dos\nИдентификатор диска: 0xa33b6c03\n\nУстр-во    Загрузочный    начало      Конец    Секторы Размер Идентификатор Тип\n/dev/sda1  *                2048    6146047    6144000     3G            83 Linux\n/dev/sda2                6146048  105357311   99211264  47,3G             7 HPFS/NTFS/exFAT\n/dev/sda3              105357312 1465147391 1359790080 648,4G             5 Расширенный\n/dev/sda5              105359360  146319359   40960000  19,5G            83 Linux\n/dev/sda6              146321408  187281407   40960000  19,5G            83 Linux\n/dev/sda7              187283456  228243455   40960000  19,5G            83 Linux\n/dev/sda8              228245504  269205503   40960000  19,5G            83 Linux\n/dev/sda9              269207552 1465147391 1195939840 570,3G            8e Linux LVM\n```\n\nСкачиваем установочный образ:\n\n```no-highlight\n$ axel -a 'https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/12.0/FreeBSD-12.0-RELEASE-amd64-disc1.iso.xz'\n$ xz -d FreeBSD-12.0-RELEASE-amd64-disc1.iso.xz\n```\n\nУстановку будем проводить из-под qemu, работающему от имени пользователя. Чтобы сможно было подключить физический диск к qemu, нужно сменить владельца `/dev/sda`:\n\n```no-highlight\n# ls -l /dev/sda\nbrw-rw---- 1 root disk 8, 0 апр 15 14:20 /dev/sda\n# chown vadim:disk /dev/sda\n# ls -l /dev/sda\nbrw-rw---- 1 vadim disk 8, 0 апр 15 16:12 /dev/sda\n```\n\nЯ знаю, что идеологически правильно было бы добавить пользователя в группу `disk`, но мне проще сменить владельца. После перезагрузки система забудет, что права на `/dev/sda` были отданы пользователю, а из группы пользователя надо удалять вручную.\n\nЗапускаем виртуальную машину с установочным образом и нужным физическим диском:\n\n```no-highlight\n$ qemu-system-x86_64 -m 2048 -hda /dev/sda -cdrom FreeBSD-12.0-RELEASE-amd64-disc1.iso -boot menu=on\n```\n\n**ВНИМАНИЕ: Не допускайте запуска в виртуальной машине вашей реальной ОС и не монтируйте из-под виртуальной машины разделы, смортированные в реальной ОС.** Это плохо кончится.\n\nВыбираем CDROM в качестве загрузочного устройства. Ждем появления `Welcome Menu`, выбираем `<Shell>`. Инсталлятор нам не понадобится.\n\nПосмотрим, какие разделы увидела система:\n\n```no-highlight\n# ls /dev/ad*\n```\n\nИ более подробно:\n\n```no-highlight\n# gpart list | less\n```\n\nВиртуальная машина имеет прямой доступ к реальному `/dev/sda`, так что нужно внимательно перепроверять все свои действия по поводу разделов диска.\n\nВыяснили, как в гостевой ОС называется нужный раздел, создаем на нём файловую систему:\n\n```no-highlight\n# newfs -U -L anjalifbsd /dev/ada0s5\n```\n\n* Опция `-U` указывает задействовать механизм Soft Updates.\n* Опция `-L` задаёт имя тома ФС.\n\n\nМонтируем созданную ФС:\n\n```no-highlight\n# mkdir /tmp/new_root\n# mount /dev/ada0s5 /tmp/new_root\n```\n\nТеперь нужно распаковать операционную систему на новый раздел:\n\n```no-highlight\n# cd /tmp/new_root\n# tar xvf /usr/freebsd-dist/base.txz\n# tar xvf /usr/freebsd-dist/kernel.txz\n```\n\nСистема занимает меньше гигабайта:\n\n```no-highlight\n# df -h .\nFilesystem      Size     Used    Avail  Capacity  Mounted on\n/dev/ada0s5      19G     930M      16G      5%    /tmp/new_root\n```\n\nПравим `fstab`. Честно говоря, я не знаю деталей о процессе инициализации FreeBSD и не уверен, что это обязательно:\n\n```no-highlight\necho '/dev/ada0s5 / ufs rw 1 1' > etc/fstab\necho 'tmpfs /tmp tmpfs rw 0 0' >> etc/fstab\n```\n\nВыключаем виртуальную машину:\n\n```no-highlight\n# poweroff\n```\n\nНа реальной машине правим конфиг grub.\n\nУ меня grub установлен на отдельном разделе таким образом, что установка любого нового слишком умного дистрибутива, перезаписывающего конфиг grub-а, не повлияет на этот загрузчик. В загрузочном меню этого отдельного grub-а указано, как грузить установленные ОС, внутри которых может работать уже собственный загрузчик дающий выбрать версию ядра и т.п. Например:\n\n```no-highlight\nmenuentry \"Artix Sonata\" {\n\tconfigfile (lvm/aq-aq_artix)/boot/grub/grub.cfg\n}\n\nmenuentry \"Archlinux Aquila\" {\n\tconfigfile (lvm/aq-aq_archlinux)/boot/grub/grub.cfg\n}\n\nmenuentry \"Voidlinux Epsilon\" {\n\tmultiboot (lvm/aq-aq_voidlinux)/boot/grub/i386-pc/core.img\n}\n```\n\nЗагрузчик FreeBSD я не задействовал, так что в моём случае достаточно добавить menuentry для прямой загрузки ядра FreeBSD:\n\n```no-highlight\nmenuentry \"FreeBSD Anjali\" {\n\tinsmod part_msdos\n\tinsmod ufs2\n\tset root=(hd0,5)\n\tkfreebsd /boot/kernel/kernel\n\tkfreebsd_loadenv /boot/device.hints\n\tset kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s5\n\tset kFreeBSD.vfs.root.mountfrom.options=rw\n\tboot\n}\n```\n\nНа этом всё. Установка сводится к распаковке архива с системой и запуску ядра любым подходящим загрузчиком. Даже проще, чем установить Arch Linux.\n\nПервые шаги в системе:\n\n* Имя хоста задаётся через [rc.conf(5)](https://www.freebsd.org/cgi/man.cgi?rc.conf%285%29), также см. [hostname(1)](https://www.freebsd.org/cgi/man.cgi?hostname%281%29)\n* Часовой пояс настраивается через [tzsetup(8)](https://www.freebsd.org/cgi/man.cgi?tzsetup%288%29).\n* Управление пользователями и группами осуществляется при помощи [pw(8)](https://www.freebsd.org/cgi/man.cgi?pw%288%29).\n* Про настройку локали см. [login.conf(5)](https://www.freebsd.org/cgi/man.cgi?login.conf%285%29). В конфиге уже прописан вариант для русской локали, так что достаточно указать login class пользователя равным russian.\n* wpa_supplicant настраивается стандартно через свой конфиг, плюс надо указать пару строчек в [rc.conf](https://www.freebsd.org/doc/handbook/network-wireless.html).\n* Пакеты ставятся при помощи [pkg(8)](https://www.freebsd.org/cgi/man.cgi?pkg%288%29).\n\n"
		},
		{
			"post_id": 38,
			"title": "Hello again",
			"date_published": 1556243531,
			"body": "Привет, мир, я еще жив. Как обычно ничего не успеваю, забросил все проекты.\n\nОбычный веб кажется каменным веком по сравнению с ZeroNet. В этом году не стал даже продлять некоторые свои домены с личными проектами. Осталась пара сайтов на github.io, и то лишь потому, что они не требуют никакой поддержки. Думаю отзеркалировать их в Zeronet, но пока лень.\n\nПоставил FreeBSD 12, чтобы портировать туда некоторый свой софт. Возможно, напишу на эту тему несколько заметок."
		},
		{
			"post_id": 37,
			"title": "qemu + gdb — отладка 16-битного кода и хакинг gdb",
			"date_published": 1540275326,
			"body": "Допустим, вам нужно отладить низкоуровневый 16-разрядный код под x86. У вас есть qemu и gdb, и их можно использовать для удалённой отладки. После запуска qemu открывает сокет и ждёт подключение отладчика. gdb подключается туда и позволяет производить отладку так же просто, как если бы это был обычный пользовательский процесс. Учитывая возраст платформы x86 и возраст gdb, казалось бы, что может ли что-то пойти не так? Оказывается, еще как.\n\n* * *\n\nЗапускаем qemu:\n\n```no-highlight\n$ qemu-system-x86_64 -m 100 -fda image.img -s -S\n```\n\nПодключаемся через gdb. Видим вот такую порнографию вместо дизассемблированного кода:\n\n```no-highlight\n(gdb) target remote localhost:1234\nRemote debugging using localhost:1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the \"file\" command.\n0x000000000000fff0 in ?? ()\n(gdb) break *0x7C00\nBreakpoint 1 at 0x7c00\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x0000000000007c00 in ?? ()\n(gdb) disas $pc+$cs*16,+1\nDump of assembler code from 0x7c00 to 0x7c01:\n=> 0x0000000000007c00:\tjmp    0x7c3e\nEnd of assembler dump.\n(gdb) disas 0x7c3e,+16\nDump of assembler code from 0x7c3e to 0x7c4e:\n   0x0000000000007c3e:\t(bad)  \n   0x0000000000007c3f:\trex.XB add %al,%r8b\n   0x0000000000007c42:\t(bad)  \n   0x0000000000007c43:\tmov    %esi,%cs:(%rsi)\n   0x0000000000007c46:\tand    $0x16882e00,%eax\n   0x0000000000007c4b:\tand    $0x0,%al\n   0x0000000000007c4d:\tcmp    $0x80,%dl\nEnd of assembler dump.\n(gdb) \n```\n\nСсылки по теме:\n\n* [\\[1\\]](https://bugs.launchpad.net/qemu/+bug/1686170) — баг в багтрекере Убунты.\n* [\\[2\\]](https://git.qemu.org/?p=qemu.git;a=commit;h=e3592bc9d841c397eeda87f0019fab94ff71004b) — попытка частичного workaround-а в сорцах qemu.\n* [\\[3\\]](https://wiki.osdev.org/QEMU_and_GDB_in_long_mode#Workaround_1:_Reconnecting) — попытка workaround-а на wiki.osdev.org.\n\nВ чем на самом деле проблема? Она простая. Космические корабли бороздят, а gdb по-прежнему не умеет дизассемблировать кусок кода с произвольной системы команд или режима процессора.\n\nТочнее говоря, дизассемблирующая библиотека замечательно это умеет. Но UI не даёт возможности пользователю переопределить архитектуру при вызове дизассемблера.\n\nТеоретически, для текущего фрейма gdb умеет менять архитектуру на указанную где-то в отладочной информации. Но в нашем случае еще нет никакого фрейма, да и отладочной информации тоже не существует.\n\nЕсли попробуем сменить архитектуру командой из мануала, получаем упс:\n\n```no-highlight\n(gdb) target remote localhost:1234\nRemote debugging using localhost:1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the \"file\" command.\n0x000000000000fff0 in ?? ()\n(gdb) set architecture i8086\nwarning: Selected architecture i8086 is not compatible with reported target architecture i386:x86-64\nwarning: A handler for the OS ABI \"GNU/Linux\" is not built into this configuration\nof GDB.  Attempting to continue with the default i8086 settings.\n\nThe target architecture is assumed to be i8086\nRemote 'g' packet reply is too long (expected 308 bytes, got 536 bytes): 0000000000000000000000000000000000000000000000006306000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0ff0000000000000200000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ff0000\n```\n\nПонятие **архитектура** используется в gdb двумя (как минимум) способами.\n\nПервый, архитектура — это описание модели исполнителя: его регистров, режимов адресации, битности адресного пространства и т.п. Эти сведения необходимы непосредственно для отладки.\n\nВторой, архитектура — это указание дизассемблеру, какую систему команд использовать для отображения кода в человекочитаемом виде.\n\nЕсли немного подумать, достаточно очевидно, что эти понятия не связаны напрямую между собой. В ходе отладки нам может потребоваться дизассемблировать произвольный кусок кода от другого режима процессора или же кусок кода, имеющий вообще другую систему команд (например, от сопроцессора, GPU и т.п.) Или же, как в нашем случае, режим работы программы обратно совместим по модели регистров, но не обратно совместим по системе команд.\n\nКогда мы вызываем `set architecture i8086`, gdb переопределяет архитектуры в обоих указанных смыслах.\n\nТут напрашивается переопределение системы команд для конкретно дизассемблера, чтобы можно было делать как-то так:\n\n```no-highlight\n(gdb) disas /a:i8086 0x7c3e,+16\n```\n\nИли так:\n\n```no-highlight\nset disassembler-architecture i8086\n(gdb) disas 0x7c3e,+16\n```\n\nЯ скачал сорцы gdb и, насколько я смог в них разобраться, реализовать это можно достаточно просто. Для теста я захардкодил переопределение архитектуры прямо в команду disassemble:\n\n```\ndiff --git a/gdb/cli/cli-cmds.c b/gdb/cli/cli-cmds.c\nindex b871e476d3..36fe4a7fff 100644\n--- a/gdb/cli/cli-cmds.c\n+++ b/gdb/cli/cli-cmds.c\n@@ -1199,7 +1199,7 @@ disassemble_current_function (gdb_disassembly_flags flags)\n static void\n disassemble_command (const char *arg, int from_tty)\n {\n-  struct gdbarch *gdbarch = get_current_arch ();\n+  struct gdbarch *gdbarch/* = get_current_arch ()*/;\n   CORE_ADDR low, high;\n   const char *name;\n   CORE_ADDR pc;\n@@ -1207,6 +1207,15 @@ disassemble_command (const char *arg, int from_tty)\n   const char *p;\n   const struct block *block = nullptr;\n \n+\n+  struct gdbarch_info info;\n+\n+  gdbarch_info_init (&info);\n+\n+  info.bfd_arch_info = bfd_scan_arch (\"i8086\");\n+\n+  gdbarch = gdbarch_find_by_info (info);\n+\n   p = arg;\n   name = NULL;\n   flags = 0;\n```\n\nРезультат:\n\n```no-highlight\n(gdb) target remote localhost:1234\nRemote debugging using localhost:1234\nwarning: No executable has been specified and target does not support\ndetermining executable automatically.  Try using the \"file\" command.\n0x000000000000fff0 in ?? ()\n(gdb) break *0x7C00\nBreakpoint 1 at 0x7c00\n(gdb) c\nContinuing.\n\nBreakpoint 1, 0x0000000000007c00 in ?? ()\n(gdb) disas 0x7c3e,+16\nwarning: A handler for the OS ABI \"GNU/Linux\" is not built into this configuration\nof GDB.  Attempting to continue with the default i8086 settings.\n\nDump of assembler code from 0x7c3e to 0x7c4e:\n   0x00007c3e:\tljmp   $0x7c0,$0x43\n   0x00007c43:\tmov    %si,%cs:0x25\n   0x00007c48:\tmov    %dl,%cs:0x24\n   0x00007c4d:\tcmp    $0x80,%dl\nEnd of assembler dump.\n(gdb) \n```\n\nНужно бы написать полноценный патч, парсящий аргументы команды и меняющий архитектуру на лету, но как обычно, нет времени. Пока что я так и использую отладчик с захардкоженной архитектурой."
		},
		{
			"post_id": 36,
			"title": "Ностальгии пост",
			"date_published": 1539365185.774,
			"body": "**@hugeping** недавно опубликовал [пост, посвященный ОС Haiku](http://127.0.0.1:43110/1HVhvrompfwLstJExofKAQ5mMss7YivVDj/?Post:15). А на Хабре мне попалась на глаза [огромная статья](https://habr.com/post/413997/) о 32-битных процессорах Intel от 80386 до Pentium 4, что заставило вновь мыслями погрузиться во времена DOS и Windows 95.\n\nТакие проекты как Haiku всегда вызывали у меня смешанные чувства. С одной стороны, мне понятно желание возродить экосистему и продлить жизнь прикладного софта, в разработку которого были вложены силы и который приносил пользу людям. Ну и просто этим людям нравится писать системные компоненты.\n\nС другой — всё это тупиковые ветви прогресса.\n\nДело даже не в том, что в Haiku не запускаются какие-то современные программы, не поддерживаются какие-то устройства и так далее. В конечном счете все эти современные программы и железки окажутся на том же кладбище, что и сама BeOS, так что Haiku вполне имеет шансы пережить всю эту современность, если у неё найдётся достаточное количество энтузиастов, а у нашего современного софта — не окажется.\n\nДело в том, что весь этот софт остался там, в 90-х. Сменилась парадигма, и мы теперь смотрим на софт другими глазами. Это может быть незаметно, если вам нужно запустить калькулятор или прослушать mp3, но это становится заметно, если пытаться работать так, как вы привыкли сегодня. Оказывается, что старый софт требует старых привычек, которые вы давно утратили, и что более существенно — старого взгляда на мир, который возвращать себе может быть не только неудобно, но даже опасно.\n\nНапример, сегодня в ходу всевозможные контейнеризации и виртуализации. Это новый способ компоновки софта, который просто был непонятен и ненужен 20 лет назад. Ну, под юниксами был chroot. Больше в ходу ничего не было.\n\nДа и просто взять код и запустить его в основной системе в наше время — непозволительная беспечность. В эпоху глобальной сетевой связности, гигагерцовых вычислительных систем в каждом чайнике, нейронных сетей, и прочих чудес 2010-х компьютерная безопасность имеет совсем другое значение, чем во времена вирусов на дискетах. Так что если в Haiku нет системы прав доступа, 20 лет назад это могло бы считаться мелким неудобством для домашнего применения, а сегодня это низводит её до ранга игрушечной ОС на изолированном от сети компьютере.\n\nРазумеется, всё это можно исправить, но все мы понимаем, что в случае с Гайкой никто этого никогда не сделает. Просто не хватит времени и сил.\n\nМеня самого привлекает старое железо и софт, может быть, потому что я постарел, а может быть, потому что раньше пользователь мог понять, что происходит, и в определённой мере участвовал в функционировании железа, а теперь — нет. Раньше компьютеры и ПО были как автомобили — можно разобрать и собрать. А сейчас это больше похоже на путешествие по джунглям. Запомни правила безопасности и действуй строго по инструкции. Я всё еще люблю автомобили, как и раньше, особенно в той их части, что не затронута компьютеризацией. А вот современные компьютеры вызывают у меня сложные чувства.\n\nИ у меня тоже есть одна ностальгическая идея, которой я никогда не займусь: написать опенсорсную реализацию ядра Windows 9x. Кому вообще теперь может понадобиться ядро Windows 9x? Никому. Но само это ядро с точки зрения программиста очень интересно было устроено.\n\nТакой получился пост без осмысленного начала и конца. Честно говоря, не знаю, в чем суть и смысл поста, так что помещу его в лытдыбровский блог.\n\n*Пока я писал текст, плейлист принёс мне сербскую песню с греческим названием: **PANTA REI** — всё течёт. Очень в тему.*\n\n<video controls=\"controls\" width=\"100%\"><source src=\"http://127.0.0.1:43110/1uPLoaDwKzP6MCGoVzw48r4pxawRBdmQc/data/users/1GooUE19488nDwG3TdkM8seYAHct4gjkq4/Jelena%20Tomasevic%20-%20Panta%20rei.mp4\" type=\"video/mp4\">\nYour browser does not support the video tag.</video>\n"
		},
		{
			"post_id": 35,
			"title": "Мои соображения о хранении истории правок в Вики для ZN",
			"date_published": 1539356564.574,
			"body": "*   Каждая версия документа подписана ключем автора версии.\n\n*   Если версия документа основана на другой версии, то в неё вписывается идентификатор родительской версии и её подпись.\n\n*   История правок документа отображается в виде направленного графа от дочерних версий к родительским.\n\n*   Узлы графа отсортированы по времени, но сам граф не обязан быть связным. Он может представлять собой, например, несколько независимых друг от друга субграфов.\n\n*   Движок должен нормально обрабатывать ситуацию (и визуально обозначать её), когда отсылка на родительскую версию есть, а сама она не найдена — автор родительской версии мог удалить или подменить данные.\n\n*   Для экономии места хранятся не полные версии документов, а diff-ы. Однако diff вычисляется не от родительской версии (которая может принадлежать другому пользователю), а от одной из существующих версий этого же пользователя. Необходимо обеспечить сохранность данных пользователя вне зависимости от действий других пользователей, поэтому мы не можем полагаться на целостность чужих данных.\n\n*   Исходная версия для diff-а может быть любой, лишь бы в графе diff-ов не образовывалось циклов. Можно автоматически подбирать исходную версию, чтобы diff был минимальным. (Таковой не обязательно будет предыдущая по времени.)\n\n*   Движок может накладывать ограничения на длину цепочки diff-ов, чтобы не слишком нагружать компьютер при отображении контента. Чтобы не превышать длину цепочки, версии могут ветвиться подобно кусту. Если нет ветви, к которой можно пристроиться, не нарушая ограничения на длину и при этом экономя достаточно байт, сохраняется полная версия. Еще раз уточню, что все это имеет отношение не к истории правок, а только к компактному хранению.\n\n*   Пользователь может удалить любые свои версии документа. Если версия служит родительской для любой другой версии, он получает предупреждение-вопрос, но всё равно может удалить версию. (Он всегда имеет возможность удалить данные вручную, так что нет смысла создавать ему препятствия в интерфейсе.) Дерево diff-ов при этом пересчитывается, чтобы сохранить целостность данных.\n\n*   Diff-ы между родительским узлом и дочерним вычисляются на лету при отображении. В diff-ам хранения они не имеют отношения.\n\nВ ZeroWiki ничего этого нет, понятно. Как в движке Kiwipedia by @gitcenter организовано хранение, не смотрел.\n\nОчень хочется форкнуть ZeroWiki и покопаться в коде, но нет времени."
		},
		{
			"post_id": 34,
			"title": "Уровень усталости: 120%",
			"date_published": 1539193592.668,
			"body": "Жена сегодня взяла в руки телефон после трудового дня и поняла, что не помнит пароль, которым благополучно пользовалась несколько месяцев.\n\nПароль был 8-значный, так что подбор вариантов ничего не дал. Пришлось делать сброс до заводских настроек."
		},
		{
			"post_id": 33,
			"title": "Acer Extensa 4220",
			"date_published": 1537789321.495,
			"body": "Кстати, старый ноутбук отлично себя чувствует. Я тогда писал, что от замены процессора нет заметного эффекта. Так вот, вау-эффект наступает, когда попользуешься Windows на более новых железках (десктопные i3 и i5 3-го, 4-го и 5-го поколений, разогнанные Атомы aka мобильные Петиумы N-ки), а потом берёшь этот Acer. В целом для Windows пофиг, какой процессор, ей нужен быстрый накопитель и много ОЗУ. Не знаю, что там оптимизировали в десятке, но памяти она жрёт не меньше семёрки. А вот Linux с приложениями хорошо себя чувствует на 2-х гигах ОЗУ и древнем HDD. То есть на самом деле суть даже не в процессоре, но тут срабатывает психологический фактор: вау, современная ОС на мобильном **Core 2 Duo**.\n\nТо же самое и на десктопном **Pentium D**, это уже совсем антиквариат. Самое забавное, что семёрке вполне хватало производительности CPU даже там, а памяти доступно «аж» — _по меркам 2007-го года_ — 4 гига. Если бы не какие-то мутные проблемы с драйверами или чёрт знает чем, она бы даже нормально работала.\n\n**UPDATE:** Всё-таки запустил систему с 3 ГБ. 1 ГБ нужно ставить в нижний слот, а 2 ГБ в верхний."
		},
		{
			"post_id": 32,
			"title": "Ничего не успеваю",
			"date_published": 1537786304.405,
			"body": "Сабж. :(\n\nВот потратил больше суток, чтобы привести в порядок ноутбук родственников, в котором начал сыпаться диск. *Резервная копия -> покупка накопителя -> вскрытие бука -> замена накопителя -> сборка бука -> установка ОС -> разворачивание резервной копии -> окончательная настройка.* Вроде немного шагов, но переходные процессы съедают львиную долю времени.\n\nА до этого несколько дней всё свободное время занимали осенние хлопоты по саду-огороду.\n"
		},
		{
			"post_id": 31,
			"title": "callback hell vs coffee script",
			"date_published": 1535775643.458,
			"body": "С некоторых пор открыл для себя прелести использования `jQuery.Deferred()` в синтаксисе CoffeeScript. Такой пример, который в голом JS выглядел бы как «ехал function через function» с уровнями вложенности, уходящими за правый край окна:\n\n* * *\n\n```coffee\nsome_func: ->\n    return $.Deferred().resolve()\n    .then => $.Deferred (d) =>\n        async_call1 some_params, (data1) =>\n            result1 = some_processing(data1)\n            d.resolve(result1)\n    .then (result1) => $.Deferred (d) =>\n        async_call2 foobar(result1), (data2) =>\n            result2 = some_processing(result1, data2)\n            d.resolve(result2)\n    .then (result2) => $.Deferred (d) =>\n        async_call3 foobar(result2), (data3) =>\n            result3 = some_processing(result2, data3)\n            d.resolve(result3)\n    .then (result3) => $.Deferred (d) =>\n        async_call4 foobar(result3), (data4) =>\n            result4 = some_processing(result3, data4)\n            d.resolve(result4)\n    .promise()\n```\n\nЕсли вы смотрите на `.then (result1)` и не понимаете, что происходит — скобки парсятся как относящиеся к аргументам лямбды `=>`, а уже потом сама лямбда — как аргумент метода `.then()`.\n\n`Deferred` облегчает задачу, но в классическом синтаксисе JS писать код в стиле `function() { return function() { return function() { ...` приятного мало, так что на JS такой код я бы разбил на мелкие именованные функции. В реальном коде то, что я условно обозначил как `foobar()` и `some_processing()`, может занимать десятки строк кода, что окончательно превратит код в месиво. В CoffeeScript просто выкидываем весь синтаксис на помойку вместе с лишними именованными функциями и пишем только то, что реально должен делать код.\n\nЕще пример:\n\n```coffee\nsome_func: ->\n    data1 = null\n    data2 = null\n    data3 = null\n\n    return $.Deferred().resolve()\n    .then => $.Deferred (d) =>\n        async_call1 some_params, (_data1) =>\n            data1 = _data1\n            d.resolve()\n    .then => $.Deferred (d) =>\n        async_call2 some_params, (_data2) =>\n            data2 = _data2\n            d.resolve()\n    .then => $.Deferred (d) =>\n        async_call3 some_params, (_data3) =>\n            data3 = _data3\n            d.resolve()\n    .then => $.Deferred (d) =>\n        d.resolve(some_processing(data1, data2, data3))\n    .promise()\n```\n\nЕсли придираться, это неправильный код. В таком виде, как тут, все асинхронные запросы могут быть выполнены параллельно, так что мы теряем время на последовательной обработке. Но я просто пишу в единообразном стиле, пока недостаток параллелизма не сказывается на производительности программы. Определённо тут не хватает такого же последовательного синтаксиса для `jQuery.when()`. Я еще раз просмотрел документацию на jQuery, но обнаружил только старый добрый `.when()`. Кажется, пора написать аддон к jQuery, делающий возможным что-то типа:\n\n```coffee\nsome_func: ->\n    data1 = null\n    data2 = null\n    data3 = null\n\n    return $.Deferred().resolve()\n    .in_parallel_with => $.Deferred (d) =>\n        async_call1 some_params, (_data1) =>\n            data1 = _data1\n            d.resolve()\n    .in_parallel_with => $.Deferred (d) =>\n        async_call2 some_params, (_data2) =>\n            data2 = _data2\n            d.resolve()\n    .in_parallel_with => $.Deferred (d) =>\n        async_call3 some_params, (_data3) =>\n            data3 = _data3\n            d.resolve()\n    .then => $.Deferred (d) =>\n        d.resolve(some_processing(data1, data2, data3))\n    .promise()\n```\n\nЕще одна особенность — допустим в вызываемой асинхронной функции по какому-то недоразумению не предусмотрели таймаута. Тогда вы берёте и делаете таймаут вручную:\n\n```\n    ...\n    ...\n    .then => $.Deferred (d) =>\n        async_call some_params, (data) =>\n            d.resolve(data)\n        setTimeout (=>\n            d.resolve(null)\n        ), 5000\n    ...\n    ...\n```\n\nЭто работает как ожидается, но выглядит немного не по фен-шую. Не спрашивайте, что тут случилось с синтаксисом аргументов `setTimeout()` — это же CoffeeScript. Но тут очень хочется написать еще один двустрочный аддон к jQuery, который уберёт это безобразие с экрана. Как-то так:\n\n```\n    ...\n    ...\n    .then => $.Deferred (d) =>\n        async_call some_params, (data) =>\n            d.resolve(data)\n        d.resolveOnTimeout 5000, => null\n    ...\n    ...\n```\n\nК сожалению, такой метод тоже не предусмотрен из коробки.\n\nP.S.\nИ да, я знаю, что писать с использованием jQuery в 2018-м году — признак ретарда. Я конченный ретард, если кто не в курсе."
		},
		{
			"post_id": 30,
			"title": "Dat и Beaker",
			"date_published": 1535558405,
			"body": "Потыкал сегодня сабж.\n\nИтак, ребята изобрели BitTorrent с человеческим лицом аккурат к тому времени, когда пользоваться торрентом стало реально опасно. Немного опоздали, нет? Получается, человечеству потребовалось около 20 лет, чтобы сообразить, как сделать p2p понятным для «домохозяйки». Хорошо, что изобрели. Плохо — что только сейчас. Может быть, интернет и общество были бы немного ными, если бы такие технологии появились раньше.\n\nДумаю, Dat можно напрямую сравнивать с ZN, и только с ним и имеет смысл сравнивать. Остальные p2p-решения, которые сейчас на слуху, решают несколько иные задачи, и только эти два нацелены на то, чтобы создать распределённый аналог web-а.\n\nНа мой взгляд, Dat имеет мало шансов на успех. Наверное, он мог бы вытеснить BitTorrent, если бы появился лет на 10 раньше, и затем из этой ниши распространиться на web как таковой, т.е. соцсети, форумы, блоги. У ZN многое из этого уже есть, плюс есть поддержка работы через Tor, так что если выбирать между этими двумя, для пользователя у dat нет ни одного преимущества."
		},
		{
			"post_id": 29,
			"title": "Решето",
			"date_published": 1535538023.644,
			"body": "Соседу на телефон на Андроиде от сына пришла смс со ссылкой. Он открыл ссылку, и теперь его телефон рассылает такие же письма счастья всему контакт-листу.\n\nПричина, по которой я не держу ZeroNet в телефоне. Слишком эти носимые компьютеры уязвимы и слишком много они о нас знают при этом."
		},
		{
			"post_id": 28,
			"title": "ZeroNet + Freenet = ?",
			"date_published": 1535537455,
			"body": "В копилку безумных идей:\n\n**Реализовать плагин для ZeroNet, взаимодействующий с Freenet.**\n\nFreenet организована как анонимное распределённое облако, в котором участники сами не знают, что они хранят. Вся информация побита на чанки, шифрована, перемешана и размазана по всей планете, и понять, что перед нами за кусок данных, можно только зная ключ, которым он «открывается».\n\nДля ZeroNet она выступит как еще одна среда передачи контента и одновременно как облако — т.к. как среда передачи данных, которая довольно долго «помнит», что в неё засунули."
		},
		{
			"post_id": 27,
			"title": "11 лет — не предел: Pentium D 935 @ 3.20GHz",
			"date_published": 1528283294.814,
			"body": "Итак, повышаем градус нищебродства:\n\n```no-highlight\nIntel Pentium D 935 @ 3.20GHz; 2 Cores; 4MB L2 Cache\nIntel 865PE; 800MHz FSB\n4 x 1GB DDR400\nGeForce FX5500; 128MB\n500GB SATA HDD\n```\n\nОн жив! И это почти _топ жыр_ 12-летней давности. Видеокарта только подвела. Когда-то была на 256MB тоже из семейства GeForce, но та сдохла давно. Надпись 3200MHz в BIOS-е внушает — если не вспоминать, что эти 3200MHz сливают современным селеронам на 1500MHz. BIOS позволяет регулировать частоту, можно и выше задрать. Но мучать старичка не буду, вряд ли он это переживёт. Вообще BIOS тут неплохой, есть куча настроек. А из фатальных недостатков — AGP, PCI и DDR, которая не «два», а просто DDR.\n\n* * *\n\n4GB — это максимум для этих чипсетов. Комплект обошелся мне в 1000 р., старые модули были мёртвые. Когда-то тут стояло 4 x 512MB, потом модули начали дохнуть, а в освободившиеся слоты вставлялось, что под руку подвернётся. Потом и оно дохло, и когда ставить было уже нечего, системник отправился на покой в шкаф. А теперь он жив.\n\nLinux, как ни странно, работает довольно быстро. Сначала я пробовал завести семёрку, но были какие-то проблемы с драйверами. Всё лагало и фризилось, хотя когда выходило из фриза, было видно, что дури в железе, в принципе, хватает. Но что-то там не срослось. Драйвера на FX5500 закончились на Висте, но под Семёркой как-то завелись. SATA опознавался как PATA. Я не стал дальше разбираться, хотя не все бубны были еще побиты.\nА Linux прям хорошо, вполне рабочая машина. Я сразу передумал комп продавать или отдавать, когда увидел, что он тянет современный Linux.\n\nК сожалению, датчики под Linux-ом врут. При запуске говорят, что temp1 +16, temp2 +28 и temp3 +61\\. По мере прогрева temp3 падает. temp2 похожа на правду, но не ясно, чья это температура — чипсета или процессора. В BIOS-е CPU Temperature и M/B Temperature правдоподобные, но смущает, что значения обоих датчиков всегда совпадают. Максимум, сколько я видел в BIOS-е — 41 градус. hwi под семёркой показывал правдоподобные значения, но Windows я снёс, чтобы разметить весь диск под LVM. В троттлинг при параллельной компиляции не уходит, значит юзать можно.\n\nКулер на видеокарте был заклинен и отключен. Сейчас расклинен, подключен и смазан, но звук, будто мы сейчас взлетим. Это пока единственный существенный минус компа, в остальном по ощущениям одни плюсы, потому что запуская его я точно ждал худшего по всем параметрам.\n\nЕще надо менять БП, мне не нравится, что он завышает вольтаж на линии +5V. И нужно сменить кулера — на вдув, на выдув, на видяшке. Только кулер на процессоре не требует замены.\n\nЯ так прикинул, апгрейдить этот конфиг некуда. Апгрейд сведётся к замене железа целиком. Можно взять материнку с поддержкой Коры + память DDR2\\. Тогда выкидываем старую материнку, видяшку и память. Комп запускается на прежнем проце, а в это время можно неспешно искать Core 2 Quad пожирнее. Это с одной стороны.\n\nА с другой стороны, ОЗУ мы так сможем увеличить только в 2 раза, что мало. Теоретически крайние в линейке чипсеты для Core поддерживают 16GB, но для этого понадобится найти 4 модуля по 4 гига, а DDR2 на 4 гига — это раритет, за который странные китайские люди на Али просят странные деньги.\n\nНадо подумать. Купить неубитую плату с чипсетом что-то типа Q45 + Core 2 Quad + 8GB DDR2 — по деньгам выйдет уже почти как купить нормальный современный кофиг на Celeron-е. Зато современный конфиг можно еще сто раз отапгрейдить, и он не выделяет столько тепла. Блин, но просто купить железо в DNS — это же скучно.\n\nЗачем мне это всё? А хрен его знает, просто прикольно — копаться в древних спеках, ходить в поисках железа по барахолкам и сервисам. Что-то в этом есть. Но только при условии, что вещь может быть полезная. Если вещь бесполезна, она сразу обнуляется в моих глазах. Поэтому я не понимаю людей, которые оживляют музейные экспонаты, тратя на это приличные деньги и кучу времени.\n\nСамое полезное в этом компе — диск на 500GB, можно хранить бэкапы с ноута, поднять ноду Zeronet, раздавать торренты. Можно даже пакеты компилировать на нём. А раритетный системник — это как оформление: стиль и ностальгия. Всё-таки 4 гига ОЗУ и 3 гигагерца — это норм, еще послужит."
		},
		{
			"post_id": 26,
			"title": "Кто-то дропает пакеты на 22-й порт",
			"date_published": 1528026907.209,
			"body": "Подключаюсь по ssh к VPS-ке на реальный IP — примерно с 70% вероятностью соединение зависает на этапе, собственно, установки соединения. Детально не анализировал, но подозреваю, что до удалённой машины вообще ничего не доходит.\n\nВ оставшихся 30 процентах соединение устанавливается нормально. Закономерности никакой не выявил.\n\nПоднял vpn между хостами, через vpn всё работает идеально."
		},
		{
			"post_id": 25,
			"title": "Я познаю мир (старые Celeron-ы)",
			"date_published": 1527234922.095,
			"body": "Думаю, почему вытащенный из Экстенсы **Celeron M 550** (как я его называл) везде называется **Celeron 550**, без индекса **M**. А оказывается, одни те же Селероны на ядре **Merom** выпускались под разные сокеты: **Socket M** и **Socket P**. Первые идут с индеком **M**, а вторые — без.\n\nЕще меня всегда прикалывало название **Celeron D** с точки зрения маркетинга. В названии **Pentium D** буква **D** должна была обозначать **Dual**, поскольку технически это были доработанные до двухядерности одноядерки **Pentium 4**.\n\nА **Celeron D**, как обычно, были урезанные версии Pentium-ов, но вот только вместе с кэшем, частью фич и т.п., там урезали и второе ядро. Они все были одноядерные.\n\nПервые двухядерные Селероны пошли начиная с Core-поколений, но уже без всяких индексов **D** в названии."
		},
		{
			"post_id": 24,
			"title": "Core 2 Duo T6570 @ 2.10GHz в Acer Extensa 4220",
			"date_published": 1527175706.935,
			"body": "Забрал ветерана из мастерской. 3 ГБ не завелось на этой материнке. Винда на тестовых запусках работает, а Linux падает со stack trace-ом при запуске. Сейчас стоит 2 ГБ.\n\nМужики всё таки где-то откопали **Core 2 Duo T6570**, а может, купили по дешевке на Авито и перепродали мне в 2 раза дороже. Но это и хорошо, мне очень не хотелось покупать с рук процессор без теста.\n\n[Было](https://www.cpubenchmark.net/cpu.php?cpu=Intel+Celeron+550+%40+2.00GHz&id=656).\n[Стало](https://www.cpubenchmark.net/cpu.php?cpu=Intel+Core2+Duo+T6570+%40+2.10GHz&id=996).\n\nПо характеристикам камень далеко не топ в линейке.\n\nОсобых впечатлений пока нет — заработало и ладно. Понятно, что эффекта «вау, не тормозит» не будет, всё равно он в разы отстаёт от современного понимания «не тормозит».\n\nПочему-то на дефолтном (в Void-е на момент запуска тестов; 4.16.x, не помню, точно) ядре отрубались клавиатура и тачпад под иксами (и вообще весь ввод, по usb мышь тоже не работала). Но ни на более старых ядрах, ни на прилетевшем свежем апдейте этот баг не воспроизводится. Будем считать это неудачным стечением обстоятельств.\n\nБук стал меньше греться и взвывать вентилятором, хотя по спекам TDP Коры Дуба выше, чем у Целерона. Термоинтерфейс никакущий был, туда с момента покупки никто не лазил."
		},
		{
			"post_id": 23,
			"title": "Не было печали",
			"date_published": 1527137827.428,
			"body": "Обновил Windows 10 на Irbis-е до свежего апрельского апдейта. Перестал работать звук и исчезла SD-карта из списка устройств."
		},
		{
			"post_id": 22,
			"title": "Апгрейд рядового Extensa",
			"date_published": 1526907531.423,
			"body": "Тем временем, утащил древний **Acer Extensa 4220** в сервис на апгрейд. После вчерашнего разговора на ЛОРе что-то совсем грустно стало глядя на него. Если заменить Celeron на что-то помощнее, еще походит как брутальная ретромашина. От внешнего вида я просто тащусь.\n\nНо облом, мужики сказали что **Core 2 Duo** у них нет вообще. И не будет. Хотя на витрине пара древних Корок стоит. Говорю, давайте вскроем и махнем процы. Не, не вариант. Хочешь — покупай целиком.\n\nОтдал им на диагностику насчёт памяти. Сейчас там 2 по 0.5\\. По документам ноут держит 1 + 1, но городская легенда утверждает, что работает и на 2 + 1\\. Самому лень возиться, покупать память на Авито, проверять...\n\nЕсли у заслуженного старичка ничего не отхлебнёт по ходу замены памяти, буду на Авито искать к нему проц.\n\nНоутбук уже давно не работал в качестве ЭВМ — ничего не вычислял. Просто хранил бэкапы. Но XFCE под Void на нём вполне бодро работает даже в текущем конфиге. Думаю, соберу под Void свою DE-солянку из Арча и буду таскать ноут с собой в деревню."
		},
		{
			"post_id": 21,
			"title": "Мысли про идеальный ноутбук",
			"date_published": 1526884333.342,
			"body": "Мой идеальный ноутбук:\n\n**Материнка и кулер:** должны тянуть самый топовый камень линейки без глюков и перегрева. Сам процессор не принципиален, я не против купить хоть с Селероном, а потом доапгрейдиться. А, да: обязательно **Intel**. Просто в AMD я не разбираюсь, и разбираться мне лень.\n\n**ОЗУ**: обязательно, чтобы был полный набор слотов. Надоела эта фигня, когда железо держит 16 ГБ, но мы вам возможность ставить больше 8 не дадим, просто тупо слот не припаяем.\n\nИ еще я охреневаю, когда вижу характеристики в магазине: продаются ноутбуки по 50+ т.р., у которых вставлено 4 ГБ памяти при максималке в 16 или в 32\\. «Купи ноутбук и сразу купи два нормальных модуля памяти» Итого дополнительный навар производителя — цена планки на 4 гига. А эти огрызки потом и на вторичке никто не покупает, потому что их и так девать некуда.\n\n4 ГБ — это уже давно самый минимум, если машина предназначена для работы, а не для киношек и набора текста в ворде. Или может, это я слишком зажрался? Ну я так думаю, память более важна для работы, чем процессор. На медленном камне работать можно, хоть и грустно, а когда в системе память заканчивается, graceful degradation не получится.\n\n**Видеокарта:** вообще не нужна.\n\n**Накопители:** возможность без плясок использовать два накопителя. А лучше, три — мечтать так мечтать. SSD под систему, HDD под данные, второй HDD под бэкап первого.\n\n**Разъемы USB:** чем больше, тем лучше. Вам жалко что ли?\n\n**Диагональ:** 14\", плюс-минус. Если станционарно использовать, диагональ не принципиальна. Но иногда приходится бук таскать, и 15.6\" оказалась немного великовата и неудобна. У старого бука было 14.1\", вот это удобный размер. Но тут вмешивается следующий пункт:\n\n**Клавиатура:** чем ближе к классической, тем лучше. На 15.6\" помещается вместе с Num-блоком, на 14\" проблематично её засунуть, там только урезанный вариант.\n\n**Экран:** ну тут всё просто, чем круче, тем лучше. В первую очередь важно разрешение, во вторую углы обзора, в третью — цветопередача. Всякие там _времена отклика_ я не понимаю, я тормоз.\n\nЧуть не забыл еще мелкую хотелку для снижения колхозного тюнинга: **WiFi с беспроблемным драйвером в линуксе**. Хотя сейчас таких большинство вроде.\n\nВ общем, составляю я такой список, смотрю на цены, потом вспоминаю про невыплаченный кредит на тачку, потом еще вспоминаю, что процессоры нынче напаяны,  и начинаю еще больше любить свой устаревший Самсунг с трещинами в корпусе. Жаль, что в него еще +8ГБ никак не засунуть, предел чипсета 4+4."
		},
		{
			"post_id": 20,
			"title": "640kB ought to be enough for anybody",
			"date_published": 1526871520.325,
			"body": "Каждый пользователь неизбежно сталкивается с выбором: или закрыть часть вкладок браузера, или купить новое железо. Хромиум перестал умещаться в 8-ми гигах памяти даже с ZRAM."
		},
		{
			"post_id": 19,
			"title": "(fail)",
			"date_published": 1526835086.049,
			"body": "Полчаса искать причину, почему не запускается `lightdm`, а потом выяснить, что неверно выставлены права на `/var/lib/lightdm/.Xauthority`."
		},
		{
			"post_id": 18,
			"title": "Снова про Coffee Script",
			"date_published": 1525931972.582,
			"body": "И я снова **про это**.\n\nПосле нескольких дней интенсивного кодинга на Coffee Script могу поделиться впечатлениями.\n\nВсё-таки, пусть язык ничего нового из себя не представляет в техническом плане (кого в наше время Javascript-ом удивишь?), но стилистически имеет ненулевую ценность. Если исходить из того, что текст программы мы воспринимаем не только по отдельному слову, но в целом как какой-то «узор» на экране, и из этого узора мозг выхватывает какие-то опорные элементы, то Coffee Script образует довольно гармоничный и лёгкий узор.\n\n---\n\nВ то же время, эксплиситные концы блоков действительно облегчили бы чтение в местах наподобие следующих, где в конце метода мы сдвигаемся сразу на 4 отступа:\n\n```CoffeeScript\n\trunStatusCheck: (img) ->\n\t\tdata = @getAttachedData(img)\n\t\tdata.statusCheckRequired = false\n\t\turl = img.src\n\n\t\tcorsRequester.checkSiteAvailable(url, {parseUrl: true})\n\t\t.then (res) =>\n\t\t\tdata.siteAvailable = res\n\n\t\tcorsRequester.requestSiteAndContentJson(url)\n\t\t.then (res) =>\n\t\t\tif typeof(res) == \"string\"\n\t\t\t\tdata.siteAvailable = true\n\t\t\t\tdata.contentJsonAvailable = true\n\t\t\t\ttry\n\t\t\t\t\tjson = JSON.parse(res)\n\t\t\t\t\tpath = (json.inner_path ? \"\").replace(/\\/?content\\.json$/, \"\")\n\t\t\t\t\tparsedUrl = corsRequester.parseUrl(url)\n\t\t\t\t\tfileName = (parsedUrl.innerPath ? \"\").removePrefix(path).removePrefix(\"/\")\n\t\t\t\t\tif json[\"files\"][fileName] || json[\"files_optional\"][fileName]\n\t\t\t\t\t\tdata.fileInList = true\n\t\t\t\t\telse\n\t\t\t\t\t\tdata.fileInList = false\n\t\t\t\tcatch\n\t\t\t\t\tdata.fileInList = false\n\n\n\treloadImage: (img) ->\n\t\tdata = @getAttachedData(img)\n\t\tif data.retries > @max_retries\n\t\t\treturn\n\t\tdata.retries += 1\n\t\tsrc = img.src\n\t\t@log(\"Reloading image [#{data.retries}]: #{src}\")\n\t\timg.src = \"\"\n\t\timg.src = src\n\t\t@runStatusCheck(img)\n\n```\n\nИли вот тут, с длиннющим return-ом, начинающимся в середине кода:\n\n```CoffeeScript\n\tcheckSiteAvailable: (siteAddress, options = {}) =>\n\t\tif options.parseUrl\n\t\t\tparsedUrl = @parseUrl(siteAddress)\n\t\t\tif not parsedUrl\n\t\t\t\treturn $.Deferred.reject()\n\t\t\tsiteAddress = parsedUrl.siteAddress\n\n\t\tif @siteRequest[siteAddress] and @siteRequest[siteAddress].state() == \"resolved\"\n\t\t\treturn @siteRequest[siteAddress]\n\n\t\tif siteAddress == @thisSiteAddress\n\t\t\treturn $.Deferred().resolve(true)\n\n\t\treturn $.Deferred().resolve()\n\t\t.then () =>\n\t\t\t$.Deferred (d) => # Check the permission\n\t\t\t\tPage.cmd \"siteInfo\", {}, (siteInfo) =>\n\t\t\t\t\t@thisSiteAddress = siteInfo.address\n\t\t\t\t\tif siteAddress == @thisSiteAddress\n\t\t\t\t\t\td.resolve(true)\n\t\t\t\t\telse if \"Cors:#{siteAddress}\" in siteInfo.settings.permissions\n\t\t\t\t\t\t# We have the permission, check if site wasn't deleted\n\t\t\t\t\t\tPage.cmd \"fileGet\", [\"cors-#{siteAddress}/content.json\", false, \"text\", 0], (res) =>\n\t\t\t\t\t\t\tif typeof(res) == \"string\"\n\t\t\t\t\t\t\t\tPage.log \"Cors: #{siteAddress}: available\"\n\t\t\t\t\t\t\t\td.resolve(true) # Available\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tPage.log \"Cors: #{siteAddress}: we have permission, but the site is unavailable\"\n\t\t\t\t\t\t\t\td.resolve(false) # Deleted\n\t\t\t\t\telse # No permission\n\t\t\t\t\t\tPage.log \"Cors: #{siteAddress}: no permission\"\n\t\t\t\t\t\td.resolve(false)\n\t\t.promise()\n```\n\nЯ специально даю методы целиком, чтобы был виден весь контекст. Вот еще сложный для чтения пример, здесь в  форматирование отступами вклинивается форматирование открывающими/закрывающими элементами, и на двух пустых строках гладкость чтения сбивается:\n\n```CoffeeScript\n\tpageSettingsMain: ->\n\t\treturn @queryBuildLog().then (buildlog) =>\n\t\t\ttitle = \"Blog Settings\"\n\t\t\tbody = \"\"\"\n\t\t\t\t* [Left Bar](?Settings:LeftBar)\n\t\t\t\t* [Footer](?Settings:Footer)\n\t\t\t\t* [Tags](?Settings:Tags)\n\t\t\t\t* [Editor](?Settings:Editor)\n\n\n\t\t\t\"\"\"\n\t\t\tif buildlog\n\t\t\t\tbody += \"\"\"\n\t\t\t\t\t<p class='hrboldline'></p>\n\t\t\t\t\t* [BuildLog](?/Settings:BuildLog)\n\t\t\t\t\"\"\"\n\t\t\t@applyAuxPostData(title, body)\n```\n\nТут еще надо упомянуть, что мой любимый редактор не обновлялся несколько лет, и в нём нет поддержки синтаксиса Coffee Script, а самому сделать для редактора файл-описание мне всё еще лениво. Так что я сейчас пишу код без подсветки синтаксиса, как в доисторические времена.\n\nОднако код достаточно легко пишется и читается. Поначалу визуально-смысловая мешанина: вроде как визуальный стиль Питона с примочками Руби, но при этом ты пишешь на Javascript. Ну, к этому достаточно быстро привыкаешь.\n\nПро преимущества Coffee Script над Javascript. Я нашел одно маленькое и частное, и наверное для большинства кодеров незаметное, но для меня это прямо круто. У меня нереально пригорало от необходимости писать эти бесконечные `function () { return` на каждый чих. Пока пишешь код, где много коллбеков, складывается такое впечатление, что половина кода состоит просто из этих чертовых `function` и `return`. *А где, блядь, сам код-то?*\n\nЧестно говоря, я не слежу за нововведениями Javascript. Там вроде сейчас частично пофиксили эту проблему?\n\nНо вот что в Coffee одна стрелочка `->` заменяет кучу бесполезных букв — это снижение баттхерта на 80 пунктов по стобалльной шкале. По сравнению с этим вышеперечисленные недостатки Coffee добавляют всего пунктов 20-25.\n\nТо есть в целом, всё сводится к моему всегдашнему мнению о дизайне языков:\n\n«Хорошо, когда в языке есть возможность использовать мало синтаксиса. Но плохо, когда язык беальтернативно принуждает использовать мало синтаксиса.»\n\nP.S. И всё-таки я предпочел бы писать на чем-то более похожем на Ruby.\nС `end`-скобочками и `{}`-скобочками.\n"
		},
		{
			"post_id": 17,
			"title": "File update failed на несуществующих файлах",
			"date_published": 1525621256.374,
			"body": "Интересная особенность. Если на зайте открыть URL несуществующей страницы ([например](http://127.0.0.1:43110/1ysjnZzsz5YYXhTNBxELnY4ftz42QupMg/foobar)), то ZeroNet сообщает для этого зайта, что:\n\n> File update failed\n\nИ в боковой панели соответственно:\n\n> Needs to be updated:\n> \n> *   foobar\n\nСообщения об этих фантомных файлах остаются, пока зайту не сделать _Update_. После этого ZeroNet понимает, что всё в порядке, весь контент на месте.\n\nСложно сказать, такое поведение было специально сделано с какой-то целью, или это несущественный побочный эффект где-то в коде."
		},
		{
			"post_id": 16,
			"title": "Significant whitespace и границы блоков",
			"date_published": 1525587876.286,
			"body": "Еще что касается Питона и его языков-подражателей.\n\nОдна из неотъемлемых проблем написания и чтения кода — это проблема конца блока. Когда есть много вложенных конструкций, бывает сложно уследить, не съехали ли отступы, и какой фрагмент к какому уровню вложенности относится. Частным и неприятным случаем этой проблемы является проблема [dangling else](https://en.wikipedia.org/wiki/Dangling_else).\n\nДа, можно сколько угодно кукарекать, что в хорошем коде не должно быть глубоких уровней вложенности, и что код должен быть побит на процедуры, укладывающиеся в одну экранную страницу. Но, во-первых, _хороший код_ и _реальный код_ зачастую понятия исключающие друг друга, и, во-вторых, мозг человек — такая глючная машина, что умудряется запутаться даже и в простом коде. Так что мало придумать правила ненаступания на грабли, надо еще и дизайн граблей сделать более безопасным для человека.\n\n* * *\n\nУ меня есть игрушечный недопиленный компилятор недопиленного языка, сделанный на основе [игрушечного языка Андрея Хохлова](http://www.avhohlov.narod.ru/p9800ru.htm). Не помню, публиковал ли я где-либо сорцы. Одна из первых фич, которые я добавил в язык, когда взялся за переделку кода Андрея — опциональная уточняющая нотация в конце блока. Вот пример куска кода, где закрываются несколько блоков подряд:\n\n```html\n                                return i;\n                        end:if\n                end:if\n                inc i;\n        end:while\n\n        return OPERATOR_INVALID;\nend:function\n```\n\nВсё понятно, не так ли? Теперь попробуем стереть нотацию и посмотрим еще раз:\n\n```html\n                                return i;\n                        end\n                end\n                inc i;\n        end\n\n        return OPERATOR_INVALID;\nend\n```\n\nСтало определённо хуже. Чтобы понять, что происходит, надо листать текст вверх, и чем объемнее там код, тем больше шансов, что мы визуально сопоставим начало и конец блока с ошибкой.\n\nА теперь запишем это в античеловеческой significant whitespace нотации. Э. Мда:\n\n```html\n                                return i\n                inc i\n        return OPERATOR_INVALID\n```\n\nУточнения `:if`, `:while` и т.п. являются опциональными в моём языке. Если они указаны, компилятор проверит их и выдаст ошибку, если обнаружит несоответствие. Если не указаны — будет работать без дополнительных проверок.\n\nОригинальный код Андрея содержал огромные уровни вложенности инструкций. Код частично унаследован еще со времён DOS, где нужно было экономить каждый байт программисты выживали как могли. Передо мной стояла задача отрефакторить его с разбивкой по модулям и процедурам. Чтобы понять, где в коде что начинается и заканчивается, я использовал описанную фичу. Я ставил нотацию в подозрительном месте и смотрел, компилируется ли результат. Для выполнения этого рефакторинга это оказалась действительно киллер-фича.\n\nПока я работал над кодом, я настолько привык к этой возможности, что мне её теперь не хватает во всех остальных языках. На Си или JS я часто ставлю end-примечания в комментариях, к сожалению, трансляторы этих языков не умеют проверять соответствие закрывающей скобки блока и комментария.\n\nЯ уверен, что принцип «код работает именно так как выглядит» является необходимым для создания высококачественного софта с минимумом ошибок. С этих позиций код без эксплиситных концов блока и код а-ля `eat food for food in foods when food isnt 'chocolate'` — лютый, беспросветный северный лис.\n\nЧто касается расширенной нотации конца блока, это не моё изобретение. Аналогичный синтаксис применялся еще в Ada, языке предназначенном для военных разработок. Если не ошибаюсь, там он являлся обязательным для некоторых синтаксических конструкций. (Или всё же не обязательным? Ничерта не помню уже.) Эти люди знали толк в написании надежного кода. :)"
		},
		{
			"post_id": 15,
			"title": "Ужасы нашего городка",
			"date_published": 1525585139.006,
			"body": "Продолжаю открывать для себя мир Coffee Script:\n\n> Because the `==` operator frequently causes undesirable coercion, is intransitive, and has a different meaning than in other languages, CoffeeScript compiles `==` into `===`, and `!=` into `!==`. In addition, `is` compiles into `===`, and `isnt` into `!==`.\n> \n> You can use `not` as an alias for `!`.\n> \n> For logic, `and` compiles to `&&`, and `or` into `||`.\n> \n> Instead of a newline or semicolon, `then` can be used to separate conditions from expressions, in `while`, `if`/`else`, and `switch`/`when` statements.\n> \n> As in YAML, `on` and `yes` are the same as boolean `true`, while `off` and `no` are boolean `false`.\n> \n> `unless` can be used as the inverse of `if`.\n> \n> As a shortcut for `this.property`, you can use `@property`.\n\nКакой-то карго-культ Питона, Руби и YAML-а. Кроме `@`-нотации и постпозитивных `if`, от Руби тут взяли принцип _«есть много способов выразить это»_. Но в Руби практически каждая синтаксическая конструкция или библиотечная функция, которая _«делает почти то же самое, что предыдущая, но немного иначе»_ как-то обоснована с позиции юзабилити. Хотя есть и откровенная дурость типа `inject` vs `reduce` — один и тот же метод, имеющий два названия. Здесь же одна только дурость и осталась: `is`, `isnt`, `on`, `yes` и прочий винегрет. Бесполезный `unless` еще из Руби притащили.\n\nЯ сам такие «языки» придумывал на основе Basic-а, когда мне было лет 16, а нынешняя молодежь делает это на основе JS. Слава богу, тогда у меня не было интернетов.\n\nОтдельные апплодисменты за «операция `==` на самом деле `===`». Теперь мало помнить семантику JS, надо еще помнить, что в CS операции вовсе не те, чем кажутся.\n\nКстати, вот пример кода из мануала, ради которого весь этот винегрет был придуман. Суть в последней строке:\n\n```coffeescript\n# Eat lunch.\neat = (food) -> \"#{food} eaten.\"\neat food for food in ['toast', 'cheese', 'wine']\n\n# Fine five course dining.\ncourses = ['greens', 'caviar', 'truffles', 'roast', 'cake']\nmenu = (i, dish) -> \"Menu Item #{i}: #{dish}\" \nmenu i + 1, dish for dish, i in courses\n\n# Health conscious meal.\nfoods = ['broccoli', 'spinach', 'chocolate']\neat food for food in foods when food isnt 'chocolate'\n```\n\nС точки зрения читабельности кода, это тихий ужас. Но разработчику очень хотелось **программировать на английском**, и voilà!"
		},
		{
			"post_id": 14,
			"title": "Глюкофокс",
			"date_published": 1525524120.076,
			"body": "Полчаса искать ошибку в коде, из-за которой не срабатывает `setTimeout()`, а потом обнаружить, что надо просто закрыть заглючившую вкладку файрфокса и открыть сайт на новой.\n\n![Firefox-Crash-640x353.jpg (640x353)](data/img/post_14_Firefox-Crash-640x353.jpg)"
		},
		{
			"post_id": 13,
			"title": "Разбираюсь с разработкой ZeroBlog",
			"date_published": 1525450039.398,
			"body": "Завёл [репозиторий для допиливания ZeroBlog-а](http://127.0.0.1:43110/15u2FYH7eVQPKLuyfX4AA8sjB3775kbN2W) (форк от [допиленной версии ZeroBlog](http://127.0.0.1:43110/1M5dciFFSWt4wKs9Nnxa34BgGnt7os7h3v) by [BinChan](http://127.0.0.1:43110/1EiMAqhd6sMjPG2tznkkGXxhdwFBDdeqT9/)) и соответствующий [сайт для live-версии](http://127.0.0.1:43110/19fZJhX7FGENeRRLB8ftgrziBJ5vsLtFog/).\n\nКод пока ничем существенным не отличается от оригинала. Пара мелких правок в CSS. Автогенерируемые all.css и all.js убраны из репозитория.\n\nРазобрался с workflow. Смешанные впечатления от кодинга для ZN. С одной стороны, очень крутая шутка, особенно после появления Git Center, с другой — многое сделано через жопу. Ну или я еще чего-то не понял, как вариант.\n\n"
		},
		{
			"post_id": 12,
			"title": "Git Center",
			"date_published": 1525397368.44,
			"body": "Кстати, столкнулся с небольшой проблемой юзабилити Git Center-а.\n\nСсылка на репозиторий выглядит, например, так:\n\n```html\nhttp://127.0.0.1:43110/1FEvdSRAqTEuGpc31s9ad7rPc4jqRpeWfG\n```\n\nПри её открытии делается редирект на Git Center-овский GUI репозитория:\n\n```html\nhttp://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/repo/?1FEvdSRAqTEuGpc31s9ad7rPc4jqRpeWfG\n```\n\nНе сразу очевидная проблема заключается в том, что с таким подходом мы не можем получить доступ к боковой панели ZeroNet сайта-репозитория 1FEvdSRAqTEuGpc31s9ad7rPc4jqRpeWfG. А некоторые действия можно произвести только через эту панель. Например:\n\n*   Посмотреть, какие именно файлы не засинхронизировались.\n*   Переключить флажок This is my site.\n*   ZeroHello не даёт возможность удалить owned site, это можно сделать только из боковой панели сайта.\n\n**UPDATE**:\n\nКак подсказал @gitcenter, для решения этого затруднения достаточно дописать в URL несуществующую страницу:\n\n```html\nhttp://127.0.0.1:43110/1FEvdSRAqTEuGpc31s9ad7rPc4jqRpeWfG/admin\n```\n\nСайт вернет 404, и при этом можно открыть боковую панель."
		},
		{
			"post_id": 11,
			"title": "Coffee Script, мать его",
			"date_published": 1525368893.992,
			"body": "Бывают дни неудачные, когда наступаешь на все грабли, какие только есть. Итак:\n\n1.  Чтобы ZN подхватил coffee, достаточно coffee установить в систему и поместить в PATH. Не надо прописывать его в coffeescript_compiler по аналогии с тем, как это сделано под Windows. ZN сам его найдёт.\n\n2.  Пересборка кода сайта выполняется только при полной перезагрузке страницы в браузере (Ctrl + F5). F5 или Ctrl + R не прокатывают.\n\n3.  Если в сборку прокрались ошибки и не хотят уходить вопреки здравому смыслу, надо просто грохнуть all.js. Логика избегания избыточных компиляций у ZN слишком оптимистичная.\n\n4.  После alert-ов с ошибками компиляции в браузере перестаёт работать часть элементов управления в ZeroHello. Вообще никак не связанные вещи, но что-то там браузеру приглючилось.\n\nНу и наконец-то, после всего этого, я вижу уже 3 или 4 вполне осмысленных ошибки компиляции сайта ZeroBlogPlus. То ли старый синтаксис к новому CoffeeScript-у не подходит, то ли фаза луны не та. Ну не может же код просто взять и скомпилироваться? Вот и я думаю, что не может. Это нормально, от этого можно уже работать."
		},
		{
			"post_id": 10,
			"title": "(вставлю пока сюда, в качестве импровизированного pastebin)",
			"date_published": 1525347434.592,
			"body": "Кусок кода из 2004-го года\n\n* * *\n\n```\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SmartMBR v1.0\n;; Copyright 2004, Вадим Ушаков\n;;\n;; SmartMBR - это первичный загрузчик для MBR,\n;; отличающийся повышенным интеллектом.\n;;\n;; Основная идея - упростить загрузку с разных разделов и избавиться\n;; от необходимости переключения активного раздела.\n;; Функциональность достигнута оптимизацией кода по размеру,\n;; чтобы все влезло в один сектор. ЕСли кто подскажет еще способы оптимизации,\n;; буду благодарен.\n;;\n;;\n;; Программа написана на fasm. Для компиляции используйте команду:\n;; fasm smartmbr.asm smartmbr.bin\n;; Линковки не требуется.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n\nF1_SCANCODE    equ 59 ; Сканкод для F1\nENTER_SCANCODE equ 28 ; Сканкод для Enter\n\nPartab  equ 0x7be  ; смещение на таблицу разделов\nTimeout equ 5 * 18 ; сколько тиков ждать, прежде чем загрузиться с раздела по умолчанию\n\norg\t0x600\n\nstart:\n\n\t; сегментные регистры устанавливаем на нулевой сегмент\n\txor\tbx, bx\n\tmov\tes, bx\n\tmov\tds, bx\n\tmov\tsi, 0x7c00\n\tmov\tss, bx\n\tmov\tsp, si\n\n\t; перемещаем себя на новое место\n\tcld\n\tmov\tdi, 0x600\n\tmov\tcx, 512\n\trep\tmovsb\n\n\tpush\tes\n\tpush\tmain\n\tretf\n\n; таблица имен разделов\nnameTable:\n db 0x0c, s_FAT32  and 0xff\n db 0x83, s_Ext2   and 0xff\n db 0xa5, s_Ffs    and 0xff\n db 0x00, s_noname and 0xff\ns_:\ns_FAT32  :  db \"Fat3\" , '2' + 0x80\ns_Ext2   :  db \"Ext\"  , '2' + 0x80\ns_Ffs    :  db \"Ff\"   , 's' + 0x80\ns_noname :  db \"Nonam\", 'e' + 0x80\n\n\nmain:\n\n\t; инициализируем переменные байты в строке\n\tmov\tal, '0'\n\tmov\t[_key], al\n\tmov\t[_hdx], al\n\n\t; сохраняем имя устройства\n\tmov\tbp, dx\n\n\t; приветствуем пользователя\n\tmov\tsi, msgSmartMBR\n\tcall\taputs\n\n\t; проверяем, что это несъемное устройство\n\tmov\tal, dl\n\tsub\tal, 0x80\n\tjb\tErrInvalidDrv\n\n\t; корректируем строку с именем устройства\n\tadd\tal, 'a'\n\tmov\t[_hd], al\n\n\n\tmov     di, Partab ; смещение на таблицу разделов\n\tmov     cx, 4\n\n\t; Цикл печатает меню выбора разделов\n\t.PrintMenuLoop:\n\n\t\t; корректируем в строке номер раздела\n\t\tinc\tbyte [_key]\n\t\tinc\tbyte [_hdx]\n\n\t\t; помечаем раздел как неактивные\n\t\tmov\t[di], bl\n\n\t\t; если тип раздела равен нулю, игнорируем раздел\n\t\tmov\tal, [di + 4]\n\t\tcmp\tal, bl\n\t\tje\t.l_01\n\n\t\t; Печатаем имя раздела\n\t\tmov\tsi, msgFkey\n\t\tcall\taputs\n\n\t\t; Ищем имя ф.с. по идентификатору\n\t\tmov\tsi, nameTable\n\t\t.FindFSNameLoop:\n\n\t\t\tcmp\t[si], bl\n\t\t\tjz\t.FindFSNameLoopEnd\n\n\t\t\tcmp\tal, [si]\n\t\t\tjz\t.FindFSNameLoopEnd\n\n\t\t\tinc\tsi\n\t\t\tinc\tsi\n\n\t\tjmp\t.FindFSNameLoop\n\t\t.FindFSNameLoopEnd:\n\n\t\t; Печатаем имя ф.с.\n\t\tmov\tal, byte [si + 1]\n\t\tmov\tah, 0x06\n\t\tmov\tsi, ax\n\t\tcall\taputs\n\n\t\t.l_01:\n\t\tadd\tdi, 0x10\n\tloop\t.PrintMenuLoop\n\n\t; Печатаем сообщение о загрузке по умолчанию\n\tmov\tal, [default]\n\tadd\tal, byte '1' + 0x80\n\tmov\t[_def], al\n\tmov\tsi, msgDefault\n\tcall\taputs\n\n\n\n\tprompt:\n\n\t; Получаем значение тиков\n\txor\tah, ah\n\tint\t0x1a\n\tmov\tbx, dx\n\n\t; Вычисляем количество тиков для времени выбора пунктов меню\n\tadd\tbx, Timeout\n\n\t; Ждем пока пользователь не нажал клавишу или пока не истек интервал\n\t.waitkey:\n\tmov\tah, 1\n\tint\t0x16\n\tmov\tah, 0\n\tjnz\t.reply ; нам ответили?\n\tint\t1ah\n\tcmp\tdx, bx\n\tjb\t.waitkey ; не истек интервал?\n\n\t; Выполняем действие по умолчанию\n\t.load_default:\n\tmov\tal, [default]\n\tjmp\t.do_command\n\n\t; Читаем ввод пользователя\n\t.reply:\n\tint\t0x16\n\tmov\tal, ah\n\tcmp\tal, ENTER_SCANCODE\n\tje\t.load_default ; если нажат \"ввод\" выбираем действие по умолчанию\n\tcmp\tal, 01\n\tjnz\t.l_03\n\tint\t18h\n\t.l_03:\n\tsub\tal, F1_SCANCODE\n\n\n\t; Выполняем команду\n\t.do_command:\n\n\t; нам часто понадобится константа 0\n\txor\tebx, ebx\n\n\tcmp\tal, 8\n\tjnb\tprompt\n\n\tmov\t[default], al ; сохраняем выбор по умолчанию\n\n\tcmp\tal, 4\n\tjnb\tload_another_drive\n\n\t;получаем указатель в таблице разделов\n\tmov\tah, 0x10\n\tmul\tah\n\tadd\tax, Partab\n\tmov\tsi, ax\n\n\t; Проверяем, что раздел не пуст\n\tcmp\t[si + 4], bl\n\tje\tprompt\n\n\t; Помечаем раздел как загрузочный\n\tmov\t[si], byte 0x80\n\n\tmov\teax, [si + 8]\n\tmov\tdx, bp\n\n; dl  - номер физического устройства\n; eax - номер сектора\nload_sector:\n\n\tpusha\n\n\n\t; выполняем сохранение MBR-сектора\n\t;;;;\n\t\tpushad\n\n\t\tmov\tdx, bp\n\n\t\tpush\tebx ; верхние 32 бита LBA\n\t\tpush\tebx ; нижние 32 бита LBA\n\t\tpush\tbx  ; сегмент буфера\n\t\tpush\tword 0x0600 ; смещение в сегменте буфера\n\t\tinc\tbx\n\t\tpush\tbx  ; один сектор\n\t\tpush\tword 0x0010 ; размер пакета\n\n\t\tmov\tax, 0x4300\n\t\tmov\tsi, sp\n\t\tint\t0x13\n\n\t\tpopa\n\n\t\tpopad\n\n\t\t;Снимаем флаг активного раздела\n\t\tmov\t[si], bl\n\t;;;\n\n\t; формируем пакет\n\tpush\tebx     ; верхние 32 бита LBA\n\tpush\teax     ; нижние 32 бита LBA\n\tpush\tbx      ; сегмент буфера\n\tpush\tword 0x7c00 ; смещение в сегменте буфера\n\tinc\tbx\n\tpush\tbx      ; читать один сектор\n\tpush\tword 0x0010 ; размер пакета\n\n\t; вызываем сервис 0x42 (Extended Read)\n\tmov\tah, 0x42\n\tmov\tsi, sp\n\tint\t0x13\n\n\t; Была ошибка чтения?\n\tjc\tErrRead\n\n\tpopa\n\tpopa\n\n\t; Проверить корректность сигнатуры\n\tcmp     word [0x7c00 + signature - 0x600], 0xaa55\n\tjne     prompt\n\n\tpush\tds\n\tpush\tword 0x7c00\n\tretf\n\nload_another_drive:\n\tadd\tal, 0x80 - 4\n\tmov\tdl, al\n\txor\teax, eax\n\tjmp\tload_sector\n\n\nErrRead:\n\tmov\tsi, msgErrRead\n\tjmp\tErr\nErrInvalidDrv:\n\tmov\tsi, msgInvalidDrv\nErr:\n\tcall\taputs\n\n\txor\tah, ah\n\tint\t0x16\n\tint\t0x19\n\nmsgInvalidDrv db 13,\"Bad hd nu\", 'm' + 0x80\nmsgErrRead    db 13,\"IO Er\", 'r' + 0x80\n\n\n; Функция печатает на экран строку.\n; ds:si - указатель на строку.\n; Концом строки является байт с установленным старшим битом.\naputs:\n\tpusha\n\n\t.loop:\n\tcld\n\tlodsb\n\tpush\tax\n\tand\tal, 0x7f\n\tmov\tah, 14\n\tmov\tbl, 0x07\n\tint\t0x10\n\tpop\tax\n\tcmp\tal, 13\n\tjnz\t.l_01\n\tmov\tax, 14 * 256 + 10\n\tmov\tbl, 0x07\n\tint\t0x10\n\t.l_01:\n\ttest\tal, 0x80\n\tjz\t.loop\n\n\tpopa\n\tretn\n\n\ndefault     db 0           ; загрузка по умолчанию\n\n\nmsgSmartMBR db 13,13,\"SmartMBR v1.0\",13 + 0x80\n\nmsgFkey     db  13,'F'\n_key        db  '0','  hd'\n_hd         db  'a'\n_hdx        db  '0 ',' '+80h\n\nmsgDefault  db 13,13,\"Default: F\"\n_def        db '1' + 0x80\n\n\n\ntimes (0x7be - $) db 0\n\nrb 0x10 * 4 ; место для таблицы разделов\n\nsignature:\ndw 0xaa55\n```"
		},
		{
			"post_id": 9,
			"title": "Каналы на YouTube на тему языков и культур",
			"date_published": 1524718338.67,
			"body": "### Иноязычные пользователи, владеющие русским:\n\n**Португальский:**\n\n*   [Ана Лаура](https://www.youtube.com/channel/UC1PEhm-E5MoWAXYIRTQT7-g/videos)\n\n**Испанский:**\n\n*   [Когда ты Нурия](https://www.youtube.com/channel/UCzKXgVqZa4thaNpD0EKLz0g/videos)\n*   [Испанский с Хуаном](https://www.youtube.com/channel/UCEuPJvTug4l38t5Lmwp7rxw/videos)\n*   [Jonathanzki](https://www.youtube.com/channel/UC6ABAPXB0QHX0BLqj_0OpIw/videos)\n\n**Итальянский:**\n\n*   [Valentina Moretti](https://www.youtube.com/channel/UCnwirF9e2snS6r0itG_YClA/videos)\n*   [Gaia 4.0](https://www.youtube.com/channel/UCshv2CJHYa7pw9pVQ-C5Hng/videos)\n\n**Французский:**\n\n*   [Лориана](https://www.youtube.com/user/Lauuxx3/videos)\n\n**Английский:**\n\n*   [Bridget Barbara](https://www.youtube.com/channel/UCqILnGzWyjqnPFqS2e1yVWQ/videos)\n*   [Джастин](https://www.youtube.com/channel/UCrMnWbWKMm_D0cNvzkKP1jQ/videos)\n\n**Нидерландский:**\n\n*   [Ари](https://www.youtube.com/channel/UCG-H63xUvVaojFtfpZhNpnA/videos)\n\n**Польский:**\n\n*   [Lina Nastya](https://www.youtube.com/user/BrunetteKatarina/videos)\n\n### Русскоязычные пользователи:\n\n*   [Касё Гасанов](https://www.youtube.com/user/channelmadeinchina/videos) — Китай\n*   [Sergey Kuvaev](https://www.youtube.com/channel/UCixWVsMbvpmDoyR3qTsTl2A/videos) — Япония\n*   [Шамов Дмитрий](https://www.youtube.com/user/AnchousJap/videos) — семейная пара русский + японка\n*   [ItalianLight](https://www.youtube.com/channel/UCVUW2lemPk3kOjf_oWkdk7A/videos) — русская в Италии\n\n### Прочее:\n\n*   [Итальянцы by Kuzno Productions](https://www.youtube.com/channel/UC82ZIpmWhgwXfwMfGc5FYoA/videos)\n*   [Эмоциональные итальянцы by MilanTV](https://www.youtube.com/channel/UCaa_xrHAyaw97nnYTYTVAAQ/videos)\n*   [Lisa Fabiani](https://www.youtube.com/channel/UCnO9iIxfgWVqAjuGQEHWEzQ/videos) — двуязычный ребёнок: итальянский/русский\n*   [Elena Kundera](https://www.youtube.com/channel/UCMHf_wipSlOHA7BtX6fma1Q/videos) — о языках и полиглотах\n*   [Anastacia Kay](https://www.youtube.com/user/funastacia/videos) — о языках, мотивации, лайфхаках\n*   [Ecolinguist](https://www.youtube.com/channel/UChqLwfp3eAkAwX9DGnqr_CA/videos) — польский язык\n*   [MRslavic](https://www.youtube.com/channel/UC7pc8NmzzxUGtUPrWgPXFZg/videos) — прикольный босниец\n*   [NativLang](https://www.youtube.com/user/NativLang/videos) — подборка разных фактов о языках\n*   [Langfocus](https://www.youtube.com/channel/UCNhX3WQEkraW3VHPyup8jkQ/videos) — о всех языках мира\n"
		},
		{
			"post_id": 8,
			"title": "Похоливорим?",
			"date_published": 1522769525,
			"body": "Мало пока народу тут, [в зеронете кто-то не прав](http://127.0.0.1:43110/1Apr5ba6u9Nz6eFASmFrefGvyBKkM76QgE/?Topic:1_1HfVavnWvCfuS2JcZBnw8DaTWckz8QBz5j/), а срача не возникает.\n\nДобавил очередное бессмысленное голосование:\n[ZeroPolls: Favorite Scripting Language?](/ZeroPolls.bit/?Poll:4-1GooUE19488nDwG3TdkM8seYAHct4gjkq4)"
		},
		{
			"post_id": 7,
			"title": "Wine как надежда олдфага",
			"date_published": 1522716282.602,
			"body": "Решили с женой погонять в NWN 1 в кооперативе по локалке. Из всего зоопарка ОС только под wine в линуксе NWN работает идеально. В Windows 10 не работает. В Windows 7 играть можно, но часто глючит, а если свернуть окно, падает."
		},
		{
			"post_id": 6,
			"title": "ZN идеален для распиздяев и для вечности",
			"date_published": 1522704717,
			"body": "Сегодня пролюбил оплату хостинга и чуть не пролюбил оплату доменов. Хорошо, что хостер VDS-ку не сразу удаляет."
		},
		{
			"post_id": 5,
			"title": "Быстрый и грязный фикс бага с таблицами",
			"date_published": 1522670113,
			"body": "В общем, не ломая долго голову, я открыл файл [alloy-editor/all.js](/1ysjnZzsz5YYXhTNBxELnY4ftz42QupMg/alloy-editor/all.js) и добавил обратное преобразование переводов строк в теги `<br>` внутри таблиц. Да, прямо в прожеванный через все препроцессоры код.\n\nБыло:\n\n```javascript\nfunction cell (content, node) {\n  var index = Array.prototype.indexOf.call(node.parentNode.childNodes, node)\n  var prefix = ' '\n  if (index === 0) prefix = '| '\n  return prefix + content + ' |'\n}\n```\n\nСтало:\n\n```javascript\nfunction cell (content, node) {\n  var index = Array.prototype.indexOf.call(node.parentNode.childNodes, node)\n  var prefix = ' '\n  if (index === 0) prefix = '| '\n  return prefix + content.replace(/^\\n*/, '').replace(/\\n*$/, '').replace(/\\n/g, '<br>') + ' |'\n}\n```\n\nКостыль, но работает.\n\nПроверяю. Таблица, набранная прямо в редакторе постов:\n\n| x | y | z |\n| --- | --- | --- |\n| 1 строка<br>2 строка<br>3 строка | a<br>b<br>c | d<br>e<br>f |"
		},
		{
			"post_id": 4,
			"title": "Таблицы в ZeroBlog — бида-пичаль",
			"date_published": 1522662625,
			"body": "Мало того, что таблицы в markdown — само по себе боль, так еще и встроенный в ZeroBlog редактор не поддерживает таблицы с переводами строк. Ни таблицы, сделанные при помощи конструкции \\|--\\|--\\|, ни таблицы в виде HTML-кода, не работают. Вернее, в первых редактор сразу портит разметку, а вторые сначала превращает в первые и затем тоже портит.\n\nЕсли открыть режим ввода неформатированного текста, вставить таблицу и сразу сохранить пост, то таблица сохраняется нормально. Пробую:\n\n| X                       | Y                       |\n| ----------------------- | ----------------------- |\n| first line<br>next line | first line<br>next line |\n| first line<br>next line | first line<br>next line |\n\nНо если попытаться что-то еще отредактировать, всё разъезжается.\n\nВот markdown валидной таблицы:\n\n```markdown\n| X                       | Y                       |\n| ----------------------- | ----------------------- |\n| first line<br>next line | first line<br>next line |\n| first line<br>next line | first line<br>next line |\n```\n\nА превращается он в это:\n\n```markdown\n| X | Y |\n| --- | --- |\n| first line |\n\nnext line | first line\nnext line |\n| first line\nnext line | first line\nnext line |\n```\n"
		},
		{
			"post_id": 3,
			"title": "Проверяю, как вставлять видео в блог",
			"date_published": 1522660105,
			"body": "Само видео размещено на [ZeroUp](/1uPLoaDwKzP6MCGoVzw48r4pxawRBdmQc/).\n\nШаблон для вставки в пост:\n\n```html\n<video controls=\"controls\" preload=\"none\" width=\"100%\">\n\t<source src=\"URL HERE\" type=\"video/mp4\">\n\tYour browser does not support the video tag.\n</video>\n\\[Для просмотра видео требуется подключить [ZeroUp](/1uPLoaDwKzP6MCGoVzw48r4pxawRBdmQc/)\\]\n```\n\nРезультат:\n\n<video controls=\"controls\" preload=\"none\" width=\"100%\">\n\t<source src=\"/1uPLoaDwKzP6MCGoVzw48r4pxawRBdmQc/data/users/1GooUE19488nDwG3TdkM8seYAHct4gjkq4/Exaited%20%20Maciej%20Smoliski%20-%20Zakochaj%20si%20we%20mnieOficjalny%20Teledysk%202015%20.mp4\" type=\"video/mp4\">\n\tYour browser does not support the video tag.\n</video>\n\\[Для просмотра видео требуется подключить [ZeroUp](/1uPLoaDwKzP6MCGoVzw48r4pxawRBdmQc/)\\]\n\n\n"
		},
		{
			"post_id": 2,
			"title": "HTTP-бисквитки 🍰",
			"date_published": 1522652846.96,
			"body": "Уведомление на болгарском сайте:\n\n> Този сайт използва бисквитки за да ви достави по-добра услуга.\n\nБисквитки, так-то. Само слово _бисквита_ означает на болгарском не бисквит, а обычное печенье, так что бисквитки на русском — _печеньки_. Люди не парились и просто перевели куки с английского.\n\nПосмотрел другие языки. У сербов — _kolačić_, что тоже переводится как печенька. У словен — уменьшительное _piškotek_ от слова _piškot_, которое означает как раз бисквит.\n\nОстальные славяне вроде используют английскую транслитерацию."
		},
		{
			"post_id": 1,
			"title": "Завел еще один блог",
			"date_published": 1522646100,
			"body": "Буду использовать как микроблог для всякой ерунды, которую неохота постить в основной блог.\n\nZN сгенерировал такой эпичный адрес при клонировании блога, что я даже vanitygen не стал запускать. 1**ysjnZzsz5YYX**hTNBxELnY4ftz42QupMg, что-то в этом есть. Выглядит-то как!"
		}
	]
}