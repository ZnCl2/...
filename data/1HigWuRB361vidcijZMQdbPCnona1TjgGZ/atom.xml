<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ernest的Blog</title>
  <subtitle>一个有理想的Android程序员</subtitle>
  <link href="/1HigWuRB361vidcijZMQdbPCnona1TjgGZ/atom.xml" rel="self"/>
  
  <link href="http://127.0.0.1:43110/"/>
  <updated>2017-04-06T10:47:30.000Z</updated>
  <id>http://127.0.0.1:43110/</id>
  
  <author>
    <name>Ernest</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kindle paperwhite缺陷：WIFI问题</title>
    <link href="http://127.0.0.1:43110/amazon-kindle-paper-white-bug/"/>
    <id>http://127.0.0.1:43110/amazon-kindle-paper-white-bug/</id>
    <published>2017-04-06T10:46:55.000Z</published>
    <updated>2017-04-06T10:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上午京东买了958的KPW3，结果WIFI一直连不上。于是百度解决办法，也不行。问在线客服，并没有本质上解决问题，而且技术支持一点也不懂技术。下面是对话记录。</p>
</blockquote>
<p>我: 怎么看是paperwhite是第几代，连接不上wifi<br>您现在已连接到亚马逊的 高云涛。<br>高云涛: 您好，欢迎使用亚马逊在线服务，我是亚马逊kindle客服：高云涛，很高兴为您服务，请问有什么可以帮到您的？<br>麻烦您提供一下设备的序列号我帮您查询下<br>在这里查询序列号</p>
<ol>
<li>从主页（点击小房子回到主页）点击右上角三个点菜单键。</li>
<li>点击【设置】，然后再次点击【右上角三点菜单键】。</li>
<li>点击【设备信息】.查看序列号提供一下<br>我: <strong>**</strong>(保护隐私，此处隐藏)<br>高云涛: 目前设备还没有注册<br>是kpw3代<br>我: 连接不上wifi<br>高云涛: 您连接的wifi是家庭路由器吗<br>我: 我的手机都能连接上。 是公司的路由器<br>密码确定是正确的。<br>百度后尝试建立WIFI_NO_NET_PROBE 文件，也不行<br>高云涛: kindle对wifi的信道有要求的<br>我: 改不了wifi信道，就用不了了？<br>高云涛: 重启一下路由器试试<br>我: 总不能每次都重启路由器吧<br>高云涛: 重启一次，能连接上就行<br>不用总重启<br>或是您打开手机的流量热点<br>我: 升级固件也不能吗？是固件的问题还是硬件的缺陷？<br>高云涛: 连接热点注册试试<br>目前您还没有注册，看不到固件是哪版的<br>我: 5.8.2.1<br>高云涛: 太低了<br>我: 升级了固件能够解决这个问题吗？<br>高云涛: 系统包下载连接<br><a href="http://pan.baidu.com/s/1mijs8pM" target="_blank" rel="external">http://pan.baidu.com/s/1mijs8pM</a><br>• 下载系统包后，将软件更新文件传输至Kindle设备：<br>a.    打开Kindle，并使用USB连接线将其连接至电脑。<br>b.    将新的更新文件从电脑拖入Kindle驱动器中。<br>注意： 不要将更新文件拖入Kindle驱动器中的任何文件夹中。<br>•开始软件更新：<br>a.    在【主页】中，点击【菜单】图标，然后点击【设置】。<br>b.    再次点击【菜单】图标，然后点击【更新您的Kindle】。 如果已安装最新更新，或者更新文件传输失败，此选项将显示为灰色。<br>c.    点击【确定】执行更新。 此时您将看到【您的Kindle正在更新】。<br>更新完成后，Kindle将立即自动重启。<br>我: 我从官网下载着。<br>高云涛: 先更新后，在试试<br>最好也换网<br>我: 重启路由器也不行<br>高云涛: 换手机流量热点<br>我: KPW3支持的信道是多少<br>高云涛: 1.6.11<br>我: 不在这三个信道上的话，只能一遍遍的重启路由器？<br>高云涛: 您现在先不用考虑那些<br>您现在打开手机流量热点<br>先连接试试<br>我: 注册上了<br>高云涛: 请问您还有其他疑问吗？<br>我: 有，不在这三个信道上的话，只能一遍遍的重启路由器？<br>高云涛: 可以自己设置<br>我: 不是自己的路由器不能设置啊。。。<br>升级固件也不能吗？是固件的问题还是硬件的缺陷？<br>高云涛: 这个问题，建议您和公司协商一下<br>可以连接热点，设备是没有问题的<br>是wifi的设备问题<br>不是通过设备更新，就能单纯解决<br>不是同一个问题<br>我: 不是吧，手机都没问题。<br>高云涛: 之前已经告知您了，kindle对wifi信道有要求<br>不是手机可以连接的，kindle就一定可以连接<br>我: 这个没有在说明书上有啊<br>高云涛: 没有<br>这个是您公司的网问题，不是您设备的问题<br>重启路由器，就是简单的拔下电源，然后10秒后充电<br>高云涛: 没有<br>这个是您公司的网问题，不是您设备的问题<br>重启路由器，就是简单的拔下电源，然后10秒后充电<br>请问您还有其他疑问吗？<br>我: 没解决问题</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上午京东买了958的KPW3，结果WIFI一直连不上。于是百度解决办法，也不行。问在线客服，并没有本质上解决问题，而且技术支持一点也不懂技术。下面是对话记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我: 怎么看是paperwhite是第几代，连
    
    </summary>
    
      <category term="所思所想" scheme="http://127.0.0.1:43110/categories/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
    
      <category term="吐槽" scheme="http://127.0.0.1:43110/tags/%E5%90%90%E6%A7%BD/"/>
    
      <category term="kindle" scheme="http://127.0.0.1:43110/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>安卓开发相关框架文章收集（长期更新）</title>
    <link href="http://127.0.0.1:43110/android-collections/"/>
    <id>http://127.0.0.1:43110/android-collections/</id>
    <published>2017-04-03T09:30:55.000Z</published>
    <updated>2017-03-24T11:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在做项目初期，如果知道有哪些框架/工具可用，对项目的开发会有很大的帮助。这篇帖子收集项目开发用过的，或者有类似需求不知道有对应工具，后来发现这些工具有相见恨晚感觉的。作为一个类似于备忘录的帖子，根据个人判断在需要的时候进行增删改查。介绍时候尽量用一两个关键词。收集的文章可能会因各种原因失效，请以标题自行在搜索引擎搜索。帖子目的不是做到大而全且更新频繁。如果读者有这样的需求，良心推荐<a href="http://gank.io" target="_blank" rel="external">干货集中营</a>,每日分享 <strong>妹子图</strong> 和 <strong> 技术干货</strong>，还有供大家中午休息的休闲视频</p>
</blockquote>
<p>最近更新于 2017-03-24 <a href="http://www.suqishuo.cn/android-collections/" target="_blank" rel="external">原文才持续更新哦</a></p>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="DiffUtil"><a href="#DiffUtil" class="headerlink" title="DiffUtil"></a>DiffUtil</h2><blockquote>
<p>DiffUtil是一个查找集合变化的工具类，是搭配RecyclerView一起使用的。DiffUtil的作用，就是找出集合中每一个Item发生的变化，然后对每个变化给予对应的刷新。<br><a href="http://www.cnblogs.com/Fndroid/p/5789470.html" target="_blank" rel="external">Android开发学习之路-DiffUtil使用教程</a></p>
</blockquote>
<h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><blockquote>
<p>简单，美观，功能强大的安卓打印工具。<br><a href="https://github.com/orhanobut/logger" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h2 id="moco模拟服务器返回数据"><a href="#moco模拟服务器返回数据" class="headerlink" title="moco模拟服务器返回数据"></a>moco模拟服务器返回数据</h2><blockquote>
<p>灵活配置参数，请求方法，URL，支持挂载文件，自带独立微型服务器，可以用json，java等语言配置。<br><a href="http://www.suqishuo.cn/how-to-build-api-mock-service/" target="_blank" rel="external">介绍文章</a><br><a href="https://github.com/dreamhead/moco/" target="_blank" rel="external">官网</a></p>
</blockquote>
<h1 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h1><h2 id="AS插件"><a href="#AS插件" class="headerlink" title="AS插件"></a>AS插件</h2><blockquote>
<p>ButterKnife Zelezny：ButterKnife 生成器<br>SelectorChapek：selector 自动生成XML<br>GsonFormat：json字符串生成相应的实体类<br> <a href="http://stormzhang.com/android/2015/05/26/android-tools/" target="_blank" rel="external">介绍文章</a></p>
</blockquote>
<h2 id="bufferKnife"><a href="#bufferKnife" class="headerlink" title="bufferKnife"></a>bufferKnife</h2><blockquote>
<p>JakeWharton大神出品。View,资源，事件注解方式初始化。<br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">官网</a></p>
</blockquote>
<h1 id="网络框架"><a href="#网络框架" class="headerlink" title="网络框架"></a>网络框架</h1><h2 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h2><blockquote>
<p>2013年Google I/O大会上推出的一个新的网络通信框架，简化Http通信，提供异步回调。<br>个人更推荐使用retrofit`</p>
</blockquote>
<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><blockquote>
<p>Retrofit与okhttp共同出自于Square公司,retrofit就是对okhttp做了一层封装。把网络请求都交给给了Okhttp.配置简单灵活，接口返回对象，支持rxJava无缝对接<br><a href="https://github.com/square/retrofit" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h2 id="Glide-图片加载"><a href="#Glide-图片加载" class="headerlink" title="Glide 图片加载"></a>Glide 图片加载</h2><blockquote>
<p>这个库被广泛的运用在google的开源项目中，包括2014年google I/O大会上发布的官方app.Glide和Picasso有90%的相似度</p>
</blockquote>
<h2 id="Picasso图片加载"><a href="#Picasso图片加载" class="headerlink" title="Picasso图片加载"></a><del>Picasso图片加载</del></h2><blockquote>
<p>推荐用Glide代替。查看对比文章 <a href="http://www.cnblogs.com/sihaixuan/p/4853233.html" target="_blank" rel="external">Picasso VS Glide</a></p>
</blockquote>
<h1 id="数据库优化"><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1><h2 id="GreenDAO"><a href="#GreenDAO" class="headerlink" title="GreenDAO"></a>GreenDAO</h2><blockquote>
<p>greenDao是一个将对象映射到SQLite数据库中的轻量且快速的ORM解决方案，跟EvenBus师出同门。<br><a href="http://www.suqishuo.cn/greendao-project-practice.md" target="_blank" rel="external">介绍文章1</a><br><a href="http://www.suqishuo.cn/greendao-project-practice-ToOne-ToMany.md" target="_blank" rel="external">介绍文章2</a><br><a href="http://greenrobot.org/greendao/" target="_blank" rel="external">官网</a></p>
</blockquote>
<h2 id="sqlbrite"><a href="#sqlbrite" class="headerlink" title="sqlbrite"></a>sqlbrite</h2><blockquote>
<p>square出品。一个轻量级SQLiteOpenHelper包装类，引入reactive 流式语法,完美解决数据库和UI的同步更新！<br> <a href="https://github.com/square/sqlbrite" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="Hugo-打印方法参数执行时间"><a href="#Hugo-打印方法参数执行时间" class="headerlink" title="Hugo 打印方法参数执行时间"></a>Hugo 打印方法参数执行时间</h2><blockquote>
<p>JakeWharton大神出品。只要一行<code>@DebugLog</code>注解打印方法的传参和返回值，甚至方法的执行时间,只在debug版本打印，对release版本无任何影响。<br><a href="https://github.com/JakeWharton/hugo.git" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h2 id="Scalpel"><a href="#Scalpel" class="headerlink" title="Scalpel"></a>Scalpel</h2><blockquote>
<p>JakeWharton大神出品。查看界面层级，3D的效果。方便优化界面布局。<br><a href="https://github.com/JakeWharton/scalpel.git" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h2 id="leakcanary"><a href="#leakcanary" class="headerlink" title="leakcanary"></a>leakcanary</h2><blockquote>
<p>square出品。内存泄漏检测工具<br> <a href="https://github.com/square/leakcanary" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<h1 id="rxJava-rxAndroid"><a href="#rxJava-rxAndroid" class="headerlink" title="rxJava/rxAndroid"></a>rxJava/rxAndroid</h1><h2 id="rxJava-rxAndroid-精品文章"><a href="#rxJava-rxAndroid-精品文章" class="headerlink" title="rxJava/rxAndroid 精品文章"></a>rxJava/rxAndroid 精品文章</h2><p> <a href="http://rxjava.yuxingxin.com/" target="_blank" rel="external">RxJava Essentials 中文翻译版</a><br> <a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给 Android 开发者的 RxJava 详解</a><br> <a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出RxJava（一：基础篇）</a><br> <a href="http://www.cnblogs.com/zhaoyanjun/p/5624395.html" target="_blank" rel="external">RxJava 和 RxAndroid 五（线程调度</a></p>
<h2 id="rxJava-示例代码"><a href="#rxJava-示例代码" class="headerlink" title="rxJava 示例代码"></a>rxJava 示例代码</h2><p> <a href="https://github.com/rengwuxian/RxJavaSamples" target="_blank" rel="external">rxJava 示例代码集</a></p>
<h2 id="rxJava框架-rxBinding"><a href="#rxJava框架-rxBinding" class="headerlink" title="rxJava框架 rxBinding"></a>rxJava框架 rxBinding</h2><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="精品文章"><a href="#精品文章" class="headerlink" title="精品文章"></a>精品文章</h2><p><a href="https://theseyears.gitbooks.io/android-architecture-journey/content/rxbus.html" target="_blank" rel="external">Android架构探索</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在做项目初期，如果知道有哪些框架/工具可用，对项目的开发会有很大的帮助。这篇帖子收集项目开发用过的，或者有类似需求不知道有对应工具，后来发现这些工具有相见恨晚感觉的。作为一个类似于备忘录的帖子，根据个人判断在需要的时候进行增删改查。介绍时候尽量用一
    
    </summary>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
    
      <category term="Android" scheme="http://127.0.0.1:43110/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>GitHub上star超过2k的安卓MVP架构指南</title>
    <link href="http://127.0.0.1:43110/android-architecture-guideline-for-mvp/"/>
    <id>http://127.0.0.1:43110/android-architecture-guideline-for-mvp/</id>
    <published>2017-03-28T11:06:55.000Z</published>
    <updated>2017-03-29T01:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近日在搜MVP模式作为安卓项目架构时候，发现GitHub上一篇介绍MVP架构的文章。一看star已经超过2K了。通读全文发现作者用实际项目将MVP架构要怎么分职责讲得十分通俗易懂。为了方便大家查阅，把原文翻译了一下。作者还有一篇文章讲安卓项目和代码风格指南的。欢迎查看<a href="http://www.suqishuo.cn/android-project-and-code-guidelines/" target="_blank" rel="external">相关翻译</a>。</p>
</blockquote>
<h1 id="架构指南"><a href="#架构指南" class="headerlink" title="架构指南"></a>架构指南</h1><p>我们的安卓APP架构基于 <a href="https://en.wikipedia.org/wiki/Model–view–presenter" target="_blank" rel="external">MVP</a> (Model View Presenter) 模式。</p>
<ul>
<li><p><strong>View (UI 层)</strong>:这是 Activities, Fragments 和其他标准安卓控件所在层。它的职责是呈现从Presenter收到的数据给用户。它也处理用户的交互和输入（点击监听等）以及在需要时触发Presenter中对应的动作。</p>
</li>
<li><p><strong>Presenter</strong>: Presenter 订阅由 <code>DataManager</code> 提供的 RxJava Observables。他们负责处理订阅的生命周期，分析/修改<code>DataManager</code>返回的数据，调用View中的合适方法以便展示数据。</p>
</li>
<li><p><strong>Model (Data 层)</strong>: 它们的职责是取回，保存，缓存，以及通知数据。它可以与本地数据库以及其他的数据仓库通信，使用restful API或者其他第三方SDK等方式。它分为两部分：一组帮助工具类以及一个  <code>DataManager</code> 。工具类的数量因项目而异，每一个工具类有特定的功能，比如与API通信或在 <code>SharedPreferences</code> 中保存数据.  <code>DataManager</code>  把不同工具类的输出使用rx操作符进行组合变换，所以它可以： 1) 提供有意义的数据给 Presenter，2) 把经常一起出现的动作组合在一起。这一层也包含实际的实体类，定义数据结构是怎样的。</p>
</li>
</ul>
<p><img src="/images/mvp_architecture_diagram.png" alt=""></p>
<p>从右到左看示意图:</p>
<ul>
<li><p><strong>Helpers (Model)</strong>: 一组类的集合，每个类有特定的职责，他们的功能可以从与API或数据库通信，到实现一些特定的业务逻辑等。每个项目会有不同的工具类，但最常见的几个是：</p>
<ul>
<li><strong>DatabaseHelper</strong>: 它处理插入，更新，以及获取来自本地SQLite数据库的数据。它的方法返回 Rx Observables ，发射(译者注：Rx术语)简单java对象 (models)。</li>
<li><strong>PreferencesHelper</strong>: 它保存以及获取来自 <code>SharedPreferences</code> 的数据，他可以返回 Observables 或者直接返回简单java对象。</li>
<li><strong>Retrofit services</strong> : <a href="http://square.github.io/retrofit" target="_blank" rel="external">Retrofit</a> 接口 使用Restful API 通信，每个不同的API拥有自己的 Retrofit 服务. 它们返回 Rx Observables.</li>
</ul>
</li>
<li><p><strong>Data Manager (Model)</strong>: 这是MVP架构的关键部分。它持有每一个工具类的引用，使用这些工具类满足来自Presenter的请求。 它的方法广泛的使用 Rx 操作符来组合，转换或过滤来自工具类的输出，以便生成Presenter想要的输出。它返回发射数据模型（data models）的 observables。</p>
</li>
<li><p><strong>Presenters</strong>: 订阅由  <code>DataManager</code>  提供的observables，处理这些数据以便调用View中合适的方法。</p>
</li>
<li><p><strong>Activities, Fragments, ViewGroups (View)</strong>: 实现了一组Presenter可以调用的方法的标准安卓组件。它们也处理用户的交互如点击等，然后调用Presenter中合适的方法来采取相应的行动。这些控件也实现框架相关的任务，如管理安卓生命周期，渲染视图（Views）等。</p>
</li>
<li><p><strong>Event Bus</strong>: 它使得View控件得到发生在Model的特定事件通知。通常  <code>DataManager</code> 发出事件，然后这些事件可以被Activities 和 Fragments 订阅。  event bus  <strong>仅仅</strong> 用于非常特别的动作——这些事件不是仅与一个界面相关的，要通知多方，如：用户已经退出登录。<br><a href="https://github.com/ribot/android-guidelines/blob/master/architecture_guidelines/android_architecture.md" target="_blank" rel="external">原文链接</a><br><a href="http://www.suqishuo.cn/android-architecture-guideline-for-mvp/" target="_blank" rel="external">译文链接</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近日在搜MVP模式作为安卓项目架构时候，发现GitHub上一篇介绍MVP架构的文章。一看star已经超过2K了。通读全文发现作者用实际项目将MVP架构要怎么分职责讲得十分通俗易懂。为了方便大家查阅，把原文翻译了一下。作者还有一篇文章讲安卓项目和代码
    
    </summary>
    
      <category term="架构" scheme="http://127.0.0.1:43110/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="Android" scheme="http://127.0.0.1:43110/tags/Android/"/>
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="架构" scheme="http://127.0.0.1:43110/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="MVP" scheme="http://127.0.0.1:43110/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>GitHub上star超过2k的安卓项目和代码风格指南（绝对干货）</title>
    <link href="http://127.0.0.1:43110/android-project-and-code-guidelines/"/>
    <id>http://127.0.0.1:43110/android-project-and-code-guidelines/</id>
    <published>2017-03-28T11:06:55.000Z</published>
    <updated>2017-03-29T01:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近日在搜MVP模式作为安卓项目架构时候，发现GitHub上一篇介绍MVP架构的文章。一看star已经超过2K了。作者同项目的这篇文章讲安卓项目和代码风格指南，也非常有参考价值。为了方便大家查阅，把原文翻译了一下。点击查看作者介绍安卓MVP架构指南的<a href="http://www.suqishuo.cn/android-architecture-guideline-for-mvp/" target="_blank" rel="external">翻译文章</a>。</p>
</blockquote>
<h1 id="1-项目指南"><a href="#1-项目指南" class="headerlink" title="1. 项目指南"></a>1. 项目指南</h1><h2 id="1-1-项目结构"><a href="#1-1-项目结构" class="headerlink" title="1.1 项目结构"></a>1.1 项目结构</h2><p>新项目应该遵循安卓Gradle项目结构，定义在这里 ：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Project-Structure" target="_blank" rel="external">安卓Gradle插件用户指南</a>。项目<a href="https://github.com/ribot/android-boilerplate" target="_blank" rel="external">ribot Boilerplate</a> 是一个很好的参考。</p>
<h2 id="1-2-文件命名"><a href="#1-2-文件命名" class="headerlink" title="1.2 文件命名"></a>1.2 文件命名</h2><h3 id="1-2-1-类文件"><a href="#1-2-1-类文件" class="headerlink" title="1.2.1 类文件"></a>1.2.1 类文件</h3><p>类名书写方式是 <a href="http://en.wikipedia.org/wiki/CamelCase" target="_blank" rel="external">大写的驼峰命名</a>.</p>
<p>继承于安卓组件的类，名称应该以继承的组件命名，比如：<code>SignInActivity</code>, <code>SignInFragment</code>, <code>ImageUploaderService</code>, <code>ChangePasswordDialog</code>.</p>
<h3 id="1-2-2-资源文件"><a href="#1-2-2-资源文件" class="headerlink" title="1.2.2 资源文件"></a>1.2.2 资源文件</h3><p>资源文件书写方式：小写_下划线。如：ic_launcher.png</p>
<h4 id="1-2-2-1-Drawable-文件"><a href="#1-2-2-1-Drawable-文件" class="headerlink" title="1.2.2.1 Drawable 文件"></a>1.2.2.1 Drawable 文件</h4><p>drawable类型资源命名：</p>
<table>
<thead>
<tr>
<th>资源类别</th>
<th>前缀</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Action bar</td>
<td><code>ab_</code></td>
<td><code>ab_stacked.9.png</code></td>
</tr>
<tr>
<td>Button</td>
<td><code>btn_</code></td>
<td><code>btn_send_pressed.9.png</code></td>
</tr>
<tr>
<td>Dialog</td>
<td><code>dialog_</code></td>
<td><code>dialog_top.9.png</code></td>
</tr>
<tr>
<td>Divider</td>
<td><code>divider_</code></td>
<td><code>divider_horizontal.9.png</code></td>
</tr>
<tr>
<td>Icon</td>
<td><code>ic_</code></td>
<td><code>ic_star.png</code></td>
</tr>
<tr>
<td>Menu</td>
<td><code>menu_</code></td>
<td><code>menu_submenu_bg.9.png</code></td>
</tr>
<tr>
<td>Notification</td>
<td><code>notification_</code></td>
<td><code>notification_bg.9.png</code></td>
</tr>
<tr>
<td>Tabs</td>
<td><code>tab_</code></td>
<td><code>tab_pressed.9.png</code></td>
</tr>
</tbody>
</table>
<p>图标（icons）命名方式 (取自 <a href="http://developer.android.com/design/style/iconography.html" target="_blank" rel="external">安卓图标官方指南</a>):</p>
<table>
<thead>
<tr>
<th>资源类别</th>
<th>前缀</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Icons</td>
<td><code>ic_</code></td>
<td><code>ic_star.png</code></td>
</tr>
<tr>
<td>Launcher icons</td>
<td><code>ic_launcher</code></td>
<td><code>ic_launcher_calendar.png</code></td>
</tr>
<tr>
<td>Menu icons and Action Bar icons</td>
<td><code>ic_menu</code></td>
<td><code>ic_menu_archive.png</code></td>
</tr>
<tr>
<td>Status bar icons</td>
<td><code>ic_stat_notify</code></td>
<td><code>ic_stat_notify_msg.png</code></td>
</tr>
<tr>
<td>Tab icons</td>
<td><code>ic_tab</code></td>
<td><code>ic_tab_recent.png</code></td>
</tr>
<tr>
<td>Dialog icons</td>
<td><code>ic_dialog</code></td>
<td><code>ic_dialog_info.png</code></td>
</tr>
</tbody>
</table>
<p>selector 状态命名方式:</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>后缀</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>Normal (正常)</td>
<td><code>_normal</code></td>
<td><code>btn_order_normal.9.png</code></td>
</tr>
<tr>
<td>Pressed（按下）</td>
<td><code>_pressed</code></td>
<td><code>btn_order_pressed.9.png</code></td>
</tr>
<tr>
<td>Focused （获得焦点）</td>
<td><code>_focused</code></td>
<td><code>btn_order_focused.9.png</code></td>
</tr>
<tr>
<td>Disabled    （不可用）</td>
<td><code>_disabled</code></td>
<td><code>btn_order_disabled.9.png</code></td>
</tr>
<tr>
<td>Selected    （选中）</td>
<td><code>_selected</code></td>
<td><code>btn_order_selected.9.png</code></td>
</tr>
</tbody>
</table>
<h4 id="1-2-2-2-布局文件"><a href="#1-2-2-2-布局文件" class="headerlink" title="1.2.2.2 布局文件"></a>1.2.2.2 布局文件</h4><p>布局文件应该跟对应的安卓组件名称匹配，但是把最顶级的组件名称放在前面。比如，当我们创建一个用于 <code>SignInActivity</code>的布局，那布局文件名称应该是<code>activity_sign_in.xml</code>.</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>类名</th>
<th>布局文件名</th>
</tr>
</thead>
<tbody>
<tr>
<td>Activity</td>
<td><code>UserProfileActivity</code></td>
<td><code>activity_user_profile.xml</code></td>
</tr>
<tr>
<td>Fragment</td>
<td><code>SignUpFragment</code></td>
<td><code>fragment_sign_up.xml</code></td>
</tr>
<tr>
<td>Dialog</td>
<td><code>ChangePasswordDialog</code></td>
<td><code>dialog_change_password.xml</code></td>
</tr>
<tr>
<td>AdapterView item</td>
<td>—</td>
<td><code>item_person.xml</code></td>
</tr>
<tr>
<td>Partial layout</td>
<td>—</td>
<td><code>partial_stats_bar.xml</code></td>
</tr>
</tbody>
</table>
<p>一个稍微不同的地方是当我们创建用于<code>Adapter</code>渲染的布局,如填充一个 <code>ListView</code>， 在这种情况下，布局文件命名应该是用 <code>item_</code>开始。<br>注意有些地方这些规则没法应用，如，当我们创建一个布局文件，用于渲染另一个布局的一部分，这样的情况下，我们应该使用<code>partial_</code>前缀。</p>
<h4 id="1-2-2-3-菜单文件"><a href="#1-2-2-3-菜单文件" class="headerlink" title="1.2.2.3 菜单文件"></a>1.2.2.3 菜单文件</h4><p>跟布局文件相似，按钮文件应该跟对应的组件匹配。比如：当我们定义一个菜单，用于 <code>UserActivity</code>,那么文件名应该是 <code>activity_user.xml</code></p>
<p>文件名不含有<code>menu</code>是个良好的习惯做法，因为这些文件已经位于 <code>menu</code> 目录了。</p>
<h4 id="1-2-2-4-取值文件-Values-files"><a href="#1-2-2-4-取值文件-Values-files" class="headerlink" title="1.2.2.4 取值文件(Values files)"></a>1.2.2.4 取值文件(Values files)</h4><p>在values文件夹的资源文件应该是复数形式（plural），比如，<code>strings.xml</code>, <code>styles.xml</code>, <code>colors.xml</code>, <code>dimens.xml</code>, <code>attrs.xml</code></p>
<h1 id="2-代码指南"><a href="#2-代码指南" class="headerlink" title="2 代码指南"></a>2 代码指南</h1><h2 id="2-1-Java语言规范"><a href="#2-1-Java语言规范" class="headerlink" title="2.1 Java语言规范"></a>2.1 Java语言规范</h2><h3 id="2-1-1-不要忽略了异常"><a href="#2-1-1-不要忽略了异常" class="headerlink" title="2.1.1 不要忽略了异常"></a>2.1.1 不要忽略了异常</h3><p>你万不该这样做:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setServerPort</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        serverPort = Integer.parseInt(value);</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然你可能觉得你的代码永远不会抛出这个异常或者这异常不重要，不需要处理它，像上面那样忽略异常会在你的代码中留下雷区，将来其他人会踩到。你必须在你的代码中以某种原则的方式处理每个异常。具体的处理视情况而定。._ - (<a href="https://source.android.com/source/code-style.html" target="_blank" rel="external">安卓官方代码指南</a>)</p>
<p>指南中关于不要忽略异常的说明在 <a href="https://source.android.com/source/code-style.html#dont-ignore-exceptions" target="_blank" rel="external">这里</a>.</p>
<h3 id="2-1-2-不要捕获一般的异常。"><a href="#2-1-2-不要捕获一般的异常。" class="headerlink" title="2.1.2 不要捕获一般的异常。"></a>2.1.2 不要捕获一般的异常。</h3><p>你不应该这样做:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    someComplicatedIOFunction();        <span class="comment">// 可能抛出 IOException</span></div><div class="line">    someComplicatedParsingFunction();   <span class="comment">// 可能抛出 ParsingException</span></div><div class="line">    someComplicatedSecurityFunction();  <span class="comment">// 可能抛出 SecurityException</span></div><div class="line">    <span class="comment">//啊哈，统一处理掉</span></div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;                 <span class="comment">//我将捕获所有的异常</span></div><div class="line">    handleError();                      <span class="comment">// 使用一个通用的处理手段!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看不这样做的原因以及要怎么做： <a href="https://source.android.com/source/code-style.html#dont-catch-generic-exception" target="_blank" rel="external">猛戳安卓官方指南之不要捕获一般的异常</a></p>
<h3 id="2-1-3-不要用finalizer"><a href="#2-1-3-不要用finalizer" class="headerlink" title="2.1.3 不要用finalizer"></a>2.1.3 不要用finalizer</h3><p>我们不使用finalizer。它什么时候被调用是没有保证的，甚至它不被调用。大部分情况下，你可以使用良好的异常处理来满足需要在finalizer中做的工作。如果你确实需要它，定义一个 <code>close()</code> 方法（或类似的）然后在文档中明确的指出什么时候这个方法需要被调用。可以查看 <code>InputStream</code> 做为例子.这种情况下，在finalizer中打印一个简短的log信息是恰当的但不是必须的，因为我们不希望log泛滥 ._ - (<a href="https://source.android.com/source/code-style.html#dont-use-finalizers" target="_blank" rel="external">猛戳安卓官方指南之不要用finalizer</a>)</p>
<h3 id="2-1-4-完全的import语句"><a href="#2-1-4-完全的import语句" class="headerlink" title="2.1.4 完全的import语句"></a>2.1.4 完全的import语句</h3><p>反例: <code>import foo.*;</code></p>
<p>正解: <code>import foo.Bar;</code></p>
<p>点击 <a href="https://source.android.com/source/code-style.html#fully-qualify-imports" target="_blank" rel="external">这里</a> 查看更多说明</p>
<h2 id="2-2-Java风格规范"><a href="#2-2-Java风格规范" class="headerlink" title="2.2 Java风格规范"></a>2.2 Java风格规范</h2><h3 id="2-2-1-全局变量定义及命名"><a href="#2-2-1-全局变量定义及命名" class="headerlink" title="2.2.1 全局变量定义及命名"></a>2.2.1 全局变量定义及命名</h3><p>全局变量应该定义在<strong>文件的头部</strong>,遵循下面的命名规则。</p>
<ul>
<li>私有的非静态全局变量以<code>m</code>开头</li>
<li>私有的静态全局变量以<code>s</code>开头</li>
<li>其他的全局变量以小写单词开头</li>
<li>常量使用全部大写，单词间用下划线间隔（ALL_CAPS_WITH_UNDERSCORES）.<blockquote>
<p>译者注：这个规则取自Android Open Source Project代码贡献规范。在程序员的圈子里对于要不要前缀这个问题已经吵翻天了。我在使用greendao的时候使用前缀的话，自动生成的getter/setter会是getMxxx/setMxxx这样难看的方法。很多人也觉得这个命名规则没有意义。<a href="http://stackoverflow.com/questions/2092098/why-do-most-fields-class-members-in-android-tutorial-start-with-m" target="_blank" rel="external">stackOverFlow</a> 还有 <a href="http://stackoverflow.com/questions/4237469/why-do-variable-names-often-start-with-the-letter-m" target="_blank" rel="external">这里</a> ，以及一本教你怎么写出整洁代码的书中如是说：<br>“我觉得如今这些前缀没有意义，尤其是在你的APP中!你的类和方法应该尽量的小，而且你应该使用代码高亮的编辑环境，使得成员变量易于分辨。再者，人们快速适应忽略了前缀或后缀来看名字的有意义部分。我们阅读代码越多，看到前后缀越少。渐渐地，前缀就变成了旧代码看不到的线索和标记。——代码整洁之道(Clean.Code).Robert.C.Martin”</p>
</blockquote>
</li>
</ul>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SOME_CONSTANT = <span class="number">42</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> publicField;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MyClass sSingleton;</div><div class="line">    <span class="keyword">int</span> mPackagePrivate;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPrivate;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mProtected;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-3把首字母缩写当做一个单词来看"><a href="#2-2-3把首字母缩写当做一个单词来看" class="headerlink" title="2.2.3把首字母缩写当做一个单词来看"></a>2.2.3把首字母缩写当做一个单词来看</h3><table>
<thead>
<tr>
<th>好的例子</th>
<th>不好的例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>XmlHttpRequest</code></td>
<td><code>XMLHTTPRequest</code></td>
</tr>
<tr>
<td><code>getCustomerId</code></td>
<td><code>getCustomerID</code></td>
</tr>
<tr>
<td><code>String url</code></td>
<td><code>String URL</code></td>
</tr>
<tr>
<td><code>long id</code></td>
<td><code>long ID</code></td>
</tr>
</tbody>
</table>
<h3 id="2-2-4-使用空格缩进"><a href="#2-2-4-使用空格缩进" class="headerlink" title="2.2.4 使用空格缩进"></a>2.2.4 使用空格缩进</h3><p>使用四个空格做代码块缩进:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</div><div class="line">    x++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>换行时使用8个空格缩进:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Instrument i =</div><div class="line">        someLongExpression(that, wouldNotFit, on, one, line);</div></pre></td></tr></table></figure>
<h3 id="2-2-5-使用标准的大括号风格"><a href="#2-2-5-使用标准的大括号风格" class="headerlink" title="2.2.5 使用标准的大括号风格"></a>2.2.5 使用标准的大括号风格</h3><p>大括号的开始跟代码同一行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (something) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (somethingElse) &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>条件语句使用大括号包住，除非条件体只有一行。<br>如果条件及只有一行条件体，而且没被换行，大括号是不必的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) body();</div></pre></td></tr></table></figure></p>
<p>这是<strong>不好的</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition)</div><div class="line">    body();  <span class="comment">// 不好的，没有大括号包围!</span></div></pre></td></tr></table></figure>
<h3 id="2-2-6-注解"><a href="#2-2-6-注解" class="headerlink" title="2.2.6 注解"></a>2.2.6 注解</h3><h4 id="2-2-6-1-注解实践规范"><a href="#2-2-6-1-注解实践规范" class="headerlink" title="2.2.6.1 注解实践规范"></a>2.2.6.1 注解实践规范</h4><p>根据安卓代码风格指南，一些Java内置的注解标准的实践规范有：</p>
<ul>
<li><p><code>@Override</code>:  无论一个方法是重载父类还是实现某个接口的都<strong>必须使用</strong>@Override 注解。比如，当你使用 @inheritdocs Javadoc 标签,然后 从一个类(不是一个接口)中导出，你也必须声明那个方法 @Overrides 父类的方法。</p>
</li>
<li><p><code>@SuppressWarnings</code>: @SuppressWarnings 注解应该仅当不可能消除一个警告的时候才使用。如果一个警告 通过这个 “不可能消除” 的测试,  @SuppressWarnings 注解必不可少, 以便保证所有的警告在代码中反映实际的问题。</p>
</li>
</ul>
<p>关于注解的更多指南可以查看<a href="http://source.android.com/source/code-style.html#use-standard-java-annotations" target="_blank" rel="external">这里</a>.</p>
<h4 id="2-2-6-2-注解风格"><a href="#2-2-6-2-注解风格" class="headerlink" title="2.2.6.2 注解风格"></a>2.2.6.2 注解风格</h4><p><strong>类，方法及构造器</strong></p>
<p>当注解被应用到一个类，方法或者构造函数时候，注解在代码注释之后，<strong>一行一个</strong>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 这是这个类的注解 */</span></div><div class="line"><span class="meta">@AnnotationA</span></div><div class="line"><span class="meta">@AnnotationB</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnotatedClass</span> </span>&#123; &#125;</div></pre></td></tr></table></figure></p>
<p><strong>全局变量</strong></p>
<p>全局变量的注解应该在<strong>同一行</strong>列出。除非这一行超过了最大字数了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span> <span class="meta">@Mock</span> DataManager mDataManager;</div></pre></td></tr></table></figure>
<h3 id="2-2-7-限制变量范围"><a href="#2-2-7-限制变量范围" class="headerlink" title="2.2.7 限制变量范围"></a>2.2.7 限制变量范围</h3><p>变量的使用范围应该限制到最小(Effective Java 条目 29)。这样做，你可以为你的代码增加可读性和可维护性，减少可能的错误。每个变量应该在最内层的使用到的它代码块中定义</p>
<p>局部变量应该在第一次用到他们的时候定义。几乎每个局部变量都应该初始化。如果你没有足够的信息去初始化一个变量，你应该延迟声明这个变量，直到你有足够的初始化信息。._ - (<a href="https://source.android.com/source/code-style.html#limit-variable-scope" target="_blank" rel="external">安卓代码风格指南</a>)</p>
<h3 id="2-2-8-排序import语句"><a href="#2-2-8-排序import语句" class="headerlink" title="2.2.8 排序import语句"></a>2.2.8 排序import语句</h3><p>如果你使用IDE,如Android Studio，你不必担心这些规则，这些IDE已经遵循这些规则。如果你不用IDE，往下看这些规则:</p>
<ol>
<li>import 安卓框架的</li>
<li>Import 来自第三方的(com, junit, net, org)</li>
<li>java 以及  javax</li>
<li>同一个项目的 imports</li>
</ol>
<p>为了保持跟IDE的设置一致，这些imports应该是这样的：</p>
<ul>
<li>首字母分组排序，大写的字母在小写的字母前面（如Z在a前面）。</li>
<li>每个主要分组 (android, com, junit, net, org, java, javax)间应该有一行空行。</li>
</ul>
<p>更多信息查看<a href="https://source.android.com/source/code-style.html#limit-variable-scope" target="_blank" rel="external">这里</a></p>
<h3 id="2-2-9-日志-Loging-指南"><a href="#2-2-9-日志-Loging-指南" class="headerlink" title="2.2.9 日志(Loging)指南"></a>2.2.9 日志(Loging)指南</h3><p>使用 <code>Log</code>  类提供的日志方法来打印错误信息或对开发者分辨问题有用的其他信息：</p>
<ul>
<li><code>Log.v(String tag, String msg)</code> (verbose)</li>
<li><code>Log.d(String tag, String msg)</code> (debug)</li>
<li><code>Log.i(String tag, String msg)</code> (information)</li>
<li><code>Log.w(String tag, String msg)</code> (warning)</li>
<li><code>Log.e(String tag, String msg)</code> (error)</li>
</ul>
<p>通常来说，我们使用一个类的名称作为一个TAG，在文件的开头定义成一个 <code>static final</code> 变量，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MyClass.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(TAG, <span class="string">"My error message"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>VERBOSE 和 DEBUG 日志 <strong>必须</strong>在release版本中禁用。同时也建议禁用INFORMATION, WARNING 和 ERROR 日志，但是你可能觉得它们在release版本中定位问题很有用而保持启用。如果你决定让他们保持启用，你要保证这些日志信息不会泄漏email地址，用户id之类的隐私信息。<br>仅限debug版本显示Log的配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) Log.d(TAG, <span class="string">"The value of x is "</span> + x);</div></pre></td></tr></table></figure></p>
<h3 id="2-2-10-类成员排序"><a href="#2-2-10-类成员排序" class="headerlink" title="2.2.10 类成员排序"></a>2.2.10 类成员排序</h3><p>这虽然没有简单正确的方案，但是使用一个 <strong>逻辑的</strong> 及 <strong> 一致的 </strong> 顺序可以提高代码的可读性和可学习性。下面是推荐的顺序：</p>
<ol>
<li>常量</li>
<li>全局变量</li>
<li>构造函数</li>
<li>重载的函数和回调 (public 或 private)</li>
<li>Public 方法</li>
<li>Private 方法</li>
<li>内部类或内部接口</li>
</ol>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> String mTitle;</div><div class="line">    <span class="keyword">private</span> TextView mTextViewTitle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</div><div class="line">    	mTitle = title;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpView</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AnInnerClass</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你的类继承一个<strong>安卓组件</strong>如Activity或Fragment，对重载的方法进行排序以便<strong>跟组件的生命周期匹配</strong>是一个最佳实践。比如，当你的Activity实现<code>onCreate()</code>, <code>onDestroy()</code>, <code>onPause()</code> 和 <code>onResume()</code>，正确的顺序是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//顺序跟Activity的生命周期匹配</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-11-方法的参数顺序"><a href="#2-2-11-方法的参数顺序" class="headerlink" title="2.2.11 方法的参数顺序"></a>2.2.11 方法的参数顺序</h3><p>在安卓编码时候，定义一个方法拥有一个<code>Context</code>参数是非常常见的，如果你写一个这样的方法，<strong>Context</strong>应该是第一个参数。</p>
<p>相反的例子是<strong>回调</strong>接口，它应该是<strong>最后</strong>一个参数<br>例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Context 总是在第一个位</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">loadUser</span><span class="params">(Context context, <span class="keyword">int</span> userId)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// 回调总是在最后一位</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUserAsync</span><span class="params">(Context context, <span class="keyword">int</span> userId, UserCallback callback)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="2-2-13-字符串常量，命名和取值"><a href="#2-2-13-字符串常量，命名和取值" class="headerlink" title="2.2.13 字符串常量，命名和取值"></a>2.2.13 字符串常量，命名和取值</h3><p>很多安卓SDK的元素如<code>SharedPreferences</code>, <code>Bundle</code>, 或 <code>Intent</code>使用键值对实现，所以即使是一个小应用，使用一堆字符串常量也是很常见的。</p>
<p>当使用这些组件，你<strong>必须</strong>定义这些键是 <code>static final</code> 变量，并且它们应该像下面这样使用前缀</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>变量名前缀</th>
</tr>
</thead>
<tbody>
<tr>
<td>SharedPreferences</td>
<td><code>PREF_</code></td>
</tr>
<tr>
<td>Bundle</td>
<td><code>BUNDLE_</code></td>
</tr>
<tr>
<td>Fragment Arguments</td>
<td><code>ARGUMENT_</code></td>
</tr>
<tr>
<td>Intent Extra</td>
<td><code>EXTRA_</code></td>
</tr>
<tr>
<td>Intent Action</td>
<td><code>ACTION_</code></td>
</tr>
</tbody>
</table>
<p>注意Fragment的参数——<code>Fragment.getArguments()</code>也是一个Bundle。然而，因为这是Bundle非常常见的用法，我们为它定义一个不同的前缀。</p>
<p>例子:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意这些变量的值应该和名称一致来避免问题</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PREF_EMAIL = <span class="string">"PREF_EMAIL"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String BUNDLE_AGE = <span class="string">"BUNDLE_AGE"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ARGUMENT_USER_ID = <span class="string">"ARGUMENT_USER_ID"</span>;</div><div class="line"></div><div class="line"><span class="comment">//Intent相关的使用完全包名作为值</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_SURNAME = <span class="string">"com.myapp.extras.EXTRA_SURNAME"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> String ACTION_OPEN_USER = <span class="string">"com.myapp.action.ACTION_OPEN_USER"</span>;</div></pre></td></tr></table></figure>
<h3 id="2-2-14-Fragment和Activity的参数"><a href="#2-2-14-Fragment和Activity的参数" class="headerlink" title="2.2.14  Fragment和Activity的参数"></a>2.2.14  Fragment和Activity的参数</h3><p>当数据通过<code>Intent</code> 或<code>Bundle</code>传递到一个<code>Activity</code>或 <code>Fragment</code>，这些不同值的键<strong>必须</strong> 遵循上面描述的规则。</p>
<p>当一个 <code>Activity</code> 或 <code>Fragment</code>  想要参数，它应该提供一个<code>public static</code>方法来简化对应的<code>Intent</code> 或 <code>Fragment</code>创建<br>在Activity中这个方法通常叫 <code>getStartIntent()</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Intent <span class="title">getStartIntent</span><span class="params">(Context context, User user)</span> </span>&#123;</div><div class="line">	Intent intent = <span class="keyword">new</span> Intent(context, ThisActivity.class);</div><div class="line">	intent.putParcelableExtra(EXTRA_USER, user);</div><div class="line">	<span class="keyword">return</span> intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于Fragment它的名称是<code>newInstance()</code>，处理使用合适的参数创建Fragment。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserFragment <span class="title">newInstance</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">	UserFragment fragment = <span class="keyword">new</span> UserFragment;</div><div class="line">	Bundle args = <span class="keyword">new</span> Bundle();</div><div class="line">	args.putParcelable(ARGUMENT_USER, user);</div><div class="line">	fragment.setArguments(args)</div><div class="line">	<span class="keyword">return</span> fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意1</strong>: 这些方法应该在类的 <code>onCreate()</code>前面</p>
<p><strong>注意2</strong>: 如果我们提供上面说的方法，这些extras对应的键和参数应该是<code>private</code> 的，因为他们不需要暴露到类以外。</p>
<h3 id="2-2-15-代码行长度限制"><a href="#2-2-15-代码行长度限制" class="headerlink" title="2.2.15 代码行长度限制"></a>2.2.15 代码行长度限制</h3><p>代码行不应该超过<strong>100 个字符</strong>。如果代码行超过这个限制长度，通常有两种方式来降低长度：</p>
<ul>
<li>提取一个局部变量或方法（推荐方式）.</li>
<li>把单行换行成多行。</li>
</ul>
<p>有两种<strong>例外</strong>可以让一行超过100字符：</p>
<ul>
<li>这行不可分割，如长URL。</li>
<li><code>package</code> 和 <code>import</code> 语句.</li>
</ul>
<h4 id="2-2-15-1-换行策略"><a href="#2-2-15-1-换行策略" class="headerlink" title="2.2.15.1 换行策略"></a>2.2.15.1 换行策略</h4><p>没有精确的公式解释怎么换行，很多不同的方案是有效的。然而，这里有几个规则可以应用到常见情况。<br><strong>在操作符前断开</strong></p>
<p>当一行被操作符断开，断开处应该在操作符<strong>之前</strong>，例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> longName = anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne</div><div class="line">        + theFinalOne;</div></pre></td></tr></table></figure>
<p><strong>赋值符号（=）例外</strong></p>
<p>在操作符前断开有一个例外，那就是赋值符号  <code>=</code>，应该在赋值符号<strong>后面</strong>断开。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> longName =</div><div class="line">        anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne + theFinalOne;</div></pre></td></tr></table></figure>
<p><strong>方法链的情况</strong></p>
<p>当多个方法被链接在同一行的时候——如使用Builder时，每一个方法的调用应该在独立一行，在 <code>.</code>之前断开。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context).load(<span class="string">"http://ribot.co.uk/images/sexyjoe.jpg"</span>).into(imageView);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Picasso.with(context)</div><div class="line">        .load(<span class="string">"http://ribot.co.uk/images/sexyjoe.jpg"</span>)</div><div class="line">        .into(imageView);</div></pre></td></tr></table></figure>
<p><strong>长参数的情况</strong></p>
<p>当一个方法有很多参数或它的参数非常长，我们应该在每个逗号 <code>,</code>后面断开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loadPicture(context, <span class="string">"http://ribot.co.uk/images/sexyjoe.jpg"</span>, mImageViewProfilePicture, clickListener, <span class="string">"Title of the picture"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">loadPicture(context,</div><div class="line">        <span class="string">"http://ribot.co.uk/images/sexyjoe.jpg"</span>,</div><div class="line">        mImageViewProfilePicture,</div><div class="line">        clickListener,</div><div class="line">        <span class="string">"Title of the picture"</span>);</div></pre></td></tr></table></figure>
<h3 id="2-2-16-RxJava-链式风格"><a href="#2-2-16-RxJava-链式风格" class="headerlink" title="2.2.16 RxJava 链式风格"></a>2.2.16 RxJava 链式风格</h3><p>Rx链式操作符要求换行。每一个操作符必须在新的一行，断行应该在<code>.</code>之前</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Observable&lt;Location&gt; <span class="title">syncLocations</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mDatabaseHelper.getAllLocations()</div><div class="line">            .concatMap(<span class="keyword">new</span> Func1&lt;Location, Observable&lt;? extends Location&gt;&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                 <span class="keyword">public</span> Observable&lt;? extends Location&gt; call(Location location) &#123;</div><div class="line">                     <span class="keyword">return</span> mRetrofitService.getLocation(location.id);</div><div class="line">                 &#125;</div><div class="line">            &#125;)</div><div class="line">            .retry(<span class="keyword">new</span> Func2&lt;Integer, Throwable, Boolean&gt;() &#123;</div><div class="line">                 <span class="meta">@Override</span></div><div class="line">                 <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer numRetries, Throwable throwable)</span> </span>&#123;</div><div class="line">                     <span class="keyword">return</span> throwable <span class="keyword">instanceof</span> RetrofitError;</div><div class="line">                 &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-3-XML-风格规定"><a href="#2-3-XML-风格规定" class="headerlink" title="2.3 XML 风格规定"></a>2.3 XML 风格规定</h2><h3 id="2-3-1-使用自关闭的标签"><a href="#2-3-1-使用自关闭的标签" class="headerlink" title="2.3.1 使用自关闭的标签"></a>2.3.1 使用自关闭的标签</h3><p>当一个XML元素没有任何内容时，你<strong>必须</strong>使用自关闭标签。<br>这是好例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">	<span class="attr">android:id</span>=<span class="string">"@+id/text_view_profile"</span></div><div class="line">	<span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">	<span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<p>这是<strong>不好的</strong>例子 :</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 不要这样做! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/text_view_profile"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-3-2-资源命名"><a href="#2-3-2-资源命名" class="headerlink" title="2.3.2 资源命名"></a>2.3.2 资源命名</h3><p>资源 ID 和名称使用小写加下划线方式 <strong>lowercase_underscore</strong>.</p>
<h4 id="2-3-2-1-ID-命名"><a href="#2-3-2-1-ID-命名" class="headerlink" title="2.3.2.1 ID 命名"></a>2.3.2.1 ID 命名</h4><p>ID应该使用小写加下划线命名，加上元素名称为前缀，如：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>前缀</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TextView</code></td>
<td><code>text_</code></td>
</tr>
<tr>
<td><code>ImageView</code></td>
<td><code>image_</code></td>
</tr>
<tr>
<td><code>Button</code></td>
<td><code>button_</code></td>
</tr>
<tr>
<td><code>Menu</code></td>
<td><code>menu_</code></td>
</tr>
</tbody>
</table>
<p>Image view 例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/image_profile"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<p>Menu 例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">menu</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">item</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_done"</span></div><div class="line">        <span class="attr">android:title</span>=<span class="string">"Done"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-2-字符串"><a href="#2-3-2-2-字符串" class="headerlink" title="2.3.2.2 字符串"></a>2.3.2.2 字符串</h4><p>字符串名称以它们所属的部分为前缀命名，比如<code>registration_email_hint</code> 或 <code>registration_name_hint</code>。如果一个字符串<strong>不属于</strong>任何部分，那么你应该遵循下面的规则：</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>error_</code></td>
<td>An error message</td>
</tr>
<tr>
<td><code>msg_</code></td>
<td>A regular information message</td>
</tr>
<tr>
<td><code>title_</code></td>
<td>A title, i.e. a dialog title</td>
</tr>
<tr>
<td><code>action_</code></td>
<td>An action such as “Save” or “Create”</td>
</tr>
</tbody>
</table>
<h4 id="2-3-2-3-Styles-和-Themes"><a href="#2-3-2-3-Styles-和-Themes" class="headerlink" title="2.3.2.3 Styles 和 Themes"></a>2.3.2.3 Styles 和 Themes</h4><p>不像其他的资源，style命名方式是大写的驼峰是命名<strong>UpperCamelCase</strong></p>
<h3 id="2-3-3-属性顺序"><a href="#2-3-3-属性顺序" class="headerlink" title="2.3.3 属性顺序"></a>2.3.3 属性顺序</h3><p>作为通用的规则，你应该把相似的属性放在一起分组，一个对常见属性良好的排序方式是</p>
<ol>
<li>View Id</li>
<li>Style</li>
<li>布局的宽和高</li>
<li>其他的布局属性，按字母排序</li>
<li>剩下的属性，按字母排序</li>
</ol>
<h2 id="2-4-测试风格规定"><a href="#2-4-测试风格规定" class="headerlink" title="2.4 测试风格规定"></a>2.4 测试风格规定</h2><h3 id="2-4-1单元测试"><a href="#2-4-1单元测试" class="headerlink" title="2.4.1单元测试"></a>2.4.1单元测试</h3><p>测试类应该跟需要测试的类名字对应，以<code>Test</code>做后缀。比如我们创建一个测试类包含对<code>DatabaseHelper</code>的测试，我们应该把它命名为 <code>DatabaseHelperTest</code>。</p>
<p>测试方法用<code>@Test</code>注解，通常以要测试的方法名为命名开始，以测试的前置条件及/或期望结果做后缀。</p>
<ul>
<li>模板: <code>@Test void methodNamePreconditionExpectedBehaviour()</code></li>
<li>例子: <code>@Test void signInWithEmptyEmailFails()</code></li>
</ul>
<p>如果没有它们测试也能够清楚的表达，前置条件和/或期望结果不总是必须的。</p>
<p>有时候一个类可能包含一大堆方法，同时每个方法要求多个测试，在这种情况，推荐把测试类分割成几个。比如，如果 <code>DataManager</code>包含一大堆方法，我们可能想把它分到 <code>DataManagerSignInTest</code>, <code>DataManagerLoadUsersTest</code>等等。通常你能够知道哪些测试应该在一起，因为它们有共同的<a href="https://en.wikipedia.org/wiki/Test_fixture" target="_blank" rel="external">test fixtures</a>.</p>
<h3 id="2-4-2-Espresso-测试"><a href="#2-4-2-Espresso-测试" class="headerlink" title="2.4.2 Espresso 测试"></a>2.4.2 Espresso 测试</h3><p>每一个 Espresso 测试类目标通常是一个Activity，所以它的名称应该跟目标Activity的名称匹配，以<code>Test</code>结束，如 <code>SignInActivityTest</code></p>
<p>当使用 Espresso API ，把链式方法调用放新行是一个最佳实践。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">onView(withId(R.id.view))</div><div class="line">        .perform(scrollTo())</div><div class="line">        .check(matches(isDisplayed()))</div></pre></td></tr></table></figure>
<p><a href="https://github.com/ribot/android-guidelines/blob/master/project_and_code_guidelines.md" target="_blank" rel="external">原文链接</a><br><a href="http://www.suqishuo.cn/android-project-and-code-guidelines/" target="_blank" rel="external">译文链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近日在搜MVP模式作为安卓项目架构时候，发现GitHub上一篇介绍MVP架构的文章。一看star已经超过2K了。作者同项目的这篇文章讲安卓项目和代码风格指南，也非常有参考价值。为了方便大家查阅，把原文翻译了一下。点击查看作者介绍安卓MVP架构指南的
    
    </summary>
    
      <category term="最佳实践" scheme="http://127.0.0.1:43110/categories/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="Android" scheme="http://127.0.0.1:43110/tags/Android/"/>
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="代码风格" scheme="http://127.0.0.1:43110/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="命名规范" scheme="http://127.0.0.1:43110/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Evernote带来的计划任务神器Android-Job</title>
    <link href="http://127.0.0.1:43110/Android-Job-from-evernote/"/>
    <id>http://127.0.0.1:43110/Android-Job-from-evernote/</id>
    <published>2017-03-23T07:56:55.000Z</published>
    <updated>2017-03-24T02:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在新版本安卓版本(API23以上)中，谷歌把<code>android.net.conn.CONNECTIVITY_CHANGE</code> 这个广播废弃了。总的来说，应用不应该依赖这个广播来执行相关任务，而应该使用 <code>JobScheduler</code> 或者 <code>GCMNetworkManager</code>。计划任务的执行方案还可以用 <code>AlarmManager</code>。 对于国内的开发者来说，这是一个悲剧。Android 现在提供这三种不同的API来执行计划任务.这三种API都有各自的优缺点 。 <code>android.net.conn.CONNECTIVITY_CHANGE</code> 在高版本的系统中不可用了，<code>JobScheduler</code> 在低版本的系统中又不可用，<code>GCMNetworkManager</code> 是什么？在国内不存在。而且这些API之间的不同语义和用法对开发者是一种额外的负担。这种负担体现在我们不仅仅要懂得什么时候使用合适的API,而且要为不同的环境执行同样任务提供不同分支的代码。APP需要在运行时候用合适的条件判断到底要使用哪种方式执行计划任务。幸运的是，开源的世界有伟大的公司为我们提供了灵活的轮子。</p>
</blockquote>
<p>Evernote 开源的 <code>Android-Job</code>  为我们带来兼容这三种API的方案，高效，简单，灵活。<code>Android-Job</code> 在运行判断使用哪种API，它提供  <code>AlarmManager</code>, <code>JobScheduler</code>和 <code>GcmNetworkManager</code>功能的超集，比如说，我们可以定义计划任务在网络连通且在充电时候执行。</p>
<h1 id="为兼容而生"><a href="#为兼容而生" class="headerlink" title="为兼容而生"></a>为兼容而生</h1><p>上面提到的三种方案，兼容维护非常麻烦。为了彰显<code>Android-Job</code>的价值，我们有必要对这三种方案做一个分析。</p>
<h2 id="AlarmManager"><a href="#AlarmManager" class="headerlink" title="AlarmManager"></a>AlarmManager</h2><p><code>AlarmManager</code> 的API<a href="https://plus.google.com/+AndroidDevelopers/posts/GdNrQciPwqo" target="_blank" rel="external">一直在改变</a> ，所以我们需要非常注意我们APP目标运行系统是哪个版本。</p>
<p><strong> 优点 </strong></p>
<ul>
<li>所有设备上可用</li>
<li>发送广播来启动一个服务执行计划很容易</li>
</ul>
<p><strong> 缺点 </strong></p>
<ul>
<li>API在不同系统版本表现不一致</li>
<li>太多样板代码</li>
<li>忽略了设备的状态<br><img src="/images/alarmManager.png" alt="alarmManager"></li>
</ul>
<h2 id="JobScheduler"><a href="#JobScheduler" class="headerlink" title="JobScheduler"></a>JobScheduler</h2><p><a href="https://developer.android.com/reference/android/app/job/JobScheduler.html" target="_blank" rel="external">JobScheduler </a>只在Lollipop以上版本可用。</p>
<p><strong> 优点 </strong></p>
<ul>
<li>流式API简洁易用</li>
<li>检查设备状态</li>
</ul>
<p><strong>  缺点 </strong></p>
<ul>
<li>只在API 21+ 可用 （有些功能要求API24+）</li>
<li>平台bug</li>
<li>也是太多样板代码</li>
</ul>
<h2 id="GcmNetworkManager"><a href="#GcmNetworkManager" class="headerlink" title="GcmNetworkManager"></a>GcmNetworkManager</h2><p><a href="https://developers.google.com/cloud-messaging/network-manager" target="_blank" rel="external">GcmNetworkManager </a>只有在安装有Google Play的设备上可用，而且，没有被墙。</p>
<p><strong> 优点 </strong></p>
<ul>
<li>跟<code>JobScheduler</code>相似的API</li>
<li>要求minSdkVersion 9</li>
</ul>
<p><strong> 缺点 </strong></p>
<ul>
<li>是 GooglePlay ServicesSDK 的一部分</li>
<li>不能脱离 Play Services 运行</li>
<li>API 有很多陷阱</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>Android-Job项目作者在一篇PPT中详细的说明了这三种方案以及Android-Job的用法。由于篇幅有限且排版原因，强烈建议点击链接去看看。例子简单易懂，在这里给出PPT对应的PDF文件。还在犹豫是否要使用 Android-Job ，看了这个PDF，相信你心里就有肯定的答案了 <a href="https://speakerd.s3.amazonaws.com/presentations/c9e9289df7df48bab2bf52db0a087248/Schedule_background_jobs_at_the_right_time_-_MTC.pdf" target="_blank" rel="external">PDF传送门</a></p>
<h1 id="使用Android-Job-翻译自项目说明"><a href="#使用Android-Job-翻译自项目说明" class="headerlink" title="使用Android-Job(翻译自项目说明)"></a>使用Android-Job(翻译自项目说明)</h1><p>请保证点击以下链接检查你使用的是否是最新版本<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.evernote%22%20AND%20a%3A%22android-job%22" target="_blank" rel="external">Android-Job最新版链接 </a><br>添加以下的Gradle配置到安卓项目：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在app 项目的 build.gradle 文件:</span></div><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'com.evernote:android-job:1.1.7'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果没有在 Gradle build tools 中关闭 manifest merger，那就不用更多步骤来配置这个工具库了。否则需要手动添加权限生命和services，参考这个<a href="https://github.com/evernote/android-job/blob/master/library/src/main/AndroidManifest.xml" target="_blank" rel="external">AndroidManifest</a></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p> <code>JobManager</code> 类作为入口。我们自定义的Jobs 需要继承  <code>Job</code> 类。使用对应的Builder类创建一个  <code>JobRequest</code> 然后使用 <code>JobManager</code> 创建这个计划请求。</p>
<p>使用 <code>JobManager</code> 之前必须向初始化这个单例。我们需要提供一个 <code>Context</code> 然后添加一个 <code>JobCreator</code> 实现类.  <code>JobCreator</code> 把一个job tag 映射到一个特定的job 类。推荐在 <code>Application</code> 的 <code>onCreate()</code> 方法中 初始化 <code>JobManager</code> 。如果没有 <code>Application</code> 类的访问权限，这是<a href="FAQ.md#i-cannot-override-the-application-class-how-can-i-add-my-jobcreator">可选的方案</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        JobManager.create(<span class="keyword">this</span>).addJobCreator(<span class="keyword">new</span> DemoJobCreator());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoJobCreator</span> <span class="keyword">implements</span> <span class="title">JobCreator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">create</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (tag) &#123;</div><div class="line">            <span class="keyword">case</span> DemoSyncJob.TAG:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DemoSyncJob();</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们可以开始计划要执行的任务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoSyncJob</span> <span class="keyword">extends</span> <span class="title">Job</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"job_demo_tag"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">onRunJob</span><span class="params">(Params params)</span> </span>&#123;</div><div class="line">        <span class="comment">// run your job here</span></div><div class="line">        <span class="keyword">return</span> Result.SUCCESS;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduleJob</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> JobRequest.Builder(DemoSyncJob.TAG)</div><div class="line">                .setExecutionWindow(<span class="number">30_000L</span>, <span class="number">40_000L</span>)</div><div class="line">                .build()</div><div class="line">                .schedule();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><p><code>JobRequest.Builder</code> 类有很多额外的配置选项，例如，我们可以声明条件：需要网络连接。为了使任务周期性执行，用 bundle 传递额外的参数，使得任务在重启后或在特定的时间恢复。<br>每一个Job 有一个唯一的 ID 。这个 ID 帮助我们辨别 job ，以便将来更新条件或者取消 job。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleAdvancedJob</span><span class="params">()</span> </span>&#123;</div><div class="line">    PersistableBundleCompat extras = <span class="keyword">new</span> PersistableBundleCompat();</div><div class="line">    extras.putString(<span class="string">"key"</span>, <span class="string">"Hello world"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> jobId = <span class="keyword">new</span> JobRequest.Builder(DemoSyncJob.TAG)</div><div class="line">            .setExecutionWindow(<span class="number">30_000L</span>, <span class="number">40_000L</span>)</div><div class="line">            .setBackoffCriteria(<span class="number">5_000L</span>, JobRequest.BackoffPolicy.EXPONENTIAL)</div><div class="line">            .setRequiresCharging(<span class="keyword">true</span>)</div><div class="line">            .setRequiresDeviceIdle(<span class="keyword">false</span>)</div><div class="line">            .setRequiredNetworkType(JobRequest.NetworkType.CONNECTED)</div><div class="line">            .setExtras(extras)</div><div class="line">            .setRequirementsEnforced(<span class="keyword">true</span>)</div><div class="line">            .setPersisted(<span class="keyword">true</span>)</div><div class="line">            .setUpdateCurrent(<span class="keyword">true</span>)</div><div class="line">            .build()</div><div class="line">            .schedule();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">schedulePeriodicJob</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> jobId = <span class="keyword">new</span> JobRequest.Builder(DemoSyncJob.TAG)</div><div class="line">            .setPeriodic(TimeUnit.MINUTES.toMillis(<span class="number">15</span>), TimeUnit.MINUTES.toMillis(<span class="number">5</span>))</div><div class="line">            .setPersisted(<span class="keyword">true</span>)</div><div class="line">            .build()</div><div class="line">            .schedule();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleExactJob</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> jobId = <span class="keyword">new</span> JobRequest.Builder(DemoSyncJob.class)</div><div class="line">            .setExact(<span class="number">20_000L</span>)</div><div class="line">            .setPersisted(<span class="keyword">true</span>)</div><div class="line">            .build()</div><div class="line">            .schedule();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelJob</span><span class="params">(<span class="keyword">int</span> jobId)</span> </span>&#123;</div><div class="line">    JobManager.instance().cancel(jobId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果非周期性的  <code>Job</code> 执行失败,我们可以设定恢复标准重新计划这个 job</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RescheduleDemoJob</span> <span class="keyword">extends</span> <span class="title">Job</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@NonNull</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">onRunJob</span><span class="params">(Params params)</span> </span>&#123;</div><div class="line">        <span class="comment">// 一些异常情况发生，稍后重试这个Job</span></div><div class="line">        <span class="keyword">return</span> Result.RESCHEDULE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onReschedule</span><span class="params">(<span class="keyword">int</span> newJobId)</span> </span>&#123;</div><div class="line">        <span class="comment">// 恢复的Job有一个新的 ID</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>提醒:</strong>  谷歌在安卓 Marshmallow  版本引入自动备份功能，所有的 job 信息保存在一个文件名为 <code>evernote_jobs.xml</code>的 shared preference ，   以及文件名为<code>evernote_jobs.db</code> 的数据库中. 我们应该排除这些文件，避免他们被自动备份。<br>我们可以定义一个resource XML 文件 (比如, <code>res/xml/backup_config.xml</code>) 内容如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">full-backup-content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">domain</span>=<span class="string">"sharedpref"</span> <span class="attr">path</span>=<span class="string">"evernote_jobs.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">domain</span>=<span class="string">"database"</span> <span class="attr">path</span>=<span class="string">"evernote_jobs.db"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">full-backup-content</span>&gt;</span></div><div class="line">``` </div><div class="line"></div><div class="line">然后在应用的 `AndroidManifest.xml`指向这个文件:</div><div class="line"></div><div class="line">```xml</div><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>  <span class="attr">android:fullBackupContent</span>=<span class="string">"@xml/backup_config"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><p>这个库没有使用反射，但是它依赖两个 <code>Service</code> 以及两个 <code>BroadcastReceiver</code> 为了避免任何可能出现的问题，不应该混淆这四个类。这个库打包了它自己的混淆配置，所以我们不需要做任何额外的配置。以防万一，也可以在我们项目的混淆配置中添加<a href="library/proguard.txt">这些规则</a> </p>
<h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><p> <a href="FAQ.md">点击这里</a>查看更多的疑问解答。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.evernote.com/tech/2015/10/26/unified-job-library-android/" target="_blank" rel="external">evernote的Blog</a><br><a href="https://speakerdeck.com/vrallev/scheduling-background-job-on-android-at-the-right-time" target="_blank" rel="external">作者Ralf的PPT</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在新版本安卓版本(API23以上)中，谷歌把&lt;code&gt;android.net.conn.CONNECTIVITY_CHANGE&lt;/code&gt; 这个广播废弃了。总的来说，应用不应该依赖这个广播来执行相关任务，而应该使用 &lt;code&gt;JobSched
    
    </summary>
    
      <category term="开源框架" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Evernote" scheme="http://127.0.0.1:43110/tags/Evernote/"/>
    
      <category term="JobScheduler" scheme="http://127.0.0.1:43110/tags/JobScheduler/"/>
    
      <category term="GcmNetworkManager" scheme="http://127.0.0.1:43110/tags/GcmNetworkManager/"/>
    
      <category term="AlarmManager" scheme="http://127.0.0.1:43110/tags/AlarmManager/"/>
    
      <category term="Android" scheme="http://127.0.0.1:43110/tags/Android/"/>
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="Android-Job" scheme="http://127.0.0.1:43110/tags/Android-Job/"/>
    
  </entry>
  
  <entry>
    <title>Linux 命令手册安卓版</title>
    <link href="http://127.0.0.1:43110/linux-command-mannual/"/>
    <id>http://127.0.0.1:43110/linux-command-mannual/</id>
    <published>2017-03-22T11:30:55.000Z</published>
    <updated>2017-03-22T12:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前两天逛GitHub时候发现了一个命令行手册项目<a href="https://github.com/jaywcjlove/linux-command.git" target="_blank" rel="external">jaywcjlove/linux-command</a> <a href="https://jaywcjlove.github.io/linux-command/" target="_blank" rel="external">手册网站</a>，觉得非常实用。GitHub的Pages很方便，但是国内访问有时候比较慢。虽然网上类似的在线手册很多了，但是我觉得一个手册应该是随手可用，而且即使在没有网时候，也可随时翻阅的。于是打算用一天半天把手册做成个离线版简易手册APP。</p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>翻了一下GitHub上项目的README，发现作者很贴心的把爬虫抓到的数据保存成MarkDown格式了。不得不说一下，MarkDown是程序员最喜欢的文档格式之一。把项目clone到本地，手册的数据来源就准备好了。再次 感谢作者的辛勤付出。</p>
<h2 id="MarkDown解析"><a href="#MarkDown解析" class="headerlink" title="MarkDown解析"></a>MarkDown解析</h2><p>安卓没有原生支持MarkDown的控件，在GitHub上用markdown为关键字搜了一下，<a href="https://github.com/sirthias/pegdown" target="_blank" rel="external">pegdown</a> 这个MarkDownn解析库是最多star的。遗憾的是，尽管目前仍然是最流行的MarkDown解析库之一，作者在三个多月前声明这个项目停止维护了。不过作者推荐了<a href="https://github.com/vsch" target="_blank" rel="external">@vsch</a>的<a href="https://github.com/vsch/flexmark-java" target="_blank" rel="external">flex-mark-java</a>,另一个性能优越的markdown解析库。</p>
<p><code>flexmark-java</code>解析架构基于<a href="https://github.com/atlassian/commonmark-java" target="_blank" rel="external">commonmark-java</a>,另一款解析库(开源的世界就是这么任性啊),想到罗永浩的那句生命不息，折腾不止，决定先用<code>commonmark-java</code>解析，后面再切换到<code>flexmark-java</code>。尽管是最简单的引用，并没有怎么折腾。</p>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>手册的数据，解析都准备好了，还有一个手册必不可少的功能——搜索。以前做项目的时候都是用EditText+Button来实现搜索功能的。虽然一直知道安卓有个原生的searchView，但是项目做视觉设计的小伙伴设计出来的视觉不给searchView用武之地。自从进TV应用开发的坑后，也好久没有开发手机APP了。基于这两个原因，决定在这个小应用中学习一下searchView的使用。<br>计划实现的是带搜索建议的searchView,这样可以尽量的简化在手机上的输入。searchView的配置很简单，但是搜索建议需要有一定的学习。<br>安卓现在推荐的是ActionBar中搜索，除了要增加一点actionView的配置，其他的跟searchView大同小异。正所谓磨刀不误砍柴工，何况之前没有系统的学习过searchView，于是开始找百度，找博客补习功课。<br>以searchView搜索看了几篇配置博文后，发现一个博客把谷歌的searchView介绍做了一个专题的介绍，于是把这几篇文章细读了一遍。在读这几篇译文的时候想起很多大牛的教导，要读就读一手的文档，最好是出自代码作者之手的，再次一点就是读一手文档的翻译。除了这两种文章干货较多，其他类型的文章往往介绍得不够全面。<br><a href="http://developer.android.com/guide/topics/search/search-dialog.html" target="_blank" rel="external">英文原文（需要翻墙）</a><br><a href="http://blog.csdn.net/hudashi/article/details/7052815" target="_blank" rel="external">译文第一篇：[Searchable(一)]</a>(剩下的几篇链接就不贴了，在文末有上下篇的链接跳转)</p>
<p>依照译文的介绍，我对搜索功能有了大概的方向。主要做了以下几点：</p>
<ul>
<li>把前面获取到的MD文件放到assets目录下，用<code>AssetsManager</code>进行管理，这样就可以不用数据库了。展示命令详情的时候，也可以直接读取到命令对应文件流，再方便不过了。</li>
<li><code>searchView</code>的搜索建议需要有一个<code>ContentProvider</code>来提供搜索建议的数据源，没有数据库怎么用ContentProvider? 答案是<code>MatrixCursor</code>。<code>MatrixCursor</code>可以做到模拟数据库的作用，也提供方法方便插入数据等。</li>
<li>有了实现<code>ContentProvider</code>的思路,只需把<code>AssetsManager</code>获取到的命令文件名作为数据，提供给<code>searchView</code>来查询就可以了。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>手册的实现并没有什么难度，在补充了相关的知识后，只需要不到半天的时间就可以搞定了。项目虽小，但是还是给我不少收获的。之前看到有一篇文章，名字叫《提问的智慧》。搜索其实就是向机器提问的一种方式，科学的搜索关键词，合适的网站搜索事半功倍。搜索还是首选 <a href="http://www.google.com" target="_blank" rel="external">Google.com</a> 和 <a href="http://stackoverflow.com" target="_blank" rel="external">stackoverflow.com</a></p>
<p>项目地址：<br><a href="https://github.com/Ernest-su/LinuxCmd" target="_blank" rel="external">GitHub</a><br><a href="https://git.coding.net/ernest/LinuxCmd.git" target="_blank" rel="external">coding.net</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前两天逛GitHub时候发现了一个命令行手册项目&lt;a href=&quot;https://github.com/jaywcjlove/linux-command.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jaywcjlove/
    
    </summary>
    
      <category term="工具" scheme="http://127.0.0.1:43110/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android" scheme="http://127.0.0.1:43110/tags/Android/"/>
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="工具" scheme="http://127.0.0.1:43110/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Linux" scheme="http://127.0.0.1:43110/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Lottie,我们幕后新的开源动效工具</title>
    <link href="http://127.0.0.1:43110/lottie-behind-the-scenes-of-our-new-open-source-animation-tool/"/>
    <id>http://127.0.0.1:43110/lottie-behind-the-scenes-of-our-new-open-source-animation-tool/</id>
    <published>2017-03-20T04:30:55.000Z</published>
    <updated>2017-03-20T08:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>airbnb开源了一套适用于Android和iOS动效库。虽然尚在快速迭代中，但是已经忍不住在项目中小范围试用。无奈新开源的项目文档比较少。在airbnb设计部门的网站上看到一篇介绍Lottie的文章，试着翻一下。本文是第一次翻译英文文档，翻译不当或不专业的地方欢迎指教。</p>
</blockquote>
<p>在过去，为Android，IOS,React Native应用创建复杂的动效，是一个困难又费时的过程。您要么为每种屏幕分辨率添加笨重的图像文件，要么写上千行难以扩展维护的代码。正因为如此，尽管动效是一个沟通的想法和创造引人注目的用户体验的强大工具，大多数应用程序并不使用动效。一年前，我们开始改变这种情况。</p>
<p>今天，我们很高兴介绍我们的解决方案。Lottie是一个可用于iOS，Android和React Native 的库，实时渲染 After Effects动效，并允许开发者在原生应用程序中使用动效像使用图片等静态资源一样简单。Lottie使用一个开源的After Effects插件(Bodymovin)导出的JSON文件形式的动效数据，这个插件捆绑了一个JavaScript播放器，可以在网络上渲染动画。从2015二月开始，Bodymovin的作者Hernan Torrisi，每月通过给插件增加新功能，改进现有功能，为我们的Lottie项目建立了一个坚实的基础。我们的团队（Brandon Withrow负责iOS，Gabriel Peal负责Android，Leland Richardson负责React Native，我负责体验设计）在Torrisi的杰出工作基础上开始Lottie开发之旅。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/02/icons.gif" alt=""></p>
<p>Lottie使得程序猿无痛实现丰富的动效。如上图所示的Nick Butcher跳跃动效，Bartek Lipinski的汉堡式菜单，Miroslaw Stanek的推特心等等，如果用代码从头开始实现四多么困难和费时。有了Lottie，诸如深入了解框架，预估动画时间，手动创建贝赛尔曲线，重新制作GIF参考动效将成为过去式。现在程序猿可以准确地使用设计师设计的动效，确切地说动效是如何制造的，我们实现的就是怎样。为了展示这一点，我们已经重新创建上面的动画，并在我们的示例应用程序提供After Effects和JSON文件。</p>
<p>我们的目标是尽我们所能支持尽可能多的After Effects 的功能，而不仅仅是简单的图标动画。我们还创建了一些其他示例来显示Lottie库的灵活性、丰富性和进阶功能集。在示例应用程序中，还有各种不同类型动画的源文件，包括基本线条艺术、基于字符的动效以及多角度的logo动效。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_1.gif" alt=""></p>
<p>我们已经在屏幕的各个角落开始使用我们设计的Lottie动效，包括下图所示的应用程序的通知，全帧动画插图，回访评价页面等。我们计划通过有趣且有用的方式大幅度扩大动画使用。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/screens_2.gif" alt=""></p>
<h2 id="灵活高效的解决方案"><a href="#灵活高效的解决方案" class="headerlink" title="灵活高效的解决方案"></a>灵活高效的解决方案</h2><p>Airbnb是支持数以百万计的房东和房客的全球化公司，所以有一个灵活的动画格式，且可以在多种平台上使用，对我们而言非常重要。现在已经有与Lottie相似的动效库，如Marcus Eckert的Squall和Facebook的Keyframes。但我们的目标稍有不同。Facebook挑选了一小部分After Effects的功能提供支持，因为他们主要集中在交互，但我们想支持尽可能多。至于Squall，Airbnb的设计师用它和Lottie组合使用，因为它有一个神奇的After Effects预览APP，所以成为我们工作中必不可少的一部分。然而，它只支持iOS，但是我们的工程团队需要一个跨平台的解决方案。</p>
<p>Lottie有几个功能内置了它的API，使其更加灵活和高效。它支持从网络上加载JSON文件，这对A / B测试非常有用。它也有一个可选的缓存机制，所以经常使用的动画，如愿望列表的心型图标可以每次加载缓存的副本。Lottie也可以使用动效的进度功能实现用手势调整动画的进度，以及通过改变一个简单的值从而改变动画的速度。iOS版本甚至支持在运行时向动画添加额外的本地UI，可用于复杂的动画转换。</p>
<p>我们工作到目前为止，除了所有的After Effects功能和API的补充，也有很多未来的想法。这些包括映射View到Lottie动画，使用Lottie控制的View的转换，提供Battle Axe的 <a href="http://www.battleaxe.co/rubberhose/" target="_blank" rel="external">RubberHose</a>，梯度，类型和图像的支持（译者注：最新版已经支持图像）。最难的部分是下一步先挑选哪些功能实现。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/hardware.png" alt=""></p>
<h1 id="构建社区"><a href="#构建社区" class="headerlink" title="构建社区"></a>构建社区</h1><p>发布开源的东西不仅仅是把它放在那里供大家使用。它是连接人们和创造社区的桥梁。随着我们通过GitHub发布Lottie给设计师和程序猿而走得更近，我们希望确保与动画分支连接。（As we got closer to releasing Lottie to designers and engineers via GitHub, we wanted to be sure to connect with the animation folks as well.）</p>
<p>我们的灵感来自<a href="http://9-squares.tumblr.com/" target="_blank" rel="external">9 Squares</a>,<a href="https://motioncorpse.tumblr.com/" target="_blank" rel="external"> Motion Corpse</a>, 以及 Animography 创造的社区。这三个社区都汇集了来自世界各地的人，如果没有这些社区他们将不能在公共动画项目上合作。这些项目需要数月的工作以及组织各自的团队跟人们进行讨论，但这些毋容置疑作为一个整体为动画社区提供了巨大的价值。Motion Corpse 和Animography 公开分享After Effects 源文件，提供关于人们如何创作的不同见解。</p>
<p>追随他们的协作的领先脚步，我们达成协议，这三个团队贡献动画到我们的示例应用程序中。如下图所示，我们已经包括了由J.R. Canest创建一个动画（来自Motion Corpse），一个来自Al Boardman squares的动效 ，和一个使用animography Mobilo动画字体的动效键盘，包含20多个艺术家设计的字母。我们希望整合这些动画社区，强大的工程社区将擦除独特的火花。</p>
<p><img src="http://airbnb.design/wp-content/uploads/2017/01/community.gif" alt=""></p>
<p>我们很乐意听到你如何使用Lottie-不管你是一名设计师，动画设计师还是程序猿。随时联系我们直接与你们的思想，lottie@airbnb.com反馈和见解。我们很高兴看到世界各地的社区以我们从未想过的方式开始使用Lottie。</p>
<blockquote>
<p> 译者注：airbnb已上线一个Lottie动效采集分享网站<br><a href="http://www.lottiefiles.com" target="_blank" rel="external">lottiefiles.com</a></p>
</blockquote>
<p>下载 <a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">Bodymovin</a>, Lottie<a href="https://github.com/airbnb/lottie-ios" target="_blank" rel="external">iOS</a>, <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Android</a> 以及 <a href="https://github.com/airbnb/lottie-react-native" target="_blank" rel="external">React Native</a>.</p>
<p>这篇文章由  Brandon Withrow,  Gabriel Peal 以及 Salih Abdul-Karim 共同完成</p>
<p><a href="http://airbnb.design/introducing-lottie/" target="_blank" rel="external">英文版原文链接</a><br><a href="http://www.suqishuo.cn/introducing-lottie/lottie-behind-the-scenes-of-our-new-open-source-animation-tool" target="_blank" rel="external">译文原文链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;airbnb开源了一套适用于Android和iOS动效库。虽然尚在快速迭代中，但是已经忍不住在项目中小范围试用。无奈新开源的项目文档比较少。在airbnb设计部门的网站上看到一篇介绍Lottie的文章，试着翻一下。本文是第一次翻译英文文档，翻译不当
    
    </summary>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
    
      <category term="Lottie" scheme="http://127.0.0.1:43110/tags/Lottie/"/>
    
      <category term="动效" scheme="http://127.0.0.1:43110/tags/%E5%8A%A8%E6%95%88/"/>
    
      <category term="AE" scheme="http://127.0.0.1:43110/tags/AE/"/>
    
      <category term="airbnb" scheme="http://127.0.0.1:43110/tags/airbnb/"/>
    
      <category term="设计" scheme="http://127.0.0.1:43110/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="开源" scheme="http://127.0.0.1:43110/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>greenDAO项目实战-ToOne-ToMany实现一对一，一对多关联映射</title>
    <link href="http://127.0.0.1:43110/greendao-project-practice-ToOne-ToMany/"/>
    <id>http://127.0.0.1:43110/greendao-project-practice-ToOne-ToMany/</id>
    <published>2017-03-20T03:14:27.000Z</published>
    <updated>2017-03-20T03:24:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  在上一篇文章<a href="http://www.suqishuo.cn/greendao-project-practice/" target="_blank" rel="external">greenDAO项目实战</a>中，我们对GreenDao有了初步的认识。今天我们熟悉一下GreenDao中使用<code>ToOne</code>和<code>ToMany</code>实现一对一，一对多关联映射。本文在上篇的基础上进行。</p>
</blockquote>
<h2 id="添加Category类"><a href="#添加Category类" class="headerlink" title="添加Category类"></a>添加Category类</h2><p>我们现在对上一篇的Note进行扩展，添加类别。我们假设一个Note属于一个类别Category，一个类别Category可以拥有多个Note.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"categoryId"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;Note&gt; notes;</div></pre></td></tr></table></figure>
<h2 id="修改Note类，Category信息"><a href="#修改Note类，Category信息" class="headerlink" title="修改Note类，Category信息"></a>修改Note类，Category信息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line">    <span class="keyword">private</span> String comment;</div><div class="line">    <span class="keyword">private</span> java.util.Date date;</div><div class="line">    </div><div class="line">    <span class="meta">@Convert</span>(converter = NoteTypeConverter.class, columnType = String.class)</div><div class="line">    <span class="keyword">private</span> NoteType type;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long categoryId;</div><div class="line"></div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"categoryId"</span>)</div><div class="line">    <span class="keyword">private</span> Category category;</div><div class="line">    <span class="comment">//省略了其他的geter,setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注解分析"><a href="#注解分析" class="headerlink" title="注解分析"></a>注解分析</h2><p>上面的Category类代码中：<br><code>@ToMany(referencedJoinProperty = &quot;categoryId&quot;)</code>这个注解表明，一个<code>Category</code>可以拥有多个<code>Note</code>（一对多）.<code>referencedJoinProperty= &quot;categoryId&quot;</code>表示使用<code>Note</code>类中的<code>categoryId</code>字段进行关联。注意这个字段应该是Long类型.在Category中用<code>List&lt;Note&gt; notes</code>表示拥有的Note.</p>
<p>上面的Note类代码中：<br><code>@ToOne(joinProperty = &quot;categoryId&quot;)</code>这个注解表明，一个<code>Note</code>属于一个<code>Category</code>。注意我们添加了<code>private Long categoryId</code>这字段，然后在<code>@ToOne</code>注解中使用<code>joinProperty = &quot;categoryId&quot;</code>把<code>Category</code>用<code>categoryId</code>关联起来。</p>
<p>经过在一的端（Category）使用<code>@ToMany</code>，在多的端（Note）使用<code>@ToOne</code>,我们就把一对多和多对一关联关系建立起来了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加一个类别:技术分享.</span></div><div class="line"> Category category = <span class="keyword">new</span> Category(<span class="number">1L</span>,<span class="string">"技术分享"</span>);</div><div class="line"> categoryDao.insert(category);</div><div class="line"></div><div class="line"> <span class="comment">//添加一个类别:心灵鸡汤.</span></div><div class="line"> category = <span class="keyword">new</span> Category(<span class="number">2L</span>,<span class="string">"心灵鸡汤"</span>);</div><div class="line"> categoryDao.insert(category);</div><div class="line"> </div><div class="line"> <span class="comment">//添加一条技术分享note记录</span></div><div class="line"> Note note = <span class="keyword">new</span> Note();</div><div class="line"> note.setText(<span class="string">"这是note内容文本，技术分享"</span>);</div><div class="line"> note.setComment(<span class="string">"这是note的comment"</span>);</div><div class="line"> note.setDate(<span class="keyword">new</span> Date());</div><div class="line"> note.setType(NoteType.TEXT);</div><div class="line"> note.setCategoryId(<span class="number">1L</span>);<span class="comment">//设置分类为技术分类</span></div><div class="line"> noteDao.insert(note);</div><div class="line"> </div><div class="line"> <span class="comment">//再添加一条技术分享note记录</span></div><div class="line"> note = <span class="keyword">new</span> Note();</div><div class="line"> note.setText(<span class="string">"这是note内容文本，也是技术分享"</span>);</div><div class="line"> note.setComment(<span class="string">"这是note的comment"</span>);</div><div class="line"> note.setDate(<span class="keyword">new</span> Date());</div><div class="line"> note.setType(NoteType.TEXT);</div><div class="line"> note.setCategoryId(<span class="number">1L</span>);<span class="comment">//设置分类为技术分类</span></div><div class="line"> noteDao.insert(note);</div><div class="line"></div><div class="line"> <span class="comment">//接着添加一条属于心灵鸡汤Note记录</span></div><div class="line"> note = <span class="keyword">new</span> Note();</div><div class="line"> note.setText(<span class="string">"这是note内容文本，心灵鸡汤"</span>);</div><div class="line"> note.setComment(<span class="string">"这是note的comment"</span>);</div><div class="line"> note.setDate(<span class="keyword">new</span> Date());</div><div class="line"> note.setType(NoteType.TEXT);</div><div class="line"> note.setCategoryId(<span class="number">2L</span>);<span class="comment">//设置分类为心灵鸡汤</span></div><div class="line"> noteDao.insert(note);</div><div class="line"></div><div class="line"> <span class="comment">//查询所有的分类为技术分享（id=1）的note数据</span></div><div class="line"> List&lt;Note&gt; notes = categoryDao.load(<span class="number">1L</span>).getNotes();</div><div class="line"> System.out.println(notes);</div><div class="line"> <span class="comment">//通过Note反查Category</span></div><div class="line"> noteDao.load(<span class="number">1L</span>).getCategory().getName();     </div><div class="line"> </div><div class="line"> <span class="comment">//顺便演示一下通过对文本内容的模糊查询匹配返回包含"心灵鸡汤"文本的Note。</span></div><div class="line"> notes = noteDao.queryBuilder().where(NoteDao.Properties.Text.like(<span class="string">"%心灵鸡汤%"</span>)).list();</div><div class="line"> System.out.println(notes);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  在上一篇文章&lt;a href=&quot;http://www.suqishuo.cn/greendao-project-practice/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;greenDAO项目实战&lt;/a&gt;中，我们对Gree
    
    </summary>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="GreenDAO" scheme="http://127.0.0.1:43110/tags/GreenDAO/"/>
    
      <category term="数据库" scheme="http://127.0.0.1:43110/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/tags/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号没有你想的那么简单</title>
    <link href="http://127.0.0.1:43110/wechat-subscription-not-that-simple/"/>
    <id>http://127.0.0.1:43110/wechat-subscription-not-that-simple/</id>
    <published>2017-03-18T07:56:58.000Z</published>
    <updated>2017-03-18T09:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>老婆在一个艺术培训中心上班，最近她的领导说想要开一个公众号。由于他们对这一块一窍不通，于是咨询起我这个专业人士来。说实话我只是个人捣鼓过微信公众号开发，没有运营或者开发商业微信公众号。但是对于其中的原理还是大概了解的。这不说不要紧，经过跟老婆的一番讨论，发现无论是开发还是运营一个微信公众号，都没有想象中那么简单。</p>
<p>这篇文章不讨论大企业的微信公众号，我们讨论一下像他们这种小微型企业的需求以及他们可能遇到的坑。</p>
<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>首先我们明确一下大概的背景和需求。公司有两三个领导，员工不多，几个人负责教务管理，属于培训中心的后勤保障。剩下的就是几十个老师定期上课培训。培训课有中国舞，芭蕾舞，书法画画，围棋等等。每个培训班人数从几个到十几个不等。那使用这套系统的人就有以下几类：</p>
<ul>
<li>培训中心的领导</li>
<li>教务员工</li>
<li>培训老师</li>
<li>家长学生</li>
<li>目前没有孩子参加培训，将来可能参加的潜家长</li>
</ul>
<p>系统的使用人群种类不算多，人数顶多也就是上千。我们大概梳理一下可能的需求。</p>
<p>对于领导：</p>
<ul>
<li>查看中心运营情况。包括财务收支，招生情况，课程开设情况等</li>
<li>管理审批。主要是培训老师的管理，员工管理，以及财务和开设课程管理</li>
</ul>
<p>对于员工：</p>
<ul>
<li>查看管理招生情况，课程开设情况等。跟领导的需求差不多，只不过有些数据只有领导有权限查看操作。</li>
<li>上传下达。主要是录入信息向领导汇报财务收支，招生情况，课程运营情况等。向老师和家长通知开停课通知，收费缴费及活动通知等。</li>
</ul>
<p>对于家长：</p>
<ul>
<li>中心信息查询。包括中心的办学情况，课程开设情况，老师简介等。</li>
<li>课程查询。包括课程费用，上课时间，剩余课时等。</li>
<li>费用查询。包括缴费记录，剩余费用，续费等。</li>
<li>通知查询。主要是通过微信推送通知信息。</li>
</ul>
<p>附上跟老婆讨论时候画的一张思维导图，反映了目前大部分需求。<br><img src="/images/培训管理系统.png" alt="培训管理系统需求"></p>
<h1 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h1><p>摆在他们面前的有两种方案。</p>
<ul>
<li>购买专门为这个行业定制的一整套系统。</li>
<li>请一个开发团队针对他们的需求进行开发。</li>
</ul>
<p>两种方案各有优劣，我们用表格的方式对比一下。</p>
<table>
<thead>
<tr>
<th></th>
<th>购买行业已有系统</th>
<th>找团队定制开发</th>
</tr>
</thead>
<tbody>
<tr>
<td>价格</td>
<td>参差不齐,根据系统功能和公司销售策略而定</td>
<td>根据需求定，可议价性高</td>
</tr>
<tr>
<td>后期费用</td>
<td>主要是后期的维护服务费，相关硬件设备（IC卡，打卡机等）购置费</td>
<td>主要是保证系统正常运行的主机，带宽，域名费用等。</td>
</tr>
<tr>
<td>功能</td>
<td>功能丰富，能满足大部分需要，但可定制化不高，很多功能用不上</td>
<td>由需求方提出，一般没有累赘的功能。但需求不够明确容易漏掉某些需要的功能</td>
</tr>
<tr>
<td>维护</td>
<td>一般由开发公司维护，每个月收取维护服务费</td>
<td>开发完成后有一段维护期，到期后不负责维护或要根据情况收取维护费用</td>
</tr>
<tr>
<td>系统稳定性</td>
<td>取决于开发公司，一般有专人维护，能够保证系统正常运行.由于系统不止一家同行业公司使用，系统出现重大问题概率不高</td>
<td>取决于开发质量。在系统试运行期间可能问题较多</td>
</tr>
<tr>
<td>数据安全性</td>
<td>取决于开发公司。如果终止合同，使用其他公司产品，或者开发公司倒闭，数据得不到保障</td>
<td>数据保存在云服务器上，可按需备份。</td>
</tr>
<tr>
<td>数据可用性</td>
<td>只能在系统内使用，不可定制，进一步分析利用。部分系统可导出到文件</td>
<td>可根据需要对数据进行进一步定制，分析，利用</td>
</tr>
<tr>
<td>扩展性</td>
<td>取决于开发公司。有的开发公司提供有限的有偿的二次开发。可扩展性不高</td>
<td>可按需由原开发者或找新的开发者开发定制</td>
</tr>
</tbody>
</table>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>经过上面的对比，我们可以看出无论是购买行业已有系统还是找团队定制开发，都不是像去超市购买商品那样一次性搞定。从方案选择就有很多因素需要长远考虑。</p>
<p>总的来说，购买行业已有系统前期要付出的精力会少很多，但是对系统的依赖较大，一旦选择了，对系统就产生了高度的依赖，很难切换到其他的产品。这种依赖会随着时间和数据的积累越来越难摆脱。终止合同或更换系统对已有数据几乎是毁灭性的从头再来。</p>
<p>而找团队定制开发很大程度取决于需求够不够明确，以及开发团队的质量。对于技术没有大概了解的，不容易看出潜在的风险。这风险包括由于开发团队一般不熟悉这个行业，对需求的理解会有所偏差，开发出来的系统是否符合现有需求以及将来的扩展需要，系统的质量也要一段时间的使用才能得知。</p>
<p>其实无论是开一个微信公众号还是开发一个APP，或者是上一套系统，都会面临着同样的问题。这也就很好理解为什么那么多公司迟迟没有用上现代化的系统，甚至仍然停留在纸和笔或者word，excel来处理各种事务了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;老婆在一个艺术培训中心上班，最近她的领导说想要开一个公众号。由于他们对这一块一窍不通，于是咨询起我这个专业人士来。说实话我只是个人捣鼓过微信
    
    </summary>
    
      <category term="所思所想" scheme="http://127.0.0.1:43110/categories/%E6%89%80%E6%80%9D%E6%89%80%E6%83%B3/"/>
    
    
      <category term="微信" scheme="http://127.0.0.1:43110/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="公众号" scheme="http://127.0.0.1:43110/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="培训系统" scheme="http://127.0.0.1:43110/tags/%E5%9F%B9%E8%AE%AD%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>greenDAO项目实战</title>
    <link href="http://127.0.0.1:43110/greendao-project-practice/"/>
    <id>http://127.0.0.1:43110/greendao-project-practice/</id>
    <published>2017-03-16T09:13:27.000Z</published>
    <updated>2017-03-20T01:57:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  在安卓移动APP开发过程中，一般使用安卓默认的sqlite数据库做数据持久化存储。虽然android提供了ContentProvider等框架支持，但是写SQL语句依然是一件不少程序猿的头疼的事。无论是简单的SQL语句，还是复杂的多表查询，都是影响开发效率的苦力活。幸运的是，我们有类似于Hibernate/MyBatis的ORM框架用于安卓开发中。今天我们介绍gitHub上热门的一个专注于Android开发的ORM框架——greenDAO.</p>
</blockquote>
<h2 id="greenDAO简介"><a href="#greenDAO简介" class="headerlink" title="greenDAO简介"></a>greenDAO简介</h2><p>greenDAO是一个轻量&amp;快速的安卓ORM框架,把对象和Sqlite数据库关联映射起来。它专门为Android做了高度的优化，高性能，消耗极少的内存。<br><strong>greenDAO首页, 开发文档以及技术支持链接: <a href="http://greenrobot.org/greendao/" target="_blank" rel="external">http://greenrobot.org/greendao/</a></strong><br><img src="http://greenrobot.org/wordpress/wp-content/uploads/greenDAO-orm-320.png" alt="greendao图解"><br><strong>GreenDAO特色功能</strong>：</p>
<ul>
<li>稳健：GreenDAO从2011开始，就被无数著名的应用程序使用 </li>
<li>超级简单：简洁直截了当的API，支持注释（V3以上版本） </li>
<li>小巧：框架小于150K,并且只是普通的java jar（没有CPU相关的本地部分）减少构建时间避免超出 65k方法数限制 </li>
<li>快速：可能是全球最快的Android平台ORM框架，得益于gradle插件，框架能够自动智能执行代码生成 </li>
<li>安全且人性化的查询API：QueryBuilder使用属性常量，避免拼写错误（这是SQL语句拼接查询常见的错误） </li>
<li>强大的连接：跨实体的查询，甚至嵌套复杂的多表链接和多条件关系查询 </li>
<li>灵活的属性类型：在实体中使用自定义的类或枚举表示数据 </li>
<li>加密：支持SQLCipher加密数据库</li>
<li>活跃的社区:超过7000 GitHub stars<h2 id="在项目中使用GreenDAO"><a href="#在项目中使用GreenDAO" class="headerlink" title="在项目中使用GreenDAO"></a>在项目中使用GreenDAO</h2>greenDAO 在 Maven 仓库可用. 请保证点击以下链接检查你使用的是否是最新版本<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22greendao%22" target="_blank" rel="external">greenDAO最新版链接 </a>| <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.greenrobot%22%20AND%20a%3A%22greendao-generator%22" target="_blank" rel="external">greenDAO-generator最新版链接</a></li>
</ul>
<p>添加以下的Gradle配置到安卓项目：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在项目根目录的 build.gradle 文件:</span></div><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral() &lt;-- 添加这个仓库</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.0'</span></div><div class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.1'</span> &lt;-- 添加greendao用到的gradle插件，用于生成GreenDao用到的代码（注意使用最新版本）</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 在app 项目的 build.gradle 文件:</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'org.greenrobot.greendao'</span> &lt;-- 应用greendao的gradle插件(用于生成GreenDao用到的代码)</div><div class="line"><span class="comment">//------------</span></div><div class="line"><span class="comment">//(可选)配置数据库版本，生成的Dao包路径(无特殊要求除了schemaVersion，daoPackage和targetGenDir一般不用配置，使用默认的)</span></div><div class="line">greendao &#123;</div><div class="line">    schemaVersion <span class="number">1</span></div><div class="line">    daoPackage <span class="string">'com.example.greendao'</span></div><div class="line">    targetGenDir <span class="string">'src/main/java'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//------------</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'org.greenrobot:greendao:3.2.0'</span> &lt;-- 添加greenDao框架依赖</div><div class="line"><span class="comment">//如果需要数据库加密，要引入一下sqlcipher加密库</span></div><div class="line"><span class="comment">//compile 'net.zetetic:android-database-sqlcipher:3.5.4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong> 这些配置使得GreenDao插件在Gradle构建过程中触发，当项目构建时.插件生成 DaoMaster, DaoSession 以及实体类对应的DAO.这些类是GreenDao框架的核心类</p>
<h3 id="声明实体类"><a href="#声明实体类" class="headerlink" title="声明实体类"></a>声明实体类</h3><blockquote>
<p>首先，我们声明一个实体类Note,一个自定义的枚举类型NoteType。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NoteType &#123;</div><div class="line">    TEXT, LIST, PICTURE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line">    <span class="keyword">private</span> String comment;</div><div class="line">    <span class="keyword">private</span> java.util.Date date;</div><div class="line">    </div><div class="line">    <span class="meta">@Convert</span>(converter = NoteTypeConverter.class, columnType = String.class)</div><div class="line">    <span class="keyword">private</span> NoteType type;</div><div class="line"></div><div class="line">    <span class="meta">@Generated</span>(hash = <span class="number">1272611929</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Note</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Note</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Generated</span>(hash = <span class="number">1686394253</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Note</span><span class="params">(Long id, @NotNull String text, String comment, java.util.Date date, NoteType type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">        <span class="keyword">this</span>.comment = comment;</div><div class="line">        <span class="keyword">this</span>.date = date;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** 非空值声明，保证这个只在保存到数据之前是非空的**/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(@NotNull String text)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//省略了其他的geter,setter</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的实体类代码中：</p>
<p><code>@Entity</code>注解表明这是一个GreenDao映射到数据的实体类，括号内的配置是可选的。</p>
<p><code>@Id</code>注解表明这是主键,<code>autoincrement = true</code>表示自增，<strong>注意</strong>GreenDao主键需要是Long类型，不能是long或者int之类的其他类型。（这也是安卓推荐的主键类型）</p>
<p><code>@NotNull</code> 注解表明这是一个非空值，在它的setter参数也注明了非空，保证这个只在保存到数据之前是非空的。</p>
<p><code>@Convert(converter = NoteTypeConverter.class, columnType = String.class)</code>这个注解实现自定义类型到数据库支持的类型的转换。<code>converter = NoteTypeConverter.class</code>指定转换器是NoteTypeConverter这个类（下面马上介绍），<code>columnType = String.class</code>指定数据库对应的列类型是文本类型。通过Convert我们可以用自然的方式表达各种属性。</p>
<p><code>@Transient</code>上面的例子没有标出。这个注解表明此字段不存储到数据库中，用于不用持久化的字段</p>
<p>值得说明的是，实体类的构造函数和getter/setter是greendao在项目build的时候自动生成的，是不是很方便呢？</p>
<p>接下来我们再看看转换器的写法。转换器听起来很高级有没有？但是写起来出乎意料的简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoteTypeConverter</span> <span class="keyword">implements</span> <span class="title">PropertyConverter</span>&lt;<span class="title">NoteType</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> NoteType <span class="title">convertToEntityProperty</span><span class="params">(String databaseValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> NoteType.valueOf(databaseValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">convertToDatabaseValue</span><span class="params">(NoteType entityProperty)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> entityProperty.name();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个转换器都实现了<code>PropertyConverter&lt;P, D&gt;</code> 这个接口。P是实体类中自定义的类型，D是数据库支持的类型。</p>
<p>接口方法<code>convertToEntityProperty</code>接受一个数据库支持类型的参数，返回实体类中自定义的类型。</p>
<p>接口方法<code>convertToDatabaseValue</code>接受一个实体类中自定义的类型的参数，返回数据库支持类型。</p>
<p>通过实现这两个方法，我们就完成了实体类的自定义类型到数据库支持类型的映射。在本例中，<code>NoteType</code>这个自定义的枚举类型得以用文本方式存储到数据库。</p>
<h3 id="在Application中配置DaoSession"><a href="#在Application中配置DaoSession" class="headerlink" title="在Application中配置DaoSession"></a>在Application中配置DaoSession</h3><blockquote>
<p>接着，我们在App中配置DaoSession，作为数据统一操作的对象，注意DaoSession所在的包如果未配置，默认跟声明的实体类包名相同</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="comment">/**是否加密标志。通过这个例子展示给我们greendao从用SQLCipher加密数据库到标准的sqlite切换时多么简单.打开数据库加密需要引入SQLCipher相关的库*/</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> ENCRYPTED = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">/**全局公用的DaoSession**/</span></div><div class="line">    <span class="keyword">private</span> DaoSession daoSession;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">//DevOpenHelper简单的在数据库需要升级的时候重建数据表，在实际项目中，如果我们需要保存旧版本的数据，需要自己实现一个OpenHelper,把旧版本数据迁移到新版本中。</span></div><div class="line">        </div><div class="line">        DevOpenHelper helper = <span class="keyword">new</span> DevOpenHelper(<span class="keyword">this</span>, ENCRYPTED ? <span class="string">"notes-db-encrypted"</span> : <span class="string">"notes-db"</span>);</div><div class="line">        Database db = ENCRYPTED ? helper.getEncryptedWritableDb(<span class="string">"super-secret"</span>) : helper.getWritableDb();</div><div class="line">        daoSession = <span class="keyword">new</span> DaoMaster(db).newSession();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> DaoSession <span class="title">getDaoSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> daoSession;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong> 提醒 </strong><br>记得在<code>AndroidManifest.xml</code>中配置App.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".App"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>到这里，我们从实体类的声明，数据库操作入口都已经建立好了。没有写一行SQL，是不是有一种畅快淋漓的感觉？下面我们用几个代码片段展示一下如何通过greendao进行数据的增删改查。</p>
<h3 id="查询所有的note列表"><a href="#查询所有的note列表" class="headerlink" title="查询所有的note列表"></a>查询所有的note列表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 获得note对应的DAO。Dao在build的时候自动生成</span></div><div class="line">DaoSession daoSession = ((App) getApplication()).getDaoSession();</div><div class="line"><span class="comment">//我们通过这个noteDao进行增删改查的操作</span></div><div class="line">NoteDao noteDao = daoSession.getNoteDao();</div><div class="line"></div><div class="line"><span class="comment">//查询所有的note数据</span></div><div class="line">List&lt;Note&gt; notes = noteDao.loadAll();</div><div class="line"><span class="comment">// 查询所有的note数据, 根据note的文本内容根据a-z升序排序.这里的NoteDao.Properties.Text是greendao自动生成的，上面提到的属性常量。 </span></div><div class="line">notes = noteDao.queryBuilder().orderAsc(NoteDao.Properties.Text).build().list();</div></pre></td></tr></table></figure>
<h3 id="根据id来查询一个note记录-修改后再保存到数据库里"><a href="#根据id来查询一个note记录-修改后再保存到数据库里" class="headerlink" title="根据id来查询一个note记录,修改后再保存到数据库里"></a>根据id来查询一个note记录,修改后再保存到数据库里</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Long id = <span class="number">1L</span>;</div><div class="line">Note note = noteDao.load(id);</div><div class="line"></div><div class="line">note.setText(<span class="string">"这是修改后的内容文本"</span>);</div><div class="line">note.setComment(<span class="string">"这是修改后的comment"</span>);</div><div class="line">noteDao.save(note);</div></pre></td></tr></table></figure>
<h3 id="删除所有note记录"><a href="#删除所有note记录" class="headerlink" title="删除所有note记录"></a>删除所有note记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">noteDao.deleteAll();</div></pre></td></tr></table></figure>
<h3 id="根据id删除一条note记录"><a href="#根据id删除一条note记录" class="headerlink" title="根据id删除一条note记录"></a>根据id删除一条note记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Long id = <span class="number">1</span>;</div><div class="line">noteDao.deleteByKey(id);</div></pre></td></tr></table></figure>
<h3 id="添加一条note记录"><a href="#添加一条note记录" class="headerlink" title="添加一条note记录"></a>添加一条note记录</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Note note = <span class="keyword">new</span> Note();</div><div class="line">note.setText(<span class="string">"这是note 内容文本"</span>);</div><div class="line">note.setComment(<span class="string">"这是note的comment"</span>);</div><div class="line">note.setDate(<span class="keyword">new</span> Date());</div><div class="line">note.setType(NoteType.TEXT);</div><div class="line">noteDao.insert(note);</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>greenDao的简单介绍就到这里。后续介绍GreenDao的进阶使用，包括<code>@ToOne</code> 一对一， <code>@ToMany</code> 一对多等使用介绍。同时介绍如何在现有项目中迁移到GreenDao，包括用统一的数据库管理类来对GreenDao进行轻度封装等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  在安卓移动APP开发过程中，一般使用安卓默认的sqlite数据库做数据持久化存储。虽然android提供了ContentProvider等框架支持，但是写SQL语句依然是一件不少程序猿的头疼的事。无论是简单的SQL语句，还是复杂的多表查询，都是
    
    </summary>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="GreenDAO" scheme="http://127.0.0.1:43110/tags/GreenDAO/"/>
    
      <category term="数据库" scheme="http://127.0.0.1:43110/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/tags/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>如何快速搭建模拟接口服务</title>
    <link href="http://127.0.0.1:43110/how-to-build-api-mock-service/"/>
    <id>http://127.0.0.1:43110/how-to-build-api-mock-service/</id>
    <published>2017-03-03T09:30:55.000Z</published>
    <updated>2017-03-18T08:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>相信大家在移动APP开发中，无论是做安卓还是iOS开发，都会遇到一个很尴尬的问题,接口没有开发好。而请求网络接口数据是开发中开发流程的第一步，因此方便快捷的模拟接口返回数据给APP，有助于提高开发效率。</p>
</blockquote>
<p>下面介绍2个工具来搭建模拟接口服务器。</p>
<ul>
<li>moco</li>
<li>ngrok</li>
</ul>
<h1 id="moco"><a href="#moco" class="headerlink" title="moco"></a>moco</h1><blockquote>
<p>在过去，我们通常部署一个war包到应用服务器，如Jetty或Tomcat等。我们都知道，开发一个war包然后部署到应用程序服务器太无聊，即使我们使用内嵌服务器，只要我们改变一点点，war包就要重新部署。  </p>
</blockquote>
<p> <strong>moco是一款开源的专注于模拟接口数据的开源工具。它有以下优势：</strong></p>
<ul>
<li>[x] 使用简单：提供下载一个jar文件外加简单的json配置就可运行的方式</li>
<li>[x] 配置灵活：可以用独立jar包加载json方式配置，也可以写java代码配置</li>
<li>[x] 高度可配置：可以对url，参数,请求方法，返回内容等进行配置</li>
<li>[x] 扩展强大：HTTPS，Socket，JUnit 集成，Maven 插件，Gradle 插件，Shell，Scala，满足你不同爱好</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li><p>下载 <a href="https://repo1.maven.org/maven2/com/github/dreamhead/moco-runner/0.11.0/moco-runner-0.11.0-standalone.jar" target="_blank" rel="external">moco独立运行程序</a></p>
</li>
<li><p>新建moco配置文件如下(foo.json):</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"response"</span> :</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"text"</span> : <span class="string">"Hello, Moco"</span></div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
<li><p>使用配置文件运行moco独立运行文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar moco-runner-&lt;version&gt;-standalone.jar http -p 12306 -c foo.json</div></pre></td></tr></table></figure>
</li>
<li><p>现在，打开浏览器访问 <a href="http://localhost:12306" target="_blank" rel="external">http://localhost:12306</a> ，你会看见配置的返回内容”Hello, Moco”</p>
</li>
</ul>
<p>更多使用方法，请参考<a href="https://github.com/dreamhead/moco/blob/master/moco-doc/apis.md#content" target="_blank" rel="external">moco的github说明文档</a></p>
<hr>
<h1 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h1><p>如果是个人开发，一个简单灵活的接口服务器就已经搭建成功了。APP只要把上文的<code>localhost</code>换成运行moco电脑的IP就能请求到模拟的数据。但是，手机和电脑需要同一个局域网。如果是团队开发，或者手机和电脑不在同一个局域网怎么办？ngrok就是用来解决这个问题的。</p>
<blockquote>
<p>ngrok提供了一个能够在公网安全访问内网Web主机的工具，能捕获所有HTTP请求的内容，也支持TCP端口映射，支持Linux、Windows、Mac OS X 等平台。</p>
</blockquote>
<p><strong>注意</strong><br>ngrok V1.X的版本是可以免费支持将一个固定的二级域名指向本机的，不过作者已经把 V2.X的版本商业化,我们使用一个国内免费提供的服务。网址 <a href="http://qydev.com" target="_blank" rel="external">http://qydev.com</a></p>
<ol>
<li><p>下载windows/linux/mac版本的客户端，解压到你喜欢的目录</p>
</li>
<li><p>在命令行下进入到解压目录下</p>
</li>
<li><p>执行 ngrok -config=ngrok.cfg -subdomain xxx 12306 //(xxx 是你自定义的域名前缀,12306是moco的端口)</p>
</li>
<li><p>如果开启成功 你就可以使用 xxx.tunnel.qydev.com 来访问你本机的 <code>127.0.0.1:12306</code>的服务啦</p>
</li>
</ol>
<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p> 打开 <a href="http://127.0.0.1:4040">http://127.0.0.1:4040</a> 可以查看ngrok访问情况。</p>
<p> 在linux下，ngrok 不能用 &amp; 实现后台运行，我们可以使用使用screen这个命令，步骤如下：</p>
<p> 安装screen apt-get install screen 运行 screen -S</p>
<p> 任意名字（例如：ngork） 然后运行ngrok启动命令</p>
<p> 最后按快捷键<code>ctrl+A+D</code>即可保持ngrok后台运行</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;相信大家在移动APP开发中，无论是做安卓还是iOS开发，都会遇到一个很尴尬的问题,接口没有开发好。而请求网络接口数据是开发中开发流程的第一步，因此方便快捷的模拟接口返回数据给APP，有助于提高开发效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下
    
    </summary>
    
      <category term="开发效率" scheme="http://127.0.0.1:43110/categories/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
    
      <category term="安卓" scheme="http://127.0.0.1:43110/tags/%E5%AE%89%E5%8D%93/"/>
    
      <category term="moco" scheme="http://127.0.0.1:43110/tags/moco/"/>
    
      <category term="ngrok" scheme="http://127.0.0.1:43110/tags/ngrok/"/>
    
      <category term="api" scheme="http://127.0.0.1:43110/tags/api/"/>
    
      <category term="模拟数据" scheme="http://127.0.0.1:43110/tags/%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
