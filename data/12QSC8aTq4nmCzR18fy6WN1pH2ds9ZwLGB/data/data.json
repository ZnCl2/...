{
	"title": "TechnoL0g",
	"description": "Заметки о крипте и разном",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 4,
	"demo": false,
	"modified": 1523164005,
	"post": [
		{
			"post_id": 3,
			"title": "CryptoPunks",
			"date_published": 1523162532.761,
			"body": "<video width=\"100%\" controls=\"\" name=\"media\"><source data-cke-saved-src=\"http://127.0.0.1:43110/1J8rt5k5QPLmAtRw5QAGmgKxi4qC7Lk166/data/users/1FBRhwEcbr4AYfwsvxXx7xEv6oi95xSNCh/1523162465-CryptoPunks.mp4\" src=\"http://127.0.0.1:43110/1J8rt5k5QPLmAtRw5QAGmgKxi4qC7Lk166/data/users/1FBRhwEcbr4AYfwsvxXx7xEv6oi95xSNCh/1523162465-CryptoPunks.mp4\" type=\"video/mp4\"></video>"
		},
		{
			"post_id": 2,
			"title": "Организация приема платежей в SmartHoldem",
			"date_published": 1523088909.526,
			"body": "На заре Биткоин 1.0, во время разработки платежных шлюзов для некоторых централизованных систем столкнулся с следующей проблемой - _отсутствие примечания к платежу_, в любой из биткоин подобных монет. И это была проблема, которая как известно решается методом выдачи каждому пользователю уникального адреса.\n\nВ данном руководстве рассматривается метод приема платежей с примечанием к платежу (сообщением) в экосистеме SmartHoldem. Сервис использует 1 адрес, но для каждого пользователя генерируется уникальная строка.\n\nДля простоты понимания в качестве бэкенда используется язык PHP.\n\nВ процессе участвуют: сервис (обменник) и пользователь (клиент).\n\n## Клиент\n\nСо стороны клиента некий сервис - обменник, генерирует для клиента исходные данные.\n\n![1522740860688-service1.jpg (958x302)](data/img/post_2_1522740860688-service1.jpg)\n\n*   сумма к получению в меняемой монете (задаваемая клиентом)\n*   расчетный результат к получению по текущему курсу STH > COIN\n*   адрес для отправки STH (для всех один)\n*   уникальная строка сообщения (идентифицирует отправителя)\n\nЗдесь на стороне сервиса в backend генерируется уникальная строка для каждого пользователя и сохраняется в базу данных, к примеру таблица вида:\n_userid(int), msg(string)_\n\n```\n<?php\n$msg = substr(md5(uniqid(microtime(), 1)) . getmypid(), 1, 8);\n\n// результат уникальная строка:  561559b2\n```\n\nКлиент, зная исходные данные, отправляет соответствующую **сумму** с **примечанием** на указанный **адрес** с помощью своего кошелька.\n\n![1522742749496-wallet_v1.jpg (1598x788)](data/img/post_2_1522742749496-wallet_v1.jpg)\n\n## Сервис\n\nТеперь в работу вступает backend сервиса, обработчик транзакций. Для простоты понимания будем использовать выполнения скрипта по **crontab**.\n\nСоздаем на стороне сервера php-файл, далее пропишем его на выполнение cron каждую минуту.\n\n```\n<?php\n$addr = 'Sg13BhANeairfS3o3w8N9sKaFrsht2bt4V'; //адрес проверки транзакций\n$limit  = 25; //лимит выдачи транзакций\n$offset = 0; // смещение\n\n//сортируем выдачу транзакций по timestamp с помощью orderBy\n$url = 'http://your_node_ip:6100/api/transactions?recipientId='.$addr.'&orderBy=timestamp&offset=0'; \n\n//получаем данные и преобразуем в массив\n$tx = json_decode(file_get_contents($url),true); \n\n/* \nесли транзакций более лимита, \nсмещаем offset указатель выдачи транзакций и получаем последние $limit транзакций, \nт.к. транзакций может быть сотни тысяч\n*/\nif ($tx['count'] > $limit) {\n    $offset = $tx['count'] - $limit; // расчет смещения\n    $url = 'http://your_node_ip:6100/api/transactions?recipientId=Sg13BhANeairfS3o3w8N9sKaFrsht2bt4V&orderBy=timestamp&offset='.$offset;\n    $tx = json_decode(file_get_contents($url),true);\n}\n\n// обрабатываем данные\nfor ($i = 0; $i < count($tx['transactions']); $i++) {\nprint \"<br>amount:\".$tx['transactions'][$i]['amount'].\n\" timestamp:\".$tx['transactions'][$i]['timestamp'].\n\" msg:\".$tx['transactions'][$i]['vendorField'].\n\" senderId:\".$tx['transactions'][$i]['senderId'].\n\" Txid:\".$tx['transactions'][$i]['id'];\n\n/*\nздесь выполняем необходимые проверки и операции записи в базу данных, \nк примеру добавляем баланс\n\nсохраняем в таблицу транзакций уникальные транзакции, \nкоторые и проверям при получении, \nк примеру txid, userid, timestamp, sum_sth, sum_coin\n*/\n\n/* \nпомним, баланс выдается в сатоши, \nне забываем его преобразовать точными функциями\n*/\n$sumCOIN = bcdiv($tx['transactions'][$i]['amount'],100000000,8); \n\n$set['btc_sth'] = 1; //курс по отношению к STH\n$sumBTC = bcdiv($sumCOIN, $set['btc_sth'], 8); //расчитываем курс монеты\n\n}\n```\n\nВот и все, транзакция обработана, операция выполнена.\n\n> **Новые операции**\n> +BTC за STH\n> 1.28 BTC / 0.32000000 STH\n> 03.04.18 09:59\n\n* * *\n\nпример не претендует на качество кода, он предназначен для базового понимания приема платежей.\n\n_Возможно в свою ноду интегрировать событийный скрипт с колбаками, к примеру считывать получение нового блока, затем находить транзакции предназначенные для вашего адреса, но это более сложный подход к простому приему транзакций, хотя и более элегантный._\n\nP.S. Событийный подход мы рассмотрим в следующих публикациях.\n\nP.P.S. Функция отправки сообщений будет доступна в версии кошелька 1.0 в ближайшие дни/неделю, с сотнями других дополнений и исправлений."
		}
	]
}