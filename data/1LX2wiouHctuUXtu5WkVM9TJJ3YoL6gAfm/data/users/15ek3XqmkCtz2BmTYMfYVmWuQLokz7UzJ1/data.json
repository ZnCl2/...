{
	"pages": [
		{
			"id": "e5cade10-b231-11e9-b958-c971bee0c3a1",
			"body": "# Lisp\n\nLisp (historically, LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.\n\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, object oriented programming, and the read–eval–print loop.\n\nThe name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\n\n## Syntax\n\n### Expressions\n\nIn Lisp, both code and data are expressions. Each such expression, when evaluated, returns a value. Those expressions are in fact linked list. The most commonly type of expression used is called *Symbolic expressions* (S-expressions).  Historically, another type of expressions called *Meta expressions* (M-expressions) used to express functions of S-expressions, existed but isn't widely used today, instead S-expressions are used to operate on all type of data, including other S-expressions.\n\n### Lists\n\nLists are one of the building blocks of Lisp. A list in lisp is a *pair* in which the second value of the pair is another list **or** the empty list nil. A pair is 2 values collected together. For example:\n\n`(cons 1 2)` \n\nwill create the (1 . 2) pair. So to express the list: 1 2 3 4 5, what we want is: '(1 . (2 . (3 . (4 . (5 . nil))))), which can be created:\n\n`(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))`\n\nThis list is represented as: `'(1 2 3 4 5)`\n\n### Symbols\n\nThe other building blocks of Lisp are the *Symbols*. A symbol is any object or sign that represent a specific cause. Most commonly, they are just strings without spaces, single quotes, backquotes or brackets. For example, all of the following are symbols:  \n\n- x\n- afs\n- 1\n- 2\n- 134\n- \"Hello World!\"\n\nand etc...\n\nSymbols can be used to create variables and functions, constants, data-types values and others. For example almost any dialect implements that any symbol consisting of only digits is a value of type number, 12 will be the number twelve and etc. To create a variable we will write:\n\n`(set! x 5)`\n\nNow the symbol x is associated with the value of 5. When x will be evaluated, it will return 5.\n\n### Quote\n\nIn order to distinguish between lists/symbols we use as data types and ones we want to evaluate we have the single quote. By default the Lisp REPL will evaluate everything, if, however, we precede an object with a single quote, or the keyword quote, it will not be evaluated. For example:\n\n```\n(set! x '(1 2 3 4 5))\n(set! y 'x)\n(set! z x)\n```\n\nAt the end of this example both x and z will have as values the list 1 2 3 4 5, while y will have the value x.",
			"date_added": 1564426298993,
			"slug": "lisp"
		},
		{
			"id": "cf3a5900-b231-11e9-9f30-bfab0780cf96",
			"body": "# Lisp\n\nLisp (historically, LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.\n\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, object oriented programming, and the read–eval–print loop.\n\nThe name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\n\n## Syntax\n\n### Expressions\n\nIn Lisp, both code and data are expressions. Each such expression, when evaluated, returns a value. Those expressions are in fact linked list. The most commonly type of expression used is called *Symbolic expressions* (S-expressions).  Historically, another type of expressions called *Meta expressions* (M-expressions) used to express functions of S-expressions, existed but isn't widely used today, instead S-expressions are used to operate on all type of data, including other S-expressions.\n\n### Lists\n\nLists are one of the building blocks of Lisp. A list in lisp is a *pair* in which the second value of the pair is another list **or** the empty list nil. A pair is 2 values collected together. For example:\n\n`(cons 1 2)` \n\nwill create the (1 . 2) pair. So to express the list: 1 2 3 4 5, what we want is: '(1 . (2 . (3 . (4 . (5 . nil))))), which can be created:\n\n`(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))`\n\nThis list is represented as: `'(1 2 3 4 5)`\n\n### Symbols\n\nThe other building blocks of Lisp are the *Symbols*. A symbol is any object or sign that represent a specific cause. Most commonly, they are just strings without spaces, single quotes, backquotes or brackets. For example, all of the following are symbols:  \n\n- x\n- afs\n- 1\n- 2\n- 134\n- \"Hello World!\"\n\nand etc...\n\nSymbols can be used to create variables and functions, constants, data-types values and others. For example almost any dialect implements that any symbol consisting of only digits is a value of type number, 12 will be the number twelve and etc. To create a variable we will write:\n\n`(set! x 5)`\n\nNow the symbol x is associated with the value of 5. When x will be evaluated, it will return 5.\n\n### Quote\n\nIn order to distinguish between lists/symbols we use as data types and ones we want to evaluate we have the single quote. By default the Lisp REPL will evaluate everything, if, however, we precede an object with a single quote, or the keyword quote, it will not be evaluated. For example:\n\n```\n(set! x '(1 2 3 4 5))\n(set! y 'x)\n(set! z x)\n` ``\n\nAt the end of this example both x and z will have as values the list 1 2 3 4 5, while y will have the value x.",
			"date_added": 1564426261136,
			"slug": "lisp"
		},
		{
			"id": "cf245570-b230-11e9-9f30-bfab0780cf96",
			"body": "# Lisp\n\nLisp (historically, LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.\n\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, object oriented programming, and the read–eval–print loop.\n\nThe name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\n\n## Syntax\n\n### Expressions\n\nIn Lisp, both code and data are expressions. Each such expression, when evaluated, returns a value. Those expressions are in fact linked list. The most commonly type of expression used is called *Symbolic expressions* (S-expressions).  Historically, another type of expressions called *Meta expressions* (M-expressions) used to express functions of S-expressions, existed but isn't widely used today, instead S-expressions are used to operate on all type of data, including other S-expressions.\n\n### Lists\n\nLists are one of the building blocks of Lisp. A list in lisp is a *pair* in which the second value of the pair is another list **or** the empty list nil. A pair is 2 values collected together. For example:\n\n`(cons 1 2)` \n\nwill create the (1 . 2) pair. So to express the list: 1 2 3 4 5, what we want is: '(1 . (2 . (3 . (4 . (5 . nil))))), which can be created:\n\n`(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))`\n\nThis list is represented as: `'(1 2 3 4 5)`\n\n### Symbols\n\nThe other building blocks of Lisp are the *Symbols*. A symbol is any object or sign that represent a specific cause. Most commonly, they are just strings without spaces, single qutes, backqutes or brackets. For example, all of the following are symbols:  \n\n- x\n- afs\n- 1\n- 2\n- 134\n- \"Hello World!\"\n\nand etc...",
			"date_added": 1564425831496,
			"slug": "lisp"
		},
		{
			"id": "26ec3760-b230-11e9-9f30-bfab0780cf96",
			"body": "# Lisp\n\nLisp (historically, LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.\n\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, object oriented programming, and the read–eval–print loop.\n\nThe name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\n\n## Syntax\n\n### Expressions\n\nIn Lisp, both code and data are expressions. Each such expression, when evaluated, returns a value. Those expressions are in fact linked list. The most commonly type of expression used is called *Symbolic expressions* (S-expressions).  Historically, another type of expressions called *Meta expressions* (M-expressions) used to express functions of S-expressions, existed but isn't widely used today, instead S-expressions are used to operate on all type of data, including other S-expressions.\n\n### Lists\n\nLists are the building blocks of Lisp. A list in lisp is a *pair* in which the second value of the pair is another list **or** the empty list nil. A pair is 2 values collected together. For example:\n\n`(cons 1 2)` \n\nwill create the (1 . 2) pair. So to express the list: 1 2 3 4 5, what we want is: '(1 . (2 . (3 . (4 . (5 . nil))))), which can be created:\n\n`(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))`\n\nThis list is represented as: `'(1 2 3 4 5)`",
			"date_added": 1564425549270,
			"slug": "lisp"
		},
		{
			"id": "19dba470-b230-11e9-9f30-bfab0780cf96",
			"body": "# Lisp\n\nLisp (historically, LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.\n\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, object oriented programming, and the read–eval–print loop.\n\nThe name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\n\n## Syntax\n\n### Expressions\n\nIn Lisp, both code and data are expressions. Each such expression, when evaluated, returns a value. Those expressions are in fact linked list. The most commonly type of expression used is called *Symbolic expressions* (S-expressions).  Historically, another type of expressions called *Meta expressions* (M-expressions) used to express functions of S-expressions, existed but isn't widely used today, instead S-expressions are used to operate on all type of data, including other S-expressions.\n\n### Lists\n\nLists are the building blocks of Lisp. A list in lisp is a *pair* in which the second value of the pair is another list **or** the empty list nil. A pair is 2 values collected together. For example:\n\n`(cons 1 2)` \n\nwill create the (1 . 2) pair. So to express the list: 1 2 3 4 5, what we want is: '(1 . (2 . (3 . (4 . (5 . nil))))), which can be created:\n\n`(cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))`\n\nThis list is represented as: '(1 2 3 4 5).",
			"date_added": 1564425527352,
			"slug": "lisp"
		}
	]
}