{
    "article": [
        {
            "title": "C (programming language)",
            "text": "{{pp-protect|small=yes}}\n{{Redirect|C Programming Language|the book|The C Programming Language}}\n{{Infobox programming language\n| name                   = C\n| logo                   =  File:The C Programming Language logo.svg\n| logo size              = 140px\n| logo alt               = Text in light blue serif capital letters on white background and very large light blue sans-serif letter C.\n| logo caption           = ''[[The C Programming Language]]''<ref name=\"k&r1e\" /> (often referred to as \"K&R\"), the seminal book on C\n| paradigm               = [[Imperative programming|Imperative]] ([[Procedural programming|procedural]]), [[structured programming|structured]]\n| designer               = [[Dennis Ritchie]]\n| developer              = [[Dennis Ritchie]] & [[Bell Labs]] (creators); ANSI X3J11 ([[ANSI C]]); {{nobr|ISO/IEC JTC1/SC22/WG14}} (ISO C)\n| latest release version = [[C11 (C standard revision)|C11]]\n| latest release date    = {{start date and age|2011|12}}\n| typing                 = [[Type system|Static]], [[Weak typing|weak]], [[manifest typing|manifest]], [[Nominal type system|nominal]]\n| implementations        = K&R, [[GNU Compiler Collection|GCC]], [[Clang]], {{nowrap|[[Intel C++ Compiler|Intel C]],}} [[Microsoft Visual C++]], {{nowrap|[[Pelles C]],}} {{nowrap|[[Watcom C/C++ compiler|Watcom C]]}}\n| dialects               = [[Cyclone (programming language)|Cyclone]], [[Unified Parallel C]], [[Split-C]], [[Cilk]], [[C*]]\n| influenced             = [[:Category:C programming language family|Numerous]]: [[AMPL]], [[AWK]], [[C shell|csh]], [[C++]], [[C--]], [[C Sharp (programming language)|C#]], [[Objective-C]], [[D (programming language)|D]], [[Go (programming language)|Go]], [[Java (programming language)|Java]], [[JavaScript]], [[Julia (programming language)|Julia]], [[Limbo (programming language)|Limbo]], [[LPC (programming language)|LPC]], [[Perl]], [[PHP]], [[Pike (programming language)|Pike]], [[Processing (programming language)|Processing]], [[Python (programming language)|Python]], [[Ring (programming language)|Ring]]<ref name=\"Ring language and other languages\">{{cite web |url=http://ring-lang.sourceforge.net/doc1.6/introduction.html#ring-and-other-languages |title=Ring language and other languages  |author=Ring Team |date=5 December 2017 |work=ring-lang.net |publisher=[[ring-lang]]}}</ref>, [[Rust (programming language)|Rust]], [[Seed7]], [[Vala (programming language)|Vala]], [[Verilog]] (HDL)<ref name=\"vinsp\">{{cite web|title=Verilog HDL (and C)|url=http://cs.anu.edu.au/courses/ENGN3213/lectures/lecture6_VERILOG_2010.pdf|date=2010-06-03|accessdate=2013-08-19|publisher=The Research School of Computer Science at the Australian National University|quote=1980s: ; Verilog first introduced ; Verilog inspired by the C programming language|deadurl=yes|archiveurl=https://web.archive.org/web/20131106064022/http://cs.anu.edu.au/courses/ENGN3213/lectures/lecture6_VERILOG_2010.pdf|archivedate=2013-11-06|df=}}</ref>, [[Nim (programming language)|Nim]]\n| operating system       = [[Cross-platform]]\n| year                   = {{start date and age|1972}}<ref name=\"dottcl_2\" />\n| turing-complete        = Yes\n| influenced_by          = [[B (programming language)|B]] ([[BCPL]], [[CPL (programming language)|CPL]]), [[ALGOL 68]],<ref name=\"dottcl\" /> [[Assembly language|Assembly]], [[PL/I]], [[FORTRAN]]\n| file ext               = {{Mono|.c}}, {{Mono|.h}}\n| wikibooks              = C Programming\n}}\n'''C''' ({{IPAc-en|s|iÀê}}, as in the [[C|letter ''c'']]) is a [[General-purpose language|general-purpose]], [[imperative programming|imperative]] computer [[programming language]], supporting [[structured programming]], [[lexical variable scope]] and [[Recursion (computer science)|recursion]], while a [[static type system]] prevents many unintended operations. By design, C provides constructs that map efficiently to typical [[machine instruction]]s, and therefore it has found lasting use in applications that had formerly been coded in [[assembly language]], including [[operating system]]s, as well as various [[application software]] for computers ranging from [[supercomputer]]s to [[embedded system]]s.\n\nC was originally developed by [[Dennis Ritchie]] between 1969 and 1973 at [[Bell Labs]],<ref name=\"chistory\" /> and used to re-implement the [[Unix]] operating system.<ref name=\"AutoTX-1\" />  It has since become one of the [[Measuring programming language popularity|most widely used programming languages]] of all time,<ref name=\"AutoTX-2\" /><ref name=\"AutoTX-3\" /> with C [[compiler]]s from various vendors available for the majority of existing [[computer architecture]]s and operating systems.  C has been standardized by the [[American National Standards Institute]] (ANSI) since 1989 (see [[ANSI C]]) and subsequently by the [[International Organization for Standardization]] (ISO).\n\nC is an [[imperative programming|imperative]] [[procedural programming|procedural]] language.  It was designed to be compiled using a relatively straightforward [[compiler]], to provide low-level access to memory, to provide language constructs that map efficiently to machine instructions, and to require minimal [[Run-time system|run-time support]]. Despite its low-level capabilities, the language was designed to encourage [[cross-platform]] programming.  A standards-compliant C program that is written with [[porting|portability]] in mind can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code.  The language has become available on a very wide range of platforms, from embedded [[microcontroller]]s to [[supercomputer]]s.\n\n== Overview ==\n[[File:Ken n dennis.jpg|thumb|[[Dennis Ritchie]] (right), the inventor of the C programming language, with [[Ken Thompson]]]]\n\nLike most imperative languages in the [[ALGOL]] tradition, C has facilities for [[structured programming]] and allows [[lexical variable scope]] and recursion, while a static [[type system]] prevents many unintended operations.  In C, all [[executable code]] is contained within [[subroutine]]s, which are called \"functions\" (although not in the strict sense of [[functional programming]]). [[Function parameter]]s are always passed by value. Pass-by-reference is simulated in C by explicitly passing [[pointer (computer programming)|pointer]] values. C program source text is [[free-form language|free-format]], using the [[semicolon]] as a [[Statement (programming)|statement]] terminator and [[curly braces]] for grouping [[blocks of statements]].\n\nThe C language also exhibits the following characteristics:\n\n* There is a small, fixed number of keywords, including a full set of [[control flow]] primitives: <code>[[For loop|for]]</code>, <code>[[Conditional (programming)|if/else]]</code>, <code>[[While loop|while]]</code>, <code>[[Switch statement|switch]]</code>, and <code>[[Do while loop|do/while]]</code>. User-defined names are not distinguished from keywords by any kind of [[Sigil (computer programming)|sigil]].\n* There are a large number of arithmetical and logical operators, such as <code>+</code>, <code>+=</code>, <code>++</code>, <code>&amp;</code>, <code>~</code>, etc.\n* More than one [[Assignment (computer science)|assignment]] may be performed in a single statement.\n* Function return values can be ignored when not needed.\n* Typing is [[Static typing|static]], but [[Strong and weak typing|weakly enforced]]: all data has a type, but implicit conversions may be performed.\n* [[Declaration (computer programming)|Declaration]] [[C syntax|syntax]] mimics usage context. C has no \"define\" keyword; instead, a statement beginning with the name of a type is taken as a declaration. There is no \"function\" keyword; instead, a function is indicated by the parentheses of an argument list.\n* User-defined (<code>typedef</code>) and compound types are possible.\n** Heterogeneous aggregate data types (<code>[[struct (C programming language)|struct]]</code>) allow related data elements to be accessed and assigned as a unit.\n** Union is a structure with overlapping members; only the last member stored is valid.\n** [[Array data type|Array]] indexing is a secondary notation, defined in terms of pointer arithmetic. Unlike structs, arrays are not first-class objects; they cannot be assigned or compared using single built-in operators. There is no \"array\" keyword, in use or definition; instead, square brackets indicate arrays syntactically, for example <code>month[11]</code>.\n** [[Enumerated type]]s are possible with the <code>enum</code> keyword. They are freely interconvertible with integers.\n** [[String (computer science)|Strings]] are not a separate data type, but are conventionally [[C string handling|implemented]] as [[Null-terminated string|null-terminated]] arrays of characters.\n* Low-level access to [[computer memory]] is possible by converting machine addresses to typed [[pointer (computer programming)|pointers]].\n* [[Procedure (computer science)|Procedures]] (subroutines not returning values) are a special case of function, with an untyped return type <code>void</code>.\n* Functions may not be defined within the lexical scope of other functions.\n* Function and data pointers permit ''ad hoc'' [[run-time polymorphism]].\n* A [[C preprocessor|preprocessor]] performs [[Macro (computer science)|macro]] definition, [[source code]] file inclusion, and [[conditional compilation]].\n* There is a basic form of [[Modular programming|modularity]]: files can be compiled separately and [[Linker (computing)|linked]] together, with control over which functions and data objects are visible to other files via [[Static (keyword)|<code>static</code>]] and <code>extern</code> attributes.\n* Complex functionality such as [[input/output|I/O]], [[string (computer science)|string]] manipulation, and mathematical functions are consistently delegated to [[library (computing)|library routines]].\n\nWhile C does not include some features found in some other languages, such as [[object-oriented programming|object orientation]] or [[garbage collection (computer science)|garbage collection]], such features can be implemented or emulated in C, often by way of external libraries (e.g., the [[Boehm garbage collector]] or the [[GObject|GLib Object System]]).\n\n=== Relations to other languages ===\nMany later languages have borrowed directly or indirectly from C, including [[C++]], [[C Sharp (programming language)|C#]], Unix's [[C shell]], [[D (programming language)|D]], [[Go (programming language)|Go]], [[Java (programming language)|Java]], [[JavaScript]], [[Limbo (programming language)|Limbo]], [[LPC (programming language)|LPC]], [[Objective-C]], [[Perl]], [[PHP]], [[Python (programming language)|Python]], [[Rust (programming language)|Rust]], [[Swift (programming language)|Swift]], and [[Verilog]] (hardware description language)<ref name=\"vinsp\" />.  These languages have drawn many of their [[control structures]] and other basic features from C.  Most of them (with Python being the most dramatic exception) are also very [[Syntax (programming languages)|syntactically]] similar to C in general, and they tend to combine the recognizable expression and statement [[C syntax|syntax of C]] with underlying type systems, data models, and semantics that can be radically different.\n\n== History ==\n\n=== Early developments ===\n{| class=\"wikitable floatright\" style=\"margin-left: 1.5em;\"\n|-\n! Year\n! C Standard<ref>{{cite web|url=http://en.cppreference.com/w/c/language/history|title=History of C - cppreference.com|website=en.cppreference.com}}</ref>\n|-\n| 1972\n| Birth\n|-\n| 1978\n| K&R C\n|-\n| 19(89/90)\n| ANSI C and ISO C\n|-\n| 1999\n| C99\n|-\n| 2011\n| C11\n|}\n\nThe origin of C is closely tied to the development of the [[Unix]] operating system, originally implemented in [[assembly language]] on a [[PDP-7]] by Dennis Ritchie and Ken Thompson, incorporating several ideas from colleagues.  Eventually, they decided to port the operating system to a [[PDP-11]]. The original PDP-11 version of Unix was developed in assembly language. The developers were considering rewriting the system using the [[B (programming language)|B language]], Thompson's simplified version of [[BCPL]].<ref name=\"sigplan\">{{cite journal | first = Dennis M.| last = Ritchie | authorlink = Dennis Ritchie | title = The Development of the C Language | date = March 1993 | journal = ACM SIGPLAN Notices | volume = 28 | issue = 3 | pages = 201‚Äì208 | url = http://www.bell-labs.com/usr/dmr/www/chist.html | doi = 10.1145/155360.155580 | ref = harv}}</ref> However B's inability to take advantage of some of the PDP-11's features, notably [[byte]] addressability, led to C. The name of C was chosen simply as the next after B.<ref>Ulf Bilting & Jan Skansholm \"V√§gen till C\" (Swedish) meaning \"The Road to C\", third edition, [[Studentlitteratur]], year 2000, page 3. {{ISBN|91-44-01468-6}}.</ref>\n\nThe development of C started in 1972 on the PDP-11 Unix system<ref name=\"unixport\" /> and first appeared in [[Version 2 Unix]].<ref>{{cite techreport |first=M. D. |last=McIlroy |authorlink=Doug McIlroy |year=1987 |url=http://www.cs.dartmouth.edu/~doug/reader.pdf |title=A Research Unix reader: annotated excerpts from the Programmer's Manual, 1971‚Äì1986 |series=CSTR |number=139 |institution=Bell Labs |format=PDF |page=10}}</ref> The language was not initially designed with portability in mind, but soon ran on different platforms as well: a compiler for the [[Honeywell 6000]] was written within the first year of C's history, while an [[IBM System/370]] port followed soon.<ref name=\"k&r1e\" /><ref name=\"unixport\" /><!-- note: there is an OCR error in the \"unixport\" reference that has converted \"370\" to \"310\" -->\n\nAlso in 1972, a large part of Unix was rewritten in C.<ref name=\"Stallings\">Stallings, William. \"Operating Systems: Internals and Design Principles\" 5th ed, page 91. Pearson Education, Inc. 2005.</ref> By 1973, with the addition of <code>struct</code> types, the C language had become powerful enough that most of the [[Unix]] [[Kernel (operating system)|kernel]] was now in C.\n\nUnix was one of the first operating system kernels implemented in a language other than [[assembly language|assembly]]. Earlier instances include the [[Multics]] system (which was written in [[PL/I]]) and [[MCP (Burroughs Large Systems)|Master Control Program]] (MCP) for the [[Burroughs large systems|Burroughs B5000]] (which was written in [[ALGOL]]) in 1961. In around <!--Better?: {{Circa|1977}}--> 1977, Ritchie and [[Stephen C. Johnson]] made further changes to the language to facilitate portability of the Unix operating system.  Johnson's [[Portable C Compiler]] served as the basis for several implementations of C on new platforms.<ref name=\"unixport\">{{cite journal |last1=Johnson |first1=S. C. |authorlink1=Stephen C. Johnson |last2=Ritchie |first2=D. M. |authorlink2=Dennis Ritchie |title=Portability of C Programs and the UNIX System |journal=Bell System Tech. J. |year=1978 |volume=57 |issue=6 |pages=2021‚Äì2048 |url=http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.138.35&rep=rep1&type=pdf |accessdate=16 December 2012 |doi=10.1002/j.1538-7305.1978.tb02141.x}} (Note: this reference is an OCR scan of the original, and contains an OCR glitch rendering \"IBM 370\" as \"IBM 310\".)</ref>\n\n=== K&R C ===\n[[File:The C Programming Language, First Edition Cover (2).svg|thumb|240x240px|The cover of the book, ''The C Programming Language'', first edition by [[Brian Kernighan]] and [[Dennis Ritchie]] ]]\nIn 1978, [[Brian Kernighan]] and [[Dennis Ritchie]] published the first edition of ''[[The C Programming Language]]''.<ref name=\"k&r1e\" /> This book, known to C programmers as \"K&R\", served for many years as an informal [[specification]] of the language. The version of C that it describes is commonly referred to as ''K&R C''. The second edition of the book<ref name=\"k&r2e\" /> covers the later [[ANSI C]] standard, described below.\n\nK&R introduced several language features:\n\n* Standard I/O library\n* <code>long int</code> data type\n* <code>unsigned int</code> data type\n* Compound assignment operators of the form <code>=''op''</code> (such as <code>=-</code>) were changed to the form <code>''op''=</code> (that is, <code>-=</code>) to remove the semantic ambiguity created by constructs such as <code>i=-10</code>, which had been interpreted as <code>i&nbsp;=-&nbsp;10</code> (decrement <code>i</code> by 10) instead of the possibly intended <code>i&nbsp;=&nbsp;-10</code> (let <code>i</code> be -10).\n\nEven after the publication of the 1989 ANSI standard, for many years K&R C was still considered the \"[[Lowest common denominator (computers)|lowest common denominator]]\" to which C programmers restricted themselves when maximum portability was desired, since many older compilers were still in use, and because carefully written K&R C code can be legal Standard C as well.\n\nIn early versions of C, only functions that return types other than <code>int</code> must be declared if used before the function definition; functions used without prior declaration were presumed to return type <code>int</code>.\n\nFor example:\n\n<source lang=\"cpp\">\nlong some_function();\n/* int */ other_function();\n\n/* int */ calling_function()\n{\n    long test1;\n    register /* int */ test2;\n\n    test1 = some_function();\n    if (test1 > 0)\n          test2 = 0;\n    else\n          test2 = other_function();\n    return test2;\n}\n</source>\n\nThe <code>int</code> type specifiers which are commented out could be omitted in K&R C, but are required in later standards.\n\nSince K&R function declarations did not include any information about function arguments, function parameter [[type checking|type checks]] were not performed, although some compilers would issue a warning message if a local function was called with the wrong number of arguments, or if multiple calls to an external function used different numbers or types of arguments.  Separate tools such as Unix's [[lint programming tool|lint]] utility were developed that (among other things) could check for consistency of function use across multiple source files.\n\nIn the years following the publication of K&R C, several features were added to the language, supported by compilers from AT&T (in particular [[Portable C Compiler|PCC]]<ref>{{cite report |first=Bjarne |last=Stroustrup |authorlink=Bjarne Stroustrup |title=Sibling rivalry: C and C++ |publisher=AT&T Labs |number=TD-54MQZY |year=2002 |url=http://stroustrup.com/sibling_rivalry.pdf}}</ref>) and some other vendors. These included:\n\n* <code>[[void type|void]]</code> functions (i.e., functions with no return value)\n* functions returning <code>[[Struct (C programming language)|struct]]</code> or <code>[[union (computer science)|union]]</code> types (rather than pointers)\n* [[assignment (computer science)|assignment]] for <code>struct</code> data types\n* [[enumerated type]]s\n\nThe large number of extensions and lack of agreement on a [[C standard library|standard library]], together with the language popularity and the fact that not even the Unix compilers precisely implemented the K&R specification, led to the necessity of standardization.\n\n=== ANSI C and ISO C ===\n{{Main article|ANSI C}}\n\n<!-- [[WP:NFCC]] violation: [[File:The C Programming Language cover.svg|thumb|240x240px|The cover of the book, ''[[The C Programming Language]]'', second edition by [[Brian Kernighan]] and [[Dennis Ritchie]] covering ANSI C]] -->\nDuring the late 1970s and 1980s, versions of C were implemented for a wide variety of [[mainframe computer]]s, [[minicomputer]]s, and [[microcomputer]]s, including the [[IBM PC]], as its popularity began to increase significantly.\n\nIn 1983, the [[American National Standards Institute]] (ANSI) formed a committee, X3J11, to establish a standard specification of C. X3J11 based the C standard on the Unix implementation; however, the non-portable portion of the Unix C library was handed off to the [[Institute of Electrical and Electronics Engineers|IEEE]] [[working group]] 1003 to become the basis for the 1988 [[POSIX]] standard. In 1989, the C standard was ratified as ANSI X3.159-1989 \"Programming Language C\".  This version of the language is often referred to as [[ANSI C]], Standard C, or sometimes C89.\n\nIn 1990, the ANSI C standard (with formatting changes) was adopted by the [[International Organization for Standardization]] (ISO) as ISO/IEC 9899:1990, which is sometimes called C90. Therefore, the terms \"C89\" and \"C90\" refer to the same programming language.\n\nANSI, like other national standards bodies, no longer develops the C standard independently, but defers to the international C standard, maintained by the working group [[ISO/IEC JTC1/SC22]]/WG14.  National adoption of an update to the international standard typically occurs within a year of ISO publication.\n\nOne of the aims of the C standardization process was to produce a [[superset]] of K&R C, incorporating many of the subsequently introduced unofficial features. The standards committee also included several additional features such as [[function prototype]]s (borrowed from C++), <code>void</code> pointers, support for international [[character encoding|character sets]] and [[Locale (computer software)|locales]], and preprocessor enhancements. Although the [[C syntax|syntax]] for parameter declarations was augmented to include the style used in C++, the K&R interface continued to be permitted, for compatibility with existing source code.\n\nC89 is supported by current C compilers, and most C code being written today is based on it. Any program written only in Standard C and without any hardware-dependent assumptions will run correctly on any [[Computing platform|platform]] with a conforming C implementation, within its resource limits.  Without such precautions, programs may compile only on a certain platform or with a particular compiler, due, for example, to the use of non-standard libraries, such as [[Graphical user interface|GUI]] libraries, or to a reliance on compiler- or platform-specific attributes such as the exact size of data types and byte [[endianness]].\n\nIn cases where code must be compilable by either standard-conforming or K&R C-based compilers, the <code>__STDC__</code> macro can be used to split the code into Standard and K&R sections to prevent the use on a K&R C-based compiler of features available only in Standard C.\n\nAfter the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995, Normative Amendment 1 to the 1990 C standard (ISO/IEC 9899/AMD1:1995, known informally as C95) was published, to correct some details and to add more extensive support for international character sets.<ref>{{cite book |author=<!--Staff writer(s); no by-line.--> |title=C Integrity |url=https://www.iso.org/standard/23909.html |publisher=International Organization for Standardization |date=1995-03-30}}</ref>\n\n=== C99 ===\n{{Main article|C99}}\n\nThe C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as \"[[C99]]\". It has since been amended three times by Technical Corrigenda.<ref name=\"AutoTX-5\" />\n\nC99 introduced several new features, including [[inline function]]s, several new [[data type]]s (including <code>long long int</code> and a <code>complex</code> type to represent [[complex number]]s), [[variable-length array]]s and [[flexible array member]]s, improved support for [[IEEE 754]] floating point, support for [[variadic macro]]s (macros of variable [[arity]]), and support for one-line comments beginning with <code>//</code>, as in [[BCPL]] or C++. Many of these had already been implemented as extensions in several C compilers.\n\nC99 is for the most part backward compatible with C90, but is stricter in some ways; in particular, a declaration that lacks a type specifier no longer has <code>int</code> implicitly assumed. A standard macro <code>__STDC_VERSION__</code> is defined with value <code>199901L</code> to indicate that C99 support is available. [[GNU Compiler Collection|GCC]], [[Sun Studio (software)|Solaris Studio]], and other C compilers now support many or all of the new features of C99. The C compiler in [[Microsoft Visual C++]], however, implements the C89 standard and those parts of C99 that are required for compatibility with [[C++11]].<ref>{{cite web |url=http://www.drdobbs.com/cpp/interview-with-herb-sutter/231900562 |title=Interview with Herb Sutter |website=[[Dr. Dobbs]] |author=Andrew Binstock |date=October 12, 2011 |accessdate=September 7, 2013}}</ref>\n\n=== C11 ===\n{{Main article|C11 (C standard revision)}}\n\nIn 2007, work began on another revision of the C standard, informally called \"C1X\" until its official publication on 2011-12-08. The C standards committee adopted guidelines to limit the adoption of new features that had not been tested by existing implementations.\n\nThe C11 standard adds numerous new features to C and the library, including type generic macros, anonymous structures, improved Unicode support, atomic operations, multi-threading, and bounds-checked functions.  It also makes some portions of the existing C99 library optional, and improves compatibility with C++. The standard macro <code>__STDC_VERSION__</code> is defined as <code>201112L</code> to indicate that C11 support is available.\n\n=== Embedded C ===\n{{Main article|Embedded C}}\n\nHistorically, embedded C programming requires nonstandard extensions to the C language in order to support exotic features such as fixed-point arithmetic, multiple distinct memory banks, and basic I/O operations.\n\nIn 2008, the C Standards Committee published a technical report extending the C language<ref name=\"AutoTX-6\" /> to address these issues by providing a common standard for all implementations to adhere to. It includes a number of features not available in normal C, such as [[fixed-point arithmetic]], named address spaces, and basic I/O hardware addressing.\n\n== Syntax ==\n{{Main article|C syntax}}\n\nC has a [[formal grammar]] specified by the C standard.<ref name=\"h&s5e\" /> Line endings are generally not significant in C; however, line boundaries do have significance during the preprocessing phase. Comments may appear either between the delimiters <code>/*</code> and <code>*/</code>, or (since C99)  following <code>//</code> until the end of the line. Comments delimited by <code>/*</code> and <code>*/</code> do not nest, and these sequences of characters are not interpreted as comment delimiters if they appear inside [[string literal|string]] or character literals.<ref name=\"KandR1\">{{cite book\n | last = Kernighan\n | first = Brian W.\n | authorlink = Brian Kernighan\n | last2 = Ritchie\n | first2 = Dennis M.\n | authorlink2 = Dennis Ritchie\n | title = The C Programming Language\n | publisher = [[Prentice Hall]]\n | series =\n | volume =\n | edition = 2nd\n | year = 1996\n | location =\n | page = 192\n | language =\n | url =\n | doi =\n | id =\n | isbn = 7 302 02412 X\n | mr =\n | zbl =\n | jfm = }}</ref>\n\nC source files contain declarations and function definitions. Function definitions, in turn, contain declarations and [[Statement (programming)|statements]]. Declarations either define new types using keywords such as <code>struct</code>, <code>union</code>, and <code>enum</code>, or assign types to and perhaps reserve storage for new variables, usually by writing the type followed by the variable name. Keywords such as <code>char</code> and <code>int</code> specify built-in types. Sections of code are enclosed in braces (<code>{</code> and <code>}</code>, sometimes called \"curly brackets\") to limit the scope of declarations and to act as a single statement for control structures.\n\nAs an imperative language, C uses ''statements'' to specify actions. The most common statement is an ''expression statement'', consisting of an expression to be evaluated, followed by a semicolon; as a side effect of the evaluation, functions may be [[procedure call|called]] and variables may be [[assignment (computer science)|assigned]] new values. To modify the normal sequential execution of statements, C provides several control-flow statements identified by reserved keywords. [[Structured programming]] is supported by <code>if</code>(-<code>else</code>) conditional execution and by <code>do</code>-<code>while</code>, <code>while</code>, and <code>for</code> iterative execution (looping). The <code>for</code> statement has separate initialization, testing, and reinitialization expressions, any or all of which can be omitted. <code>break</code> and <code>continue</code> can be used to leave the innermost enclosing loop statement or skip to its reinitialization. There is also a non-structured <code>[[goto]]</code> statement which branches directly to the designated [[Label (computer science)|label]] within the function. <code>switch</code> selects a <code>case</code> to be executed based on the value of an integer expression.\n\nExpressions can use a variety of built-in operators and may contain function calls. The order in which arguments to functions and operands to most operators are evaluated is unspecified. The evaluations may even be interleaved. However, all side effects (including storage to variables) will occur before the next \"[[sequence point]]\"; sequence points include the end of each expression statement, and the entry to and return from each function call.  Sequence points also occur during evaluation of expressions containing certain operators (<code>&&</code>, <code>||</code>, <code>[[?:]]</code> and the [[comma operator]]). This permits a high degree of object code optimization by the compiler, but requires C programmers to take more care to obtain reliable results than is needed for other programming languages.\n\nKernighan and Ritchie say in the Introduction of ''The C Programming Language'': \"C, like any other language, has its blemishes. Some of the operators have the wrong precedence; some parts of the syntax could be better.\"{{refn|Page 3 of the original K&R<ref name=\"k&r1e\" />}} The C standard did not attempt to correct many of these blemishes, because of the impact of such changes on already existing software.\n\n=== Character set ===\nThe basic C source character set includes the following characters:\n\n* Lowercase and uppercase letters of ISO Basic Latin Alphabet: <code>a</code>‚Äì<code>z</code> <code>A</code>‚Äì<code>Z</code>\n* Decimal digits: <code>0</code>‚Äì<code>9</code>\n* Graphic characters: <code>! \" # % & ' ( ) * + , - . / : ; < = > ? [ \\ ] ^ _ { | } ~</code>\n* [[Whitespace character]]s: ''[[space (punctuation)|space]]'', ''[[Tab character|horizontal tab]]'', ''[[Tab character|vertical tab]]'', ''[[Page break|form feed]]'', ''[[newline]]''\n\nNewline indicates the end of a text line; it need not correspond to an actual single character, although for convenience C treats it as one.\n\nAdditional multi-byte encoded characters may be used in string literals, but they are not entirely [[software portability|portable]].  The latest C standard ([[C11 (C standard revision)|C11]]) allows multi-national [[Unicode]] characters to be embedded portably within C source text by using <code>\\uXXXX</code> or <code>\\UXXXXXXXX</code> encoding (where the <code>X</code> denotes a hexadecimal character), although this feature is not yet widely implemented.\n\nThe basic C execution character set contains the same characters, along with representations for [[Bell character|alert]], [[backspace]], and [[carriage return]]. [[Run time (program lifecycle phase)|Run-time]] support for extended character sets has increased with each revision of the C standard.\n\n=== Reserved words ===\nC89 has 32 reserved words, also known as keywords, which are the words that cannot be used for any purposes other than those for which they are predefined:\n\n{{col-begin}}\n{{col-break|width=20%}}\n:<code>auto</code>\n:<code>break</code>\n:<code>case</code>\n:<code>char</code>\n:<code>const</code>\n:<code>continue</code>\n:<code>default</code>\n:<code>do</code>\n{{col-break|width=20%}}\n:<code>[[double precision|double]]</code>\n:<code>else</code>\n:<code>[[enumerated type|enum]]</code>\n:<code>[[External variable|extern]]</code>\n:<code>[[floating point|float]]</code>\n:<code>[[for loop|for]]</code>\n:<code>[[goto]]</code>\n:<code>if</code>\n{{col-break|width=20%}}\n:<code>int</code>\n:<code>[[long integer|long]]</code>\n:<code>[[register (C programming language)|register]]</code>\n:<code>return</code>\n:<code>[[short integer|short]]</code>\n:<code>signed</code>\n:<code>[[sizeof]]</code>\n:<code>[[Static (keyword)|static]]</code>\n{{col-break}}\n:<code>[[struct (C programming language)|struct]]</code>\n:<code>[[switch statement|switch]]</code>\n:<code>typedef</code>\n:<code>union</code>\n:<code>unsigned</code>\n:<code>[[void type|void]]</code>\n:<code>[[volatile variable|volatile]]</code>\n:<code>[[while loop|while]]</code>\n{{col-end}}\n\nC99 reserved five more words:\n\n{{col-begin}}\n{{col-break|width=20%}}\n:<code>_Bool</code>\n:<code>_Complex</code>\n{{col-break|width=20%}}\n:<code>_Imaginary</code>\n:<code>[[Inline function|inline]]</code>\n{{col-break}}\n:<code>[[restrict]]</code>\n{{col-end}}\n\nC11 reserved seven more words:<ref name=\"AutoTX-7\" />\n\n{{col-begin}}\n{{col-break|width=20%}}\n:<code>_Alignas</code>\n:<code>_Alignof</code>\n{{col-break|width=20%}}\n:<code>_Atomic</code>\n:<code>_Generic</code>\n{{col-break|width=20%}}\n:<code>_Noreturn</code>\n:<code>_Static_assert</code>\n{{col-break}}\n:<code>_Thread_local</code>\n{{col-end}}\n\nMost of the recently reserved words begin with an underscore followed by a capital letter, because identifiers of that form were previously reserved by the C standard for use only by implementations.  Since existing program source code should not have been using these identifiers, it would not be affected when C implementations started supporting these extensions to the programming language.  Some standard headers do define more convenient synonyms for underscored identifiers. The language previously included a reserved word called <code>entry</code>, but this was seldom implemented, and has now been removed as a reserved word.<ref name=\"KandR2\">{{cite book\n | last = Kernighan\n | first = Brian W.\n | authorlink = Brian Kernighan\n | last2 = Ritchie\n | first2 = Dennis M.\n | authorlink2 = Dennis Ritchie\n | title = The C Programming Language\n | publisher = [[Prentice Hall]]\n | series =\n | volume =\n | edition = 2nd\n | year = 1996\n | location =\n | pages = 192, 259\n | language =\n | url =\n | doi =\n | id =\n | isbn = 7 302 02412 X\n | mr =\n | zbl =\n | jfm = }}</ref>\n\n=== Operators ===\n{{Main article|Operators in C and C++}}\n\nC supports a rich set of [[operator (programming)|operators]], which are symbols used within an [[expression (programming)|expression]] to specify the manipulations to be performed while evaluating that expression. C has operators for:\n\n* [[arithmetic]]: [[addition|<code>+</code>]], [[subtraction|<code>-</code>]], [[multiplication|<code>*</code>]], [[division (mathematics)|<code>/</code>]], [[modulo operation|<code>%</code>]]\n* [[assignment (computer science)|assignment]]: <code>=</code>\n* [[augmented assignment]]: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&=</code>, <code>|=</code>, <code>^=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>\n* [[Bitwise operation|bitwise logic]]: <code>~</code>, <code>&</code>, <code>|</code>, <code>^</code>\n* [[Bit shift|bitwise shifts]]: <code>&lt;&lt;</code>, <code>&gt;&gt;</code>\n* [[Boolean algebra|boolean logic]]: <code>!</code>, <code>&&</code>, <code>||</code>\n* [[?:|conditional evaluation]]: [[?:|<code>? :</code>]]\n* equality testing: [[equality (mathematics)|<code>==</code>]], [[inequality (mathematics)|<code>!=</code>]]\n* [[Subroutine|calling functions]]: <code>( )</code>\n* [[increment and decrement operators|increment and decrement]]: <code>++</code>, <code>--</code>\n* [[record (computer science)|member selection]]: <code>.</code>, <code>-></code>\n* object size: <code>[[sizeof]]</code>\n* [[Order theory|order relations]]: <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>\n* [[pointer (computer programming)|reference and dereference]]: <code>&</code>, <code>*</code>, <code>[ ]</code>\n* sequencing: [[comma operator|<code>,</code>]]\n* [[order of operations#Mathematical precedence|subexpression grouping]]: <code>( )</code>\n* [[type conversion]]: <code>(''typename'')</code>\n\nC uses the operator <code>=</code> (used in mathematics to express equality) to indicate assignment, following the precedent of [[Fortran]] and [[PL/I]], but unlike [[ALGOL]] and its derivatives. C uses the operator <code>==</code> to test for equality.  The similarity between these two operators (assignment and equality) may result in the accidental use of one in place of the other, and in many cases, the mistake does not produce an error message (although some compilers produce warnings). For example, the conditional expression  <code>if(a==b+1)</code> might mistakenly be written as <code>if(a=b+1)</code>, which will be evaluated as true if <code>a</code> is not zero after the assignment.<ref name=\"AutoTX-8\" />\n\nThe C [[operator precedence]] is not always intuitive.  For example, the operator <code>==</code> binds more tightly than (is executed prior to) the operators <code>&</code> (bitwise AND) and <code>|</code> (bitwise OR) in expressions such as <code>x & 1 == 0</code>, which must be written as <code>(x & 1) == 0</code> if that is the coder's intent.<ref name=\"AutoTX-9\" />\n\n== {{anchor|HELLOWORLD}}\"Hello, world\" example ==\nThe \"[[hello, world]]\" example, which appeared in the first edition of [[The C Programming Language (book)|K&R]], has become the model for an introductory program in most programming textbooks, regardless of programming language. The program prints \"hello, world\" to the [[standard output]], which is usually a terminal or screen display.\n\nThe original version was:{{refn|Page 6 of the original K&R<ref name=\"k&r1e\" />}}\n\n<syntaxhighlight lang=\"c\">\nmain()\n{\n    printf(\"hello, world\\n\");\n}\n</syntaxhighlight>\n\nA standard-conforming \"hello, world\" program is:{{Efn|The original example code will compile on most modern compilers that are not in strict standard compliance mode, but it does not fully conform to the requirements of either C89 or C99. In fact, C99 requires that a diagnostic message be produced.}}\n\n<!-- READ THIS BEFORE YOU EDIT! If you think there is a better way, first see talk page archive No. 8 for why. If you still want to change it, discuss it first.\n-->\n<syntaxhighlight lang=\"c\">\n#include <stdio.h>\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n</syntaxhighlight>\n\nThe first line of the program contains a [[Preprocessor|preprocessing directive]], indicated by <code>#include</code>.  This causes the compiler to replace that line with the entire text of the <code>[[stdio.h]]</code> standard header, which contains declarations for standard input and output functions such as <code>printf</code>. The angle brackets surrounding <code>stdio.h</code> indicate that <code>stdio.h</code> is located using a search strategy that prefers headers provided with the compiler to other headers having the same name, as opposed to double quotes which typically include local or project-specific header files.\n\nThe next line indicates that a function named <code>main</code> is being defined. The <code>[[main function (programming)|main]]</code> function serves a special purpose in C programs; the run-time environment calls the <code>main</code> function to begin program execution. The type specifier <code>int</code> indicates that the value that is returned to the invoker (in this case the run-time environment) as a result of evaluating the <code>main</code> function, is an integer. The keyword <code>void</code> as a parameter list indicates that this function takes no arguments.{{Efn|The <code>main</code> function actually has two arguments, <code>int argc</code> and <code>char *argv[]</code>, respectively, which can be used to handle [[command line arguments]].  The ISO C standard (section 5.1.2.2.1) requires both forms of <code>main</code> to be supported, which is special treatment not afforded to any other function.}}\n\nThe opening curly brace indicates the beginning of the definition of the <code>main</code> function.\n\nThe next line ''calls'' (diverts execution to) a function named <code>[[printf]]</code>, which in this case is supplied from a system [[library (computing)|library]].  In this call, the <code>printf</code> function is ''passed'' (provided with) a single argument, the address of the first character in the [[string literal]] <code>\"hello, world\\n\"</code>. The string literal is an unnamed [[Array data type|array]] with elements of type <code>char</code>, set up automatically by the compiler with a final 0-valued character to mark the end of the array (<code>printf</code> needs to know this). The <code>\\n</code> is an ''[[escape sequences in C|escape sequence]]'' that C translates to a ''[[newline]]'' character, which on output signifies the end of the current line.  The return value of the <code>printf</code> function is of type <code>int</code>, but it is silently discarded since it is not used. (A more careful program might test the return value to determine whether or not the <code>printf</code> function succeeded.) The semicolon <code>;</code> terminates the statement.\n\nThe closing curly brace indicates the end of the code for the <code>main</code> function. According to the C99 specification and newer, the <code>main</code> function, unlike any other function, will implicitly return a value of <code>0</code> upon reaching the <code>}</code> that terminates the function. (Formerly an explicit <code>return 0;</code> statement was required.) This is interpreted by the run-time system as an exit code indicating successful execution.<ref name=\"bk21st\">{{cite book |last=Klemens |first=Ben |authorlink=Ben Klemens |title=21st Century C |publisher=[[O'Reilly Media]] |year=2013 |isbn=1-4493-2714-1}}</ref>\n\n== Data types ==\n{{Main article|C variable types and declarations}}\n{{Refimprove section|date=October 2012}}\n\nThe [[type system]] in C is [[static typing|static]] and [[weak typing|weakly typed]], which makes it similar to the type system of [[ALGOL]] descendants such as [[Pascal (programming language)|Pascal]].<ref>{{cite journal | title=Comparison of the Programming Languages C and Pascal | journal=ACM Computing Surveys | volume=14 | issue=1 | pages=73‚Äì92 | doi=10.1145/356869.356872 | first1=Alan R. | last1=Feuer | first2=Narain H. | last2=Gehani | subscription=yes | date=March 1982}}</ref>  There are built-in types for integers of various sizes, both signed and unsigned, [[floating-point number]]s, and enumerated types (<code>enum</code>).  Integer type <code>char</code> is often used for single-byte characters.  C99 added a [[boolean datatype]].  There are also derived types including [[Array data type|arrays]], [[pointer (computer programming)|pointers]], [[record (computer science)|records]] (<code>[[Struct (C programming language)|struct]]</code>), and [[union (computer science)|unions]] (<code>union</code>).\n\nC is often used in low-level systems programming where escapes from the type system may be necessary.  The compiler attempts to ensure type correctness of most expressions, but the programmer can override the checks in various ways, either by using a ''[[type conversion|type cast]]'' to explicitly convert a value from one type to another, or by using pointers or unions to reinterpret the underlying bits of a data object in some other way.\n\nSome find C's declaration syntax unintuitive, particularly for [[function pointer]]s. (Ritchie's idea was to declare identifiers in contexts resembling their use: \"[[declaration reflects use]]\".){{refn|Page 122 of K&R2<ref name=\"k&r2e\" />}}\n\nC's ''usual arithmetic conversions'' allow for efficient code to be generated, but can sometimes produce unexpected results.  For example, a comparison of signed and unsigned integers of equal width requires a conversion of the signed value to unsigned.  This can generate unexpected results if the signed value is negative.\n\n=== Pointers ===\nC supports the use of [[pointer (computer programming)|pointers]], a type of [[reference (computer science)|reference]] that records the address or location of an object or function in memory.  Pointers can be ''dereferenced'' to access data stored at the address pointed to, or to invoke a pointed-to function.  Pointers can be manipulated using assignment or [[pointer arithmetic]].  The run-time representation of a pointer value is typically a raw memory address (perhaps augmented by an offset-within-word field), but since a pointer's type includes the type of the thing pointed to, expressions including pointers can be type-checked at compile time.  Pointer arithmetic is automatically scaled by the size of the pointed-to data type. Pointers are used for many purposes in C.  [[String (computer science)|Text strings]] are commonly manipulated using pointers into arrays of characters.  [[Dynamic memory allocation]] is performed using pointers.  Many data types, such as [[tree (data structure)|trees]], are commonly implemented as dynamically allocated <code>struct</code> objects linked together using pointers.  Pointers to functions are useful for passing functions as arguments to [[higher-order function]]s (such as [[qsort]] or [[bsearch]]) or as [[callback (computer science)|callbacks]] to be invoked by event handlers.<ref name=\"bk21st\" />\n\nA ''[[null pointer]] value'' explicitly points to no valid location.  Dereferencing a null pointer value is undefined, often resulting in a [[segmentation fault]].  Null pointer values are useful for indicating special cases such as no \"next\" pointer in the final node of a [[linked list]], or as an error indication from functions returning pointers.  In appropriate contexts in source code, such as for assigning to a pointer variable, a ''null pointer constant'' can be written as <code>0</code>, with or without explicit casting to a pointer type, or as the <code>NULL</code> macro defined by several standard headers.  In conditional contexts, null pointer values evaluate to false, while all other pointer values evaluate to true.\n\nVoid pointers (<code>void *</code>) point to objects of unspecified type, and can therefore be used as \"generic\" data pointers. Since the size and type of the pointed-to object is not known, void pointers cannot be dereferenced, nor is pointer arithmetic on them allowed, although they can easily be (and in many contexts implicitly are) converted to and from any other object pointer type.<ref name=\"bk21st\" />\n\nCareless use of pointers is potentially dangerous.  Because they are typically unchecked, a pointer variable can be made to point to any arbitrary location, which can cause undesirable effects.  Although properly used pointers point to safe places, they can be made to point to unsafe places by using invalid [[pointer arithmetic]]; the objects they point to may continue to be used after deallocation ([[dangling pointer]]s); they may be used without having been initialized ([[wild pointer]]s); or they may be directly assigned an unsafe value using a cast, union, or through another corrupt pointer.  In general, C is permissive in allowing manipulation of and conversion between pointer types, although compilers typically provide options for various levels of checking. Some other programming languages address these problems by using more restrictive [[reference (computer science)|reference]] types.\n\n=== Arrays ===\n{{See also|C string}}\n<!-- Please be careful when editing this.  C does *not* forbid bounds checking, nor does it require that pointers are memory addresses.  Of course it does not require bounds checks, either, and all common implementations map those language constructs to the machine in an \"obvious way\", but there are ANSI-conforming implementations that handle these things in other ways. -->\n\n[[Array data type|Array]] types in C are traditionally of a fixed, static size specified at compile time.  (The more recent C99 standard also allows a form of variable-length arrays.)  However, it is also possible to allocate a block of memory (of arbitrary size) at run-time, using the standard library's <code>malloc</code> function, and treat it as an array.  C's unification of arrays and pointers means that declared arrays and these dynamically allocated simulated arrays are virtually interchangeable.\n\nSince arrays are always accessed (in effect) via pointers, array accesses are typically ''not'' checked against the underlying array size, although some compilers may provide [[bounds checking]] as an option.<ref name=\"AutoTX-10\" /><ref name=\":0\">{{Cite book|title=Programming with C|last=‡πÄ‡∏≠‡∏µ‡πà‡∏¢‡∏°‡∏™‡∏¥‡∏£‡∏¥‡∏ß‡∏á‡∏®‡πå|first=‡πÇ‡∏≠‡∏†‡∏≤‡∏®|publisher=SE-EDUCATION PUBLIC COMPANY LIMITED|year=2016|isbn=978-616-08-2740-4|location=Bangkok, Thailand|pages=225-230}}</ref>  Array bounds violations are therefore possible and rather common in carelessly written code, and can lead to various repercussions, including illegal memory accesses, corruption of data, [[buffer overflow|buffer overruns]], and run-time exceptions.  If bounds checking is desired, it must be done manually.\n\nC does not have a special provision for declaring [[multi-dimensional array]]s, but rather relies on [[Recursion (computer science)|recursion]] within the type system to declare arrays of arrays, which effectively accomplishes the same thing.  The index values of the resulting \"multi-dimensional array\" can be thought of as increasing in [[row-major order]].\n\nMulti-dimensional arrays are commonly used in numerical algorithms (mainly from applied [[linear algebra]]) to store matrices. The structure of the C array is well suited to this particular task. However, since arrays are passed merely as pointers, the bounds of the array must be known fixed values or else explicitly passed to any subroutine that requires them, and dynamically sized arrays of arrays cannot be accessed using double indexing. (A workaround for this is to allocate the array with an additional \"row vector\" of pointers to the columns.) \n\nC99 introduced \"variable-length arrays\" which address some, but not all, of the issues with ordinary C arrays.\n\n=== Array‚Äìpointer interchangeability ===\nThe subscript notation <code>x[i]</code> (where <code>x</code> designates a pointer) is [[syntactic sugar]] for <code>*(x+i)</code>.<ref name=\"Raymond1996\" /> Taking advantage of the compiler's knowledge of the pointer type, the address that <code>x + i</code> points to is not the base address (pointed to by <code>x</code>) incremented by <code>i</code> bytes, but rather is defined to be the base address incremented by <code>i</code> multiplied by the size of an element that <code>x</code> points to.  Thus, <code>x[i]</code> designates the <code>i+1</code>th element of the array.\n\nFurthermore, in most expression contexts (a notable exception is as operand of <code>[[sizeof]]</code>), the name of an array is automatically converted to a pointer to the array's first element. This implies that an array is never copied as a whole when named as an argument to a function, but rather only the address of its first element is passed. Therefore, although function calls in C use [[call-by-value|pass-by-value]] semantics, arrays are in effect passed by [[reference (computer science)|reference]].\n\nThe size of an element can be determined by applying the operator <code>sizeof</code> to any dereferenced element of <code>x</code>, as in <code>n = sizeof *x</code> or <code>n = sizeof x[0]</code>, and the number of elements in a declared array <code>A</code> can be determined as <code>sizeof A / sizeof A[0]</code>. The latter only applies to array names: variables declared with subscripts (<code>int A[20]</code>). Due to the semantics of C, it is not possible to determine the entire size of arrays through pointers to arrays or those created by dynamic allocation (<code>[[malloc]]</code>); code such as <code>sizeof arr / sizeof arr[0]</code> (where <code>arr</code> designates a pointer) will not work since the compiler assumes the size of the pointer itself is being requested.<ref name=\"cfaq623\" /><ref name=\"cfaq728\" /> Since array name arguments to <code>sizeof</code> are not converted to pointers, they do not exhibit such ambiguity. However, arrays created by dynamic allocation are accessed by pointers rather than true array variables, so they suffer from the same <code>sizeof</code> issues as array pointers.\n\nThus, despite this apparent equivalence between array and pointer variables, there is still a distinction to be made between them. Even though the name of an array is, in most expression contexts, converted into a pointer (to its first element), this pointer does not itself occupy any storage; the array name is not an [[Value (computer science)|l-value]], and its address is a constant, unlike a pointer variable. Consequently, what an array \"points to\" cannot be changed, and it is impossible to assign a new address to an array name. Array contents may be copied, however, by using the <code>memcpy</code> function, or by accessing the individual elements.\n\n== Memory management ==\nOne of the most important functions of a programming language is to provide facilities for managing [[computer memory|memory]] and the objects that are stored in memory. C provides three distinct ways to allocate memory for objects:<ref name=\"bk21st\" />\n\n* [[Static memory allocation]]: space for the object is provided in the binary at compile-time; these objects have an [[Variable (programming)#Scope and extent|extent]] (or lifetime) as long as the binary which contains them is loaded into memory.\n* [[Automatic memory allocation]]: temporary objects can be stored on the [[call stack|stack]], and this space is automatically freed and reusable after the block in which they are declared is exited.\n* [[Dynamic memory allocation]]: blocks of memory of arbitrary size can be requested at run-time using library functions such as <code>[[malloc]]</code> from a region of memory called the [[dynamic memory allocation|heap]]; these blocks persist until subsequently freed for reuse by calling the library function <code>[[malloc|realloc]]</code> or <code>[[malloc|free]]</code>\n\nThese three approaches are appropriate in different situations and have various trade-offs. For example, static memory allocation has little allocation overhead, automatic allocation may involve slightly more overhead, and dynamic memory allocation can potentially have a great deal of overhead for both allocation and deallocation. The persistent nature of static objects is useful for maintaining state information across function calls, automatic allocation is easy to use but stack space is typically much more limited and transient than either static memory or heap space, and dynamic memory allocation allows convenient allocation of objects whose size is known only at run-time. Most C programs make extensive use of all three.\n\nWhere possible, automatic or static allocation is usually simplest because the storage is managed by the compiler, freeing the programmer of the potentially error-prone chore of manually allocating and releasing storage. However, many data structures can change in size at runtime, and since static allocations (and automatic allocations before C99) must have a fixed size at compile-time, there are many situations in which dynamic allocation is necessary.<ref name=\"bk21st\" />  Prior to the C99 standard, variable-sized arrays were a common example of this. (See the article on <code>[[malloc]]</code> for an example of dynamically allocated arrays.) Unlike automatic allocation, which can fail at run time with uncontrolled consequences, the dynamic allocation functions return an indication (in the form of a null pointer value) when the required storage cannot be allocated.  (Static allocation that is too large is usually detected by the [[Linker (computing)|linker]] or [[Loader (computing)|loader]], before the program can even begin execution.)\n\nUnless otherwise specified, static objects contain zero or null pointer values upon program startup. Automatically and dynamically allocated objects are initialized only if an initial value is explicitly specified; otherwise they initially have indeterminate values (typically, whatever [[bit|bit pattern]] happens to be present in the [[computer storage|storage]], which might not even represent a valid value for that type). If the program attempts to access an uninitialized value, the results are undefined. Many modern compilers try to detect and warn about this problem, but both [[Type I and type II errors|false positives and false negatives]] can occur.\n\nAnother issue is that heap memory allocation has to be synchronized with its actual usage in any program in order for it to be reused as much as possible.  For example, if the only pointer to a heap memory allocation goes out of scope or has its value overwritten before <code>[[malloc|free()]]</code> is called, then that memory cannot be recovered for later reuse and is essentially lost to the program, a phenomenon known as a ''[[memory leak]].'' Conversely, it is possible for memory to be freed but continue to be referenced, leading to unpredictable results. Typically, the symptoms will appear in a portion of the program far removed from the actual error, making it difficult to track down the problem. (Such issues are ameliorated in languages with [[garbage collection (computer science)|automatic garbage collection]].)\n\n== Libraries ==\nThe C programming language uses [[library (computing)|libraries]] as its primary method of extension. In C, a library is a set of functions contained within a single \"archive\" file.  Each library typically has a [[header file]], which contains the prototypes of the functions contained within the library that may be used by a program, and declarations of special data types and macro symbols used with these functions. In order for a program to use a library, it must include the library's header file, and the library must be linked with the program, which in many cases requires [[compiler flag]]s (e.g., <code>-lm</code>, shorthand for \"link the math library\").<ref name=\"bk21st\" />\n\nThe most common C library is the [[C standard library]], which is specified by the [[ISO standard|ISO]] and [[ANSI C]] standards and comes with every C implementation (implementations which target limited environments such as [[embedded systems]] may provide only a subset of the standard library). This library supports stream input and output, memory allocation, mathematics, character strings, and time values.  Several separate standard headers (for example, <code>stdio.h</code>) specify the interfaces for these and other standard library facilities.\n\nAnother common set of C library functions are those used by applications specifically targeted for [[Unix]] and [[Unix-like]] systems, especially functions which provide an interface to the [[kernel (computer science)|kernel]]. These functions are detailed in various standards such as [[POSIX]] and the [[Single UNIX Specification]].\n\nSince many programs have been written in C, there are a wide variety of other libraries available. Libraries are often written in C because C compilers generate efficient [[object code]]; programmers then create interfaces to the library so that the routines can be used from higher-level languages like [[Java (programming language)|Java]], [[Perl]], and [[Python (programming language)|Python]].<ref name=\"bk21st\" />\n\n== Language tools ==\n{{Refimprove section|date=July 2014}}\n\nA number of tools have been developed to help C programmers find and fix statements with undefined behavior or possibly erroneous expressions, with greater rigor than that provided by the compiler.  The tool [[Lint (software)|lint]] was the first such, leading to many others.\n\nAutomated source code checking and auditing are beneficial in any language, and for C many such tools exist, such as [[lint (software)|Lint]]. A common practice is to use Lint to detect questionable code when a program is first written. Once a program passes Lint, it is then compiled using the C compiler. Also, many compilers can optionally warn about syntactically valid constructs that are likely to actually be errors. [[MISRA C]] is a proprietary set of guidelines to avoid such questionable code, developed for embedded systems.<ref>{{cite web|url=http://www.unix.com/man-page/FreeBSD/1/lint |title=Man Page for lint (freebsd Section 1) |website=unix.com |date=2001-05-24 |accessdate=2014-07-15}}</ref>\n\nThere are also compilers, libraries, and operating system level mechanisms for performing actions that are not a standard part of C, such as [[bounds checking]] for arrays, detection of [[buffer overflow]], [[serialization]], [[Memory management|dynamic memory]] tracking, and [[garbage collection (computer science)|automatic garbage collection]].\n\nTools such as [[IBM Rational Purify|Purify]] or [[Valgrind]] and linking with libraries containing special versions of the [[malloc|memory allocation functions]] can help uncover runtime errors in memory usage.\n\n== Uses ==\n[[File:Tiobe index.png|thumb|upright=1.9|The [[TIOBE index]] graph, showing a comparison of the popularity of various programming languages<ref>{{cite web |url=https://www.wired.com/2013/01/java-no-longer-a-favorite/|title=Is Java Losing Its Mojo? |first=Robert |last=McMillan |date=2013-08-01 |publisher=''[[Wired (magazine)|Wired]]''}}</ref>]]\n\nC is widely used for [[system programming]] in implementing [[operating system]]s and [[embedded system]] applications,<ref>{{Cite book|url=https://www.worldcat.org/oclc/894992484|title=Programming and problem solving with C++ : brief, sixth edition|last=Chip.|first=Weems,|date=2014|publisher=Jones & Bartlett Learning|isbn=1449694284|oclc=894992484}}</ref> because C code, when written for portability, can be used for most purposes, yet when needed, system-specific code can be used to access specific hardware addresses and to perform [[type punning]] to match externally imposed interface requirements, with a low [[Run time (program lifecycle phase)|run-time]] demand on system resources.\n\nC can also be used for website programming using [[Common Gateway Interface|CGI]] as a \"gateway\" for information between the Web application, the server, and the browser.<ref name=\"AutoTX-11\" /> C is often chosen over [[interpreted language]]s because of its speed, stability, and near-universal availability.<ref name=\"AutoTX-12\" />\n\nOne consequence of C's wide availability and efficiency is that [[compiler]]s, libraries and [[Interpreter (computing)|interpreters]] of other programming languages are often implemented in C. The [[reference implementation]]s of [[Python (programming language)|Python]], [[Perl]] and [[PHP]], for example, are all written in C.\n\nBecause the layer of abstraction is thin and the overhead is low, C enables programmers to create efficient implementations of algorithms and data structures, useful for computationally intense programs. For example, the [[GNU Multiple Precision Arithmetic Library]], the [[GNU Scientific Library]], [[Mathematica]], and [[MATLAB]] are completely or partially written in C.\n\nC is sometimes used as an [[intermediate language]] by implementations of other languages. This approach may be used for portability or convenience; by using C as an intermediate language, additional machine-specific code generators are not necessary.  C has some features, such as line-number preprocessor directives and optional superfluous commas at the end of initializer lists, that support compilation of generated code. However, some of C's shortcomings have prompted the development of other [[List of C-family programming languages|C-based languages]] specifically designed for use as intermediate languages, such as [[C--]].\n\nC has also been widely used to implement [[end-user (computer science)|end-user]] applications. However, such applications can also be written in newer, higher-level languages.\n\n== Related languages ==\nC has both directly and indirectly influenced many later languages such as [[C Sharp (programming language)|C#]], [[D (programming language)|D]], [[Go (programming language)|Go]], [[Java (programming language)|Java]], [[JavaScript]], [[Limbo (programming language)|Limbo]], [[LPC (programming language)|LPC]], [[Perl]], [[PHP]], [[Python (programming language)|Python]], and Unix's [[C shell]].<ref>{{Cite book|url=https://www.worldcat.org/oclc/922324121|title=Pillars of computing : a compendium of select, pivotal technology firms|last=Gerard),|first=O'Regan, Gerard (Cornelius|isbn=3319214640|oclc=922324121}}</ref> The most pervasive influence has been syntactical, all of the languages mentioned combine the statement and (more or less recognizably) expression [[C syntax|syntax of C]] with type systems, data models and/or large-scale program structures that differ from those of C, sometimes radically.\n\nSeveral C or near-C interpreters exist, including [[Ch (computer programming)|Ch]] and [[CINT]], which can also be used for scripting.\n\nWhen object-oriented languages became popular, [[C++]] and [[Objective-C]] were two different extensions of C that provided object-oriented capabilities. Both languages were originally implemented as [[source-to-source compiler]]s; source code was translated into C, and then compiled with a C compiler.<ref>{{Cite book|url=https://www.worldcat.org/oclc/57965544|title=Languages and compilers for parallel computing : 16th international workshop, LCPC 2003, College Station, TX, USA, October 2-4, 2003 : revised papers|last=Lawrence.|first=Rauchwerger,|date=2004|publisher=Springer|isbn=3540246444|oclc=57965544}}</ref>\n\nThe [[C++]] programming language was devised by [[Bjarne Stroustrup]] as an approach to providing [[Object-oriented programming|object-oriented]] functionality with a C-like syntax.<ref name=\"AutoTX-4\" /> C++ adds greater typing strength, scoping, and other tools useful in object-oriented programming, and permits [[generic programming]] via templates. Nearly a superset of C, C++ now supports most of C, with [[Compatibility of C and C++|a few exceptions]].\n\n[[Objective-C]] was originally a very \"thin\" layer on top of C, and remains a strict superset of C that permits object-oriented programming using a hybrid dynamic/static typing paradigm. Objective-C derives its syntax from both C and [[Smalltalk]]: syntax that involves preprocessing, expressions, function declarations, and function calls is inherited from C, while the syntax for object-oriented features was originally taken from Smalltalk.\n\nIn addition to [[C++]] and [[Objective-C]], [[Ch (computer programming)|Ch]], [[Cilk]] and [[Unified Parallel C]] are nearly supersets of C.\n\n== See also ==\n{{Portal|Computer programming|Information technology}}\n* [[Compatibility of C and C++]]\n* [[Comparison of Pascal and C]]\n* [[Comparison of programming languages]]\n* [[International Obfuscated C Code Contest]]\n* [[List of C-based programming languages]]\n* [[List of C compilers]]\n\n== Notes ==\n{{Notelist}}\n\n== References ==\n{{Reflist|30em|refs=\n<ref name=\"k&r1e\">{{cite book |last1=Kernighan |first1=Brian W. |authorlink1=Brian Kernighan |last2=Ritchie |first2=Dennis M. |authorlink2=Dennis Ritchie | title=[[The C Programming Language (book)|The C Programming Language]] | edition=1st |publisher=[[Prentice Hall]] |date=February 1978 |location=[[Englewood Cliffs, NJ]] |isbn=0-13-110163-3}}  Regarded by many to be the authoritative reference on C.</ref>\n<ref name=\"k&r2e\">{{cite book |last1=Kernighan |first1=Brian W. |authorlink1=Brian Kernighan |last2=Ritchie |first2=Dennis M. |authorlink2=Dennis Ritchie |title=[[The C Programming Language (book)|The C Programming Language]] | edition=2nd |publisher=[[Prentice Hall]] |date=March 1988 |location=[[Englewood Cliffs, NJ]] |isbn=0-13-110362-8}}</ref>\n<ref name=\"dottcl_2\">{{harvtxt|Ritchie|1993}}: \"Thompson had made a brief attempt to produce a system coded in an early version of C‚Äîbefore structures‚Äîin 1972, but gave up the effort.\"</ref>\n<ref name=\"dottcl\">{{harvtxt|Ritchie|1993}}: \"The scheme of type composition adopted by C owes considerable debt to Algol 68, although it did not, perhaps, emerge in a form that Algol's adherents would approve of.\"</ref>\n<ref name=\"AutoTX-1\">{{cite web |url=http://archive.adaic.com/docs/reports/lawlis/k.htm |title=Guidelines for Choosing a Computer Language: Support for the Visionary Organization |date=August 1997 |last=Lawlis |first=Patricia K. |publisher=Ada Information Clearinghouse |accessdate=18 July 2006}}</ref>\n<ref name=\"AutoTX-2\">{{cite web |url=http://www.langpop.com/ |title=Programming Language Popularity |year=2009 |accessdate=16 January 2009 |deadurl=yes |archiveurl=https://web.archive.org/web/20071213213827/http://www.langpop.com/ |archivedate=13 December 2007 |df= }}</ref>\n<ref name=\"AutoTX-3\">{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html | title=TIOBE Programming Community Index |year=2009 |accessdate=6 May 2009}}</ref>\n<ref name=\"AutoTX-4\">{{cite web |url=http://www.stroustrup.com/hopl2.pdf |title=A History of C++: 1979‚àí1991 |first=Bjarne |last=Stroustrup |authorlink=Bjarne Stroustrup |year=1993 |accessdate=9 June 2011}}</ref>\n<ref name=\"AutoTX-5\">{{cite web |title=JTC1/SC22/WG14&nbsp;‚Äì C |url=http://www.open-std.org/jtc1/sc22/wg14/ |work=Home page |publisher=ISO/IEC |accessdate=2 June 2011}}</ref>\n<ref name=\"AutoTX-6\">{{cite web |title=TR 18037: Embedded C |url=http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1169.pdf|publisher=ISO / IEC |accessdate=26 July 2011}}</ref>\n<ref name=\"h&s5e\">{{cite book |last1=Harbison |first1=Samuel P. |last2=Steele |first2=Guy L. |authorlink2=Guy L. Steele, Jr. |title=C: A Reference Manual |edition=5th |publisher=[[Prentice Hall]] |year=2002 |location=[[Englewood Cliffs, NJ]] |isbn=0-13-089592-X}} Contains a [[Backus-Naur form|BNF]] grammar for C.</ref>\n<ref name=\"AutoTX-7\">[http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf ISO/IEC 9899:201x (ISO C11) Committee Draft]</ref>\n<ref name=\"AutoTX-8\">{{cite web |url=http://www.cs.ucr.edu/~nxiao/cs10/errors.htm |title=10 Common Programming Mistakes in C++ |publisher=Cs.ucr.edu |accessdate=26 June 2009 }}</ref>\n<ref name=\"AutoTX-9\">{{cite book |title=C and the 8051 |edition=3rd |last=Schultz |first=Thomas |year=2004 |publisher=PageFree Publishing Inc. |location=Otsego, MI |isbn=1-58961-237-X |page=20 |url= https://books.google.com/?id=rI0c8kWbxooC&pg=PT47#v=onepage&q&f=false  |accessdate=10 February 2012}}</ref>\n<ref name=\"AutoTX-10\">For example, gcc provides _FORTIFY_SOURCE. {{cite web|url=http://fedoraproject.org/wiki/Security/Features |title=Security Features: Compile Time Buffer Checks (FORTIFY_SOURCE) |publisher=fedoraproject.org |accessdate=2012-08-05}}</ref>\n<ref name=\"Raymond1996\">{{cite book |last=Raymond |first=Eric S. |authorlink=Eric S. Raymond |title=The New Hacker's Dictionary |edition=3rd |url=https://books.google.com/books?id=g80P_4v4QbIC&pg=PA432 |accessdate=5 August 2012 |date=11 October 1996 |publisher=MIT Press |isbn=978-0-262-68092-9 |page=432}}</ref>\n<ref name=\"AutoTX-11\">{{cite book |title=Dr. Dobb's Sourcebook |publisher=Miller Freeman, Inc. |date=November‚ÄìDecember 1995 |location=U.S.A.}}</ref>\n<ref name=\"AutoTX-12\">{{cite web |url=http://www.linuxjournal.com/article/6863 |publisher=linuxjournal.com |title=Using C for CGI Programming |accessdate=4 January 2010 |date=1 March 2005}}</ref>\n<ref name=\"cfaq623\">{{cite web | url=http://www.c-faq.com/aryptr/arraynels.html | title=comp.lang.c Frequently Asked Questions 6.23 | accessdate=March 6, 2013 | author=Summit, Steve}}</ref>\n<ref name=\"cfaq728\">{{cite web | url=http://www.c-faq.com/malloc/sizeof.html | title=comp.lang.c Frequently Asked Questions 7.28 | accessdate=March 6, 2013 | author=Summit, Steve}}</ref>\n<ref name=\"chistory\">{{harvtxt|Ritchie|1993}}</ref>\n}}\n\n==Sources==\n* {{cite conference |last=Ritchie |first=Dennis M. |authorlink=Dennis Ritchie |year=1993 |title=The Development of the C Language |pages=201‚Äì208 |doi=10.1145/154766.155580 |location = Cambridge, MA, USA ‚Äî April 20‚Äì23, 1993 |url=http://www.bell-labs.com/usr/dmr/www/chist.html |journal=The second ACM [[SIGPLAN]] History of Programming Languages Conference (HOPL-II) |publisher=[[Association for Computing Machinery|ACM]] |isbn=0-89791-570-4 |accessdate = 2014-11-04 |ref=harv}}\n\n== Further reading ==\n* {{cite book |last1=Banahan |first1=M. |last2=Brady |first2=D. |last3=Doran |first3=M. |title=The C Book |url=http://publications.gbdirect.co.uk/c_book/ |edition=2nd |year=1991 |publisher=[[Addison-Wesley]]}}\n* {{cite book |last=King |first=K. N. |title=C Programming: A Modern Approach | edition=2nd | publisher=[[W. W. Norton & Company|Norton]] |date=April 2008 |isbn=978-0-393-97950-3}}\n* {{cite journal |last=Thompson |first=Ken |authorlink=Ken Thompson |title=A New C Compiler |publisher=AT&T Bell Laboratories |location=Murray Hill, New Jersey |url=http://doc.cat-v.org/bell_labs/new_c_compilers/new_c_compiler.pdf}}\n* {{cite book |last=Feuer |first=Alan R. |title=The C Puzzle Book | edition=1st, revised printing | publisher=[[Addison-Wesley]] |year=1998 |isbn=978-0-201-60461-0}}\n\n== External links ==\n{{Sister project links |v=Topic:C |commons=C (programming language) |b=C Programming |voy=no |s=no |wikt=no}}\n* [http://www.open-std.org/jtc1/sc22/wg14/ ISO C Working Group official website]\n* [http://www.c-faq.com/ comp.lang.c Frequently Asked Questions]\n* [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899], publicly available official C documents, including the C99 Rationale\n* {{cite web|url= http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf |title=C99 with Technical corrigenda TC1, TC2, and TC3 included }}&nbsp;{{small|(3.61&nbsp;MB)}}\n* [http://csapp.cs.cmu.edu/3e/docs/chistory.html A History of C], by Dennis Ritchie\n\n{{C programming language|state=expanded}}\n{{Integrated development environments}}\n{{Programming languages}}\n\n{{Authority control}}\n\n[[Category:American inventions]]\n[[Category:Articles with example code]]\n[[Category:C (programming language)| ]]\n[[Category:C programming language family]]\n[[Category:Cross-platform software]]\n[[Category:High-level programming languages]]\n[[Category:Procedural programming languages]]\n[[Category:Programming languages created in 1972]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Statically typed programming languages]]\n[[Category:Systems programming languages]]",
            "slug": "c-programming-language-",
            "date_updated": 1537259247305,
            "imported": "https://en.wikipedia.org/wiki/C_(programming_language)"
        }
    ]
}