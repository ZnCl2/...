{
    "article": [
        {
            "title": "Distributed hash table",
            "text": "A '''distributed hash table''' ('''DHT''') is a class of a decentralized [[Distributed computing|distributed system]] that provides a lookup service similar to a [[hash table]]: (''key'', ''value'') pairs are stored in a DHT, and any participating [[node (networking)|node]] can efficiently retrieve the value associated with a given key. Responsibility for maintaining the mapping from keys to values is distributed among the nodes, in such a way that a change in the set of participants causes a minimal amount of disruption. This allows a DHT to [[scale (computing)|scale]] to extremely large numbers of nodes and to handle continual node arrivals, departures, and failures.\n\nDHTs form an infrastructure that can be used to build more complex services, such as [[anycast]], cooperative [[Web cache|Web caching]], [[distributed file system]]s, [[Domain name system|domain name services]], [[instant messaging]], [[multicast]], and also [[peer-to-peer]] [[file sharing]] and [[content distribution]] systems. Notable distributed networks that use DHTs include [[BitTorrent (protocol)|BitTorrent]]'s distributed tracker, the [[Coral Content Distribution Network]], the [[Kad network]], the [[Storm botnet]], the [[Tox (protocol)|Tox instant messenger]], [[Freenet]] and the [[YaCy]] search engine.\n\n[[File:DHT en.svg|500px|right|thumb|Distributed hash tables]]\n\n== History ==\nDHT research was originally motivated, in part, by [[peer-to-peer]] systems such as [[Freenet]], [[gnutella]], [[BitTorrent (software)|BitTorrent]] and [[Napster]], which took advantage of resources distributed across the Internet to provide a single useful application. In particular, they took advantage of increased [[Bandwidth (computing)|bandwidth]] and [[hard disk]] capacity to provide a file-sharing service.{{cn|date=September 2015}}\n\nThese systems differed in how they located the data offered by their peers. Napster, the first large-scale P2P content delivery system, required a central index server: each node, upon joining, would send a list of locally held files to the server, which would perform searches and refer the queries to the nodes that held the results. This central component left the system vulnerable to attacks and lawsuits.\n\nGnutella and similar networks moved to a flooding query model{{spaced ndash}} in essence, each search would result in a message being broadcast to every other machine in the network. While avoiding a [[single point of failure]], this method was significantly less efficient than Napster.  Later versions of Gnutella clients moved to a dynamic querying model which vastly improved efficiency.{{citation needed|date=January 2014}}\n\n[[Freenet]] is fully distributed, but employs a heuristic [[key-based routing]] in which each file is associated with a key, and files with similar keys tend to cluster on a similar set of nodes. Queries are likely to be routed through the network to such a cluster without needing to visit many peers.<ref>{{citation |url=https://freenetproject.org/papers/lic.pdf |title=Searching in a Small World Chapters 1 & 2 |accessdate=2012-01-10}}</ref> However, Freenet does not guarantee that data will be found.\n\nDistributed hash tables use a more structured key-based routing in order to attain both the decentralization of Freenet and gnutella, and the efficiency and guaranteed results of Napster. One drawback is that, like Freenet, DHTs only directly support exact-match search, rather than keyword search, although Freenet's routing algorithm can be generalized to any key type where a closeness operation can be defined.<ref>{{citation |url=https://freenetproject.org/papers/ddisrs.pdf |title=A Distributed Decentralized Information Storage and Retrieval System |chapter=Section 5.2.2 |accessdate=2012-01-10}}</ref>\n\nIn 2001, four systems&mdash;[[Content addressable network|CAN]],<ref name = \"Ratnasamy01\">{{cite journal |title=A Scalable Content-Addressable Network |publisher=In Proceedings of ACM SIGCOMM 2001 |author=Ratnasamy |year=2001 |url=http://www.eecs.berkeley.edu/~sylvia/papers/cans.pdf |accessdate=2013-05-20|display-authors=etal}}</ref> [[Chord (peer-to-peer)|Chord]],<ref>[[Hari Balakrishnan]], [[M. Frans Kaashoek]], David Karger, [[Robert Tappan Morris|Robert Morris]], and Ion Stoica. [http://www.cs.berkeley.edu/~istoica/papers/2003/cacm03.pdf Looking up data in P2P systems]. In [[Communications of the ACM]], February 2003.</ref> [[Pastry (DHT)|Pastry]], and [[Tapestry (DHT)|Tapestry]]&mdash;ignited DHTs as a popular research topic. \nA project called the Infrastructure for Resilient Internet Systems (Iris) was funded by a $12 million grant from the US [[National Science Foundation]] in 2002.<ref>{{Cite news |title= New P2P network funded by US government |author= David Cohen |work= New Scientist |date= October 1, 2002 |url= https://www.newscientist.com/article.ns?id=dn2861 |accessdate= November 10, 2013 }}</ref>\nResearchers included [[Sylvia Ratnasamy]], [[Ion Stoica]], [[Hari Balakrishnan]] and [[Scott Shenker]].<ref>{{Cite news |title= MIT, Berkeley, ICSI, NYU, and Rice Launch the IRIS Project |work= Press release |publisher= MIT |date= September 25, 2002 |url= https://iris.pdos.csail.mit.edu/MITPressRelease1.doc |accessdate= November 10, 2013 |deadurl= yes |archiveurl= https://web.archive.org/web/20150926070618/https://iris.pdos.csail.mit.edu/MITPressRelease1.doc |archivedate= September 26, 2015 |df=  }}</ref>\nOutside academia, DHT technology has been adopted as a component of [[BitTorrent (protocol)|BitTorrent]] and in the [[Coral Content Distribution Network]].\n\n== Properties ==\nDHTs characteristically emphasize the following properties:\n\n* [[Decentralized computing|Autonomy and decentralization]]: the nodes collectively form the system without any central coordination.\n* [[Fault tolerance]]: the system should be reliable (in some sense) even with nodes continuously joining, leaving, and failing.\n* [[scale (computing)|Scalability]]: the system should function efficiently even with thousands or millions of nodes.\n\nA key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly, [[Big O notation|O]](log ''n'') of the <math>n</math> participants (see below) – so that only a limited amount of work needs to be done for each change in membership.\n\nSome DHT designs seek to be [[secure communication|secure]] against malicious participants<ref>Guido Urdaneta, Guillaume Pierre and Maarten van Steen. [http://www.globule.org/publi/SDST_acmcs2009.html A Survey of DHT Security Techniques]. ACM Computing Surveys 43(2), January 2011.</ref> and to allow participants to remain [[anonymity|anonymous]], though this is less common than in many other [[peer-to-peer]] (especially [[file sharing]]) systems; see [[anonymous P2P]].\n\nFinally, DHTs must deal with more traditional distributed systems issues such as [[Load balancing (computing)|load balancing]], [[data integrity]], and performance (in particular, ensuring that operations such as routing and data storage or retrieval complete quickly).\n\n== Structure ==\nThe structure of a DHT can be decomposed into several main components.<ref>Moni Naor and Udi Wieder. [http://www.wisdom.weizmann.ac.il/~naor/PAPERS/dh.pdf Novel Architectures for P2P Applications: the Continuous-Discrete Approach]. Proc. SPAA, 2003.</ref><ref>Gurmeet Singh Manku. [http://www-db.stanford.edu/~manku/phd/index.html Dipsea: A Modular Distributed Hash Table] {{webarchive|url=https://web.archive.org/web/20040910154927/http://www-db.stanford.edu/~manku/phd/index.html |date=2004-09-10 }}. Ph. D. Thesis (Stanford University), August 2004.</ref>  The foundation is an abstract '''keyspace''', such as the set of 160-bit [[string (computer science)|string]]s. A '''keyspace partitioning''' scheme splits ownership of this keyspace among the participating nodes. An '''overlay network''' then connects the nodes, allowing them to find the owner of any given key in the keyspace.\n\nOnce these components are in place, a typical use of the DHT for storage and retrieval might proceed as follows. Suppose the keyspace is the set of 160-bit strings. To index a file with given {{mvar|filename}} and {{mvar|data}} in the DHT, the [[SHA-1]] hash of {{mvar|filename}} is generated, producing a 160-bit key {{mvar|k}}, and a message {{math|''put''(''k, data'')}} is sent to any node participating in the DHT. The message is forwarded from node to node through the overlay network until it reaches the single node responsible for key {{mvar|k}} as specified by the keyspace partitioning. That node then stores the key and the data. Any other client can then retrieve the contents of the file by again hashing {{mvar|filename}} to produce {{mvar|k}} and asking any DHT node to find the data associated with {{mvar|k}} with a message {{math|''get''(''k'')}}. The message will again be routed through the overlay to the node responsible for {{mvar|k}}, which will reply with the stored {{mvar|data}}.\n\nThe keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most DHTs; many designs differ in the details.\n\n=== Keyspace partitioning ===\nMost DHTs use some variant of [[consistent hashing]] or [[rendezvous hashing]] to map keys to nodes. The two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem.\n\nBoth consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent IDs, and leaves all other nodes unaffected. Contrast this with a traditional [[hash table]] in which addition or removal of one bucket causes nearly the entire keyspace to be remapped. Since any change in ownership typically corresponds to [[Bandwidth (computing)|bandwidth]]-intensive movement of objects stored in the DHT from one node to another, minimizing such reorganization is required to efficiently support high rates of churn (node arrival and failure).\n\n==== Consistent hashing ====\n[[Consistent hashing]] employs a function <math>\\delta(k_1, k_2)</math> that defines an abstract notion of the distance between the keys <math>k_1</math> and <math>k_2</math>, which is unrelated to geographical [[distance]] or network [[Latency (engineering)|latency]]. Each node is assigned a single key called its ''identifier'' (ID). A node with ID <math>i_x</math> owns all the keys <math>k_m</math> for which <math>i_x</math> is the closest ID, measured according to <math>\\delta(k_m, i_x)</math>.\n\nFor example, the [[Chord (peer-to-peer)|Chord DHT]] uses consistent hashing, which treats keys as points on a circle, and <math>\\delta(k_1, k_2)</math> is the distance traveling clockwise around the circle from <math>k_1</math> to <math>k_2</math>. Thus, the circular keyspace is split into contiguous segments whose endpoints are the node identifiers. If <math>i_1</math> and <math>i_2</math> are two adjacent IDs, with a shorter clockwise distance from <math>i_1</math> to <math>i_2</math>, then the node with ID <math>i_2</math> owns all the keys that fall between <math>i_1</math> and <math>i_2</math>.\n\n==== Rendezvous hashing ====\nIn [[rendezvous hashing]], also called highest random weight hashing, all clients use the same hash function ''h()'' (chosen ahead of time) to associate a key to one of the ''n'' available servers.\nEach client has the same list of identifiers {{math|{{mset|''S''<sub>1</sub>, ''S''<sub>2</sub>, ..., ''S''<sub>''n''</sub> }}}}, one for each server.\nGiven some key ''k'', a client computes ''n'' hash weights {{math|1=''w''<sub>1</sub> = ''h''(''S''<sub>1</sub>, ''k''), ''w''<sub>2</sub> = ''h''(''S''<sub>2</sub>, ''k''), ..., ''w''<sub>''n''</sub> = ''h''(''S''<sub>''n''</sub>, ''k'')}}.\nThe client associates that key with the server corresponding to the highest hash weight for that key.\nA server with ID <math>S_x</math> owns all the keys <math>k_m</math> for which the hash weight <math>h(S_x, k_m)</math> is higher than the hash weight of any other node for that key.\n\n==== Locality-preserving hashing ====\n[[Locality-preserving hashing]] ensures that similar keys are assigned to similar objects. This can enable a more efficient execution of range queries.\nSelf-Chord <ref>Agostino Forestiero, Emilio Leonardi, Carlo Mastroianni and Michela Meo. [https://dx.doi.org/10.1109/TNET.2010.2046745 Self-Chord: a Bio-Inspired P2P Framework for Self-Organizing Distributed Systems]. IEEE/ACM Transactions on Networking, 2010.</ref> decouples object keys from peer IDs and sorts keys along the ring with a statistical approach based on the [[swarm intelligence]] paradigm. Sorting ensures that similar keys are stored by neighbour nodes and that discovery procedures, including range queries, can be performed in logarithmic time.\n\n=== Overlay network ===\nEach node maintains a set of [[Data link|link]]s to other nodes (its ''neighbors'' or [[routing table]]) . Together, these links form the [[overlay network]]. A node picks its neighbors according to a certain structure, called the [[network topology|network's topology]].\n\nAll DHT topologies share some variant of the most essential property: for any key {{mvar|k}}, each node either has a node ID that owns {{mvar|k}} or has a link to a node whose node ID is ''closer'' to {{mvar|k}}, in terms of the keyspace distance defined above. It is then easy to route a message to the owner of any key {{mvar|k}} using the following [[greedy algorithm]] (that is not necessarily globally optimal): at each step, forward the message to the neighbor whose ID is closest to {{mvar|k}}. When there is no such neighbor, then we must have arrived at the closest node, which is the owner of {{mvar|k}} as defined above. This style of routing is sometimes called [[key-based routing]].\n\nBeyond basic routing correctness, two important constraints on the topology are to guarantee that the maximum number of [[Hop (networking)|hops]] in any route (route length) is low, so that requests complete quickly; and that the maximum number of neighbors of any node (maximum node [[Degree (graph theory)|degree]]) is low, so that maintenance overhead is not excessive. Of course, having shorter routes requires higher [[maximum degree]]. Some common choices for maximum degree and route length are as follows, where {{mvar|n}} is the number of nodes in the DHT, using [[Big O notation]]:\n\n{| class=\"wikitable\"\n|-\n! Max. degree !! Route length !! Used in !! Note\n|-\n| <math>O(1)</math> || <math>O(n)</math> ||  || \n|-\n| <math>O(\\log n)</math> || <math>O(\\log n/\\log (\\log n))</math> || [[Koorde]] || \n|-\n| <math>O(\\log n)</math> || <math>O(\\log n)</math> || [[Chord (peer-to-peer)|Chord]] || most common, but not optimal (degree/route length)\n|-\n| <math>O(1)</math> || <math>O(\\log n)</math> ||  || \n|-\n| <math>O(\\sqrt{n})</math> || <math>O(1)</math> ||  || \n|}\n\nThe most common choice, <math>O(\\log n)</math> degree/route length, is not optimal in terms of degree/route length tradeoff, but such topologies typically allow more flexibility in choice of neighbors. Many DHTs use that flexibility to pick neighbors that are close in terms of latency in the physical underlying network.\n\nMaximum route length is closely related to [[Diameter (graph theory)|diameter]]: the maximum number of hops in any shortest path between nodes. Clearly, the network's worst case route length is at least as large as its diameter, so DHTs are limited by the degree/diameter tradeoff<ref>{{citation |url=http://maite71.upc.es/grup_de_grafs/table_g.html |title=The (Degree,Diameter) Problem for Graphs |publisher=Maite71.upc.es |date= |accessdate=2012-01-10}}</ref> that is fundamental in [[graph theory]]. Route length can be greater than diameter, since the greedy routing algorithm may not find shortest paths.<ref>Gurmeet Singh Manku, Moni Naor, and Udi Wieder. [http://citeseer.ist.psu.edu/naor04know.html Know thy Neighbor's Neighbor: the Power of Lookahead in Randomized P2P Networks]. Proc. STOC, 2004.</ref>\n\n=== Algorithms for overlay networks ===\nAside from routing, there exist many algorithms that exploit the structure of the overlay network for sending a message to all nodes, or a subset of nodes, in a DHT.<ref>[[Ali Ghodsi]]. [http://www.sics.se/~ali/thesis/ Distributed k-ary System: Algorithms for Distributed Hash Tables] {{webarchive |url=https://web.archive.org/web/20070522060750/http://www.sics.se/~ali/thesis/ |date=May 22, 2007 }}. KTH-Royal Institute of Technology, 2006.</ref> These algorithms are used by applications to do [[overlay multicast]], range queries, or to collect statistics. Two systems that are based on this approach are Structella,<ref>Miguel Castro, Manuel Costa, and Antony Rowstron. [https://dx.doi.org/10.1145/972374.972397 Should we build Gnutella on a structured overlay?]. Computer Communication Review, 2004.</ref> which implements flooding and random walks on a Pastry overlay, and DQ-DHT,<ref>Domenico Talia and Paolo Trunfio. [https://dx.doi.org/10.1016/j.jpdc.2010.08.012 Enabling Dynamic Querying over Distributed Hash Tables]. Journal of Parallel and Distributed Computing, 2010.</ref> which implements a dynamic querying search algorithm over a Chord network.\n\n== Security ==\n\nBecause of the decentralization, fault tolerance, and scalability of DHTs, they are inherently more resilient against a hostile attacker than a typical centralized system.{{Vague|date=June 2016}}\n\nOpen systems for [[distributed data storage]] that are robust against massive hostile attackers are feasible.<ref>\nBaruch Awerbuch, Christian Scheideler.\n\"Towards a scalable and robust DHT\".\n2006.\n{{doi|10.1145/1148109.1148163}}\n</ref>\n\nA DHT system that is carefully designed to have [[Byzantine fault tolerance]] can defend against a [[Sybil attack]].<ref>\nMaxwell Young; Aniket Kate; Ian Goldberg; Martin Karsten.\n[http://www.cypherpunks.ca/~iang/pubs/robustMessagePassing.pdf \"Practical Robust Communication in DHTs Tolerating a Byzantine Adversary\"].\n</ref><ref>\nNatalya Fedotova; Giordano Orzetti; Luca Veltri; Alessandro Zaccagnini.\n\"Byzantine agreement for reputation management in DHT-based peer-to-peer networks\".\n{{doi|10.1109/ICTEL.2008.4652638}}\n</ref>\n\n== DHT implementations ==\nMost notable differences encountered in practical instances of DHT implementations include at least the following:\n* The address space is a parameter of DHT. Several real world DHTs use 128-bit or 160-bit key space\n* Some real-world DHTs use hash functions other than SHA-1.\n* In the real world the key <math>k</math> could be a hash of a file's ''content'' rather than a hash of a file's ''name'' to provide [[content-addressable storage]], so that renaming of the file does not prevent users from finding it.\n* Some DHTs may also publish objects of different types. For example, key <math>k</math> could be the node <math>ID</math> and associated data could describe how to contact this node. This allows publication-of-presence information and often used in IM applications, etc. In the simplest case, <math>ID</math> is just a random number that is directly used as key <math>k</math> (so in a 160-bit DHT <math>ID</math> will be a 160-bit number, usually randomly chosen). In some DHTs, publishing of nodes' IDs is also used to optimize DHT operations.\n* Redundancy can be added to improve reliability.  The <math>(k, data)</math> key pair can be stored in more than one node corresponding to the key. Usually, rather than selecting just one node, real world DHT algorithms select <math>i</math> suitable nodes, with <math>i</math> being an implementation-specific parameter of the DHT. In some DHT designs, nodes agree to handle a certain keyspace range, the size of which may be chosen dynamically, rather than hard-coded.\n* Some advanced DHTs like [[Kademlia]] perform iterative lookups through the DHT first in order to select a set of suitable nodes and send <math>put(k, data)</math> messages only to those nodes, thus drastically reducing useless traffic, since published messages are only sent to nodes that seem suitable for storing the key <math>k</math>; and iterative lookups cover just a small set of nodes rather than the entire DHT, reducing useless forwarding. In such DHTs, forwarding of <math>put(k, data)</math> messages may only occur as part of a self-healing algorithm: if a target node receives a <math>put(k, data)</math> message, but believes that <math>k</math> is out of its handled range and a closer node (in terms of DHT keyspace) is known, the message is forwarded to that node. Otherwise, data are indexed locally. This leads to a somewhat self-balancing DHT behavior. Of course, such an algorithm requires nodes to publish their presence data in the DHT so the iterative lookups can be performed.\n\n== Examples ==\n\n{{Col-begin|width=100%}}\n{{Col-break|width=50%}}\n* DHT protocols and implementations\n** [[Apache Cassandra]]\n** [[BATON Overlay]]\n** [[Mainline DHT]] - Standard DHT used by BitTorrent (based on [[Kademlia]] as provided by Khashmir<ref>[http://www.tribler.org/trac/wiki/Khashmir Tribler wiki] {{webarchive |url=https://web.archive.org/web/20101204111423/http://www.tribler.org/trac/wiki/Khashmir |date=December 4, 2010 }} retrieved January 2010.</ref>)\n** [[Content Addressable Network|CAN]] (Content Addressable Network)\n** [[Chord (DHT)|Chord]]\n** [[Koorde]]\n** [[Kademlia]]\n** [[Pastry (DHT)|Pastry]]\n** [[P-Grid]]\n** [[Riak]]\n** [[Tapestry (DHT)|Tapestry]]\n** [[TomP2P]]\n** [[Voldemort (distributed data store)|Voldemort]]\n\n{{Col-break|width=50%}}\n\n* Applications employing DHTs\n<!-- NOTE ABOUT ADDING ITEMS TO THIS SECTION: Please provide a reference so the editors know that (1) the application actually uses a DHT, and (2) the project is notable as opposed to just someone's project from networking class. You can do this by providing a wikilink here or putting a note or external link on the Talk page. PLEASE DO NOT ADD BITTORRENT CLIENTS as these are already covered via the link to \"Comparison of BitTorrent clients\"; there's no reason to duplicate that list here. -->\n** [[BTDigg]]: [[BitTorrent (protocol)|BitTorrent]] DHT search engine\n** [[cjdns]]: routing engine for mesh-based networks\n** [[CloudSNAP]]: a decentralized web application deployment platform\n** [[Codeen]]: web caching\n** [[Coral Content Distribution Network]]\n** [[FAROO]]: peer-to-peer Web search engine\n** [[Freenet]]: a censorship-resistant anonymous network\n** [[GlusterFS]]: a distributed file system used for storage virtualization\n** [[GNUnet]]: Freenet-like distribution network including a DHT implementation\n** [[I2P]]: An open-source anonymous [[peer-to-peer]] network.\n** [[I2P | I2P-Bote]]: serverless secure anonymous e-mail.\n** [[InterPlanetary File System|IPFS]]: A content-addressable, peer-to-peer hypermedia distribution protocol\n** [[JXTA]]: open-source P2P platform\n** [[Oracle Coherence]]: an in-memory data grid built on top of a Java DHT implementation\n** [[Perfect Dark (P2P)|Perfect Dark]]: a [[peer-to-peer]] [[file-sharing]] application from Japan\n** [[Retroshare]]: a [[Friend-to-friend]] network<ref>[http://retroshare.sourceforge.net/wiki/index.php/Frequently_Asked_Questions#4-1_How_does_RetroShare_know_my_friend.27s_IP_address_and_port.3F_Why_don.27t_I_need_a_static_IP_address.3F_What_is_DHT_for.3F Retroshare FAQ] retrieved December 2011</ref>\n** [[Ring (software)|Ring]]: a privacy-preserving voice, video and chat communication platform, based on a Kademlia-like DHT\n** [[Tox (protocol)|Tox]]: an [[instant messaging]] system intended to function as a [[Skype]] replacement\n** [[Twister (software)|Twister]]: a [[microblogging]] [[peer-to-peer]] platform\n** [[YaCy]]: a distributed [[Web search engine|search engine]]\n{{Col-end}}\n\n== See also ==\n{{Portal|Computer Science}}\n* [[Couchbase Server]]: a persistent, replicated, clustered distributed object storage system compatible with memcached protocol.\n* [[Memcached]]: a high-performance, distributed memory object caching system.\n* [[Prefix hash tree]]: sophisticated querying over DHTs.\n* [[Merkle tree]]: tree having every non-leaf node labelled with the hash of the labels of its children nodes.\n* Most [[distributed data store]]s employ some form of DHT for lookup.\n\n== References ==\n{{Reflist|30em}}\n\n== External links ==\n* [http://linuxjournal.com/article/6797 Distributed Hash Tables, Part 1] by Brandon Wiley.\n* [http://ast-deim.urv.cat/cpairot/dhts.html Distributed Hash Tables links] Carles Pairot's Page on DHT and P2P research\n* [https://web.archive.org/web/*/http://kademlia.scs.cs.nyu.edu/ kademlia.scs.cs.nyu.edu] Archive.org snapshots of kademlia.scs.cs.nyu.edu\n* {{cite paper | citeseerx = 10.1.1.111.4197 | title = IEEE Survey on overlay network schemes | author1 = Eng-Keong Lua | first2 = Jon | last2 = Crowcroft | first3 = Marcelo | last3 = Pias | first4 = Ravi | last4 = Sharma | first5 = Steve | last5 = Lim | postscript = : }} covering unstructured and structured decentralized overlay networks including DHTs (Chord, Pastry, Tapestry and others).\n* [http://www.cs.helsinki.fi/u/jakangas/MLDHT/ Mainline DHT Measurement] at Department of Computer Science, University of Helsinki, Finland.\n\n{{BitTorrent}}\n\n{{DEFAULTSORT:Distributed Hash Table}}\n[[Category:Distributed data storage]]\n[[Category:File sharing]]\n[[Category:Distributed data structures]]\n[[Category:Hash based data structures]]",
            "slug": "distributed-hash-table",
            "date_updated": 1518337207249,
            "imported": "https://en.wikipedia.org/wiki/Distributed hash table"
        }
    ]
}