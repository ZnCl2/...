{
    "article": [
        {
            "title": "Scripting language",
            "text": "A '''scripting''' or '''script language''' is a [[programming language]] for a special [[run-time environment]] that automates the [[Execution (computing)|execution]] of tasks<ref name='ecma262'>{{cite web | url = https://tc39.github.io/ecma262/#sec-overview | title = ECMAScript 2019 Language Specification | accessdate = 2018-04-02 | publisher = \nwww.ecma-international.org}}</ref>; the tasks could alternatively be executed one-by-one by a human operator. Scripting languages are often [[interpreted language|interpreted]] (rather than [[Compiler|compiled]]).\n\nPrimitives are usually the elementary tasks or [[Application Programming Interface|API]] calls{{Clarification needed|date=April 2019}}, and the language allows them to be combined into more programs. Environments that can be automated through scripting include [[software application|software '''applications''']], [[web page]]s within a [[web browser]], usage of the [[Shell script|shells]] of [[operating system]]s (OS), [[embedded system]]s, as well as numerous games. A scripting language can be viewed as a [[domain-specific language]] for a particular environment; in the case of scripting an application, it is also known as an '''extension language'''. Scripting languages are also sometimes referred to as [[very high-level programming language]]s, as they operate at a high level of abstraction, or as '''control languages''', particularly for job control languages on mainframes.\n\nThe term \"scripting language\" is also used loosely to refer to [[Dynamic programming language|dynamic]] [[high-level language|high-level]] [[General-purpose programming language|general-purpose languages]], such as [[Perl]],<ref name='sheppard00'>{{cite web | url = http://www.perl.com/pub/2000/10/begperl1.html | title = Beginner's Introduction to Perl | accessdate = 2011-01-08 | last = Sheppard | first = Doug | date = 2000-10-16 | publisher = dev.perl.org}}</ref> [[PowerShell]], [[Python (programming language)|Python]], and [[Tcl]]<ref>[http://www.perl.com/pub/2007/12/06/soto-11.html Programming is Hard, Let's Go Scripting…], [[Larry Wall]], December 6, 2007</ref> with the term \"script\" often used for small programs (up to a few thousand lines of code) in such languages, or in domain-specific languages such as the text-processing languages [[sed]] and [[AWK]]. Some of these languages were originally developed for use within a particular environment, and later developed into portable domain-specific or general-purpose languages.\nConversely, many general-purpose languages have dialects that are used as scripting languages. This article discusses scripting languages in the narrow sense of languages for a specific environment.\n\nThe spectrum of scripting languages ranges from very small and highly [[domain-specific language]]s to [[general-purpose programming language]]s used for scripting. Standard examples of scripting languages for specific environments include: [[Bash (Unix shell)|Bash]], for the [[Unix]] or [[Unix-like]] [[operating system]]s; [[ECMAScript]] ([[JavaScript]]), for web browsers; and [[Visual Basic for Applications]], for [[Microsoft Office]] applications. [[Lua (programming language)|Lua]] is a language designed and widely used as an extension language. [[Python (programming language)|Python]] is a general-purpose language that is also commonly used as an extension language, while ECMAScript is still primarily a scripting language for web browsers, but is also used as a general-purpose language. The [[Emacs Lisp]] dialect of [[Lisp (programming language)|Lisp]] (for the [[Emacs]] editor) and the Visual Basic for Applications dialect of [[Visual Basic]] are examples of scripting language dialects of general-purpose languages. Some game systems, notably the [[Second Life]] [[virtual world]] and the [[Trainz]] franchise of Railroad simulators have been extensively extended in functionality by scripting extensions ([[Linden Scripting Language]] and [[TrainzScript]]). In other games like [[Wesnoth]], the variety of actual games played by players are scripts written by other users.\n\n==Characteristics==\nTypical scripting languages are intended to be very fast to learn and write in, either as short source code files or interactively in a [[read–eval–print loop]] (REPL, language shell).<ref>{{cite book\n|title=The Computing Universe: A Journey through a Revolution\n|first1=Tony\n|last1=Hey\n|first2=Gyuri\n|last2=Pápay\n|publisher=Cambridge University Press\n|year=2014\n|isbn=978-1-31612322-5\n|page=[https://books.google.com/books?id=q4FIBQAAQBAJ&pg=PA76 76]\n|postscript=, \"A major characteristic of modern scripting languages is their interactivity, sometimes referred to as a ''REPL'' programming environment. […] The characteristics of ease of use and immediate execution with a REPL environment are sometimes taken as the definition of a scripting language.\"}}</ref> This generally implies relatively simple [[syntax (programming languages)|syntax]] and [[semantics (computer science)|semantics]]; typically a \"script\" (code written in the scripting language) is executed from start to finish, as a \"script\", with no explicit [[entry point]].\n\nFor example, it is uncommon to characterise [[Java (programming language)|Java]] as a scripting language because of its lengthy syntax and rules about which classes exist in which files, and it is not directly possible to execute Java interactively, because source files can only contain definitions that must be invoked externally by a [[host application]] or [[application launcher]].\n\n<syntaxhighlight lang=\"java\">\npublic class HelloWorld {\n  public void printHelloWorld() {\n    System.out.println(\"Hello World\");\n  }\n}\n</syntaxhighlight>\nThis piece of code intended to print \"Hello World\" does nothing as ''main()'' is ''not declared'' in '''HelloWorld''' class.\n\nIn contrast, [[Python (computer language)|Python]] allows definition of some functions in a single file, or to avoid functions altogether and use [[imperative programming]] style, or even use it interactively.\n\n<code>print (\"Hello World\")</code>\n\nThis one line of Python code prints \"Hello World\"; no ''declarative'' statement like ''main()'' is required here.\n\nA scripting language is usually [[Interpreted language|interpreted]] from source code or [[bytecode]].<ref>{{cite web\n  | last=Brown\n  | first=Vicki\n  | title=Scripting Languages\n  | url=http://www.mactech.com/articles/mactech/Vol.15/15.09/ScriptingLanguages/index.html\n  | accessdate=2009-07-22}}\n</ref> By contrast, the software environment the scripts are written for is typically written in a [[compiled language]] and distributed in [[machine code]] form.\n\nScripting languages may be designed for use by end users of a program—[[end-user development]]—or may be only for internal use by developers, so they can write portions of the program in the scripting language. Scripting languages typically use [[abstraction (computer science)|abstraction]], a form of [[information hiding]], to spare users the details of internal variable types, data storage, and [[memory management]].\n\nScripts are often created or modified by the person executing them,<ref>{{cite web|publisher=IEEE Computer|year=2008|url=http://www.cse.wustl.edu/~loui/praiseieee.html|title=In praise of scripting|first=Ronald|last=Loui|access-date=2013-08-27|archive-url=https://web.archive.org/web/20150923211452/http://www.cse.wustl.edu/~loui/praiseieee.html#|archive-date=2015-09-23|dead-url=yes|df=}}</ref> but they are also often distributed, such as when large portions of games are written in a scripting language.\n\n==History==\nEarly [[mainframe computer]]s (in the 1950s) were non-interactive, instead using [[batch processing]]. IBM's [[Job Control Language]] (JCL) is the archetype of languages used to control batch processing.<ref>{{cite book|last=IBM Corporation|title=IBM System/360 Operating System Job Control Language (C28-6529-4)|year=1967|url=http://www.bitsavers.org/pdf/ibm/360/os/R01-08/C28-6539-4_OS_JCL_Mar67.pdf}}</ref>\n\nThe first interactive [[shell (computing)|shell]]s were developed in the 1960s to enable remote operation of the first [[time-sharing]] systems, and these used [[shell scripts]], which controlled running computer programs within a computer program, the shell. [[Calvin Mooers]] in his [[TRAC (programming language)|TRAC]] language is generally credited with inventing ''command substitution'', the ability to embed commands in scripts that when interpreted insert a character string into the script.<ref>{{cite web|last=Mooers|first=Calvin|title=TRAC, A Procedure-Describing Language for the Reactive Typewriter|url=http://tracfoundation.org/trac64/procedure.htm|archiveurl=https://web.archive.org/web/20010425014914/http://tracfoundation.org/trac64/procedure.htm|archivedate=2001-04-25|accessdate=March 9, 2012}}</ref> [[Multics]] calls these ''active functions''.<ref>{{cite web |editor-last=Van Vleck |editor-first=Thomas |title=Multics Glossary – A — (active function) |url=http://www.multicians.org/mga.html |accessdate=March 9, 2012}}</ref>\n[[Louis Pouzin]] wrote an early processor for command scripts called RUNCOM for [[Compatible Time Sharing System|CTSS]] around 1964. [[Stuart Madnick]] at MIT wrote a scripting language for IBM's [[CP/CMS]] in 1966. He originally called this processor COMMAND, later named [[CMS EXEC|EXEC]].<ref>{{cite web|last=Varian|first=Melinda|title=VM AND THE VM COMMUNITY: Past, Present, and Future|url=http://web.me.com/melinda.varian/Site/Melinda_Varians_Home_Page_files/neuvm.pdf|accessdate=March 9, 2012}}</ref> Multics included an offshoot of CTSS RUNCOM, also called RUNCOM.<ref>{{cite web |editor-last=Van Vleck |editor-first=Thomas |title=Multics Glossary – R — (RUNCOM) |url=http://www.multicians.org/mgr.html#runcom |accessdate=March 9, 2012}}</ref> [[CMS EXEC|EXEC]] was eventually replaced by [[EXEC 2]] and [[REXX]].\n\nLanguages such as [[Tcl]] and [[Lua (programming language)|Lua]] were specifically designed as general-purpose scripting languages that could be embedded in any application. Other languages such as [[Visual Basic for Applications]] (VBA) provided strong integration with the automation facilities of an underlying system. Embedding of such general-purpose scripting languages instead of developing a new language for each application also had obvious benefits, relieving the application developer of the need to code a language translator from scratch and allowing the user to apply skills learned elsewhere.\n\nSome software incorporates several different scripting languages. Modern [[web browser]]s typically provide a language for writing extensions to the browser itself, and several standard embedded languages for controlling the browser, including [[JavaScript]] (a dialect of [[ECMAScript]]) or [[XUL]].\n\n==Types==\n\n===Glue languages===\n{{unreferenced section|date=March 2007}}\nScripting is often contrasted with [[system programming]], as in [[Ousterhout's dichotomy]] or \"[[programming in the large and programming in the small]]\". In this view, scripting is particularly [[glue code]], connecting [[software component]]s, and a language specialized for this purpose is a ''glue language''. Pipelines and shell scripting are archetypal examples of glue languages, and [[Perl]] was initially developed to fill this same role. [[Web development]] can be considered a use of glue languages, interfacing between a [[database]] and [[web server]]. But if a substantial amount of logic is written in script, it is better characterized as simply another software component, not \"glue\".\n\nGlue languages are especially useful for writing and maintaining:\n* custom commands for a command shell;\n* smaller programs than those that are better implemented in a compiled language;{{Citation needed|date=May 2017}}\n* \"wrapper\" programs for executables, like a batch file that moves or manipulates files and does other things with the operating system before or after running an application like a word processor, spreadsheet, data base, assembler, compiler, etc.;\n* scripts that may change;\n* [[Rapid application development|Rapid application development]] of a solution eventually implemented in another, usually compiled, language.\n\nGlue language examples:\n{{div col|colwidth=18em}}\n* [[AppleScript]]\n* [[ColdFusion]]\n* [[DIGITAL Command Language|DCL]]\n* [[Embeddable Common Lisp]]\n* [[ECL programming language|ecl]]\n* [[Erlang (programming language)|Erlang]]\n* [[Job Control Language|JCL]]\n* [[CoffeeScript]]\n* [[Julia (programming language)|Julia]]\n* [[JScript]] and [[JavaScript]]\n* [[Lua (programming language)|Lua]]\n* [[m4 (computer language)|m4]]\n* [[ModernPascal|Modern Pascal]]\n* [[Perl]] (5 and 6)\n* [[PHP]]\n* [[Windows PowerShell|PowerShell]]\n* [[Pure (programming language)|Pure]]\n* [[Python (programming language)|Python]]\n* [[Rebol]]\n* [[Red (programming language)|Red]]\n* [[Rexx]]\n* [[Ruby (programming language)|Ruby]]\n* [[Scheme (programming language)|Scheme]]\n* [[Tcl]]\n* [[Unix]] [[Shell script]]s ([[Korn shell|ksh]], [[C shell|csh]], [[Bash (Unix shell)|bash]], [[Bourne shell|sh]] and others)\n* [[VBScript]]\n* [[Work Flow Language]]\n* [[XSLT]]\n{{div col end}}\n\n[[Macro (computer science)|Macro]] languages exposed to operating system or application components can serve as glue languages. These include [[Visual Basic for Applications]], [[WordBasic]], [[LotusScript]], [https://www.oberonplace.com/tutor/page1.htm CorelScript], Hummingbird Basic, QuickScript, [https://msdn.microsoft.com/en-us/library/ms994312.aspx SaxBasic], and [[WinWrap Basic]]. Other tools like [[AWK]] can also be considered glue languages, as can any language implemented by a [[Windows Script Host]] engine (VBScript, JScript and VBA by default in Windows and third-party engines including implementations of Rexx, Perl, Tcl, Python, XSLT, Ruby, Modern Pascal, Delphi, and C). A majority of applications can access and use operating system components via the [[object model]]s or its own functions.\n\nOther devices like programmable calculators may also have glue languages; the operating systems of PDAs such as Windows CE may have available native or third-party macro tools that glue applications together, in addition to implementations of common glue languages—including Windows NT, MS-DOS and some Unix shells, Rexx, Modern Pascal, PHP, and Perl. Depending upon the OS version, WSH and the default script engines (VBScript and JScript) are available.\n\nProgrammable calculators can be programmed in glue languages in three ways. For example, the [[Texas Instruments]] [[TI-92]], by factory default can be programmed with a command script language. Inclusion of the scripting and glue language [[Lua (programming language)|Lua]] in the [[TI-NSpire]] series of calculators could be seen as a successor to this. The primary on-board high-level programming languages of most graphing calculators (most often Basic variants, sometimes Lisp derivatives, and more uncommonly, C derivatives) in many cases can glue together calculator functions—such as graphs, lists, matrices, etc. Third-party implementations of more comprehensive Basic version that may be closer to variants listed as glue languages in this article are available—and attempts to implement Perl, Rexx, or various operating system shells on the TI and HP graphing calculators are also mentioned. PC-based C [[cross-compilers]] for some of the TI and HP machines used in conjunction with tools that convert between C and Perl, Rexx, AWK, as well as shell scripts to Perl, Modern Pascal, VBScript to and from Perl make it possible to write a program in a glue language for eventual implementation (as a compiled program) on the calculator.\n\n===Job control languages and shells===\n{{main|Shell script}}\nA major class of scripting languages has grown out of the automation of [[job control (computing)|job control]], which relates to starting and controlling the behavior of system programs. (In this sense, one might think of shells as being descendants of IBM's JCL, or [[Job Control Language]], which was used for exactly this purpose.) Many of these languages' interpreters double as [[command-line interpreter]]s such as the [[Unix shell]] or the MS-DOS <code>[[COMMAND.COM]]</code>. Others, such as [[AppleScript]] offer the use of English-like commands to build scripts.\n\n===GUI scripting===\nWith the advent of graphical user interfaces, a specialized kind of scripting language emerged for controlling a computer. These languages interact with the same graphic windows, menus, buttons, and so on that a human user would. They do this by simulating the actions of a user. These languages are typically used to automate user actions. Such languages are also called \"[[Macro (computer science)#Keyboard and mouse macros|macros]]\" when control is through simulated key presses or mouse clicks, as well as tapping or pressing on a touch-activated screen.\n\nThese languages could in principle be used to control any GUI application; but, in practice their use is limited because their use needs support from the application and from the [[operating system]]. There are a few exceptions to this limitation. Some GUI scripting languages are based on recognizing graphical objects from their display screen [[pixel]]s. These GUI scripting languages do not depend on support from the operating system or application.\n\n===Application-specific languages===\nApplication specific languages can be split in many different categories, i.e. standalone based app languages (executable) or internal application specific languages (postscript, xml, gscript as some of the widely distributed scripts, respectively implemented by Adobe, MS and Google) among others  include an idiomatic scripting language tailored to the needs of the application user. Likewise, many [[computer game]] systems use a custom scripting language to express the programmed actions of [[non-player character]]s and the game environment. Languages of this sort are designed for a single application; and, while they may superficially resemble a specific general-purpose language (e.g. [[QuakeC]], modeled after C), they have custom features that distinguish them. [[Emacs Lisp]], while a fully formed and capable dialect of [[Lisp (programming language)|Lisp]], contains many special features that make it most useful for extending the editing functions of Emacs. An application-specific scripting language can be viewed as a [[domain-specific programming language]] specialized to a single application.\n\n===Extension/embeddable languages===\nA number of languages have been designed for the purpose of replacing application-specific scripting languages by being embeddable in application programs. The application programmer (working in C or another systems language) includes \"hooks\" where the scripting language can control the application. These languages may be technically equivalent to an application-specific extension language but when an application embeds a \"common\" language, the user gets the advantage of being able to transfer skills from application to application. A more generic alternative is simply to provide a library (often a C library) that a general-purpose language can use to control the application, without modifying the language for the specific domain.\n\nJavaScript began as and primarily still is a language for scripting inside [[web browser]]s; however, the standardisation of the language as [[ECMAScript]] has made it popular as a general-purpose embeddable language. In particular, the [[Mozilla]] implementation [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] is embedded in several environments such as the [[Yahoo! Widget Engine]]. Other applications embedding ECMAScript implementations include the [[Adobe Systems|Adobe]] products [[Adobe Flash]] ([[ActionScript]]) and [[Adobe Acrobat]] (for scripting [[PDF]] files).\n\n[[Tcl]] was created as an extension language but has come to be used more frequently as a general-purpose language in roles similar to [[Python (programming language)|Python]], [[Perl]], and [[Ruby (programming language)|Ruby]]. On the other hand, [[Rexx]] was originally created as a job control language, but is widely used as an extension language as well as a general-purpose language. Perl is a general-purpose language, but had the Oraperl (1990) dialect, consisting of a [[Perl]] 4 binary with [[Oracle Call Interface]] compiled in. This has however since been replaced by a library (Perl Module), [https://metacpan.org/module/DBD::Oracle DBD::Oracle].<ref>[https://metacpan.org/module/Oraperl Oraperl], CPAN]</ref><ref>\n[http://www.orafaq.com/wiki/Perl Perl], ''Underground Oracle FAQ''</ref>\n\nOther complex and task-oriented applications may incorporate and expose an embedded programming language to allow their users more control and give them more functionality than can be available through a user interface, no matter how sophisticated. For example, [[Autodesk Maya]] 3D authoring tools embed the [[Autodesk Maya#Mel scripting|MEL]] scripting language, or [[Blender (software)|Blender]] which uses [[Python (programming language)|Python]] to fill this role.\n\nSome other types of applications that need faster feature addition or tweak-and-run cycles (e.g. [[Game Engine|game engines]]) also use an embedded language. During the development, this allows them to prototype features faster and tweak more freely, without the need for the user to have intimate knowledge of the inner workings of the application or to rebuild it after each tweak (which can take a significant amount of time). The scripting languages used for this purpose range from the more common and more famous [[Lua (programming language)|Lua]] and [[Python (programming language)|Python]] to lesser-known ones such as [[AngelScript]] and [[Squirrel (programming language)|Squirrel]].\n\n[[Ch (computer programming)|Ch]] is another C compatible scripting option for the industry to embed into C/C++ application programs.\n\n==See also==\n* [[List of scripting languages]]\n* [[Architecture description language]]\n* [[Authoring language]]\n* [[Build automation]]<ref>{{Cite web|url=https://www.python.org/doc/essays/omg-darpa-mcc-position/|title=Glue it all together|last=Van Rossum|first=Guido|date=January 6–8, 1998|website=Glue It All Together With Python|publisher=python.org|access-date=}}</ref>\n* [[Configuration file]]\n* [[Interpreter directive]] / [[Shebang (Unix)]]\n* [[Templating language]]\n\n==References==\n{{reflist}}\n\n==Further reading==\n* {{cite book\n|title=The World of Scripting Languages\n|first=David William\n|last=Barron\n|isbn=0-471-99886-9 \n|year=2001}}\n\n==External links==\n{{Commonscat|Scripting languages}}\n*{{webarchive |url=https://web.archive.org/web/20041010125419/http://www.doc.ic.ac.uk/~np2/patterns/scripting/ |date=October 10, 2004 |title=Patterns for Scripted Applications }}\n*[http://www.modulusfe.com/products/trading-system-developer-components/tradescript/ Common Development Scenarios]\n\n{{Programming language}}\n\n{{DEFAULTSORT:Scripting Language}}\n[[Category:Scripting languages| ]]\n[[Category:Programming paradigms]]",
            "slug": "scripting-language",
            "date_updated": 1565239456456,
            "imported": "https://en.wikipedia.org/wiki/Scripting_language"
        }
    ]
}