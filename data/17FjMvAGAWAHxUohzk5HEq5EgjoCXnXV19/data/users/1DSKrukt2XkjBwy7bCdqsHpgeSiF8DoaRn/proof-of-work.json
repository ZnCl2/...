{
    "article": [
        {
            "title": "Proof of work",
            "text": "{{short description|A system that regulates the formation of blocks on a blockchain}}\n{{Cleanup|reason=Needs verification and documentation|date=May 2015}}\nA '''Proof-of-Work''' ('''PoW''') '''system''' (or '''protocol''', or '''function''') is a measure to deter [[denial of service]] attacks and other service abuses such as [[spam (electronic)|spam]] on a network by requiring some work from the service requester, usually meaning processing time by a computer.  The concept was invented by [[Cynthia Dwork]] and [[Moni Naor]] as presented in a 1993 journal article.{{r|\"DwoNao1992\"}} The term \"Proof of Work\" or PoW was first coined and formalized in a 1999 paper by [[Markus Jakobsson]] and Ari Juels.{{r|\"JaJue1999\"}}\n\nA key feature of these schemes is their asymmetry: the work must be moderately hard (yet feasible) on the requester side but easy to check for the service provider. This idea is also known as a CPU cost function, [[Client Puzzle Protocol|client puzzle]], computational puzzle or CPU pricing function. It is distinct from a [[CAPTCHA]], which is intended for a human to solve quickly, rather than a computer.\n\n==Background==\nOne popular system, used in [[Hashcash]], uses partial hash inversions<!-- *not* hash collisions...  --> to prove that work was done, as a good-will token to send an [[e-mail]]. For instance the following header represents about 2<sup>52</sup> hash computations to send a message to <code>calvin@comics.net</code> on [[January 19, 2038]]:\n\n X-Hashcash: 1:52:380119:calvin@comics.net:::9B760005E92F0DAE\n\nIt is verified with a single computation by checking that the [[SHA-1]] hash of the stamp (omit the header name <code>X-Hashcash:</code> including the colon and any amount of whitespace following it up to the digit '1') begins with 52 binary zeros, that is 13 hexadecimal zeros:{{ref|a}}\n\n 0000000000000756af69e2ffbdb930261873cd71\n\nWhether PoW systems can actually solve a particular denial-of-service issue such as the spam problem is subject to debate;<ref name=\"LauClay2004\">{{cite journal\n | first1 = Ben | last1 = Laurie | first2 = Richard | last2 = Clayton\n | title  = Proof-of-work proves not to work | journal = WEIS 04 |date=May 2004\n}}</ref><ref name=\"LiuCa2006\">{{cite web\n | first1  = Debin | last1 = Liu | first2 = L. Jean | last2 = Camp\n | title   = Proof of Work can work - Fifth Workshop on the Economics of Information Security\n | url     = http://www.econinfosec.org/archive/weis2006/prog.html\n | date    = June 2006\n}}</ref>\nthe system must make sending spam emails obtrusively unproductive for the spammer, but should also not prevent legitimate users from sending their messages. In other words, a genuine user should not encounter any difficulties when sending an email, but an email spammer would have to expend a considerable amount of computing power to send out many emails at once. Proof-of-work systems are being used as a primitive by other more complex cryptographic systems such as [[bitcoin]] which uses a system similar to Hashcash.\n\n==Variants==\nThere are two classes of proof-of-work protocols.\n\n* '''Challenge-response''' protocols assume a direct interactive link between the requester (client) and the provider (server). The provider chooses a challenge, say an item in a set with a property, the requester finds the relevant response in the set, which is sent back and checked by the provider. As the challenge is chosen on the spot by the provider, its difficulty can be adapted to its current load. The work on the requester side may be bounded if the challenge-response protocol has a known solution (chosen by the provider), or is known to exist within a bounded search space.\n\n[[Image:Proof of Work challenge response.svg|550px|center]]\n\n* '''Solution-verification''' protocols do not assume such a link: as a result, the problem must be self-imposed before a solution is sought by the requester, and the provider must check both the problem choice and the found solution. Most such schemes are unbounded probabilistic iterative procedures such as [[Hashcash]].\n\n[[Image:Proof of Work solution verification.svg|550px|center]]\n\nKnown-solution protocols tend to have slightly lower variance than unbounded probabilistic protocols because the variance of a [[Uniform distribution (continuous)|rectangular distribution]] is lower than the variance of a [[Poisson distribution]] (with the same mean).{{Explain|date=February 2018|reason=What is a variance in this context? Why is the known-solution protocol related to a Poisson distribution and not some other distribution?}}  A generic technique for reducing variance is to use multiple independent sub-challenges, as the average of multiple samples will have a lower variance.\n\nThere are also fixed-cost functions such as the time-lock puzzle.\n\nMoreover, the underlying functions used by these schemes may be:\n* '''CPU-bound''' where the computation runs at the speed of the processor, [[Moore's law|which greatly varies in time]], as well as from high-end server to low-end portable devices.<ref>[http://wayback.vefsafn.is/wayback/20130721202930/http://downloadsquad.switched.com/2009/07/20/how-powerful-was-the-apollo-11-computer/ How powerful was the Apollo 11 computer?], a specific comparison that shows how different classes of devices have different processing power.</ref>\n* '''Memory-bound'''<ref name=\"ABuMaWo2003\"/><ref name=\"DwoGoNao2003\"/><ref name=\"Coe2005\"/><ref name=\"Tro2014\"/> where the computation speed is bound by main memory accesses (either latency or bandwidth), the performance of which is expected to be less sensitive to hardware evolution.\n* '''Network-bound'''<ref name=\"Abliz09\"/> if the client must perform few computations, but must collect some tokens from remote servers before querying the final service provider. In this sense, the work is not actually performed by the requester, but it incurs delays anyway because of the latency to get the required tokens.\n\nFinally, some PoW systems offer '''shortcut''' computations that allow participants who know a secret, typically a private key, to generate cheap POWs. The rationale is that mailing-list holders may generate stamps for every recipient without incurring a high cost. Whether such a feature is desirable depends on the usage scenario.\n\n==List of Proof-of-Work functions==\nHere is a list of known proof-of-work functions:\n<!-- include a brief description, references, comparison... -->\n* [[Quadratic residue|Integer square root modulo]] a large prime<ref name=\"DwoNao1992\">{{cite journal\n | first1 = Cynthia | last1 = Dwork | author1-link = Cynthia Dwork | first2 = Moni | last2 = Naor | author2-link = Moni Naor\n | title = Pricing via Processing, Or, Combatting Junk Mail, Advances in Cryptology\n | journal = CRYPTO’92: Lecture Notes in Computer Science No. 740 | publisher =  Springer | year = 1993 | pages = 139–147\n | url = http://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.ps\n}}</ref>{{Dubious|Modular square roots|date=May 2019}}\n* Weaken [[Fiat–Shamir heuristic|Fiat–Shamir]] signatures<ref name=\"DwoNao1992\"/>\n* Ong–Schnorr–Shamir signature broken by Pollard<ref name=\"DwoNao1992\"/>\n* Partial hash inversion<ref name=\"Ba1997\">{{cite web\n | first = Adam | last =  Back\n | url = http://hashcash.org\n | title =  HashCash\n}} Popular Proof-of-Work system. First announce in March 1997.</ref><ref name=\"GaJaMaMa1998\">{{cite journal\n | first1 = Eran | last1 = Gabber | first2 = Markus | last2 = Jakobsson | first3 = Yossi | last3 = Matias | first4 = Alain J. | last4 =Mayer\n | title = Curbing junk e-mail via secure classification | journal = Financial Cryptography | pages = 198–213 | year = 1998|url=http://www.academia.edu/download/39946025/Curbing_Junk_E-Mail_via_Secure_Classific20151112-14708-1fnuq3w.pdf\n}}</ref>{{r|\"JaJue1999\"}} This paper formalizes the idea of a proof of work (POW) and introduces \"the dependent idea of a [[bread pudding protocol]]\", a \"re-usable Proof of Work\" (RPOW) system.''<ref name=\"WaRei2003\">{{cite journal\n | first1 = Xiao-Feng | last1 = Wang | first2 = Michael | last2 = Reiter\n | title = Defending against denial-of-service attacks with puzzle auctions\n | journal = IEEE Symposium on Security and Privacy '03 |date=May 2003\n |url = http://cs.unc.edu/~reiter/papers/2003/SP.pdf\n}}</ref> as [[Hashcash]]\n* Hash sequences<ref name=\"FraMa1997\">{{cite journal\n | first1 = Matthew K. | last1 = Franklin | author1-link = Matthew K. Franklin | first2 = Dahlia | last2 = Malkhi | author2-link = Dahlia Malkhi\n | title =  Auditable metering with lightweight security\n | journal = Financial Cryptography '97 | year = 1997}} Updated version May 4, 1998.</ref>\n* Puzzles<ref name=\"JueBrai1999\">{{cite journal\n | first1 = Ari | last1 =  Juels | first2 = John | last2 = Brainard\n | title =  Client puzzles: A cryptographic defense against connection depletion attacks | journal =  NDSS 99 | year = 1999 }}</ref>\n* [[Diffie–Hellman]]-based puzzle<ref name=\"WaJueHaFe2004\">{{cite journal\n | first1 = Brent | last1 = Waters | first2 = Ari | last2 = Juels | first3 = John A. | last3 = Halderman | first4 = Edward W. | last4 = Felten | author4-link = Edward Felten\n | title =  New client puzzle outsourcing techniques for DoS resistance\n | journal =  11th ACM Conference on Computer and Communications Security | year = 2004 | url=http://www.cs.utexas.edu/~bwaters/publications/papers/outsource_paper.pdf\n}}</ref>\n* Moderate<ref name=\"ABuMaWo2003\">{{cite journal\n | first1 = Martín | last1 =  Abadi | author1-link = Martín Abadi | first2 = Mike | last2 =  Burrows | first3 = Mark | last3 = Manasse | first4 = Ted | last4 = Wobber\n | title = Moderately hard, memory-bound functions\n | journal = ACM Trans. Inter. Tech. | volume =  5 | number = 2 | pages = 299–327 | year = 2005 | url = https://www.researchgate.net/profile/Ted_Wobber/publication/220169842_Moderately_Hard_Memory-bound_Functions/links/09e41509aeb464744f000000.pdf\n}}</ref>\n* Mbound<ref name=\"DwoGoNao2003\">{{cite journal\n | first1 = Cynthia | last1 =  Dwork | author1-link = Cynthia Dwork | first2 =  Andrew | last2 =  Goldberg | author2-link = Andrew V. Goldberg | first3 = Moni | last3 = Naor | author3-link = Moni Naor\n | title =   On memory-bound functions for fighting spam\n | journal = Advances in Cryptology: CRYPTO 2003 |  volume = 2729 |  pages= 426–444 | publisher =  Springer | year = 2003\n}}</ref>\n* Hokkaido<ref name=\"Coe2005\">{{cite web\n | first = Fabien | last =  Coelho\n | title =  Exponential memory-bound functions for proof of work protocols\n | work =  Cryptology ePrint Archive, Report\n | url =  http://eprint.iacr.org/2005/356\n}}</ref>\n* Cuckoo Cycle<ref name=\"Tro2014\">{{cite web\n | first = John | last = Tromp\n | title = Cuckoo Cycle; a memory bound graph-theoretic proof-of-work\n | url = https://eprint.iacr.org/2014/059.pdf\n | journal = Financial Cryptography and Data Security: BITCOIN 2015 | publisher = Springer | pages = 49–62 | year = 2015\n}}</ref>\n* [[Merkle tree]] based<ref name=\"Coe2007\">{{cite web\n | first = Fabien | last =  Coelho\n | title = An (almost) constant-effort solution-verification proof-of-work protocol based on Merkle trees\n | work =  Cryptology ePrint Archive, Report  | url = http://eprint.iacr.org/2007/433\n}}</ref>\n* [[Guided tour puzzle protocol]]<ref name=\"Abliz09\">{{cite journal\n | first1 = Mehmud | last1 =  Abliz | first2 = Taieb | last2 = Znati\n | title =  A Guided Tour Puzzle for Denial of Service Prevention\n | journal  = Proceedings of the Annual Computer Security Applications Conference (ACSAC) 2009\n  | pages = 279–288 | location =  Honolulu, HI |date=December 2009 | url = http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.597.6304&rep=rep1&type=pdf\n}}</ref>\n\n==Reusable proof-of-work as e-money ==\n\nComputer scientist [[Hal Finney (cypherpunk)|Hal Finney]] built on the proof-of-work idea, yielding a system that exploited reusable proof of work (\"RPOW\").<ref>{{cite web\n | url = http://rpow.net/\n | title =  Reusable Proofs of Work\n | archiveurl = https://web.archive.org/web/20071222072154/http://rpow.net/\n | archivedate = December 22, 2007\n}}</ref>\nThe idea of making proofs-of-work reusable for some practical purpose had already been established in 1999.<ref name=\"JaJue1999\"/> Finney's purpose for RPoW was as [[token money]]. Just as a gold coin's value is thought to be underpinned by the value of the raw gold needed to make it, the value of an RPoW token is guaranteed by the value of the real-world resources required to 'mint' a PoW token. In Finney's version of RPoW, the PoW token is a piece of [[Hashcash]].\n\nA website can demand a PoW token in exchange for service. Requiring a PoW token from users would inhibit frivolous or excessive use of the service, sparing the service's underlying resources, such as bandwidth to the [[Internet]], computation, disk space, electricity, and administrative overhead.\n\nFinney's RPoW system differed from a PoW system in permitting the random exchange of tokens without repeating the work required to generate them. After someone had \"spent\" a PoW token at a website, the website's operator could exchange that \"spent\" PoW token for a new, unspent RPoW token, which could then be spent at some third-party website similarly equipped to accept RPoW tokens. This would save the resources otherwise needed to 'mint' a PoW token. The anti-counterfeit property of the RPoW token was guaranteed by [[Trusted computing|remote attestation]]. The RPoW server that exchanges a used PoW or RPoW token for a new one of equal value uses remote attestation to allow any interested party to verify what software is running on the RPoW server. Since the source code for Finney's RPoW software was published (under a [[BSD licenses|BSD]]-like license), any sufficiently knowledgeable programmer could, by inspecting the code, verify that the software (and, by extension, the RPoW server) never issued a new token except in exchange for a spent token of equal value.\n\nUntil 2009, Finney's system was the only RPoW system to have been implemented; it never saw economically significant use.\n\nRPoW is protected by the private keys stored in the [[trusted platform module|trusted platform module (TPM)]] hardware and manufacturers holding TPM private keys. Stealing a TPM manufacturer's key or obtaining the key by examining the TPM chip itself would subvert that assurance.\n\n==Bitcoin-type proof-of-work==\nIn 2009, the [[Bitcoin]] network went online. Bitcoin is a proof-of-work [[cryptocurrency]] that, like Finney's RPoW, is also based on the [[Hashcash]] PoW. But in Bitcoin double-spend protection is provided by a decentralized P2P protocol for tracking transfers of coins, rather than the hardware trusted computing function used by RPoW. Bitcoin has better trustworthiness because it is protected by computation. Bitcoins are \"mined\" using the Hashcash proof-of-work function by individual miners and verified by the decentralized nodes in the P2P bitcoin network.\n\nThe difficulty is periodically adjusted to keep the [[Blockchain#Block time|block time]] around a target time.\n\n==ASICs and mining pools==\nWithin the Bitcoin community there are groups working together in [[mining pool]]s.<ref>[https://blockchain.info/pools Overview of the Bitcoin mining pools] on blockchain.info</ref> Some miners use ASICs ([[Application-Specific Integrated Circuit]]) for PoW.<ref>[https://www.digitaltrends.com/computing/what-is-an-asic-miner/ What is an ASIC miner] on digitaltrends.com</ref> Some PoWs claim to be ASIC resistant, i.e. to limit the efficiency gain that an ASIC can have over commodity hardware, like a GPU, to be well under an order of magnitude. In practice, such claims have not withstood the test of time.{{cn|date=January 2019}}\n\n==See also==\n* [[Bitcoin]]\n* [[Cryptocurrency]]\n* [[Bitmessage]]\n* [[Proof-of-stake]]\n\n==Notes==\n:1.{{note|a}}On most Unix systems this can be verified with a command: <code>echo -n 1:52:380119:calvin@comics.net:::9B760005E92F0DAE | openssl sha1</code>\n\n==References==\n{{Reflist|30em|refs=\n<ref name=\"DwoNao1992\">{{cite journal\n | first1 = Cynthia | last1 = Dwork | author1-link = Cynthia Dwork | first2 = Moni | last2 = Naor | author2-link = Moni Naor\n | title = Pricing via Processing, Or, Combatting Junk Mail, Advances in Cryptology\n | journal = CRYPTO’92: Lecture Notes in Computer Science No. 740 | publisher =  Springer | year = 1993 | pages = 139–147\n | url = http://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.ps\n}}</ref>\n\n<ref name=\"JaJue1999\">{{cite journal\n | first1 = Markus | last1 =  Jakobsson | first2 = Ari | last2 = Juels\n | url = https://link.springer.com/chapter/10.1007/978-0-387-35568-9_18\n | title = Proofs of Work and Bread Pudding Protocols\n | journal = Secure Information Networks: Communications and Multimedia Security | pages = 258–272 | publisher = Kluwer Academic Publishers | year =1999\n}}</ref>\n}}\n\n==External links==\n* {{webarchive |url=https://web.archive.org/web/20071222072154/http://rpow.net/ |date=December 22, 2007 |title=Finney's system }}\n* [[bit gold]] [http://unenumerated.blogspot.com/2005/12/bit-gold.html Bit gold].  ''Describes a complete money system (including generation, storage, assay, and transfer) based on proof of work functions and the machine architecture problem raised by the use of these functions.''\n\n{{Bitcoin}}\n{{Cryptocurrencies|state=expanded}}\n\n{{DEFAULTSORT:Proof-Of-Work System}}\n[[Category:Cryptography]]\n[[Category:Cryptocurrencies]]",
            "slug": "proof-of-work",
            "date_updated": 1565238472586,
            "imported": "https://en.wikipedia.org/wiki/Proof_of_work"
        }
    ]
}