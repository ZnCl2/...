{
    "article": [
        {
            "title": "Torrent file",
            "text": "{{multiple issues|\n{{Primary sources|date=April 2010}}\n{{Too technical|date=March 2017}}\n{{refimprove|date=December 2018}}\n}}\n{{ Infobox file format\n| name = Torrent files\n| icon =\n| logo =\n| extension = <tt>.torrent</tt>\n| mime = application/x-bittorrent\n| standard = BEP-0003<ref name=\"bep0003\" />\n}}\n\nIn the [[BitTorrent]] file distribution system, a '''torrent file''' or '''METAINFO''' is a [[computer file]] that contains [[metadata]] about files and folders to be distributed, and usually also a list of the network locations of [[BitTorrent tracker|tracker]]s, which are computers that help participants in the system find each other and form efficient distribution groups called ''swarms''.<ref name=\"bep0003\">{{cite web|url=http://www.bittorrent.org/beps/bep_0003.html |title=BEP-0003: The BitTorrent Protocol Specification |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> A torrent file does not contain the content to be distributed; it only contains information about those files, such as their names, sizes, folder structure, and [[cryptographic hash function|cryptographic hash values]] for verifying file integrity. The term ''torrent '' may refer either to the metadata file or to the files downloaded, depending on the context.\n\nIn a nutshell, a torrent file is like an index, which facilitates the efficient lookup of information (but doesn't contain the information itself) and the address of available worldwide computers which upload the content. Torrent files themselves and the method of using torrent files have been created to ease the load on servers. With help of torrents, one can download files from other computers which have the file or even a fraction of the file. These \"peers\" allow downloading of the file in addition to, or in place of, the primary server.\n\nTorrent files are normally named with the [[filename extension|extension]] ''.torrent''.\n\n==Background==\nTypically, Internet access is asymmetrical, supporting greater download speeds than upload speeds, limiting the bandwidth of each download, and sometimes enforcing bandwidth caps and periods where systems are not accessible. This creates inefficiency when many people want to obtain the same set of files from a single source; the source must always be online and must have massive outbound bandwidth. The BitTorrent protocol addresses this by decentralizing the distribution, leveraging the ability of people to network \"[[peer-to-peer]]\", among themselves.\n\nEach file to be distributed is divided into small [[Chunk (information)|information chunks]] called ''pieces''. Downloading peers achieve high download speeds by requesting multiple pieces from different computers simultaneously in the swarm. Once obtained, these pieces are usually immediately made available for download by others in the swarm. In this way, the burden on the network is spread among the downloaders, rather than concentrating at a central distribution hub or cluster. As long as all the pieces are available, peers (downloaders and uploaders) can come and go; no one peer needs to have all the chunks, or to even stay connected to the swarm in order for distribution to continue among the other peers.\n\nA small torrent file is created to represent a file or folder to be shared. The torrent file acts as the key to initiating downloading of the actual content. Someone interested in receiving the shared file or folder first obtains the corresponding torrent file, either by directly downloading it, or by using a [[magnet URI scheme|magnet link]]. The user then opens that file in a BitTorrent client, which automates the rest of the process. In order to learn the Internet locations of peers which may be sharing pieces, the client connects to the trackers named in the torrent file, and/or achieves a similar result through the use of [[distributed hash table]]s. Then the client connects directly to the peers in order to request pieces and otherwise participate in a swarm. The client may also report progress to trackers, to help the tracker with its peer recommendations.\n\nWhen the client has all the pieces, they assemble them into a usable form. They may also continue sharing the pieces, elevating its status to that of ''seeder'' rather than ordinary peer.\n\n==File structure==\nA torrent file contains a list of files and integrity metadata about all the pieces, and optionally contains a list of trackers.\n\nA torrent file is a [[bencode]]d [[Associative array|dictionary]] with the following keys (the keys in any bencoded dictionary are [[Lexicographical order|lexicographically ordered]]):\n* <tt>announce</tt>—the URL of the tracker\n* <tt>info</tt>—this maps to a dictionary whose keys are dependent on whether one or more files are being shared:\n** <tt>files</tt>—a list of dictionaries each corresponding to a file (only when multiple files are being shared). Each dictionary has the following keys:\n*** <tt>length</tt>—size of the file in bytes.\n*** <tt>path</tt>—a list of strings corresponding to subdirectory names, the last of which is the actual file name\n** <tt>length</tt>—size of the file in bytes (only when one file is being shared)\n** <tt>name</tt>—suggested filename where the file is to be saved (if one file)/suggested directory name where the files are to be saved (if multiple files)\n** <tt>piece length</tt>—number of bytes per piece. This is commonly 2<sup>8 </sup>KiB = 256&nbsp;KiB = 262,144&nbsp;B.\n** <tt>pieces</tt>—a [[hash list]], i.e., a concatenation of each piece's [[SHA-1]] hash. As SHA-1 returns a 160-bit hash, <tt>pieces</tt> will be a string whose length is a multiple of 20 bytes. If the torrent contains multiple files, the pieces are formed by concatenating the files in the order they appear in the <tt>files</tt> dictionary (i.e. all pieces in the torrent are the full piece length except for the last piece, which may be shorter).\n\nAll strings must be [[UTF-8]] encoded, except for <tt>pieces</tt>, which contains binary data.\n\n==Extensions==\nA torrent file can also contain additional metadata defined in extensions to the BitTorrent specification.<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0000.html |title=BEP-0000: Index of BitTorrent Enhancement Proposals |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> These are known as \"BitTorrent Enhancement Proposals.\" Examples of such proposals include metadata for stating who created the torrent, and when.\n\n===Draft extensions===\nThese [[Software extension|extensions]] are under consideration for standardization.\n\n====Distributed hash tables====\nBEP-0005<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0005.html |title=BEP-0005: DHT Protocol |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> extends BitTorrent to support [[distributed hash table]]s.\n\nA trackerless torrent dictionary does not have an <tt>announce</tt> key. Instead, a trackerless torrent has a <tt>nodes</tt> key:\n<source lang=\"yaml\">\n {\n ...\n 'nodes': [[\"<host>\", <port>], [\"<host>\", <port>], ...]\n ...\n }\n</source>\nFor example,\n<source lang=\"yaml\">\n 'nodes': [[\"127.0.0.1\", 6881], [\"your.router.node\", 4804]]\n</source>\nThe specification recommends that <tt>nodes</tt> \"should be set to the K closest nodes in the torrent generating client's routing table. Alternatively, the key could be set to a known good node such as one operated by the person generating the torrent.\"\n\n====Multiple trackers====\nBEP-0012<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0012.html |title=BEP-0012: Multitracker Metadata Extension |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> extends BitTorrent to support multiple trackers.\n\nA new key, <tt>announce-list</tt>, is placed in the top-most dictionary (i.e. with <tt>announce</tt> and <tt>info</tt>)\n<source lang=\"yaml\">\n {\n ...\n  'announce-list': [['&lt;tracker1-url&gt;']['&lt;tracker2-url&gt;']]\n ...\n }\n</source>\n\n====HTTP seeds====\nBEP-0017<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0017.html |title=BEP-0017: HTTP Seeding |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> extends BitTorrent to support HTTP seeds.\n\nA new key, <tt>httpseeds</tt>, is placed in the top-most list (i.e. with <tt>announce</tt> and <tt>info</tt>). This key's value is a list of web addresses where torrent data can be retrieved:\n<source lang=\"yaml\">\n {\n ...\n 'httpseeds': ['http://www.site1.com/source1.php', 'http://www.site2.com/source2.php']\n ...\n }\n</source>\n\n====Private torrents====\nBEP-0027<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0027.html |title=BEP-0027: Private Torrents |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> extends BitTorrent to support private torrents.\n\nA new key, <tt>private</tt>, is placed in the <tt>info</tt> dictionary. This key's value is 1 if the torrent is private:\n<source lang=\"yaml\">\n {\n ...\n 'private': 1\n ...\n }\n</source>\n\n====Merkle trees====\nBEP-0030<ref>{{cite web|url=http://www.bittorrent.org/beps/bep_0030.html |title=BEP-0030: Merkle hash torrent extension |publisher=Bittorrent.org |date= |accessdate=2009-10-22}}</ref> extends BitTorrent to support [[Merkle trees]]. The purpose is to reduce the [[file size]] of torrent files, which reduces the burden on those that serve torrent files.\n\nA torrent file using Merkle trees does not have a <tt>pieces</tt> key in the <tt>info</tt> list. Instead, such a torrent file has a <tt>root_hash</tt> key in the <tt>info</tt> list. This key's value is the root hash of the Merkle hash:\n<source lang=\"yaml\">\n {\n ...\n 'info': {\n ...\n 'root hash': <binary SHA1 hash>\n ...\n }\n ...\n }\n</source>\n\n==Examples==\n\n===Single file===\nHere is what a de-bencoded torrent file (with <tt>piece length</tt> 256 KiB = 262,144 bytes) for a file <tt>debian-503-amd64-CD-1.iso</tt> (whose size is 678 301 696 bytes) might look like:\n<source lang=\"yaml\">\n {\n     'announce': 'http://bttracker.debian.org:6969/announce',\n     'info':\n     {\n         'name': 'debian-503-amd64-CD-1.iso',\n         'piece length': 262144,\n         'length': 678301696,\n         'pieces': <binary SHA1 hashes>\n     }\n }\n</source>\nNote: <tt>pieces</tt> here would be a 51 KiB value ([[Floor and ceiling functions|<math>{\\color{Blue}\\left\\lceil {\\color{Black} \\frac \\mathtt{length} \\mathtt{piece\\ length}} \\right\\rceil} \\times 160 = 414080\\ \\mathrm{bits}</math>]]).\n\n===Multiple files===\nHere is what a de-bencoded torrent file (with <tt>'piece length'</tt> 256 KiB = 262144 B) for two files, <tt>111.txt</tt> and <tt>222.txt</tt>, might look like:\n<source lang=\"yaml\">\n {\n     'announce': 'http://tracker.site1.com/announce',\n     'info':\n     {\n         'name': 'directoryName',\n         'piece length': 262144,\n         'files':\n         [\n             {'path': ['111.txt'], 'length': 111},\n             {'path': ['222.txt'], 'length': 222}\n         ],\n         'pieces': <binary SHA1 hashes>\n     }\n }\n</source>\n\n== See also ==\n* [[Glossary of BitTorrent terms]]\n* [[Magnet links]]\n\n==References==\n{{reflist}}\n\n==External links==\n* [http://www.bittorrent.org/beps/bep_0003.html Official BitTorrent Specification]\n\n{{BitTorrent}}\n\n{{DEFAULTSORT:Torrent File}}\n[[Category:BitTorrent]]\n[[Category:Computer file formats]]",
            "slug": "torrent-file",
            "date_updated": 1565239596700,
            "imported": "https://en.wikipedia.org/wiki/Torrent_file"
        }
    ]
}