{
    "article": [
        {
            "title": "Content-addressable storage",
            "text": "{{Use dmy dates|date=March 2013}}\n{{multiple issues|\n{{confusing|date=February 2012}}\n{{overly detailed|date=February 2012}}\n{{cleanup-rewrite|date=February 2012}}\n}}\n'''Content-addressable storage''', also referred to as '''content-addressed storage''' or abbreviated '''CAS''', is a way to store information so it can be retrieved based on its content, not its location.  It has been used for high-speed storage and [[information retrieval|retrieval]] of fixed content, such as documents stored for compliance with government regulations.  Content-addressable storage is like [[content-addressable memory]].\n\n==CAS and FCS==\n\nContent Addressable Storage (CAS) and Fixed Content Storage (FCS) are two different acronyms for the same type of technology. Both are intended to store data that does not change over fixed periods of time. CAS typically uses a [[cryptographic hash function]]'s digest generated from the document to identify that document in the storage system. If the hash function is weak, meaning that different inputs into the hashing algorithm could result in the same digest being created, there could be a situation where different documents retain the same digest being used to identify them. This exposes a potential weakness of relying on hashes to differentiate data. The inherent weakness of primitive hashing algorithms becomes a concern when working with incredibly large data stores or when data put into such a system could be created maliciously to exploit this weakness.\n\n== Content-addressed vs. location-addressed ==\n\nWhen being contrasted with content-addressed storage, a typical local or networked [[Object storage device|storage device]] is referred to as {{em|location-addressed}}.  In a location-addressed storage device, each element of data is stored onto the physical medium, and its location is recorded for later use.  The storage device often keeps a list, or directory, of these locations.  When a future request is made for a particular item, the request includes only the location (for example, path and file names) of the data.  The storage device can then use this information to locate the data on the physical medium, and retrieve it.  When new information is written into a location-addressed device, it is simply stored in some available free space, without regard to its content.  The information at a given location can usually be altered or completely overwritten without any special action on the part of the storage device.\n\nWithin the scope of this discussion, a good way to think of the above is as {{em|container-addressed}} storage.\n\nIn contrast, when information is stored into a CAS system, the system will record a {{em|content address}}, which is an [[identifier]] uniquely and permanently linked to the information content itself.  A request to retrieve information from a CAS system must provide the content identifier, from which the system can determine the physical location of the data and retrieve it.  Because the identifiers are based on content, any change to a data element will necessarily change its content address.  In nearly all cases, a CAS device will not permit editing information once it has been stored. Whether it can be deleted is often controlled by a policy.\n\n=== CAS History ===\n\nA hardware device called the [[Content Addressable File Store]] (CAFS). CAFS was developed by ICL in the UK in the sixties,<ref>Wikipedia, [[Content Addressable File Store]]\", ''Wikipedia''</ref> and British Telecom was one of the first customers.<ref>Wikipedia, [[Content Addressable File Store]]\", ''Wikipedia''</ref> Developed in the sixties <ref>Wikipedia, [[Content Addressable File Store]]\", ''Wikipedia''</ref> and available in the 1970s and 1980s, it provided location-addressed disk storage with built-in search capability. The search logic was incorporated into the disk controller, such that a query expressed in a high-level query language could be compiled into a search specification that was then sent to the disk controller for execution. \n\nWhile the idea of content-addressed storage is not new, production-quality systems were not readily available until roughly 2003.<ref name=\"usenix\">[http://www.usenix.org/events/usenix03/tech/tolia.html USENIX Annual Technical Conference 2003, General Track - Abstract<!-- Bot generated title -->]</ref>  In mid-2004, the industry group [[Storage Networking Industry Association|SNIA]] began working with a number of CAS providers to create standard behavior and interoperability guidelines for CAS systems.<ref name=\"cassi\">CAS Industry standardization activities - XAM: http://www.snia.org/forums/xam</ref>\n\n=== CAS Efficiency ===\n\nCAS storage works most efficiently on data that does not change often.  It is of particular interest to large organizations that must comply with document-retention laws, such as [[Sarbanes-Oxley]].  In these corporations, a large volume of documents will be stored for as much as a decade, with no changes and infrequent access.  CAS is designed to make the searching for a given document content very quick, and provides an assurance that the retrieved document is identical to the one originally stored.  (If the documents were different, their content addresses would differ.)  In addition, since data is stored into a CAS system by what it contains, there is never a situation where more than one copy of an identical document exists in storage.  By definition, two identical documents have the same content address, and so point to the same storage location.\n\nFor data that changes frequently, CAS is not as efficient as location-based addressing.  In these cases, the CAS device would need to continually recompute the address of data as it was changed. The client systems would be forced to continually update information regarding where a given document exists.  For random access systems, a CAS would also need to handle the possibility of two initially identical documents diverging, requiring a copy of one document to be created on demand.{{Further|Copy on write}}\n\n== Typical implementation ==\n{{advert|section|date=June 2017}}\nPaul Carpentier and Jan van Riel coined the term CAS while working at a company called FilePool in the late 1990s.  FilePool was acquired in 2001 and became the underpinnings of the first commercially available CAS system, which was introduced as [[EMC Corporation|EMC's]] Centera platform.<ref name=\"centera\">[http://www.findarticles.com/p/articles/mi_m0BRZ/is_10_22/ai_98977101 Content-addressable storage - Storage as I See it], by Mark Ferelli, Oct, 2002, BNET.com</ref>  The Centera CAS system consists of a series of networked nodes (1-U servers running [[Linux]]), divided between storage nodes and access nodes.  The access nodes maintain a synchronized directory of content addresses, and the corresponding storage node where each address can be found.  When a new data element, or blob ([[Binary large object]]), is added, the device calculates a [[hash value|hash]] of the content and returns this hash as the blob's content address.<ref name=\"techworld.com\">[http://www.techworld.com/features/index.cfm?featureID=235&printerfriendly=1 Making a hash of file content Content-addressable storage uses hash algorithms.], By Chris Mellor, Published: 9 December 2003, Techworld {{Webarchive|url=https://web.archive.org/web/20070928001929/http://www.techworld.com/features/index.cfm?featureID=235&printerfriendly=1 |date=28 September 2007 }} Article moved to https://www.techworld.com/data/making-a-hash-of-file-content-235/</ref>  As mentioned above, the hash is searched to verify that identical content is not already present.  If the content already exists, the device does not need to perform any additional steps; the content address already points to the proper content.  Otherwise, the data is passed off to a storage node and written to the physical media.\n\nWhen a content address is provided to the device, it first queries the directory for the physical location of the specified content address.  The information is then retrieved from a storage node, and the actual hash of the data recomputed and verified.  Once this is complete, the device can supply the requested data to the client.  Within the Centera system, each content address actually represents a number of distinct data blobs, as well as optional [[metadata]].  Whenever a client adds an additional blob to an existing content block, the system recomputes the content address.\n\nTo provide additional data security, the Centera access nodes, when no read or write operation is in progress, constantly communicate with the storage nodes, checking the presence of at least two copies of each blob as well as their integrity. Additionally, they can be configured to exchange data with a different, e.g., off-site, Centera system, thereby strengthening the precautions against accidental data loss.\n\nIBM has another flavor of CAS which can be software-based, Tivoli Storage manager 5.3, or hardware-based, the IBM DR550.  The architecture is different in that it is based on [[hierarchical storage management]] (HSM) design which provides some additional flexibility such as being able to support not only [[Write Once Read Many|WORM]] disk but WORM tape and the migration of data from WORM disk to WORM tape and vice versa.  This provides for additional flexibility in disaster recovery situations as well as the ability to reduce storage costs by moving data off the disk to tape.\n\nAnother typical implementation is iCAS from iTernity. The concept of iCAS is based on containers. Each container is addressed by its hash value. A container holds different numbers of fixed content documents. The container is not changeable, and the hash value is fixed after the write process.\n\n== Open-source implementations ==\n\nOne of the first content-addressed storage servers, [[Venti]],<ref>{{Cite web|url=http://doc.cat-v.org/plan_9/4th_edition/papers/venti/|title=Venti: a new approach to archival storage|website=doc.cat-v.org|access-date=2019-06-30}}</ref> was originally developed for [[Plan 9 from Bell Labs]] and is now also available for Unix-like systems as part of [[Plan 9 from User Space]].\n\nThe first step towards an open-source CAS+ implementation is Twisted Storage.<ref name=\"twistedstorage\">{{Cite web|url=http://twistedstorage.sourceforge.net/|title=Twisted Storage|website=twistedstorage.sourceforge.net|access-date=2019-06-30}}</ref>\n\n[[Tahoe-LAFS|Tahoe Least-Authority File Store]] is an open source implementation of CAS.\n\n[[Git (software)#Implementations|Git]] is a [[userspace]] CAS filesystem. Git is primarily used as a source code control system.\n\n[[git-annex]] is a distributed file synchronization system that uses content-addressable storage for files it manages. It relies on Git and [[symbolic links]] to index their filesystem location.\n\n[[Project Honeycomb]] is an open-source [[Application programming interface|API]] for CAS systems.<ref>{{cite web|url=http://www.opensolaris.org/os/project/honeycomb/ |title=Archived copy |accessdate=2007-10-01 |url-status=dead |archiveurl=https://web.archive.org/web/20071012085111/http://www.opensolaris.org/os/project/honeycomb/ |archivedate=12 October 2007 }}</ref>\n\nThe [[XAM]] interface was developed under the auspices of the [[Storage Networking Industry Association]]. It provides a standard interface for archiving CAS (and CAS like) products and projects.<ref>{{cite web|url=https://www.snia.org/tech_activities/standards/curr_standards/xam|title=The XAM (eXtensible Access Method) Interface specification}}</ref>\n\n[[Perkeep]] is a recent project to bring the advantages of content-addressable storage \"to the masses\". It is intended to be used for a wide variety of use cases, including distributed backup, a snapshotted-by-default, a version-controlled filesystem, and decentralized, permission-controlled filesharing.\n\nIrmin is an [[OCaml]] \"library for persistent stores with built-in snapshot, branching and reverting mechanisms\"; the same design principles as Git.\n\nCassette is an open-source CAS implementation for C#/.NET.<ref>{{Citation|title=A simple content-addressable storage system for .NET 4.5 and .NET Core: point-platform/cassette|date=2019-05-06|url=https://github.com/point-platform/cassette|publisher=Point Platform|access-date=2019-06-30}}</ref>\n\n[https://arvados.org Arvados] Keep is an open-source content-addressable distributed storage system.<ref>{{Cite web|url=https://dev.arvados.org/projects/arvados/wiki/Keep/|title=Keep - Arvados|website=dev.arvados.org|access-date=2019-06-30}}</ref> It is designed for large-scale, computationally intensive data science work such as storing and processing genomic data.\n\nInfinit is a content-addressable and decentralized (peer-to-peer) storage platform that was acquired by [[Docker (software)|Docker]] Inc.\n\n[[InterPlanetary File System]] (IPFS), is a content-addressable, peer-to-peer hypermedia distribution protocol.\n\n[[casync]] is a Linux software utility by Lennart Poettering to distribute frequently-updated file system images over the Internet.<ref name=\"phoronix\">{{cite web|url=https://www.phoronix.com/scan.php?page=news_item&px=Lennart-casync|title=Lennart Poettering Announces New Project: casync - Phoronix|website=[[Phoronix]]}}</ref>\n\n==See also==\n*[[Content Addressable File Store]]\n*[[Content-centric networking]] / Named data networking\n*[[Data Defined Storage]]\n*[[Write Once Read Many]]\n\n== References ==\n{{Reflist}}\n\n== External links ==\n* [http://doc.cat-v.org/plan_9/misc/foundation/ Fast, Inexpensive Content-Addressed Storage in Foundation]\n* [http://doc.cat-v.org/plan_9/4th_edition/papers/venti/ Venti: a new approach to archival storage]\n\n[[Category:Associative arrays]]\n[[Category:Computer storage devices]]",
            "slug": "content-addressable-storage",
            "date_updated": 1635496606678,
            "imported": "https://en.wikipedia.org/wiki/Content-addressable_storage"
        }
    ]
}