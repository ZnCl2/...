{
    "article": [
        {
            "title": "Filesystem in Userspace",
            "text": "{{Short description|Software interface for Unix-like systems}}\n{{Infobox software\n| name                   = Filesystem in Userspace\n| logo                   =\n| screenshot             = \n| caption                = \n| developer              =\n| latest release version = {{wikidata|property|reference|P348}}\n| latest release date    = {{start date and age|{{wikidata|qualifier|P348|P577}}}}\n| latest preview version = \n| latest preview date    = \n| programming language   = [[C (programming language)|C]]\n| operating system       = [[Unix]], [[Unix-like]]\n| genre                  = [[File system]] [[software driver|driver]]\n| license                = [[GPL]] for Linux kernel part, [[LGPL]] for Libfuse, [[BSD licenses#2-clause|Simplified BSD]] on FreeBSD, [[ISC license]] on OpenBSD; proprietary for macOS\n| website                = {{URL|https://github.com/libfuse/libfuse}}\n}}\n\n'''Filesystem in USErspace''' ('''FUSE''') is a [[software interface]] for [[Unix]] and [[Unix-like]] computer [[operating system]]s that lets non-privileged users create their own [[file system]]s without editing [[kernel (computing)|kernel]] code. This is achieved by running file system code in [[user space]] while the FUSE module provides only a \"bridge\" to the actual kernel interfaces.\n\nFUSE is available for [[Linux]], [[FreeBSD]], [[OpenBSD]], [[NetBSD]] (as [[PUFFS (NetBSD)|puffs]]), [[OpenSolaris]], [[Minix 3]], [[macOS]],<ref>{{cite web|url=https://osxfuse.github.io/|title=Home - FUSE for OS X}}</ref> and [[Microsoft Windows|Windows]].<ref>{{Citation|last=Zissimopoulos|first=Bill|title=billziss-gh/winfsp|date=2021-02-14|url=https://github.com/billziss-gh/winfsp|access-date=2021-02-16}}</ref>\n\nFUSE is [[free software]] originally released under the terms of the [[GNU General Public License]] and the [[GNU Lesser General Public License]].\n\n== History ==\nThe FUSE system was originally part of ''AVFS'' (''A Virtual Filesystem''), a filesystem implementation heavily influenced by the translator concept of the [[GNU Hurd]].<ref>{{cite web|url=http://www.draketo.de/light/english/free-software/some-technical-advantages-of-the-hurd|title=Some technical advantages of the Hurd|date=May 15, 2011|access-date=March 28, 2016}}</ref> It superseded [[Linux Userland Filesystem]], and provided a translational interface using {{code|lufis}} in libfuse1.\n\nFUSE was originally released under the terms of the [[GNU General Public License]] and the [[GNU Lesser General Public License]], later also reimplemented as part of the [[FreeBSD]] base system<ref>{{cite web|url=https://wiki.freebsd.org/WhatsNew/FreeBSD10|title=WhatsNew/FreeBSD10 - FreeBSD Wiki}}</ref> and released under the terms of [[BSD licenses#2-clause|Simplified BSD]] license. An [[ISC license|ISC]]-licensed re-implementation by Sylvestre Gallon was released in March 2013,<ref>{{cite web|url=http://openbsd.7691.n7.nabble.com/Fuse-and-sshfs-support-for-OpenBSD-td224422.html|title=openbsd dev - tech - Fuse (and sshfs) support for OpenBSD}}</ref> and incorporated into [[OpenBSD]] in June 2013.<ref>{{cite web|url=http://marc.info/?l=openbsd-cvs&m=137027468819965|title='CVS: cvs.openbsd.org: src' - MARC}}</ref>\n\nFUSE was merged into the mainstream [[Linux kernel]] tree in kernel version 2.6.14.<ref>{{cite web|url=http://osdir.com/ml/file-systems.fuse.devel/2005-09/msg00021.html|title=file-systems.fuse.devel - FUSE merged to 2.6.14! - msg#00021 - Recent Discussion OSDir.com|url-status=dead|archive-url=https://web.archive.org/web/20160420173822/http://osdir.com/ml/file-systems.fuse.devel/2005-09/msg00021.html|archive-date=2016-04-20}}</ref>\n\nThe userspace side of FUSE, the {{tt|libfuse}} library, generally followed the pace of Linux kernel development while maintaining \"best effort\" compatibility with BSD descendants. This is possible because the kernel FUSE reports its own \"feature levels\", or versions. The exception is the FUSE fork for macOS, OSXFUSE, which has too many differences for sharing a library.<ref>{{cite web |title=libfuse/libfuse, the reference implementation of the Linux FUSE (Filesystem in Userspace) interface |url=https://github.com/libfuse/libfuse |publisher=libfuse |access-date=9 January 2020 |date=9 January 2020}}</ref> A break in libfuse history is libfuse3, which includes some incompatible improvements in the interface and performance, compared to the older libfuse2 now under maintenance mode.<ref>{{cite web |title=libfuse3 ChangeLog |url=https://github.com/libfuse/libfuse/blob/master/ChangeLog.rst#libfuse-300-2016-12-08 |website=GitHub |access-date=9 January 2020}}</ref>\n\nAs the kernel-userspace protocol of FUSE is versioned and public, a programmer can choose to use a different piece of code in place of {{tt|libfuse}} and still communicate with the kernel's FUSE facilities. On the other hand, {{tt|libfuse}} and its many ports provide a portable high-level interface that may be implemented on a system without a \"FUSE\" facility.\n\n== Operation and usage ==\n[[File:FUSE structure.svg|thumb|right|280px|A flow-chart diagram showing how FUSE works: Request from userspace to list files (ls -l /tmp/fuse) gets redirected by the Kernel through VFS to FUSE. FUSE then executes the registered handler program (./hello) and passes it the request (ls -l /tmp/fuse). The handler program returns a response back to FUSE which is then redirected to the userspace program that originally made the request.]]\nTo implement a new file system, a handler program linked to the supplied <code>libfuse</code> library needs to be written. The main purpose of this program is to specify how the file system is to respond to read/write/stat requests. The program is also used to [[Mount (computing)|mount]] the new file system. At the time the file system is mounted, the handler is registered with the kernel. If a user now issues read/write/stat requests for this newly mounted file system, the kernel forwards these IO-requests to the handler and then sends the handler's response back to the user.\n\n[[File:Unmount SSHFS.png|thumb|right|Unmounting a FUSE-based file system with the <code>fusermount</code> command]]\n\nFUSE is particularly useful for writing [[virtual file system]]s. Unlike traditional file systems that essentially work with data on mass storage, virtual filesystems don't actually store data themselves. They act as a view or translation of an existing file system or storage device.\n\nIn principle, any resource available to a FUSE implementation can be exported as a file system.\n\n== Applications ==\n\n=== On-disk file systems ===\nConventional on-disk file systems can be implemented in user space with FUSE, e.g. for compatibility or licensing reasons.\n\n*[[Linear Tape File System]]: Allows files stored on magnetic tape to be accessed in a similar fashion to those on disk or removable flash drives.\n*[[NTFS-3G]] and [[Captive NTFS]], allowing access to [[NTFS]] filesystems.\n\n=== Layering file systems ===\nFUSE filesystems can create a view of an underlying file system, transforming the files in some way.\n\n*[[EncFS]]: [[Disk encryption|Encrypted virtual filesystem]]\n* FuseCompress, gzipfs, Fuse-ZIP, CompFUSEd: Compressed virtual filesystems\n* Archive filesystems may also perform this task\n\n=== Archive and backup file systems ===\nFUSE filesystems can expose the contents of archives or backup sets without having to first extract them.\n\n*[[archivemount]]\n*[[Borg (backup software)]]: Deduplicating backup program that allows backup archives to be mounted as FUSE filesystems.\n*[https://restic.net/ Restic]: Free, fast, efficient and secure backup software uses FUSE to be able to browse all of your backup snapshots as a regular file system\n*[http://www.spictera.com SPFS] A file system for Spectrum Protect, designed to mount the backup server filespace anywhere on your server, and use the features included from the backup server ( encryption, de-duplication, compression, filtrering etc). This is a WORM file system.\n\n=== Remote/distributed file system clients ===\n*[https://cvmfs.readthedocs.io/en/stable/ CernVM-FS]: A distributed read-only software distribution system, implemented as a POSIX filesystem in user space (FUSE) using HTTP transport, to deliver software in a fast and reliable fashion at global scale.\n*[[CloudStore]] (formerly, Kosmos filesystem): By mounting via FUSE, existing [[Linux]] utilities can interact with CloudStore\n*[[ExpanDrive]]: A commercial filesystem implementing SFTP/FTP/S3/Swift using FUSE\n*[[FTPFS]]\n*[[GlusterFS]]: Clustered Distributed Filesystem having ability to scale up to several petabytes.\n*[https://github.com/kahing/goofys/ goofys]: A FUSE filesystem that allows access to Amazon S3/Microsoft Azure storage with an emphasis on performance.\n*[[InterPlanetary_File_System|IPFS]]: A peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files.\n*[[Juice File System|JuiceFS]]: A distributed POSIX file system built on top of Redis and S3.\n*[[Keybase|KBFS]]: A distributed filesystem with [[end-to-end encryption]] and a global namespace based on [[Keybase|Keybase.io]] service that uses FUSE to create cryptographically secure file mounts.\n*[[Lustre (file system)|Lustre]] Cluster filesystem will use FUSE to allow it to run in userspace, so that a FreeBSD port is possible.<ref>{{cite web| url = http://lustre.sev.net.ua/| title = Lustre FreeBSD| access-date = 2008-03-02| url-status = dead| archive-url = https://web.archive.org/web/20080312031136/http://lustre.sev.net.ua/| archive-date = 2008-03-12}}</ref> However, the [[ZFS]]-Linux port of Lustre will be running ZFS's DMU (Data Management Unit) in userspace.<ref>{{ cite web | url = http://arch.lustre.org/index.php?title=Architecture_ZFS_for_Lustre | title = Architecture ZFS for Lustre | access-date = 2008-03-02 | publisher = Sun Microsystems}}</ref>\n*[[Minio#MinFS|MinFS]]: MinFS is a fuse driver for Amazon S3 compatible object storage server. MinFS<ref>{{cite web|url=https://github.com/minio/minfs|title=minio/minfs|website=GitHub|access-date=12 April 2018}}</ref> lets you mount a remote bucket (from a S3 compatible object store), as if it were a local directory.\n*[[Moose File System|MooseFS]]: An open source distributed fault-tolerant file system available on every OS with FUSE implementation (Linux, FreeBSD, NetBSD, OpenSolaris, OS X), able to store petabytes of data spread over several servers visible as one resource.\n*[https://objectivefs.com/ ObjectiveFS]: Distributed filesystem with object store backend (Amazon S3, Google Cloud Storage or S3-compatible object store) using FUSE\n*[[Rclone]] can mount a variety of remote / cloud storage with FUSE.\n*[https://github.com/s3fs-fuse/s3fs-fuse s3fs]: Gives the ability to mount an S3 bucket as if it were a local file system.\n*[[Sector/Sphere|Sector File System]]: Sector is a distributed file system designed for large amount of commodity computers. Sector uses FUSE to provide a mountable local file system interface.\n*[[SSHFS]]: Provides access to a remote filesystem through [[Secure Shell|SSH]].\n*[[Transmit]]: A commercial FTP client that also adds the ability to mount WebDAV, SFTP, FTP and Amazon S3 servers as disks in Finder, via MacFUSE.\n*[[WebDrive]]: A commercial filesystem implementing [[WebDAV]], SFTP, FTP, FTPS and [[Amazon S3]]\n*[[WikipediaFS]]: View and edit Wikipedia articles as if they were real files\n*[[Wuala]]: Was a multi-platform, Java-based fully OS integrated distributed file system. Using FUSE, MacFUSE and [https://www.callback.com/cbfsconnect/ CBFS Connect] respectively for file system integration, in addition to a Java-based app accessible from any Java-enabled web browser (service discontinued in 2015).\n*[https://github.com/MajenkoProjects/indexfs IndexFS]: A remote file aggregating filesystem with transparent CURL access to distributed files.\n\n=== Other ===\n<!-- Some can be sorted into the above. -->\n*[[GVfs]]: The virtual filesystem for the [[GNOME desktop]]\n*[https://github.com/rmind/rvault rvault]: A secure and authenticated store for secrets and small documents using envelope encryption with [[one-time password]] (OTP) authentication. It uses FUSE to expose the vault as a file system.\n\n== See also ==\n{{Portal|Free and open-source software}}\n\n*[[PUFFS (NetBSD)|PUFFS]], a similar framework with FUSE compatibility\n*[[9P (protocol)]]\n*[[Installable File System]]\n*[[Dokan Library]] FUSE Windows compatibility\n*[https://docs.microsoft.com/en-us/windows/win32/projfs/projected-file-system Windows Projected File System (ProjFS)]\n\n== References ==\n{{Reflist|30em}}\n\n== External links ==\n*{{Official website|https://github.com/libfuse/libfuse}}\n*[https://web.archive.org/web/20180216233455/https://www.ibm.com/developerworks/linux/library/l-fuse/ Develop your own filesystem with FUSE] by Sumit Singh\n*[https://github.com/libfuse/libfuse/wiki/Filesystems List of FUSE filesystems]\n*[https://web.archive.org/web/20050923210216/http://lxr.linux.no/#linux+v2.6.34/Documentation/filesystems/fuse.txt Documentation/filesystems/fuse.txt] documentation in Linux source tree\n*[http://www.secfs.net/winfsp/ WinFSP], a FUSE-like system for Windows (a FUSE compatibility layer is provided for Cygwin)\n*[https://github.com/crossmeta/cxfuse Crossmeta FUSE], Port of FUSE to Windows (commercial software)\n\n{{Filesystem}}\n\n[[Category:Free software programmed in C]]\n[[Category:Free special-purpose file systems]]\n[[Category:Linux kernel features]]\n[[Category:Software that uses Meson]]\n[[Category:Unix file system-related software]]\n[[Category:Userspace file systems]]",
            "slug": "filesystem-in-userspace",
            "date_updated": 1635496848561,
            "imported": "https://en.wikipedia.org/wiki/Filesystem_in_Userspace"
        }
    ]
}