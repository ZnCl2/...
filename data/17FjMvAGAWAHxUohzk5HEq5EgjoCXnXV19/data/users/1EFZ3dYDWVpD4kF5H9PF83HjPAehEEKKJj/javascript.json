{
    "article": [
        {
            "title": "JavaScript",
            "text": "{{distinguish|Java (programming language)|Java (software platform)|Javanese script}}\n{{selfref|For the uses of JavaScript on Wikipedia, see [[Wikipedia:Javascript]].}}\n{{pp-pc1|small=yes}}\n{{short description|programming language}}\n\n{{Infobox programming language\n| name = JavaScript\n| logo = <!-- Do not add the unofficial logo, per [[Talk:JavaScript/Archive 5#Why is the unofficial logo present?]] -->\n| logo alt = \n| paradigm = [[Multi-paradigm]]: [[event-driven programming|event-driven]],{{Sfn|Flanagan|2011|pp =1–2}} [[functional programming|functional]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]] ([[prototype-based programming|prototype-based]])\n| designer = [[Brendan Eich]]\n| developer = [[Netscape|Netscape Communications Corporation]], [[Mozilla Foundation]], [[Ecma International]]\n| typing = [[Dynamic typing|Dynamic]], [[Duck typing|duck]]\n| implementations = [[V8 (JavaScript engine)|V8]], [[JavaScriptCore]], [[Rhino (JavaScript engine)|Rhino]], [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], [[Chakra (JScript engine)|Chakra]]\n| influenced = [[ActionScript]], [[AtScript]], [[CoffeeScript]], [[Dart (programming language)|Dart]], [[JScript .NET]], [[LiveScript]], [[Objective-J]], [[Opa (programming language)|Opa]], [[Perl 6]], [[QML]], [[TypeScript]]\n| license = \n| File extensions = {{flatlist|\n* <code>.js</code>\n* <code>.mjs</code><ref name=\"node.js ECMAScript Modules Specification\">{{cite web|url=https://github.com/nodejs/node-eps/blob/master/002-es-modules.md|title=nodejs/node-eps|website=GitHub}}</ref>\n}}\n| File format = \n| website = [https://developer.mozilla.org/en-US/docs/Web/JavaScript Mozilla]\n| wikibooks = JavaScript\n| year = {{start date and age|1995|12|04}}<ref name=\"press_release\">[https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html Press release announcing JavaScript], \"Netscape and Sun announce JavaScript\", PR Newswire, December 4, 1995</ref>\n| latest_release_version = ECMAScript 2018<ref name=\"auto\">{{cite web|url=https://www.ecma-international.org/publications/standards/Ecma-262.htm|title=Standard ECMA-262|publisher=Ecma International|date=2017-07-03}}</ref>\n| latest_release_date = {{start date and age|2018|6}}\n| latest_preview_version = ECMAScript 2019\n| latest_preview_date = \n| influenced_by = [[AWK]], [[C (programming language)|C]], [[HyperTalk]], [[Java (programming language)|Java]],<ref>{{cite web|title=\"Coders at Work: Reflections on the Craft of Programming\"|quote=\"Eich: The immediate concern at Netscape was it must look like Java.\"|url=https://books.google.com/books?id=nneBa6-mWfgC&pg=PA141&lpg=PA141&dq=The+immediate+concern+at+Netscape+was+it+must+look+like+Java.&source=bl&ots=gGvuIcRU5u&sig=OGPam0PUoNHEn9DA3OYrbWpQXX8&hl=en&sa=X&ved=2ahUKEwi53LL6nbvfAhUK7YMKHUX3CgIQ6AEwAHoECAUQAQ#v=onepage&q=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&f=false|accessdate=December 25, 2018}}</ref> [[Lua (programming language)|Lua]], [[Perl]], [[Python (programming language)|Python]], [[Scheme (programming language)|Scheme]], [[Self (programming language)|Self]] <!--True for first JavaScript? Or only ECMAScript – later JavaScript versions-->\n}}\n \n{{Infobox file format\n| name = JavaScript\n| logo = \n| screenshot = \n| caption = \n| extension = .js\n| mime = {{flatlist|\n* <code>application/javascript</code>\n* <code>text/javascript</code>&nbsp;(obsolete)<ref>{{cite web|url=https://tools.ietf.org/html/rfc4329#section-7.1|title=RFC 4329|publisher=IETF Tools|archive-url=https://web.archive.org/web/20190527135427/https://tools.ietf.org/html/rfc4329#section-7.1|archive-date=2019-05-27|access-date=27 May 2019|dead-url=no}}</ref>\n}}\n|_nomimecode = y\n| type code =\n| uniform type = com.netscape.javascript-source\n<ref>{{cite web\n| publisher = Apple Inc.\n| url = https://developer.apple.com/mac/library/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html\n| title = System-Declared Uniform Type Identifiers\n| work = Mac OS X Reference Library\n| accessdate = 2010-03-05}}</ref>\n| magic = \n| owner = Brendan Eich\n| released = \n| latest release version = \n| latest release date = \n| genre = [[Scripting language]]\n| container for = \n| contained by = \n| extended from = \n| extended to = \n| standard = \n}}\n{{JavaScriptSidebar}}\n\n'''JavaScript''' ({{IPAc-en|ˈ|dʒ|ɑː|v|ə|ˌ|s|k|r|ɪ|p|t}}),<ref>{{cite web | url= http://dictionary.reference.com/browse/javascript | title= JavaScript | publisher= William Collins Sons & Co | work= Collins English Dictionary – Complete & Unabridged 2012 Digital Edition | date= 2012 | accessdate= 21 August 2015}}</ref> often abbreviated as '''JS''', is a [[High-level programming language|high-level]], [[Interpreted language|interpreted]] [[scripting language]] that conforms to the [[ECMAScript]] specification. JavaScript has [[List of programming languages by type#Curly-bracket languages|curly-bracket syntax]], [[dynamic typing]], [[prototype-based programming|prototype-based]] [[object-oriented programming|object-orientation]], and [[first-class function]]s.\n\nAlongside [[HTML]] and [[CSS]], JavaScript is one of the core technologies of the [[World Wide Web]].<ref>{{cite book|last1=Flanagan|first1=David|title=JavaScript - The definitive guide|page=1|edition=6|quote=JavaScript is part of the triad of technologies that all Web developers must learn: HTML to specify the content of web pages, CSS to specify the presentation of web pages and JavaScript to specify the behaviour of web pages.}}</ref> JavaScript enables interactive [[web page]]s and is an essential part of [[web application]]s. The vast majority of [[website]]s use it,<ref name=deployedstats/> and major [[web browser]]s have a dedicated [[JavaScript engine]] to execute it.\n\nAs a multi-paradigm language, JavaScript supports [[Event-driven programming|event-driven]], [[functional programming|functional]], and [[imperative programming|imperative]] (including [[Object-oriented programming|object-oriented]] and [[Prototype-based programming|prototype-based]]) [[programming paradigm|programming style]]s. It has [[Application programming interface|APIs]] for working with text, [[Array data type|arrays]], dates, [[regular expression]]s, and the [[Document Object Model|DOM]], but the language itself does not include any [[Input/output|I/O]], such as [[computer network|networking]], [[data storage|storage]], or [[computer graphics|graphics]] facilities. It relies upon the host environment in which it is embedded to provide these features.\n\nInitially only implemented [[client-side]] in web browsers, JavaScript engines are now embedded in many other types of host software, including [[server-side]] in web servers and databases, and in non-web programs such as word processors and [[Portable Document Format|PDF]] software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.\n\nThe terms ''[[Vanilla software|Vanilla]] JavaScript'' and ''Vanilla JS'' refer to JavaScript not extended by any frameworks or additional libraries. Scripts written in Vanilla JS are plain JavaScript code.<ref>{{Cite web|url=http://vanilla-js.com/|title=Vanilla JS|website=vanilla-js.com|access-date=2017-12-15}}</ref><ref>{{Cite web|url=https://stackoverflow.com/questions/20435653/what-is-vanillajs#20435744|title=What is VanillaJS?|website=stackoverflow.com|access-date=2017-12-15}}</ref>\n\nAlthough there are similarities between JavaScript and [[Java (programming language)|Java]], including language name, [[Syntax (programming languages)|syntax]], and respective [[standard library|standard libraries]], the two languages are distinct and differ greatly in design. JavaScript was influenced by programming languages such as [[Self (programming language)|Self]] and [[Scheme (programming language)|Scheme]].<ref>\n{{cite web\n |title       = ECMAScript Language Overview\n |url         = http://www.ecmascript.org/es4/spec/overview.pdf\n |format      = PDF\n |page        = 4\n |date        = 2007-10-23\n |accessdate  = 2009-05-03\n |deadurl     = yes\n |archiveurl  = https://web.archive.org/web/20101223163429/http://www.ecmascript.org/es4/spec/overview.pdf\n |archivedate = 2010-12-23\n |df          = \n}}\n</ref> The [[JSON]] [[serialization]] format, used to store [[data structure]]s in [[computer file|files]] or transmit them across [[computer network|networks]], is based on JavaScript.<ref>{{cite web|title=Introducing JSON|url=https://json.org|accessdate=2019-05-25}}</ref>\n\n== History ==\n=== Beginnings at Netscape ===\nIn 1993, the [[National Center for Supercomputing Applications]] (NCSA), a unit of the [[University of Illinois at Urbana–Champaign|University of Illinois at Urbana-Champaign]], released [[Mosaic (web browser)|NCSA Mosaic]], the first popular graphical [[Web browser]], which played an important part in expanding the growth of the nascent [[World Wide Web]] beyond the [[NeXTSTEP]] niche where the [[WorldWideWeb]] had formed three years earlier. In 1994, a company called [[Netscape|Mosaic Communications]] was founded in [[Mountain View, California]] and employed many of the original NCSA Mosaic authors to create [[Netscape Navigator|Mosaic Netscape]]. However, it intentionally shared no code with NCSA Mosaic. The internal codename for the company's browser was [[Mozilla]], a portmanteau of \"Mosaic and Godzilla\".<ref name=\"google\">{{cite book|title= Marc Andreessen and Jim Clark: The Founders of Netscape|author= Payment, S.|year= 2007|publisher= Rosen Publishing Group|isbn= 978-1-4042-0719-6|url= http://books.google.co.uk/books?id=zyIvOn7sKCsC}}</ref> The first version of the Web browser, Mosaic Netscape 0.9, was released in late 1994. Within four months it had already taken three-quarters of the browser market and became the main web browser for the 1990s. To avoid trademark ownership problems with the NCSA, the browser was subsequently renamed Netscape Navigator in the same year, and the company took the name Netscape Communications. Netscape Communications realized that the Web needed to become more dynamic. [[Marc Andreessen]], the founder of the company, believed that [[HTML]] needed a \"glue language\" that was easy to use by Web designers and part-time programmers to assemble components such as images and plugins, where the code could be written directly in the Web page markup.\n\nIn 1995, Netscape Communications recruited [[Brendan Eich]] with the goal of embedding the [[Scheme (programming language)|Scheme]] programming language into its Netscape Navigator.<ref>{{cite web|url=http://speakingjs.com/es5/ch04.html|title=Chapter 4. How JavaScript Was Created}}</ref> Before he could get started, Netscape Communications collaborated with [[Sun Microsystems]] to include Sun's more static programming language, [[Java (programming language)|Java]], in Netscape Navigator so as to compete with [[Microsoft]] for user adoption of Web technologies and platforms.<ref>{{cite journal | last=Severance | first=Charles | date=February 2012 | title=JavaScript: Designing a Language in 10 Days | journal=Computer | volume=45 | issue=2 | pages=7–8 | publisher=IEEE Computer Society | url=http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html | accessdate=23 March 2013 | doi=10.1109/MC.2012.57 }}</ref> Netscape Communications then decided that the scripting language they wanted to create would complement Java and should have a similar syntax, which excluded adopting other languages such as [[Perl]], [[Python (programming language)|Python]], [[Tcl|TCL]], or Scheme. To defend the idea of JavaScript against competing proposals, the company needed a prototype. Eich wrote one in 10 days, in May 1995.\n\nAlthough it was developed under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript when it was deployed in the Netscape Navigator 2.0 beta 3 in December.<ref name=\"press_release\" /><ref name=\"techvision\">{{cite web | archiveurl=https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html | archivedate=2008-02-08 | title=TechVision: Innovators of the Net: Brendan Eich and JavaScript | publisher=web.archive.org | url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html }}</ref> The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized<ref>{{Citation|last=Fin JS|title=Brendan Eich - CEO of Brave|date=2016-06-17|url=https://www.youtube.com/watch?v=XOmhtfTrRxc&t=2m5s|accessdate=2018-02-07}}</ref> as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new Web programming language.\n\nThere is a common misconception that JavaScript was influenced by an earlier Web page scripting language developed by [[Openwave|Nombas]] named Cmm (not to be confused with the later [[C--]] created in 1997).<ref>{{cite web |url=http://archive.oreilly.com/pub/a/oreilly//news/languageposter_0504.html |title=The History of Programming Languages |publisher=O'Reilly Media |date=2004 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160712042618/http://archive.oreilly.com/pub/a/oreilly/news/languageposter_0504.html |archive-date=2016-07-12 |dead-url=yes |df= }}</ref><ref>{{cite web |url=http://media.wiley.com/product_data/excerpt/88/07645790/0764579088.pdf |title=What Is JavaScript? |publisher=Wiley |website=wiley.com |access-date=16 July 2016}}</ref> Brendan Eich, however, had never heard of Cmm before he created LiveScript. Nombas did pitch their embedded Web page scripting to Netscape, though Web page scripting was not a new concept, as shown by the [[ViolaWWW]] Web browser.<ref>{{cite web |url=http://www.brent-noorda.com/nombas/history/HistoryOfNombas.html#h.yal3k216ii2r |title=History of Nombas |last=Noorda |first=Brent |date=24 June 2010 |website=brent-noorda.com |access-date=16 July 2016}}</ref> Nombas later switched to offering JavaScript instead of Cmm in their ScriptEase product and was part of the TC39 group that standardized ECMAScript.<ref>{{cite web |url=https://brendaneich.com/2011/06/new-javascript-engine-module-owner/ |title=New JavaScript Engine Module Owner |last=Eich |first=Brendan |date=21 June 2011 |website=brendaneich.com |access-date=16 July 2016}}</ref>\n\n=== Server-side JavaScript ===\nIn December 1995, soon after releasing JavaScript for browsers, Netscape introduced an implementation of the language for [[server-side scripting]] with [[Netscape Enterprise Server]].<ref>{{cite web |url=http://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm |title=Server-Side JavaScript Guide |publisher=Netscape Communications Corporation |date=11 December 1998 |website=oracle.com |accessdate=2016-07-16|author=Netscape Communications Corporation}}</ref>\n\nSince 1996, the [[Internet Information Services|IIS]] web-server has supported Microsoft's implementation of server-side Javascript—[[JScript]]—in ASP and .NET pages.<ref>{{cite web|last1=Clinick|first1=Andrew|title=Introducing JScript .NET|url=https://msdn.microsoft.com/en-us/library/ms974588.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=10 April 2018|date=July 14, 2000|quote=[S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)}}</ref>\n\nSince the mid-2000s, additional [[List of server-side JavaScript implementations|server-side JavaScript]] implementations have been introduced, such as [[Node.js]] in 2009.<ref>{{cite web |url=http://readwrite.com/2009/12/17/server-side_javascript_back_with_a_vengeance/ |title=Server-Side JavaScript, Back with a Vengeance |date=17 December 2009 |website=readwrite.com |accessdate=2016-07-16|author=Mahemoff, Michael}}</ref>\n\n=== Adoption by Microsoft ===\nMicrosoft script technologies including [[VBScript]] and [[JScript]] were released in 1996. JScript, a [[Reverse engineering#Reverse engineering of software|reverse-engineered]] implementation of Netscape's JavaScript, was part of [[Internet Explorer 3]]. JScript was also available for server-side scripting in [[Internet Information Server]]. Internet Explorer 3 also included Microsoft's first support for CSS and various extensions to HTML, but in each case the implementation was noticeably different from that found in Netscape Navigator at the time.<ref name=\"O'Reilly-2001\">{{cite web |url=http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |title=JavaScript, How Did We Get Here? |last=Champeon |first=Steve |date=6 April 2001 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160719020828/http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |archive-date=2016-07-19 |dead-url=yes |df= }}</ref><ref>{{cite web |url=http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/ |title=Microsoft Internet Explorer 3.0 Beta Now Available |publisher=Microsoft |date=29 May 1996 |website=microsoft.com |access-date=16 July 2016}}</ref> These differences made it difficult for designers and programmers to make a single website work well in both browsers, leading to the use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos that characterized these early years of the [[browser wars]].<ref>{{cite web |url=http://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/ |title=The Unwelcome Return of \"Best Viewed with Internet Explorer\" |last=McCracken |first=Harry |date=16 September 2010 |website=technologizer.com |access-date=16 July 2016}}</ref> JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven Web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time.<ref name=\"O'Reilly-2001\" /> With the release of [[Internet Explorer 4]], Microsoft introduced the concept of [[Dynamic HTML]], but the differences in language implementations and the different and proprietary [[Document Object Model]]s remained and were obstacles to widespread take-up of JavaScript on the Web.<ref name=\"O'Reilly-2001\" />\n\n=== Standardization ===\nIn November 1996, Netscape submitted JavaScript to [[Ecma International|ECMA International]] to carve out a standard specification, which other browser vendors could then implement based on the work done at Netscape. This led to the official release of the language specification [[ECMAScript]] published in the first edition of the ECMA-262 standard in June 1997, with JavaScript being the most well known of the implementations. [[ActionScript]] and [[JScript]] were other well-known implementations of [[ECMAScript]].\n\nThe release of ECMAScript 2 in June 1998 continued the standards process cycle, conforming some modifications to the ISO/IEC 16262 international standard. ECMAScript 3 was released in December 1999 and is the modern-day baseline for JavaScript. The original ECMAScript 4 work led by Waldemar Horwat (then at Netscape, now at [[Google]]) started in 2000. [[Microsoft]] initially participated and implemented some proposals in their [[JScript .NET]] language.\n\nOver time it was clear that Microsoft had no intention of cooperating or implementing proper JavaScript in Internet Explorer, even though they had no competing proposal and they had a partial (and diverged at this point) implementation on the [[.NET]] server side. So by 2003, the original ECMAScript 4 work was mothballed.\n\nThe next major event was in 2005, with two major happenings in JavaScript's history. First, Brendan Eich and Mozilla rejoined Ecma International as a not-for-profit member and work started on [[ECMAScript for XML]] (E4X), the ECMA-357 standard, which came from ex-Microsoft employees at [[BEA Systems]] (originally acquired as Crossgain). This led to working jointly with [[Macromedia]] (later acquired by [[Adobe Systems]]), who were implementing E4X in ActionScript 3 (ActionScript 3 was a fork of original ECMAScript 4).\n\nSo, along with Macromedia, work restarted on ECMAScript 4 with the goal of standardizing what was in ActionScript 3. To this end, Adobe Systems released the ActionScript Virtual Machine 2, code named [[Tamarin (software)|Tamarin]], as an [[Open-source model|open source]] project. But Tamarin and ActionScript 3 were too different from web JavaScript to converge, as was realized by the parties in 2007 and 2008.\n\nAlas, there was still turmoil between the various players; [[Douglas Crockford]]—then at [[Yahoo!]]—joined forces with Microsoft in 2007 to oppose ECMAScript 4, which led to the ECMAScript 3.1 effort. The development of ECMAScript 4 was never completed, but that work influenced subsequent versions.<ref>{{cite web|url=http://www.ecmascript.org/docs.php|title=Documentation|last=|first=|date=|website=ecmascript.org|archive-url=https://web.archive.org/web/20110426141932/http://www.ecmascript.org/docs.php|archive-date=2011-04-26|dead-url=|access-date=16 July 2016|quote=development of a Fourth Edition was not completed, that work influenced Fifth Edition}}</ref>\n\nWhile all of this was happening, the open source and developer communities set to work to revolutionize what could be done with JavaScript. This community effort was sparked in 2005 when [[Jesse James Garrett]] released a white paper in which he coined the term [[Ajax (programming)|Ajax]], and described a set of technologies, of which JavaScript was the backbone, used to create web applications where data can be loaded in the background, avoiding the need for full page reloads and leading to more dynamic applications. This resulted in a renaissance period of JavaScript usage spearheaded by open source libraries and the communities that formed around them, with libraries such as [[Prototype JavaScript Framework|Prototype]], [[jQuery]], [[Dojo Toolkit]], [[MooTools]], and others being released.\n\nIn July 2008, the disparate parties on either side came together in Oslo. This led to the eventual agreement in early 2009 to rename ECMAScript 3.1 to ECMAScript 5 and drive the language forward using an agenda that is known as Harmony. ECMAScript 5 was finally released in December 2009.\n\nIn June 2011, ECMAScript 5.1 was released to fully align with the third edition of the ISO/IEC 16262 international standard. ECMAScript 2015 was released in June 2015. ECMAScript 2016 was released in June 2016. The current version is ECMAScript 2017, released in June 2017.<ref name=\"auto\"/>\n\n=== Later developments ===\nJavaScript has become one of the most popular programming languages on the Web. However, many professional programmers initially denigrated the language due to the perceived target audience of Web authors and other such \"amateurs\".<ref>{{cite web |url=http://www.crockford.com/javascript/javascript.html |title=JavaScript, The World's Most Misunderstood Programming Language |last=Crockford |first=Douglas |date=2001 |website=crockford.com |access-date=16 July 2016}}</ref> The advent of [[Ajax (programming)|Ajax]] returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive [[List of JavaScript libraries|frameworks and libraries]], improved JavaScript programming practices, and increased usage of JavaScript outside Web browsers, as seen by the proliferation of [[Server-side JavaScript]] platforms.\n\nIn January 2009, the [[CommonJS]] project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.<ref>{{cite web |url=https://arstechnica.com/web/news/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination.ars |title=CommonJS Effort Sets JavaScript on Path for World Domination |last=Kowal |first=Kris |date=1 December 2009 |website=arstechnica.com |access-date=16 July 2016}}</ref>\n\nWith the rise of [[single-page application]]s and JavaScript-heavy sites, it is increasingly being used as a compile target for [[source-to-source compiler]]s from both [[Dynamic typing|dynamic languages]] and [[Static typing|static languages]].\n\n== Trademark ==\n\"JavaScript\" is a [[trademark]] of [[Oracle Corporation]] in the United States.<ref>{{cite web | title=USPTO Copyright entry #75026640|url=http://tarr.uspto.gov/servlet/tarr?regser=serial&entry=75026640|publisher=USPTO}}</ref> It is used under license for technology invented and implemented by Netscape Communications and current entities such as the [[Mozilla Foundation]].<ref>{{cite web | title=Sun Trademarks|url=http://www.sun.com/suntrademarks/|publisher=Sun Microsystems|accessdate=2007-11-08|archiveurl=https://web.archive.org/web/20100528154600/http://www.sun.com/suntrademarks/|archivedate=28 May 2010}}</ref>\n\n== Features ==\nThe following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.\n\n=== Universal support ===\nAll popular modern Web browsers support JavaScript with built-in interpreters.\n\n=== Imperative and structured ===\nJavaScript supports much of the [[structured programming]] syntax from [[C (computer language)|C]] (e.g., <code>if</code> statements, <code>while</code> loops, <code>switch</code> statements, <code>do while</code> loops, etc.). One partial exception is [[scope (computer science)|scoping]]: JavaScript originally had only [[function scoping]] with <code>var</code>. ECMAScript 2015 added keywords <code>let</code> and <code>const</code> for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between [[Expression (computer science)|expressions]] and [[Statement (computer science)|statements]]. One syntactic difference from C is [[Defensive semicolon|automatic semicolon insertion]], which allows the semicolons that would normally terminate statements to be omitted.<ref name=\"Flanagan2006\">{{cite book|author=David Flanagan|title=JavaScript: The Definitive Guide: The Definitive Guide|url=https://books.google.com/books?id=2weL0iAfrEMC|date=17 August 2006|publisher=\"O'Reilly Media, Inc.\"|isbn=978-0-596-55447-7|page=16}}</ref>\n\n=== Dynamic ===\n; Typing:JavaScript is [[dynamic typing|dynamically typed]] like most other [[scripting language]]s. A [[type system|type]] is associated with a [[value (computer science)|value]] rather than an expression. For example, a [[Variable (programming)|variable]] initially bound to a number may be reassigned to a [[string (computer science)|string]].<ref>{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures|title=JavaScript data types and data structures - JavaScript &#124; MDN|date=2017-02-16|website=Developer.mozilla.org|accessdate=2017-02-24}}</ref>  JavaScript supports various ways to test the type of objects, including [[duck typing]].{{Sfn|Flanagan|2006|pp=176–178}}\n; Run-time evaluation: JavaScript includes an <code>[[eval]]</code> function that can execute statements provided as strings at run-time.\n\n=== Prototype-based (object-oriented) ===\nJavaScript is almost entirely [[object-based]]. In JavaScript, an [[Object (computer science)|object]] is an [[associative array]], augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (<code>obj.x&nbsp;=&nbsp;10</code>) and bracket notation (<code>obj['x']&nbsp;=&nbsp;10</code>). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a <code>for...in</code> loop.\n\nJavaScript has a small number of built-in objects, including <code>Function</code> and <code>Date</code>.\n\n; Prototypes: JavaScript uses [[prototype-based programming|prototypes]] where many other object-oriented languages use [[Class (computer science)|classes]] for [[Inheritance (computer science)|inheritance]].<ref>{{cite web | title=Inheritance and the prototype chain|url=https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref> It is possible to simulate many class-based features with prototypes in JavaScript.<ref>{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|page=83}}</ref>\n; Functions as object constructors: Functions double as object constructors, along with their typical role. Prefixing a function call with ''new'' will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the <code>Object</code> prototype).<ref>{{cite book|last=Haverbeke|first=Marijn|title=Eloquent JavaScript|year=2011|publisher=No Starch Press|isbn=978-1-59327-282-1|pages=95–97}}</ref> ECMAScript 5 offers the <code>Object.create</code> method, allowing explicit creation of an instance without automatically inheriting from the <code>Object</code> prototype (older environments can assign the prototype to <code>null</code>).<ref>{{cite web | last=Katz|first=Yehuda|title=Understanding \"Prototypes\" in JavaScript|url=http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/|accessdate=6 April 2013}}</ref> The constructor's <code>prototype</code> property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as <code>Array</code> or <code>Object</code>, also have prototypes that can be modified. While it is possible to modify the <code>Object</code> prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the <code>Object</code> prototype, and they may not expect the prototype to be modified.<ref>{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|pages=125–127}}</ref>\n; Functions as methods<!--not sure where to classify this under-->: Unlike many object-oriented languages, there is no distinction between a function definition and a [[method (computer science)|method]] definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local ''this'' keyword is bound to that object for that invocation.\n\n=== Functional ===\nA [[Subroutine|function]] is [[first-class function|first-class]]; a function is considered to be an object. As such, a function may have properties and methods, such as <code>.call()</code> and <code>.bind()</code>.<ref>{{cite web | url=https://es5.github.com/#x15.3.4-toc | title=Properties of the Function Object | publisher=Es5.github.com | accessdate=2013-05-26}}</ref> A ''nested'' function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a [[Closure (computer programming)|lexical closure]]: The [[Scope (programming)#Lexical scoping vs. dynamic scoping|lexical scope]] of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.{{Sfn|Flanagan|2006|p=141}} JavaScript also supports [[anonymous function]]s.\n\n=== Delegative ===\nJavaScript supports implicit and explicit [[Delegation (object-oriented programming)|delegation]].\n\n; Functions as roles (Traits and Mixins): JavaScript natively supports various function-based implementations of [[Role-oriented programming|Role]]<ref>[http://peterseliger.blogspot.de/2014/04/the-many-talents-of-javascript.html#the-many-talents-of-javascript-for-generalizing-role-oriented-programming-approaches-like-traits-and-mixins The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins], Peterseliger.blogpsot.de, April 11, 2014.</ref> patterns like [[Traits (computer science)|Traits]]<ref>[http://soft.vub.ac.be/~tvcutsem/traitsjs/ Traits for JavaScript], 2010.</ref><ref>{{cite web|url=https://cocktailjs.github.io/ |title=Home &#124; CocktailJS |website=Cocktailjs.github.io |date= |accessdate=2017-02-24}}</ref> and [[Mixin]]s.<ref>Angus Croll, [http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/ A fresh look at JavaScript Mixins], published May 31, 2011.</ref> Such a function defines additional behavior by at least one method bound to the <code>this</code> keyword within its <code>function</code> body. A Role then has to be delegated explicitly via <code>call</code> or <code>apply</code> to objects that need to feature additional behavior that is not shared via the prototype chain.\n; Object composition and inheritance: Whereas explicit function-based delegation does cover [[Object composition|composition]] in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus [[Inheritance (computer science)|inheritance]] in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.\n\n=== Miscellaneous ===\n; Run-time environment:JavaScript typically relies on a run-time environment (e.g., a [[Web browser]]) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage [[Document Object Model|DOM]]). It also relies on the run-time environment to provide the ability to include/import scripts (e.g., [[HTML]] <code><nowiki><script></nowiki></code> elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes [[Message (computer science)|messages]] from a [[Queue (abstract data type)|queue]] one at a time. JavaScript calls a [[Subroutine|function]] associated with each new message, creating a [[call stack]] frame with the function's [[Parameter (computer programming)|arguments]] and [[local variable]]s. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the [[event loop]], described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's [[Concurrency (computer science)|concurrency model]] describes the event loop as [[Asynchronous I/O|non-blocking]]: program [[input/output]] is performed using [[Event (computing)|events]] and [[Callback (computer programming)|callback functions]]. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.<ref>{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop|title=Concurrency model and Event Loop|website=Mozilla Developer Network|accessdate=2015-08-28}}</ref>\n\n; Variadic functions<!--note: this is not a functional programming feature-->: An indefinite number of parameters can be passed to a function. The function can access them through [[formal parameter]]s and also through the local <code>arguments</code> object. [[Variadic functions]] can also be created by using the <code>[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind bind]</code> method.\n\n; Array and object literals: Like many scripting languages, arrays and objects ([[associative arrays]] in other languages) can each be created with a succinct shortcut syntax. In fact, these [[Object literal|literals]] form the basis of the [[JSON]] data format.\n\n; Regular expressions: JavaScript also supports [[regular expression]]s in a manner similar to [[Perl]], which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.<ref>{{cite book | last=Haverbeke | first=Marijn | title=Eloquent JavaScript | year=2011 | publisher=No Starch Press|isbn=978-1-59327-282-1|pages=139–149}}</ref>\n\n=== Vendor-specific extensions ===\nJavaScript is officially managed by [[Mozilla Foundation]], and new language features are added periodically. However, only some [[JavaScript engine]]s support these new features:\n* property getter and setter functions (supported by WebKit, Gecko, Opera,<ref>Robert Nyman, [http://robertnyman.com/2009/05/28/getters-and-setters-with-javascript-code-samples-and-demos/ Getters And Setters With JavaScript – Code Samples And Demos], Robertnyman.com, published 29 May 2009, accessed 2 January 2010.</ref> ActionScript, and Rhino)<ref>John Resig, [http://ejohn.org/blog/javascript-getters-and-setters/ JavaScript Getters and Setters], Ejohn.org, 18 July 2007, accessed 2 January 2010</ref>\n* conditional <code>catch</code> clauses\n* iterator protocol (adopted from [[Python (programming language)|Python]])\n* shallow [[generator (computer programming)|generators]]-[[coroutine]]s (adopted from Python)\n* [[List comprehension|array comprehensions]] and generator expressions (adopted from Python)\n* proper block scope via the <code>let</code> keyword\n* array and object destructuring (limited form of [[pattern matching]])\n* concise function expressions (<code>function(args) expr</code>)\n* [[ECMAScript for XML]] (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21<ref>{{cite web | title=E4X – Archive of obsolete content &#124; MDN|url=https://developer.mozilla.org/en-US/docs/Archive/Web/E4X|website=Mozilla Developer Network|publisher=Mozilla Foundation|date=Feb 14, 2014|accessdate=13 July 2014}}</ref>)\n\n== Syntax ==\n{{Main|JavaScript syntax}}\n\n=== Simple examples ===\n[[Variable (computer science)|Variables]] in JavaScript can be defined using either the <code>var</code>,<ref>{{cite web | url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/var | title=var – JavaScript – MDN | publisher=The [[Mozilla Developer Network]] | accessdate=22 December 2012}}</ref> <code>let</code><ref name=\"moz_let\">{{cite web |title=let |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_let}}</ref> or <code>const</code><ref name=\"moz_const\">{{cite web |title=const |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_const}}</ref> keywords.\n\n<syntaxhighlight lang=\"javascript\">\nvar x; // declares the variable x and assigns to it the special value \"undefined\" (not to be confused with an undefined value)\nvar y = 2; // declares the variable y and assigns to it the value 2\nvar z = \"Hello, World!\"; // declares the variable z and assigns to it a string containing \"Hello, World!\"\n</syntaxhighlight>\n\nNote the [[Comment (computer programming)|comments]] in the example above, all of which were preceded with two [[Slash (punctuation)|forward slashes]].\n\nThere is no built-in [[Input/output]] functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:<ref>{{cite web | url=http://www.ecma-international.org/ecma-262/5.1/#sec-4 | title=ECMAScript Language Specification – ECMA-262 Edition 5.1|publisher=[[Ecma International]] | accessdate=22 December 2012}}</ref>\n<blockquote>indeed, there are no provisions in this specification for input of external data or output of computed results.</blockquote>\nHowever, most runtime environments have a <code>console</code> object<ref>{{cite web | title=console|url=https://developer.mozilla.org/en-US/docs/DOM/console|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref> that can be used to print output. Here is a minimalist [[Hello World program]] in JavaScript:\n\n<syntaxhighlight lang=\"javascript\">\nconsole.log(\"Hello World!\");\n</syntaxhighlight>\n\nA simple [[Recursion (computer science)|recursive]] function:\n\n<syntaxhighlight lang=\"javascript\">\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;  // 0! = 1\n    }\n    return n * factorial(n - 1);\n}\n\nfactorial(3); // returns 6\n</syntaxhighlight>\n\nAn [[anonymous function]] (or lambda):\n\n<syntaxhighlight lang=\"javascript\">\nfunction counter() {\n    var count = 0;\n    return function() {\n        return ++count;\n    };\n}\n\nvar closure = counter();\nclosure(); // returns 1\nclosure(); // returns 2\nclosure(); // returns 3\n</syntaxhighlight>\n\nThis example shows that, in JavaScript, [[Closure (computer programming)|function closures]] capture their non-local variables by reference.\n\nArrow functions were first introduced in [[ECMAScript#6th Edition - ECMAScript 2015|6th Edition - ECMAScript 2015]] . They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous in nature; a variable is needed to refer to them in order to invoke them after their creation.\n\nExample of arrow function:\n\n<syntaxhighlight lang=\"javascript\">\n// Arrow functions let us omit the `function` keyword. Here `long_example`\n// points to an anonymous function value.\nconst long_example = (input1, input2) => {\n    console.log(\"Hello, World!\");\n    const output = input1 + input2;\n    return output;\n};\n\n// Arrow functions also let us automatically return the expression to the right\n// of the arrow (here `input + 5`), omitting braces and the `return` keyword.\nconst short_example = input => input + 5;\n\nlong_example(2, 3); // Prints \"Hello, World!\" and returns 5.\nshort_example(2);   // Returns 7.\n</syntaxhighlight>\n\nIn JavaScript, [[Object (computer science)|objects]] are created in the same way as functions; this is known as a [[function object]].\n\nObject example:\n<syntaxhighlight lang=\"javascript\">\nfunction Ball(r) {\n    this.radius = r; // the radius variable is local to the ball object\n    this.area = pi*r**2;\n    this.show = function(){ // objects can contain functions\n        drawCircle(r); // references a circle drawing function\n    }\n}\nvar myBall = new Ball(5); // creates a new instance of the ball object with radius 5\nmyBall.show(); // this instance of the ball object has the show function performed on it\n</syntaxhighlight>\n\n[[Variadic function]] demonstration (<code>arguments</code> is a special [[variable (programming)|variable]]):<ref>{{cite web | title=arguments|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref>\n\n<syntaxhighlight lang=\"javascript\">\nfunction sum() {\n    var x = 0;\n    for (var i = 0; i < arguments.length; ++i) {\n        x += arguments[i];\n    }\n    return x;\n}\nsum(1, 2); // returns 3\nsum(1, 2, 3); // returns 6\n</syntaxhighlight>\n\n[[Immediately-invoked function expression]]s are often used to create modules; before ECMAScript 2015 there was no built-in module construct in the language. Modules allow gathering properties and methods in a namespace and making some of them private:\n\n<syntaxhighlight lang=\"javascript\">\nvar counter = (function () {\n    var i = 0; // private property\n\n    return {   // public methods\n        get: function () {\n            alert(i);\n        },\n        set: function (value) {\n            i = value;\n        },\n        increment: function () {\n            alert(++i);\n        }\n    };\n})(); // module\n\ncounter.get();       // shows 0\ncounter.set(6);\ncounter.increment(); // shows 7\ncounter.increment(); // shows 8\n</syntaxhighlight>\n\nExporting and Importing modules in javascript<ref>{{cite web |title=Import & Export Modules in javascript |url=https://learnersbucket.com/tutorials/es6/es6-modules/ |website=Learnersbucket.com |accessdate=23 April 2019}}</ref>\n\nExport example:\n<syntaxhighlight lang=\"javascript\">\n/* mymodule.js */\n// This function remains private, as it is not exported\nlet sum = (a, b) => {\n    return a + b;\n}\n\n// Export variables\nexport var name = 'Alice';\nexport let age = 23;\n\n// Export named functions\nexport function add(num1, num2){\n  return num1 + num2;\n}\n\n// Export class\nexport class Multiplication {\n    constructor(num1, num2) {\n       this.num1 = num1;\n       this.num2 = num2;\n    }\n\n    add() {\n        return sum(this.num1, this.num2);\n    }\n}\n</syntaxhighlight>\n\nImport example:\n<syntaxhighlight lang=\"javascript\">\n// Import one property\nimport { add } from './mymodule.js';\n\nconsole.log(add(1, 2)); // 3\n\n// Import multiple properties\nimport { name, age } from './mymodule.js';\nconsole.log(name, age);\n//> \"Alice\", 23\n\n// Import all properties from a module\nimport * from './module.js'\nconsole.log(name, age);\n//> \"Alice\", 23\nconsole.log(add(1,2));\n//> 3\n</syntaxhighlight>\n\n=== More advanced example ===\nThis sample code displays various JavaScript features.\n<!-- Don't try to standardize any styling in this example—its purpose is to showcase language syntax, not provide some standard role model. -->\n\n<syntaxhighlight lang=\"javascript\">\n/* Finds the lowest common multiple (LCM) of two numbers */\nfunction LCMCalculator(x, y) { // constructor function\n  var checkInt = function(x) { // inner function\n    if (x % 1 !== 0) {\n      throw new TypeError(x + \"is not an integer\"); // var a =  mouseX\n    };\n\n    return x\n  }\n  this.a = checkInt(x)\n    //   semicolons   ^^^^  are optional, a newline is enough\n  this.b = checkInt(y);\n\n}\n// The prototype of object instances created by a constructor is\n// that constructor's \"prototype\" property.\nLCMCalculator.prototype = { // object literal\n  constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately\n  gcd: function() { // method that calculates the greatest common divisor\n    // Euclidean algorithm:\n    var a = Math.abs(this.a),\n      b = Math.abs(this.b),\n      t;\n    if (a < b) {\n      // swap variables\n      // t = b; b = a; a = t;\n      [a, b] = [b, a]; // swap using destructuring assignment (ES6)\n    }\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n    // Only need to calculate GCD once, so \"redefine\" this method.\n    // (Actually not redefinition—it's defined on the instance itself,\n    // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd.\n    // Note that this leads to a wrong result if the LCMCalculator object members \"a\" and/or \"b\" are altered afterwards.)\n    // Also, 'gcd' === \"gcd\", this['gcd'] === this.gcd\n    this['gcd'] = function() {\n      return a;\n    };\n    return a;\n  },\n  // Object property names can be specified by strings delimited by double (\") or single (') quotes.\n  lcm: function() {\n    // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.\n    // not using |this.a*this.b| to avoid FP precision issues\n    var lcm = this.a / this.gcd() * this.b;\n    // Only need to calculate lcm once, so \"redefine\" this method.\n    this.lcm = function() {\n      return lcm;\n    };\n    return lcm;\n  },\n  toString: function() {\n    return \"LCMCalculator: a = \" + this.a + \", b = \" + this.b;\n  }\n};\n\n// Define generic output function; this implementation only works for Web browsers\nfunction output(x) {\n  document.body.appendChild(document.createTextNode(x));\n  document.body.appendChild(document.createElement('br'));\n}\n\n// Note: Array's map() and forEach() are defined in JavaScript 1.6.\n// They are used here to demonstrate JavaScript's inherent functional nature.\n[\n  [25, 55],\n  [21, 56],\n  [22, 58],\n  [28, 56]\n].map(function(pair) { // array literal + mapping function\n    return new LCMCalculator(pair[0], pair[1]);\n  }).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\"\n  .forEach(printResult);\n\nfunction printResult(obj) {\n  output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm());\n}\n</syntaxhighlight>\n\nThe following output should be displayed in the browser window.\n<syntaxhighlight lang=\"html4strict\">\nLCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56\nLCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168\nLCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275\nLCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638\n</syntaxhighlight>\n\n== Use in Web pages ==\n{{See also|Dynamic HTML|Ajax (programming)}}\n\n{{as of|2017|May}} 94.5% of 10 million most popular web pages used JavaScript.<ref name=deployedstats>{{cite web|url=https://w3techs.com/technologies/details/cp-javascript/all/all|title=Usage Statistics of JavaScript for Websites, March 2018|website=w3techs.com}}</ref> The most common use of JavaScript is to add client-side behavior to [[HTML]] pages, also known as [[Dynamic HTML]] (DHTML). Scripts are embedded in or included from [[HTML]] pages and interact with the [[Document Object Model]] (DOM) of the page. Some simple examples of this usage are:\n\n* Loading new page content or submitting data to the server via [[Ajax (programming)|Ajax]] without reloading the page (for example, a social network might allow the user to post status updates without leaving the page).\n* Animation of page elements, fading them in and out, resizing them, moving them, etc.\n* Interactive content, for example games, and playing audio and video.\n* [[Data validation|Validating]] input values of a [[Form (HTML)|Web form]] to make sure that they are acceptable before being submitted to the server.\n* Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for [[Web analytics]], [[ad tracking]], [[personalization]] or other purposes.\n\nJavaScript code can run locally in a user's browser (rather than on a remote server), increasing the application's overall responsiveness to user actions. JavaScript code can also detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as [[Gmail]] take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.\n\nA [[JavaScript engine]] (also known as JavaScript interpreter or JavaScript implementation) is an [[interpreter (computing)|interpreter]] that interprets JavaScript [[source code]] and executes the [[computer program|script]] accordingly. The first JavaScript engine was created by Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], is implemented in [[C (programming language)|C]]. It has since been updated (in JavaScript 1.5) to conform to ECMAScript 3. The [[Rhino (JavaScript engine)|Rhino]] engine, created primarily by Norris Boyd (formerly at Netscape, now at Google) is a JavaScript implementation in [[Java (programming language)|Java]]. Rhino, like SpiderMonkey, is ECMAScript 3 compliant.\n\nA Web browser is the most common host environment for JavaScript. However, a Web browsers does not have to execute JavaScript code. (For example, [[Text-based web browser|text-based browsers]] have no JavaScript engines; and users of other browsers may disable scripts through a preference or [[Browser extension|extension]].)\n\nA Web browser typically creates \"host objects\" to represent the DOM in JavaScript. The [[Web server]] is another common host environment. A [[Server-side JavaScript|JavaScript Web server]] would typically expose host objects representing [[HTTP]] request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate Web pages.\n\nJavaScript is the only language that the most popular browsers share support for and has inadvertently become a [[target language (computing)|target language]] for frameworks in other languages.<ref name=\"computerworld\">{{cite web|url=http://www.computerworld.com.au/article/255293/-z_programming_languages_javascript|title=The A-Z of Programming Languages: JavaScript|last=Hamilton|first=Naomi|date=2008-07-31|publisher=computerworld.com.au}}</ref> The increasing speed of JavaScript engines has made the language a feasible compilation target, despite the performance limitations inherent to its dynamic nature.\n\n=== Example script ===\nBelow is a minimal example of a standards-conforming Web page containing JavaScript (using [[HTML 5]] syntax) and the DOM:\n\n<syntaxhighlight lang=\"html5\">\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <button id=\"hellobutton\">Hello</button>\n    <script>\n        document.getElementById('hellobutton').onclick = function() {\n            alert('Hello world!');                     // Show a dialog\n            var myTextNode = document.createTextNode('Some new words.');\n            document.body.appendChild(myTextNode);     // Append \"Some new words\" to the page\n        };\n    </script>\n  </body>\n</html>\n</syntaxhighlight>\n\n=== Compatibility considerations ===\n{{Main|Web interoperability}}\n\nBecause JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.\n\nThe DOM interfaces are officially defined by the [[World Wide Web Consortium|W3C]] in a standardization effort separate from JavaScript. The implementation of these DOM interfaces differ between web browsers.\n\nJavaScript authors can deal with these differences by writing standards-compliant code that can be executed correctly by most browsers. Failing that, they can write code that behaves differently in the absence of certain browser features.<ref>{{cite web|url=http://www.quirksmode.org/js/support.html|title=Javascript - Object detection|date=|website=Quirksmode.org|accessdate=2017-02-24}}</ref> Authors may also find it practical to detect what browser is running, as two browsers may implement the same feature with differing behavior.<ref>Peter-Paul Koch, [http://www.evolt.org/node/23335 Mission Impossible – mouse position]</ref><ref>{{cite web|url=http://www.quirksmode.org/js/detect.html|title=JavaScript - Browser detect|date=|website=Quirksmode.org|accessdate=2017-02-24}}</ref>  Libraries and toolkits that take browser differences into account are also useful to programmers.\n\nFurthermore, scripts may not work for some users. For example, a user may:\n\n* use an old or rare browser with incomplete or unusual DOM support;\n* use a [[Personal digital assistant|PDA]] or [[mobile phone]] browser that cannot execute JavaScript;\n* have JavaScript execution disabled as a security precaution;\n* use a speech browser due to, for example, a visual disability.\n\nTo support these users, Web authors can try to create pages that [[Fault-tolerant system|degrade gracefully]] on user agents (browsers) that do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. Some sites use the HTML <code><noscript></code> tag, which contains alt content if JS is disabled. An alternative approach that many{{Howmany|date=June 2018}} find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled.\n<ref>{{cite web|url=https://www.smashingmagazine.com/2009/04/progressive-enhancement-what-it-is-and-how-to-use-it/|title=Progressive Enhancement: What It Is, And How To Use It?|date=|website=Smashingmagazine.com|accessdate=2018-10-20}}</ref> This is known as [[progressive enhancement]].\n\n== Security ==\n{{See also|Browser security}}\n\nJavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a [[Sandbox (computer security)|sandbox]] in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the [[same-origin policy]]: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.\n\nThere are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).<ref>{{cite web | url=http://www.adsafe.org/ | title=Making JavaScript Safe for Advertising | publisher=ADsafe | accessdate=2013-05-26}}</ref><ref>{{cite web | url=https://code.google.com/p/es-lab/wiki/SecureEcmaScript | title=Secure ECMA Script (SES) | publisher=Code.google.com | accessdate=2013-05-26}}</ref> [[Caja project|Caja]] is another project for safe embedding and isolation of third-party JavaScript and HTML.\n\n[[Content Security Policy]] is the main intended method of ensuring that only trusted code is executed on a Web page.\n\n{{See also|Content Security Policy}}\n\n=== Cross-site vulnerabilities ===\n{{Main|Cross-site scripting|Cross-site request forgery}}\n\nA common JavaScript-related security problem is [[cross-site scripting]] (XSS), a violation of the [[same-origin policy]]. XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use ''HTML escaping'' whenever displaying untrusted data.\n\nSome browsers include partial protection against ''reflected'' XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.\n\nXSS vulnerabilities can also occur because of implementation mistakes by browser authors.<ref>{{cite web|url=http://www.mozillazine.org/talkback.html?article=4392 |title=Mozilla Cross-Site Scripting Vulnerability Reported and Fixed - MozillaZine Talkback |website=Mozillazine.org |date= |accessdate=2017-02-24}}</ref>\n\nAnother cross-site vulnerability is [[cross-site request forgery]] (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.\n\n\"JavaScript hijacking\" is a type of CSRF attack in which a <code><nowiki><script></nowiki></code> tag on an attacker's site exploits a page on the victim's site that returns private information such as [[JSON]] or JavaScript. Possible solutions include:\n\n* requiring an authentication token in the [[POST (HTTP)|POST]] and [[GET (HTTP)|GET]] parameters for any response that returns private information.\n\n=== Misplaced trust in the client ===\nDevelopers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:\n* Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be [[obfuscated code|obfuscated]], but obfuscation can be reverse-engineered.\n* JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.\n* Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.<ref>{{cite journal\n |title       = Right-click \"protection\"? Forget about it\n |date        = 2008-06-17\n |url         = http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/\n |issn        = 1797-1993\n |accessdate  = 2008-06-17\n |deadurl     = yes\n |archiveurl  = https://web.archive.org/web/20110809195359/http://blog.anta.net/2008/06/17/right-click-%E2%80%9Cprotection%E2%80%9D-forget-about-it/\n |archivedate = 2011-08-09\n |df          = \n}}</ref>\n* It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.<ref>{{cite web |last1=Rehorik |first1=Jan |title=Why You Should Never Put Sensitive Data in Your JavaScript |url=https://www.serviceobjects.com/blog/why-you-should-never-put-sensitive-data-in-your-javascript/ |website=ServiceObjects Blog |publisher=ServiceObjects |accessdate=3 June 2019}}</ref>\n\n=== Misplaced trust in developers ===\nPackage management systems such as [[Npm (software)|npm]] and [[Bower (software)|Bower]] are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developer's program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at-least one known vulnerability.<ref name=\"jslibs\">\n{{cite journal\n | title = Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\n | date = 2016-12-21\n | url = http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf\n | accessdate = 2017-02-22\n | journal = \n | archive-url = https://web.archive.org/web/20170329045344/http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf\n | archive-date = 2017-03-29\n | dead-url = yes\n | df = \n }}\n</ref> \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"<ref name=\"jslibs\"/> Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from [[Npm (software)|npm]]. This caused all tens of thousands of programs and websites depending upon his libraries to break.<ref>Quartz, [https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/ How one programmer broke the internet by deleting a tiny piece of code]</ref><ref>SC Magazine UK, [https://www.scmagazineuk.com/developers-11-lines-of-deleted-code-breaks-the-internet/article/532050/ Developer's 11 lines of deleted code 'breaks the internet']</ref>\n\n=== Browser and plugin coding errors ===\nJavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as [[buffer overflow]]s. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's [[API]] with superuser privileges.\n\nThese flaws have affected major browsers including Firefox,<ref>Mozilla Corporation, [https://www.mozilla.org/security/announce/2006/mfsa2006-38.html Buffer overflow in crypto.signText()]</ref> Internet Explorer,<ref>{{cite web|last1=Festa |first1=Paul |title=Buffer-overflow bug in IE |url=http://news.com.com/2100-1001-214620.html |archive-url=https://web.archive.org/web/20021225190522/http://news.com.com/2100-1001-214620.html |dead-url=yes |archive-date=December 25, 2002 |website=[[CNET]] |date=August 19, 1998 |accessdate= |df= }}</ref> and Safari.<ref>SecurityTracker.com, [http://securitytracker.com/alerts/2006/Mar/1015713.html Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files]</ref>\n\nPlugins, such as video players, [[Adobe Flash#Flash client security|Adobe Flash]], and the wide range of [[ActiveX]] controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).<ref>SecurityFocus, [http://www.securityfocus.com/bid/19030/info Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability]</ref><ref>Fusion Authority, [http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm Macromedia Flash ActiveX Buffer Overflow] {{webarchive|url=https://web.archive.org/web/20110813160055/http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm |date=2011-08-13 }}</ref>\n\nIn Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.<ref>{{cite web|author= |url=http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx |title=Protected Mode in Vista IE7 – IEBlog |website=Blogs.msdn.com |date=2006-02-09 |accessdate=2017-02-24}}</ref> [[Google Chrome]] similarly confines its page renderers to their own \"sandbox\".\n\n=== Sandbox implementation errors ===\nWeb browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.\n\nIncorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer<ref>US CERT, [https://www.kb.cert.org/vuls/id/713878 Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame]</ref> and Firefox.<ref>Mozilla Foundation, [https://www.mozilla.org/security/announce/2005/mfsa2005-41.html Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides]</ref> In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.<ref>Microsoft Corporation, [https://technet.microsoft.com/en-us/library/bb457150.aspx Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security]</ref>\n\n[[Microsoft Windows]] allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: [[Windows Script Host]]). This makes JavaScript (like [[VBScript]]) a theoretically viable vector for a [[Trojan horse (computing)|Trojan horse]], although JavaScript Trojan horses are uncommon in practice.<ref>For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, [http://www.symantec.com/security_response/writeup.jsp?docid=2003-100111-0931-99 JS.Seeker.K]</ref>{{failed verification|date=March 2017}}\n\n=== Hardware vulnerabilities ===\nIn 2015, a JavaScript-based proof-of-concept implementation of a [[rowhammer]] attack was described in a paper by security researchers.<ref>{{cite arxiv | eprint = 1507.06955 | title = Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript | date = 2015-07-24 | last1 = Gruss | first1 = Daniel | last2 = Maurice | first2 = Clémentine | last3 = Mangard | first3 = Stefan | class = cs.CR }}</ref><ref>{{cite news|publisher=Motherboard|title=Rowhammer.js Is the Most Ingenious Hack I've Ever Seen|first=Alix|last=Jean-Pharuns|date=2015-07-30|url=https://motherboard.vice.com/en_us/article/9akpwz/rowhammerjs-is-the-most-ingenious-hack-ive-ever-seen}}</ref><ref>{{cite web|website=Ars Technica|title=DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript|first=Dan|last=Goodin|date=2015-08-04|url=https://arstechnica.com/information-technology/2015/08/dram-bitflipping-exploit-for-attacking-pcs-just-add-javascript/}}</ref><ref>{{cite web\n | url = http://www.slate.com/articles/technology/bitwise/2015/07/rowhammer_security_exploit_why_a_new_security_attack_is_truly_terrifying.html\n | title = Rowhammer security exploit: Why a new security attack is truly terrifying\n | date = {{date|2015-07-28|mdy}} | accessdate = {{date|2015-07-29|mdy}}\n | author = David Auerbach | website = slate.com\n}}</ref>\n\nIn 2017, a JavaScript-based attack via browser was demonstrated that could bypass [[Address space layout randomization|ASLR]]. It's called \"ASLR⊕Cache\" or AnC.<ref>[https://www.vusec.net/projects/anc/ AnC] VUSec, 2017</ref><ref>[https://arstechnica.com/security/2017/02/new-aslr-busting-javascript-is-about-to-make-drive-by-exploits-much-nastier/ New ASLR-busting JavaScript is about to make drive-by exploits much nastier] Ars Technica, 2017</ref>\n\n== Uses outside Web pages ==\nIn addition to Web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own [[object model]] that provides access to the host environment. The core JavaScript language remains mostly the same in each application.\n\n=== Embedded scripting language ===\n* Google's [[Google Chrome|Chrome]] extensions, [[Opera (web browser)|Opera]]'s extensions, Apple's [[Safari (web browser)|Safari 5]] extensions, Apple's [[Dashboard (Mac OS)|Dashboard Widgets]], Microsoft's [[Microsoft Gadgets|Gadgets]], [[Yahoo! Widgets]], [[Google Desktop#Gadgets and plug-ins|Google Desktop Gadgets]], and [[Serence]] [[Klipfolio]] are implemented using JavaScript.\n* The [[MongoDB]] database accepts queries written in JavaScript. [[MongoDB]] and [[NodeJS]] are the core components of [[MEAN (software bundle)|MEAN]]: a [[solution stack]] for creating Web applications using just JavaScript.\n* The [[Clusterpoint]] database accept queries written in JS/SQL, which is a combination of [[SQL]] and JavaScript. [[Clusterpoint]] has built-in computing engine that allows execution of JavaScript code right inside the [[distributed database]].\n* Adobe's [[Adobe Acrobat#Security|Acrobat and Adobe Reader]] support JavaScript in [[Portable Document Format|PDF]] files.<ref>{{cite web | url=https://www.adobe.com/devnet/acrobat/javascript.html | accessdate=2009-08-18 | title= JavaScript for Acrobat}}</ref>\n* Tools in the [[Adobe Creative Suite]], including [[Adobe Photoshop|Photoshop]], [[Adobe Illustrator|Illustrator]], [[Adobe After Effects|After Effects]], [[Adobe Dreamweaver|Dreamweaver]], and [[InDesign]], allow scripting through JavaScript.\n* [[LibreOffice]], an office application suite, allows JavaScript to be used as a scripting language.\n* The visual programming language [[Max (software)|Max]], released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows users to reduce visual clutter by using an object for a task rather than many.\n* Apple's Logic Pro X digital audio workstation (DAW) software can create custom MIDI effects plugins using JavaScript.<ref>{{cite web|url=https://www.apple.com/logic-pro/in-depth/|title=Logic Pro X|last=|first=|date=|website=Apple|publisher=Apple, Inc.|access-date=January 31, 2017}}</ref>\n* The [[Unity (game engine)|Unity]] game engine supported a modified version of JavaScript for scripting via Mono until 2017.<ref>{{Cite news|url=https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/|title=UnityScript's long ride off into the sunset – Unity Blog|work=Unity Technologies Blog|access-date=2018-10-14|language=en-US}}</ref>\n* [[DX Studio]] (3D engine) uses the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] implementation of JavaScript for game and simulation logic.<ref>{{cite web | url=http://www.dxstudio.com/features_tech.aspx\n| title=Technical Specification\n| publisher=dxstudio.com\n| accessdate=2009-10-20\n}}</ref>\n* [[Maxwell Render]] ([[Rendering (computer graphics)|rendering]] software) provides an ECMA standard based scripting engine for tasks automation.<ref>THINK! The Maxwell Render Resourcer Center, [http://think.maxwellrender.com/scripting_references-269.html Scripting References] {{Webarchive|url=https://web.archive.org/web/20111102200134/http://think.maxwellrender.com/scripting_references-269.html |date=2011-11-02 }}</ref>\n* [[Google Apps Script]] in [[Google Spreadsheets]] and [[Google Sites]] allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.<ref>[[Google Apps Script]], [https://www.google.com/script/start/ Google Apps Script]</ref>\n* Many [[Internet Relay Chat clients|IRC clients]], like [[ChatZilla]] or [[XChat]], use JavaScript for their scripting abilities.<ref>{{cite web | title=ChatZilla! Frequently Asked Questions – 4.5. How do I write scripts?|url=http://chatzilla.hacksrus.com/faq/#scripts|publisher=Chatzilla.hacksrus.com|accessdate=11 February 2011}}</ref><ref>{{cite web|title=Xcdscript |url=http://unborn.ludost.net/xcdscript/ |accessdate=11 February 2011 |deadurl=yes |archiveurl=https://web.archive.org/web/20110501061348/http://unborn.ludost.net/xcdscript/ |archivedate= 1 May 2011 |df= }}</ref>\n* [[RPG Maker]] MV uses JavaScript as its scripting language.<ref>{{cite web | url=http://www.rpgmakerweb.com/products/programs/rpg-maker-mv | accessdate=28 August 2015 | title=RPG Maker MV &#124; RPG Maker &#124; Make Your Own Games!}}</ref>\n* The text editor [[UltraEdit]] uses JavaScript 1.7 as internal scripting language, introduced with version 13 in 2007.\n\n=== Scripting engine ===\n* Microsoft's [[Active Scripting]] technology supports [[JScript]] as a scripting language.<ref name=\"VersionInformation\">{{cite web | url=http://msdn.microsoft.com/en-us/library/s4esdbwz(v=VS.94).aspx | title=Version Information (JavaScript) | publisher=Msdn.microsoft.com | accessdate=2013-05-26}}</ref>\n* [[Java (programming language)|Java]] introduced the <code>javax.script</code> package in version 6 that includes a JavaScript implementation based on [[Rhino (JavaScript engine)|Mozilla Rhino]]. Thus, Java applications can host scripts that access the application's variables and objects, much like Web browsers host scripts that access a webpage's [[Document Object Model]] (DOM).<ref>{{cite web | url=http://java.sun.com/javase/6/webnotes/index.html#scripting | title=javax.script release notes | publisher=Java.sun.com | accessdate=2009-05-19}}</ref>{{Sfn|Flanagan|2006|pp=214 et seq}}\n* The [[Qt (toolkit)|Qt]] C++ toolkit includes a <code>QtScript</code> module to interpret JavaScript, analogous to Java's <code>javax.script</code> package.<ref>Nokia Corporation, [http://doc.qt.nokia.com/4.6/qtscript.html QtScript Module] {{webarchive|url=https://web.archive.org/web/20100709200957/http://doc.qt.nokia.com/4.6/qtscript.html |date=2010-07-09 }}</ref>\n* [[OS X Yosemite]] introduced [[JavaScript for Automation]] (JXA), which is built upon [[JavaScriptCore]] and the [[Open Scripting Architecture]]. It features an [[Objective-C]] bridge that enables entire [[Cocoa (API)|Cocoa]] applications to be programmed in JavaScript.\n* Late Night Software's [[JavaScript OSA]] (also known as JavaScript for OSA, or JSOSA) is a freeware alternative to [[AppleScript]] for OS X. It is based on the Mozilla JavaScript 1.5 implementation, with the addition of a <code>MacOS</code> object for interaction with the operating system and third-party applications.\n\n=== Application platform ===\n{{See also|List of server-side JavaScript implementations}}\n\n* [[ActionScript]], the programming language used in [[Adobe Flash]], is another implementation of the ECMAScript standard.\n* [[Adobe AIR]] (Adobe Integrated Runtime) is a JavaScript runtime that allows developers to create desktop applications.\n* [[Electron (software framework)|Electron]] is an open-source [[software framework|framework]] developed by [[GitHub]].\n* [[CA Technologies]] AutoShell cross-application scripting environment is built on the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] JavaScript engine. It contains [[preprocessor]]-like extensions for command definition, as well as custom classes for various system-related tasks like file I/O, operation system command invocation and redirection, and COM scripting.\n* [[Apache Cordova]] is a mobile application development framework\n* [[Cocos2d]] is an open source software framework. It can be used to build games, apps and other cross platform GUI based interactive programs\n* [[Chromium Embedded Framework]] (CEF) is an open source framework for embedding a [[web browser engine]] based on the [[Chromium (web browser)|Chromium]] core\n* [[RhoMobile Suite]] is a set of development tools for creating data-centric, cross-platform, native mobile consumer and enterprise applications. \n* [[NW.js]] call all Node.js modules directly from DOM and enable a new way of writing applications with all Web technologies.<ref>{{cite web|url=https://nwjs.io |title=NW.js |website=Nwjs.io |date= |accessdate=2017-02-24}}</ref>\n* [[GNOME Shell]], the shell for the {{nobr|[[GNOME]] 3}} desktop environment,<ref>{{cite web\n| url=http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor\n| title=Behind the Scenes with Owen Taylor\n| publisher=The GNOME Journal\n| accessdate=2010-01-23\n| archiveurl=https://web.archive.org/web/20121221071408/http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor\n| archivedate=2012-12-21\n}}</ref> made JavaScript its default programming language in 2013.<ref>{{cite web\n| url = http://treitter.livejournal.com/14871.html\n| title = Answering the question: \"How do I develop an app for GNOME?\"\n}}</ref>\n* The [[Mozilla application framework]] (XPFE) platform, which underlies [[Firefox]], [[Mozilla Thunderbird|Thunderbird]], and some other Web browsers, uses JavaScript to implement the [[graphical user interface]] (GUI) of its various products.\n* [[Qt Quick]]'s markup language (available since Qt 4.7) uses JavaScript for its application logic. Its declarative syntax is also similar to JavaScript.\n* [[Ubuntu Touch]] provides a JavaScript API for its unified usability interface.\n* [[Open webOS]] is the next generation of web-centric platforms built to run on a wide range of form factors.<ref>{{cite web|url=http://openwebosproject.org/|title=Open webOS|date=30 March 2012|publisher=|deadurl=yes|archiveurl=https://web.archive.org/web/20120330015746/http://openwebosproject.org/|archivedate=30 March 2012|df=}}</ref>\n* [[Enyo (software)|enyo JS]] is a framework to develop apps for all major platforms, from phones and tablets to PCs and TVs<ref>{{cite web|url=http://enyojs.com/ |title=Enyo JavaScript Application Framework |website=Enyojs.com |date= |accessdate=2017-02-24}}</ref>\n* [[WinJS]] provides a special Windows Library for JavaScript functionality in [[Windows 8]] that enables the development of [[Metro (design language)|Modern style]] (formerly ''Metro style'') applications in [[HTML5]] and JavaScript.\n* [[NativeScript]] is an open-source framework to develop apps on the Apple iOS and Android platforms.\n* [[Weex]] is a framework for building Mobile cross-platform UI, created by China Tech giant [[Alibaba Group|Alibaba]]<ref>{{cite web|url=https://weex-project.io/|title=Weex|date=2 February 2017|publisher=|deadurl=bot: unknown|archiveurl=https://web.archive.org/web/20170202074333/https://weex-project.io/|archivedate=2 February 2017|df=}}</ref>\n* [[XULRunner]] is packaged version of the Mozilla platform to enable standalone desktop application development\n\n== Development tools ==\nWithin JavaScript, access to a [[debugger]] becomes invaluable when developing large, non-trivial programs. There can be implementation differences between the various browsers (particularly within the DOM), so it is useful to have access to a debugger for each of the browsers that a Web application targets.<ref>{{cite web | url=http://www.alistapart.com/articles/advanced-debugging-with-javascript/ | title=Advanced Debugging With JavaScript | publisher=alistapart.com | date=2009-02-03 | accessdate=2010-05-28}}</ref>\n\nScript debuggers are integrated within many mainstream browsers such as [[Internet Explorer]], [[Firefox]], [[Safari (web browser)|Safari]], [[Google Chrome]], [[Opera (web browser)|Opera]] and [[Node.js]].<ref>{{cite web | url=http://javascript.about.com/od/problemsolving/ig/JavaScript-Debugging/ | title=The JavaScript Debugging Console | publisher=javascript.about.com | date=2010-05-28 | accessdate=2010-05-28}}</ref><ref>{{cite web | url=http://www.javascript-debugger.com | title=SplineTech JavaScript Debugger – an independent standalone JavaScript Debugger | publisher=javascript-debugger.com | date=2013-08-26 | accessdate=2013-08-26}}</ref><ref>{{cite web | url=http://docs.strongloop.com/display/DOC/Debugging+with+Node+Inspector | title=Debugging with Node Inspector | publisher=docs.strongloop.com | accessdate=2014-05-07 | archive-url=https://web.archive.org/web/20140508051643/http://docs.strongloop.com/display/DOC/Debugging+with+Node+Inspector | archive-date=2014-05-08 | dead-url=yes | df= }}</ref>\n\nIn addition to the native [[Internet Explorer Developer Tools]], three other debuggers are available for Internet Explorer: [[Microsoft Visual Studio]] has the most features of the three, closely followed by [[Microsoft Script Editor]] (a component of [[Microsoft Office]]),<ref>[http://msdn2.microsoft.com/en-us/library/aa202668(office.11).aspx JScript development in Microsoft Office 11] (MS InfoPath 2003)</ref> and finally the free [[Microsoft Script Debugger]]. The free [[Microsoft Visual Web Developer Express]] provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio.\n\nIn comparison to Internet Explorer, Firefox has a more comprehensive set of developer tools, which includes a debugger as well. Old versions of Firefox without these tools used a [[Firefox addon]] called [[Firebug (Firefox extension)|Firebug]], or the older [[Venkman]] debugger. [[WebKit]]'s Web Inspector includes a JavaScript debugger,<ref>{{cite web | url=http://webkit.org/blog/61/introducing-drosera/ | title=Introducing Drosera – Surfin' Safari | publisher=Webkit.org | date=2006-06-28 | accessdate=2009-05-19}}</ref> which is used in [[Safari (web browser)|Safari]]. A modified version called Blink DevTools is used in [[Google Chrome]]. [[Node.js]] has Node Inspector, an interactive debugger that integrates with the Blink DevTools. [[Opera (web browser)|Opera]] includes a set of tools called [[Opera Dragonfly|Dragonfly]].<ref>{{cite web | url=http://www.opera.com/dragonfly/|title=Opera DragonFly|publisher=Opera Software}}</ref>\n\n{{Anchor|Online dev tools}}In addition to the native computer software, there are online JavaScript integrated development environment (IDEs), which has debugging aids that are themselves written in JavaScript and built to run on the Web. An example is the program [[JSLint]], developed by [[Douglas Crockford]] who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines. Many libraries for JavaScript, such as [[three.js]], provide links to demonstration code that can be edited by users. Demonstration codes are also used as a pedagogical tool by institutions such as [[Khan Academy]]<ref>{{cite web |url=http://www.khanacademy.org/cs |title=Khan Academy Computer Science|accessdate=28 Sep 2012}}</ref> to allow students to experience writing code in an environment where they can see the output of their programs, without needing any setup beyond a Web browser.\n\n== Benchmark tools for developers ==\nJavaScript's increased usage in web development warrants further considerations about performance. [[Front and back ends|Frontend]] code has inherited many responsibilities previously handled by the [[Front and back ends|backend]]. Mobile devices in particular may encounter problems rendering poorly optimized frontend code.\n\nA library for doing benchmarks is benchmark.js.<ref>{{cite web|url=https://benchmarkjs.com/|title=Benchmark.js|website=benchmarkjs.com}}</ref> A benchmarking library that supports high-resolution timers and returns statistically significant results.{{Citation needed|reason=Need citation on statistically significant results|date=November 2016}}\n\nAnother tool is jsben.ch.<ref name=\"auto1\">{{cite web|url=http://jsben.ch|title=JSBEN.CH Performance Benchmarking Playground for JavaScript|first=|last=JSBEN.CH|website=jsben.ch}}</ref> An online JavaScript benchmarking tool, where code snippets can be tested against each other.\n\n== Version history ==\n{{See also|ECMAScript#Versions}}\nJavaScript was initially developed in 1996 for use in the [[Netscape Navigator]] Web browser. In the same year Microsoft released an implementation for Internet Explorer. This implementation was called [[JScript]] due to trademark issues. In 1997, the first standardized version of the language was released under the name [[ECMAScript]] in the first edition of the ECMA-262 standard.\n\nThe explicit versioning and opt-in of language features was Mozilla-specific and has been removed in later Firefox versions (at least by Firefox 59). Firefox 4 was the last version which referred to an explicit JavaScript version (1.8.5). With new editions of the ECMA-262 standard, JavaScript language features are now often mentioned with their initial definition in the ECMA-262 editions.\n\nThe following table of explicitly versioned JavaScript versions is based on information from multiple sources.<ref>{{cite web | url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript | title=New in JavaScript |publisher=developer.mozilla.org |date=2014 | accessdate=2016-07-16}}</ref><ref>{{cite web | url=http://www.webmasterworld.com/forum91/68.htm | title=JavaScript – JScript – ECMAScript version history | publisher=Webmasterworld.com | accessdate=2009-12-17}}</ref><ref>{{cite web | author=John Resig | url=http://ejohn.org/blog/versions-of-javascript | title=Versions of JavaScript | publisher=Ejohn.org | accessdate=2009-05-19}}</ref>\n{| class=\"wikitable\" style=\"text-align:center;\"\n|-\n! Version !! Release date !! Equivalent to !! Netscape<br />Navigator !! Mozilla<br />Firefox !! Internet<br />Explorer !! Opera !! Safari !! Google<br />Chrome\n|-\n| {{Version |o |1.0}} || March 1996 || || 2.0 || || 3.0 || || ||\n|-\n| {{Version |o |1.1}} || August 1996 || || 3.0 || || || || ||\n|-\n| {{Version |o |1.2}} || June 1997 || || 4.0-4.05 || || || 3 || ||\n|-\n| {{Version |o |1.3}} || October 1998 || ECMA-262 1st + 2nd edition || 4.06-4.7x || || 4.0 || 5<ref>{{cite web|url=http://javascript.about.com/library/bljver.htm |title=What Version of Javascript |website=Javascript.about.com |date=2016-02-22 |accessdate=2017-02-24 |archive-url=https://web.archive.org/web/20170109084234/http://javascript.about.com/library/bljver.htm |archive-date=2017-01-09}}</ref> || ||\n|-\n| {{Version |o |1.4}} || || || Netscape<br />Server || || || 6 || ||\n|-\n| {{Version |o |1.5}} || November 2000 || ECMA-262 3rd edition || 6.0 || 1.0 || 5.5 (JScript 5.5),<br />6 (JScript 5.6),<br />7 (JScript 5.7),<br />8 (JScript 5.8) || 7.0 || 3.0-5 || 1.0-10.0.666\n|-\n| {{Version |o |1.6}} || November 2005 || 1.5 + array extras + array and string generics + [[E4X]] || || 1.5 || || || ||\n|-\n| {{Version |o |1.7}} || October 2006 || 1.6 + [https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&redirectslug=New_in_JavaScript_1.7#Generators Pythonic generators] + iterators + let || || 2.0 || || || ||28.0.1500.95\n|-\n| {{Version |o |1.8}} || June 2008 || 1.7 + [[generator (computer programming)|generator expressions]] + [[closure (computer programming)|expression closures]] || || 3.0 || || 11.50 || ||\n|-\n| {{Version |o |1.8.1}} || || 1.8 + [[JSON#Native encoding and decoding in browsers|native JSON]] support + minor updates || || 3.5 || || || ||\n|-\n| {{Version |o |1.8.2}} || June 22, 2009 || 1.8.1 + minor updates || || 3.6 || || || ||\n|-\n| {{Version |o |1.8.5}} || July 27, 2010 || 1.8.2 + new features for ECMA-262 5th edition compliance (last explicit versioning of JavaScript) || || 4.0 || || || ||\n|}\n\n== Related languages and technologies ==\n* [[JSON]], or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax.\n* [[jQuery]] is a JavaScript library designed to simplify [[Document Object Model|DOM]]-oriented client-side HTML scripting along with offering cross-browser compatibility because various browsers respond differently to certain vanilla JavaScript code.\n* [[Underscore.js]] is a utility JavaScript library for data manipulation that is used in both client-side and server-side network applications.\n* [[Angular (application platform)|Angular]] and [[AngularJS]] are [[web application framework]]s to use for developing [[single-page application]]s and also cross-platform mobile apps.\n* [[React (JavaScript library)|React]] is an [[Open-source software|open source]] JavaScript library providing views that are rendered using components specified as custom HTML tags.\n* [[Vue.js]] is an [[Open-source software|open source]] JavaScript framework that features an incrementally adoptable architecture focusing on declarative rendering and component composition.\n* Mozilla browsers currently support [[LiveConnect]], a feature that allows JavaScript and Java to intercommunicate on the Web. However, Mozilla-specific support for LiveConnect was scheduled to be phased out in the future in favor of passing on the LiveConnect handling via [[NPAPI]] to the Java 1.6+ plug-in (not yet supported on the Mac {{as of|March 2010|lc=y}}).<ref>[http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/ Release Notes for the Next-Generation Java™ Plug-In Technology (introduced in Java SE 6 update 10)]. Java.sun.com. Retrieved on 2013-06-13.</ref> Most browser inspection tools, such as [[Firebug (software)|Firebug]] in Firefox, include JavaScript interpreters that can act on the visible page's DOM.\n* [[asm.js]] is a subset of JavaScript that can be run in any JavaScript engine or run faster in an [[ahead-of-time]] (AOT) compiling engine.<ref>{{cite web | url=http://asmjs.org/faq.html | title=frequently asked questions | publisher=asm.js | accessdate=2014-04-13}}</ref>\n* [[JSFuck]] is an [[esoteric programming language]]. Programs are written using only six different characters, but are still valid JavaScript code.\n* [[Processing (programming language)#p5.js|p5.js]]<ref>{{cite web|url=http://p5js.org/ |title=Home |website=p5.js |date=2017-01-21 |accessdate=2017-02-24}}</ref> is an object oriented JavaScript library designed for artists and designers. It is based on the ideas of the [[Processing (programming language)|Processing]] project but is for the web.\n* jsben.ch<ref name=\"auto1\"/> is an online JavaScript benchmarking tool, where different code snippets can be tested against each other.\n\n{{anchor|transpilers}}\n\n=== Use as an intermediate language ===\nAs JavaScript is the most widely supported client-side language that can run within a Web browser, it has become an [[intermediate language]] for other languages (also called ''transpilers'') to target. This has included both newly created languages and ports of existing languages. Some of these include:\n* ClojureScript,<ref>{{cite web | url=https://github.com/clojure/clojurescript | title=clojure/clojurescript · GitHub | publisher=Github.com | accessdate=2014-04-13}}</ref> a dialect of [[Clojure]] that targets JavaScript. Its compiler is designed to emit JavaScript code that is compatible with the advanced compilation mode of the [[Google Closure Tools|Google Closure optimizing compiler]].\n* [[CoffeeScript]], an alternate syntax for JavaScript intended to be more concise and readable. It adds features like array comprehensions (also available in JavaScript since version 1.7)<ref>{{cite web | url=https://developer.mozilla.org/en/New_in_JavaScript_1.7#Array_comprehensions_%28Merge_into_Array_comprehensions%29 | title=New in JavaScript 1.7 | publisher=Developer.mozilla.org | date=2012-12-05 | accessdate=2013-05-26}}</ref> and pattern matching. Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax.\n* [[Dart (programming language)|Dart]], an all-purpose, [[Open-source software|open source]] language that compiles to JavaScript.\n* [[Elm (programming language)|Elm]], a pure functional language for web apps. Unlike handwritten JavaScript, Elm-generated JavaScript has zero runtime exceptions, a time-traveling debugger, and enforced semantic versioning.\n* [[Emscripten]], a [[LLVM]]-backend for porting native libraries to JavaScript, known as [[asm.js]]<ref>{{cite web |url=http://www.webpronews.com/easily-port-c-to-html5javascript-with-emscripten-2012-04 |title=Easily Port C++ To HTML5/JavaScript With Emscripten |last=Walton |first=Zach |date=2012-04-04 |work=WebProNews |publisher=iEntry Network |access-date=2018-09-18 |archive-url=https://web.archive.org/web/20130730202900/http://www.webpronews.com/easily-port-c-to-html5javascript-with-emscripten-2012-04 |archive-date=2013-07-30 |dead-url=yes |df= }}</ref>\n* [[Fantom (programming language)|Fantom]], a programming language that runs on JVM, .NET and JavaScript.\n* [[Free Pascal]],<ref>{{cite web | url=http://wiki.freepascal.org/pas2js | title=pascal/pas2js · FreePascal | publisher=freepascal.org | accessdate=2017-12-24}}</ref> a compiler for [[Pascal (programming language)|Pascal]] that targets JavaScript.\n* [[Google Web Toolkit]], a toolkit that translates a subset of Java to JavaScript.\n* [[Haxe]], an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript.\n* OberonScript, a full implementation of the [[Oberon (programming language)|Oberon]] programming language that compiles to high-level JavaScript.<ref>{{cite web | author=Ralph Sommerer | url=http://research.microsoft.com/apps/pubs/default.aspx?id=70288 | title=Oberon Script. A Lightweight Compiler and Runtime System for the Web | publisher=research.microsoft.com | accessdate=2015-12-18}}</ref>\n* [[Objective-J]], a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and [[Smalltalk]]/[[Objective-C]] style dynamic dispatch and optional pseudo-static typing to JavaScript.\n* [[Processing.js]], a JavaScript port of the Processing programming language designed to write visualizations, images, and interactive content. It allows Web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin.\n* [[Pyjs]], a port of [[Google Web Toolkit]] to [[Python (programming language)|Python]] that translates a subset of Python to JavaScript.\n* [[Scala (programming language)|Scala]], an object-oriented and functional programming language, has a Scala-to-JavaScript compiler.<ref>{{cite web | author=Sébastien Doeraene | url=http://lampwww.epfl.ch/~doeraene/scala-js/ | title=Scala.js | publisher=Lampwww.epfl.ch | accessdate=2014-04-13}}</ref>\n* [[SqueakJS]],<ref>{{cite web|url=https://bertfreudenberg.github.io/SqueakJS/|title=SqueakJS by Bert Freudenberg|website=bertfreudenberg.github.io}}</ref> a virtual machine and DOM environment for the open-source [[Squeak]] implementation of the [[Smalltalk]] programming language.\n* [[TypeScript]], a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds support for optional [[type annotation]]s and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting [[ECMAScript]] 3 or higher. The compiler is itself written in TypeScript.\n* Whalesong,<ref>{{cite web | url=http://hashcollision.org/whalesong/ | title=Whalesong: a Racket to JavaScript compiler | publisher=Hashcollision.org | accessdate=2014-04-13 | archive-url=https://web.archive.org/web/20140413141312/http://hashcollision.org/whalesong/ | archive-date=2014-04-13 | dead-url=yes | df= }}</ref> a [[Racket (programming language)|Racket]]-to-JavaScript compiler.\nAs JavaScript has unusual limitations – such as no explicit integer type, only double-precision binary floating point – languages<!--such as Scala--> that compile to JavaScript and do not take care to use the integer-converting shift and bitwise logical operators may have slightly different behavior than in other environments.\n\n=== JavaScript and Java ===\nA common misconception is that JavaScript is similar or closely related to [[Java (programming language)|Java]]. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically [[Sandbox (computer security)|sandboxed]] (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's {{code|lang=javascript|code=Math}} and {{code|lang=javascript|code=Date}} objects are based on classes from Java 1.0,<ref name=\"popularity\">{{cite web | url=http://brendaneich.com/2008/04/popularity/ | title=Popularity | author=Brendan Eich | date=3 April 2008 | accessdate=2012-01-19}}</ref> but the similarities end there.\n\n[[Java (programming language)|Java]] and JavaScript both first appeared in 1995, but Java was developed by [[James Gosling]] of Sun Microsystems, and JavaScript by [[Brendan Eich]] of Netscape Communications.\n\nThe differences between the two languages are more prominent than their similarities. Java has [[static typing]], while JavaScript's typing is [[Dynamic typing|dynamic]]. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are [[Class-based programming|class-based]], while JavaScript's are [[Prototype-based programming|prototype-based]]. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by [[Scheme (programming language)|Scheme]].\n\n===WebAssembly===\n\nStarting in 2017, web browsers began supporting [[WebAssembly]], a technology standardized by the [[World Wide Web Consortium|W3C]]. The WebAssembly standard specifies a binary format, which can be produced by a compiler toolchain such as [[LLVM]], to execute in the browser at near native speed. WebAssembly allows programming languages such as C, C++, C# and Java to be used as well as JavaScript to author client-side code for the World Wide Web.<ref>{{cite web|url=https://visualstudiomagazine.com/articles/2017/11/06/edge-webassembly.aspx|title=Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine|website=Visual Studio Magazine}}</ref>\n\n== See also ==\n{{Portal|Computer programming}}\n* [[WebAssembly]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n{{Refbegin|30em}}\n* {{cite book | last=Bhangal | first=Sham | author2=Jankowski, Tomasz | title=Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash | year=2003 | publisher=APress L. P. | isbn=1-59059-152-6}}\n* {{cite book | last=Burns | first=Joe | author2=Growney, Andree S. | title=JavaScript Goodies | year=2001 | publisher=Pearson Education | isbn=0-7897-2612-2}}\n* {{cite book | last=Duffy | first=Scott | title=How to do Everything with JavaScript | year=2003 | publisher=Osborne | isbn=0-07-222887-3 | url=https://archive.org/details/howtodoeverythin0000duff }}\n* {{cite book |last1=Flanagan | first1= David | title= JavaScript: The Definitive Guide | edition= 5th | year= 2006 | publisher= [[O'Reilly Media|O'Reilly & Associates]] | isbn= 0-596-10199-6 | ref= harv}}\n* {{cite book |last1=Flanagan | first1= David | title= JavaScript: The Definitive Guide | edition= 6th | year= 2011 | publisher= [[O'Reilly Media|O'Reilly & Associates]] | isbn= 978-0-596-80552-4 | ref= harv}}\n* {{cite book | last=Goodman | first=Danny | author2=Eich, Brendan | title=JavaScript Bible | year=2001 | publisher=John Wiley & Sons | isbn=0-7645-3342-8 | url=https://archive.org/details/javascriptbible00dann }}\n* {{cite book | last=Goodman | first=Danny | author2=Markel, Scott | title=JavaScript and DHTML Cookbook | year=2003 | publisher=O'Reilly & Associates | isbn=0-596-00467-2 | url=https://archive.org/details/javascriptdhtmlc00good }}\n* {{cite book | last=Harris | first=Andy | title=JavaScript Programming for the Absolute Beginner | year=2001 | publisher=Premier Press | isbn=0-7615-3410-5}}\n* {{cite book | last=Haverbeke | first=Marijn | title=Eloquent JavaScript | year=2011 | publisher=No Starch Press|isbn=978-1-59327-282-1}}\n* {{cite book | last=Heinle | first=Nick | author2=Koman, Richard | title=Designing with JavaScript | year=1997 | publisher=O'Reilly & Associates | isbn=1-56592-300-6 | url=https://archive.org/details/designingwithjav00hein }}\n* {{cite book | last=Husted | first=Robert | last2=Kuslich | first2=JJ | title=Server-Side JavaScript: Developing Integrated Web Applications | edition=1st | year=1999| publisher=Addison-Wesley | isbn=0-201-43329-X}}\n* {{cite book | last=McDuffie | first=Tina Spain | title=JavaScript Concepts & Techniques: Programming Interactive Web Sites | year=2003 | publisher=Franklin, Beedle & Associates | isbn=1-887902-69-4}}\n* {{cite book | last=McFarlane | first=Nigel | title=Rapid Application Development with Mozilla | year=2003 | publisher=Prentice Hall Professional Technical References | isbn=0-13-142343-6 | url=https://archive.org/details/rapidapplication00mcfa }}\n* {{cite book | last=Powell | first=Thomas A. | author2=Schneider, Fritz | title=JavaScript: The Complete Reference | year=2001 | publisher=McGraw-Hill Companies | isbn=0-07-219127-9 | url=https://archive.org/details/javascriptcomple00powe_0 }}\n* {{cite book | last=Shelly | first=Gary B. | author2=Cashman, Thomas J. | author3=Dorin, William J. | author4= Quasney, Jeffrey J. | title=JavaScript: Complete Concepts and Techniques | year=2000 | publisher=Course Technology | location=Cambridge | isbn=0-7895-6233-2}}\n* {{cite book | last=Vander Veer | first=Emily A. | title=JavaScript For Dummies | edition=4th | year=2004 | publisher=Wiley Pub. | isbn=0-7645-7659-3}}\n* {{cite book | last=Watt | first=Andrew H. | author2=Watt, Jonathan A. | author3=Simon, Jinjer L. | title=Teach Yourself JavaScript in 21 Days | year=2002 | publisher=Pearson Education | isbn=0-672-32297-8 | url=https://archive.org/details/samsteachyoursel00jona_0 }}\n* {{cite book|last1= Zakas | first1= Nicholas C. | title= Professional JavaScript for Web Developers | edition= 3rd | year= 2012 | publisher= Wrox | isbn= 978-1-118-02669-4 }}\n{{Refend}}\n\n== External links ==\n{{sisterlinks|commons=Category:JavaScript|n=no|v=Topic:JavaScript|q=no|s=no|m=no|voy=no|species=no|mw=JavaScript}}\n{{Spoken Wikipedia|En-JavaScript.ogg|2013-08-20}}\n* [[Douglas Crockford]]'s [https://www.youtube.com/playlist?list=PL62E185BB8577B63D video lectures on JavaScript]\n* Douglas Crockford's [http://javascript.crockford.com/survey.html A Survey of the JavaScript Programming Language]\n* {{DMOZ|Computers/Programming/Languages/JavaScript/}}\n* [https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS/ List of languages that compile to JS]\n\n{{JavaScript}}\n{{Programming languages}}\n{{ECMAScript}}\n{{Web browsers}}\n{{NodeJs}}\n{{Authority control}}\n\n[[Category:JavaScript| ]]\n[[Category:American inventions]]\n[[Category:Articles with example JavaScript code]]\n[[Category:Cross-platform software]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Functional languages]]\n[[Category:Object-based programming languages]]\n[[Category:High-level programming languages]]\n[[Category:Programming languages created in 1995]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Prototype-based programming languages]]\n[[Category:Scripting languages]]\n[[Category:Web programming]]",
            "slug": "javascript",
            "date_updated": 1565241399100,
            "imported": "https://en.wikipedia.org/wiki/JavaScript"
        },
        {
            "title": "JavaScript",
            "text": "{{distinguish|Java (programming language)|Java (software platform)|Javanese script}}\n{{selfref|For the uses of JavaScript on Wikipedia, see [[Wikipedia:Javascript]].}}\n{{pp-pc1|small=yes}}\n{{short description|programming language}}\n\n{{Infobox programming language\n| name = JavaScript\n| logo = <!-- Do not add the unofficial logo, per [[Talk:JavaScript/Archive 5#Why is the unofficial logo present?]] -->\n| logo alt = \n| paradigm = [[Multi-paradigm]]: [[event-driven programming|event-driven]],{{Sfn|Flanagan|2011|pp =1–2}} [[functional programming|functional]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]] ([[prototype-based programming|prototype-based]])\n| designer = [[Brendan Eich]]\n| developer = [[Netscape|Netscape Communications Corporation]], [[Mozilla Foundation]], [[Ecma International]]\n| typing = [[Dynamic typing|Dynamic]], [[Duck typing|duck]]\n| implementations = [[V8 (JavaScript engine)|V8]], [[JavaScriptCore]], [[Rhino (JavaScript engine)|Rhino]], [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], [[Chakra (JScript engine)|Chakra]]\n| influenced = [[ActionScript]], [[AtScript]], [[CoffeeScript]], [[Dart (programming language)|Dart]], [[JScript .NET]], [[LiveScript]], [[Objective-J]], [[Opa (programming language)|Opa]], [[Perl 6]], [[QML]], [[TypeScript]]\n| license = \n| File extensions = {{flatlist|\n* <code>.js</code>\n* <code>.mjs</code><ref name=\"node.js ECMAScript Modules Specification\">{{cite web|url=https://github.com/nodejs/node-eps/blob/master/002-es-modules.md|title=nodejs/node-eps|website=GitHub}}</ref>\n}}\n| File format = \n| website = [https://developer.mozilla.org/en-US/docs/Web/JavaScript Mozilla]\n| wikibooks = JavaScript\n| year = {{start date and age|1995|12|04}}<ref name=\"press_release\">[https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html Press release announcing JavaScript], \"Netscape and Sun announce JavaScript\", PR Newswire, December 4, 1995</ref>\n| latest_release_version = ECMAScript 2018<ref name=\"auto\">{{cite web|url=https://www.ecma-international.org/publications/standards/Ecma-262.htm|title=Standard ECMA-262|publisher=Ecma International|date=2017-07-03}}</ref>\n| latest_release_date = {{start date and age|2018|6}}\n| latest_preview_version = ECMAScript 2019\n| latest_preview_date = \n| influenced_by = [[AWK]], [[C (programming language)|C]], [[HyperTalk]], [[Java (programming language)|Java]],<ref>{{cite web|title=\"Coders at Work: Reflections on the Craft of Programming\"|quote=\"Eich: The immediate concern at Netscape was it must look like Java.\"|url=https://books.google.com/books?id=nneBa6-mWfgC&pg=PA141&lpg=PA141&dq=The+immediate+concern+at+Netscape+was+it+must+look+like+Java.&source=bl&ots=gGvuIcRU5u&sig=OGPam0PUoNHEn9DA3OYrbWpQXX8&hl=en&sa=X&ved=2ahUKEwi53LL6nbvfAhUK7YMKHUX3CgIQ6AEwAHoECAUQAQ#v=onepage&q=The%20immediate%20concern%20at%20Netscape%20was%20it%20must%20look%20like%20Java.&f=false|accessdate=December 25, 2018}}</ref> [[Lua (programming language)|Lua]], [[Perl]], [[Python (programming language)|Python]], [[Scheme (programming language)|Scheme]], [[Self (programming language)|Self]] <!--True for first JavaScript? Or only ECMAScript – later JavaScript versions-->\n}}\n \n{{Infobox file format\n| name = JavaScript\n| logo = \n| screenshot = \n| caption = \n| extension = .js\n| mime = {{flatlist|\n* <code>application/javascript</code>\n* <code>text/javascript</code>&nbsp;(obsolete)<ref>{{cite web|url=https://tools.ietf.org/html/rfc4329#section-7.1|title=RFC 4329|publisher=IETF Tools|archive-url=https://web.archive.org/web/20190527135427/https://tools.ietf.org/html/rfc4329#section-7.1|archive-date=2019-05-27|access-date=27 May 2019|dead-url=no}}</ref>\n}}\n|_nomimecode = y\n| type code =\n| uniform type = com.netscape.javascript-source\n<ref>{{cite web\n| publisher = Apple Inc.\n| url = https://developer.apple.com/mac/library/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html\n| title = System-Declared Uniform Type Identifiers\n| work = Mac OS X Reference Library\n| accessdate = 2010-03-05}}</ref>\n| magic = \n| owner = Brendan Eich\n| released = \n| latest release version = \n| latest release date = \n| genre = [[Scripting language]]\n| container for = \n| contained by = \n| extended from = \n| extended to = \n| standard = \n}}\n{{JavaScriptSidebar}}\n\n'''JavaScript''' ({{IPAc-en|ˈ|dʒ|ɑː|v|ə|ˌ|s|k|r|ɪ|p|t}}),<ref>{{cite web | url= http://dictionary.reference.com/browse/javascript | title= JavaScript | publisher= William Collins Sons & Co | work= Collins English Dictionary – Complete & Unabridged 2012 Digital Edition | date= 2012 | accessdate= 21 August 2015}}</ref> often abbreviated as '''JS''', is a [[High-level programming language|high-level]], [[Interpreted language|interpreted]] [[scripting language]] that conforms to the [[ECMAScript]] specification. JavaScript has [[List of programming languages by type#Curly-bracket languages|curly-bracket syntax]], [[dynamic typing]], [[prototype-based programming|prototype-based]] [[object-oriented programming|object-orientation]], and [[first-class function]]s.\n\nAlongside [[HTML]] and [[CSS]], JavaScript is one of the core technologies of the [[World Wide Web]].<ref>{{cite book|last1=Flanagan|first1=David|title=JavaScript - The definitive guide|page=1|edition=6|quote=JavaScript is part of the triad of technologies that all Web developers must learn: HTML to specify the content of web pages, CSS to specify the presentation of web pages and JavaScript to specify the behaviour of web pages.}}</ref> JavaScript enables interactive [[web page]]s and is an essential part of [[web application]]s. The vast majority of [[website]]s use it,<ref name=deployedstats/> and major [[web browser]]s have a dedicated [[JavaScript engine]] to execute it.\n\nAs a multi-paradigm language, JavaScript supports [[Event-driven programming|event-driven]], [[functional programming|functional]], and [[imperative programming|imperative]] (including [[Object-oriented programming|object-oriented]] and [[Prototype-based programming|prototype-based]]) [[programming paradigm|programming style]]s. It has [[Application programming interface|APIs]] for working with text, [[Array data type|arrays]], dates, [[regular expression]]s, and the [[Document Object Model|DOM]], but the language itself does not include any [[Input/output|I/O]], such as [[computer network|networking]], [[data storage|storage]], or [[computer graphics|graphics]] facilities. It relies upon the host environment in which it is embedded to provide these features.\n\nInitially only implemented [[client-side]] in web browsers, JavaScript engines are now embedded in many other types of host software, including [[server-side]] in web servers and databases, and in non-web programs such as word processors and [[Portable Document Format|PDF]] software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.\n\nThe terms ''[[Vanilla software|Vanilla]] JavaScript'' and ''Vanilla JS'' refer to JavaScript not extended by any frameworks or additional libraries. Scripts written in Vanilla JS are plain JavaScript code.<ref>{{Cite web|url=http://vanilla-js.com/|title=Vanilla JS|website=vanilla-js.com|access-date=2017-12-15}}</ref><ref>{{Cite web|url=https://stackoverflow.com/questions/20435653/what-is-vanillajs#20435744|title=What is VanillaJS?|website=stackoverflow.com|access-date=2017-12-15}}</ref>\n\nAlthough there are similarities between JavaScript and [[Java (programming language)|Java]], including language name, [[Syntax (programming languages)|syntax]], and respective [[standard library|standard libraries]], the two languages are distinct and differ greatly in design. JavaScript was influenced by programming languages such as [[Self (programming language)|Self]] and [[Scheme (programming language)|Scheme]].<ref>\n{{cite web\n |title       = ECMAScript Language Overview\n |url         = http://www.ecmascript.org/es4/spec/overview.pdf\n |format      = PDF\n |page        = 4\n |date        = 2007-10-23\n |accessdate  = 2009-05-03\n |deadurl     = yes\n |archiveurl  = https://web.archive.org/web/20101223163429/http://www.ecmascript.org/es4/spec/overview.pdf\n |archivedate = 2010-12-23\n |df          = \n}}\n</ref> The [[JSON]] [[serialization]] format, used to store [[data structure]]s in [[computer file|files]] or transmit them across [[computer network|networks]], is based on JavaScript.<ref>{{cite web|title=Introducing JSON|url=https://json.org|accessdate=2019-05-25}}</ref>\n\n== History ==\n=== Beginnings at Netscape ===\nIn 1993, the [[National Center for Supercomputing Applications]] (NCSA), a unit of the [[University of Illinois at Urbana–Champaign|University of Illinois at Urbana-Champaign]], released [[Mosaic (web browser)|NCSA Mosaic]], the first popular graphical [[Web browser]], which played an important part in expanding the growth of the nascent [[World Wide Web]] beyond the [[NeXTSTEP]] niche where the [[WorldWideWeb]] had formed three years earlier. In 1994, a company called [[Netscape|Mosaic Communications]] was founded in [[Mountain View, California]] and employed many of the original NCSA Mosaic authors to create [[Netscape Navigator|Mosaic Netscape]]. However, it intentionally shared no code with NCSA Mosaic. The internal codename for the company's browser was [[Mozilla]], a portmanteau of \"Mosaic and Godzilla\".<ref name=\"google\">{{cite book|title= Marc Andreessen and Jim Clark: The Founders of Netscape|author= Payment, S.|year= 2007|publisher= Rosen Publishing Group|isbn= 978-1-4042-0719-6|url= http://books.google.co.uk/books?id=zyIvOn7sKCsC}}</ref> The first version of the Web browser, Mosaic Netscape 0.9, was released in late 1994. Within four months it had already taken three-quarters of the browser market and became the main web browser for the 1990s. To avoid trademark ownership problems with the NCSA, the browser was subsequently renamed Netscape Navigator in the same year, and the company took the name Netscape Communications. Netscape Communications realized that the Web needed to become more dynamic. [[Marc Andreessen]], the founder of the company, believed that [[HTML]] needed a \"glue language\" that was easy to use by Web designers and part-time programmers to assemble components such as images and plugins, where the code could be written directly in the Web page markup.\n\nIn 1995, Netscape Communications recruited [[Brendan Eich]] with the goal of embedding the [[Scheme (programming language)|Scheme]] programming language into its Netscape Navigator.<ref>{{cite web|url=http://speakingjs.com/es5/ch04.html|title=Chapter 4. How JavaScript Was Created}}</ref> Before he could get started, Netscape Communications collaborated with [[Sun Microsystems]] to include Sun's more static programming language, [[Java (programming language)|Java]], in Netscape Navigator so as to compete with [[Microsoft]] for user adoption of Web technologies and platforms.<ref>{{cite journal | last=Severance | first=Charles | date=February 2012 | title=JavaScript: Designing a Language in 10 Days | journal=Computer | volume=45 | issue=2 | pages=7–8 | publisher=IEEE Computer Society | url=http://www.computer.org/csdl/mags/co/2012/02/mco2012020007-abs.html | accessdate=23 March 2013 | doi=10.1109/MC.2012.57 }}</ref> Netscape Communications then decided that the scripting language they wanted to create would complement Java and should have a similar syntax, which excluded adopting other languages such as [[Perl]], [[Python (programming language)|Python]], [[Tcl|TCL]], or Scheme. To defend the idea of JavaScript against competing proposals, the company needed a prototype. Eich wrote one in 10 days, in May 1995.\n\nAlthough it was developed under the name Mocha, the language was officially called LiveScript when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed JavaScript when it was deployed in the Netscape Navigator 2.0 beta 3 in December.<ref name=\"press_release\" /><ref name=\"techvision\">{{cite web | archiveurl=https://web.archive.org/web/20080208124612/http://wp.netscape.com/comprod/columns/techvision/innovators_be.html | archivedate=2008-02-08 | title=TechVision: Innovators of the Net: Brendan Eich and JavaScript | publisher=web.archive.org | url=http://wp.netscape.com/comprod/columns/techvision/innovators_be.html }}</ref> The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized<ref>{{Citation|last=Fin JS|title=Brendan Eich - CEO of Brave|date=2016-06-17|url=https://www.youtube.com/watch?v=XOmhtfTrRxc&t=2m5s|accessdate=2018-02-07}}</ref> as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new Web programming language.\n\nThere is a common misconception that JavaScript was influenced by an earlier Web page scripting language developed by [[Openwave|Nombas]] named Cmm (not to be confused with the later [[C--]] created in 1997).<ref>{{cite web |url=http://archive.oreilly.com/pub/a/oreilly//news/languageposter_0504.html |title=The History of Programming Languages |publisher=O'Reilly Media |date=2004 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160712042618/http://archive.oreilly.com/pub/a/oreilly/news/languageposter_0504.html |archive-date=2016-07-12 |dead-url=yes |df= }}</ref><ref>{{cite web |url=http://media.wiley.com/product_data/excerpt/88/07645790/0764579088.pdf |title=What Is JavaScript? |publisher=Wiley |website=wiley.com |access-date=16 July 2016}}</ref> Brendan Eich, however, had never heard of Cmm before he created LiveScript. Nombas did pitch their embedded Web page scripting to Netscape, though Web page scripting was not a new concept, as shown by the [[ViolaWWW]] Web browser.<ref>{{cite web |url=http://www.brent-noorda.com/nombas/history/HistoryOfNombas.html#h.yal3k216ii2r |title=History of Nombas |last=Noorda |first=Brent |date=24 June 2010 |website=brent-noorda.com |access-date=16 July 2016}}</ref> Nombas later switched to offering JavaScript instead of Cmm in their ScriptEase product and was part of the TC39 group that standardized ECMAScript.<ref>{{cite web |url=https://brendaneich.com/2011/06/new-javascript-engine-module-owner/ |title=New JavaScript Engine Module Owner |last=Eich |first=Brendan |date=21 June 2011 |website=brendaneich.com |access-date=16 July 2016}}</ref>\n\n=== Server-side JavaScript ===\nIn December 1995, soon after releasing JavaScript for browsers, Netscape introduced an implementation of the language for [[server-side scripting]] with [[Netscape Enterprise Server]].<ref>{{cite web |url=http://docs.oracle.com/cd/E19957-01/816-6411-10/contents.htm |title=Server-Side JavaScript Guide |publisher=Netscape Communications Corporation |date=11 December 1998 |website=oracle.com |accessdate=2016-07-16|author=Netscape Communications Corporation}}</ref>\n\nSince 1996, the [[Internet Information Services|IIS]] web-server has supported Microsoft's implementation of server-side Javascript—[[JScript]]—in ASP and .NET pages.<ref>{{cite web|last1=Clinick|first1=Andrew|title=Introducing JScript .NET|url=https://msdn.microsoft.com/en-us/library/ms974588.aspx|website=Microsoft Developer Network|publisher=Microsoft|accessdate=10 April 2018|date=July 14, 2000|quote=[S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)}}</ref>\n\nSince the mid-2000s, additional [[List of server-side JavaScript implementations|server-side JavaScript]] implementations have been introduced, such as [[Node.js]] in 2009.<ref>{{cite web |url=http://readwrite.com/2009/12/17/server-side_javascript_back_with_a_vengeance/ |title=Server-Side JavaScript, Back with a Vengeance |date=17 December 2009 |website=readwrite.com |accessdate=2016-07-16|author=Mahemoff, Michael}}</ref>\n\n=== Adoption by Microsoft ===\nMicrosoft script technologies including [[VBScript]] and [[JScript]] were released in 1996. JScript, a [[Reverse engineering#Reverse engineering of software|reverse-engineered]] implementation of Netscape's JavaScript, was part of [[Internet Explorer 3]]. JScript was also available for server-side scripting in [[Internet Information Server]]. Internet Explorer 3 also included Microsoft's first support for CSS and various extensions to HTML, but in each case the implementation was noticeably different from that found in Netscape Navigator at the time.<ref name=\"O'Reilly-2001\">{{cite web |url=http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |title=JavaScript, How Did We Get Here? |last=Champeon |first=Steve |date=6 April 2001 |website=oreilly.com |access-date=16 July 2016 |archive-url=https://web.archive.org/web/20160719020828/http://archive.oreilly.com/pub/a/javascript/2001/04/06/js_history.html |archive-date=2016-07-19 |dead-url=yes |df= }}</ref><ref>{{cite web |url=http://news.microsoft.com/1996/05/29/microsoft-internet-explorer-3-0-beta-now-available/ |title=Microsoft Internet Explorer 3.0 Beta Now Available |publisher=Microsoft |date=29 May 1996 |website=microsoft.com |access-date=16 July 2016}}</ref> These differences made it difficult for designers and programmers to make a single website work well in both browsers, leading to the use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos that characterized these early years of the [[browser wars]].<ref>{{cite web |url=http://www.technologizer.com/2010/09/16/the-unwelcome-return-of-best-viewed-with-internet-explorer/ |title=The Unwelcome Return of \"Best Viewed with Internet Explorer\" |last=McCracken |first=Harry |date=16 September 2010 |website=technologizer.com |access-date=16 July 2016}}</ref> JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven Web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time.<ref name=\"O'Reilly-2001\" /> With the release of [[Internet Explorer 4]], Microsoft introduced the concept of [[Dynamic HTML]], but the differences in language implementations and the different and proprietary [[Document Object Model]]s remained and were obstacles to widespread take-up of JavaScript on the Web.<ref name=\"O'Reilly-2001\" />\n\n=== Standardization ===\nIn November 1996, Netscape submitted JavaScript to [[Ecma International|ECMA International]] to carve out a standard specification, which other browser vendors could then implement based on the work done at Netscape. This led to the official release of the language specification [[ECMAScript]] published in the first edition of the ECMA-262 standard in June 1997, with JavaScript being the most well known of the implementations. [[ActionScript]] and [[JScript]] were other well-known implementations of [[ECMAScript]].\n\nThe release of ECMAScript 2 in June 1998 continued the standards process cycle, conforming some modifications to the ISO/IEC 16262 international standard. ECMAScript 3 was released in December 1999 and is the modern-day baseline for JavaScript. The original ECMAScript 4 work led by Waldemar Horwat (then at Netscape, now at [[Google]]) started in 2000. [[Microsoft]] initially participated and implemented some proposals in their [[JScript .NET]] language.\n\nOver time it was clear that Microsoft had no intention of cooperating or implementing proper JavaScript in Internet Explorer, even though they had no competing proposal and they had a partial (and diverged at this point) implementation on the [[.NET]] server side. So by 2003, the original ECMAScript 4 work was mothballed.\n\nThe next major event was in 2005, with two major happenings in JavaScript's history. First, Brendan Eich and Mozilla rejoined Ecma International as a not-for-profit member and work started on [[ECMAScript for XML]] (E4X), the ECMA-357 standard, which came from ex-Microsoft employees at [[BEA Systems]] (originally acquired as Crossgain). This led to working jointly with [[Macromedia]] (later acquired by [[Adobe Systems]]), who were implementing E4X in ActionScript 3 (ActionScript 3 was a fork of original ECMAScript 4).\n\nSo, along with Macromedia, work restarted on ECMAScript 4 with the goal of standardizing what was in ActionScript 3. To this end, Adobe Systems released the ActionScript Virtual Machine 2, code named [[Tamarin (software)|Tamarin]], as an [[Open-source model|open source]] project. But Tamarin and ActionScript 3 were too different from web JavaScript to converge, as was realized by the parties in 2007 and 2008.\n\nAlas, there was still turmoil between the various players; [[Douglas Crockford]]—then at [[Yahoo!]]—joined forces with Microsoft in 2007 to oppose ECMAScript 4, which led to the ECMAScript 3.1 effort. The development of ECMAScript 4 was never completed, but that work influenced subsequent versions.<ref>{{cite web|url=http://www.ecmascript.org/docs.php|title=Documentation|last=|first=|date=|website=ecmascript.org|archive-url=https://web.archive.org/web/20110426141932/http://www.ecmascript.org/docs.php|archive-date=2011-04-26|dead-url=|access-date=16 July 2016|quote=development of a Fourth Edition was not completed, that work influenced Fifth Edition}}</ref>\n\nWhile all of this was happening, the open source and developer communities set to work to revolutionize what could be done with JavaScript. This community effort was sparked in 2005 when [[Jesse James Garrett]] released a white paper in which he coined the term [[Ajax (programming)|Ajax]], and described a set of technologies, of which JavaScript was the backbone, used to create web applications where data can be loaded in the background, avoiding the need for full page reloads and leading to more dynamic applications. This resulted in a renaissance period of JavaScript usage spearheaded by open source libraries and the communities that formed around them, with libraries such as [[Prototype JavaScript Framework|Prototype]], [[jQuery]], [[Dojo Toolkit]], [[MooTools]], and others being released.\n\nIn July 2008, the disparate parties on either side came together in Oslo. This led to the eventual agreement in early 2009 to rename ECMAScript 3.1 to ECMAScript 5 and drive the language forward using an agenda that is known as Harmony. ECMAScript 5 was finally released in December 2009.\n\nIn June 2011, ECMAScript 5.1 was released to fully align with the third edition of the ISO/IEC 16262 international standard. ECMAScript 2015 was released in June 2015. ECMAScript 2016 was released in June 2016. The current version is ECMAScript 2017, released in June 2017.<ref name=\"auto\"/>\n\n=== Later developments ===\nJavaScript has become one of the most popular programming languages on the Web. However, many professional programmers initially denigrated the language due to the perceived target audience of Web authors and other such \"amateurs\".<ref>{{cite web |url=http://www.crockford.com/javascript/javascript.html |title=JavaScript, The World's Most Misunderstood Programming Language |last=Crockford |first=Douglas |date=2001 |website=crockford.com |access-date=16 July 2016}}</ref> The advent of [[Ajax (programming)|Ajax]] returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive [[List of JavaScript libraries|frameworks and libraries]], improved JavaScript programming practices, and increased usage of JavaScript outside Web browsers, as seen by the proliferation of [[Server-side JavaScript]] platforms.\n\nIn January 2009, the [[CommonJS]] project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.<ref>{{cite web |url=https://arstechnica.com/web/news/2009/12/commonjs-effort-sets-javascript-on-path-for-world-domination.ars |title=CommonJS Effort Sets JavaScript on Path for World Domination |last=Kowal |first=Kris |date=1 December 2009 |website=arstechnica.com |access-date=16 July 2016}}</ref>\n\nWith the rise of [[single-page application]]s and JavaScript-heavy sites, it is increasingly being used as a compile target for [[source-to-source compiler]]s from both [[Dynamic typing|dynamic languages]] and [[Static typing|static languages]].\n\n== Trademark ==\n\"JavaScript\" is a [[trademark]] of [[Oracle Corporation]] in the United States.<ref>{{cite web | title=USPTO Copyright entry #75026640|url=http://tarr.uspto.gov/servlet/tarr?regser=serial&entry=75026640|publisher=USPTO}}</ref> It is used under license for technology invented and implemented by Netscape Communications and current entities such as the [[Mozilla Foundation]].<ref>{{cite web | title=Sun Trademarks|url=http://www.sun.com/suntrademarks/|publisher=Sun Microsystems|accessdate=2007-11-08|archiveurl=https://web.archive.org/web/20100528154600/http://www.sun.com/suntrademarks/|archivedate=28 May 2010}}</ref>\n\n== Features ==\nThe following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.\n\n=== Universal support ===\nAll popular modern Web browsers support JavaScript with built-in interpreters.\n\n=== Imperative and structured ===\nJavaScript supports much of the [[structured programming]] syntax from [[C (computer language)|C]] (e.g., <code>if</code> statements, <code>while</code> loops, <code>switch</code> statements, <code>do while</code> loops, etc.). One partial exception is [[scope (computer science)|scoping]]: JavaScript originally had only [[function scoping]] with <code>var</code>. ECMAScript 2015 added keywords <code>let</code> and <code>const</code> for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between [[Expression (computer science)|expressions]] and [[Statement (computer science)|statements]]. One syntactic difference from C is [[Defensive semicolon|automatic semicolon insertion]], which allows the semicolons that would normally terminate statements to be omitted.<ref name=\"Flanagan2006\">{{cite book|author=David Flanagan|title=JavaScript: The Definitive Guide: The Definitive Guide|url=https://books.google.com/books?id=2weL0iAfrEMC|date=17 August 2006|publisher=\"O'Reilly Media, Inc.\"|isbn=978-0-596-55447-7|page=16}}</ref>\n\n=== Dynamic ===\n; Typing:JavaScript is [[dynamic typing|dynamically typed]] like most other [[scripting language]]s. A [[type system|type]] is associated with a [[value (computer science)|value]] rather than an expression. For example, a [[Variable (programming)|variable]] initially bound to a number may be reassigned to a [[string (computer science)|string]].<ref>{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures|title=JavaScript data types and data structures - JavaScript &#124; MDN|date=2017-02-16|website=Developer.mozilla.org|accessdate=2017-02-24}}</ref>  JavaScript supports various ways to test the type of objects, including [[duck typing]].{{Sfn|Flanagan|2006|pp=176–178}}\n; Run-time evaluation: JavaScript includes an <code>[[eval]]</code> function that can execute statements provided as strings at run-time.\n\n=== Prototype-based (object-oriented) ===\nJavaScript is almost entirely [[object-based]]. In JavaScript, an [[Object (computer science)|object]] is an [[associative array]], augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (<code>obj.x&nbsp;=&nbsp;10</code>) and bracket notation (<code>obj['x']&nbsp;=&nbsp;10</code>). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a <code>for...in</code> loop.\n\nJavaScript has a small number of built-in objects, including <code>Function</code> and <code>Date</code>.\n\n; Prototypes: JavaScript uses [[prototype-based programming|prototypes]] where many other object-oriented languages use [[Class (computer science)|classes]] for [[Inheritance (computer science)|inheritance]].<ref>{{cite web | title=Inheritance and the prototype chain|url=https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Inheritance_and_the_prototype_chain|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref> It is possible to simulate many class-based features with prototypes in JavaScript.<ref>{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|page=83}}</ref>\n; Functions as object constructors: Functions double as object constructors, along with their typical role. Prefixing a function call with ''new'' will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the <code>Object</code> prototype).<ref>{{cite book|last=Haverbeke|first=Marijn|title=Eloquent JavaScript|year=2011|publisher=No Starch Press|isbn=978-1-59327-282-1|pages=95–97}}</ref> ECMAScript 5 offers the <code>Object.create</code> method, allowing explicit creation of an instance without automatically inheriting from the <code>Object</code> prototype (older environments can assign the prototype to <code>null</code>).<ref>{{cite web | last=Katz|first=Yehuda|title=Understanding \"Prototypes\" in JavaScript|url=http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/|accessdate=6 April 2013}}</ref> The constructor's <code>prototype</code> property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as <code>Array</code> or <code>Object</code>, also have prototypes that can be modified. While it is possible to modify the <code>Object</code> prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the <code>Object</code> prototype, and they may not expect the prototype to be modified.<ref>{{cite book|last=Herman|first=David|title=Effective JavaScript|year=2013|publisher=Addison-Wesley|isbn=978-0-321-81218-6|pages=125–127}}</ref>\n; Functions as methods<!--not sure where to classify this under-->: Unlike many object-oriented languages, there is no distinction between a function definition and a [[method (computer science)|method]] definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local ''this'' keyword is bound to that object for that invocation.\n\n=== Functional ===\nA [[Subroutine|function]] is [[first-class function|first-class]]; a function is considered to be an object. As such, a function may have properties and methods, such as <code>.call()</code> and <code>.bind()</code>.<ref>{{cite web | url=https://es5.github.com/#x15.3.4-toc | title=Properties of the Function Object | publisher=Es5.github.com | accessdate=2013-05-26}}</ref> A ''nested'' function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a [[Closure (computer programming)|lexical closure]]: The [[Scope (programming)#Lexical scoping vs. dynamic scoping|lexical scope]] of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.{{Sfn|Flanagan|2006|p=141}} JavaScript also supports [[anonymous function]]s.\n\n=== Delegative ===\nJavaScript supports implicit and explicit [[Delegation (object-oriented programming)|delegation]].\n\n; Functions as roles (Traits and Mixins): JavaScript natively supports various function-based implementations of [[Role-oriented programming|Role]]<ref>[http://peterseliger.blogspot.de/2014/04/the-many-talents-of-javascript.html#the-many-talents-of-javascript-for-generalizing-role-oriented-programming-approaches-like-traits-and-mixins The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins], Peterseliger.blogpsot.de, April 11, 2014.</ref> patterns like [[Traits (computer science)|Traits]]<ref>[http://soft.vub.ac.be/~tvcutsem/traitsjs/ Traits for JavaScript], 2010.</ref><ref>{{cite web|url=https://cocktailjs.github.io/ |title=Home &#124; CocktailJS |website=Cocktailjs.github.io |date= |accessdate=2017-02-24}}</ref> and [[Mixin]]s.<ref>Angus Croll, [http://javascriptweblog.wordpress.com/2011/05/31/a-fresh-look-at-javascript-mixins/ A fresh look at JavaScript Mixins], published May 31, 2011.</ref> Such a function defines additional behavior by at least one method bound to the <code>this</code> keyword within its <code>function</code> body. A Role then has to be delegated explicitly via <code>call</code> or <code>apply</code> to objects that need to feature additional behavior that is not shared via the prototype chain.\n; Object composition and inheritance: Whereas explicit function-based delegation does cover [[Object composition|composition]] in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus [[Inheritance (computer science)|inheritance]] in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.\n\n=== Miscellaneous ===\n; Run-time environment:JavaScript typically relies on a run-time environment (e.g., a [[Web browser]]) to provide objects and methods by which scripts can interact with the environment (e.g., a webpage [[Document Object Model|DOM]]). It also relies on the run-time environment to provide the ability to include/import scripts (e.g., [[HTML]] <code><nowiki><script></nowiki></code> elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes [[Message (computer science)|messages]] from a [[Queue (abstract data type)|queue]] one at a time. JavaScript calls a [[Subroutine|function]] associated with each new message, creating a [[call stack]] frame with the function's [[Parameter (computer programming)|arguments]] and [[local variable]]s. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the [[event loop]], described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's [[Concurrency (computer science)|concurrency model]] describes the event loop as [[Asynchronous I/O|non-blocking]]: program [[input/output]] is performed using [[Event (computing)|events]] and [[Callback (computer programming)|callback functions]]. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.<ref>{{cite web|url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop|title=Concurrency model and Event Loop|website=Mozilla Developer Network|accessdate=2015-08-28}}</ref>\n\n; Variadic functions<!--note: this is not a functional programming feature-->: An indefinite number of parameters can be passed to a function. The function can access them through [[formal parameter]]s and also through the local <code>arguments</code> object. [[Variadic functions]] can also be created by using the <code>[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind bind]</code> method.\n\n; Array and object literals: Like many scripting languages, arrays and objects ([[associative arrays]] in other languages) can each be created with a succinct shortcut syntax. In fact, these [[Object literal|literals]] form the basis of the [[JSON]] data format.\n\n; Regular expressions: JavaScript also supports [[regular expression]]s in a manner similar to [[Perl]], which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.<ref>{{cite book | last=Haverbeke | first=Marijn | title=Eloquent JavaScript | year=2011 | publisher=No Starch Press|isbn=978-1-59327-282-1|pages=139–149}}</ref>\n\n=== Vendor-specific extensions ===\nJavaScript is officially managed by [[Mozilla Foundation]], and new language features are added periodically. However, only some [[JavaScript engine]]s support these new features:\n* property getter and setter functions (supported by WebKit, Gecko, Opera,<ref>Robert Nyman, [http://robertnyman.com/2009/05/28/getters-and-setters-with-javascript-code-samples-and-demos/ Getters And Setters With JavaScript – Code Samples And Demos], Robertnyman.com, published 29 May 2009, accessed 2 January 2010.</ref> ActionScript, and Rhino)<ref>John Resig, [http://ejohn.org/blog/javascript-getters-and-setters/ JavaScript Getters and Setters], Ejohn.org, 18 July 2007, accessed 2 January 2010</ref>\n* conditional <code>catch</code> clauses\n* iterator protocol (adopted from [[Python (programming language)|Python]])\n* shallow [[generator (computer programming)|generators]]-[[coroutine]]s (adopted from Python)\n* [[List comprehension|array comprehensions]] and generator expressions (adopted from Python)\n* proper block scope via the <code>let</code> keyword\n* array and object destructuring (limited form of [[pattern matching]])\n* concise function expressions (<code>function(args) expr</code>)\n* [[ECMAScript for XML]] (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21<ref>{{cite web | title=E4X – Archive of obsolete content &#124; MDN|url=https://developer.mozilla.org/en-US/docs/Archive/Web/E4X|website=Mozilla Developer Network|publisher=Mozilla Foundation|date=Feb 14, 2014|accessdate=13 July 2014}}</ref>)\n\n== Syntax ==\n{{Main|JavaScript syntax}}\n\n=== Simple examples ===\n[[Variable (computer science)|Variables]] in JavaScript can be defined using either the <code>var</code>,<ref>{{cite web | url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/var | title=var – JavaScript – MDN | publisher=The [[Mozilla Developer Network]] | accessdate=22 December 2012}}</ref> <code>let</code><ref name=\"moz_let\">{{cite web |title=let |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_let}}</ref> or <code>const</code><ref name=\"moz_const\">{{cite web |title=const |url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const |website=MDN web docs |publisher=Mozilla |accessdate=27 June 2018 |ref=moz_const}}</ref> keywords.\n\n<syntaxhighlight lang=\"javascript\">\nvar x; // declares the variable x and assigns to it the special value \"undefined\" (not to be confused with an undefined value)\nvar y = 2; // declares the variable y and assigns to it the value 2\nvar z = \"Hello, World!\"; // declares the variable z and assigns to it a string containing \"Hello, World!\"\n</syntaxhighlight>\n\nNote the [[Comment (computer programming)|comments]] in the example above, all of which were preceded with two [[Slash (punctuation)|forward slashes]].\n\nThere is no built-in [[Input/output]] functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:<ref>{{cite web | url=http://www.ecma-international.org/ecma-262/5.1/#sec-4 | title=ECMAScript Language Specification – ECMA-262 Edition 5.1|publisher=[[Ecma International]] | accessdate=22 December 2012}}</ref>\n<blockquote>indeed, there are no provisions in this specification for input of external data or output of computed results.</blockquote>\nHowever, most runtime environments have a <code>console</code> object<ref>{{cite web | title=console|url=https://developer.mozilla.org/en-US/docs/DOM/console|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref> that can be used to print output. Here is a minimalist [[Hello World program]] in JavaScript:\n\n<syntaxhighlight lang=\"javascript\">\nconsole.log(\"Hello World!\");\n</syntaxhighlight>\n\nA simple [[Recursion (computer science)|recursive]] function:\n\n<syntaxhighlight lang=\"javascript\">\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;  // 0! = 1\n    }\n    return n * factorial(n - 1);\n}\n\nfactorial(3); // returns 6\n</syntaxhighlight>\n\nAn [[anonymous function]] (or lambda):\n\n<syntaxhighlight lang=\"javascript\">\nfunction counter() {\n    var count = 0;\n    return function() {\n        return ++count;\n    };\n}\n\nvar closure = counter();\nclosure(); // returns 1\nclosure(); // returns 2\nclosure(); // returns 3\n</syntaxhighlight>\n\nThis example shows that, in JavaScript, [[Closure (computer programming)|function closures]] capture their non-local variables by reference.\n\nArrow functions were first introduced in [[ECMAScript#6th Edition - ECMAScript 2015|6th Edition - ECMAScript 2015]] . They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous in nature; a variable is needed to refer to them in order to invoke them after their creation.\n\nExample of arrow function:\n\n<syntaxhighlight lang=\"javascript\">\n// Arrow functions let us omit the `function` keyword. Here `long_example`\n// points to an anonymous function value.\nconst long_example = (input1, input2) => {\n    console.log(\"Hello, World!\");\n    const output = input1 + input2;\n    return output;\n};\n\n// Arrow functions also let us automatically return the expression to the right\n// of the arrow (here `input + 5`), omitting braces and the `return` keyword.\nconst short_example = input => input + 5;\n\nlong_example(2, 3); // Prints \"Hello, World!\" and returns 5.\nshort_example(2);   // Returns 7.\n</syntaxhighlight>\n\nIn JavaScript, [[Object (computer science)|objects]] are created in the same way as functions; this is known as a [[function object]].\n\nObject example:\n<syntaxhighlight lang=\"javascript\">\nfunction Ball(r) {\n    this.radius = r; // the radius variable is local to the ball object\n    this.area = pi*r**2;\n    this.show = function(){ // objects can contain functions\n        drawCircle(r); // references a circle drawing function\n    }\n}\nvar myBall = new Ball(5); // creates a new instance of the ball object with radius 5\nmyBall.show(); // this instance of the ball object has the show function performed on it\n</syntaxhighlight>\n\n[[Variadic function]] demonstration (<code>arguments</code> is a special [[variable (programming)|variable]]):<ref>{{cite web | title=arguments|url=https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments|work=Mozilla Developer Network|publisher=[[Mozilla]]|accessdate=6 April 2013}}</ref>\n\n<syntaxhighlight lang=\"javascript\">\nfunction sum() {\n    var x = 0;\n    for (var i = 0; i < arguments.length; ++i) {\n        x += arguments[i];\n    }\n    return x;\n}\nsum(1, 2); // returns 3\nsum(1, 2, 3); // returns 6\n</syntaxhighlight>\n\n[[Immediately-invoked function expression]]s are often used to create modules; before ECMAScript 2015 there was no built-in module construct in the language. Modules allow gathering properties and methods in a namespace and making some of them private:\n\n<syntaxhighlight lang=\"javascript\">\nvar counter = (function () {\n    var i = 0; // private property\n\n    return {   // public methods\n        get: function () {\n            alert(i);\n        },\n        set: function (value) {\n            i = value;\n        },\n        increment: function () {\n            alert(++i);\n        }\n    };\n})(); // module\n\ncounter.get();       // shows 0\ncounter.set(6);\ncounter.increment(); // shows 7\ncounter.increment(); // shows 8\n</syntaxhighlight>\n\nExporting and Importing modules in javascript<ref>{{cite web |title=Import & Export Modules in javascript |url=https://learnersbucket.com/tutorials/es6/es6-modules/ |website=Learnersbucket.com |accessdate=23 April 2019}}</ref>\n\nExport example:\n<syntaxhighlight lang=\"javascript\">\n/* mymodule.js */\n// This function remains private, as it is not exported\nlet sum = (a, b) => {\n    return a + b;\n}\n\n// Export variables\nexport var name = 'Alice';\nexport let age = 23;\n\n// Export named functions\nexport function add(num1, num2){\n  return num1 + num2;\n}\n\n// Export class\nexport class Multiplication {\n    constructor(num1, num2) {\n       this.num1 = num1;\n       this.num2 = num2;\n    }\n\n    add() {\n        return sum(this.num1, this.num2);\n    }\n}\n</syntaxhighlight>\n\nImport example:\n<syntaxhighlight lang=\"javascript\">\n// Import one property\nimport { add } from './mymodule.js';\n\nconsole.log(add(1, 2)); // 3\n\n// Import multiple properties\nimport { name, age } from './mymodule.js';\nconsole.log(name, age);\n//> \"Alice\", 23\n\n// Import all properties from a module\nimport * from './module.js'\nconsole.log(name, age);\n//> \"Alice\", 23\nconsole.log(add(1,2));\n//> 3\n</syntaxhighlight>\n\n=== More advanced example ===\nThis sample code displays various JavaScript features.\n<!-- Don't try to standardize any styling in this example—its purpose is to showcase language syntax, not provide some standard role model. -->\n\n<syntaxhighlight lang=\"javascript\">\n/* Finds the lowest common multiple (LCM) of two numbers */\nfunction LCMCalculator(x, y) { // constructor function\n  var checkInt = function(x) { // inner function\n    if (x % 1 !== 0) {\n      throw new TypeError(x + \"is not an integer\"); // var a =  mouseX\n    };\n\n    return x\n  }\n  this.a = checkInt(x)\n    //   semicolons   ^^^^  are optional, a newline is enough\n  this.b = checkInt(y);\n\n}\n// The prototype of object instances created by a constructor is\n// that constructor's \"prototype\" property.\nLCMCalculator.prototype = { // object literal\n  constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately\n  gcd: function() { // method that calculates the greatest common divisor\n    // Euclidean algorithm:\n    var a = Math.abs(this.a),\n      b = Math.abs(this.b),\n      t;\n    if (a < b) {\n      // swap variables\n      // t = b; b = a; a = t;\n      [a, b] = [b, a]; // swap using destructuring assignment (ES6)\n    }\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n    // Only need to calculate GCD once, so \"redefine\" this method.\n    // (Actually not redefinition—it's defined on the instance itself,\n    // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd.\n    // Note that this leads to a wrong result if the LCMCalculator object members \"a\" and/or \"b\" are altered afterwards.)\n    // Also, 'gcd' === \"gcd\", this['gcd'] === this.gcd\n    this['gcd'] = function() {\n      return a;\n    };\n    return a;\n  },\n  // Object property names can be specified by strings delimited by double (\") or single (') quotes.\n  lcm: function() {\n    // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.\n    // not using |this.a*this.b| to avoid FP precision issues\n    var lcm = this.a / this.gcd() * this.b;\n    // Only need to calculate lcm once, so \"redefine\" this method.\n    this.lcm = function() {\n      return lcm;\n    };\n    return lcm;\n  },\n  toString: function() {\n    return \"LCMCalculator: a = \" + this.a + \", b = \" + this.b;\n  }\n};\n\n// Define generic output function; this implementation only works for Web browsers\nfunction output(x) {\n  document.body.appendChild(document.createTextNode(x));\n  document.body.appendChild(document.createElement('br'));\n}\n\n// Note: Array's map() and forEach() are defined in JavaScript 1.6.\n// They are used here to demonstrate JavaScript's inherent functional nature.\n[\n  [25, 55],\n  [21, 56],\n  [22, 58],\n  [28, 56]\n].map(function(pair) { // array literal + mapping function\n    return new LCMCalculator(pair[0], pair[1]);\n  }).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\"\n  .forEach(printResult);\n\nfunction printResult(obj) {\n  output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm());\n}\n</syntaxhighlight>\n\nThe following output should be displayed in the browser window.\n<syntaxhighlight lang=\"html4strict\">\nLCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56\nLCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168\nLCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275\nLCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638\n</syntaxhighlight>\n\n== Use in Web pages ==\n{{See also|Dynamic HTML|Ajax (programming)}}\n\n{{as of|2017|May}} 94.5% of 10 million most popular web pages used JavaScript.<ref name=deployedstats>{{cite web|url=https://w3techs.com/technologies/details/cp-javascript/all/all|title=Usage Statistics of JavaScript for Websites, March 2018|website=w3techs.com}}</ref> The most common use of JavaScript is to add client-side behavior to [[HTML]] pages, also known as [[Dynamic HTML]] (DHTML). Scripts are embedded in or included from [[HTML]] pages and interact with the [[Document Object Model]] (DOM) of the page. Some simple examples of this usage are:\n\n* Loading new page content or submitting data to the server via [[Ajax (programming)|Ajax]] without reloading the page (for example, a social network might allow the user to post status updates without leaving the page).\n* Animation of page elements, fading them in and out, resizing them, moving them, etc.\n* Interactive content, for example games, and playing audio and video.\n* [[Data validation|Validating]] input values of a [[Form (HTML)|Web form]] to make sure that they are acceptable before being submitted to the server.\n* Transmitting information about the user's reading habits and browsing activities to various websites. Web pages frequently do this for [[Web analytics]], [[ad tracking]], [[personalization]] or other purposes.\n\nJavaScript code can run locally in a user's browser (rather than on a remote server), increasing the application's overall responsiveness to user actions. JavaScript code can also detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as [[Gmail]] take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.\n\nA [[JavaScript engine]] (also known as JavaScript interpreter or JavaScript implementation) is an [[interpreter (computing)|interpreter]] that interprets JavaScript [[source code]] and executes the [[computer program|script]] accordingly. The first JavaScript engine was created by Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named [[SpiderMonkey (JavaScript engine)|SpiderMonkey]], is implemented in [[C (programming language)|C]]. It has since been updated (in JavaScript 1.5) to conform to ECMAScript 3. The [[Rhino (JavaScript engine)|Rhino]] engine, created primarily by Norris Boyd (formerly at Netscape, now at Google) is a JavaScript implementation in [[Java (programming language)|Java]]. Rhino, like SpiderMonkey, is ECMAScript 3 compliant.\n\nA Web browser is the most common host environment for JavaScript. However, a Web browsers does not have to execute JavaScript code. (For example, [[Text-based web browser|text-based browsers]] have no JavaScript engines; and users of other browsers may disable scripts through a preference or [[Browser extension|extension]].)\n\nA Web browser typically creates \"host objects\" to represent the DOM in JavaScript. The [[Web server]] is another common host environment. A [[Server-side JavaScript|JavaScript Web server]] would typically expose host objects representing [[HTTP]] request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate Web pages.\n\nJavaScript is the only language that the most popular browsers share support for and has inadvertently become a [[target language (computing)|target language]] for frameworks in other languages.<ref name=\"computerworld\">{{cite web|url=http://www.computerworld.com.au/article/255293/-z_programming_languages_javascript|title=The A-Z of Programming Languages: JavaScript|last=Hamilton|first=Naomi|date=2008-07-31|publisher=computerworld.com.au}}</ref> The increasing speed of JavaScript engines has made the language a feasible compilation target, despite the performance limitations inherent to its dynamic nature.\n\n=== Example script ===\nBelow is a minimal example of a standards-conforming Web page containing JavaScript (using [[HTML 5]] syntax) and the DOM:\n\n<syntaxhighlight lang=\"html5\">\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Example</title>\n  </head>\n  <body>\n    <button id=\"hellobutton\">Hello</button>\n    <script>\n        document.getElementById('hellobutton').onclick = function() {\n            alert('Hello world!');                     // Show a dialog\n            var myTextNode = document.createTextNode('Some new words.');\n            document.body.appendChild(myTextNode);     // Append \"Some new words\" to the page\n        };\n    </script>\n  </body>\n</html>\n</syntaxhighlight>\n\n=== Compatibility considerations ===\n{{Main|Web interoperability}}\n\nBecause JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.\n\nThe DOM interfaces are officially defined by the [[World Wide Web Consortium|W3C]] in a standardization effort separate from JavaScript. The implementation of these DOM interfaces differ between web browsers.\n\nJavaScript authors can deal with these differences by writing standards-compliant code that can be executed correctly by most browsers. Failing that, they can write code that behaves differently in the absence of certain browser features.<ref>{{cite web|url=http://www.quirksmode.org/js/support.html|title=Javascript - Object detection|date=|website=Quirksmode.org|accessdate=2017-02-24}}</ref> Authors may also find it practical to detect what browser is running, as two browsers may implement the same feature with differing behavior.<ref>Peter-Paul Koch, [http://www.evolt.org/node/23335 Mission Impossible – mouse position]</ref><ref>{{cite web|url=http://www.quirksmode.org/js/detect.html|title=JavaScript - Browser detect|date=|website=Quirksmode.org|accessdate=2017-02-24}}</ref>  Libraries and toolkits that take browser differences into account are also useful to programmers.\n\nFurthermore, scripts may not work for some users. For example, a user may:\n\n* use an old or rare browser with incomplete or unusual DOM support;\n* use a [[Personal digital assistant|PDA]] or [[mobile phone]] browser that cannot execute JavaScript;\n* have JavaScript execution disabled as a security precaution;\n* use a speech browser due to, for example, a visual disability.\n\nTo support these users, Web authors can try to create pages that [[Fault-tolerant system|degrade gracefully]] on user agents (browsers) that do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. Some sites use the HTML <code><noscript></code> tag, which contains alt content if JS is disabled. An alternative approach that many{{Howmany|date=June 2018}} find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled.\n<ref>{{cite web|url=https://www.smashingmagazine.com/2009/04/progressive-enhancement-what-it-is-and-how-to-use-it/|title=Progressive Enhancement: What It Is, And How To Use It?|date=|website=Smashingmagazine.com|accessdate=2018-10-20}}</ref> This is known as [[progressive enhancement]].\n\n== Security ==\n{{See also|Browser security}}\n\nJavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a [[Sandbox (computer security)|sandbox]] in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the [[same-origin policy]]: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.\n\nThere are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).<ref>{{cite web | url=http://www.adsafe.org/ | title=Making JavaScript Safe for Advertising | publisher=ADsafe | accessdate=2013-05-26}}</ref><ref>{{cite web | url=https://code.google.com/p/es-lab/wiki/SecureEcmaScript | title=Secure ECMA Script (SES) | publisher=Code.google.com | accessdate=2013-05-26}}</ref> [[Caja project|Caja]] is another project for safe embedding and isolation of third-party JavaScript and HTML.\n\n[[Content Security Policy]] is the main intended method of ensuring that only trusted code is executed on a Web page.\n\n{{See also|Content Security Policy}}\n\n=== Cross-site vulnerabilities ===\n{{Main|Cross-site scripting|Cross-site request forgery}}\n\nA common JavaScript-related security problem is [[cross-site scripting]] (XSS), a violation of the [[same-origin policy]]. XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use ''HTML escaping'' whenever displaying untrusted data.\n\nSome browsers include partial protection against ''reflected'' XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.\n\nXSS vulnerabilities can also occur because of implementation mistakes by browser authors.<ref>{{cite web|url=http://www.mozillazine.org/talkback.html?article=4392 |title=Mozilla Cross-Site Scripting Vulnerability Reported and Fixed - MozillaZine Talkback |website=Mozillazine.org |date= |accessdate=2017-02-24}}</ref>\n\nAnother cross-site vulnerability is [[cross-site request forgery]] (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.\n\n\"JavaScript hijacking\" is a type of CSRF attack in which a <code><nowiki><script></nowiki></code> tag on an attacker's site exploits a page on the victim's site that returns private information such as [[JSON]] or JavaScript. Possible solutions include:\n\n* requiring an authentication token in the [[POST (HTTP)|POST]] and [[GET (HTTP)|GET]] parameters for any response that returns private information.\n\n=== Misplaced trust in the client ===\nDevelopers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:\n* Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be [[obfuscated code|obfuscated]], but obfuscation can be reverse-engineered.\n* JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.\n* Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.<ref>{{cite journal\n |title       = Right-click \"protection\"? Forget about it\n |date        = 2008-06-17\n |url         = http://blog.anta.net/2008/06/17/right-click-%e2%80%9cprotection%e2%80%9d-forget-about-it/\n |issn        = 1797-1993\n |accessdate  = 2008-06-17\n |deadurl     = yes\n |archiveurl  = https://web.archive.org/web/20110809195359/http://blog.anta.net/2008/06/17/right-click-%E2%80%9Cprotection%E2%80%9D-forget-about-it/\n |archivedate = 2011-08-09\n |df          = \n}}</ref>\n* It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.<ref>{{cite web |last1=Rehorik |first1=Jan |title=Why You Should Never Put Sensitive Data in Your JavaScript |url=https://www.serviceobjects.com/blog/why-you-should-never-put-sensitive-data-in-your-javascript/ |website=ServiceObjects Blog |publisher=ServiceObjects |accessdate=3 June 2019}}</ref>\n\n=== Misplaced trust in developers ===\nPackage management systems such as [[Npm (software)|npm]] and [[Bower (software)|Bower]] are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developer's program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at-least one known vulnerability.<ref name=\"jslibs\">\n{{cite journal\n | title = Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\n | date = 2016-12-21\n | url = http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf\n | accessdate = 2017-02-22\n | journal = \n | archive-url = https://web.archive.org/web/20170329045344/http://www.ccs.neu.edu/home/arshad/publications/ndss2017jslibs.pdf\n | archive-date = 2017-03-29\n | dead-url = yes\n | df = \n }}\n</ref> \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"<ref name=\"jslibs\"/> Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from [[Npm (software)|npm]]. This caused all tens of thousands of programs and websites depending upon his libraries to break.<ref>Quartz, [https://qz.com/646467/how-one-programmer-broke-the-internet-by-deleting-a-tiny-piece-of-code/ How one programmer broke the internet by deleting a tiny piece of code]</ref><ref>SC Magazine UK, [https://www.scmagazineuk.com/developers-11-lines-of-deleted-code-breaks-the-internet/article/532050/ Developer's 11 lines of deleted code 'breaks the internet']</ref>\n\n=== Browser and plugin coding errors ===\nJavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as [[buffer overflow]]s. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's [[API]] with superuser privileges.\n\nThese flaws have affected major browsers including Firefox,<ref>Mozilla Corporation, [https://www.mozilla.org/security/announce/2006/mfsa2006-38.html Buffer overflow in crypto.signText()]</ref> Internet Explorer,<ref>{{cite web|last1=Festa |first1=Paul |title=Buffer-overflow bug in IE |url=http://news.com.com/2100-1001-214620.html |archive-url=https://web.archive.org/web/20021225190522/http://news.com.com/2100-1001-214620.html |dead-url=yes |archive-date=December 25, 2002 |website=[[CNET]] |date=August 19, 1998 |accessdate= |df= }}</ref> and Safari.<ref>SecurityTracker.com, [http://securitytracker.com/alerts/2006/Mar/1015713.html Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files]</ref>\n\nPlugins, such as video players, [[Adobe Flash#Flash client security|Adobe Flash]], and the wide range of [[ActiveX]] controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).<ref>SecurityFocus, [http://www.securityfocus.com/bid/19030/info Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability]</ref><ref>Fusion Authority, [http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm Macromedia Flash ActiveX Buffer Overflow] {{webarchive|url=https://web.archive.org/web/20110813160055/http://www.fusionauthority.com/security/3234-macromedia-flash-activex-buffer-overflow.htm |date=2011-08-13 }}</ref>\n\nIn Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.<ref>{{cite web|author= |url=http://blogs.msdn.com/ie/archive/2006/02/09/528963.aspx |title=Protected Mode in Vista IE7 – IEBlog |website=Blogs.msdn.com |date=2006-02-09 |accessdate=2017-02-24}}</ref> [[Google Chrome]] similarly confines its page renderers to their own \"sandbox\".\n\n=== Sandbox implementation errors ===\nWeb browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.\n\nIncorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer<ref>US CERT, [https://www.kb.cert.org/vuls/id/713878 Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame]</ref> and Firefox.<ref>Mozilla Foundation, [https://www.mozilla.org/security/announce/2005/mfsa2005-41.html Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides]</ref> In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.<ref>Microsoft Corporation, [https://technet.microsoft.com/en-us/library/bb457150.aspx Changes to Functionality in Microsoft Windows XP Service Pack 2: Part 5: Enhanced Browsing Security]</ref>\n\n[[Microsoft Windows]] allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: [[Windows Script Host]]). This makes JavaScript (like [[VBScript]]) a theoretically viable vector for a [[Trojan horse (computing)|Trojan horse]], although JavaScript Trojan horses are uncommon in practice.<ref>For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, [http://www.symantec.com/security_response/writeup.jsp?docid=2003-100111-0931-99 JS.Seeker.K]</ref>{{failed verification|date=March 2017}}\n\n=== Hardware vulnerabilities ===\nIn 2015, a JavaScript-based proof-of-concept implementation of a [[rowhammer]] attack was described in a paper by security researchers.<ref>{{cite arxiv | eprint = 1507.06955 | title = Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript | date = 2015-07-24 | last1 = Gruss | first1 = Daniel | last2 = Maurice | first2 = Clémentine | last3 = Mangard | first3 = Stefan | class = cs.CR }}</ref><ref>{{cite news|publisher=Motherboard|title=Rowhammer.js Is the Most Ingenious Hack I've Ever Seen|first=Alix|last=Jean-Pharuns|date=2015-07-30|url=https://motherboard.vice.com/en_us/article/9akpwz/rowhammerjs-is-the-most-ingenious-hack-ive-ever-seen}}</ref><ref>{{cite web|website=Ars Technica|title=DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript|first=Dan|last=Goodin|date=2015-08-04|url=https://arstechnica.com/information-technology/2015/08/dram-bitflipping-exploit-for-attacking-pcs-just-add-javascript/}}</ref><ref>{{cite web\n | url = http://www.slate.com/articles/technology/bitwise/2015/07/rowhammer_security_exploit_why_a_new_security_attack_is_truly_terrifying.html\n | title = Rowhammer security exploit: Why a new security attack is truly terrifying\n | date = {{date|2015-07-28|mdy}} | accessdate = {{date|2015-07-29|mdy}}\n | author = David Auerbach | website = slate.com\n}}</ref>\n\nIn 2017, a JavaScript-based attack via browser was demonstrated that could bypass [[Address space layout randomization|ASLR]]. It's called \"ASLR⊕Cache\" or AnC.<ref>[https://www.vusec.net/projects/anc/ AnC] VUSec, 2017</ref><ref>[https://arstechnica.com/security/2017/02/new-aslr-busting-javascript-is-about-to-make-drive-by-exploits-much-nastier/ New ASLR-busting JavaScript is about to make drive-by exploits much nastier] Ars Technica, 2017</ref>\n\n== Uses outside Web pages ==\nIn addition to Web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own [[object model]] that provides access to the host environment. The core JavaScript language remains mostly the same in each application.\n\n=== Embedded scripting language ===\n* Google's [[Google Chrome|Chrome]] extensions, [[Opera (web browser)|Opera]]'s extensions, Apple's [[Safari (web browser)|Safari 5]] extensions, Apple's [[Dashboard (Mac OS)|Dashboard Widgets]], Microsoft's [[Microsoft Gadgets|Gadgets]], [[Yahoo! Widgets]], [[Google Desktop#Gadgets and plug-ins|Google Desktop Gadgets]], and [[Serence]] [[Klipfolio]] are implemented using JavaScript.\n* The [[MongoDB]] database accepts queries written in JavaScript. [[MongoDB]] and [[NodeJS]] are the core components of [[MEAN (software bundle)|MEAN]]: a [[solution stack]] for creating Web applications using just JavaScript.\n* The [[Clusterpoint]] database accept queries written in JS/SQL, which is a combination of [[SQL]] and JavaScript. [[Clusterpoint]] has built-in computing engine that allows execution of JavaScript code right inside the [[distributed database]].\n* Adobe's [[Adobe Acrobat#Security|Acrobat and Adobe Reader]] support JavaScript in [[Portable Document Format|PDF]] files.<ref>{{cite web | url=https://www.adobe.com/devnet/acrobat/javascript.html | accessdate=2009-08-18 | title= JavaScript for Acrobat}}</ref>\n* Tools in the [[Adobe Creative Suite]], including [[Adobe Photoshop|Photoshop]], [[Adobe Illustrator|Illustrator]], [[Adobe After Effects|After Effects]], [[Adobe Dreamweaver|Dreamweaver]], and [[InDesign]], allow scripting through JavaScript.\n* [[LibreOffice]], an office application suite, allows JavaScript to be used as a scripting language.\n* The visual programming language [[Max (software)|Max]], released by Cycling '74, offers a JavaScript model of its environment for use by developers. It allows users to reduce visual clutter by using an object for a task rather than many.\n* Apple's Logic Pro X digital audio workstation (DAW) software can create custom MIDI effects plugins using JavaScript.<ref>{{cite web|url=https://www.apple.com/logic-pro/in-depth/|title=Logic Pro X|last=|first=|date=|website=Apple|publisher=Apple, Inc.|access-date=January 31, 2017}}</ref>\n* The [[Unity (game engine)|Unity]] game engine supported a modified version of JavaScript for scripting via Mono until 2017.<ref>{{Cite news|url=https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/|title=UnityScript's long ride off into the sunset – Unity Blog|work=Unity Technologies Blog|access-date=2018-10-14|language=en-US}}</ref>\n* [[DX Studio]] (3D engine) uses the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] implementation of JavaScript for game and simulation logic.<ref>{{cite web | url=http://www.dxstudio.com/features_tech.aspx\n| title=Technical Specification\n| publisher=dxstudio.com\n| accessdate=2009-10-20\n}}</ref>\n* [[Maxwell Render]] ([[Rendering (computer graphics)|rendering]] software) provides an ECMA standard based scripting engine for tasks automation.<ref>THINK! The Maxwell Render Resourcer Center, [http://think.maxwellrender.com/scripting_references-269.html Scripting References] {{Webarchive|url=https://web.archive.org/web/20111102200134/http://think.maxwellrender.com/scripting_references-269.html |date=2011-11-02 }}</ref>\n* [[Google Apps Script]] in [[Google Spreadsheets]] and [[Google Sites]] allows users to create custom formulas, automate repetitive tasks and also interact with other Google products such as Gmail.<ref>[[Google Apps Script]], [https://www.google.com/script/start/ Google Apps Script]</ref>\n* Many [[Internet Relay Chat clients|IRC clients]], like [[ChatZilla]] or [[XChat]], use JavaScript for their scripting abilities.<ref>{{cite web | title=ChatZilla! Frequently Asked Questions – 4.5. How do I write scripts?|url=http://chatzilla.hacksrus.com/faq/#scripts|publisher=Chatzilla.hacksrus.com|accessdate=11 February 2011}}</ref><ref>{{cite web|title=Xcdscript |url=http://unborn.ludost.net/xcdscript/ |accessdate=11 February 2011 |deadurl=yes |archiveurl=https://web.archive.org/web/20110501061348/http://unborn.ludost.net/xcdscript/ |archivedate= 1 May 2011 |df= }}</ref>\n* [[RPG Maker]] MV uses JavaScript as its scripting language.<ref>{{cite web | url=http://www.rpgmakerweb.com/products/programs/rpg-maker-mv | accessdate=28 August 2015 | title=RPG Maker MV &#124; RPG Maker &#124; Make Your Own Games!}}</ref>\n* The text editor [[UltraEdit]] uses JavaScript 1.7 as internal scripting language, introduced with version 13 in 2007.\n\n=== Scripting engine ===\n* Microsoft's [[Active Scripting]] technology supports [[JScript]] as a scripting language.<ref name=\"VersionInformation\">{{cite web | url=http://msdn.microsoft.com/en-us/library/s4esdbwz(v=VS.94).aspx | title=Version Information (JavaScript) | publisher=Msdn.microsoft.com | accessdate=2013-05-26}}</ref>\n* [[Java (programming language)|Java]] introduced the <code>javax.script</code> package in version 6 that includes a JavaScript implementation based on [[Rhino (JavaScript engine)|Mozilla Rhino]]. Thus, Java applications can host scripts that access the application's variables and objects, much like Web browsers host scripts that access a webpage's [[Document Object Model]] (DOM).<ref>{{cite web | url=http://java.sun.com/javase/6/webnotes/index.html#scripting | title=javax.script release notes | publisher=Java.sun.com | accessdate=2009-05-19}}</ref>{{Sfn|Flanagan|2006|pp=214 et seq}}\n* The [[Qt (toolkit)|Qt]] C++ toolkit includes a <code>QtScript</code> module to interpret JavaScript, analogous to Java's <code>javax.script</code> package.<ref>Nokia Corporation, [http://doc.qt.nokia.com/4.6/qtscript.html QtScript Module] {{webarchive|url=https://web.archive.org/web/20100709200957/http://doc.qt.nokia.com/4.6/qtscript.html |date=2010-07-09 }}</ref>\n* [[OS X Yosemite]] introduced [[JavaScript for Automation]] (JXA), which is built upon [[JavaScriptCore]] and the [[Open Scripting Architecture]]. It features an [[Objective-C]] bridge that enables entire [[Cocoa (API)|Cocoa]] applications to be programmed in JavaScript.\n* Late Night Software's [[JavaScript OSA]] (also known as JavaScript for OSA, or JSOSA) is a freeware alternative to [[AppleScript]] for OS X. It is based on the Mozilla JavaScript 1.5 implementation, with the addition of a <code>MacOS</code> object for interaction with the operating system and third-party applications.\n\n=== Application platform ===\n{{See also|List of server-side JavaScript implementations}}\n\n* [[ActionScript]], the programming language used in [[Adobe Flash]], is another implementation of the ECMAScript standard.\n* [[Adobe AIR]] (Adobe Integrated Runtime) is a JavaScript runtime that allows developers to create desktop applications.\n* [[Electron (software framework)|Electron]] is an open-source [[software framework|framework]] developed by [[GitHub]].\n* [[CA Technologies]] AutoShell cross-application scripting environment is built on the [[SpiderMonkey (JavaScript engine)|SpiderMonkey]] JavaScript engine. It contains [[preprocessor]]-like extensions for command definition, as well as custom classes for various system-related tasks like file I/O, operation system command invocation and redirection, and COM scripting.\n* [[Apache Cordova]] is a mobile application development framework\n* [[Cocos2d]] is an open source software framework. It can be used to build games, apps and other cross platform GUI based interactive programs\n* [[Chromium Embedded Framework]] (CEF) is an open source framework for embedding a [[web browser engine]] based on the [[Chromium (web browser)|Chromium]] core\n* [[RhoMobile Suite]] is a set of development tools for creating data-centric, cross-platform, native mobile consumer and enterprise applications. \n* [[NW.js]] call all Node.js modules directly from DOM and enable a new way of writing applications with all Web technologies.<ref>{{cite web|url=https://nwjs.io |title=NW.js |website=Nwjs.io |date= |accessdate=2017-02-24}}</ref>\n* [[GNOME Shell]], the shell for the {{nobr|[[GNOME]] 3}} desktop environment,<ref>{{cite web\n| url=http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor\n| title=Behind the Scenes with Owen Taylor\n| publisher=The GNOME Journal\n| accessdate=2010-01-23\n| archiveurl=https://web.archive.org/web/20121221071408/http://gnomejournal.org/article/74/behind-the-scenes-with-owen-taylor\n| archivedate=2012-12-21\n}}</ref> made JavaScript its default programming language in 2013.<ref>{{cite web\n| url = http://treitter.livejournal.com/14871.html\n| title = Answering the question: \"How do I develop an app for GNOME?\"\n}}</ref>\n* The [[Mozilla application framework]] (XPFE) platform, which underlies [[Firefox]], [[Mozilla Thunderbird|Thunderbird]], and some other Web browsers, uses JavaScript to implement the [[graphical user interface]] (GUI) of its various products.\n* [[Qt Quick]]'s markup language (available since Qt 4.7) uses JavaScript for its application logic. Its declarative syntax is also similar to JavaScript.\n* [[Ubuntu Touch]] provides a JavaScript API for its unified usability interface.\n* [[Open webOS]] is the next generation of web-centric platforms built to run on a wide range of form factors.<ref>{{cite web|url=http://openwebosproject.org/|title=Open webOS|date=30 March 2012|publisher=|deadurl=yes|archiveurl=https://web.archive.org/web/20120330015746/http://openwebosproject.org/|archivedate=30 March 2012|df=}}</ref>\n* [[Enyo (software)|enyo JS]] is a framework to develop apps for all major platforms, from phones and tablets to PCs and TVs<ref>{{cite web|url=http://enyojs.com/ |title=Enyo JavaScript Application Framework |website=Enyojs.com |date= |accessdate=2017-02-24}}</ref>\n* [[WinJS]] provides a special Windows Library for JavaScript functionality in [[Windows 8]] that enables the development of [[Metro (design language)|Modern style]] (formerly ''Metro style'') applications in [[HTML5]] and JavaScript.\n* [[NativeScript]] is an open-source framework to develop apps on the Apple iOS and Android platforms.\n* [[Weex]] is a framework for building Mobile cross-platform UI, created by China Tech giant [[Alibaba Group|Alibaba]]<ref>{{cite web|url=https://weex-project.io/|title=Weex|date=2 February 2017|publisher=|deadurl=bot: unknown|archiveurl=https://web.archive.org/web/20170202074333/https://weex-project.io/|archivedate=2 February 2017|df=}}</ref>\n* [[XULRunner]] is packaged version of the Mozilla platform to enable standalone desktop application development\n\n== Development tools ==\nWithin JavaScript, access to a [[debugger]] becomes invaluable when developing large, non-trivial programs. There can be implementation differences between the various browsers (particularly within the DOM), so it is useful to have access to a debugger for each of the browsers that a Web application targets.<ref>{{cite web | url=http://www.alistapart.com/articles/advanced-debugging-with-javascript/ | title=Advanced Debugging With JavaScript | publisher=alistapart.com | date=2009-02-03 | accessdate=2010-05-28}}</ref>\n\nScript debuggers are integrated within many mainstream browsers such as [[Internet Explorer]], [[Firefox]], [[Safari (web browser)|Safari]], [[Google Chrome]], [[Opera (web browser)|Opera]] and [[Node.js]].<ref>{{cite web | url=http://javascript.about.com/od/problemsolving/ig/JavaScript-Debugging/ | title=The JavaScript Debugging Console | publisher=javascript.about.com | date=2010-05-28 | accessdate=2010-05-28}}</ref><ref>{{cite web | url=http://www.javascript-debugger.com | title=SplineTech JavaScript Debugger – an independent standalone JavaScript Debugger | publisher=javascript-debugger.com | date=2013-08-26 | accessdate=2013-08-26}}</ref><ref>{{cite web | url=http://docs.strongloop.com/display/DOC/Debugging+with+Node+Inspector | title=Debugging with Node Inspector | publisher=docs.strongloop.com | accessdate=2014-05-07 | archive-url=https://web.archive.org/web/20140508051643/http://docs.strongloop.com/display/DOC/Debugging+with+Node+Inspector | archive-date=2014-05-08 | dead-url=yes | df= }}</ref>\n\nIn addition to the native [[Internet Explorer Developer Tools]], three other debuggers are available for Internet Explorer: [[Microsoft Visual Studio]] has the most features of the three, closely followed by [[Microsoft Script Editor]] (a component of [[Microsoft Office]]),<ref>[http://msdn2.microsoft.com/en-us/library/aa202668(office.11).aspx JScript development in Microsoft Office 11] (MS InfoPath 2003)</ref> and finally the free [[Microsoft Script Debugger]]. The free [[Microsoft Visual Web Developer Express]] provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio.\n\nIn comparison to Internet Explorer, Firefox has a more comprehensive set of developer tools, which includes a debugger as well. Old versions of Firefox without these tools used a [[Firefox addon]] called [[Firebug (Firefox extension)|Firebug]], or the older [[Venkman]] debugger. [[WebKit]]'s Web Inspector includes a JavaScript debugger,<ref>{{cite web | url=http://webkit.org/blog/61/introducing-drosera/ | title=Introducing Drosera – Surfin' Safari | publisher=Webkit.org | date=2006-06-28 | accessdate=2009-05-19}}</ref> which is used in [[Safari (web browser)|Safari]]. A modified version called Blink DevTools is used in [[Google Chrome]]. [[Node.js]] has Node Inspector, an interactive debugger that integrates with the Blink DevTools. [[Opera (web browser)|Opera]] includes a set of tools called [[Opera Dragonfly|Dragonfly]].<ref>{{cite web | url=http://www.opera.com/dragonfly/|title=Opera DragonFly|publisher=Opera Software}}</ref>\n\n{{Anchor|Online dev tools}}In addition to the native computer software, there are online JavaScript integrated development environment (IDEs), which has debugging aids that are themselves written in JavaScript and built to run on the Web. An example is the program [[JSLint]], developed by [[Douglas Crockford]] who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines. Many libraries for JavaScript, such as [[three.js]], provide links to demonstration code that can be edited by users. Demonstration codes are also used as a pedagogical tool by institutions such as [[Khan Academy]]<ref>{{cite web |url=http://www.khanacademy.org/cs |title=Khan Academy Computer Science|accessdate=28 Sep 2012}}</ref> to allow students to experience writing code in an environment where they can see the output of their programs, without needing any setup beyond a Web browser.\n\n== Benchmark tools for developers ==\nJavaScript's increased usage in web development warrants further considerations about performance. [[Front and back ends|Frontend]] code has inherited many responsibilities previously handled by the [[Front and back ends|backend]]. Mobile devices in particular may encounter problems rendering poorly optimized frontend code.\n\nA library for doing benchmarks is benchmark.js.<ref>{{cite web|url=https://benchmarkjs.com/|title=Benchmark.js|website=benchmarkjs.com}}</ref> A benchmarking library that supports high-resolution timers and returns statistically significant results.{{Citation needed|reason=Need citation on statistically significant results|date=November 2016}}\n\nAnother tool is jsben.ch.<ref name=\"auto1\">{{cite web|url=http://jsben.ch|title=JSBEN.CH Performance Benchmarking Playground for JavaScript|first=|last=JSBEN.CH|website=jsben.ch}}</ref> An online JavaScript benchmarking tool, where code snippets can be tested against each other.\n\n== Version history ==\n{{See also|ECMAScript#Versions}}\nJavaScript was initially developed in 1996 for use in the [[Netscape Navigator]] Web browser. In the same year Microsoft released an implementation for Internet Explorer. This implementation was called [[JScript]] due to trademark issues. In 1997, the first standardized version of the language was released under the name [[ECMAScript]] in the first edition of the ECMA-262 standard.\n\nThe explicit versioning and opt-in of language features was Mozilla-specific and has been removed in later Firefox versions (at least by Firefox 59). Firefox 4 was the last version which referred to an explicit JavaScript version (1.8.5). With new editions of the ECMA-262 standard, JavaScript language features are now often mentioned with their initial definition in the ECMA-262 editions.\n\nThe following table of explicitly versioned JavaScript versions is based on information from multiple sources.<ref>{{cite web | url=https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript | title=New in JavaScript |publisher=developer.mozilla.org |date=2014 | accessdate=2016-07-16}}</ref><ref>{{cite web | url=http://www.webmasterworld.com/forum91/68.htm | title=JavaScript – JScript – ECMAScript version history | publisher=Webmasterworld.com | accessdate=2009-12-17}}</ref><ref>{{cite web | author=John Resig | url=http://ejohn.org/blog/versions-of-javascript | title=Versions of JavaScript | publisher=Ejohn.org | accessdate=2009-05-19}}</ref>\n{| class=\"wikitable\" style=\"text-align:center;\"\n|-\n! Version !! Release date !! Equivalent to !! Netscape<br />Navigator !! Mozilla<br />Firefox !! Internet<br />Explorer !! Opera !! Safari !! Google<br />Chrome\n|-\n| {{Version |o |1.0}} || March 1996 || || 2.0 || || 3.0 || || ||\n|-\n| {{Version |o |1.1}} || August 1996 || || 3.0 || || || || ||\n|-\n| {{Version |o |1.2}} || June 1997 || || 4.0-4.05 || || || 3 || ||\n|-\n| {{Version |o |1.3}} || October 1998 || ECMA-262 1st + 2nd edition || 4.06-4.7x || || 4.0 || 5<ref>{{cite web|url=http://javascript.about.com/library/bljver.htm |title=What Version of Javascript |website=Javascript.about.com |date=2016-02-22 |accessdate=2017-02-24 |archive-url=https://web.archive.org/web/20170109084234/http://javascript.about.com/library/bljver.htm |archive-date=2017-01-09}}</ref> || ||\n|-\n| {{Version |o |1.4}} || || || Netscape<br />Server || || || 6 || ||\n|-\n| {{Version |o |1.5}} || November 2000 || ECMA-262 3rd edition || 6.0 || 1.0 || 5.5 (JScript 5.5),<br />6 (JScript 5.6),<br />7 (JScript 5.7),<br />8 (JScript 5.8) || 7.0 || 3.0-5 || 1.0-10.0.666\n|-\n| {{Version |o |1.6}} || November 2005 || 1.5 + array extras + array and string generics + [[E4X]] || || 1.5 || || || ||\n|-\n| {{Version |o |1.7}} || October 2006 || 1.6 + [https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7?redirectlocale=en-US&redirectslug=New_in_JavaScript_1.7#Generators Pythonic generators] + iterators + let || || 2.0 || || || ||28.0.1500.95\n|-\n| {{Version |o |1.8}} || June 2008 || 1.7 + [[generator (computer programming)|generator expressions]] + [[closure (computer programming)|expression closures]] || || 3.0 || || 11.50 || ||\n|-\n| {{Version |o |1.8.1}} || || 1.8 + [[JSON#Native encoding and decoding in browsers|native JSON]] support + minor updates || || 3.5 || || || ||\n|-\n| {{Version |o |1.8.2}} || June 22, 2009 || 1.8.1 + minor updates || || 3.6 || || || ||\n|-\n| {{Version |o |1.8.5}} || July 27, 2010 || 1.8.2 + new features for ECMA-262 5th edition compliance (last explicit versioning of JavaScript) || || 4.0 || || || ||\n|}\n\n== Related languages and technologies ==\n* [[JSON]], or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax.\n* [[jQuery]] is a JavaScript library designed to simplify [[Document Object Model|DOM]]-oriented client-side HTML scripting along with offering cross-browser compatibility because various browsers respond differently to certain vanilla JavaScript code.\n* [[Underscore.js]] is a utility JavaScript library for data manipulation that is used in both client-side and server-side network applications.\n* [[Angular (application platform)|Angular]] and [[AngularJS]] are [[web application framework]]s to use for developing [[single-page application]]s and also cross-platform mobile apps.\n* [[React (JavaScript library)|React]] is an [[Open-source software|open source]] JavaScript library providing views that are rendered using components specified as custom HTML tags.\n* [[Vue.js]] is an [[Open-source software|open source]] JavaScript framework that features an incrementally adoptable architecture focusing on declarative rendering and component composition.\n* Mozilla browsers currently support [[LiveConnect]], a feature that allows JavaScript and Java to intercommunicate on the Web. However, Mozilla-specific support for LiveConnect was scheduled to be phased out in the future in favor of passing on the LiveConnect handling via [[NPAPI]] to the Java 1.6+ plug-in (not yet supported on the Mac {{as of|March 2010|lc=y}}).<ref>[http://java.sun.com/javase/6/webnotes/6u10/plugin2/liveconnect/ Release Notes for the Next-Generation Java™ Plug-In Technology (introduced in Java SE 6 update 10)]. Java.sun.com. Retrieved on 2013-06-13.</ref> Most browser inspection tools, such as [[Firebug (software)|Firebug]] in Firefox, include JavaScript interpreters that can act on the visible page's DOM.\n* [[asm.js]] is a subset of JavaScript that can be run in any JavaScript engine or run faster in an [[ahead-of-time]] (AOT) compiling engine.<ref>{{cite web | url=http://asmjs.org/faq.html | title=frequently asked questions | publisher=asm.js | accessdate=2014-04-13}}</ref>\n* [[JSFuck]] is an [[esoteric programming language]]. Programs are written using only six different characters, but are still valid JavaScript code.\n* [[Processing (programming language)#p5.js|p5.js]]<ref>{{cite web|url=http://p5js.org/ |title=Home |website=p5.js |date=2017-01-21 |accessdate=2017-02-24}}</ref> is an object oriented JavaScript library designed for artists and designers. It is based on the ideas of the [[Processing (programming language)|Processing]] project but is for the web.\n* jsben.ch<ref name=\"auto1\"/> is an online JavaScript benchmarking tool, where different code snippets can be tested against each other.\n\n{{anchor|transpilers}}\n\n=== Use as an intermediate language ===\nAs JavaScript is the most widely supported client-side language that can run within a Web browser, it has become an [[intermediate language]] for other languages (also called ''transpilers'') to target. This has included both newly created languages and ports of existing languages. Some of these include:\n* ClojureScript,<ref>{{cite web | url=https://github.com/clojure/clojurescript | title=clojure/clojurescript · GitHub | publisher=Github.com | accessdate=2014-04-13}}</ref> a dialect of [[Clojure]] that targets JavaScript. Its compiler is designed to emit JavaScript code that is compatible with the advanced compilation mode of the [[Google Closure Tools|Google Closure optimizing compiler]].\n* [[CoffeeScript]], an alternate syntax for JavaScript intended to be more concise and readable. It adds features like array comprehensions (also available in JavaScript since version 1.7)<ref>{{cite web | url=https://developer.mozilla.org/en/New_in_JavaScript_1.7#Array_comprehensions_%28Merge_into_Array_comprehensions%29 | title=New in JavaScript 1.7 | publisher=Developer.mozilla.org | date=2012-12-05 | accessdate=2013-05-26}}</ref> and pattern matching. Like Objective-J, it compiles to JavaScript. Ruby and Python have been cited as influential on CoffeeScript syntax.\n* [[Dart (programming language)|Dart]], an all-purpose, [[Open-source software|open source]] language that compiles to JavaScript.\n* [[Elm (programming language)|Elm]], a pure functional language for web apps. Unlike handwritten JavaScript, Elm-generated JavaScript has zero runtime exceptions, a time-traveling debugger, and enforced semantic versioning.\n* [[Emscripten]], a [[LLVM]]-backend for porting native libraries to JavaScript, known as [[asm.js]]<ref>{{cite web |url=http://www.webpronews.com/easily-port-c-to-html5javascript-with-emscripten-2012-04 |title=Easily Port C++ To HTML5/JavaScript With Emscripten |last=Walton |first=Zach |date=2012-04-04 |work=WebProNews |publisher=iEntry Network |access-date=2018-09-18 |archive-url=https://web.archive.org/web/20130730202900/http://www.webpronews.com/easily-port-c-to-html5javascript-with-emscripten-2012-04 |archive-date=2013-07-30 |dead-url=yes |df= }}</ref>\n* [[Fantom (programming language)|Fantom]], a programming language that runs on JVM, .NET and JavaScript.\n* [[Free Pascal]],<ref>{{cite web | url=http://wiki.freepascal.org/pas2js | title=pascal/pas2js · FreePascal | publisher=freepascal.org | accessdate=2017-12-24}}</ref> a compiler for [[Pascal (programming language)|Pascal]] that targets JavaScript.\n* [[Google Web Toolkit]], a toolkit that translates a subset of Java to JavaScript.\n* [[Haxe]], an open-source high-level multiplatform programming language and compiler that can produce applications and source code for many different platforms including JavaScript.\n* OberonScript, a full implementation of the [[Oberon (programming language)|Oberon]] programming language that compiles to high-level JavaScript.<ref>{{cite web | author=Ralph Sommerer | url=http://research.microsoft.com/apps/pubs/default.aspx?id=70288 | title=Oberon Script. A Lightweight Compiler and Runtime System for the Web | publisher=research.microsoft.com | accessdate=2015-12-18}}</ref>\n* [[Objective-J]], a superset of JavaScript that compiles to standard JavaScript. It adds traditional inheritance and [[Smalltalk]]/[[Objective-C]] style dynamic dispatch and optional pseudo-static typing to JavaScript.\n* [[Processing.js]], a JavaScript port of the Processing programming language designed to write visualizations, images, and interactive content. It allows Web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin.\n* [[Pyjs]], a port of [[Google Web Toolkit]] to [[Python (programming language)|Python]] that translates a subset of Python to JavaScript.\n* [[Scala (programming language)|Scala]], an object-oriented and functional programming language, has a Scala-to-JavaScript compiler.<ref>{{cite web | author=Sébastien Doeraene | url=http://lampwww.epfl.ch/~doeraene/scala-js/ | title=Scala.js | publisher=Lampwww.epfl.ch | accessdate=2014-04-13}}</ref>\n* [[SqueakJS]],<ref>{{cite web|url=https://bertfreudenberg.github.io/SqueakJS/|title=SqueakJS by Bert Freudenberg|website=bertfreudenberg.github.io}}</ref> a virtual machine and DOM environment for the open-source [[Squeak]] implementation of the [[Smalltalk]] programming language.\n* [[TypeScript]], a free and open-source programming language developed by Microsoft. It is a superset of JavaScript, and essentially adds support for optional [[type annotation]]s and some other language extensions such as classes, interfaces and modules. A TS-script compiles into plain JavaScript and can be executed in any JS host supporting [[ECMAScript]] 3 or higher. The compiler is itself written in TypeScript.\n* Whalesong,<ref>{{cite web | url=http://hashcollision.org/whalesong/ | title=Whalesong: a Racket to JavaScript compiler | publisher=Hashcollision.org | accessdate=2014-04-13 | archive-url=https://web.archive.org/web/20140413141312/http://hashcollision.org/whalesong/ | archive-date=2014-04-13 | dead-url=yes | df= }}</ref> a [[Racket (programming language)|Racket]]-to-JavaScript compiler.\nAs JavaScript has unusual limitations – such as no explicit integer type, only double-precision binary floating point – languages<!--such as Scala--> that compile to JavaScript and do not take care to use the integer-converting shift and bitwise logical operators may have slightly different behavior than in other environments.\n\n=== JavaScript and Java ===\nA common misconception is that JavaScript is similar or closely related to [[Java (programming language)|Java]]. It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically [[Sandbox (computer security)|sandboxed]] (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's {{code|lang=javascript|code=Math}} and {{code|lang=javascript|code=Date}} objects are based on classes from Java 1.0,<ref name=\"popularity\">{{cite web | url=http://brendaneich.com/2008/04/popularity/ | title=Popularity | author=Brendan Eich | date=3 April 2008 | accessdate=2012-01-19}}</ref> but the similarities end there.\n\n[[Java (programming language)|Java]] and JavaScript both first appeared in 1995, but Java was developed by [[James Gosling]] of Sun Microsystems, and JavaScript by [[Brendan Eich]] of Netscape Communications.\n\nThe differences between the two languages are more prominent than their similarities. Java has [[static typing]], while JavaScript's typing is [[Dynamic typing|dynamic]]. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are [[Class-based programming|class-based]], while JavaScript's are [[Prototype-based programming|prototype-based]]. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by [[Scheme (programming language)|Scheme]].\n\n===WebAssembly===\n\nStarting in 2017, web browsers began supporting [[WebAssembly]], a technology standardized by the [[World Wide Web Consortium|W3C]]. The WebAssembly standard specifies a binary format, which can be produced by a compiler toolchain such as [[LLVM]], to execute in the browser at near native speed. WebAssembly allows programming languages such as C, C++, C# and Java to be used as well as JavaScript to author client-side code for the World Wide Web.<ref>{{cite web|url=https://visualstudiomagazine.com/articles/2017/11/06/edge-webassembly.aspx|title=Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine|website=Visual Studio Magazine}}</ref>\n\n== See also ==\n{{Portal|Computer programming}}\n* [[WebAssembly]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n{{Refbegin|30em}}\n* {{cite book | last=Bhangal | first=Sham | author2=Jankowski, Tomasz | title=Foundation Web Design: Essential HTML, JavaScript, CSS, PhotoShop, Fireworks, and Flash | year=2003 | publisher=APress L. P. | isbn=1-59059-152-6}}\n* {{cite book | last=Burns | first=Joe | author2=Growney, Andree S. | title=JavaScript Goodies | year=2001 | publisher=Pearson Education | isbn=0-7897-2612-2}}\n* {{cite book | last=Duffy | first=Scott | title=How to do Everything with JavaScript | year=2003 | publisher=Osborne | isbn=0-07-222887-3 | url=https://archive.org/details/howtodoeverythin0000duff }}\n* {{cite book |last1=Flanagan | first1= David | title= JavaScript: The Definitive Guide | edition= 5th | year= 2006 | publisher= [[O'Reilly Media|O'Reilly & Associates]] | isbn= 0-596-10199-6 | ref= harv}}\n* {{cite book |last1=Flanagan | first1= David | title= JavaScript: The Definitive Guide | edition= 6th | year= 2011 | publisher= [[O'Reilly Media|O'Reilly & Associates]] | isbn= 978-0-596-80552-4 | ref= harv}}\n* {{cite book | last=Goodman | first=Danny | author2=Eich, Brendan | title=JavaScript Bible | year=2001 | publisher=John Wiley & Sons | isbn=0-7645-3342-8 | url=https://archive.org/details/javascriptbible00dann }}\n* {{cite book | last=Goodman | first=Danny | author2=Markel, Scott | title=JavaScript and DHTML Cookbook | year=2003 | publisher=O'Reilly & Associates | isbn=0-596-00467-2 | url=https://archive.org/details/javascriptdhtmlc00good }}\n* {{cite book | last=Harris | first=Andy | title=JavaScript Programming for the Absolute Beginner | year=2001 | publisher=Premier Press | isbn=0-7615-3410-5}}\n* {{cite book | last=Haverbeke | first=Marijn | title=Eloquent JavaScript | year=2011 | publisher=No Starch Press|isbn=978-1-59327-282-1}}\n* {{cite book | last=Heinle | first=Nick | author2=Koman, Richard | title=Designing with JavaScript | year=1997 | publisher=O'Reilly & Associates | isbn=1-56592-300-6 | url=https://archive.org/details/designingwithjav00hein }}\n* {{cite book | last=Husted | first=Robert | last2=Kuslich | first2=JJ | title=Server-Side JavaScript: Developing Integrated Web Applications | edition=1st | year=1999| publisher=Addison-Wesley | isbn=0-201-43329-X}}\n* {{cite book | last=McDuffie | first=Tina Spain | title=JavaScript Concepts & Techniques: Programming Interactive Web Sites | year=2003 | publisher=Franklin, Beedle & Associates | isbn=1-887902-69-4}}\n* {{cite book | last=McFarlane | first=Nigel | title=Rapid Application Development with Mozilla | year=2003 | publisher=Prentice Hall Professional Technical References | isbn=0-13-142343-6 | url=https://archive.org/details/rapidapplication00mcfa }}\n* {{cite book | last=Powell | first=Thomas A. | author2=Schneider, Fritz | title=JavaScript: The Complete Reference | year=2001 | publisher=McGraw-Hill Companies | isbn=0-07-219127-9 | url=https://archive.org/details/javascriptcomple00powe_0 }}\n* {{cite book | last=Shelly | first=Gary B. | author2=Cashman, Thomas J. | author3=Dorin, William J. | author4= Quasney, Jeffrey J. | title=JavaScript: Complete Concepts and Techniques | year=2000 | publisher=Course Technology | location=Cambridge | isbn=0-7895-6233-2}}\n* {{cite book | last=Vander Veer | first=Emily A. | title=JavaScript For Dummies | edition=4th | year=2004 | publisher=Wiley Pub. | isbn=0-7645-7659-3}}\n* {{cite book | last=Watt | first=Andrew H. | author2=Watt, Jonathan A. | author3=Simon, Jinjer L. | title=Teach Yourself JavaScript in 21 Days | year=2002 | publisher=Pearson Education | isbn=0-672-32297-8 | url=https://archive.org/details/samsteachyoursel00jona_0 }}\n* {{cite book|last1= Zakas | first1= Nicholas C. | title= Professional JavaScript for Web Developers | edition= 3rd | year= 2012 | publisher= Wrox | isbn= 978-1-118-02669-4 }}\n{{Refend}}\n\n== External links ==\n{{sisterlinks|commons=Category:JavaScript|n=no|v=Topic:JavaScript|q=no|s=no|m=no|voy=no|species=no|mw=JavaScript}}\n{{Spoken Wikipedia|En-JavaScript.ogg|2013-08-20}}\n* [[Douglas Crockford]]'s [https://www.youtube.com/playlist?list=PL62E185BB8577B63D video lectures on JavaScript]\n* Douglas Crockford's [http://javascript.crockford.com/survey.html A Survey of the JavaScript Programming Language]\n* {{DMOZ|Computers/Programming/Languages/JavaScript/}}\n* [https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS/ List of languages that compile to JS]\n\n{{JavaScript}}\n{{Programming languages}}\n{{ECMAScript}}\n{{Web browsers}}\n{{NodeJs}}\n{{Authority control}}\n\n[[Category:JavaScript| ]]\n[[Category:American inventions]]\n[[Category:Articles with example JavaScript code]]\n[[Category:Cross-platform software]]\n[[Category:Dynamically typed programming languages]]\n[[Category:Functional languages]]\n[[Category:Object-based programming languages]]\n[[Category:High-level programming languages]]\n[[Category:Programming languages created in 1995]]\n[[Category:Programming languages with an ISO standard]]\n[[Category:Prototype-based programming languages]]\n[[Category:Scripting languages]]\n[[Category:Web programming]]",
            "slug": "javascript",
            "date_updated": 1565241400000,
            "imported": "https://en.wikipedia.org/wiki/JavaScript"
        }
    ]
}