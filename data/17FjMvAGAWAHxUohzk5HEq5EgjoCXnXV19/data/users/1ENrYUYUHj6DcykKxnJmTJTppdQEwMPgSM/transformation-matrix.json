{
    "article": [
        {
            "title": "Transformation matrix",
            "text": "In [[linear algebra]], [[linear transformation]]s can be represented by [[matrix (math)|matrices]].  If ''T'' is a linear transformation mapping '''R'''<sup>''n''</sup> to '''R'''<sup>''m''</sup> and <math>\\vec x</math> is a [[column vector]] with ''n'' entries, then\n\n:<math>T( \\vec x ) = \\mathbf{A} \\vec x</math>\n\nfor some ''m''×''n'' matrix '''A''', called the '''transformation matrix of ''T'''''. There are alternative expressions of transformation matrices involving [[row vector]]s that are preferred by some authors.\n\n==Uses==\n\nMatrices allow arbitrary [[linear transformations]] to be displayed in a consistent format, suitable for computation.<ref>{{cite book |authors = Gentle, James E. |chapter = Matrix Transformations and Factorizations |title = Matrix Algebra: Theory, Computations, and Applications in Statistics |publisher = Springer |year = 2007 |isbn = 9780387708737 |url = https://books.google.com/books?id=PDjIV0iWa2cC&pg=PA172 }}</ref>  This also allows transformations to be concatenated easily (by multiplying their matrices).\n\nLinear transformations are not the only ones that can be represented by matrices.  Some transformations that are non-linear on an n-dimensional [[Euclidean space]] '''R'''<sup>''n''</sup> can be represented as linear transformations on the ''n''+1-dimensional space '''R'''<sup>''n''+1</sup>. These include both [[affine transformations]] (such as [[Translation (geometry)|translation]]) and [[projective transformation]]s. For this reason, 4×4 transformation matrices are widely used in [[3D computer graphics]]. These ''n''+1-dimensional transformation matrices are called, depending on their application, ''affine transformation matrices'', ''projective transformation matrices'', or more generally ''non-linear transformation matrices''.  With respect to an ''n''-dimensional matrix, an ''n''+1-dimensional matrix can be described as an [[augmented matrix]].\n\nIn the [[physics|physical sciences]], an [[active transformation]] is one which actually changes the physical position of a [[system]], and makes sense even in the absence of a [[coordinate system]] whereas a [[passive transformation]] is a change in the coordinate description of the physical system ([[change of basis]]). The distinction between active and passive [[Transformation (mathematics)|transformation]]s is important. By default, by ''transformation'', [[mathematician]]s usually mean active transformations, while [[physicist]]s could mean either.\n\nPut differently, a ''passive'' transformation refers to description of the ''same'' object as viewed from two different coordinate frames.\n\n==Finding the matrix of a transformation==\n\nIf one has a linear transformation <math>T(x)</math> in functional form, it is easy to determine the transformation matrix '''A''' by transforming each of the vectors of the [[standard basis]] by ''T'', then inserting the result into the columns of a matrix.  In other words,\n\n:<math>\\mathbf{A} = \\begin{bmatrix} T( \\vec e_1 ) & T( \\vec e_2 ) & \\cdots & T( \\vec e_n ) \\end{bmatrix}</math>\n\nFor example, the function <math>T(x) = 5x</math> is a linear transformation.  Applying the above process (suppose that ''n'' = 2 in this case) reveals that\n\n:<math>T( \\vec{x} ) = 5 \\vec{x} = 5 \\mathbf{I} \\vec{x} = \\begin{bmatrix} 5 && 0 \\\\ 0 && 5 \\end{bmatrix} \\vec{x}</math>\n\nIt must be noted that the matrix representation of vectors and operators depends on the chosen basis; a [[matrix similarity|similar]] matrix will result from an alternate basis. Nevertheless, the method to find the components remains the same.\n\nTo elaborate, vector v [[linear combination|can be represented]] in basis vectors, <math>E = [\\vec e_1 \\vec e_2 \\ldots \\vec e_n]</math> with coordinates <math> [v]_E = [v_1 v_2 \\ldots v_n]^T</math> :\n\n:<math>\\vec v = v_1 \\vec e_1 + v_2 \\vec e_2 + \\ldots + v_n \\vec e_n = \\sum v_i \\vec e_i = E [v]_E</math>\n\nNow, express the result of the transformation matrix A upon <math>\\vec v</math>, in the given basis:\n\n:<math>\\begin{align}\nA(\\vec v) &= A \\left (\\sum v_i \\vec e_i \\right ) = \\sum {v_i A(\\vec e_i)} = [A(\\vec e_1) A(\\vec e_2) \\ldots A(\\vec e_n)] [v]_E \\\\\n&= A \\cdot [v]_E = [\\vec e_1 \\vec e_2 \\ldots \\vec e_n]\n \\begin{bmatrix} a_{1,1} & a_{1,2} & \\ldots & a_{1,n} \\\\\na_{2,1} & a_{2,2} & \\ldots & a_{2,n} \\\\\n\\vdots &  \\vdots &  \\ddots &  \\vdots \\\\\na_{n,1} & a_{n,2} & \\ldots & a_{n,n} \\\\\n\\end{bmatrix}\n\\begin{bmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_n\\end{bmatrix}  \n\\end{align}</math>\n\nThe <math>a_{i,j}</math> elements of matrix A are determined for a given basis E by applying A to every <math>\\vec e_j = [0 0 \\ldots (v_j=1) \\ldots 0]^T</math>, and observing the response vector \n\n:<math>A \\vec e_j = a_{1,j} \\vec e_1 + a_{2,j} \\vec e_2 + \\ldots + a_{n,j} \\vec e_n = \\sum a_{i,j} \\vec e_i.</math> \n\nThis equation defines the wanted elements, <math>a_{i,j}</math>, of j-th column of the matrix A.<ref>{{cite book |last = Nearing |first = James |year = 2010 |title = Mathematical Tools for Physics |url = http://www.physics.miami.edu/nearing/mathmethods |chapter = Chapter 7.3 Examples of Operators |chapterurl = http://www.physics.miami.edu/~nearing/mathmethods/operators.pdf |accessdate = January 1, 2012 |isbn = 048648212X }}</ref>\n\n===Eigenbasis and diagonal matrix===\n\n{{Main|Diagonal matrix|Eigenvalues and eigenvectors  }}\n\nYet, there is a special basis for an operator in which the components form a [[diagonal matrix]] and, thus, multiplication complexity reduces to n. Being diagonal means that all coefficients <math>a_{i,j} </math> but <math>a_{i,i}</math> are zeros leaving only one term in the sum <math>\\sum a_{i,j} \\vec e_i</math> above. The surviving diagonal elements, <math>a_{i,i}</math>, are known as '''eigenvalues''' and designated with <math>\\lambda_i</math> in the defining equation, which reduces to <math>A \\vec e_i = \\lambda_i \\vec e_i</math>. The resulting equation is known as '''eigenvalue equation'''.<ref>{{cite book |last = Nearing |first = James |year = 2010 |title = Mathematical Tools for Physics |url = http://www.physics.miami.edu/nearing/mathmethods |chapter = Chapter 7.9: Eigenvalues and Eigenvectors |chapterurl = http://www.physics.miami.edu/~nearing/mathmethods/operators.pdf |accessdate = January 1, 2012 |isbn = 048648212X }}</ref> The [[Eigenvalues and eigenvectors|eigenvectors and eigenvalues are derived from it via the '''characteristic polynomial''']].\n\nWith [[Diagonalizable matrix#Diagonalization|diagonalization]], it is [[diagonalizability|often possible]] to [[change of basis|translate]] to and from eigenbases.\n\n==Examples in 2D computer graphics==\n\nMost common geometric transformations that keep the origin fixed are linear, including rotation, scaling, shearing, reflection, and orthogonal projection; if an affine transformation is not a pure translation it keeps some point fixed, and that point can be chosen as origin to make the transformation linear.  In two dimensions, linear transformations can be represented using a 2×2 transformation matrix.\n\n===Stretching===\nA stretch in the xy-plane is a linear transformation which enlarges all distances in a particular direction by a constant factor but does not affect distances in the perpendicular direction. We only consider stretches along the x-axis and y-axis. A stretch along the x-axis has the form <var>x'</var> = <var>kx</var>; <var>y'</var> = <var>y</var> for some positive constant <var>k</var>. (Note that if <var>k</var> is &gt; 1, then this really is a “stretch”; if <var>k</var> is &lt; 1, it is technically a “compression”, but we still call it a stretch. Also, if <var>k</var>=1, then the transformation is an identity, i.e. it has no effect.) \n\nThe matrix associated with a stretch by a factor <var>k</var> along the x-axis is given by:\n\n:<math>\\begin{bmatrix} k &  0 \\\\ 0 & 1 \\end{bmatrix} </math>\n\nSimilarly, a stretch by a factor <var>k</var> along the y-axis has the form <var>x'</var> = <var>x</var>; <var>y'</var> = <var>ky</var>, so the matrix associated with this transformation is\n\n:<math>\\begin{bmatrix} 1 &  0 \\\\ 0 & k \\end{bmatrix} </math>\n\n===Rotation===\n\nFor [[coordinate rotation|rotation]] by an angle θ '''counter-clockwise''' about the origin the functional form is <math>x' = x \\cos \\theta + y \\sin \\theta</math> and <math>y' =  - x \\sin \\theta + y \\cos \\theta</math>.  Written in matrix form, this becomes:<ref>http://ocw.mit.edu/courses/aeronautics-and-astronautics/16-07-dynamics-fall-2009/lecture-notes/MIT16_07F09_Lec03.pdf</ref>\n\n:<math>\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} \\cos \\theta &  -\\sin\\theta \\\\ \\sin \\theta & \\cos \\theta \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}</math>\n\nSimilarly, for a rotation '''clockwise''' about the origin, the functional form is <math>x' = x \\cos \\theta - y \\sin \\theta</math> and <math>y' = x \\sin \\theta + y \\cos \\theta</math> and the matrix form is:\n\n:<math>\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} \\cos \\theta &   \\sin\\theta \\\\ -\\sin \\theta & \\cos \\theta \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}</math>\n\nThese formulae assume that the ''x'' axis points right and the ''y'' axis points up.  In formats such as [[SVG]] where the ''y'' axis points down, these matrices must be swapped.\n\n===Shearing===\n\nFor [[shear mapping]] (visually similar to slanting), there are two possibilities.\n\nA shear parallel to the ''x'' axis has <math>x' = x + ky</math> and <math>y' = y</math>. Written in matrix form, this becomes:\n:<math>\n\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} 1 & k \\\\ 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}\n</math>\n\nA shear parallel to the ''y'' axis has <math>x' = x</math> and <math>y' = y + kx</math>, which has matrix form:\n:<math>\n\\begin{bmatrix} x' \\\\ y' \\end{bmatrix} = \\begin{bmatrix} 1 & 0 \\\\ k & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\end{bmatrix}\n</math>\n\n===Reflection===\n{{main|Householder transformation}}\n\nTo reflect a vector about a line that goes through the origin, let <math>\\scriptstyle \\vec{l} = (l_x, l_y)</math> be a [[vector (geometric)|vector]] in the direction of the line:\n\n:<math>\\mathbf{A} = \\frac{1}{\\lVert\\vec{l}\\rVert^2} \\begin{bmatrix} l_x^2 - l_y^2 & 2 l_x l_y \\\\ 2 l_x l_y & l_y^2 - l_x^2 \\end{bmatrix}</math>\n\n===Orthogonal projection===\n\nTo project a vector orthogonally onto a line that goes through the origin, let <math>\\vec{u} = (u_x, u_y)</math> be a [[vector (geometric)|vector]] in the direction of the line.  Then use the transformation matrix:\n\n:<math>\\mathbf{A} = \\frac{1}{\\lVert\\vec{u}\\rVert^2} \\begin{bmatrix} u_x^2 & u_x u_y \\\\ u_x u_y & u_y^2 \\end{bmatrix}</math>\n\nAs with reflections, the orthogonal projection onto a line that does not pass through the origin is an affine, not linear, transformation.\n\n[[Projection (linear algebra)|Parallel projection]]s are also linear transformations and can be represented simply by a matrix.  However, perspective projections are not, and to represent these with a matrix, [[Homogeneous coordinates#Use in computer graphics|homogeneous coordinates]] can be used.\n\n==Examples in 3D computer graphics==\n\n===Rotation===\nThe matrix to rotate an angle ''θ'' about the axis defined by [[unit vector]] (''l'',''m'',''n'') is<ref>{{cite book |page = 154 |title = Basic Mathematics for Electronic Engineers:Models and Applications |first = John E. |last = Szymanski |publisher = Taylor & Francis |year = 1989 |isbn = 0278000681 }}</ref>\n:<math>\\begin{bmatrix}\nll(1-\\cos \\theta)+\\cos\\theta & ml(1-\\cos\\theta)-n\\sin\\theta & nl(1-\\cos\\theta)+m\\sin\\theta\\\\\nlm(1-\\cos\\theta)+n\\sin\\theta & mm(1-\\cos\\theta)+\\cos\\theta & nm(1-\\cos\\theta)-l\\sin\\theta \\\\\nln(1-\\cos\\theta)-m\\sin\\theta & mn(1-\\cos\\theta)+l\\sin\\theta & nn(1-\\cos\\theta)+\\cos\\theta\n\\end{bmatrix}.</math>\n\n===Reflection===\n{{main|Householder transformation}}\n\nTo reflect a point through a plane <math>ax + by + cz = 0</math> (which goes through the origin), one can use <math>\\mathbf{A} = \\mathbf{I}-2\\mathbf{NN}^T </math>, where <math>\\mathbf{I}</math> is the 3x3 identity matrix and <math>\\mathbf{N}</math> is the three-dimensional [[unit vector]] for the vector normal of the plane.  If the [[L2 norm]] of <math>a, b,</math> and <math>c</math> is unity, the transformation matrix can be expressed as:\n\n:<math>\\mathbf{A} = \\begin{bmatrix} 1 - 2 a^2  & - 2 a b & - 2 a c \\\\ - 2 a b  & 1 - 2 b^2 & - 2 b c  \\\\ - 2 a c & - 2 b c & 1 - 2c^2 \\end{bmatrix}</math>\n\nNote that these are particular cases of a [[Householder reflection]] in two and three dimensions.  A reflection about a line or plane that does not go through the origin is not a linear transformation — it is an [[affine transformation]] — as a 4x4 affine transformation matrix, it can be expressed as follows (assuming the normal is a unit vector):\n\n:<math>\\begin{bmatrix} x' \\\\ y' \\\\ z' \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 - 2 a^2  & - 2 a b & - 2 a c & - 2 a d \\\\ - 2 a b  & 1 - 2 b^2 & - 2 b c & - 2 b d \\\\ - 2 a c & - 2 b c & 1 - 2c^2 & - 2 c d \\\\ 0 & 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix} </math>\n\nWhere <math>d = \\mathbf{-p} \\cdot \\mathbf{N}</math> for some point <math>\\mathbf{p}</math> on the plane.\n\nIf the 4th component of the vector is 0 instead of 1, then only the vector's direction is reflected and its length remains unchanged, as if it were mirrored through a parallel plane that passes through the origin. This is a useful property as it allows the transformation of both positional vectors and normal vectors with the same matrix.  See [[homogenous coordinates]] and [[#Other kinds of transformations|affine transformations]] below for further explanation.\n\n==Composing and inverting transformations==\n\nOne of the main motivations for using matrices to represent linear transformations is that transformations can then be easily composed ([[Linear combination|combined]]) and inverted.\n\nComposition is accomplished by [[matrix multiplication]].  If '''A''' and '''B''' are the matrices of two linear transformations, then the effect of applying first '''A''' and then '''B''' to a vector ''x'' is given by:\n\n:<math>\\mathbf{B}(\\mathbf{A} \\vec{x} ) = (\\mathbf{BA}) \\vec{x}</math>\n\n(This is called the [[associative property]].)\nIn other words, the matrix of the combined transformation '''''A''' followed by '''B''''' is simply the product of the individual matrices.  Note that the multiplication is done in the opposite order from the English sentence: the matrix of \"'''A''' followed by '''B'''\" is '''BA''', not '''AB'''.\n\nA consequence of the ability to compose transformations by multiplying their matrices is that transformations can also be inverted by simply [[Invertible matrix|inverting their matrices]].  So, '''A'''<sup>−1</sup> represents the transformation that \"undoes\" '''A'''.\n\n==Other kinds of transformations==\n\n===Affine transformations===<!-- This section is linked from [[Affine transformation]] -->\n[[File:2D affine transformation matrix.svg|thumb|250px|right|Effect of applying various 2D affine transformation matrices on a unit square. Note that the reflection matrices are special cases of the scaling matrix.]]\n[[File:Affine transformations.ogv|thumb|250px|right|Affine transformations on the 2D plane can be performed in three dimensions. Translation is done by shearing along over the z axis, and rotation is performed around the z axis.]]\n\nTo represent [[affine transformation]]s with matrices, we can use [[homogeneous coordinates]].  This means representing a 2-vector (''x'', ''y'') as a 3-vector (''x'', ''y'', 1), and similarly for higher dimensions.  Using this system, translation can be expressed with matrix multiplication.  The functional form <math>x' = x + t_x; y' = y + t_y</math> becomes:\n\n:<math>\\begin{bmatrix} x' \\\\ y' \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 & 0 & t_x \\\\ 0 & 1 & t_y \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix}.</math>\n\nAll ordinary linear transformations are included in the set of affine transformations, and can be described as a simplified form of affine transformations. Therefore, any linear transformation can also be represented by a general transformation matrix. The latter is obtained by expanding the corresponding linear transformation matrix by one row and column, filling the extra space with zeros except for the lower-right corner, which must be set to 1. For example, ''the '''counter-clockwise''' [[rotation matrix]] from above'' becomes:\n\n:<math>\\begin{bmatrix} \\cos \\theta &  -\\sin \\theta & 0 \\\\ \\sin \\theta & \\cos \\theta & 0 \\\\ 0 & 0 & 1 \\end{bmatrix}</math>\n\nUsing transformation matrices containing homogeneous coordinates, translations become [[Linear independence|linearly independent]], and thus can be [[Linear combination|seamlessly intermixed]] with all other types of transformations. The reason is that the real plane is mapped to the ''w'' = 1 plane in real projective space, and so translation in real [[Euclidean space]] can be represented as a shear in real projective space. Although a translation is a non-[[Linear map|linear transformation]] in a 2-D or 3-D Euclidean space described by Cartesian coordinates (i.e. it can't be combined with other transformations while preserving [[Commutative property|commutativity]] and other properties), it [[Translation (geometry)#Matrix representation|becomes]], in a 3-D or 4-D projective space described by homogeneous coordinates, a simple linear transformation (a [[Shear mapping|shear]]).\n\nMore affine transformations can be obtained by [[Linear combination|composition]] of two or more affine transformations. For example, given a translation '''T'''' with vector <math>(t'_x, t'_y),</math> a rotation '''R''' by an angle θ '''counter-clockwise''', a scaling '''S''' with factors <math>(s_x, s_y)</math> and a translation '''T''' of vector <math>(t_x, t_y),</math> the result '''M''' of '''T'RST''' is:<ref>{{cite web |url = http://totologic.blogspot.com/2015/02/2d-transformation-matrices-baking.html |title = 2D transformation matrices baking |author = Cédric Jules |date = February 25, 2015 }}</ref>\n\n:<math>\n\\begin{bmatrix}\ns_x \\cos \\theta & - s_y \\sin \\theta & t_x s_x \\cos \\theta - t_y s_y \\sin \\theta + t'_x \\\\\ns_x  \\sin \\theta & s_y \\cos \\theta & t_x s_x \\sin \\theta + t_y s_y \\cos \\theta + t'_y \\\\ \n0      & 0 & 1\n\\end{bmatrix}\n</math>\n\n\nWhen using affine transformations, the homogeneous component of a coordinate vector (normally called ''w'') will never be altered.  One can therefore safely assume that it is always 1 and ignore it.  However, this is not true when using perspective projections.\n\n===Perspective projection===\n{{see also|3D projection#Perspective projection|l1=Perspective projection}}\n[[File:Perspective transformation matrix 2D.svg|thumb|Comparison of the effects of applying 2D affine and perspective transformation matrices on a unit square.]]\nAnother type of transformation, of importance in [[3D computer graphics]], is the [[perspective projection]].  Whereas parallel projections are used to project points onto the image plane along parallel lines, the perspective projection projects points onto the image plane along lines that emanate from a single point, called the center of projection.  This means that an object has a smaller projection when it is far away from the center of projection and a larger projection when it is closer.\n\nThe simplest perspective projection uses the origin as the center of projection, and ''z'' = 1 as the image plane.  The functional form of this transformation is then <math>x' = x / z</math>; <math>y' = y / z</math>.  We can express this in [[homogeneous coordinates]] as:\n\n:<math>\\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ w_c \\end{bmatrix} = \\begin{bmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 0 \\\\ 0 & 0 &  1 & 0 \\end{bmatrix} \\begin{bmatrix} x \\\\ y \\\\ z \\\\ 1 \\end{bmatrix}\n</math>\n\nAfter carrying out the matrix multiplication, the homogeneous component ''w<sub>c</sub>'' will, in general, not be equal to 1.  Therefore, to map back into the real plane we must perform the '''homogeneous divide''' or '''perspective divide''' by dividing each component by ''w<sub>c</sub>'':\n\n:<math>\\begin{bmatrix} x' \\\\ y' \\\\ z' \\\\ 1 \\end{bmatrix} = \\frac{1}{w_c} \\begin{bmatrix} x_c \\\\ y_c \\\\ z_c \\\\ w_c \\end{bmatrix}</math>\n\nMore complicated perspective projections can be composed by combining this one with rotations, scales, translations, and shears to move the image plane and center of projection wherever they are desired.\n\n==See also==\n* [[3D projection]]\n* [[Transformation (function)]]\n\n==References==\n{{Reflist}}\n\n==External links==\n* [https://web.archive.org/web/20091027131421/http://geocities.com/evilsnack/matrix.htm  The Matrix Page] Practical examples in [[POV-Ray]]\n* [http://mathworld.wolfram.com/RotationMatrix.html Reference page] - Rotation of axes\n* [http://www.idomaths.com/linear_transformation.php Linear Transformation Calculator]\n* [http://www.wiley.com/legacy/products/subject/life/biological_anthropology/0471205079_virtual_reconstruction/chapter5_trafo.html Transformation Applet] - Generate matrices from 2D transformations and vice versa.\n* [http://www.miniphysics.com/coordinate-transformation-under-rotation.html Coordinate transformation under rotation in 2D]\n* [http://blogs.office.com/2015/02/18/excel-fun-build-3d-graphics-spreadsheet/ Excel Fun - Build 3D graphics from a spreadsheet] - Interactive transformation matrices in a live spreadsheet \n\n{{Linear algebra}}\n\n[[Category:Computer graphics]]\n[[Category:Matrices]]\n[[Category:Transformation (function)]]\n[[Category:Articles containing video clips]]",
            "slug": "transformation-matrix",
            "date_updated": 1517682149015,
            "imported": "https://en.wikipedia.org/wiki/Transformation matrix"
        }
    ]
}