{
    "article": [
        {
            "title": "L4 microkernel family",
            "text": "'''L4''' is a family of second-generation [[microkernel]]s, generally used to implement [[Unix-like]] [[operating systems]], but also used in a variety of other systems.\n\nL4, like its predecessor L3 microkernel, was created by [[Germany|German]] [[computer scientist]] [[Jochen Liedtke]] as a response to the poor performance of earlier microkernel-based operating systems. Liedtke felt that a system designed from the start for high performance, rather than other goals, could produce a microkernel of practical use. His original implementation in hand-coded [[Intel 80386|Intel i386]]-specific [[assembly language]] code in 1993 sparked intense interest in the computer industry.{{Citation needed|date=December 2016}} Since its introduction, L4 has been developed for [[platform independence]] and also in improving [[computer security|security]], isolation, and [[Robustness (computer science)|robustness]].\n\nThere have been various re-implementations of the original binary L4 kernel interface ([[Application binary interface|ABI]]) and its successors, including '''L4Ka::Pistachio''' ([[Universität Karlsruhe (TH)|Uni Karlsruhe]]), '''L4/MIPS''' ([[UNSW]]) and '''Fiasco''' ([[TU Dresden]]). For this reason, the name '''L4''' has been generalized and no longer only refers to Liedtke's original implementation. It now applies to the whole [[microkernel]] family including the L4 [[Kernel (computer science)|kernel]] [[Interface (computer science)|interface]] and its different versions.\n\nL4 is widely deployed. One variant, OKL4 from [[Open Kernel Labs]], shipped in billions of mobile devices.<ref name=\"OKL4 Microvisor\">https://gdmissionsystems.com/cyber/products/trusted-computing-cross-domain/microvisor-products/</ref><ref name=OKL_PR>{{cite press release\n |title=Open Kernel Labs Software Surpasses Milestone of 1.5 Billion Mobile Device Shipments\n |url=http://www.ok-labs.com/releases/release/ok-labs-software-surpasses-milestone-of-1.5-billion-mobile-device-shipments\n |archive-url=https://web.archive.org/web/20120211210405/http://www.ok-labs.com/releases/release/ok-labs-software-surpasses-milestone-of-1.5-billion-mobile-device-shipments\n |archive-date=February 11, 2012\n |dead-url=yes\n |date=January 19, 2012 |publisher=[[Open Kernel Labs]]}}</ref>\n\n==Design paradigm==\nSpecifying the general idea of a [[microkernel]], [[Jochen Liedtke|Liedtke]] states:\n\n<blockquote>A concept is tolerated inside the microkernel only if moving it outside the kernel, i.e., permitting competing implementations, would prevent the implementation of the system's required functionality.<ref name=Lie95>{{cite conference\n | first = Jochen\n | last = Liedtke\n | authorlink = Jochen Liedtke\n | title = On µ-Kernel Construction\n | booktitle = Proc. 15th ACM Symposium on Operating Systems Principles (SOSP)\n | pages = 237&ndash;250\n | date = December 1995\n | url = http://os.itec.kit.edu/65_1029.php\n | archive-url = https://web.archive.org/web/20151025154932/http://os.itec.kit.edu/65_1029.php\n | archive-date = October 25, 2015\n | dead-url = no }}</ref></blockquote><!--http://portal.acm.org/citation.cfm?id=224075&coll=portal&dl=ACM&CFID=183836&CFTOKEN=65974839-->\n\nIn this spirit, the L4 microkernel provides few basic mechanisms: [[address space]]s (abstracting page tables and providing memory protection), [[Thread (computer science)|thread]]s and [[scheduling (computing)|scheduling]] (abstracting execution and providing temporal protection), and [[inter-process communication]] (for controlled communication across isolation boundaries).\n\nAn operating system based on a microkernel like L4 provides services as servers in [[user space]] that [[monolithic kernel]]s like [[Linux]] or older generation microkernels include internally. For example, in order to implement a secure [[Unix-like]] system, servers must provide the rights management that [[Mach (kernel)|Mach]] included inside the kernel.\n\n==History==\nThe poor performance of first-generation microkernels, such as [[Mach (kernel)|Mach]], led a number of developers to re-examine the entire microkernel concept in the mid-1990s. The asynchronous in-kernel-buffering [[inter-process communication|process communication]] concept used in Mach turned out to be one of the main reasons for its poor performance. This induced developers of Mach-based operating systems to move some time-critical components, like file systems or drivers, back inside the kernel.{{Citation needed|date=August 2010}} While this somewhat ameliorated the performance issues, it plainly violates the minimality concept of a true microkernel (and squanders their major advantages).\n\nDetailed analysis of the Mach bottleneck indicated that, among other things, its [[working set]] is too large: the IPC code expresses poor spatial locality; that is, it results in too many [[CPU cache|cache]] misses, of which most are in-kernel.<ref name=Lie95 /> This analysis gave rise to the principle that an efficient microkernel should be small enough that the majority of performance-critical code fits into the (first-level) cache (preferably a small fraction of said cache).\n\n===L3===\n\n[[Jochen Liedtke]] set out to prove that a well designed thinner [[inter-process communication|IPC]] layer, with careful attention to performance and machine-specific (as opposed to platform independent) design could yield massive real-world performance improvements. Instead of Mach's complex IPC system, his [[L3 microkernel]] simply passed the message without any additional overhead. Defining and implementing the required security policies were considered to be duties of the [[user space]] servers. The role of the kernel was only to provide the necessary mechanism to enable the user-level servers to enforce the policies. L3, developed in 1988, proved itself a safe and robust [[operating system]], used for many years for example by [[TÜV SÜD]]{{Citation needed|date=September 2010}}.\n\n[[File:L4 family tree.png|thumb|400px|L4 family tree]]\n\n===L4===\nAfter some experience using L3, Liedtke came to the conclusion that several other Mach concepts were also misplaced. By simplifying the microkernel concepts even further he developed the first L4 kernel which was primarily designed with high performance in mind. In order to wring out every bit of performance the entire kernel was written in [[assembly language]], and its IPC was 20 times faster than Mach's.<ref name=\"Liedtke_93\">{{cite conference\n | first = Jochen\n | last = Liedtke\n | authorlink = Jochen Liedtke\n | title = Improving IPC by kernel design\n | booktitle = 14th ACM Symposium on Operating System Principles\n | pages = 175&ndash;88\n | publisher =\n |date=December 1993\n | location = Asheville, NC, USA\n | url = http://portal.acm.org/citation.cfm?id=168619.168633&coll=portal&dl=ACM&type=series&idx=168619&part=Proceedings&WantType=Proceedings&title=ACM%20Symposium%20on%20Operating%20Systems%20Principles&CFID=18793560&CFTOKEN=54028606\n | accessdate =\n | id =\n}}</ref> Such dramatic performance increases are a rare event in operating systems, and Liedtke's work triggered new L4 implementations and work on L4-based systems at a number of universities and research institutes, including [[IBM]], where Liedtke started to work in 1996, TU Dresden and UNSW. At IBM's [[Thomas J. Watson Research Center]] Liedtke and his colleagues continued research on L4 and microkernel based systems in general, especially the Sawmill OS.<ref name=\"Gefflaut_JPLEUTDR_00\">{{cite conference\n | first1 = Alain\n | last1 = Gefflaut\n | first2 = Trent\n | last2 = Jaeger\n | first3 = Yoonho\n | last3 = Park\n | authorlink4 = Jochen Liedtke\n | first4 = Jochen\n | last4 = Liedtke\n | first5 = Kevin\n | last5 = Elphinstone\n | first6 = Volkmar\n | last6 = Uhlig\n | first7 = Jonathon\n | last7 = Tidswell\n | first8 = Luke\n | last8 = Deller\n | first9 = Lars\n | last9 = Reuther|url=http://dl.acm.org/citation.cfm?id=566726.566751\n | title = The Sawmill multiserver approach\n | booktitle = ACM SIGOPS European Workshop\n | pages = 109–114\n | date = 2000\n | location = Kolding, Denmark\n}}</ref>\n\n===L4Ka::Hazelnut===\nIn 1999, Liedtke took over the Systems Architecture Group at the [[University of Karlsruhe]], where he continued the research into microkernel systems. As a proof of concept that a high performance microkernel could also be constructed in a higher level language, the group developed '''L4Ka::Hazelnut''', a C++ version of the kernel that ran on IA-32- and ARM-based machines. The effort was a success — performance was still acceptable — and with its release the pure assembly language versions of the kernels were effectively discontinued.\n\n===L4/Fiasco===\nIn parallel to the development of L4Ka::Hazelnut, in 1998 the Operating Systems Group [http://www.tudos.org TUD:OS] of the [[TU Dresden]] (Dresden University of Technology) started to develop their own C++ implementation of the L4 kernel interface, called L4/Fiasco. In contrast to L4Ka::Hazelnut, which does not allow concurrency in the kernel at all and its successor L4Ka::Pistachio, which allows interrupts in the kernel only at specific preemption points, '''L4/Fiasco''' was fully preemptible (with the exception of extremely short atomic operations) to achieve a low [[interrupt latency]]. This was considered necessary because L4/Fiasco is used as the basis of DROPS,<ref>http://os.inf.tu-dresden.de/drops/overview.html</ref> a [[Real-time computing|hard real-time]] capable operating system, also developed at the [[TU Dresden]]. However, the complexities of a fully preemptible design prompted later versions of Fiasco to return to the traditional L4 approach of running the kernel with interrupts disabled, except for a limited number of preemption points.\n\n==Platform independence==\n\n===L4Ka::Pistachio===\nUp until the release of L4Ka::Pistachio and newer versions of Fiasco, all L4 microkernels had been inherently tied close to the underlying CPU architecture. The next big shift in L4 development was the development of a platform-independent API that still retained the high performance characteristics despite its higher level of portability.  Although the underlying concepts of the kernel were the same, the new API provided many significant changes relative to previous L4 versions, including better support for multi-processor systems, looser ties between threads and address spaces, and the introduction of user-level thread control blocks (UTCBs) and virtual registers. After releasing the new L4 API (Version X.2 a.k.a. Version 4) in early 2001, the System Architecture Group at the University of Karlsruhe implemented a new kernel, '''L4Ka::Pistachio''', completely from scratch, now with focus on both high performance as well as portability.  It was released under the two-clause [[BSD license]].\n\n===Newer Fiasco versions===\nThe L4/Fiasco microkernel has also been extensively improved over the years. It now supports several hardware platforms ranging from x86 through AMD64 to several ARM platforms. Notably, a version of Fiasco (Fiasco-UX) can run as a user-level application on top of Linux.\n\nL4/Fiasco implements several extensions to the L4v2 API. Exception IPC enables the kernel to send CPU exceptions to user-level handler applications. With the help of [[alien thread]]s it is possible to perform fine-grained control over system calls. X.2-style UTCBs have been added. Furthermore, Fiasco contains mechanisms for controlling communication rights as well as kernel-level resource consumption. On top of Fiasco a collection of basic user level services are developed (called L4Env) that amongst others are used to para-virtualise current Linux version (2.6.x) (called [[L4Linux]]).\n\n===University of New South Wales and NICTA===\nDevelopment also took place at the [[University of New South Wales]] (UNSW), where developers implemented L4 on several 64-bit platforms. Their work resulted in '''L4/MIPS''' and '''L4/Alpha''', resulting in Liedtke's original version being retrospectively named '''L4/x86'''. Like Liedtke's original kernels, the UNSW kernels (written in a mixture of assembly and C) were unportable and each implemented from scratch. With the release of the highly portable L4Ka::Pistachio, the UNSW group abandoned their own kernels in favor of producing highly tuned ports of L4Ka::Pistachio, including the fastest-ever reported implementation of message passing (36 cycles on the [[Itanium]] architecture).<ref name=Gray_CCMH_05>{{cite conference |first1=Charles |last1=Gray |last2=Chapman |first2=Matthew |last3=Chubb |first3=Peter |last4=Mosberger-Tang |first4=David|last5=Heiser |first5=Gernot |authorlink5=Gernot Heiser |title= Itanium&mdash;a system implementor's tale |booktitle= USENIX Annual Technical Conference |pages=264&ndash;278 |date=April 2005 |location= Annaheim, CA, USA |url= http://www.usenix.org/publications/library/proceedings/usenix05/tech/general/gray.html}}</ref> The group has also demonstrated that user-level device drivers can perform as well as in-kernel drivers,<ref name=Leslie_CFGGMPSEH_05>{{cite journal |last1=Leslie |first1=Ben |last2=Chubb |first2=Peter |last3=FitzRoy-Dale |first3=Nicholas |last4=Götz |first4=Stefan |last5=Gray |first5=Charles |last6=Macpherson |first6=Luke |last7=Potts |first7=Daniel |last8=Shen |first8=Yueting |last9=Elphinstone |first9=Kevin |last10=Heiser |first10=Gernot |authorlink10= Gernot Heiser |date=September 2005 |title=User-level device drivers: achieved performance |journal=Journal of Computer Science and Technology |volume=20 |issue=5 |pages=654–664 |doi=10.1007/s11390-005-0654-4}}</ref> and developed [[Wombat OS|Wombat]], a highly portable version of [[Linux]] on L4 that runs on x86, ARM and MIPS processors. On [[XScale]] processors, [[Wombat OS|Wombat]] demonstrates context-switching costs that are up to 30 times lower than in native Linux.<ref name=vanSchaik_Heiser_07>{{cite conference\n | first = Carl\n | last = van Schaik\n | author2 = Heiser, Gernot   \n | authorlink2 = Gernot Heiser\n | title = High-performance microkernels and virtualisation on ARM and segmented architectures\n | booktitle = 1st International Workshop on Microkernels for Embedded Systems\n | pages = 11&ndash;21\n | publisher = NICTA\n | date = January 2007\n | location = Sydney, Australia\n | url = http://ssrg.nicta.com.au/publications/papers/vanSchaik_Heiser_07.abstract.pml\n | accessdate = 2015-10-25\n | archive-url = https://web.archive.org/web/20150301150250/http://ssrg.nicta.com.au/publications/papers/vanSchaik_Heiser_07.abstract\n | archive-date = 2015-03-01\n | dead-url = no\n}}</ref>\n\nLater the UNSW group, at their new home at [[NICTA]], forked L4Ka::Pistachio into a new L4 version called '''NICTA::L4-embedded'''. As the name implies, this was aimed at use in commercial embedded systems, and consequently the implementation trade-offs favored small memory footprints and aimed to reduce complexity. The API was modified to keep almost all system calls short enough that they do not need preemption points to ensure high real-time responsiveness.<ref name=Ruocco_08>{{cite journal\n | first = Sergio\n | last = Ruocco\n | title =   A Real-Time Programmer's Tour of General-Purpose L4 Microkernels\n | journal = EURASIP Journal on Embedded Systems, Special Issue on Operating System Support for Embedded Real-Time Applications\n | doi = 10.1155/2008/234710\n |date=October 2008\n | url=http://www.hindawi.com/getarticle.aspx?doi=10.1155/2008/234710\n | volume = 2008\n | issue =\n | id =\n | language =\n | format =\n | accessdate =\n | laysummary =\n | laysource =\n | laydate =\n | quote =\n | pages = 1–14\n}}</ref>\n\n==Commercial deployment==\nIn November 2005, [[NICTA]] announced<ref>{{cite press release\n| title        = NICTA L4 Microkernel to be Utilised in Select QUALCOMM Chipset Solutions\n| url          = http://www.nicta.com.au/director/mediacentre/media_releases_2005.cfm?viewArticle=true&item_id=2563&startrow=1\n| deadurl      = yes\n| publisher    = NICTA\n| date         = November 24, 2005\n| archiveurl   = https://web.archive.org/web/20060825225104/http://www.nicta.com.au/director/mediacentre/media_releases_2005.cfm?viewArticle=true&item_id=2563&startrow=1\n| archivedate  = August 25, 2006\n}}</ref> that [[Qualcomm]] was deploying NICTA's L4 version on their ''[[Mobile Station Modem]]'' chipsets. This led to the use of L4 in [[mobile phone]] handsets on sale from late 2006. In August 2006, ERTOS leader and UNSW professor [[Gernot Heiser]] spun out a company called [[Open Kernel Labs]] (OK Labs) to support commercial L4 users and further develop L4 for commercial use under the brand name '''OKL4''', in close collaboration with NICTA.  OKL4 Version 2.1, released in April 2008, was the first [[general availability|generally available]] version of L4 which featured [[capability-based security]]. OKL4 3.0, released in October 2008, was the last open-source version of OKL4. More recent versions are closed source and based on a rewrite to support a native hypervisor variant called the OKL4 Microvisor. OK Labs also distributed a paravirtualized Linux called OK:Linux, a descendant of Wombat, as well as paravirtualized versions of [[SymbianOS]] and [[Android (operating system)|Android]]. OK Labs also acquired the rights to '''seL4''' from NICTA.\n\nOKL4 shipments exceeded 1.5 billion in early 2012,<ref name=OKL_PR /> mostly on Qualcomm wireless modem chips. Other deployments include automotive infotainment systems.<ref name=OKL_PR_auto>{{cite press release\n |title=Open Kernel Labs Automotive Virtualization Selected by Bosch for Infotainment Systems\n |url=http://www.ok-labs.com/releases/release/ok-labs-automotive-virtualization-selected-by-bosch-forinfotainment-systems\n |date=March 27, 2012 \n |publisher=[[Open Kernel Labs]]\n |dead-url=yes\n |archive-url=https://web.archive.org/web/20120702191648/http://www.ok-labs.com/releases/release/ok-labs-automotive-virtualization-selected-by-bosch-forinfotainment-systems\n |archive-date=July 2, 2012}}</ref>\n\n[[Apple mobile application processors]] beginning with the [[Apple A7|A7]] contain a Secure Enclave [[coprocessor]] running an L4 operating system<ref>{{cite web|title=iOS Security|url=https://www.apple.com/business/docs/iOS_Security_Guide.pdf|publisher=Apple Inc.|date=September 2015}}</ref>\nbased on the L4-embedded kernel developed at [[NICTA]] in 2006.<ref>{{cite conference\n| last = Mandt\n| first = Tarjei\n| author2 = Solnik, Mathew\n| author3 = Wang, David\n| title = Demystifying the Secure Enclave Processor\n| url = https://www.blackhat.com/docs/us-16/materials/us-16-Mandt-Demystifying-The-Secure-Enclave-Processor.pdf\n| booktitle = BlackHat USA\n| date = July 31, 2016\n| location = Las Vegas, NV, USA\n}}</ref>\nThis implies that L4 is now shipping on all iOS devices, the total shipment of which is estimated at 310 million for the year 2015.<ref>{{cite news\n |last=Elmer-DeWitt \n |first=Philip \n |date=October 28, 2014 \n |title=Forecast: Apple will ship 310 million iOS devices in 2015 \n |url=http://fortune.com/2014/10/28/forecast-apple-will-ship-310-million-ios-devices-in-2015 \n |dead-url=no \n |magazine=[[Fortune (magazine)|Fortune]] \n |archive-url=https://www.webcitation.org/6cYGQRqLu?url=http://fortune.com/2014/10/28/forecast-apple-will-ship-310-million-ios-devices-in-2015/ \n |archive-date=October 25, 2015 \n |access-date=October 25, 2015 \n |df= \n}}</ref>\n\n==High assurance: seL4==\nIn 2006, the [[NICTA]] group commenced a from-scratch design of a [[microkernel#Third generation|third-generation microkernel]], called [http://seL4.systems '''seL4'''], with the aim of providing a basis for highly secure and reliable systems, suitable for satisfying security requirements such as those of [[Common Criteria]] and beyond. From the beginning, development aimed for [[formal verification]] of the kernel. To ease meeting the sometimes conflicting requirements of performance and verification, the team used a [[middle-out]] software process starting from an executable specification written in [[Haskell (programming language)|Haskell]].<ref name=Derrin_EKCC_06>{{cite conference\n | first = Philip\n | last = Derrin\n | author2 = Elphinstone, Kevin |author3=Klein, Gerwin |author4=Cock |author5=David |author6= Chakravarty, Manuel M. T.\n | title = Running the manual: an approach to high-assurance microkernel development\n | booktitle = ACM SIGPLAN Haskell Workshop\n |date=September 2006\n | pages = 60&ndash;71\n | location = [[Portland, Oregon]]\n | url = http://portal.acm.org/citation.cfm?id=1159842.1159850&coll=portal&dl=ACM&type=series&idx=1159842&part=Proceedings&WantType=Proceedings&title=Haskell&CFID=18785943&CFTOKEN=93152956\n}}</ref>\nseL4 uses [[Capability-based security|capability-based access control]] to enable formal reasoning about object accessibility.\n\nA formal proof of functional correctness was completed in 2009.<ref Name=\"Klein_EHACDEEKNSTW_09\">\n{{ cite conference\n | first1 = Gerwin\n | last1 = Klein\n | first2 = Kevin\n | last2 = Elphinstone\n | first3 = Gernot\n | last3 = Heiser\n | author3-link = Gernot Heiser\n | first4 = June\n | last4 = Andronick\n | first5 = David\n | last5 = Cock\n | first6 = Philip\n | last6 = Derrin\n | first7 = Dhammika\n | last7 = Elkaduwe\n | first8 = Kai\n | last8 = Engelhardt\n | first9 = Rafal\n | last9 = Kolanski\n | first10 = Michael\n | last10 = Norrish\n | first11 = Thomas\n | last11 = Sewell\n | first12 = Harvey\n | last12 = Tuch\n | first13 = Simon\n | last13 = Winwood\n | title = seL4: Formal verification of an OS kernel\n | booktitle = 22nd ACM Symposium on Operating System Principles\n | pages =\n |date=October 2009\n | location = Big Sky, MT, USA\n | doi =\n | url = http://www.sigops.org/sosp/sosp09/papers/klein-sosp09.pdf\n}}</ref>\nThe proof provides a guarantee that the kernel's implementation is correct against its specification, and implies that it is free of implementation bugs such as deadlocks, livelocks, buffer overflows, arithmetic exceptions or use of uninitialised variables. seL4 is claimed to be the first-ever general-purpose operating-system kernel that has been verified.<ref Name=\"Klein_EHACDEEKNSTW_09\" />\n\nseL4 takes a novel approach to kernel resource management,<ref Name=\"Elkaduwe_DE_08\">\n{{ cite conference\n | first = Dhammika\n | last = Elkaduwe |author2=Derrin, Philip |author3=Elphinstone, Kevin\n | title = Kernel design for isolation and assurance of physical memory\n | booktitle = 1st Workshop on Isolation and Integration in Embedded Systems\n |date=April 2008\n | location = Glasgow, UK\n | doi = 10.1145/1435458\n | url = http://ertos.nicta.com.au/publications/papers/Elkaduwe_DE_08.abstract\n}}</ref> exporting the management of kernel resources to user level and subjects them to the same [[capability-based security|capability-based]] access control as user resources.  This model, which was also adopted by [[Barrelfish]], simplifies reasoning about isolation properties, and was an enabler for later proofs that seL4 enforces the core security properties of integrity and confidentiality.<ref name=\"Klein_AEMSKH_14\">{{cite journal\n | last1 = Klein\n | first1 = Gerwin\n | last2 = Andronick\n | first2 = June\n | last3 = Elphinstone\n | first3 = Kevin\n | last4 = Murray\n | first4 = Toby\n | last5 = Sewell\n | first5 = Thomas\n | last6 = Kolanski\n | first6 = Rafal\n | last7 = Heiser\n | first7 = Gernot\n | date = February 2014\n | title = Comprehensive Formal Verification of an OS Microkernel\n | journal = ACM Transactions on Computer Systems\n | volume = 32\n | issue = 1\n | pages = 2:1–2:70\n | doi = 10.1145/2560537\n }}</ref> The NICTA team also proved correctness of the translation from C to executable machine code, taking the [[compiler]] out of the [[trusted computing base]] of seL4. This implies that the high-level security proofs hold for the kernel executable. seL4 is also the first published protected-mode OS kernel with a complete and sound worst-case execution-time (WCET) analysis, a prerequisite for its use in hard [[real-time systems]].<ref name=\"Klein_AEMSKH_14\" />\n\nOn 29 July 2014, [[NICTA]] and [[General Dynamics C4 Systems]] announced that seL4, with end to end proofs, was now released under [[open source]] licenses.<ref name=seL4_OSS>{{cite press release\n |title= Secure operating system developed by NICTA goes open source\n |url=https://www.nicta.com.au/category/research/media-releases/secure-operating-system-developed-by-nicta-goes-open-source/\n |date=July 29, 2014 |publisher=[[NICTA]]}}</ref>\nThe kernel source and proofs are under [[GPLv2]], and most libraries and tools are under the [[BSD licenses#2-clause license .28.22Simplified BSD License.22 or .22FreeBSD License.22.29|2-clause BSD]] license.\n\nThe researchers state that the cost of formal software verification is lower than the cost of engineering traditional \"high-assurance\" software despite providing much more reliable results.<ref>{{cite journal | last1 = Klein | first1 = Gerwin | last2 = Andronick | first2 = June | last3 = Elphinstone | first3 = Kevin | last4 = Murray | first4 = Toby | last5 = Sewell | first5 = Thomas | last6 = Kolanski | first6 = Rafal | last7 = Heiser | first7 = Gernot | year = 2014 | title = Comprehensive formal verification of an OS microkernel | url = http://www.nicta.com.au/pub?doc=7371&filename=Klein_AEMSKH_14.pdf | format = PDF | journal = ACM Transactions on Computer Systems | volume = 32 | issue = | page = 64 | doi = 10.1145/2560537 }}</ref> Specifically, the cost of one [[source lines of code|line of code]] during the development of seL4 was estimated at around {{USD|400}}, compared to {{USD|1000}} for traditional high-assurance systems.<ref>{{YouTube|lRndE7rSXiI|seL4 Is Free – What Does This Mean For You?}}</ref>\n\nUnder the [[DARPA]] [http://www.darpa.mil/Our_Work/I2O/Programs/High-Assurance_Cyber_Military_Systems_(HACMS).aspx High-Assurance Cyber Military Systems] (HACMS) program, NICTA together with project partners [[Rockwell Collins]], [http://galois.com Galois Inc], the [[University of Minnesota]] and [[Boeing]] developed a [http://ssrg.nicta.com.au/projects/TS/SMACCM/ high-assurance drone] based on seL4, along with other assurance tools and software, with planned technology transfer onto the optionally piloted autonomous [[Boeing AH-6|Unmanned Little Bird]] helicopter under development by Boeing.  Final demonstration of the HACMS technology took place in Sterling, VA in April 2017.<ref name=hacms_demo>{{cite press release\n |title= DARPA selects Rockwell Collins to apply cybersecurity technology to new platforms\n |url=https://www.rockwellcollins.com/Data/News/2017-Cal-Yr/GS/FY17GSNR38-HACMS.aspx\n |date=April 24, 2017 |publisher=[[Rockwell_Collins]]}}</ref> DARPA also funded several Small Business Innovative Research (SBIR) contracts related to seL4 under a program started by Dr. [[John Launchbury]].  Small businesses receiving an seL4-related SBIR included: DornerWorks, Techshot, Wearable Inc, Real Time Innovations, and Critical Technologies.<ref name=sbir_sel4>\n{{cite web |url=https://sbirsource.com/sbir/people/81829-dr-john-launchbury\n |title=DARPA Agency Sponsor Dr. John Launchbury\n |author=<!--Not stated--> \n|date=2017 |website=SBIRSource |access-date=May 16, 2017}}</ref>\n\n==Other research and development==\nOsker, an OS written in [[Haskell (programming language)|Haskell]], targeted the L4 specification; although this project focused on the use of a [[functional programming]] language for OS development, not on microkernel research per se.<ref>{{Cite journal\n | title = A principled approach to operating system construction in Haskell\n | url = http://web.cecs.pdx.edu/~apt/icfp05.pdf\n | year = 2005\n | journal = Proceedings of the tenth ACM SIGPLAN international conference on Functional programming\n | pages = 116–128\n | last1 =  Hallgren\t | first1 =  T.\n | last2 =  Jones\t | first2 =  M.P.\n | last3 =  Leslie\t | first3 =  R.\n | last4 =  Tolmach\t | first4 =  A.\n | issn = 0362-1340\n | doi=10.1145/1090189.1086380\n | accessdate = 2010-06-24\n | volume = 40\n | postscript = <!--None-->\n | issue = 9\t}}</ref>\n\nCodeZero is an L4 microkernel targeting embedded systems with a focus on virtualization and implementation of native OS services. There is a [[GPL 3|GPL]]-licensed version,<ref>{{cite web | url=https://github.com/jserv/codezero | title=jserv/codezero: Codezero Microkernel | accessdate=2016-01-25 }}</ref> and a version that was relicensed by the developers as closed source and forked in 2010.<ref>{{cite web|url=http://l4dev.org/ |title=Archived copy |accessdate=January 25, 2016 |deadurl=yes |archiveurl=https://web.archive.org/web/20160111122321/http://l4dev.org/ |archivedate=January 11, 2016 }}</ref><!-- clarify OKL4 and Iggy license|date=February 2015 -->\n\n[https://github.com/f9micro F9 microkernel], a [[BSD license|BSD]]-licensed L4 implementation, is built from scratch for deeply embedded devices with performance on ARM Cortex-M3/M4 processors, power consumption, and memory protection in mind.\n\nFiasco.OC is a third generation microkernel, which evolved from its predecessor L4/Fiasco. Fiasco.OC is capability based, supports\nmulti-core systems and hardware assisted virtualization.<ref name=Peter_Schild_VTDS_09>{{cite conference\n | first = Michael\n | last = Peter\n | first2 = Henning\n | last2 = Schild |author3=Lackorzynski, Adam |author4=Warg, Alexander\n | title = Virtual Machines Jailed - Virtualization in Systems with Small Trusted Computing Bases\n | booktitle = VTDS'09: Workshop on Virtualization Technology for Dependable Systems\n |date=March 2009\n | location = [[Nuremberg, Germany]]\n | url = http://portal.acm.org/citation.cfm?id=1518688&dl=ACM\n}}</ref> The completely redesigned user-land environment running on top of Fiasco.OC is called L4 Runtime Environment (L4Re). It provides the framework to build multi-component systems, including a client/server communication framework, common service functionality, a virtual file-system infrastructure and popular libraries such as a C library, libstdc++ and pthreads. The platform also offers [http://os.inf.tu-dresden.de/L4/LinuxOnL4 L4Linux], the multi-architecture virtualized Linux system. L4Re and Fiasco.OC run on x86 (IA-32 and AMD64), ARM and PowerPC (WiP), and supersede the previous system with L4Env and L4/Fiasco.\n\nThe NOVA OS Virtualization Architecture is a research project with focus on constructing a secure and efficient virtualization environment<ref name=Steinberg_Kauer_EuroSys_2010>{{cite conference\n | first  = Udo\n | last   = Steinberg\n | first2 = Kauer\n | last2  = Bernhard\n | title  = NOVA: A Microhypervisor-Based Secure Virtualization Architecture\n | booktitle = EuroSys '10: Proceedings of the 5th European Conference on Computer Systems\n |date=April 2010\n | location = [[Paris, France]]\n}}</ref><ref name=Steinberg_Kauer_IIDS_2010>{{cite conference\n | first  = Udo\n | last   = Steinberg\n | first2 = Kauer\n | last2  = Bernhard\n | title  = Towards a Scalable Multiprocessor User-level Environment\n | booktitle = IIDS'10: Workshop on Isolation and Integration for Dependable Systems\n |date=April 2010\n | location = [[Paris, France]]\n}}</ref>\nwith a small trusted computing base. NOVA consists of a microhypervisor, a user level [[Virtual machine monitor|virtual-machine monitor]], and an unprivileged componentised multi-server user environment running on top of it called NUL. NOVA runs on x86-based multi-core systems.\n\n==References==\n{{Reflist|colwidth=30em}}\n\n==Further reading==\n* Jochen Liedtke, Ulrich Bartling, Uwe Beyer, Dietmar Heinrichs, Rudolf Ruland, Gyula Szalay. ''[http://portal.acm.org/citation.cfm?id=122124&dl=ACM&coll=&CFID=15151515&CFTOKEN=6184618 Two years of experience with a μ-Kernel based OS]'', ACM Press 1991\n* {{Cite conference\n |first       = Jochen\n |last        = Liedtke\n |authorlink  = Jochen Liedtke\n |author2     = Haeberlen, Andreas\n |author3     = Park, Yoonho\n |author4     = Reuther, Lars\n |author5     = Uhlig, Volkmar\n |date        = 2000-10-22\n |title       = Stub-Code Performance is Becoming Important\n |booktitle   = In Proceedings of the 1st Workshop on Industrial Experiences with Systems Software (WIESS), San Diego, CA, October 2000\n |url         = http://l4ka.org/publications/\n |format      = PDF\n |accessdate  = 2006-09-05\n |deadurl     = yes\n |archiveurl  = https://web.archive.org/web/20060905181634/http://www.l4ka.org/publications/\n |archivedate = 2006-09-05\n |df          = \n}} (on L4 kernel and compiler)\n* Cheng Guanghui, Nicholas Mc Guire. ''[https://web.archive.org/web/20120327161621/http://dslab.lzu.edu.cn:8080/docs/publications/l4_kickstart.pdf L4/Fiasco/L4Linux Kickstart]'', Distributed & Embedded Systems Lab - Lanzhou University\n* {{Cite conference\n | first1 = Kevin\n | last1 = Elphinstone\n | first2 = Gernot\n | last2 = Heiser\n | authorlink2 = Gernot Heiser\n | date = October 2014\n | title = From L3 to seL4: What Have We Learnt in 20 Years of L4 Microkernels?\n | booktitle = 24th ACM SIGOPS Symposium on Operating Systems Principles\n | location = Farmington, PA, USA\n | pages = 133–150\n | url =\n http://ssrg.nicta.com.au/publications/nictaabstracts/Elphinstone_Heiser_13.abstract.pml\n}} Evolution of L4 design and implementation approaches\n\n==External links==\n* {{Official website|www.l4hq.org}}, L4Hq: L4 headquarters, community site for L4 projects\n* [http://os.inf.tu-dresden.de/L4/ The L4 microkernel family]: Overview over L4 implementations, documentation and projects\n* [http://wiki.tudos.org/ Official TUD:OS Wiki]\n* [http://www.l4ka.org L4Ka]: Implementations L4Ka::Pistachio and L4Ka::Hazelnut\n* [http://www.cse.unsw.edu.au/~disy/L4/ UNSW]: Implementations for [[DEC Alpha]] and [[MIPS architecture]]\n* [http://okl4.org/ OKL4]: Commercial L4 version from [http://www.ok-labs.com/ Open Kernel Labs]\n* [http://ertos.nicta.com.au/research/l4/ NICTA L4]: Research Overview and Publications\n* [http://genode.org/about/index Genode Operating System Framework], an offspring of the L4 community\n\n{{Microkernel}}\n\n[[Category:Microkernels]]\n[[Category:Software written primarily in assembly language]]",
            "slug": "l4-microkernel-family",
            "date_updated": 1519555379132,
            "imported": "https://en.wikipedia.org/wiki/L4_microkernel_family"
        }
    ]
}