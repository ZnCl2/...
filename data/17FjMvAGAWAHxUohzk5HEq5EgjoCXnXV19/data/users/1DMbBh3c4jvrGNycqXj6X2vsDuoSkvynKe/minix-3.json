{
    "article": [
        {
            "title": "MINIX_3",
            "text": "{{Infobox OS\n| name                  = MINIX 3\n| logo                  = \n| screenshot            = Minix 3.png\n| caption               = Minix 3 running [[X11]] with [[Twm|twm]] as Window Manager.\n| developer             = [[Andrew S. Tanenbaum]]\n| family                = [[Unix-like]]\n| working state         = Current\n| source model          = [[Open-source model|Open source]]\n| released              = {{Start date and age|2005|10|24|df=yes}}\n| frequently updated     = yes <!-- Release version update? Don't edit this page, just click on the version number! -->\n| latest preview version= \n| latest preview date   = <!-- {{Start date and age|201?|MM|DD|df=yes}} -->\n| marketing target      = [[Embedded system]]s, [[education]]\n| programmed in         = [[C (programming language)|C]], [[assembly language]]\n| language              = English\n| language count        = \n| update model          = <!-- APT, etc. -->\n| package manager       = <!-- dpkg, rpm, etc. -->\n| supported platforms   = [[IA-32]], [[ARM architecture|ARM]]\n| kernel type           = [[Microkernel]]\n| userland              = MINIX, [[NetBSD]]\n| ui                    = [[Almquist shell|ash]]\n| license               = custom [[Permissive software licence|permissive license]]\n| preceded by           = [[MINIX]] 1 and 2\n| succeeded by          = \n| website               = {{URL|www.minix3.org}}\n}}\n\n'''MINIX 3''' is a project to create a small, [[high availability]], high functioning [[Unix-like]] [[operating system]]. It is published under a [[BSD licenses|BSD license]] and is a successor project to the earlier versions, [[MINIX]] 1 and 2.\n\nThe main goal of the project is for the system to be [[fault-tolerant]] by detecting and repairing its own faults on the fly, with no user intervention. The main uses of the system are envisaged to be [[embedded system]]s and education.<ref>{{cite web|author=[Posted October 24, 2005 by corbet] |url=https://lwn.net/Articles/156828/ |title=Minix 3 hits the net |publisher=Lwn.net |date=2005-10-24 |access-date=2014-05-01}}</ref>\n\n{{As of|2017}}, MINIX 3 supports [[IA-32]] and [[ARM architecture]] processors.<ref name=\"homepage\">{{cite web|url=http://www.minix3.org |title=minix3.org |publisher=minix3.org |access-date=2017-04-16}}</ref> It can also run on [[emulator]]s or [[virtual machine]]s, such as [[Bochs]],<ref>{{cite web|url=http://www.woodhull.com/newfaq/faq/bochstart.html |title=Getting Started with Minix on Bochs on Mac OS |publisher=Woodhull.com |access-date=2014-05-01}}</ref><ref>{{cite web|url=http://www.osnews.com/story.php?news_id=7303 |title=OSNews.com |publisher=OSNews.com |access-date=2014-05-01}}</ref> [[VMware Workstation]],<ref>{{cite web|url=http://patrick.wagstrom.net/projects/academic/cs551/minix.html |title=Minix under VMWare Installation How-To |publisher=Patrick.wagstrom.net |access-date=2014-05-01}}</ref> [[Microsoft Virtual PC]],<ref>{{cite web|url=http://www.woodhull.com/newfaq/faq/pre-vpc.html |title=Minix on Virtual PC: first look |publisher=Woodhull.com |access-date=2014-05-01}}</ref> Oracle [[VirtualBox]],<ref>{{cite web|url=http://www.inopinion.org/howto/install-minix-3-on-virtual-box/ |title=Minix 3 on Virtual box |publisher=inopinion.org}}</ref> and [[QEMU]]. A port to [[PowerPC]] architecture is in development.<ref>{{cite web|url=http://www.minix3.org/doc/alting_thesis.pdf |title=A port of the MINIX OS to the PowerPC platform |author=Ingmar Alting}}</ref>\n\nThe distribution comes on a [[live CD]] and can be downloaded as a [[live USB]] stick image.<ref>{{cite web|url=http://www.minix3.org/download |title=Minix3 |publisher=Minix3 |access-date=2014-05-01}}</ref> The latest release is \"minix_R3.4.0rc6-d5e4fc0.iso.bz2\" (09 May 2017).<ref>http://download.minix3.org/iso/snapshot/</ref>\n\nMINIX 3 is believed to be used in the [[Intel Management Engine|Intel ME]] found in Intel's [[Platform Controller Hub]] beginning with the introduction of ME 11 which is used with [[Skylake_(microarchitecture)|Skylake]]/[[Kaby Lake]] processors.<ref>{{Cite web|url=http://blog.ptsecurity.com/2017/04/intel-me-way-of-static-analysis.html|title=Intel ME: The Way of Static Analysis|website=blog.ptsecurity.com|access-date=2017-08-28}}</ref><ref>{{Citation|last=Corna|first=Nicola|title=me_cleaner: Tool for partial deblobbing of Intel ME/TXE firmware images|date=2017-08-28|url=https://github.com/corna/me_cleaner|accessdate=2017-08-28}}</ref>\n\nBecause of its use in the [[Intel Management Engine]] (ME), MINIX 3 is now considered the most widely used OS on Intel processors, with more installations than Microsoft Windows, GNU/Linux, or macOS.<ref>http://www.cs.vu.nl/~ast/intel/</ref>\n\n== Goals of the project ==\n[[File:OS-structure.svg|thumb|Structure of [[monolithic kernel]] and [[microkernel]]-based operating systems, respectively]]\n\nReflecting on the nature of [[monolithic kernel]] based systems, where a driver (which has, according to MINIX creator [[Andrew S. Tanenbaum|Tanenbaum]], approximately 3–7 times as many bugs as a usual program)<ref>{{cite web |last= Tanenbaum |first= Andy |authorlink= Andrew S. Tanenbaum |title= Introduction to MINIX 3 |work= OSnew |publisher= OSnews |date= 2006-09-25 |url= http://osnews.com/story.php/15960/Introduction-to-MINIX-3 |access-date= 2008-07-04 |quote= From ''Rebirth'' section: \"Various studies have shown that software broadly contains something like 6-16 bugs per 1000 lines of code and that device drivers have 3-7 times as many bugs as the rest of the operating system. When combined with the fact that 70% of a typical operating system consists of device drivers, it is clear that device drivers are a big source of trouble. For [[Windows XP]], 85% of the crashes are due to bugs in device drivers. Obviously, to make OSes reliable, something has to be done to deal with buggy device drivers. Building a reliable system despite the inevitable bugs in device drivers was the original driving force behind MINIX 3.\"}}</ref> can bring down the whole system,<ref>{{cite web|url=http://www.csail.mit.edu/events/eventcalendar/calendar.php?show=event&id=1128 |title=CSAIL Event Calendar |publisher=Csail.mit.edu |access-date=2014-05-01}}</ref> MINIX 3 aims to create an operating system that is a \"reliable, self-healing, multiserver Unix clone\".<ref name= \"reliable-os\">{{cite web|url=http://www.cs.vu.nl/~ast/reliable-os/ |title=Tanenbaum-Torvalds debate, Part II |publisher=Cs.vu.nl |date=2006-05-12 |access-date=2014-05-01}}</ref>\n\nTo achieve that, the code running in kernel must be minimal, with the file server, process server, and each device driver running as separate user-mode processes. Each driver is carefully monitored by a part of the system named the ''reincarnation server''. If a driver fails to respond to pings from this server, it is shut down and replaced by a fresh copy of the driver.\n\nIn a monolithic system, a bug in a driver can easily crash the whole kernel. This is far less likely to occur in MINIX 3.<ref>http://www.MINIX3.org/reliability.html  {{webarchive|url=https://web.archive.org/web/20060701163916/http://www.minix3.org/reliability.html |date=July 1, 2006 }}</ref>\n{{Clear}}\n\n== History ==\n{| class=\"wikitable sortable\" style=\"float:right; width:350px; margin-left:25px; text-align: left; font-size:80%\"\n|+ MINIX 3 versions<ref>{{cite web |url=http://wiki.minix3.org/en/MinixReleases |title=MinixReleases – Minix Wiki |publisher=Wiki.minix3.org |access-date=2014-05-01 |deadurl=yes |archiveurl=https://www.webcitation.org/68WUo9Bot?url=http://wiki.minix3.org/en/MinixReleases |archivedate=2012-06-18 |df= }}</ref>\n|-\n! Version\n! Release date\n! Description\n|-\n| style=\"white-space:nowrap; background:orange;\"| 3.1.0\n|2005-10-24\n|\n*The first release of MINIX 3 (Book Release).\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.2a\n|2006-05-29\n|\n*New Packman package manager. \n*Fixed an installation issue with auto-partitioning disks. \n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.3\n|2007-04-13\n|\n*Added new [[virtual file system]]\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.3a\n|2007-06-08\n|\n*Bug fixes.\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.4\n|2009-06-09\n|\n*[[Virtual memory]] support. \n*Improved [[virtual machine]] support (when MINIX runs as guest).\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.5\n|2009-11-05\n|\n*Improvements performance\n*[[Shared memory (interprocess communication)|Shared memory]]\n*setitimer function\n*[[ISO 9660]] file system\n*[[Open Sound System]]\n*Trap NULL accesses now, for user convenience\n*Improved signal handling\n*Better support for debuggers ([[ptrace]] improvements, etc.)\n*Network card autodetection (for supported [[PCI card]]s), improved network configuration \n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.6\n|2010-02-08\n|\n*New Network drivers: Atheros L2, Intel E1000, Realtek 8169, DEC Tulip\n*PipeFS – removed pipe handling from filesystem drivers\n*HGFS – support for mounting [[VMware Workstation|VMware shared folders]] as [[file system]]\n*VFS: supplemental group support and [[sticky bit]] support\n*[[Floating-point unit]] support\n*System Event Framework (SEF) \n*Experimental [[Advanced Programmable Interrupt Controller|APIC]] support\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.7\n|2010-06-16\n|\n*Userspace scheduling and a scheduling server<ref>{{cite web |url=http://www.minix3.org/docs/scheduling/report.pdf |format=PDF |title=Individual Programming Assignment User Mode Scheduling in MINIX 3 |author= Björn Patrick Swift |publisher=Minix3.org}}</ref>\n*Proper support for multiple Ethernet cards of the same type\n*Boot monitor allows loading images > 16 MB\n*Buildsystem support for building MINIX with [[GNU Compiler Collection|GCC]]\n*Support for the [[cp1251]] and [[KOI8-U|koi8-u]] charsets\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.1.8\n|2010-10-04\n|\n*New package management infrastructure: [[pkgsrc]] and [[pkgin]]\n*[[Unix domain socket]] support \n*Multiboot support \n*[[ext2]] support \n*[[Advanced Configuration and Power Interface|ACPI]] driver\n*full [[Advanced Programmable Interrupt Controller|APIC]] mode including I/O APICs\n*Experimental [[Advanced Host Controller Interface|AHCI]] support\n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.2.0\n|2012-02-29\n|\n*Porting [[GNU Debugger]] to MINIX 3 and implementing core dumping support\n*[[Filesystem in Userspace|FUSE]] support with experimental [[NTFS-3G]] file system\n*Gradually replacing [[User space|userland]], from MINIX to [[NetBSD]]\n*Replacing the default compiler [[Amsterdam Compiler Kit|ACK]] with [[Clang]]; [[GNU Compiler Collection|GCC]] is also supported\n*Switch to [[Executable and Linkable Format|ELF]] and NetBSD [[libc]] libraries \n*Pkgsrc upstreaming and application porting\n*Asynchronous [[virtual filesystem]] (VFS) server\n*Replacing the bootloader from MINIX to [[NetBSD]]\n*[[Native Command Queuing|NCQ]] support in the [[Advanced Host Controller Interface|AHCI]] driver \n|-\n|style=\"white-space:nowrap; background:salmon;\" | 3.2.1\n| 2013-02-21\n|\n* Support for dynamically linked executables \n* Removal of Intel [[Memory segmentation|segments]]\n* Dropped support for [[a.out]] binaries \n* [[Cross-compilation]] support\n* [[Device Driver Environment kit]] support\n* VBFS – support for mounting [[VirtualBox]] Shared Folder as [[file system]]\n|-\n|style=\"white-space:nowrap; background:#a0e75a;\" | 3.4.0 rc6\n| 2017-05-09\n|\n* ARM architecture support; cross-compilable\n* Support for <code>mmap()</code> I/O mechanism; allows for shared dynamic libraries and lower memory needs\n* New input infrastructure: input server and keyboard driver separated from TTY\n* VND: vnode disk (loopback) block driver\n* [[LLVM]] Bitcode build of the system\n* Import of [[LLVM]] and [[clang]] in the sources\n* Unified block cache shared by FSes and VM\n* Improved NetBSD compatibility: utilities, calls, types (lots of 64-bit), toolchain, codebase, and packages\n* C type for messages: cleaner, bigger{{clarify|date=June 2015}}\n* Improved driver modularity: UDS separate from PFS, PTY from TTY, one controller per at_wini instance, LOG removed from boot image\n* Packages are now dynamically linked\n|- \n| colspan=\"3\" |\n*{{legend|orange|Book Release}}\n*{{legend|salmon|Old release}}\n*{{legend|#A0E75A|Current stable release}}\n*{{legend|lightblue|Current development release}}\n|}\nMINIX 3 was publicly announced on 24 October 2005 by Andrew Tanenbaum during his keynote speech on top of the [[Association for Computing Machinery]] (ACM) Symposium Operating Systems Principles conference. Although it still serves as an example for the new edition of Tanenbaum and Woodhull's textbook, it is comprehensively redesigned to be \"usable as a serious system on resource-limited and embedded computers and for applications requiring high reliability.\"\n\n== Reliability policies ==\nOne of the main goals of MINIX 3 is reliability. Below, some of the more important principles that enhance its reliability are discussed.\n\n===Reduce kernel size===\nMonolithic operating systems such as [[Linux]] and [[FreeBSD]] and hybrids like [[Microsoft Windows|Windows]] have millions of lines of [[Kernel (operating system)|kernel]] code. In contrast, MINIX 3 has about 6,000 lines of executable kernel code,<ref>{{cite web|url=http://www.minix3.org/ |title=The MINIX 3 Operating System |work=minix3.org |archive-url=https://www.webcitation.org/64sAstWXM?url=http://www.minix3.org/ |archive-date=2012-01-22 |deadurl=yes |df= }}</ref> which can make problems easier to find in the code.\n\n===Cage the bugs===\nIn monolithic kernels, [[device driver]]s reside in the kernel. Thus, when a new peripheral is installed, unknown, untrusted code is inserted in the kernel. One bad line of code in a driver can bring down the system.\n\nInstead, in MINIX 3, each device driver is a separate user-mode process. Drivers cannot execute privileged instructions, change the [[page table]]s, perform arbitrary [[input/output]] (I/O), or write to absolute memory. They must make kernel calls for these services and the kernel checks each call for authority.\n\n===Limit drivers' memory access===\nIn monolithic kernels, a driver can write to any word of memory and thus accidentally corrupt user programs.\n\nIn MINIX 3, when a user expects data from, for example, the file system, it builds a descriptor telling who has access and at what addresses. It then passes an index to this descriptor to the file system, which may pass it to a driver. The file system or driver then asks the kernel to write via the descriptor, making it impossible for them to write to addresses outside the buffer.\n\n===Survive bad pointers===\nDereferencing a bad [[Pointer (computer programming)|pointer]] within a driver will crash the driver process, but will have no effect on the system as a whole. The reincarnation server will restart the crashed driver automatically. For some drivers (e.g., disk and network) recovery is transparent to user processes. For others (e.g., audio and printer), the user may notice. In monolithic kernels, dereferencing a bad pointer in a driver normally leads to a system crash.\n\n===Tame infinite loops===\nIf a driver gets into an [[infinite loop]], the scheduler will gradually lower its priority until it becomes idle. Eventually the reincarnation server will see that it is not responding to status requests, so it will kill and restart the looping driver. In a monolithic kernel, a looping driver could hang the system.\n\n===Limit damage from buffer overflows===\nMINIX 3 uses fixed-length messages for internal communication, which eliminates certain [[buffer overflow]]s and buffer management problems. Also, many exploits work by overrunning a buffer to trick the program into returning from a function call using an overwritten stack return address pointing into attacker controlled memory, usually the overrun buffer. In MINIX 3, this attack is mitigated because instruction and data space are split and only code in (read-only) instruction space can be executed, termed [[executable space protection]]. However attacks which rely on running legitimately executable memory in a malicious way ([[return-to-libc]], [[return-oriented programming]]) are not prevented by this mitigation.\n\n===Restrict access to kernel functions===\nDevice drivers obtain [[kernel service]]s (such as copying data to users' address spaces) by making kernel calls. The MINIX 3 kernel has a bit map for each driver specifying which calls it is authorized to make. In monolithic kernels, every driver can call every kernel function, authorized or not.\n\n===Restrict access to I/O ports===\nThe kernel also maintains a table telling which [[I/O port]]s each driver may access. Thus, a driver can only touch its own I/O ports. In monolithic kernels, a buggy driver can access I/O ports belonging to another device.\n\n===Restrict communication with OS components===\nNot every driver and server needs to communicate with every other driver and server. Accordingly, a per-process bit map determines which destinations each process may send to.\n\n===Reincarnate dead or sick drivers===\nA special process, called the reincarnation server, periodically pings each device driver. If the driver dies or fails to respond correctly to pings, the reincarnation server automatically replaces it with a fresh copy. Detecting and replacing non-functioning drivers is automatic, with no user action needed. This feature does not work for disk drivers at present, but in the next release the system will be able to recover even disk drivers, which will be shadowed in [[random-access memory]] (RAM).<!-- What version? Is this comment still up-to-date? Specifics would help. --> Driver recovery does not affect running processes.\n\n=== Integrate interrupts and messages ===\nWhen an [[interrupt]] occurs, it is converted at a low level to a notification sent to the appropriate driver. If the driver is waiting for a message, it gets the interrupt immediately; otherwise it gets the notification the next time it does a <code>RECEIVE</code> to get a message. This scheme eliminates nested interrupts and makes driver programming easier.\n\n== Architecture ==\n[[File:The MINIX 3 Microkernel Architecture.png|thumb|400px|The architecture of MINIX 3]]\n\nAs can be seen, at the bottom level is the [[microkernel]], which is about 4,000 lines of code (mostly in [[C (programming language)|C]], plus a small amount of [[assembly language]]). It handles [[interrupt]]s, [[Scheduling (computing)|scheduling]], and message passing. It also supports an [[application programming interface]] (API) of about 30 kernel calls that authorized servers and drivers can make. User programs cannot make these calls. Instead, they can issue [[POSIX]] [[system call]]s which send messages to the servers. The kernel calls perform functions such as setting interrupts and copying data between address spaces.\n\nAt the next level up, there are the [[device driver]]s, each one running as a separate [[User space|userland]] process. Each one controls some I/O device, such as a disk or printer. The drivers do not have access to the I/O port space and cannot issue I/O instructions directly. Instead, they must make kernel calls giving a list of I/O ports to write to and the values to be written. While there is a small amount of overhead in doing this (typically 500&nbsp;ns), this scheme makes it possible for the kernel to check authorization, so that, for example, the audio driver cannot write on the disk.\n\nAt the next level there are the [[Server (computing)|servers]]. This is where nearly all the operating system functionality is located. User processes obtain file service, for example, by sending messages to the file server to open, close, read, and write files. In turn, the file server gets disk I/O performed by sending messages to the disk driver, which controls the disk.\n\nOne of the key servers is the reincarnation server. Its job is to poll all the other servers and drivers to check on their health periodically. If a component fails to respond correctly, or exits, or gets into an [[infinite loop]], the reincarnation server (which is the parent process of the drivers and servers) kills the faulty component and replaces it with a fresh copy. In this way the system is automatically made self-healing without interfering with running programs.\n\nCurrently the reincarnation server, the process server, and the microkernel are part of the [[trusted computing base]].  If any of them fail, the system crashes. Nevertheless, reducing the trusted computing base from 3-5 million lines of code, as in Linux and Windows systems, to about 20,000 lines greatly enhances system reliability.{{Citation needed|date=April 2015}}\n\n== Differences between MINIX 3 and prior versions ==\n{{Main article|MINIX}}\n[[File:Unix history-simple.svg|thumb|Diagram of the relationships between several Unix-like systems]]\n\n[[MINIX]] 1, 1.5, and 2 were developed as tools to help people learn about the design of operating systems.\n\nMINIX 1.0, released in 1987, was 12,000 lines of [[C (programming language)|C]] and some x86 [[assembly language]]. Source code of the kernel, [[memory management|memory manager]], and [[file system]] of MINIX 1.0 are printed in the book. Tanenbaum originally developed MINIX for compatibility with the [[IBM PC]] and [[IBM PC/AT]] [[microcomputer]]s available at the time.\n\nMINIX 1.5, released in 1991, included support for [[MicroChannel]] [[IBM PS/2]] systems and was also ported to the [[Motorola 68000]] and [[SPARC]] architectures, supporting the [[Atari ST]], [[Commodore International|Commodore]] [[Amiga]], Apple [[Macintosh]] and [[Sun Microsystems]] [[SPARCstation]] computer platforms. A version of MINIX running as a user process under [[SunOS]] was also available.\n\nMINIX 2.0, released in 1997, was only available for the [[x86]] and [[Solaris (operating system)|Solaris]]-hosted SPARC architectures. [[Minix-vmd]] was created by two [[Vrije Universiteit]] researchers, and added [[virtual memory]] and support for the [[X Window System]].\n\nMINIX 3 does the same, and provides a modern operating system with many newer tools and many [[Unix]] applications.<ref name= \"faq\">{{cite web|url=http://www.MINIX3.org/doc/faq.html |title=FAQ – Minix Wiki |publisher=Minix3.org |date=2013-11-09 |access-date=2014-05-01}}</ref> Prof. Tanenbaum once said:\n\n{{cquote|Please be aware that MINIX 3 is not your grandfather's MINIX ... MINIX 1 was written as an educational tool ... MINIX 3 is that plus a start at building a highly reliable, self-healing, bloat-free operating system ... MINIX 1 and MINIX 3 are related in the same way as [[Windows 3.1]] and [[Windows XP]] are: same first name.<ref name= \"reliable-os\"/>}}\nMany improvements have also been made in the structure of the kernel since the MINIX 2 release, making the system more reliable.<ref name=\"improvements\">http://www.minix3.org/improvements.html {{webarchive |url=https://web.archive.org/web/20060417154237/http://www.minix3.org/improvements.html |date=April 17, 2006}}</ref> MINIX version 3.1.5 was released 5 Nov 2009. It contains [[X11]], [[Emacs]], [[vi]], cc, [[GNU Compiler Collection|GCC]], [[Perl]], [[Python (programming language)|Python]], [[Almquist shell]], [[Bash (Unix shell)|Bash]], [[Z shell]], [[File Transfer Protocol|FTP client]], [[Secure Shell|SSH client]], [[Telnet]] client, [[Pine (email client)|Pine]], and over 400 other common Unix utility programs. With the addition of X11, this version marks the transition away from a text-only system.  Another feature of this version, which will be improved in future ones, is the ability of the system to withstand device driver crashes, and in many cases having them automatically replaced without affecting running processes. In this way, MINIX is self-healing and can be used in applications demanding high reliability.\n\nMINIX 3.2.0 was released in February 2012. This version has many new features, including the [[Clang]] compiler, experimental [[symmetric multiprocessing]] support, [[procfs]] and [[ext2fs]] filesystem support, and [[GNU Debugger]] (GDB). Several parts of [[NetBSD]] are also integrated in the release, including the bootloader, [[libc]] and various [[Utility software|utilities]] and other [[Library (computing)|libraries]].<ref name=wiki-releases>{{cite web|title=MINIX Releases|url=http://wiki.minix3.org/en/MinixReleases|work=wiki.minix3.org|access-date=29 February 2012|deadurl=yes|archiveurl=https://www.webcitation.org/68WUo9Bot?url=http://wiki.minix3.org/en/MinixReleases|archivedate=18 June 2012|df=}}</ref>\n\nMINIX 3.3.0 was released in September 2014. This release is the first version to support the [[ARM architecture]] in addition to x86. It also supports a [[NetBSD]] [[User space|userland]], with thousands of NetBSD packages running right out of the box.\n\n== Mascot ==\n[[File:Rocky Raccoon mascot of MINIX 3.jpg|thumb|Rocky Raccoon, the mascot of MINIX 3.]]\n'''Rocky Raccoon''' is the mascot of MINIX 3.<ref>{{Cite web|url=http://wiki.minix3.org/doku.php?id=mascot|title=mascot [Wiki]|website=wiki.minix3.org|language=en|access-date=2017-07-20}}</ref>\n\n== MINIXCon ==\nMINIXCon is a conference on sharing talks, efforts and researches related to MINIX.\n\nMINIXCon2017 was cancelled due lack of talks submitted<ref>{{Cite web|url=http://www.minix3.org/|title=Minix3|website=www.minix3.org|access-date=2017-11-11}}</ref><ref>{{Cite web|url=http://www.minix3.org/news/index.html|title=Minix3|website=www.minix3.org|access-date=2017-11-11}}</ref>\n\n== See also ==\n{{Portal|Free and open-source software}}\n\n* [[Comparison of operating system kernels]]\n* [[MINIX file system]]\n* [[List of computing mascots]]\n* [[:Category:Computing mascots]]\n\n== References ==\n{{Reflist|30em}}\n\n== Further reading ==\n{{Refbegin}}\n*{{cite book\n |last1     = Tanenbaum\n |first1    = Andrew S\n |author-link1= Andrew S. Tanenbaum\n |last2     = Woodhull\n |first2    = Albert S.\n |title     = Operating Systems: Design and Implementation\n |edition   = 3rd\n |isbn      = 0-13-142938-8\n |date      = 14 January 2006\n |publisher = [[Prentice Hall]]\n |url       = http://www.pearsonhighered.com/educator/academic/product/0,,0131429388,00%2Ben-USS_01DBC.html\n}}\n*[http://www.minix3.org/theses/herder_phd_thesis.pdf ''Building a dependable operating system: fault tolerance in MINIX 3''] by Jorrit N. Herder (PDF)\n*[http://www.cs.vu.nl/~ast/Publications/Papers/acsac-2006.pdf ''Reorganizing Unix for Reliability''] by Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg, and Andrew S. Tanenbaum (PDF)\n*[http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf ''Modular system programming in MINIX 3''] by Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg, and Andrew S Tanenbaum (PDF)\n*[http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf J. N. Herder et al., ''Modular System Programming in MINIX 3'', ;Login, April 2006] (PDF)\n*[http://sites.google.com/site/minix4rt/Home Pablo A Pessolani. ''MINIX4RT: A Real-Time Operating System Based on MINIX'']\n*[http://www.minix3.ru/docs/meurs_thesis.pdf ''Building Performance Measurement Tools for the MINIX 3 Operating System'', by Rogier Meurs] (PDF)\n*[http://www.minix3.ru/docs/gerofi_thesis.pdf ''Design and implementation of the MINIX virtual file system''] (PDF)\n*[http://www.minix3.ru/docs/kernel-api.pdf ''Reference manual for MINIX 3 Kernel API''] (PDF)\n*[http://www.minix3.ru/docs/herder_thesis.pdf ''Towards a true microkernel operating system''] (PDF)\n*[http://www.minix3.org/doc/EDCC-2006.pdf ''Construction of a Highly Dependable Operating System''] (PDF)\n*[http://www.linux-magazine.com/Issues/2009/99/Minix-3 ''Minix 3 and the microkernel experience: Smart Kernel''] by Rüdiger Weis (PDF) \n*[http://www.minix3.org/theses/Cristiano_Giuffrida_PhD_thesis.pdf ''Safe and Automatic Live Update''] by Cristiano Giuffrida (PDF)\n{{Refend}}\n\n==External links==\n{{Wikibooks|Minix 3}}\n{{commons category|Minix}}\n*{{Official website|www.minix3.org}}\n**[http://wiki.minix3.org Wiki]\n**[http://git.minix3.org/?p=minix.git;a=summary Source code] \n*{{youtube|bx3KuE7UjGA|MINIX 3: a Modular, Self-Healing POSIX-compatible Operating System}}\n*[http://www.minix3.ru minix3.ru] {{ru icon}}\n*[http://groups.google.com/group/comp.os.minix comp.os.minix – official forum (since 1987)]\n*[http://osnews.com/story.php/15960/Introduction-to-MINIX-3 A very good description of Minix 3] by [[Andy Tanenbaum]]\n*[http://www.freesoftwaremagazine.com/articles/minix MINIX: what is it, and why is it still relevant?] An interview with Andy Tanenbaum\n*[http://www.os-forum.com/minix/net/ Minix Network Service Documentation]\n*[http://www.computer.org/portal/site/computer/menuitem.5d61c1d591162e4b0ef1bd108bcd45f3/index.jsp?&pName=computer_level1_article&TheCat=1005&path=computer/homepage/0506&file=cover1.xml&xsl=article.xsl& Can We Make Operating Systems Reliable and Secure?]\n*[http://www.minixtips.com/ Minix Tips for running the Operating System Version]\n*{{youtube|m_HAkXoPWhA|Minix3 installation}}\n*[https://va.ludost.net/files/eurobsdcon/2014/Vitosha/03.Saturday/07.A%20reimplementation%20of%20NetBSD%20based%20on%20a%20microkernel%20-%20Andy%20Tanenbaum.mp4 A reimplementation of NetBSD based on a microkernel]\n*[http://video.fosdem.org/2014/UB2252A_Lameere/Saturday/MINIX_3_on_ARM.webm MINIX 3 on ARM] by Kees Jongenburger\n*[http://cacm.acm.org/magazines/2016/3/198874-lessons-learned-from-30-years-of-minix/fulltext Lessons Learned from 30 Years of MINIX] By Andrew S. Tanenbaum\n\n{{Unix}}\n{{Microkernel}}\n{{Operating system}}\n\n<!-- Interlang -->\n\n[[Category:2005 software]]\n[[Category:Computer science in the Netherlands]]\n[[Category:Computing platforms]]\n[[Category:Educational operating systems]]\n[[Category:Information technology in the Netherlands]]\n[[Category:Microkernels]]\n[[Category:MINIX]]\n[[Category:Operating system distributions bootable from read-only media]]",
            "slug": "minix-3",
            "date_updated": 1519550583698,
            "imported": "https://en.wikipedia.org/wiki/MINIX_3"
        }
    ]
}