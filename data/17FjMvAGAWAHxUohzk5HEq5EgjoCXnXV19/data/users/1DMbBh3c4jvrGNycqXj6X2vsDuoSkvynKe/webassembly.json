{
    "article": [
        {
            "title": "WebAssembly",
            "text": "{{Use dmy dates|date=March 2016}}\n{{Update|date=November 2017}}\n{{Infobox programming language\n| title                  = \n| logo                   = Web Assembly Logo.svg\n| logo caption           = \n| screenshot             = <!-- (filename) -->\n| screenshot caption     = \n| paradigm               = [[Imperative programming|Imperative]], [[Structured programming|structured]], [[Expression-oriented programming language|expression-oriented]]\n| family                 = \n| released               = {{start date and age|2017|03||df=yes/no}}\n| designer               = <!-- or: | designers = -->\n| developer              = [[World Wide Web Consortium|W3C]]\n| discontinued           = \n| latest release version = \n| latest release date    = <!-- {{start date and age|YYYY|MM|DD|df=yes/no}} -->\n| latest preview version = \n| latest preview date    = <!-- {{start date and age|YYYY|MM|DD|df=yes/no}} -->\n| typing                 = [[Type system|Static]]\n| scope                  = \n| implementations        = \n| dialects               = \n| influenced by          = [[asm.js]], [[Google Native Client|PNaCl]]\n| influenced             = \n| programming language   = \n| operating system       = [[World Wide Web|Web]]\n| license                = [[Apache 2.0 License]]\n| file ext               = .wat, .wasm\n| file format            = <!-- or: | file formats = -->\n}}\n\n'''WebAssembly''' ('''Wasm''', '''WA''') is a [[web standards|web standard]] that defines a binary format and a corresponding [[assembly language|assembly]]-like text format for executable [[Computer code|code]] in [[World Wide Web|Web]] pages. It is meant to enable executing code nearly as fast as running native [[machine code]]. It was envisioned to complement [[JavaScript]] to speed up performance-critical parts of web applications and later on to enable [[web development]] in other languages than JavaScript.<ref name=\"techcrunch2015\"/><ref name=\"Softpedia2015\"/><ref name=\"Elliott\"/> It is developed at the [[World Wide Web Consortium]] (W3C) with engineers from [[Mozilla]], [[Microsoft]], [[Google]] and [[Apple Inc.|Apple]].<ref name=\"ars\"/>\n\nIt is executed in a [[Sandbox (computer security)|sandbox]] in the web browser after a [[formal verification]] step. Programs can be compiled from high-level languages into Wasm modules and loaded as [[library (computing)|libraries]] from within JavaScript applets.\n\n== Design ==\n{{Expand Section|date = September 2017}}\nWebAssembly code is intended to be run on a [[Software portability|portable]] abstract structured [[stack machine]],<ref name=\"stack machine\"/> which is designed to be faster to parse than JavaScript, as well as faster to [[Execution (computing)|execute]],<ref name=\"github.com\"/> and to enable very compact code representation.\n\n== History ==\nVendor-specific precursor technologies are [[Google Native Client]] (NaCl) and [[asm.js]].<ref name=\"techcrunch2015\"/><ref name=\"PNaCl\"/>\nThe initial implementation of WebAssembly support in browsers was based on the feature set of asm.js.<ref name=\"initial implementation\"/>\nIt was first announced on 17 June 2015<ref name=\"Launch bug\"/> and on 15 March 2016 was demonstrated executing [[Unity (game engine)|Unity]]'s ''Angry Bots'' in [[Firefox]],<ref name=\"Unity in Firefox\"/> [[Chromium (web browser)|Chromium]], [[Google Chrome]],<ref name=\"V8 blog\"/> and [[Microsoft Edge]].<ref name=\"Edge\"/> In March 2017, the design of the [[minimum viable product]] was declared to be finished and the preview phase ended.<ref name=\"MVP\"/> {{As of|2017|September|alt=In late September 2017}}, [[Safari (web browser)|Safari 11]] was released with support<!--\"Edge 16\", also has and in current \"Edge 15\" can be enabled-->. {{As of|2018|03}}, the website {{em|Can I use}} tracks 72.75% global web browser support for WebAssembly (and indirectly, through polyfill, others are supported).<ref name=\"caniuse.com\"/> In February 2018 the WebAssembly Working Group published three public working drafts for the Core Specification, Javascript Interface, and Web API.<ref name=\"W3C-WD2018\" /><ref name=\"W3C-CSWD2018\" /><ref name=\"W3C-JIWD2018\" /><ref name=\"W3C-WAWD2018\" />\n\n== Support ==\nMozilla declared support \"in all major browsers\",<ref name=\"in browsers\"/> e.g. it's also been enabled by default in Edge 16.<ref name=\"Edge16\"/>\nFor backward compatibility, Wasm can be compiled into asm.js by a JavaScript applet (a so-called [[polyfill (programming)|polyfill]]) and executed on incompatible browsers this way.<ref name=\"ars2015\"/>\n\n[[Emscripten]] can compile to Wasm<ref name=\"MVP\"/> using [[LLVM]] in the backend.\n\nIts initial aim is to support [[compilation (computing)|compilation]] from [[C (programming language)|C]] and [[C++]],<ref name=\"github.com\"/> though support for other source [[programming language|languages]] such as [[Rust (programming language)|Rust]] is also emerging.<ref name=\"Rust\"/> After the minimum viable product (MVP) release, there are plans to support [[garbage collection (computer science)|garbage collection]]<ref name=\"next\"/> which would make WebAssembly a compilation target for garbage collected programming languages like [[Java (programming language)|Java]] and [[C Sharp (programming language)|C#]].\n\n== Representation ==\nIn March 2017, the WebAssembly Community Group reached consensus on the initial (MVP) binary format, JavaScript API, and reference interpreter.<ref name=\"Roadmap\"/> It defines a WebAssembly binary format, which is not designed to be used by humans, as well as a human-readable ''linear assembly bytecode'' format that resembles traditional assembly languages.\n\nThe table below represents three different views of the same source code input from the left, as it is converted to a Wasm [[intermediate representation]], then to Wasm binary:<ref name=\"Text Format\"/>\n\n{| class=\"wikitable\"\n|-\n! [[C (programming language)|C]] input source !! Linear assembly bytecode<br/> ([[intermediate representation]]) !! Wasm binary encoding<br/> (hexadecimal bytes)\n|- style=\"vertical-align:top\"\n|\n<source lang=\"c\">\nint factorial(int n) {\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n-1);\n}\n</source>\n||\n<source lang=\"text\">\nget_local 0\ni64.eqz\nif (result i64)\n    i64.const 1\nelse\n    get_local 0\n    get_local 0\n    i64.const 1\n    i64.sub\n    call 0\n    i64.mul\nend\n</source>\n||\n<source lang=\"text\">\n20 00\n50\n04 7E\n42 01\n05\n20 00\n20 00\n42 01\n7D\n10 00\n7E\n0B\n</source>\n|}\n\nThe WebAssembly text format can also be written in a folded format using [[s-expression]]s. This format is purely [[syntactic sugar]] and has no behavioral differences with the linear format.<ref name=\"Folded Instructions\"/> An example is shown below:\n\n<source lang=\"lisp\">\n(module\n  (import \"math\" \"exp\" (func $exp (param f64) (result f64)))\n  (func (export \"doubleExp\") (param $0 f64) (result f64)\n    (f64.mul\n      (call $exp\n        (get_local $0))\n      (f64.const 2))))\n</source>\n\n== See also ==\n* [[XAML Browser Applications]] (XBAP)\n\n== Literature ==\n* {{Cite journal|first1=Andreas|last1=Haas|first2=Andreas|last2=Rossberg|first3=Derek L.|last3=Schuff|first4=Ben L.|last4=Titzer|first5=Dan|last5=Gohman|first6=Luke|last6=Wagner|first7=Alon|last7=Zakai|first8=JF|last8=Bastien|first9=Michael|last9=Holman|first=|date=June 2017|title=Bringing the web up to speed with WebAssembly|url=https://dl.acm.org/ft_gateway.cfm?id=3062363&type=pdf|journal=Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation|publisher=Association for Computing Machinery|volume=|pages=185–200|via=}}\n* {{Cite journal|last=Watt|first=Conrad|date=2018|title=Mechanising and Verifying the WebAssembly Specification|url=https://www.cl.cam.ac.uk/~caw77/papers/mechanising-and-verifying-the-webassembly-specification.pdf|journal=ACM SIGPLAN International Conference on Certified Programs and Proofs|publisher=ACM|volume=7|pages=|doi=10.1145/3167082|via=}}\n\n== References ==\n{{reflist|30em|refs=\n<ref name=\"Softpedia2015\">{{Cite news|url=http://news.softpedia.com/news/Mozilla-Microsoft-Google-and-Apple-Join-Efforts-to-Create-a-Binary-File-Format-for-the-Web-484648.shtml|title=Mozilla, Microsoft, Google, and Apple Join Efforts to Create a Binary File Format for the Web|last=Cimpanu|first=Catalin|date=2015-06-18|work=softpedia|access-date=2017-12-23|archive-url=|archive-date=|dead-url=|language=en-us}}</ref>\n\n<ref name=\"Elliott\">{{Cite news|url=https://jaxenter.de/turbo-boost-fuer-javascript-eric-elliott-ueber-webassembly-21720|title=Turbo-Boost für JavaScript: Eric Elliott über WebAssembly|last=Hoffmann|first=Moritz|date=2015-06-23|work=JAXenter|access-date=2017-12-23|archive-url=|archive-date=|dead-url=|language=de-DE}}</ref>\n\n<ref name=\"techcrunch2015\">{{Cite news|url=https://techcrunch.com/2015/06/17/google-microsoft-mozilla-and-others-team-up-to-launch-webassembly-a-new-binary-format-for-the-web/|title=Google, Microsoft, Mozilla And Others Team Up To Launch WebAssembly, A New Binary Format For The Web|last=Lardinois|first=Frederic|date=2015-06-17|work=TechCrunch|access-date=2017-12-24|archive-url=|archive-date=|dead-url=|language=en}}</ref>\n\n<ref name=\"ars\">{{cite web |first=Peter |last=Bright |url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|work=[[Ars Technica]] |publisher=[[Condé Nast]] |date=18 June 2015}}</ref>\n\n<ref name=\"stack machine\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/Rationale.md#why-a-stack-machine|title=Design Rationale|date=1 October 2016|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"github.com\">{{cite web|url=https://github.com/WebAssembly/design/blob/master/HighLevelGoals.md|title=WebAssembly High-Level Goals|date=11 December 2015|work=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"PNaCl\">{{Cite web|url=https://www.infoq.com/news/2017/05/pnacl-webassembly-google|title=Google Is to Remove Support for PNaCl|last=Avram|first=Abel|date=2017-05-31|website=InfoQ|archive-url=|archive-date=|dead-url=|access-date=2017-12-22}}</ref>\n\n<ref name=\"initial implementation\">{{cite web|url=http://www.2ality.com/2015/06/web-assembly.html|title=WebAssembly: a binary format for the web|work=②ality&nbsp;– JavaScript and more|date=18 June 2015}}</ref>\n\n<ref name=\"Launch bug\">{{Cite web|url=https://github.com/WebAssembly/design/issues/150|title=Launch bug|date=11 June 2015|website=[[GitHub]] / WebAssembly / design}}</ref>\n\n<ref name=\"Unity in Firefox\">{{Cite web|url=https://hacks.mozilla.org/2016/03/a-webassembly-milestone/|title=A WebAssembly Milestone: Experimental Support in Multiple Browsers|last=Wagner|first=Luke|date=14 March 2016|website=Mozilla Hacks}}</ref>\n\n<ref name=\"V8 blog\">{{Cite web|url=http://v8project.blogspot.com/2016/03/experimental-support-for-webassembly.html|title=Experimental support for WebAssembly in V8|last=Thompson|first=Seth|date=15 March 2016|website=V8 Blog}}</ref>\n\n<ref name=\"Edge\">{{Cite web|url=https://blogs.windows.com/msedgedev/2016/03/15/previewing-webassembly-experiments/|title=Previewing WebAssembly experiments in Microsoft Edge|last=Zhu|first=Limin|date=15 March 2016|website=Microsoft Edge dev blog}}</ref>\n\n<ref name=\"MVP\">{{Cite news|url=https://www.infoworld.com/article/3176681/|title=WebAssembly is now ready for browsers to use|last=Krill|first=Paul|date=2017-03-06|work=InfoWorld|access-date=2017-12-23|archive-url=|archive-date=|dead-url=|language=en}}</ref>\n\n<ref name=\"caniuse.com\">{{cite web |title=WebAssembly |url=https://caniuse.com/wasm |work=Can I use |accessdate=2018-03-07}}</ref>\n\n<ref name=\"in browsers\">{{Cite web|url=https://blog.mozilla.org/blog/2017/11/13/webassembly-in-browsers/|title=WebAssembly support now shipping in all major browsers|website=The Mozilla Blog|language=en-US|access-date=2017-11-21}}</ref>\n\n<ref name=\"Edge16\">{{Cite web|url=https://blogs.windows.com/msedgedev/2017/10/31/optimizations-webassembly-sharedarraybuffer-atomics-edgehtml-16/|title=Introducing new JavaScript optimizations, WebAssembly, SharedArrayBuffer, and Atomics in EdgeHTML 16|website=Microsoft Edge Dev Blog|language=en-US|access-date=2017-11-21}}</ref>\n\n<ref name=\"ars2015\">{{Cite news|url=https://arstechnica.com/information-technology/2015/06/the-web-is-getting-its-bytecode-webassembly/|title=The Web is getting its bytecode: WebAssembly|last=Bright|first=Peter|date=2015-06-18|work=Ars Technica|access-date=2017-12-23|archive-url=|archive-date=|dead-url=|language=en-us}}</ref>\n\n<ref name=\"Rust\">{{Cite news|url=https://www.infoworld.com/article/3239129/|title=Direct WebAssembly compilation comes to Rust language|last=Krill|first=Paul|date=2017-11-29|work=InfoWorld|access-date=2017-12-24|archive-url=|archive-date=|dead-url=|language=en}}</ref>\n\n<ref name=\"next\">{{Cite news|url=https://www.techworld.com.au/article/629123/|title=What's next for WebAssembly: GC, threads, debugging|last=Krill|first=Paul|date=2017-10-26|work=TechWorld|access-date=2017-12-24|archive-url=|archive-date=|dead-url=}}</ref>\n\n<ref name=\"Roadmap\">{{Cite web|url=http://webassembly.org/roadmap/|title=Roadmap |website=WebAssembly |date=March 2017}}</ref>\n\n<ref name=\"Text Format\">{{cite web|author1=jfbastien |author2=rossberg-chromium |author3=kripken |author4=titzer |author5=s3ththompson |author6=sunfishcode |author7=lukewagner |author8=flagxor |author9=enricobacis |author10=c3d |author11=binji |author12=andrewosh |date=9 March 2017 |title=Text Format |website=WebAssembly/design |publisher=GitHub |url=https://github.com/WebAssembly/design/blob/master/TextFormat.md }}</ref>\n\n\n<ref name=\"W3C-WD2018\">{{cite web |url=https://www.w3.org/blog/news/archives/6838|title=WebAssembly First Public Working Drafts|publisher=W3C|date= February 15, 2018|access-date=April 20, 2018}}</ref>\n<ref name=\"W3C-CSWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-core-1-20180215/|title=WebAssembly Core Specification|publisher=W3C|date= February 15, 2018|access-date=April 20, 2018}}</ref>\n<ref name=\"W3C-JIWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-js-api-1-20180215/|title=WebAssembly JavaScript Interface|publisher=W3C|date= February 15, 2018|access-date=April 20, 2018}}</ref>\n<ref name=\"W3C-WAWD2018\">{{cite web |url=https://www.w3.org/TR/2018/WD-wasm-web-api-1-20180215/|title=WebAssembly Web API|publisher=W3C|date= February 15, 2018|access-date=April 20, 2018}}</ref>\n\n\n\n\n\n<ref name=\"Folded Instructions\">{{cite web|url=http://webassembly.github.io/spec/core/text/instructions.html#folded-instructions|title=Folded instructions|work=[[GitHub]]}} / WebAssembly / spec</ref>\n}}\n\n{{Free-content attribution|\n|title= Text Format\n|author = jfbastien; rossberg-chromium; kripken; titzer; s3ththompson; sunfishcode; lukewagner; flagxor; enricobacis; c3d; binji; andrewosh\n|publisher = GitHub\n|source= WebAssembly/design\n|documentURL= https://github.com/WebAssembly/design/blob/master/TextFormat.md\n|license statement URL= https://github.com/WebAssembly/design/blob/master/LICENSE\n|license= Apache License 2.0\n}}\n\n== External links ==\n* {{Official website}}\n* [https://www.w3.org/community/webassembly/ W3C Community Group]\n* [https://github.com/WebAssembly/design WebAssembly Design]\n* {{Cite web|url=https://developer.mozilla.org/en-US/docs/WebAssembly|title=WebAssembly|website=MDN Web Docs|language=en-US}}{{snd}} with info on browser compatibility and specifications (WebAssembly JavaScript API)\n* [https://www.youtube.com/watch?v=R9wn99Xheq4 WebAssembly: What and What Next? (youtube)]\n{{Web interfaces}}\n{{JavaScript}}\n\n[[Category:Assembly languages]]\n[[Category:Computer-related introductions in 2015]]\n[[Category:Web programming]]\n[[Category:Web standards]]",
            "slug": "webassembly",
            "date_updated": 1527669364230,
            "imported": "https://en.wikipedia.org/wiki/WebAssembly"
        }
    ]
}