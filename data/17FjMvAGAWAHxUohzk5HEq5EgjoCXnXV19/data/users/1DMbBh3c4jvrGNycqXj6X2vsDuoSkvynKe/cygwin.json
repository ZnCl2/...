{
    "article": [
        {
            "title": "Cygwin",
            "text": "{{Short description|Unix subsystem for Windows machines}}\n{{Refimprove|date=November 2011}}\n{{Advert|date=January 2021}}\n{{Infobox software\n| name = Cygwin\n| logo = Cygwin logo.svg\n| logo caption = \n| screenshot = Cygwin X11 rootless WinXP.png\n| caption = Running Cygwin, including [[Cygwin/X]], under [[Windows XP]]\n| collapsible = \n| author = Steve Chamberlain, [[Cygnus Solutions]]\n| developer = [[Cygnus Solutions]], [[Red Hat]], Cygwin project volunteers\n| released = {{start date and age|1995|10|18}}\n| latest_release_version = {{wikidata|property|reference|edit|Q216192|P348}}\n| latest_release_date = {{start date and age|{{wikidata|qualifier|Q216192|P348|P577}}}}\n| operating system = [[Microsoft Windows]]\n| programming language = [[C (programming language)|C]]/[[C++]]\n| genre = [[:Category:Unix SUS2008 utilities|POSIX standard utilities]], [[C POSIX library|POSIX standard library]], [[C standard library]], [[compatibility layer]]\n| license = [[GNU Lesser General Public License|LGPLv3]]\n}}\n'''Cygwin''' ({{IPAc-en|ˈ|s|ɪ|ɡ|w|ɪ|n}} {{respell|SIG|win}})<ref>{{Cite mailing list | mailing-list = Cygwin | url = http://cygwin.com/ml/cygwin/2004-09/msg00702.html | title = Re: How do you pronounce it? | first = Larry | last = Hall | date = 2004-09-14  | access-date = 2007-10-10}}</ref> is a [[POSIX]]-compatible programming and [[runtime environment]] that runs natively on [[Microsoft Windows]]. Under Cygwin, [[source code]] designed for [[Unix-like]] operating systems may be compiled and run natively with minimal modification.<ref name=\"auto\">{{Cite web|url=https://www.cygwin.com/|title=Cygwin|website=www.cygwin.com}}</ref>\n\nThe Cygwin installation directory has a similar directory layout to that found in the root file system of Unix-like systems, with familiar directories, such as /bin, /home, /etc, /usr, /var. Cygwin installs with hundreds of command-line tools and other programs commonly found on a Unix-like system. Additionally, many applications may be installed from a packaging system. The terminal emulator [[Mintty]] is the default [[command-line interface]] provided to interact with the environment.<ref name=\"auto\"/>\n\nCygwin provides native integration of Windows-based applications.<ref name=\"auto1\">{{Cite web|url=https://cygwin.com/faq.html|title=Cygwin FAQ|website=cygwin.com}}</ref> Thus it is possible to launch Windows applications from the Cygwin environment, as well as to use Cygwin tools and applications within the Windows operating context.\n\nCygwin consists of two parts: a [[dynamic-link library]] (DLL) as an [[Application programming interface|API]] compatibility layer in the form of a [[C standard library]] providing a substantial part of the [[POSIX]] API functionality, and an extensive collection of [[Programming tool|software tools]] and applications that provide a Unix-like [[look and feel]].<ref name=\"auto1\"/>\n\nCygwin was originally developed by [[Cygnus Solutions]],<ref>{{Cite web|url=https://cygwin.com/cygwin-ug-net/brief-history.html|title=A brief history of the Cygwin project|date=2018-02-02|website=Cygwin|access-date=2020-01-10}}</ref><ref>{{Cite web|url=https://www.usenix.org/legacy/publications/library/proceedings/usenix-nt98/full_papers/noer/noer_html/noer.html|title=Cygwin32: A Free Win32 Porting Layer for UNIX® Applications|date=1998-08-03|website=USENIX|access-date=2020-01-10}}</ref> which was later acquired by [[Red Hat]] (now part of [[IBM]]), to port the GNU/Linux [[toolchain]] to Win32, including the [[GNU Compiler Collection|GNU Compiler Suite]]. Rather than rewrite all the tools to use [[Windows API|Win32]] runtimes, Cygwin implemented a [[POSIX]] compatible runtime as a [[Dynamic-link library|DLL]].<ref>{{Cite web|url=https://discuss.howtogeek.com/t/solved-linux-subsystem-vs-cygwin-vs-mobaxterm/56366|title=(Solved) Linux Subsystem vs Cygwin vs MobaXterm|date=2017-01-24|website=Tech Help Forum by How-To Geek|access-date=2019-03-15}}</ref> It is [[free and open-source software]], released under the [[GNU Lesser General Public License]] version 3.<ref>{{cite web|title=Cygwin library now available under GNU Lesser General Public License|url=https://www.redhat.com/en/about/blog/cygwin-library-now-available-under-gnu-lesser-general-public-license|website=Red Hat}}</ref> Today it is maintained by volunteers including employees of Red Hat and many others.\n\n==Description==\nThe Cygwin environment is provided in two versions; the full 64-bit version and a stripped down 32-bit version that is slowly being phased out. Cygwin consists of a library that implements the [[POSIX]] system call [[application programming interface|API]] in terms of Windows system calls, a [[GNU]] development toolchain (including [[GNU Compiler Collection|GCC]] and [[GNU Debugger|GDB]]) to allow software development, and running of a large number of application programs equivalent to those on [[Unix]] systems. Programmers have ported many Unix, GNU, [[BSD]] and [[Linux]] programs and packages to Cygwin, including the [[X Window System]], [[K Desktop Environment 3]], [[GNOME]],<ref>{{cite web|url=http://sourceware.org/cygwinports/|title=Cygwin Ports|access-date=2 May 2015}}</ref> [[Apache HTTP Server|Apache]], and [[TeX]]. Cygwin permits installing [[inetd]], [[syslogd]], [[Secure Shell|sshd]], [[Apache HTTP Server|Apache]], and other daemons as standard [[Windows service]]s, allowing Microsoft Windows systems to emulate Unix and Linux servers.\n\nCygwin programs are installed by running Cygwin's \"setup\"<ref>{{Cite mailing list|mailing-list=Cygwin|title=New Cygwin Net Release|date=2000-04-17|last=Delorie|first=DJ|url=https://cygwin.com/ml/cygwin/2000-04/msg00269.html|access-date=2020-01-10}}</ref> program, which downloads the necessary program and feature package files from repositories on the Internet. As mentioned, there are two versions of this setup program, one for 32-bit versions of the Cygwin DLL, and corresponding applications, and one for 64-bit versions. Setup can install, update, and remove programs and their source code packages. A complete installation will take in excess of 90&nbsp;GB<ref>{{Cite web|url=https://stackoverflow.com/questions/21230657/what-is-the-current-full-install-size-of-cygwin/21233990|title=What is the current full install size of Cygwin?|date=2018-05-28|website=StackOverflow|access-date=2020-01-11}}</ref> of hard disk space, but usable configurations may require as little as 1 or 2&nbsp;GB.\n\nEfforts to reconcile concepts that differ between Unix and Windows systems include:\n* A Cygwin-specific version of the Unix [[Mount (computing)|<code>mount</code>]] command allows mounting Windows paths as \"filesystems\" in the Unix file space. Initial mount-points can be configured in <code>[[fstab|/etc/fstab]]</code>, which has a format very similar to Unix systems, except that Windows paths appear in place of devices. Filesystems can be mounted in binary mode (by default), or in text mode, which enables automatic [[Newline#Common_problems|conversion]] between [[Newline|LF]] and [[CRLF]] endings (which only affects programs that open files without explicitly specifying text or binary mode).\n* Cygwin 1.7 introduced comprehensive support for POSIX [[Locale (computer software)|locales]] and many [[character encoding]]s, whereby the [[UTF-8]] [[Unicode]] encoding became the default. Windows file-names and other identifiers, which are encoded as [[UTF-16]], are automatically converted to and from the selected character-encoding.\n* Windows [[drive letter]]s map to a special directory, so for example <code>C:</code> appears as <code>/cygdrive/c</code>. The <code>/cygdrive</code> prefix can be changed. Windows network paths of the form <code>\\\\HOST\\SHARE\\FILE</code> are mapped to <code>//HOST/SHARE/FILE</code>. Windows paths can also be used directly from Cygwin programs, but many programs do not support them correctly, hence this is discouraged.\n* Full-featured <code>[[/dev]]</code> and <code>[[/proc]]</code> file-systems are provided. <code>/proc/registry</code> provides direct filesystem access to the registry.\n* Cygwin supports POSIX [[symbolic link]]s, representing them as plain-text files with the system [[attrib]]ute set. Cygwin 1.5 represented them as [[Windows Explorer]] [[File shortcut|shortcuts]], but this has been changed for reasons of performance and POSIX correctness. Cygwin also recognises NTFS [[NTFS junction point|junction points]] and [[NTFS symbolic link|symbolic links]] and treats them as POSIX symbolic links, but it does not create them as their semantics are not fully POSIX-compliant.\n* The [[POSIX]] API for handling [[access control list]]s (ACLs) is supported and maps to the Windows NT ACL system.<ref>{{Cite mailing list|last=Vinschen|first=Corinna|title=Updated: Cygwin 2.4.0-1|mailing-list=Cygwin Announcements|date=2016-01-16|url=http://www.cygwin.org/ml/cygwin-announce/2016-01/msg00018.html|access-date = 2020-01-11}}</ref>\n* Special formats of <code>/etc/passwd</code> and <code>/etc/group</code> are provided that include pointers to the Windows equivalent [[Security Identifier|SID]]s (in the [[Gecos field]]), allowing for mapping between Unix and Windows users and groups.\n* The [[fork (system call)|fork]] system call for duplicating a process is fully implemented, but it does not map well to the Windows API. For example, the [[copy-on-write]] optimization strategy could not be used.<ref>\n{{cite web\n| title      = Cygwin FAQ: How is fork() implemented? \n| url        = https://www.cygwin.com/faq.html\n| access-date = Oct 10, 2010\n}}\n</ref><ref>\n{{cite web\n| title      = Highlights of Cygwin Functionality: Process Creation \n| url        = http://cygwin.com/cygwin-ug-net/highlights.html#ov-hi-process\n| access-date = Dec 24, 2014\n}}\n</ref><ref>\n{{Cite mailing list\n| last       = Blake\n| first      = Eric\n| title      = Bash doesn't launch the applications directly\n| mailing-list = Cygwin\n| date       = Jan 15, 2009\n| url        = http://www.cygwin.com/ml/cygwin/2009-01/msg00461.html\n| access-date = Oct 10, 2010\n}}\n</ref> As a result, Cygwin's fork is rather slow compared with Linux and others. (That overhead can often be avoided by replacing uses of the [[fork-exec|fork/exec]] technique with calls to the [[spawn (computing)|spawn]] functions declared in the Windows-specific [[process.h]] header).\n* The Cygwin DLL contains a console driver that emulates a Unix-style [[Terminal emulator|terminal]] within the [[Win32 console|Windows console]]. Cygwin's default user interface is the [[Bash (Unix shell)|bash]] shell running in the Cygwin console.\n* The DLL also implements [[pseudo terminal]] (pty) devices. Cygwin ships with a number of [[terminal emulator]]s that are based on them, including [[mintty]], [[rxvt]]([[rxvt-unicode|-unicode]]), and [[xterm]]. These are more compliant with Unix terminal standards and user interface conventions than the Cygwin console, but are less suited for running Windows console programs.\n* Various utilities are provided for converting between Windows and Unix paths and file formats, for handling line ending (CRLF/LF) issues, for displaying the [[Dynamic-link library|DLL]]s that an executable is linked with, etc.\n* Apart from always being linked against the Cygwin DLL, Cygwin executables are normal Windows executables. This means that Cygwin programs have full access to the [[Windows API]] and other Windows libraries, which allows gradual porting of programs from one platform to the other. However, programmers need to be careful about mixing conflicting POSIX and Windows functions.\n\nThe version of [[GNU Compiler Collection|gcc]] that comes with Cygwin has various extensions for creating Windows DLLs, specifying whether a program is a windowing or console-mode program, adding resources, etc. Support for compiling programs that do not require the POSIX compatibility layer provided by the Cygwin DLL used to be included in the default <code>gcc</code>, but {{as of | 2014 | lc = on}} is provided by cross-compilers contributed by the [[MinGW#MinGW-w64|MinGW-w64]] project.\n\nCygwin is used heavily for porting many popular pieces of software to the Windows platform. It is used to compile [[Sun Microsystems|Sun]] [[Java (programming language)|Java]], [[LibreOffice]], and even web server software like [[Lighttpd]] and [[Hiawatha (web server)|Hiawatha]].<ref>{{Cite web|url=https://www.hiawatha-webserver.org/|title=Hiawatha webserver|first=Hugo|last=Leisink|website=www.hiawatha-webserver.org}}</ref>\n\nThe Cygwin API library is licensed under the [[GNU Lesser General Public License]] version 3 (or later) with an exception to allow linking to any [[free and open-source software]] whose license conforms to the [[Open Source Definition]]<ref name=\"cyglicense\">{{cite web | url = https://cygwin.com/licensing.html | title = What are the licensing terms? | archive-url = https://web.archive.org/web/20120728133502/http://cygwin.com/licensing.html | archive-date=2012-07-28  | url-status = live |work = Cygwin}}\n</ref> (less strict than the Free Software Definition).\n\n==History==\nCygwin began in 1995 as a project of Steve Chamberlain, a [[Cygnus Solutions|Cygnus]] engineer who observed that Windows NT and 95 used [[COFF]] as their [[object file format]], and that GNU already included support for [[x86]] and COFF, and the C library [[newlib]]. He thought it would be possible to retarget [[GNU Compiler Collection|GCC]] and produce a [[cross compiler]] generating executables that could run on Windows. This proved practical and a prototype was quickly developed.\n\nThe next step was to attempt to [[Bootstrapping (compilers)|bootstrap]] the compiler on a Windows system, requiring sufficient emulation of Unix to let the [[Autoconf|GNU configure]] [[shell script]] run. A [[Bourne shell]]-compatible command interpreter, such as [[Bash (Unix shell)|bash]], was needed and in turn a fork system call emulation and [[Standard streams|standard input/output]]. Windows includes similar functionality, so the Cygwin library just needed to provide a [[POSIX]]-compatible [[application programming interface]] (API) and properly translate calls and manage private versions of data, such as [[file descriptor]]s.\n\nInitially, Cygwin was called gnuwin32 (not to be confused with the current [[GnuWin32]] project). The name was changed to Cygwin32 to emphasize Cygnus' role in creating it. When [[Microsoft]] registered the trademark [[Win32]], the 32 was dropped to simply become Cygwin.\n\nBy 1996, other engineers had joined in, because it was clear that Cygwin would be a useful way to provide Cygnus' embedded tools hosted on Windows systems (the previous strategy had been to use [[DJGPP]]). It was especially attractive because it was possible to do a [[Canadian cross|three-way cross-compile]], for instance to use a hefty [[Sun Microsystems]] workstation to build, say, a Windows-x-[[MIPS architecture|MIPS]] cross-compiler, which was faster than using the PC at the time. In 1999, Cygnus offered Cygwin 1.0 as a commercial product<ref>{{cite web|url=https://books.google.com/books?id=_k4EAAAAMBAJ&q=InfoWorld+15+Nov+1999+Cygwin&pg=PA110|title=Cygwin Unites Unix and Windows Apps|website=Google Books|date=1999-11-15|access-date=2020-01-13}}</ref> of interest in its own right although subsequent versions have not been released, instead relying on continued open source releases.\n\nGeoffrey Noer was the project lead from 1996 to 1999.<ref>{{cite mailing list|mailing-list=Cygwin|first=DJ|last=Delorie|date=1999-02-17|url=https://cygwin.com/ml/cygwin/1999-02/msg00556.html|title=fyi: who does what|access-date=2020-01-13}}</ref><ref>{{cite mailing list|mailing-list=Cygwin|first=Geoffrey|last=Noer|date=1999-02-19|url=https://cygwin.com/ml/cygwin/1999-02/msg00639.html|title=A partial goodbye...|access-date=2020-01-13}}</ref> Christopher Faylor was the project lead from 1999 to mid-2014. Corinna Vinschen became co-lead since 2004<ref>{{cite mailing list|mailing-list=Cygwin|first=Christopher|last=Faylor|date=2004-03-31|url=https://cygwin.com/ml/cygwin/2004-03/msg01568.html|title=Changing jobs|access-date=2020-01-13}}</ref> when Faylor left Red Hat and has been lead since mid-2014, when Faylor withdrew from active participation in the project.<ref>{{cite mailing list|mailing-list=Cygwin|first=Christopher|last=Faylor|date=2014-07-31|url=https://sourceware.org/ml/cygwin/2014-07/msg00392.html|title=Christopher Faylor – Withdrawing from the project|access-date=2 May 2015}}</ref>\n\n==Features==\nCygwin's base package selection is fairly small (about 100&nbsp;MB<ref>{{cite web|url=https://cygwin.com/install.html|title=Installing and Updating Cygwin Packages|website=Cygwin|access-date=2020-01-11}}</ref>), containing little more than the [[Bash (Unix shell)|bash]] (interactive user) and [[Dash (shell)|dash]] (installation) shells and the core file and text manipulation utilities expected of a Unix command line. Additional packages are available as optional installs from within Cygwin's package manager (\"setup-x86.exe\" – 32bit & \"setup-x86_64.exe\" – 64bit). These include (among many others<ref>{{cite web|url=https://cygwin.com/packages/package_list.html|title=Cygwin Package List|website=Cygwin|access-date=2020-01-11}}</ref>):\n* Shells (i.e. command line interpreters): [[Bash (Unix shell)|bash]], [[Debian Almquist shell|dash]], [[Friendly interactive shell|fish]], [[KornShell|pdksh]], [[tcsh]], [[zsh]]\n* File and system utilities: [[coreutils]], [[findutils]], [[util-linux]]\n* Text utilities: [[grep]], [[sed]], [[diff]], [[patch (Unix)|patch]], [[awk]]\n* Terminals: [[mintty]], [[rxvt]], [[GNU Screen|screen]]\n* Editors: [[ed (editor)|ed]], [[emacs]], [[Joe's Own Editor|joe]], [[mined (text editor)|mined]], [[nano (text editor)|nano]], [[Vim (text editor)|vim]]\n* Remote login: [[OpenSSH|ssh]], [[Remote Shell|rsh]], [[telnet]]\n* Remote file transfer/synchronization: [[ftp]], [[Secure copy|scp]], [[rsync]], unison, [[rtorrent]]\n* Compression/archiving: [[tar (file format)|tar]], [[gzip]], [[bzip2]], [[lzma]], [[ZIP (file format)|zip]]\n* Text processing: [[TeX]], [[groff (software)|groff]], [[Ghostscript]]\n* Programming languages: [[C (programming language)|C]], [[C++]], [[Objective-C]], [[Fortran]], [[Gambas]], [[Perl]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Tcl]], [[Ada (programming language)|Ada]], [[CLISP]], [[Scheme (programming language)|Scheme]], [[OCaml]], [[Prolog]]\n* Development tools: [[make (software)|make]], [[autotools]], [[flex lexical analyser|flex]], [[GNU bison|bison]], [[doxygen]]\n* Version control systems: [[Concurrent Versions System|cvs]], [[Subversion (software)|subversion]], [[Git (software)|git]], [[mercurial]]\n* Servers: [[Apache HTTP Server|Apache]], [[BIND]], [[PostgreSQL]], [[Pure-FTPd]], [[OpenSSH]], [[telnetd]], [[exim]], [[UW IMAP]]\n* Clients: [[Mutt (e-mail client)|Mutt]] (email), [[Lynx (web browser)|Lynx]] (web), [[Irssi]] (IRC), [[tin (newsreader)|tin]] (newsgroups)\n\nThe [[Cygwin/X]] project contributes an implementation of the [[X Window System]] that allows graphical Unix programs to display their user interfaces on the Windows desktop. This can be used with both local and remote programs. Cygwin/X supports over 500 packages including major X window managers, desktop environments, and applications, for example:\n* Terminals: [[rxvt-unicode]], [[xterm]]\n* Editors: emacs-X11, [[Vim (text editor)|gvim]]\n* Text processors/viewers: [[LyX]], [[xpdf]], [[Device independent file format|xdvi]]\n* WWW browsers: [[Epiphany (GNOME)|epiphany]], [[konqueror]], [[Links (web browser)|links]], [[Lynx (web browser)|lynx]], [[Midori (web browser)|midori]], [[qupzilla]], [[w3m]]\n\nIn addition to the low-level [[Xlib]]/[[XCB]] libraries for developing X applications, Cygwin also ships with various higher-level and cross-platform [[Graphical user interface|GUI]] frameworks, including [[GTK+]] and [[Qt (software)|Qt]].\n\nThe [[Cygwin Ports]] project provided many additional packages that were not available in the Cygwin distribution itself. Examples included [[GNOME]] and [[K Desktop Environment 3]] as well as the [[MySQL]] database and the [[PHP]] scripting language. Most ports have been adopted by volunteer maintainers as Cygwin packages, and Cygwin Ports are no longer maintained. \n\n==References==\n{{Reflist}}\n\n==External links==\n{{wikibooks}}\n* {{official website}}\n\n{{FLOSS}}\n{{Unix-Windows Interoperability}}\n\n[[Category:Compatibility layers]]\n[[Category:Computer programming tools]]\n[[Category:Free compilers and interpreters]]\n[[Category:Free emulation software]]\n[[Category:Free software programmed in C]]\n[[Category:Free software programmed in C++]]\n[[Category:Red Hat software]]\n[[Category:System administration]]\n[[Category:Unix emulators]]\n[[Category:Windows-only free software]]",
            "slug": "cygwin",
            "date_updated": 1614429657032,
            "imported": "https://en.wikipedia.org/wiki/Cygwin"
        }
    ]
}