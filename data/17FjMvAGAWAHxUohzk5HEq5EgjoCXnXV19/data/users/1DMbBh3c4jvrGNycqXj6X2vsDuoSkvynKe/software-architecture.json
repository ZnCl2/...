{
    "article": [
        {
            "title": "software_architecture",
            "text": "{{Software development process}}\n'''Software architecture''' refers to the high level structures of a [[software system]], the discipline of creating such structures, and the documentation of these structures. These structures are needed to reason about the software system. Each structure comprises software elements, relations among them, and properties of both elements and relations.<ref name=\"DSA2\">\n{{cite book|last=Clements|first=Paul|author2=Felix Bachmann |author3=[[Len Bass]] |author4=David Garlan |author5=James Ivers |author6=Reed Little |author7=Paulo Merson |author8=Robert Nord |author9=Judith Stafford  |title=Documenting Software Architectures: Views and Beyond, Second Edition|publisher = Addison-Wesley|year=2010|location=Boston|isbn=0-321-55268-7}}</ref> The ''architecture'' of a software system is a metaphor, analogous to the [[architecture]] of a building.<ref name=\"PERRY1992\">{{Cite journal | last1 = Perry | first1 = D. E. | last2 = Wolf | first2 = A. L. | authorlink2 = Alexander L. Wolf| doi = 10.1145/141874.141884 | title = Foundations for the study of software architecture | journal = [[ACM SIGSOFT Software Engineering Notes]]| volume = 17 | issue = 4 | pages = 40 | year = 1992 | pmid =  | pmc = | url = http://users.ece.utexas.edu/~perry/work/papers/swa-sen.pdf}}</ref>\n\nSoftware architecture is about making fundamental structural choices which are costly to change once implemented. Software architecture choices include specific structural options from possibilities in the design of software. For example, the systems that controlled the [[space shuttle]] launch vehicle had the requirement of being very fast and very reliable. Therefore, an appropriate [[real-time computing]] language would need to be chosen. Additionally, to satisfy the need for reliability the choice could be made to have multiple redundant and independently produced copies of the program, and to run these copies on independent hardware while cross-checking results.\n\nDocumenting software architecture facilitates communication between [[Stakeholder (corporate)#In management|stakeholders]], captures early decisions about the high-level design, and allows reuse of design components between projects.<ref name=\"SAP2\">\n{{cite book|last=Bass|first=Len|author2=Paul Clements |author3=Rick Kazman |title=Software Architecture In Practice, Third Edition|publisher = Addison-Wesley|year=2012|location=Boston|isbn=978-0-321-81573-6}}</ref>{{rp|pp.29–35}}\n\n==Scope==\nOpinions vary as to the scope of software architectures:<ref>{{cite web|author=SEI|title= How do you define Software Architecture?|url= http://www.sei.cmu.edu/architecture/start/glossary/definition-form.cfm |year=2006|accessdate=2012-09-12}}</ref>\n* ''Overall, macroscopic system structure'';<ref>{{cite web|author=Garlan & Shaw |title= An Introduction to Software Architecture |url= http://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf |year=1994|accessdate=2012-09-13}}</ref> this refers to architecture as a higher level [[Abstraction (computer science)|abstraction]] of a software system that consists of a collection of computational ''components'' together with ''connectors'' that describe the interaction between these components.\n* ''The important stuff—whatever that is'';<ref name=\"FOWL2003\">{{Cite journal | last1 = Fowler | first1 = M. | title = Design – Who needs an architect? | doi = 10.1109/MS.2003.1231144 | journal = IEEE Software | volume = 20 | issue = 5 | pages = 11–44 | year = 2003 | pmid =  | pmc = }}</ref> this refers to the fact that software architects should concern themselves with those decisions that have high impact on the system and its stakeholders.\n* ''That which is fundamental to understanding a system in its environment\"<ref>[http://www.iso-architecture.org/42010/defining-architecture.html ISO/IEC/IEEE 42010: Defining \"architecture\"]. Iso-architecture.org. Retrieved on 2013-07-21.</ref>\n* ''Things that people perceive as hard to change'';<ref name=\"FOWL2003\"/> since designing the architecture takes place at the beginning of a software system's lifecycle, the architect should focus on decisions that \"have to\" be right the first time. Following this line of thought, architectural design issues may become non-architectural once their irreversibility can be overcome.\n* ''A set of architectural design decisions'';<ref name=\"jansen05\" /> software architecture should not be considered merely a set of models or structures, but should include the decisions that lead to these particular structures, and the rationale behind them. This insight has led to substantial research into software architecture [[knowledge management]].<ref name=\"AKM\">{{cite book |title=Software Architecture Knowledge Management |last1=Ali Babar |first1=Muhammad|last2=Dingsoyr|first2=Torgeir|last3=Lago|first3=Patricia|last4=van Vliet|first4=Hans|year=2009 |publisher=Springer|location=Dordrecht Heidelberg London New York |isbn=978-3-642-02373-6}}</ref>\nThere is no sharp distinction between software architecture versus design and requirements engineering (see [[#Related fields|Related fields]] below). They are all part of a \"chain of intentionality\" from high-level intentions to low-level details.<ref name=\"FAIRBANKS2010\">{{cite book|author=George Fairbanks|title=Just Enough Software Architecture|year=2010|publisher=Marshall & Brainerd}}</ref>{{rp|page=18}}\n\n==Characteristics==\nSoftware architecture exhibits the following:\n\n'''Multitude of stakeholders:''' software systems have to cater to a variety of stakeholders such as business managers, owners, users and operators. These stakeholders all have their own concerns with respect to the system. Balancing these concerns and demonstrating how they are addressed is part of designing the system.<ref name=\"SAP2\" />{{rp|pp.29–31}} This implies that architecture involves dealing with a broad variety of concerns and stakeholders, and has a multidisciplinary nature.\n\n'''Separation of concerns:''' the established way for architects to reduce complexity is to separate the concerns that drive the design. Architecture documentation shows that all stakeholder concerns are addressed by modeling and describing the architecture from separate points of view associated with the various stakeholder concerns.<ref name=\"ISO42010\"/> These separate descriptions are called architectural views (see for example the [[4+1 Architectural View Model]]).\n\n'''Quality-driven:''' classic [[software design]] approaches (e.g. [[Jackson Structured Programming]]) were driven by required functionality and the flow of data through the system, but the current insight<ref name=\"SAP2\"/>{{rp|pp.26–28}} is that the architecture of a software system is more closely related to its [[quality attributes]] such as [[fault-tolerance]], [[backward compatibility]], [[extensibility]], [[reliability (engineering)|reliability]], [[maintainability]], [[availability]], security, usability, and other such –[[ilities]]. Stakeholder concerns often translate into [[requirements]] on these quality attributes, which are variously called [[non-functional requirements]], extra-functional requirements, behavioral requirements, or quality attribute requirements.\n\n'''Recurring styles:''' like building architecture, the software architecture discipline has developed standard ways to address recurring concerns. These \"standard ways\" are called by various names at various levels of abstraction. Common terms for recurring solutions are architectural style,<ref name=\"FAIRBANKS2010\"/>{{rp|pp.273–277}} tactic,<ref name=\"SAP2\"/>{{rp|pp.70–72}} [[reference architecture]]<ref name=\"REFARCHPRIMER\">{{cite web |url=http://www.gaudisite.nl/ReferenceArchitecturePrimerPaper.pdf |title=A Reference Architecture Primer |last1=Muller |first1=Gerrit |date=August 20, 2007 |website=Gaudi site |access-date=November 13, 2015}}</ref><ref name=\"REFARCHCLASS\">{{cite journal |last=Angelov |first=Samuil |last2=Grefen |first2=Paul |last3=Greefhorst |first3=Danny |title=A Classification of Software Reference Architectures: Analyzing Their Success and Effectiveness |url=https://dx.doi.org/10.1109/WICSA.2009.5290800 |journal=Proc. of WICSA/ECSA 2009 |publisher=IEEE |pages=141–150 |doi=10.1109/WICSA.2009.5290800 |access-date=13 November 2015|year=2009 |isbn=978-1-4244-4984-2 }}</ref> and [[architectural pattern]].<ref name=\"SAP2\"/>{{rp|pp.203–205}}\n\n'''Conceptual integrity:''' a term introduced by Fred Brooks in ''[[The Mythical Man-Month]]'' to denote the idea that the architecture of a software system represents an overall vision of what it should do and how it should do it. This vision should be separated from its implementation. The architect assumes the role of \"keeper of the vision\", making sure that additions to the system are in line with the architecture, hence preserving [[The Mythical Man-Month#Conceptual integrity|conceptual integrity]].<ref name=\"BROOKS\">{{cite book |last= Brooks, Jr.|first=Frederick P. |date=1975|title=[[The Mythical Man-Month]] - Essays on Software Engineering |publisher=Addison-Wesley |isbn=0-201-00650-2}}</ref>{{rp|pp.41–50}}\n\n== Motivation ==\nSoftware architecture is an \"intellectually graspable\" abstraction of a complex system.<ref name=\"SAP2\"/>{{rp|pp.5–6}} This abstraction provides a number of benefits:\n* ''It gives a basis for analysis of software systems' behavior before the system has been built.''<ref name=\"PERRY1992\"/> The ability to verify that a future software system fulfills its stakeholders' needs without actually having to build it represents substantial cost-saving and risk-mitigation.<ref name=\"SARA\">{{cite web| first = H. | last = Obbink\n | last2 = Kruchten| first2 = P.\n | last3 = Kozaczynski| first3 = W.\n | last4 = Postema | first4 = H.\n | last5 = Ran| first5 = A.\n | last6 = Dominick| first6 = L.\n | last7 = Kazman| first7 = R.\n| last8 = Hilliard| first8 = R.\n| last9 = Tracz| first9 = W.\n | last10 = Kahane| first10 = E.\n| title = Software Architecture Review and Assessment (SARA) Report\n| date = Feb 6, 2002\n | url = https://pkruchten.files.wordpress.com/2011/09/sarav1.pdf\n | accessdate = November 1, 2015}}</ref> A number of techniques have been developed to perform such analyses, such as [[ATAM]].\n* ''It provides a basis for re-use of elements and decisions.''<ref name=\"PERRY1992\"/><ref name=\"SAP2\"/>{{rp|p.35}} A complete software architecture or parts of it, like individual architectural strategies and decisions, can be re-used across multiple systems whose stakeholders require similar quality attributes or functionality, saving design costs and mitigating the risk of design mistakes.\n* ''It supports early design decisions that impact a system's development, deployment, and maintenance life.''<ref name=\"SAP2\"/>{{rp|p.31}} Getting the early, high-impact decisions right is important to prevent schedule and [[cost overrun|budget overruns]].\n* ''It facilitates communication with stakeholders, contributing to a system that better fulfills their needs.''<ref name=\"SAP2\"/>{{rp|p.29–31}} Communicating about complex systems from the point of view of stakeholders helps them understand the consequences of their stated requirements and the design decisions based on them. Architecture gives the ability to communicate about design decisions before the system is implemented, when they are still relatively easy to adapt.\n* ''It helps in [[risk management]].'' Software architecture helps to reduce risks and chance of failure.<ref name=\"FAIRBANKS2010\"/>{{rp|page=18}} \n* ''It enables [[cost reduction]].'' Software architecture is a means to manage risk and costs in complex IT projects.<ref name=\"RCDA\">{{cite journal |last=Poort |first=Eltjo |last2=van Vliet |first2=Hans |date=September 2012 |title=RCDA: Architecting as a risk- and cost management discipline |journal=The Journal of Systems and Software |publisher=Elsevier |volume=85 |issue=9 |pages=1995–2013 |doi=10.1016/j.jss.2012.03.071 }}</ref>\n\n==History==\nThe comparison between software design and (civil) architecture was first drawn in the late 1960s,<ref>{{cite web |editor=P. Naur and B. Randell, |title=Software Engineering: Report of a conference sponsored by the NATO Science Committee, Garmisch, Germany, 7–11 Oct. 1968. |publisher=NATO, Scientific Affairs Division, |location=Brussels |year=1969 |url=http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF |accessdate=2012-11-16}}</ref> but the term ''software architecture'' became prevalent only in the beginning of the 1990s.<ref>{{Cite journal|author1=P. Kruchten, H. Obbink  |author2=J. Stafford |lastauthoramp=yes |title=The past, present and future of software architecture|journal=IEEE Software |volume=23 |issue=2 |pages=22 |url=https://dx.doi.org/10.1109/MS.2006.59 |year=2006|accessdate=2012-11-12|doi=10.1109/MS.2006.59 }}</ref>\nThe field of [[computer science]] had encountered problems associated with complexity since its formation.<ref>{{cite web|author=University of Waterloo|title= A Very Brief History of Computer Science |url=http://www.cs.uwaterloo.ca/~shallit/Courses/134/history.html |year=2006|accessdate=2006-09-23}}</ref> Earlier problems of complexity were solved by developers by choosing the right [[data structure]]s, developing [[algorithm]]s, and by applying the concept of [[separation of concerns]]. Although the term \"software architecture\" is relatively new to the industry, the fundamental principles of the field have been applied sporadically by [[software engineering]] pioneers since the mid-1980s. Early attempts to capture and explain software architecture of a system were imprecise and disorganized, often characterized by a set of box-and-line [[diagram]]s.\n<ref>{{cite web|author=IEEE Transactions on Software Engineering|title= Introduction to the Special Issue on Software Architecture |url=http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/trans/ts/&toc=comp/trans/ts/1995/04/e4toc.xml&DOI=10.1109/TSE.1995.10003\n|year=2006|accessdate=2006-09-23|doi= 10.1109/TSE.1995.10003 }}</ref>\n\nSoftware architecture as a concept has its origins in the research of [[Edsger Dijkstra]] in 1968 and [[David Parnas]] in the early 1970s. These scientists emphasized that the structure of a software system matters and getting the structure right is critical. During the 1990s there was a concerted effort to define and codify fundamental aspects of the discipline, with research work concentrating on architectural styles ([[patterns]]), [[architecture description language]]s, [[Software documentation#Architecture/Design documentation|architecture documentation]], and [[formal method]]s.<ref>{{cite web|author=Garlan & Shaw |title= An Introduction to Software Architecture |url= http://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf |year=1994|accessdate=2006-09-25}}</ref>\n\nResearch institutions have played a prominent role in furthering software architecture as a discipline.  [[Mary Shaw (computer scientist)|Mary Shaw]] and David Garlan of [[Carnegie Mellon]] wrote a book titled ''Software Architecture: Perspectives on an Emerging Discipline'' in 1996, which promoted software architecture concepts such as [[software component|components]], connectors, and styles. The [[University of California, Irvine]]'s Institute for Software Research's efforts in software architecture research is directed primarily in architectural styles, architecture description languages, and dynamic architectures.\n\n[[IEEE 1471]]-2000, ''Recommended Practice for Architecture Description of Software-Intensive Systems'', was the first formal standard in the area of software architecture. It was adopted in 2007 by ISO as [[IEEE 1471|ISO/IEC 42010:2007]]. In November 2011, IEEE 1471–2000 was superseded by [[ISO/IEC 42010|ISO/IEC/IEEE 42010:2011]], ''Systems and software engineering — Architecture description'' (jointly published by IEEE and ISO).<ref name=\"ISO42010\">{{cite web|author=ISO/IEC/IEEE|title=ISO/IEC/IEEE 42010:2011 Systems and software engineering – Architecture description|url=http://www.iso.org/iso/catalogue_detail.htm?csnumber=50508|year=2011|accessdate=2012-09-12}}</ref>\n\nWhile in [[IEEE 1471]], software architecture was about the architecture of \"software-intensive systems\", defined as \"any system where software contributes essential influences to the design, construction, deployment, and evolution of the system as a whole\", the 2011 edition goes a step further by including the [[ISO/IEC 15288]] and [[ISO/IEC 12207]] definitions of a system, which embrace not only hardware and software, but also \"humans, processes, procedures, facilities, materials and naturally occurring entities\". This reflects the relationship between software architecture, [[Enterprise Architecture]] and [[Solution Architecture]].\n\n==Architecture activities==\n\nThere are many activities that a software architect performs. A software architect typically works with project managers, discusses [[Architecturally Significant Requirements|architecturally significant requirements]] with stakeholders, designs a software architecture, evaluates a design, communicates with designers and stakeholders, documents the architectural design and more.<ref name=\"Kruchten 2008\">{{Cite journal | last1 = Kruchten | first1 = P. | title = What do software architects really do? | doi = 10.1016/j.jss.2008.08.025 | journal = Journal of Systems and Software | volume = 81 | issue = 12 | pages = 2413–2416 | year = 2008 | pmid =  | pmc = }}</ref> There are four core activities in software architecture design.<ref name=\"hofmeister07\"/> These core architecture activities are performed iteratively and at different stages of the initial software development life-cycle, as well as over the evolution of a system.\n\n'''Architectural analysis''' is the process of understanding the environment in which a proposed system or systems will operate and determining the requirements for the system. The input or requirements to the analysis activity can come from any number of stakeholders and include items such as:\n\n* what the system will do when operational (the functional requirements)\n* how well the system will perform runtime non-functional requirements such as reliability, operability, performance efficiency, security, compatibility defined in [[ISO/IEC 25010]]:2011 standard <ref name=\"ISO25010\">{{cite web|author=ISO/IEC|title=ISO/IEC 25010:2011 Systems and software engineering – Systems and software Quality Requirements and Evaluation (SQuaRE) – System and software quality models|url=http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=35733|year=2011|accessdate=2012-10-08}}</ref> \n* development-time non-functional requirements such as maintainability and transferability defined in ISO 25010:2011 standard <ref name=\"ISO25010\"/> \n* business requirements and environmental contexts of a system that may change over time, such as legal, social, financial, competitive, and technology concerns <ref>{{cite journal|author=Osterwalder and Pigneur| title = An Ontology for e-Business Models|pages=65–97|year=2004}}</ref>\n\nThe outputs of the analysis activity are those requirements that have a measurable impact on a software system’s architecture, called [[Architecturally Significant Requirements|architecturally significant requirements]].<ref name=\"ASR_Chen\">{{Cite journal |doi = 10.1109/MS.2012.174|url = http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6365165|title = Characterizing Architecturally Significant Requirements|journal = IEEE Software|volume = 30|issue = 2|pages = 38–45|year = 2013|last1 = Chen|first1 = Lianping|last2 = Ali Babar|first2 = Muhammad|last3 = Nuseibeh|first3 = Bashar}}</ref>\n\n'''Architectural synthesis''' or design is the process of creating an architecture. Given the [[Architecturally Significant Requirements|architecturally significant requirements]] determined by the analysis, the current state of the design and the results of any evaluation activities, the design is created and improved. See <ref name=\"SAP2\"/>{{rp|pp.311–326}}<ref name=\"hofmeister07\"/> for a discussion of various techniques for improving a current design.\n\n'''Architecture evaluation''' is the process of determining how well the current design or a portion of it satisfies the requirements derived during analysis. An evaluation can occur whenever an architect is considering a design decision, it can occur after some portion of the design has been completed, it can occur after the final design has been completed or it can occur after the system has been constructed. Some of the available software architecture evaluation techniques include [[Architecture tradeoff analysis method|Architecture Tradeoff Analysis Method (ATAM)]] and TARA.<ref name=\"woods2012\" >{{Cite journal | last1 = Woods | first1 = E. | title = Industrial architectural assessment using TARA | doi = 10.1016/j.jss.2012.04.055 | journal = Journal of Systems and Software | volume = 85 | issue = 9 | pages = 2034–2047 | year = 2012 | pmid =  | pmc = }}</ref> Frameworks for comparing the techniques are discussed in frameworks such as SARA Report <ref name=\"SARA\" /> and Architecture reviews: practice and experience.<ref>{{Cite journal | last1 = Maranzano | first1 = J. F. | last2 = Rozsypal | first2 = S. A. | last3 = Zimmerman | first3 = G. H. | last4 = Warnken | first4 = G. W. | last5 = Wirth | first5 = P. E. | last6 = Weiss | first6 = D. M. | doi = 10.1109/MS.2005.28 | title = Architecture Reviews: Practice and Experience | journal = IEEE Software | volume = 22 | issue = 2 | pages = 34 | year = 2005 | pmid =  | pmc = }}</ref>\n\n'''Architecture evolution''' is the process of maintaining and adapting an existing software architecture to meet requirement and environmental changes. As software architecture provides a fundamental structure of a software system, its evolution and maintenance would necessarily impact its fundamental structure. As such, architecture evolution is concerned with adding new functionality as well as maintaining existing functionality and system behaviour.\n\nArchitecture requires critical supporting activities. These supporting activities take place throughout the core software architecture process. They include knowledge management and communication, design reasoning and decision making, and documentation.\n\n=== Architecture supporting activities===\nSoftware architecture supporting activities are carried out during core software architecture activities. These supporting activities assist a software architect to carry out analysis, synthesis, evaluation and evolution. For instance, an architect has to gather knowledge, make decisions and document during the analysis phase.\n\n* '''Knowledge management and communication''' is the activity of exploring and managing knowledge that is essential to designing a software architecture. A software architect does not work in isolation. They get inputs, functional and non-functional requirements and design contexts, from various stakeholders; and provides outputs to stakeholders. Software architecture knowledge is often tacit and is retained in the heads of stakeholders. Software architecture knowledge management activity is about finding, communicating, and retaining knowledge. As software architecture design issues are intricate and interdependent, a knowledge gap in design reasoning can lead to incorrect software architecture design.<ref name=\"Kruchten 2008\" /><ref name=\"SAKM\">{{cite book|last1=Babar|first1=M.A.|last2=Dingsøyr|first2=T.|last3=Lago|first3=P.|last4=Vliet|first4=H. van|title=Software Architecture Knowledge Management:Theory and Practice (eds.), First Edition|publisher = Springer|year=2009|isbn=978-3-642-02373-6}}</ref> Examples of knowledge management and communication activities include searching for design patterns, prototyping, asking experienced developers and architects, evaluating the designs of similar systems, sharing knowledge with other designers and stakeholders, and documenting experience in a wikipage.\n* '''Design reasoning and decision making''' is the activity of evaluating design decisions. This activity is fundamental to all three core software architecture activities.<ref name=\"jansen05\">{{Cite book | last1 = Jansen | first1 = A. | last2 = Bosch | first2 = J. | doi = 10.1109/WICSA.2005.61 | chapter = Software Architecture as a Set of Architectural Design Decisions | title = 5th Working IEEE/IFIP Conference on Software Architecture (WICSA'05) | pages = 109 | year = 2005 | isbn = 0-7695-2548-2 | pmid =  | pmc = }}</ref><ref name=\"tang09\">{{Cite journal | last1 = Tang | first1 = A. | last2 = Han | first2 = J. | last3 = Vasa | first3 = R. | doi = 10.1109/MS.2009.46 | title = Software Architecture Design Reasoning: A Case for Improved Methodology Support | journal = IEEE Software | volume = 26 | issue = 2 | pages = 43 | year = 2009 | pmid =  | pmc = }}</ref> It entails gathering and associating decision contexts, formulating design decision problems, finding solution options and evaluating tradeoffs before making decisions. This process occurs at different levels of decision granularity, while evaluating significant architectural requirements and software architecture decisions, and software architecture analysis, synthesis, and evaluation. Examples of reasoning activities include understanding the impacts of a requirement or a design on quality attributes, questioning the issues that a design might cause, assessing possible solution options, and evaluating the tradeoffs between solutions.\n* '''Documentation''' is the activity of recording the design generated during the software architecture process. A system design is described using several views that frequently include a static view showing the code structure of the system, a dynamic view showing the actions of the system during execution, and a deployment view showing how a system is placed on hardware for execution. Kruchten's 4+1 view suggests a description of commonly used views for documenting software architecture;<ref name=\"Kru95\">Kruchten, Philippe (1995, November). [http://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf Architectural Blueprints — The \"4+1\" View Model of Software Architecture.] IEEE Software 12 (6), pp.&nbsp;42–50.\n</ref> Documenting Software Architectures: Views and Beyond has descriptions of the kinds of notations that could be used within the view description.<ref name=\"DSA2\" /> Examples of documentation activities are writing a specification, recording a system design model, documenting a design rationale, developing a viewpoint, documenting views.\n\n== Software architecture topics ==\n\n=== Software architecture description ===\n{{main|Software architecture description}}\nSoftware architecture description involves the principles and practices of modeling and representing architectures, using mechanisms such as: architecture description languages, architecture viewpoints, and architecture frameworks.\n\n=== Architecture description languages ===\n{{main|Architecture description language}}\nAn architecture description language (ADL) is any means of expression used to describe a software architecture ([[ISO/IEC 42010|ISO/IEC/IEEE 42010]]).\nMany special-purpose ADLs have been developed since the 1990s, including [[Architecture analysis and design language|AADL]] (SAE standard), [[Wright (ADL)|Wright]] (developed by Carnegie Mellon), [[Acme (ADL)|Acme]] (developed by Carnegie Mellon), xADL (developed by UCI), [[Darwin (ADL)|Darwin]] (developed by [[Imperial College London]]), DAOP-ADL (developed by University of Málaga), SBC-ADL (developed by [[National Sun Yat-Sen University]]), and [[ByADL (ADL)|ByADL]] (University of L'Aquila, Italy).\n\n=== Architecture viewpoints ===\n{{main|View model}}\n[[File:4+1 Architectural View Model.svg|thumb|264px|[[4+1 Architectural View Model]].]]\nSoftware architecture descriptions are commonly organized into [[view model|views]], which are analogous to the different types of [[blueprint]]s made in building [[architecture]]. Each view addresses a set of system concerns, following the conventions of its ''viewpoint'', where a viewpoint is a specification that describes the notations, modeling and analysis techniques to use in a view that express the architecture in question from the perspective of a given set of stakeholders and their concerns ([[ISO/IEC 42010|ISO/IEC/IEEE 42010]]). The viewpoint specifies not only the concerns framed (i.e., to be addressed) but the presentation, model kinds used, conventions used and any consistency (correspondence) rules to keep a view consistent with other views.\n\n=== Architecture frameworks ===\n{{main|Architecture framework}}\nAn architecture framework captures the \"conventions, principles and practices for the description of architectures established within a specific domain of application and/or community of stakeholders\" ([[ISO/IEC 42010|ISO/IEC/IEEE 42010]]). A framework is usually implemented in terms of one or more viewpoints or ADLs.\n\n=== Architectural styles and patterns ===\n{{main|Architectural pattern}}\n<!-- This section is linked from [[Abstraction (computer science)]] -->\n\nAn [[architectural pattern]] is a general, reusable solution to a commonly occurring problem in software architecture within a given context. \nArchitectural patterns are often documented as software [[Design pattern (computer science)|design pattern]]s.\n\nFollowing traditional building architecture, a 'software architectural style' is a specific method of construction, characterized by the features that make it notable\" ([[architectural style]]).\n\n{{cquote|''An architectural style defines: a family of systems in terms of a pattern of structural organization; a vocabulary of components and connectors, with constraints on how they can be combined.''<ref name=SG>{{cite book |last=Shaw |first=Mary |last2=Garlan |first2=David |date=1996 |title=Software architecture: perspectives on an emerging discipline |publisher=Prentice Hall |isbn=978-0-13-182957-2}}</ref>}}\n\n{{cquote|''Architectural styles are reusable 'packages' of design decisions and constraints that are applied to an architecture to induce chosen desirable qualities.''<ref>[http://www.isr.uci.edu/architecture/styles.html UCI Software Architecture Research – UCI Software Architecture Research: Architectural Styles]. Isr.uci.edu. Retrieved on 2013-07-21.</ref>}}\n\nThere are many recognized architectural patterns and styles, among them:\n* [[Blackboard (computing)|Blackboard]]\n* [[Client–server model|Client-server]] (2-tier, [[Three-tier (computing)|3-tier]], [[n-tier]], [[cloud computing]] exhibit this style)\n* [[Software componentry|Component-based]]\n* [[Database-centric architecture|Data-centric]] \n* [[Event-driven architecture|Event-driven]] (or [[implicit invocation]])\n* [[Abstraction (computer science)#Layered architecture|Layered]] (or [[multilayered architecture]])\n* [[Microservices|Microservices architecture]]\n* [[Monolithic application]]\n* [[Peer-to-peer]] (P2P)\n* [[Pipes and filters]]\n* [[Plug-in (computing)|Plug-ins]]\n* [[Representational state transfer]] (REST)\n* [[Rule-based system|Rule-based]]\n* [[Service-oriented architecture|Service-oriented]]\n* [[Shared nothing architecture]]\n* [[Space-based architecture]]\n\nSome treat architectural patterns and architectural styles as the same,<ref name=MSDN>[http://msdn.microsoft.com/en-us/library/ee658117.aspx Chapter 3: Architectural Patterns and Styles]. Msdn.microsoft.com. Retrieved on 2013-07-21.</ref> some treat styles as specializations of patterns. What they have in common is both patterns and styles are idioms for architects to use, they \"provide a common language\"<ref name=MSDN/> or \"vocabulary\"<ref name=SG/> with which to describe classes of systems.\n\n=== Software architecture and agile development ===\n{{main|Agile development}}\nThere are also concerns that software architecture leads to too much [[Big Design Up Front]], especially among proponents of [[agile software development]]. A number of methods have been developed to balance the trade-offs of up-front design and agility,<ref name=\"Boehm2004\">{{cite book |title=Balancing Agility and Discipline |last1=Boehm|first1=Barry|last2=Turner|first2=Richard|year=2004|publisher=Addison-Wesley|isbn=0-321-18612-5}}</ref> including the agile method [[dynamic systems development method|DSDM]] which mandates a \"Foundations\" phase during which \"just enough\" architectural foundations are laid. [[IEEE Software]] devoted a special issue<ref>{{cite web|url=http://www.computer.org/portal/web/computingnow/archive/april2010|title=IEEE Software Special Issue on Agility and Architecture|date=April 2010|accessdate=14 September 2012}}</ref> to the interaction between agility and architecture.\n\n=== Software architecture erosion ===\nSoftware architecture erosion (or \"decay\") refers to the gap observed between the planned and actual architecture of a software system as realized in its implementation.<ref>Terra, R., M.T. Valente, K. Czarnecki, and R.S. Bigonha, \"Recommending Refactorings to Reverse Software Architecture Erosion\",\n16th European Conference on Software Maintenance and Reengineering, 2012. \nhttp://gsd.uwaterloo.ca/sites/default/files/Full%20Text.pdf</ref> Software architecture erosion occurs when implementation decisions either do not fully achieve the architecture-as-planned or otherwise violate constraints or principles of that architecture.<ref name=\"PERRY1992\"/> The gap between planned and actual architectures is sometimes understood in terms of the notion of [[technical debt]].\n\nAs an example, consider a strictly [[Abstraction (computer science)#Layered architecture|layered]] system, where each layer can only use services provided by the layer immediately below it. Any source code component that does not observe this constraint represents an architecture violation. If not corrected, such violations can transform the architecture into a monolithic block, with adverse effects on understandability, maintainability, and evolvability.\n\nVarious approaches have been proposed to address erosion. \n\"These approaches, which include tools, techniques and processes, are primarily classified into three generic categories that attempt to minimise, prevent and repair architecture erosion. Within these broad categories, each approach is further broken down reflecting the high-level strategies adopted to tackle erosion. These are: process-oriented architecture conformance, architecture evolution management, architecture design enforcement, architecture to implementation linkage, self-adaptation and architecture restoration techniques consisting of recovery, discovery and reconciliation.\"<ref>de Silva, L. and D. Balasubramaniam, \"Controlling software architecture erosion: A survey\", Journal of Systems and Software 01/2012; 85:132–151.</ref>\n\nThere are two major techniques to detect architectural violations: reflexion models and domain-specific languages. Reflexion model (RM) techniques compare a high-level model provided by the system's architects with the source code implementation. There are also [[domain-specific language]]s with focus on specifying and checking architectural constraints.\n\n=== Software architecture recovery ===\n{{main|Software architecture recovery}}\n\nSoftware architecture recovery (or reconstruction, or [[reverse engineering]]) includes the methods, techniques and processes to uncover a software system's architecture from available information, including its implementation and documentation. Architecture recovery is often necessary to make informed decisions in the face of obsolete or out-of-date documentation and \n[[Software architecture#Software architecture erosion|architecture erosion]]: implementation and maintenance decisions diverging from the envisioned architecture.<ref>\nLungu, M. \"Software architecture recovery\", University of Lugano, 2008. \nhttp://www.slideshare.net/mircea.lungu/software-architecture-recovery-in-five-questions-presentation\n</ref>\n\n==Related fields==\n\n=== Design ===\n{{main|Software design}}\nArchitecture is [[Software design|design]] but not all design is architectural.<ref name=\"DSA2\"/> In practice, the architect is the one who draws the line between software architecture (architectural design) and detailed design (non-architectural design). There are no rules or guidelines that fit all cases, although there have been attempts to formalize the distinction. \nAccording to the ''Intension/Locality Hypothesis'',<ref name=\"edenkazman\">{{cite web |author1=Amnon H. Eden |author2=Rick Kazman |title=Architecture Design Implementation |url=http://www.eden-study.org/articles/2003/icse03.pdf |year=2003 |deadurl=yes |archiveurl=https://web.archive.org/web/20070928035606/http://eden-study.org/articles/2003/icse03.pdf |archivedate=2007-09-28 |df= }}</ref> the distinction between architectural and detailed design is defined by the ''Locality Criterion'',<ref name=\"edenkazman\"/> according to which a statement about software design is non-local (architectural) if and only if a program that satisfies it can be expanded into a program that does not. For example, the [[client–server]] style is architectural (strategic) because a program that is built on this principle can be expanded into a program that is not client–server—for example, by adding [[peer-to-peer]] nodes.\n\n=== Requirements engineering ===\n{{main|Requirements engineering}}\n[[Requirements engineering]] and software architecture can be seen as complementary approaches: while software architecture targets the '[[solution space]]' or the 'how', requirements engineering addresses the '[[Problem|problem space]]' or the 'what'.<ref name=\"shekaran94\">{{Cite journal|author1=C. Shekaran |title=Proceedings of IEEE International Conference on Requirements Engineering |pages=239 |author2=D. Garlan |author3=M. Jackson |author4=N.R. Mead |author5=C. Potts |author6=H.B. Reubenstein |url=https://dx.doi.org/10.1109/ICRE.1994.292379|year=1994|doi=10.1109/ICRE.1994.292379 |chapter=The role of software architecture in requirements engineering |isbn=0-8186-5480-5 }}</ref> Requirements engineering entails the [[Requirements elicitation|elicitation]], [[Requirements analysis|negotiation]], [[Software Requirements Specification|specification]], [[Data validation|validation]], [[Requirements traceability|documentation]] and [[Requirements management|management]] of [[requirement]]s. Both requirements engineering and software architecture revolve around [[Stakeholder (corporate)|stakeholder]] concerns, needs and wishes.\n\nThere is considerable overlap between requirements engineering and software architecture, as evidenced for example by a study into five industrial software architecture methods that concludes that ''\"the inputs (goals, constrains, etc.) are usually ill-defined, and only get discovered or better understood as the architecture starts to emerge\"'' and that while ''\"most architectural concerns are expressed as requirements on the system, they can also include mandated design decisions\"''.<ref name=\"hofmeister07\">{{cite web|author1=Christine Hofmeister |author2=Philippe Kruchten |author3=Robert L. Nord |author4=Henk Obbink |author5=Alexander Ran |author6=Pierre America |title=A general model of software architecture design derived from five industrial approaches|year=2007|url=http://dl.acm.org/citation.cfm?id=1222045}}</ref> In short, the choice of required behavior given a particular problem impacts the architecture of the solution that addresses that problem, while at the same time the architectural design may impact the problem and introduce new requirements.<ref name=\"boer09\">{{Cite journal|author=Remco C. de Boer, [[Hans van Vliet]]|title=On the similarity between requirements and architecture|journal=Journal of Systems and Software|volume=82|issue=3|pages=544|year=2009|url=https://dx.doi.org/10.1016/j.jss.2008.11.185|doi=10.1016/j.jss.2008.11.185}}</ref> Approaches such as the Twin Peaks model <ref name=\"twinpeaks\">{{Cite journal|author=Bashar Nuseibeh|title=Weaving together requirements and architectures|journal=Computer|volume=34|issue=3|pages=115|year=2001|url=https://dx.doi.org/10.1109/2.910904|doi=10.1109/2.910904}}</ref> aim to exploit the [[Synergy|synergistic]] relation between requirements and architecture.\n\n=== Other types of 'architecture' ===\n{{main|Computer architecture|Systems architecture|Enterprise architecture}}\n\n;Computer architecture \n:[[Computer architecture]] targets the internal structure of a computer system, in terms of collaborating hardware components such as the [[Central processing unit|CPU]] – or processor – the [[Bus (computing)|bus]] and the [[Computer memory|memory]].\n\n;Systems architecture\n:The term [[systems architecture]] has originally been applied to the architecture of [[system]]s that consists of both hardware and [[software]]. The main concern addressed by the systems architecture is then the integration of software and hardware in a complete, correctly working device. In another common – much broader – meaning, the term applies to the architecture of any complex system which may be of technical, [[Sociotechnical system|sociotechnical]] or social nature.\n\n;Enterprise architecture\n:The goal of [[enterprise architecture]] is to \"translate business vision and strategy into effective enterprise\".<ref>[http://www.gartner.com/technology/it-glossary/enterprise-architecture.jsp Definition of Enterprise Architecture, Gartner]</ref> Enterprise architecture [[Architecture framework|frameworks]], such as [[TOGAF]] and the [[Zachman Framework]], usually distinguish between different enterprise architecture layers. Although terminology differs from framework to framework, many include at least a distinction between a ''[[business]] layer'', an ''[[Application software|application]]'' (or ''[[information]]'') ''layer'', and a ''[[technology]] layer''. Enterprise architecture addresses among others the alignment between these layers, usually in a top-down approach.\n\n==See also==\n*[[Architectural pattern (computer science)]]\n*[[Anti-pattern]]\n*[[Attribute-driven design]]\n*[[Computer architecture]]\n*[[Distributed Data Management Architecture]]\n*[[DRDA|Distributed Relational Database Architecture]]\n*[[Systems architecture]]\n*[[Systems design]]\n*[[Software Architecture Analysis Method]]\n*[[Time-triggered system]]\n\n==References==\n{{Reflist}}\n\n== Further reading ==\n* Paul Clements, Felix Bachmann, Len Bass, David Garlan, James Ivers, Reed Little, Paulo Merson, Robert Nord, Judith Stafford: ''Documenting Software Architectures: Views and Beyond, Second Edition''. Addison-Wesley, 2010, {{ISBN|0-321-55268-7}}. This book describes what is software architecture and shows how to document it in multiple views, using UML and other notations. It also explains how to complement the architecture views with behavior, software interface, and rationale documentation. Accompanying the book is a [https://wiki.sei.cmu.edu/sad/index.php/The_Adventure_Builder_SAD wiki that contains an example of software architecture documentation].\n* Len Bass, Paul Clements, Rick Kazman: ''Software Architecture in Practice, Third Edition''. Addison Wesley, 2012, {{ISBN|0-321-81573-4}} (This book, now in third edition, eloquently covers the fundamental concepts of the discipline. The theme is centered on achieving quality attributes of a system.)\n* Amnon H. Eden, Rick Kazman. [https://web.archive.org/web/20070928035606/http://eden-study.org/articles/2003/icse03.pdf ''Architecture, Design, Implementation.''] On the distinction between architectural design and detailed design.\n* Javier Garzás and Mario Piattini. An ontology for micro-architectural design knowledge, [[IEEE Software]] Magazine, Volume: 22, Issue: 2, March–April 2005. pp.&nbsp;28 – 33.\n* Philippe Kruchten: ''Architectural Blueprints – the 4+1 View Model of Software Architecture''. In: IEEE Software. 12 (6) November 1995, pp.&nbsp;42–50 (also available online at the [http://www3.software.ibm.com/ibmdl/pub/software/rational/web/whitepapers/2003/Pbk4p1.pdf Rational website](PDF))\n* Tony Shan and Winnie Hua (2006). [http://doi.ieeecomputersociety.org/10.1109/EDOC.2006.54 ''Solution Architecting Mechanism'']. Proceedings of the 10th IEEE International EDOC Enterprise Computing Conference (EDOC 2006), October 2006, p&nbsp;23–32\n* Martin Fowler (with Ralph Johnson) [http://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf Who Needs an Architect?] IEEE Software, Jul/Aug 2003\n* {{Cite book| last = SOMF: Bell | first = Michael  | year = 2008 | title = Service-Oriented Modeling: Service Analysis, Design, and Architecture | publisher = Wiley| asin = 0470141115  }}\n\n==External links==\n{{commons category}}\n{{wikiquote}}\n* [http://www.ibm.com/developerworks/rational/library/feb06/eeles/ Explanation on IBM Developerworks]\n* Collection of [http://www.sei.cmu.edu/architecture/start/definitions.cfm software architecture definitions] at [[Software Engineering Institute]] (SEI), [[Carnegie Mellon University]] (CMU)\n* [http://www.iasaglobal.org/ International Association of IT Architects (IASA Global)], formerly known as the International Association for Software Architects (IASA)\n* [http://www.softwarearchitectureportal.org/ SoftwareArchitecturePortal.org] — website of [[IFIP Working Group 2.10]] on Software Architecture\n* [http://www.softwarearchitectures.com/ SoftwareArchitectures.com] — independent resource of information on the discipline\n* [http://www.ics.uci.edu/~fielding/pubs/dissertation/software_arch.htm Software Architecture], chapter 1 of [[Roy Fielding]]'s REST dissertation\n* [http://www.methodsandtools.com/archive/archive.php?id=85 When Good Architecture Goes Bad]\n* [http://sadd.codeplex.com The Spiral Architecture Driven Development] – the [[Systems Development Life Cycle|SDLC]] based on [[Spiral model]] is to reduce the risks of ineffective architecture\n* [https://www.infoq.com/architecture Software Architecture Real Life Case Studies]\n\n{{Software engineering}}\n{{Edsger Dijkstra}}\n\n{{Authority control}}\n\n{{DEFAULTSORT:Software Architecture}}\n[[Category:Software architecture| ]]\n[[Category:Edsger W. Dijkstra]]",
            "slug": "software-architecture",
            "date_updated": 1519550994465,
            "imported": "https://en.wikipedia.org/wiki/software_architecture"
        }
    ]
}