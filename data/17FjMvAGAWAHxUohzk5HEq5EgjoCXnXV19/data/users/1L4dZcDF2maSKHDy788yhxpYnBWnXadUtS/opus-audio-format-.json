{
    "article": [
        {
            "title": "Opus (audio format)",
            "text": "{{Infobox file format\n| name                   = Opus\n| logo                   = [[File:Opus logo2.svg|128px]]\n| caption                =\n| extension              = .opus\n|_nomimecode             = true\n| mime                   = {{ubl |<code>audio/ogg</code><ref name=\"Ogg\">{{cite IETF |title=Ogg Encapsulation for the Opus Audio Codec |rfc=7845 |sectionname=Content Type |section=9 |page=30 |last1=Terriberry |first1=Timothy |last2=Lee |first2= Ron |last3=Giles |first3=Ralph |year=2016 |month=April |publisher=[[Internet Engineering Task Force|IETF]] |access-date=2016-04-30}}</ref> |<code>audio/opus</code><ref name=\"OpusMIME\">{{cite IETF |title=RTP Payload Format for the Opus Speech and Audio Codec |rfc=7587 |sectionname=Opus Media Type Registration |section=6.1 |page=9 |last1=Spittka |first1=Julian |last2=Vos |first2=Koen |last3=Valin |first3=Jean-Marc |date=2015-06-30 |publisher=[[Internet Engineering Task Force|IETF]] |access-date=2015-06-30 |issn=2070-1721 }}</ref>}}\n| owner                  = [[Internet Engineering Task Force|IETF]] [http://www.ietf.org/mailman/listinfo/codec codec] working group\n| released               = {{start date|2012|09|11}}\n| genre                  = Audio\n| contained by           = [[Ogg]], [[Matroska]], [[WebM]], [[MPEG-TS]], [[MP4]]\n| extended from          = [[SILK]], [[CELT]]\n| extended to            =\n| standard               = RFC 6716\n| free                   = Yes\n| url                    = {{url|opus-codec.org}}\n}}\n{{Infobox software\n| title = libopus\n| name = libopus\n| developer = [[Xiph.Org Foundation]]\n| released = {{Start date|2012|08|26}}\n| latest release version = 1.2.1\n| latest release date = {{Date and age|2017|06|26}}\n| latest preview version = 1.3-beta\n| latest preview date = {{Date and age|2017|12|21}}\n| programming language = [[ANSI C|C89]]\n| platform = [[Cross-platform]]\n| genre = [[Audio codec]], [[reference implementation (computing)|reference implementation]]\n| license = [[3-clause BSD license]]\n| website = {{URL|opus-codec.org/downloads/|Opus codec downloads}}\n}}\n\n'''Opus''' is a [[Lossy audio compression|lossy]] [[audio coding format]] developed by the [[Xiph.Org Foundation]] and standardized by the [[Internet Engineering Task Force]], designed to efficiently code speech and general audio in a single format, while remaining [[latency (audio)|low-latency]] enough for real-time interactive communication and low-complexity enough for low-end embedded processors.<ref name=\"homepage\">{{cite web |url=http://opus-codec.org/ |title=Opus Codec |work=Opus |publisher=Xiph.org Foundation |type=Home page |accessdate=July 31, 2012}}</ref><ref name=\"ars-role\">{{cite web |url=https://arstechnica.com/gadgets/2012/09/newly-standardized-opus-audio-codec-fills-every-role-from-online-chat-to-music/ |title=Newly standardized Opus audio codec fills every role from online chat to music |first=Peter |last=Bright |work=[[Ars Technica]] |date=2012-09-12 |accessdate=2014-05-28}}</ref> Opus replaces both [[Vorbis]] and [[Speex]] for new applications, and several blind listening tests have ranked it higher-quality than any other standard audio format at any given bitrate until [[Transparency (data compression)|transparency]] is reached, including [[MP3]], [[Advanced Audio Coding|AAC]], and [[High-Efficiency Advanced Audio Coding|HE-AAC]].<ref name=\"testsummary\"/><ref name=\"96kListeningTest\"/>\n\nOpus combines the speech-oriented [[linear predictive coding]] [[SILK]] algorithm and the lower-latency, [[MDCT|MDCT-based]] [[CELT]] algorithm, switching between or combining them as needed for maximal efficiency.<ref name=\"homepage\" /> Bitrate, audio bandwidth, complexity, and algorithm can all be adjusted seamlessly in each frame. Opus has the low algorithmic delay (26.5&nbsp;ms by default)<ref name=\"ValinAES135\">{{cite web|author1=Jean-Marc Valin|author2=Gregory Maxwell|author3=Timothy B. Terriberry|author4=Koen Vos|title=High-Quality, Low-Delay Music Coding in the Opus Codec|url=http://jmvalin.ca/papers/aes135_opus_celt.pdf|website=www.xiph.org|publisher=Xiph.Org Foundation|accessdate=19 August 2014|location=New York, USA|page=2|date=October 17–20, 2013|quote=CELT's look-ahead is 2.5 ms, while SILK's look-ahead is 5 ms, plus 1.5 ms for the resampling (including both encoder and decoder resampling). For this reason, the CELT path in the encoder adds a 4 ms delay. However, an application can restrict the encoder to CELT and omit that delay. This reduces the total look-ahead to 2.5 ms.}}</ref> necessary for use as part of a real-time communication link, permitting natural conversation, [[networked music performance]]s, and live [[lip sync]]; by trading-off quality or bitrate, the delay can be reduced down to 5&nbsp;ms. Its delay is exceptionally low compared to competing codecs, which require well over 100&nbsp;ms, yet Opus performs very competitively with these formats in terms of quality per bitrate.<ref name=\"testing\">{{cite web |first=Raymond |last=Chen |url=http://www.ietf.org/proceedings/80/slides/codec-4.pdf |title=Opus Testing |date=April 1, 2011 |accessdate=2016-01-02}}</ref>\n\nAs an [[open format]] standardized through RFC 6716, a [[reference implementation]] called '''libopus''' is available under the [[New BSD License]]. The reference has both [[Fixed-point arithmetic|fixed-point]] and [[floating-point]] optimizations for low- and high-end devices, with [[SIMD]] optimizations on platforms that support them. All known [[software patent]]s that cover Opus are licensed under [[royalty-free]] terms.<ref name=\"OpusLicense\"/>\n\n==Features==\n[[File:Opus bitrate+latency comparison.svg|thumb|left|Possible bitrate and latency combinations compared with other audio formats]]\n\nOpus supports [[Constant bitrate|constant]] and [[variable bitrate]] encoding from 6&nbsp;[[Kilobit|kbit]]/s to 510&nbsp;kbit/s, frame sizes from 2.5&nbsp;ms to 120&nbsp;ms, and five [[sampling rate]]s from 8&nbsp;kHz (with 4&nbsp;kHz bandwidth) to 48&nbsp;kHz (with 20&nbsp;kHz bandwidth, the human [[hearing range]]). An Opus stream can support up to 255 [[Channel (communications)|audio channels]], and it allows [[joint (audio engineering)|channel coupling]] between channels in groups of two using mid-side coding.\n\nOpus has very short [[Latency (audio)|latency]] (26.5&nbsp;ms by default), which makes it suitable for [[real-time computing|real-time applications]] such as [[telephony]], [[Voice over IP]] and [[videoconferencing]]; research by [[Xiph.Org Foundation|Xiph]] led to the [[CELT]] codec, which allows the highest quality while maintaining low delay. In any Opus stream, the bitrate, bandwidth, and delay can be continually varied without introducing any distortion or discontinuity; even mixing packets from different streams will cause a smooth change, rather than the distortion common in other codecs. Unlike Vorbis, Opus does not require large [[Codebook#Data compression|codebooks]] for each individual file, making it more efficient for short clips of audio and more resilient.\n\nAs an open standard, the algorithms are openly documented, and a [[reference implementation]] (including the [[source code]]) is published. [[Broadcom]] and the Xiph.Org Foundation own [[software patent]]s on some of the CELT algorithms, and [[Skype Technologies]]/Microsoft own some on the SILK algorithms; each offers a royalty-free perpetual for use with Opus, reserving only the right to make use of their patents to defend against infringement suits of third parties. [[Qualcomm]], [[Huawei]], [[France Telecom]], and [[Ericsson]] have claimed that their patents may apply, which Xiph's legal counsel denies, and none have pursued any legal action.<ref name=\"OpusLicense\">{{cite web |url=https://www.opus-codec.org/license/ |title=Opus Codec License |publisher=Xiph.org |accessdate=2015-12-22}}</ref><ref name=\"osnews\">{{cite web |url=http://www.osnews.com/story/26892/Nokia_s_VP8_patent_claims_we_ve_been_here_before |title=Nokia's VP8 patent claims: we've been here before |publisher=OSNews |date=2013-05-25 |accessdate=2014-07-17}}</ref> The Opus license automatically and retroactively terminates for any entity that attempts to file a patent suit.\n\n[[File:FSsongmetal2-Opus-exp7.20120823-sweep.png|thumb|400px|right|[[Spectrogram]] of Opus-encoded audio as bitrate rises (~32 to ~160&nbsp;kbit/s) clearly shows lowpass behavior and better preservation of the band energy with CELT (compare [[Commons:Opus#Spectrograms in comparison|original, Vorbis, MP3, AAC]]).]]\n\nThe Opus format is based on a combination of the full-bandwidth [[CELT]] format and the speech-oriented [[SILK]] format, both heavily modified: CELT is based on the [[modified discrete cosine transform|MDCT]] that most music codecs use, using [[Code-excited linear prediction|CELP]] techniques in the frequency domain for better prediction, while SILK uses [[linear predictive coding]] (LPC) and an optional Long-Term Prediction filter to model speech. In Opus, both were modified to support more frame sizes, as well as further algorithmic improvements and integration, such as using CELT's [[range encoding|range encoder]] for both types. To minimize packet overhead at low bitrates, if latency is not as pressing, SILK has support for packing multiple 20&nbsp;ms frames together, sharing context and headers; SILK also allows Low Bit-Rate Redundancy (LBRR) frames, allowing low-quality packet loss recovery. CELT includes both spectral replication and noise generation, similar to AAC's SBR and PNS, and can further save bits by filtering out all harmonics of tonal sounds entirely, then replicating them in the decoder.<ref>{{cite web |url=https://people.xiph.org/~xiphmont/demo/celt/demo.html |title=next generation audio: CELT update 20101223 |date=December 23, 2010 |first=Christopher |last=Montgomery}}</ref> Better tone detection is an ongoing project to improve quality.\n\nThe format has three different modes: speech, hybrid, and CELT. The basic speech mode is pure SILK, up to 8&nbsp;kHz, while the hybrid speech mode combines SILK for the speech and uses CELT for the frequency range above 8&nbsp;kHz, allowing an easy fallback to pure SILK at very low bitrates. The third mode is pure-CELT, designed for general audio. SILK is inherently VBR and cannot hit a bitrate target, while CELT can always be encoded to any specific number of bytes, enabling hybrid and CELT mode when CBR is required.\n\nThe reference implementation is written in [[C (programming language)|C]] and compiles on hardware architectures with or without a [[floating-point unit]], although floating-point is currently required for audio bandwidth detection (dynamic switching between SILK, CELT, and hybrid encoding) and most speed optimizations.\n\n===Containers===\nOpus was originally specified for encapsulation in [[Ogg]] containers, specified as <code>audio/ogg; codecs=opus</code>, and for Ogg Opus files the <code>.opus</code> filename extension is recommended.<ref name=\"Ogg\" /> [[Matroska]],<ref name=\"Matroska\">{{cite mailing list|url=http://lists.matroska.org/pipermail/matroska-users/2013-September/006883.html |title=MKVToolNix v6.4.0 released |first=Moritz |last=Bunkus |mailinglist=Matroska users |date=2013-09-16 |accessdate=2013-12-24}}</ref> [[WebM]],<ref name=webm-guidelines>{{cite web|title=WebM Container Guidelines|url=http://www.webmproject.org/docs/container/|website=The WebM Project|accessdate=19 October 2015}}</ref> [[MPEG-TS]],<ref name=\"mpeg-ts\">{{cite web |url=http://www.smpte-ra.org/mpegreg/Opus.html |title=Registration for format_identifier Opus |date=2014-05-05 |publisher=SMPTE |accessdate=2016-01-03 |deadurl=yes |archiveurl=https://web.archive.org/web/20141013192113/http://www.smpte-ra.org/mpegreg/Opus.html |archivedate=2014-10-13 |df= }}</ref> and [[MP4]]<ref name=\"mp4-opus\">{{cite web |url=http://www.mp4ra.org/codecs.html |title=Sample Entry Codes Registered to ISO |publisher=MP4REG |accessdate=2016-01-03}}</ref> all officially support Opus streams.\n\n===Bandwidth and sampling rate===\nOpus allows the following bandwidths during encoding. Opus does not require the input sampling rate for encoding or the output sampling rate in decoding to correspond to the bandwidth chosen. For example, audio can be input at 16&nbsp;kHz for encoding yet be specified to generate narrowband audio.<ref name=\"rfc-sample_rates\">{{cite IETF |title=Definition of the Opus Audio Codec |rfc=6716 |sectionname=Opus Codec Overview |section=2 |page=8 |last1=Valin |first1=Jean-Marc |last2=Vos |first2=Koen |last3=Terriberry |first3=Timothy B. |date=2012-09-11 |accessdate=2014-06-21 |issn=2070-1721 }}</ref>\n\n{| class=\"wikitable\"\n|-\n! Abbreviation\n! Audio bandwidth\n! Effective sample rate\n|-\n| NB (narrowband)\n| 4&nbsp;kHz\n| 8&nbsp;kHz\n|-\n| MB (medium-band)\n| 6&nbsp;kHz\n| 12&nbsp;kHz\n|-\n| WB (wideband)\n| 8&nbsp;kHz\n| 16&nbsp;kHz\n|-\n| SWB (super-wideband)\n| 12&nbsp;kHz\n| 24&nbsp;kHz\n|-\n| FB (fullband)\n| 20&nbsp;kHz{{refn|group=nb|Opus cuts audio above 20 kHz, the generally accepted upper limit of the human [[hearing range]].}}\n| 48&nbsp;kHz\n|}\n\n==History==\n{{see also|CELT#History|SILK#History}}\n\nOpus was proposed for the standardization of a new audio format at the IETF, which was eventually accepted and granted by the ''codec'' [[working group]]. It is based on two initially separate standard proposals from the Xiph.Org Foundation and Skype Technologies S.A. (now [[Microsoft]]). Its main developers are Jean-Marc Valin (Xiph.Org, Octasic, [[Mozilla Corporation]]), Koen Vos (Skype), and Timothy B. Terriberry (Xiph.Org, Mozilla Corporation). Among others, Juin-Hwey (Raymond) Chen ([[Broadcom]]), Gregory Maxwell (Xiph.Org, [[Wikimedia community|Wikimedia]]), and [[Christopher Montgomery]] (Xiph.Org) were also involved.\n\nThe development of the CELT part of the format goes back to thoughts on a successor for [[Vorbis]] under the working name ''Ghost''. As a newer speech codec from the Xiph.Org Foundation, Opus replaces Xiph's older speech codec [[Speex]], an earlier project of Jean-Marc Valin. CELT has been worked on since November 2007.\n\nThe SILK part has been under development at Skype since January 2007 as the successor of their [[SVOPC]], an internal project to make the company independent from third-party codecs like [[internet Speech Audio Codec|iSAC]] and [[internet Low Bitrate Codec|iLBC]] and respective license payments.\n\nIn March 2009, Skype suggested the development and standardization of a wideband audio format within the IETF. Nearly a year passed with much debate on the formation of an appropriate [[working group]].<ref name=\"WGformation\">{{cite web|url=http://www.h-online.com/open/news/item/IETF-working-towards-royalty-free-audio-codec-859394.html|title=IETF working towards royalty-free audio codec |publisher=H-online.com |date=2009-11-13 |accessdate=2016-04-07}}</ref> Representatives of several companies which were taking part in the standardization of patent-encumbered competing formats stated objections against the start of the standardization process for a royalty-free format: representatives of [[Polycom]] and [[Ericsson]]—the creators and licensors of [[G.719]]—as well as [[France Télécom]], [[Huawei]] and the [[Orange Labs]] (department of France Télécom), which were involved in the creation of [[G.718]]. The working group finally formed in February 2010, and even the corresponding Study Group 16 from the ITU-T pledged to support its work.\n\nIn July 2010, a prototype of a hybrid format was presented that combined the two proposed format candidates SILK and CELT. In September 2010, Opus was submitted to the IETF as proposal for standardization. For a short time the format went under the name of ''Harmony'' before it got its present name in October 2010.<ref name=\"renaming\">{{cite mailing list |url=http://www.ietf.org/mail-archive/web/codec/current/msg01852.html |title=Harmony became Opus |date=2010-10-15 |accessdate=2016-01-03 |mailinglist=codec |publisher=IETF |last=Vos |first=Koen}}</ref> At the beginning of February 2011, the [[bitstream]] format was tentatively frozen, subject to last changes.<ref name=\"pre-freeze\">{{cite web|url=http://www.hydrogenaud.io/forums/?showtopic=86580 |title=IETF Opus codec now ready for testing |publisher=Hydrogenaudio |accessdate=2012-09-12}}</ref> Near the end of July 2011, Jean-Marc Valin was hired by the [[Mozilla Corporation]] to continue working on Opus.<ref name=\"job\">{{cite web|url=http://jmspeex.livejournal.com/7352.html | first = Jean-Marc | last = Valin | title= IETF update, Mozilla |publisher= LiveJournal.com|date=2011-08-01 |accessdate=2012-10-05}}</ref> In November 2011, the working group issued the last call for changes on the bitstream format. The bitstream has been frozen since January 8, 2012.<ref name=\"bitstream frozen\">{{cite web|url=http://www.opus-codec.org/downloads/ |title=Opus Codec |publisher=Xiph.org Foundation |accessdate=2012-09-12}}</ref> On July 2, 2012, Opus was approved by the [[IETF]] for standardization.<ref name=\"jmvalin\">{{cite web|url=http://jmspeex.livejournal.com/10981.html |title=Opus approved by the IETF |publisher=Jmspeex.livejournal.com |date=2012-07-03 |accessdate=2012-09-12}}</ref> The reference software entered release candidate state on August 8.<ref name=\"RC\">{{cite mailing list |url=http://lists.xiph.org/pipermail/opus/2012-August/001657.html |title=[opus&#93; Release candidates for 1.0.0 and 1.0.1 are available |publisher=Xiph.org Foundation |mailinglist=opus |accessdate=2012-10-05}}</ref> The final specification was released as RFC 6716 on September 10, 2012.<ref name=\"MozillaHacks2\">{{cite web|url=https://hacks.mozilla.org/2012/09/its-opus-it-rocks-and-now-its-an-audio-codec-standard/ |title=It's Opus, it rocks and now it's an audio codec standard! |publisher=Mozilla Hacks |accessdate=2012-09-12}}</ref><ref name=\"ietf-announce\">{{cite mailing list |url=http://www.ietf.org/mail-archive/web/ietf-announce/current/msg10682.html |mailinglist=announce |title=RFC 6716 on Definition of the Opus Audio Codec |publisher=IETF |accessdate=2012-09-12}}</ref> and versions 1.0 and 1.0.1 of the [[reference implementation]] were released the day after.\n\nOn July 11, 2013, Opus 1.0.3 brought bug fixes and a new [[Surround sound]] API that improves channel allocation and quality, especially for [[Low-frequency effects|LFE]].<ref name=opus11>{{cite web |url=http://people.xiph.org/~xiphmont/demo/opus/demo3.shtml |title=Opus update 20131205: 1.1 Release |author1=Monty |first2=Jean-Marc |last2=Valin}}</ref>\n\nOn December 5, 2013, Opus 1.1 was released,<ref name=opus11/> incorporating overall speed improvements and significant encoder quality improvements: Tonality estimation boosts bitrate and quality for previously [http://listening-tests.hydrogenaud.io/igorc/Public%20Multiformat%20Listening%20Test%20@%2064kbps.htm problematic samples], like harpsichords; automated speech/music detection improves quality in mixed audio; [[Joint (audio engineering)#Joint stereo|mid-side stereo]] reduces the bitrate needs of many songs; band precision boosting for improved transients; and DC rejection below 3&nbsp;Hz. Two new [[Variable bitrate|VBR]] modes were added: unconstrained for more consistent quality, and temporal VBR that boosts louder frames and generally improves quality.\n\nOpus 1.1.1 was released on November 26, 2015, and 1.1.2 on January 12, 2016, both adding speed optimizations and bug fixes. July 15, 2016 saw the release of version 1.1.3 and includes bug fixes, optimizations, documentation updates and experimental [[Ambisonics]] work. Opus 1.2 Beta was released on May 24, 2017.\n\nOpus 1.2 was released on June 20, 2017.<ref>{{cite web|url=http://opus-codec.org/release/stable/2017/06/20/libopus-1_2.html |title=libopus 1.2 â€\" Opus Codec |publisher=Opus-codec.org |date=2017-06-20 |accessdate=2017-08-23}}</ref> Improvements brought to the libopus encoder in 1.2 allow it to create fullband music at bit rates as low as 32 kbit/s, and wideband speech at just 12 kbit/s.<ref name=\"XDA Opus 1.2\" />\n\n==Quality comparison and low-latency performance==\n[[File:Opus quality comparison colorblind compatible.svg|thumb|360px|Comparison of coding efficiency between Opus and other popular audio formats]]\n\nOpus has been shown to have excellent quality,<ref name=\"testing\" /> and at higher [[bit rate]]s, it turns out to be competitive with audio formats with much higher delay, such as [[HE-AAC]] and [[Vorbis]].<ref name=\"quality64\">{{cite web |url=http://people.xiph.org/~greg/opus/ha2011/ |title=64kbit/sec stereo multiformat listening test&nbsp;— unofficial results page |first=Gregory |last=Maxwell |year=2011 |publisher=Xiph.Org Foundation |accessdate=2011-06-19}}</ref>\n\nIn listening tests around 64 kbit/s, Opus shows superior quality compared to [[High-Efficiency Advanced Audio Coding|HE-AAC]] codecs, which were previously dominant due to their use of the patented [[spectral band replication]] (SBR) technology.<ref name=\"slashdot\">[http://news.slashdot.org/story/11/04/14/2345238 Next-Gen Low-Latency Open Codec Beats HE-AAC], Slashdot-Meldung vom 14. April 2011.</ref><ref name=\"testsummary\">{{cite web |first1=Jean-Marc |last1=Valin |first2=Koen |last2=Vos |first3=Jan |last3=Skoglund |editor-last=Hoene |editor-first=Christian |publisher=Internet Engineering Task Force |title=Summary of Opus listening test results |url=http://tools.ietf.org/html/draft-ietf-codec-results-03 |date=2013-05-17 |accessdate=2015-06-30 }}</ref> In listening tests around 96 kbit/s, Opus shows slightly superior quality compared to [[Advanced Audio Coding|AAC]] and significantly better quality compared to [[Vorbis]] and [[MP3]].<ref name=\"96kListeningTest\">{{cite web |url=http://listening-test.coresv.net/results.htm |title=Results of the public multiformat listening test |date=July 2014 |author=Kamedo2}}</ref>\n\nOpus has very low algorithmic delay,<ref name=\"homepage\" /> a necessity for use as part of a low-[[Latency (audio)|audio-latency]] communication link, which can permit natural conversation, [[networked music performance]]s, or [[lip sync]] at live events. Total algorithmic delay for an audio format is the sum of delays that must be incurred in the encoder and the decoder of a live audio stream regardless of processing speed and transmission speed, such as buffering audio samples into blocks or frames, allowing for [[Modified discrete cosine transform|window overlap]] and possibly allowing for [[Noise shaping|noise-shaping]] look-ahead in a decoder and any other forms of look-ahead, or for an MP3 encoder, the use of [[MP3#VBR|bit reservoir]].<ref name=\"algdelay\">{{cite journal|last1=Lutzky|first1=Manfred|last2=Schuller|first2=Gerald|last3=Gayer|first3=Marc|last4=Krämer|first4=Ulrich|last5=Wabnik|first5=Stefan|title=A guideline to audio codec delay|journal=In AES 116th convention, Berlin, Germany|year=2004|pages=8–11|url=https://www.iis.fraunhofer.de/content/dam/iis/de/doc/ame/conference/AES-116-Convention_guideline-to-audio-codec-delay_AES116.pdf|accessdate=21 December 2016}}</ref>\n\nTotal one-way latency below 150&nbsp;ms is the preferred target of most [[VoIP]] systems,<ref name=VoIPlatency>{{cite journal|last1=Lironi|first1=F.|last2=Masseroni|first2=C.|last3=Trivisonno|first3=R.|last4=Ball|first4=C. F.|title=Multi RAB-based multimedia services over GERAN mobile networks|journal=Vehicular Technology Conference, VTC-2005-Fall|year=2005|volume=3|series=IEEE 62nd|pages=1662–1666|url=http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1558224|accessdate=30 October 2012}}</ref> to enable natural conversation with turn-taking little affected by delay. Musicians typically feel in-time with up to around 30&nbsp;ms audio latency,<ref name=\"musiclatency\">{{cite journal|last1=Lago|first1=Nelson Posse|last2=Kon|first2=Fabio|title=The quest for low latency|journal=In Proceedings of the International Computer Music Conference|date=November 2004|pages=33–36|url=http://reference.kfupm.edu.sa/content/q/u/the_quest_for_low_latency_51966.pdf|accessdate=30 October 2012}}{{dead link|date=January 2018 |bot=InternetArchiveBot |fix-attempted=yes }}</ref> roughly in accord with the fusion time of the [[Haas effect]], though matching playback delay of each user's own instrument to the round-trip latency can also help.<ref name=\"carot\">{{cite book|last=Carôt|first=Alexander|title=\"Low Latency Audio Streaming for Internet-Based Musical Interaction\" in Streaming Media Architectures: Techniques and Applications: Recent Advances|year=2010|publisher=IGI Global|isbn=978-1-61692-833-9|pages=362–383|url=https://books.google.com/?id=Cb4dWYVJ_8AC&pg=PA362&dq=Carot+2006+audio+delay#v=onepage&q&f=false}}</ref> [[lip sync error#Recommendations|It is suggested for lip sync]] that around 45–100&nbsp;ms audio latency may be acceptable.<ref name=\"lipsync\">{{cite book|last=YE, NONG, VAN CHEN, and TONI FARLEY|title=\"Qos Requirements Of Multimedia Data On Computer Networks\". Proceedings of the Second International Conference on Active Media Technology, Chongqing, PR China, 29–31 May 2003|year=2003|publisher=World Scientific Publishing Company Incorporated|isbn=978-981-238-343-3|pages=183–189|url=https://books.google.com/?id=UJBMYx_8_2UC&pg=PA183#v=onepage&q&f=false}}</ref>\n\nOpus permits trading-off reduced quality or increased bitrate to achieve an even smaller algorithmic delay (5.0&nbsp;ms minimum).<ref name=\"latencyBitrateTradeoff\">{{cite web|last=Montgomery|first=Christopher|title=A quick showcase of the bleeding edge...  CELT 0.10.0 @ constant PEAQ value, varying latency|url=http://people.xiph.org/~xiphmont/demo/celt/demo.html#demo|work=CELT v0.10 (latest prior to Opus integration)|publisher=xiph.org|accessdate=30 October 2012}}</ref> While the reference implementation's default Opus frame is 20.0&nbsp;ms long, the SILK layer requires a further 5.0&nbsp;ms lookahead plus 1.5&nbsp;ms for resampling, giving a default delay of 26.5&nbsp;ms. When the CELT layer is active, it requires 2.5&nbsp;ms lookahead for [[Modified discrete cosine transform|window overlap]] to which a matching delay of 4.0&nbsp;ms is added by default to synchronize with the SILK layer. If the encoder is instantiated in the special ''restricted low delay'' mode, the 4.0&nbsp;ms matching delay is removed and the SILK layer is disabled, permitting the minimal algorithmic delay of 5.0&nbsp;ms.<ref name=\"ValinAES135\" />\n\n{{sound|filename=Test mp3 opus 16kbps.wav|title=Comparison between MP3 and Opus|description=The first is uncompressed WAV file. The second is a MP3 file encoded at 16&nbsp;kbit/s using [[LAME]], and third is an Opus file encoded at 16&nbsp;kbit/s.}}\n\n==Support==\nThe format and algorithms are openly documented and the [[reference implementation]] is published as [[free software]]. Xiph's reference implementation is called ''libopus'' and a package called ''opus-tools'' provides command-line encoder and decoder utilities. It is published under the terms of a [[BSD licenses|BSD-like license]]. It is written in [[C (programming language)|C]] and can be compiled for hardware architectures with or without a [[floating-point unit]]. The accompanying diagnostic tool ''opusinfo'' reports detailed technical information about Opus files, including information on the standard compliance of the bitstream format. It is based on ''ogginfo'' from the ''vorbis-tools'' and therefore&nbsp;— unlike the encoder and decoder&nbsp;— is available under the terms of version 2 of the [[GNU General Public License|GPL]].\n\n===Implementations===\nRFC 6716 contains a complete source code for the reference implementation written in C.\n\nThe [[FFmpeg]] project <ref>{{cite web|url=http://git.videolan.org/?p=ffmpeg.git;a=commit;h=5f47c85e5c961d5985a01e16697439d179b03a0e |title=Git – ffmpeg.git/commit |publisher=Git.videolan.org |date= |accessdate=2017-08-23}}</ref> and [[GStreamer]] project <ref>{{cite web|url=https://github.com/GStreamer/gst-plugins-base/tree/master/ext|accessdate=26 October 2017|title=Git – GStreamer/gst-plugins-base}}</ref> have encoder and decoder implementation not derived from the reference library.\n\nThe libopus reference library has been ported to both [[C Sharp (programming language)|C#]] and [[Java (programming language)|Java]] as part of a project called Concentus. These ports sacrifice performance for the sake of being easily integrated into cross-platform applications.<ref>{{cite web|url=https://github.com/lostromb/concentus |title=lostromb/concentus: Pure Portable C# and Java implementations of the Opus audio codec |publisher=GitHub |date= |accessdate=2017-08-23}}</ref>\n\n===Software===\n{{See also|Comparison of VoIP software|Comparison of layout engines (HTML5 media)#Audio format support}}\n\nThe [[GatesAir]] Intraplex IP Link and [[Tieline]] Merlin and Genie families of broadcast IP audio codecs and Tieline Report-IT mobile codecs add Opus support to embedded and mobile devices.<ref name=\"tieline\">{{cite web |url=http://www.radiomagonline.com/studio_audio/ip_audio/tieline_integrates_opus_report-it_1218/ |title=Tieline Integrates OPUS into Report-IT and IP codecs |publisher=Radio Magazine |date=2012-12-18 |accessdate=2012-12-18}}</ref>\n\n[[Digital Radio Mondiale]]&nbsp;– a digital radio format for AM frequencies&nbsp;– can broadcast and receive Opus audio (albeit not recognised in official standard) using Dream [[software-defined radio]].\n\nThe [[Wikimedia Foundation]] sponsored a free and open source online [[JavaScript]] Opus encoder for browsers supporting the required [[HTML5]] features.<ref name=\"javascript-opus\">{{cite web|url=https://blog.rillke.com/opusenc.js/|title=JavaScript opus encoder|author=Rillke|date=2015|accessdate=2015-02-09}}</ref>\n\n[[Signal (software)|Signal]] switched from [[Speex]] to Opus audio codec for better audio quality in the beginning of 2017.\n\n====Operating system support====\nMost end-user software relies on [[multimedia framework]]s provided by the [[operating system]]. Native Opus codec support is implemented in most major multimedia frameworks for [[Unix-like]] operating systems, including [[GStreamer]], [[FFmpeg]], and [[Libav]] libraries.<ref name=\"gstreamer\">{{cite web|url=http://gstreamer.freedesktop.org/news/#2012-02-21T14:00:00Z |title=GStreamer: news |publisher=Gstreamer.freedesktop.org |access-date=2012-10-05}}</ref><ref name=\"ffmpeg\">{{cite web |url=http://ffmpeg.org/general.html#Audio-Codecs |title=Audio Codecs |work=[[FFmpeg]] General Documentation |access-date=2014-05-28}}</ref><ref name=\"libav\">{{cite web |url=http://libav.org/general.html#Audio-Codecs |title=Audio Codecs |work=[[Libav]] General Documentation |access-date=2014-05-28}}</ref>\n\n[[Google]] added native support for Opus audio playback in [[Android (operating system)|Android]] 5.0 (\"Lollipop\").<ref name=\"android dev\">{{cite web|author=Google |url=http://developer.android.com/about/versions/lollipop.html | title=Android Lollipop |publisher=Google |access-date=2015-11-03}}</ref> The support was limited, however, to Opus audio encapsulated in [[Matroska]] containers, such as <code>.mkv</code> and <code>.webm</code> files.<ref name=\"Android Developers\">{{cite web|url=http://developer.android.com/guide/appendix/media-formats.html |title=Supported Media Formats |publisher=Google |access-date=2015-04-29}}</ref><ref name=\"android opus bug\">{{cite web|author=Google |url=https://code.google.com/p/android/issues/detail?id=80729 | title= Issue 80729: Opus support not working. |publisher=code.google.com |access-date=2016-04-19}}</ref> Android 6.0 (\"Marshmallow\") added support for Opus audio encapsulated in [[Ogg]] containers, but was still unable to recognize the <code>.opus</code> filename extension, requiring <code>.ogg</code> instead.<ref name=\"Android Open Source Project\">{{cite web|url=https://source.android.com/compatibility/7.0/android-7.0-cdd |title=Android Compatibility Definition |publisher=Google |access-date=2017-05-22}}</ref>\n\nDue to the addition of [[WebRTC]] support in Apple's [[WebKit]] rendering engine, [[macOS High Sierra]] and [[iOS 11]] come with native playback support for Opus audio encapsulated in [[Core Audio Format]] containers.<ref>[https://hetzel.net/2017-06-12/ios-11-opus-support-in-podcast-feeds/ iOS 11: Opus support in podcast feeds]</ref>\n\n[[Microsoft Windows]] does not currently provide native support by default but it can be enabled by installing official UWP package [https://www.microsoft.com/en-us/store/p/web-media-extensions/9n5tdp8vcmhs Web Media Extensions] from [[Microsoft Store (digital)|Microsoft Store]] for the playback of Opus files. However <code>.opus</code>  isn't recognized hence requiring pseudo extensions like <code>.mp3.</code> {{citation needed|date=November 2017}} Besides third-party decoders, such as [[LAV Filters]], are available to provide limited support.<ref name=\"lavfilters\">{{cite web |url=http://lavfilters.googlecode.com/ |archive-url=https://archive.is/20130103042554/http://lavfilters.googlecode.com/ |dead-url=yes |archive-date=2013-01-03 |title=lavfilters&nbsp;— Open-Source DirectShow Media Splitter and Decoders |publisher=Google Project Hosting |access-date=2012-10-05 }}</ref>\n\n{| class=\"wikitable\" style=\"font-size:90%\"\n|+ Opus support by different operating systems\n|-\n! scope=\"row\" | \n! [[Microsoft Windows]]\n! [[macOS High Sierra]]\n! [[Unix-like]] ([[Linux]])\n! [[Android OS]]\n! [[iOS 11]]\n|-\n! scope=\"row\" | Codec support\n|  {{depends|Yes <br> (Limited file extension recognition)}}|| {{partial|Yes <br> (Limited container support)}} || {{yes}} || {{partial|Yes <br> (Limited file extension recognition)}} || {{partial|Yes <br> (Limited container support)}}\n|-\n! scope=\"row\" | Container support\n| [[Ogg]], [[Matroska]], [[WebM]]<br> [[MPEG-TS]], [[MP4]]\n| [[Core Audio Format]]\n| [[Ogg]], [[Matroska]], [[WebM]], <br> [[MPEG-TS]], [[MP4]]\n| v5.0+: [[Matroska]], [[WebM]] <br> v6.0+: [[Ogg]]\n| [[Core Audio Format]]\n|-\n! scope=\"row\" | File extension support\n| .mp3, .mka, .mkv, .ts, .mp4 || .caf || .opus, .mka, .mkv, .webm, .ts, .mp4 || .ogg, .mka, .mkv, .webm || .caf\n|-\n! scope=\"row\" | Notes\n| Requires installation of [https://www.microsoft.com/en-us/store/p/web-media-extensions/9n5tdp8vcmhs Web Media Extensions] through Microsoft Store.  || Only Opus audio in a CAF container is supported. || – || || Only Opus audio in a CAF container is supported.\n|}\n\n====Media player support====\nWhile support in multimedia frameworks automatically enables Opus support in software which is built on top of such frameworks, several applications developers made additional efforts for supporting the Opus audio format in their software. Such support was added to [[AIMP]],<ref name=\"aimp\">{{cite web|url=http://www.aimp.ru/index.php?do=changelog&ver=320 |title=AIMP: Home Page |publisher=Aimp.ru |accessdate=2012-10-05}}</ref> [[Amarok (software)|Amarok]],<ref name=\"amarok\">{{cite web |url=http://amarok.kde.org/en/releases/2.8 |title=Amarok 2.8 \"Return To The Origin\" released |work=[[Amarok (software)|Amarok]] |date=2013-08-16 |accessdate=2014-05-28}}</ref> [[cmus]], [[Music Player Daemon]], [[foobar2000]],<ref name=\"foobar2000\">{{cite web|url=http://www.hydrogenaud.io/forums/?showtopic=96057 |title=foobar2000 v1.1.14 beta |publisher=Hydrogenaudio Forums |accessdate=2012-10-05}}</ref> [[Mpxplay]], [[MusicBee]],<ref name=\"musicbee\">{{cite web|url=http://getmusicbee.com/forum/index.php?topic=7206.0 |title=MusicBee |publisher=MusicBee Forum |accessdate=2013-08-17}}</ref> [[SMplayer]], [[VLC media player]],<ref name=\"vlc\">{{cite web|url=http://www.videolan.org/vlc/releases/2.0.4.html |title= VLC 2.0.4 Twoflower |publisher=VideoLAN |accessdate=2012-10-19}}</ref> [[Winamp]]<ref name=\"winamp\">{{cite web|url=http://forums.winamp.com/showthread.php?t=347029 |title=Winamp |publisher=Winamp Forums |accessdate=2013-01-04}}</ref> and [[Xmplay]] audio players; [[Icecast]],<ref name=\"Icecast\">{{cite web|url=http://lists.xiph.org/pipermail/icecast/2012-July/012237.html |title=Icecast 2.4 beta release |publisher=Lists.xiph.org |accessdate=2012-09-12}}</ref> [[Airtime (software)]]<ref name=\"AirtimeAddsOpusSupport\">{{cite web|last=Airtime|first=Changelog|title=\nAirtime/changelog at 2.4.x|url=https://github.com/sourcefabric/Airtime/blob/2.4.x/changelog|publisher=Sourcefabric|accessdate=1 July 2013}}</ref> audio streaming software; and [[Asunder (software)|Asunder]] audio CD ripper, [[CDBurnerXP]] CD burner, FFmpeg, Libav and [[MediaCoder]] media encoding tools. Streaming Icecast radio trials are live since September 2012 and January 2013.<ref name=\"RadioJackieOpusTrial\">{{cite web|last=Radio Jackie|first=Listen Now|title=Opus Stream|url=http://www.radiojackie.com/listennowpage.asp|publisher=Radio Jackie|accessdate=14 May 2013}}</ref><ref name=\"AbsRadioOpusTrial\">{{cite web|last=Absolute Radio|first=Listen Labs|title=Opus Streaming Trial|url=http://www.absoluteradio.co.uk/listen/labs.html#opus|publisher=Absolute Radio|accessdate=30 October 2012}}</ref> [[SteamOS]] uses Opus or Vorbis for streaming audio.<ref name=steamdb>{{cite web|title=Steam Beta Update: SteamVR and In-Home Streaming Beta|url=https://steamdb.info/blog/steam-beta-vr-and-inhome-streaming/|website=SteamDB|accessdate=9 December 2015}}</ref>\n\n====Browser support====\nOpus support is mandatory for [[WebRTC]] implementations.<ref name=\"webrtc\">{{cite web|url=http://heise.de/-1656611 |title=Zwei Audio-Codecs für Echtzeit-Kommunikation im Browser |publisher=Heise.de |accessdate=2012-09-12}}</ref> Opus is supported in [[Firefox|Mozilla Firefox]],<ref name=\"gecko\">{{cite web|url=https://developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements#Ogg_Opus |title=Media formats supported by the HTML audio and video elements |publisher=Developer.mozilla.org |date=2012-09-03 |accessdate=2012-09-12}}</ref> [[Chromium (web browser)|Chromium]] and [[Google Chrome]],<ref name=\"chromium-issue104241\">{{cite web |url=https://code.google.com/p/chromium/issues/detail?id=104241 |title=Issue 104241: Support OPUS in Ogg files for the audio tag and Audio object |work=[[Chromium (web browser)|Chromium]] bug tracker |accessdate=2014-05-28}}</ref> [[Blink (web engine)|Blink]]-based [[Opera (web browser)|Opera]],<ref name=\"opera\">{{cite web|url=http://my.opera.com/community/forums/topic.dml?id=1491802 |title=Why no official mention of Opus support? |publisher=My.opera.com |date=2012-07-19 |accessdate=2012-09-12}}</ref><ref name=\"cnet\">{{cite web|last=Shankland |first=Stephen |url=http://news.cnet.com/8301-1023_3-57494622-93 |title=How corporate bickering hobbled better Web audio |publisher=CNET News |date=2012-08-17 |accessdate=2012-09-12}}</ref> as well as all browsers for [[Unix-like]] systems relying on [[GStreamer]] for multimedia formats support. Although [[Internet Explorer]] will not provide Opus playback natively, support for the format is built into the [[Microsoft Edge|Edge browser]], along with [[VP9]], for full [[WebM]] support.<ref>{{cite web |url=https://dev.windows.com/en-us/microsoft-edge/platform/status/opusaudiocodec |title=Platform status |publisher=Microsoft |date=2016-04-19}}</ref><ref name=MSE>{{cite web |url=https://blogs.windows.com/msedgedev/2016/04/18/webm-vp9-and-opus-support-in-microsoft-edge/ |title=WebM, VP9 and Opus Support in Microsoft Edge |publisher=Microsoft |date=2016-04-18}}</ref> Safari supports Opus as of iOS 11 and macOS High Sierra.<ref name=\"webkit_opus\">{{cite news|title=Announcing WebRTC and Media Capture|url=https://webkit.org/blog/7726/announcing-webrtc-and-media-capture/|accessdate=20 June 2017|publisher=webkit.org|date=7 June 2017|quote=available on Safari on macOS High Sierra, iOS 11, (…) Safari supports modern audio codecs such as Opus}}</ref>\n\n====VoIP support====\nDue to its abilities, Opus gained early interest from VoIP software vendors. Several [[Session Initiation Protocol|SIP]] clients, including [[Acrobits Softphone]], Bria [[X-Lite]], [[CSipSimple]] (via additional plug-in), [[Empathy (software)|Empathy]] (via GStreamer), [[Jitsi]],<ref name=\"xmpp.org-jitsi\">{{cite web |url=http://xmpp.org/2013/03/jitsi-2-0-now-released/ |title=Jitsi 2.0 Now Released! |first=Ludovic |last=Bocquet |work=XMPP Foundation |date=2013-03-07 |accessdate=2014-05-28}}</ref> [[Tuenti]],<ref>{{cite web|url=https://vimeo.com/109608566|title=Tuenti+WebRTC (Voip2day 2014)}}</ref> [[Line2]] (currently only on [[iOS]]),<ref name=\"Line2\">{{cite web|url=http://www.line2.com/home/2012/10/a-new-line2-for-ios-experience-with-improved-sound-quality/ |title=A new Line2 for iOS experience with improved sound quality |publisher=Line2 |date=2012-10-18 |accessdate=2013-03-15}}</ref> [[Linphone]],<ref name=\"Linphone\">{{cite web|url=http://www.linphone.org/technical-corner/linphone/features|title=Linphone technical features}}</ref> [[Phoner]] and [[PhonerLite]],<ref name=\"Phoner\">{{cite web|url=http://phonerlite.de/config_en.htm|title=Phoner Configuration}}</ref> [[SFLphone]],<ref name=\"SFLphone\">{{cite web|url=https://projects.savoirfairelinux.com/issues/14602 |title=SFLphone&nbsp;— Task #14602: [Codec&#93; Implement opus |publisher=Savoir-faire Linux |date=2012-08-13 |accessdate=2012-09-12}}</ref> [[Mumble (software)|Mumble]], [[Discord (software)|Discord]]<ref>{{Cite web|url=https://discordapp.com/features|title=What Features Does Discord Have?|website=Discord|language=en-US|access-date=2017-10-29}}</ref> and [[TeamSpeak 3]] voice chat software also support Opus.<ref name=\"mumble\">{{cite web |url=http://blog.mumblevoice.com/?p=39 |title=Mumble 1.2.4 Has been released |author=Brandon |work=Mumblevoice Blog |date=2013-06-19 |accessdate=2014-05-28}}</ref><ref name=\"teamspeak\">{{cite web|url=http://forum.teamspeak.com/showthread.php/84285-TeamSpeak-3-Client-3-0-10-released |title=TeamSpeak 3 Client 3.0.10 released |publisher=TeamSpeak Forums |accessdate=2013-03-04}}</ref><ref name=\"teamspeak2\">{{cite web|url=http://forum.teamspeak.com/showthread.php/84284-TeamSpeak-3-Server-Version-3-0-7-released |title=TeamSpeak 3 Server Version 3.0.7 released |publisher=TeamSpeak Forums |accessdate=2013-03-04}}</ref> [[TrueConf]] supports Opus in its VoIP products.<ref name=\"TrueConf\">{{cite press release |url=http://trueconf.ru/company/news-events/press-release/audiocodec-opus.html |language=Russian |title=TrueConf сделал ставку на аудиокодек Opus |trans-title=TrueConf opted for Opus audio codec |location=Moscow, Russia |date=2012-09-19 |accessdate=2014-05-28 |deadurl=yes |archiveurl=https://web.archive.org/web/20140529051338/http://trueconf.ru/company/news-events/press-release/audiocodec-opus.html |archivedate=2014-05-29 |df= }}</ref> [[Asterisk (PBX)|Asterisk]] lacked builtin Opus support for legal reasons,<ref name=\"asterix-patents\">{{cite mailing list |url=http://lists.digium.com/pipermail/asterisk-dev/2013-May/060419.html |title=Opus and VP8 |first=Matthew |last=Jordan |mailinglist=asterisk-dev |date=2013-05-29 |accessdate=2014-05-28}}</ref> but a third-party patch was available for download<ref name=\"asterisk-patch\">{{cite web |url=https://github.com/meetecho/asterisk-opus |title=Asterisk Opus/VP8 patch |work=[[GitHub]] |accessdate=2014-05-28}}</ref> and official support via a binary blob was added in September 2016.<ref name=\"Opus-for-Asterisk\">{{cite web |url=http://blogs.digium.com/2016/09/30/opus-in-asterisk/ |title=Opus for Asterisk |work=Inside the Asterisk |date=2016-09-30 |accessdate=2016-10-03}}</ref> [[Tox (protocol)|Tox P2P videoconferencing software]] uses Opus exclusively.<ref name=\"tox-opus\">{{cite web |url=https://github.com/irungentoo/toxcore/blob/master/toxav/audio.h#L36 |title=Tox codec handling source code |work=[[GitHub]] |accessdate=2015-12-09}}</ref> Classified-ads distributed messaging app sends raw opus frames inside TLS socket in its VoIP implementation.<ref name=\"classified-ads\">{{cite web |url=http://katiska.org/classified_ads/doc-0.09/classAudioEncoder.html |title=Classified-ads audio encoder documentation |accessdate=2016-05-25}}</ref> The [[PlayStation 4]] video game console also uses the CELT/Opus codec for its system party chat.<ref>{{cite web|url=https://doc.dl.playstation.net/doc/ps4-oss/ |title=Open Source Software used in PlayStation®4 |publisher=Sony Interactive Entertainment Inc. |accessdate=2017-12-11}}</ref>\n\n===Hardware===\nSince version 3.13, [[Rockbox]] enables Opus playback on supported [[portable media players]], including some products from the [[iPod]] series by [[Apple Inc.|Apple]], devices made by [[iriver]], [[Archos]] and [[Sandisk]], and on [[Android (operating system)|Android]] devices using \"Rockbox as an Application\".<ref name=\"rockbox_v313\">{{cite web|author=Rockbox Contributors |url=http://www.rockbox.org/wiki/ReleaseNotes313 |title=Release notes for Rockbox v.3.13 |publisher=Rockbox |date=2013-03-05 |accessdate=2013-03-21}}</ref><ref name=\"RaaA\">{{cite web|url=http://www.rockbox.org/wiki/RockboxAsAnApplication2010 |title=RockboxAsAnApplication2010 < Main < Wiki |publisher=Rockbox.org |accessdate=2012-10-05}}</ref> All recent [[Grandstream]] [[IP phone]]s support Opus audio both for encoding and decoding. OBihai OBi1062, OBi1032 and OBi1022 [[IP phone]]s all support Opus. Recent BlueSound wireless speakers support Opus playback.<ref>{{cite web|title=PULSE FLEX|url=http://www.bluesound.com/en-ca/products/pulse-flex/?cl#spec|website=BlueSound|accessdate=28 February 2017}}</ref>\n\n==Notes==\n{{reflist|group=nb}}\n\n==See also==\n{{Portal|Free software}}\n\n* [[Comparison of audio coding formats]]\n* [[Streaming media]]\n\n==References==\n\n{{reflist|30em|refs=\n\n<ref name=\"XDA Opus 1.2\">{{cite web\n  |first=Steven\n  |last=Zimmerman\n  |url=https://www.xda-developers.com/opus-codec-high-quality-audio-32-kbps/\n  |title=Opus 1.2 Codec Arrives on Your Phone: High Quality Audio at 32 kbps\n  |publisher=XDA Developers\n  |date=2017-07-07\n  |accessdate=2017-07-12\n  |archive-url=https://web.archive.org/web/20170713002825/https://www.xda-developers.com/opus-codec-high-quality-audio-32-kbps/\n  |archive-date=2017-07-13}}</ref>\n\n}}\n\n==External links==\n{{Commons|Opus}}\n\n* {{official website|http://opus-codec.org/}}\n* [http://wiki.hydrogenaud.io/index.php?title=Opus Opus on Hydrogenaudio Knowledgebase]\n\n{{Xiph.org}}\n{{Compression formats}}\n{{Compression software implementations}}\n\n[[Category:Speech codecs]]\n[[Category:Free audio codecs]]\n[[Category:Lossy compression algorithms]]\n[[Category:Xiph.Org projects]]\n[[Category:Software using the BSD license]]\n[[Category:Open formats]]",
            "slug": "opus-audio-format-",
            "date_updated": 1519403479115,
            "imported": "https://en.wikipedia.org/wiki/Opus (audio format)"
        }
    ]
}