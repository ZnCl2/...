{
	"blogposts": [
		{
			"post_id": 1,
			"title": "Update 8/14/17",
			"slug": "update-8-14-17",
			"body": "The latest update to ZeroNet Dev Center, as of Auguest 14th, 2017:\n\n* Blog used for detailing new and future updates and tutorials for the dev center.\n* Edit Questions, Answers, and Comments\n* Slightly Redesigned Navbar\n* Scrollbar hidden for auto-expanding textareas",
			"tags": "",
			"date_added": 1502766051162
		},
		{
			"post_id": 2,
			"title": "What Should The Next Tutorial Cover?",
			"slug": "next-tutorial-ideas",
			"body": "I am going to be starting to write the next tutorial for this Zite. Currently, we have *one* tutorial, [The Basics](/14pM9huTYzJdyQyHRj6v2kfhMe8DrxwpGt/?/tutorials/the_basics), that focuses on the very basics before you start creating a zite. It covers how the client downloads and checks a Zite for authenticity, how to update your Zite, how they are kept secure, etc.\n\nThere should be a tutorial after this that covers actually creating a Zite. However, I'd prefer this Zite to not utilize databases until the Database Basics tutorial is written.\n\nThis narrows down what I can do in this tutorial to a simple static Zite - *but* I am not sure that is enough for a full tutorial - and if the reader knows HTML, most of the tutorial will probably be stuff they already know. The new stuff would be setting up ZeroFrame. So maybe the next tutorial should talk more about ZeroFrame and how to set it up in a *Static Zite*.\n\nI would like comments on your ideas for this next tutorial. I want to make sure I am writing tutorials that are useful and complete and follow a logical order. Thanks for your time!",
			"tags": "",
			"date_added": 1502833677148
		},
		{
			"post_id": 3,
			"title": "The Questions Update",
			"slug": "the-questions-update",
			"body": "This next update to the ZeroNet Dev Center focuses mostly on the Questions and Answers system, however there were slight redesigns of many of the pages. This update includes these new features and changes:\n* Mark answer on a question you created as the solution\n* Upvote and Downvote answers\n* Solution is always shown first\n* Answers (aside from the solution) are sorted by votes\n* Question Tags (predefined *and* custom)\n* A new search box on the [questions page](./?/questions/)\n  - Search by user\n  - Search by title and body\n  - Search by tag\n  - Sorted by most useful. Matches on body are less useful than matches on title and tag, therefore they are usually shown last - **unless** there's also a match on one of the others (title, tag, or user). Matches on tag are most useful, so they are usually shown first.\n* Related Questions on each Question page\n* Slight design changes\n* New Tutorial - [Create A ZeroNet Plugin](./?/tutorials/write_a_plugin) (python)\n\nIt should be noted that the way the searching feature functions may change in the future.",
			"tags": "",
			"date_added": 1502915018884
		},
		{
			"post_id": 4,
			"title": "My Zite Dev Workflow",
			"slug": "my-zite-dev-workflow",
			"body": "I got this message from someone a few days ago on ZeroMail wondering how I have git setup with my ZeroNet Dev Zite, whether I have a seperate zite for testing on, ... basically my zite development workflow. So, in this post I am going to be detailing how I have my workflow, from starting a new project (and getting it on GitHub) to testing and pushing updates.\n\n## Starting A New Project\nFirstly, when I decide to start a new project, I create a new empty zite - which will become the *dev/testing* version of the zite. Then, I create a repository for it on GitHub. I init the repository directly in the directory of the zite and push it up to the github repo (`git remote add ...`, `git commit -m \"initial\"`, and `git push -u ...`).\n\nThen I add the `.gitignore` file to ignore `data/`, `admin/`, `content.json`, and a few other things (and hopefully don't forget to untrack and remove them from the git repo without deleting them from the disk - using `git rm --cached ...`).\n\n## Publish Initial Version of The Official Zite\nWhen I am ready to create the official zite, I first create a `stable` branch. Then I create a new empty zite. In order to pull the repository, I will need an empty directory, so I delete *everything* (except for the `content.json` file - I move this somewhere else, then put it back after I have pulled in the repository and changed the branch) and clone the repository in the current directory (`git clone url .` - put dot after to clone in current directory). Then I switch to the `stable` branch, and move the `content.json` file back into the folder. I sign and publish.\n\n## Push New Updates to Official Zite\nWhenever I want to push a new update to the official zite, I push changes to the master branch. I switch over to the official zite's directory, do a `git pull` and merge in the master branch into the stable branch, `git merge origin master`. Then I make sure the files in the `data` directory are up to date (in case I changed any json files - I do not do this with user files though, or anything that I want seperate between the dev zite and the official zite). I push the merge to the github repo and sign and publish the zite.\n\n## Why I Use Two Seperate Zites\nI mostly use two seperate zites (one for the *dev* version and one for the *official/stable* version) so that I can freely test with the dev version and sign and publish on that zite to test whether things update correctly and dynamically on other clients/computers before I push anything to the *official* zite. Using this setup has worked pretty well for me.\n\n## How Do You Do It?\nThis is pretty much how I have my workflow right now, but there are probably better ways to do it. Do you have any tips for integrating git/github with zite development? What does your workflow look like?",
			"tags": "",
			"date_added": 1503009262550
		}
	]
}