{
	"title": "Benjamin",
	"description": "This is a Machine with Shell Command Line.\nPlease Vim me.",
	"links": "###About Me\n\n- [Contact](http://127.0.0.1:43110/1Pn1wurapEnwpp6kKeGpRAxzYZXwwpJni6/about)\n- [Twitter](https://twitter.com/itisbenjamin1)\n\n###Friends\n\n- [Let's exchange our Blog links](http://127.0.0.1:43110/1Pn1wurapEnwpp6kKeGpRAxzYZXwwpJni6/blog.html?Post:3:+Let%27s+exchange+our+Blog+links)\n\n- [吃喝拉撒睡](http://127.0.0.1:43110/1KHMMr1fFeW2PuDf9jHk9puC9BxvoAfBm1)",
	"next_post_id": 21,
	"demo": false,
	"modified": 1462806564,
	"post": [
		{
			"post_id": 20,
			"title": "# 結合 Carina 部署 Docker 鏡像 ",
			"date_published": 1462737899.23,
			"body": "最近一篇使用 Carina 搭建 SS 服務的博文在 Twitter 上很火，雖然第二天 Carina 就禁用了 SS 的鏡像，但是這並不妨礙使用 Carina 做一些其他有趣的事。\n\n---\n\n也是因為這次事件，Carina 禁用了所有中國大陸地區 +86 的手機號碼驗證，因此如果要想使用 Carina 的免費服務器，就必須有一個國外的手機號來進行驗證。但即使你沒有國外的手機，我也相信聰明的你一定會找到辦法。\n\n## 關於 Carina 和 Docker\n\n我也是在這次事件後才知道 Carina，之前有聽說過 Docker，但一直都沒有使用，以為 Docker 就和 npm 或者 Git 差不多這個樣子，這次才逐漸的了解了一些關於 Docker 的內容。\n\n簡單來說，Docker 就像一個虛擬機倉庫，或者官法說法——容器。它之中有很多個鏡像源，比如從 Docker 拉取 Debian 鏡像後，你拉取的是一個擁有可讀權限的鏡像，在你進行修改過後，會在上面覆蓋一層可寫層，因此底層鏡像永遠不會遭到損壞。這個可寫層可以覆蓋最多127層，基本已經滿足了正常需要。\n\n說了這麼多，Docker 能用來做什麼呢？\n\n它可以用來演示一些新功能，免去了自己重新部署的麻煩，也可以用來測試一些不穩定的代碼，或者折騰一些危險的活動。因為在使用完畢後，不用擔心對自己系統的困擾，直接刪除鏡像就可以了。\n\n而 Carina 為 Docker 提供了一個免費的服務器內存，這樣所有 Docker 鏡像的部署都在 Carina 服務器上，而非自己的電腦上，並且這個服務器是可以對外訪問的，所以你也就能想到它能做什麼了吧。\n\n搭建 Blog 啊，網站啊，下載地址啊，等等等等。\n\n## 安裝 Docker 和 Carina\n\nDocker 和 Carina 都可以通過命令行安裝，如果你需要圖形界面，可以通過官網下載，分別是 [Docker](https://docker.com) 和 [Carina](https://getcarina.com)\n\n```sh\n$ brew update\n$ brew install docker\n$ brew install carina\n```\n\n接下來通過命令行呼出 `docker` 和 `carina` 就可以看到它們的幫助說明，其中 Docker 的命令行比較繁雜，可以看看官方文檔多加了解。\n\n## Client & Server API\n\n在最新的 Docker 更新了之後，使用的 Client API 端口版本是 1.23，Go 語言版本是 1.5.4，而 Carina 使用的 Server API 端口版本是 1.22，Go 語言版本是 1.5.3，所以因為這個版本衝突，如果不引入 Docker Client 版本管理插件，是不能訪問 Carina 服務器的。\n\n如果彈出了如下警告，就必須使用 dvm 來進行版本管理。\n\n```sh\nError response from daemon: client is newer than server (client API version: 1.23, server API version: 1.22)\n```\n\n### OS X / Linux\n\nTerminal 命令行：\n\n```sh\n$ curl -sL https://download.getcarina.com/dvm/latest/install.sh | sh\n```\n\n### Windows\n\nPowerShell 命令行：\n\n```sh\n> iex (wget https://download.getcarina.com/dvm/latest/install.ps1)\n```\n\n### 使用 dvm\n\n在配置完 PATH 後接下來就可以使用 `dvm` 命令了。\n\n```sh\n$ dvm upgrade     // upgrade dvm to the latest version\n$ dvm ls     // list all API versions and point out which version has been used\n$ dvm use      // use the Client API version which fit the Server API version\n$ dvm install     // install Client API version\n```\n\n上面幾行命令就是比較常見的 dvm 命令行，在連接 Docker 容器後執行 dvm 命令可以不用指定版本， dvm 會自行匹配 Server API version 然後進行安裝。\n\n## 進入 Docker 容器\n\n在做好了準備工作後，就可以在 Carina 上開始部署 Docker 容器了。\n\n首先在 Carina 後台創建一個 Cluster，下載 `Get access` 文件到本地，接下來 `source` 一下自己需要的版本，就連結到 Carina 服務器了。\n\n下面是一些比較常用的 Docker 命令行。\n\n```sh\n$ docker info     // list the information about your server\n$ docker images     // list all images on your server\n$ docker ps -a    // list all processes\n$ docker rm $(docker ps -a -q)     // remove all images which has been stopped\n```\n\n創建容器：\n\n```sh\n$ docker pull debian\n```\n\n進入容器進行操作：\n\n```sh\n$ docker run -i -t debian /bin/bash\n```\n\n更多命令行可以參考官方文檔。\n\n因為操作的是連接的 Carina 服務器，因此直接進入容器操作速度會有些慢。\n\n## 部署一個 Ghost Blog\n\n因為 Carina 的服務器是可以對外訪問的，因此可以用它來搭建網站。除了速度有些略慢以外，滿足跟人需求綽綽有餘。\n\n```sh\n$ docker network create wordnet\n$ docker run --detach --name ghost --net wordnet --publish 80:2368 ghost\n```\n\n因為 Docker 強大的鏡像拉取功能，這兩行命令就可以搭建起一個 Ghost Blog。\n\n接下來查詢 Blog 地址以及端口：\n\n```sh\n$ docker port ghost\n80/tcp -> 146.20.69.19:80 \n```\n\n這就是搭建成功已經可以訪問的 Ghost Blog 了。\n\n\n\n\n\n\n\n"
		},
		{
			"post_id": 19,
			"title": "# 隱匿化使用 Wikipedia ",
			"date_published": 1462737884.812,
			"body": "結合 proxychains 和 telnet 隱匿化使用 Wikipedia.\n\n---\n\n## Wikipedia-telnet\n\n近期，Wikipedia 開放了 telnet 端口，同時支持自己搭建服務，源碼倉庫[在此](https://github.com/)。\n\n使用 telnet 連接 Wikipedia 時，可以最大限度的保存自身上網瀏覽信息不會外洩，利用 Terminal 接收源碼，同時可以直接進行交互查找。\n\n**搭建 wikipedia-telnet 環境**\n\n```sh\n$ npm install -g wikipedia-telnet\n```\n\n接下來就可以使用`wikipedia-telnet`來進行連接，默認監聽端口是`1081`，可以在命令後添加端口數來指定端口。\n\n```sh\n$ wikipedia-telnet 1888\n```\n\n此時監聽端口就是`1888`。\n\n## Proxychains\n\n接下來需要為`telnet`設置`proxy`，這裡使用的`proxychains`可以為 Terminal 內的所有命令行指定代理。\n\n**搭建 proxychains 環境**\n\n利用`brew`來安裝管理`proxychains`。\n\n```sh\n$ brew install proxychains-ng\n```\n\n**修改配置文件**\n\n```sh\n$ vim /usr/local/Cellar/proxychains-ng/4.11/etc/proxychains.conf\n```\n\n配置文件中的說明寫的非常詳細，如果有什麼其他需要可以一起按照說明添加，如果沒有的話在配置文件中加上需要配置的監聽端口就可以了，`proxychains`默認的是 Tor 的端口。\n\n```raw\nsocks5 1080\nsocks5 9150\nhttp/https 8787\n```\n\n上面分別是 shadowsocks 、 Tor 、以及 Lantern 的默認監聽端口，如果你有修改過，就填寫修改後的端口。\n\n**使用 proxychains**\n\n要想使用 proxychains，只需要在命令行前加上`proxychains4`就可以了，比如說安裝`npm`依賴包：\n\n```sh\n$ proxychains4 npm install -g wikipedia-telnet\n```\n\n這時候這行命令就會通過`proxychains`所指定的`proxy`來進行。\n\n## 通過 Telnet 連接 Wikipedia\n\n所有的準備工作都做好了，這時候就可以安全放心的連接到 Wikipedia 來進行資料搜索了。\n\n**連接 wikipedia-telnet**\n\n首先通過`proxychains`連接到`wikipedia-telnet`：\n\n```sh\n$ proxychains4 wikipedia-telnet 1888\n```\n\n這時候如果連接成功，Terminal 會顯示本地監聽端口在 `1888`。\n\n**通過 telnet 連接 Wikipedia**\n\n接下來通過`telnet`連接到 Wikipedia ：\n\n```sh\n$ proxychains telnet 127.0.0.1:1888\n```\n\n此時如果連接成功，就會顯示 Wikipedia 的主頁。\n\n這時候已經進入交互界面，可以通過輸入關鍵字在 Wikipedia 中進行查找，最後輸入`quit`就可以結束連接。\n\n\n"
		},
		{
			"post_id": 18,
			"title": "# Mac OS X Terminal Command Line",
			"date_published": 1462734266,
			"body": "永遠記住\n\n> 機器不會思考，它只會忠實執行你所下達的所有命令\n  一個空格甚至可能導致整個系統崩潰\n  在發出任何指令前，都必須經過深思熟慮。\n\n---\n\n## Command Line\n\n* Mac使用Unix文件系統。\n\n* 訪問圖形界面無法顯示內容及Finder隱藏內容。\n\n* 遠程訪問MAC（SSH）。\n\n* 通過`sudo`命令獲得root權限\n\n* 每條命令包含Command Name、Options、Arguments、Extras四部分，其中後三部分可選。<br>Options：`-`作為前導符，如命令只包含單個字母，則可合併。<br>Arguments：具體細化命令。<br>Extras：實現其他功能。\n\n##  進入Terminal\n\n### 圖形界面\n\nFinder --> Applications --> Terminal\n\n### 非圖形界面\n\n開機F8 --> -s參數啓動 --> mount -uw /\n\n## 獲得Root權限\n\n`$ sudo -s`\n    \n注：輸入密碼時無任何圖形顯示。\n\n## 幫助指令\n\n全局幫助：\n\n`$ man -k`\n\n指定命令名稱：\n\n`$ man command-name`\n    \n## 文件路徑\n\n**在Unix系統書寫命令時對字母大小寫是敏感的，同時必須書寫文件擴展名。**\n\n絕對路徑：\n\n`$ /Users/Ben/Dropbox/message.txt`\n    \n相對路徑：\n\n`$ /Dropbox/message.txt`\n    \n在Terminal中，同HTML語法一致，可使用`../..`來省略父級目錄。同時，`~`可以代表當前用戶home folder，如`~/Dropbox/message.txt`。\n\n## 特殊字符\n\n如目錄中含有空格、`()`、` \"\" `、`[]`、`!`、`$`、`&`、`*`、`;`、`|`、`\\`等特殊字符，可使用`/`加以識別（同Markdown語法）。\n\n## 基本命令\n\n`pwd`：print working directory，顯示當前目錄的絕對路徑。\n\n`cd`：change directory，改變當前目錄到指定目錄。如不指定，則返回home folder。\n\n`mkdir`：建立新目錄。\n\n`$ mkdir /Users/Ben/Dropbox/Applications`\n    \n`touch`：在當前目錄下建立新文件。文件前不可指定目錄。\n\n`$ touch test.txt`\n    \n## 列出文件\n    \n`ls`：list directory contents，列出當前目錄內容。\n\n`$ ls -w -l -a /Users/Ben/Dropbox`\n    \n**參數**\n\n* `-w`：顯示中文。\n\n* `-l`：顯示詳細信息。\n\n* `-a`：顯示隱藏文件。\n\n## 拷貝文件\n\n`$ cp -R /Users/Ben/test.txt /Users/Ben/Dropbox`\n    \n指將test.txt文件拷貝至Dropbox目錄下。\n    \n**參數**\n\n* `-R`：Recurive，對目錄進行遞歸操作。\n\n## 移動文件\n\n`$ mv /Users/Ben/test.txt /Users/Ben/Dropbox`\n    \n將test.txt移動至Dropbox文件夾內。僅指定新文件名，則重命名原文件。\n\n## 刪除文件\n\n### 文件\n\n`$ rm -rf /Users/Ben/test.txt`\n    \n**參數**\n\n* `-rf`：`-r`與`-f`的省略寫法，Recurive & Force，遞歸及強制。***此參數務必小心使用，如執行`rm -rf / `，則清除整個系統。***\n\n**注：**\n\n* 如使用`$ rm`命令刪除文件，磁盤上仍然可能存有殘留，此時可使用`$ srm`命令徹底安全的刪除文件。\n\n* 刪除文件夾時可直接使用強制遞歸參數整體刪除。\n\n## 檢視文件\n\n### cat\n\nconcratenate，按順序讀取文件並輸出到Terminal窗口\n\n`$ cat ../message1.txt >> message2.txt`\n    \n其中`>>`表示將`message1.txt`中的內容添加到`message2.txt`結尾。\n\n### less\n\n允許查找文本，適合長文本查看。可使用箭頭按鈕上下移動光標，使用空格翻頁，輸入`/`及關鍵字來檢索，按`Q`鍵退出使用指南頁面，按`V`鍵來使用`vi`文本編輯器。\n\n### which\n\n定位某個命令的文件路徑。\n\n### file\n\n輸出目標文件類型，即使文件擴展名缺失仍舊有效。\n\n### find\n\n根據搜索關鍵詞定位文件路徑。\n\n`$ find ../Dropbox -name \"test.txt\"`\n    \n指以Dropbox目錄為起始路徑，搜索`test.txt`文件。\n\n**注：**\n\n* 使用參數`-x`檢索根目錄。\n\n* 使用`mdfind`命令來調用Soptlight搜索服務。\n\n## 通配符（Wildcard Characters）\n\n### 星號（＊，Asterisk）\n\n代表任何長度的任何字符。如`*.txt`代表所有格式為`txt`的文件。\n\n### 問號（？，Question mark）\n\n代表任何單個字符。如`m?ssage`匹配`message`但不匹配`messages`。\n\n### 方括號（［］，Square brackets）\n\n定義一定範圍的字符。如`[Mm]essage`匹配`Message`及`message`，`pic[1-9]`匹配`pic1`, `pic2`, ..., `pic9`。\n\n## 文本編輯\n\n`$ nano /Users/Ben/test.txt`\n    \n編輯test.txt文件。完成後Ctrl + O儲存，Ctrl + X退出。\n\n## VI模式\n\nVisual。是Command Line中最常見的文本編輯器，進入VI模式後，會佔用整個Terminal空間來顯示文件內容。\n\n在進入VI模式時，默認進入Command模式，按`A`鍵進入編輯模式。\n\n編輯結束後，按`esc`鍵回到Command模式，按住`Shift`鍵的同時按兩次`Z`鍵來保存並退出。如放棄保存，則輸入`:q !`執行強制退出命令。\n\n## 更改文件權限\n\n`$ chmod -R 755 /Users/Ben/test.txt`\n    \n將test.txt文件設定為root讀寫，其餘用戶只讀。\n\n**參數**\n\n* `-R`：Recurive，遞歸參數。\n\n* `755`：各用戶權限。\n\n## 更改文件屬主\n\n將test.txt屬主改為root用戶。\n\n`$ chown -R root:wheel /Users/Ben/test.txt`\n    \n修復整個系統文件權限：\n\n`$ diskutil repairpermissions / `\n\n## 利用Terminal開啓系統功能\n\n### 顯示／隱藏Library\n\n顯示：\n\n`$ chflags nohiddden ~/Library/`\n    \n隱藏：\n\n`$ chflags hidden ~/Library/`\n    \n### 顯示／隱藏文件\n\n顯示：\n\n```sh\n$ defaults write com.apple.finder AppleShowAllFiles -bool true\n$ killall Finder\n```\n    \n隱藏：\n\n```sh\n$ defaults write com.apple.finder AppleShowAllFiles -bool false\n$ killall Finder\n```\n    \n### Finder標題欄顯示完整路徑 \n\n```sh\n$ defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES\n$ killall Finder\n```\n    \n### 改變截圖陰影\n\n截圖：`Command-Shift-4`\n\n去掉陰影：\n\n```sh\n$ defaults write com.apple.screencapture disable-shadow -bool true\n$ killall SystemUSServer\n```\n    \n保留陰影:\n\n```sh\n$ defaults write com.apple.screencapture disable-shadow -bool false\n$ killall SystemUSServer\n```\n    \n## 改變截圖保存位置\n\n```sh\n$ defaults write com.apple.screencapture location /Users/Ben/Screencapture\n$ killall SystemUIServer\n```\n    \n---\n\n## 附錄：Unix系統命令參考\n\n### 目錄操作\n\n|   Command   |   Description   |   Example   |\n| :------------ | :-------------: | ----------: |\n| mkdir | 創建目錄 | mkdir test |\n| rmdir | 刪除目錄 | rmdir test |\n| mvdir | 移動或重命名目錄 | mvdir ../test ../test-2 |\n| cd | 改變當前路徑 | cd ../test-2 |\n| pwd | 顯示當前路徑名 | pwd  |\n| ls | 顯示當前目錄中內容 | ls  |\n\n### 文件操作\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\n| cat | 顯示或連接文件 | cat test.txt |\n| od | 顯示非文本文件內容 | od -c test.app |\n| cp | 拷貝文件或目錄 | cp ../test.txt ../test-2.txt |\n| rm | 刪除文件或目錄 | rm test.txt |\n| mv | 移動文件 | mv ../test.txt ../test.txt |\n| find | 使用匹配表達式查找文件 | find . -name \"*.c\" -print |\n| file | 顯示文件類型 | file test.txt |\n\n### 選擇操作\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\n| head | 顯示文件最初幾行 | head -10 test.txt |\n| tail | 顯示文件最後幾行 | tail -10 test.txt |\n| cut | 顯示文件每行中的某些域 | cut -f1,7 -d: /etc/passwd |\n| colrm | 從標準輸入中刪除若干列 | colrm 5 20 test.txt |\n| diff | 比較並顯示兩個文件的差異 | diff file1 file2 |\n| sort |\t排序或歸並文件 |\tsort -d -f -u file1 |\n| uniq |\t去掉文件中的重復行 |\tuniq file1 file2 |\n| comm |\t顯示兩有序文件的公共和非公共行 | comm file1 file2 |\n| wc |\t統計文件的字符數、詞數和行數 | wc filename |\n| nl\t | 給文件加上行號 | \tnl file1 >file2 | \n\n### 進程操作\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\nps |\t顯示進程當前狀態 |\tps u\nkill |\t終止進程 |\tkill -9 30142\n\n### 時間操作\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\ndate |\t顯示系統的當前日期和時間\t | date\ncal\t | 顯示日曆\t | cal 8 1996\ntime |\t統計程序的執行時間 |\ttime a.out\n\n### 網絡與通信操作\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\ntelnet |\t遠程登錄 |\ttelnet hpc.sp.net.edu.cn\nrlogin |\t遠程登錄 |\trlogin hostname -l username\nrsh\t| 在遠程主機執行指定命令 |\trsh f01n03 date\nftp\t| 在本地主機與遠程主機之間傳輸文件 | ftpftp.sp.net.edu.cn\nrcp\t | 在本地主機與遠程主機 之間複製文件 | rcp file1 host1:file2\nping |\t給一個網絡主機發送 回應請求 |\tping hpc.sp.net.edu.cn\nmail | 閱讀和發送電子郵件\t | mail\nwrite |\t給另一用戶發送報文 |\twrite username pts/1\nmesg | \t允許或拒絕接收報文 |\tmesg n\n\n### Korn Shell 命令\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\nhistory\t| 列出最近執行過的 幾條命令及編號 | history\nr\t| 重復執行最近執行過的 某條命令 |\tr -2\nalias\t| 給某個命令定義別名 |\talias del=rm -i\nunalias\t | 取消對某個別名的定義 | \tunalias del\n\n### 其它命令\n\n| Command | Description | Example |\n| :------------ | :-------------: | ----------: |\nuname\t| 顯示操作系統的有關信息 |\tuname -a\nclear\t| 清除屏幕或窗口內容 |\tclear\nenv\t| 顯示當前所有設置過的環境變量 | env\nwho\t| 列出當前登錄的所有用戶 |\twho\nwhoami |\t顯示當前正進行操作的用戶名 | whoami\ntty\t| 顯示終端或偽終端的名稱 |\ttty\nstty\t| 顯示或重置控制鍵定義\t| stty -a\ndu | \t查詢磁盤使用情況 | \tdu -k subdir\ndf /tmp | \t顯示文件系統的總空間和可用空間 | df/tmp\nw\t| 顯示當前系統活動的總信息 | w\n\n---\n\n<center>\n    「盡可能的榨取軟件的全部價值」\n    <br>「所有程序都是數據的過濾器」\n    <br>「沈默是金」\n    <p>—</p>\n    <p>The UNIX Philosophy</p>\n</center>\n\n\n"
		},
		{
			"post_id": 17,
			"title": "# Javascript Basic Grammar",
			"date_published": 1462734234,
			"body": "I want to put these basic grammar all together here. To make things more convenient.\n\n---\n\n## JS Basics\n\n*Computer* programs are lists of instructions. They are run linearly. \n\n*Code* is what computer programs are written in. \n\n*Grammar* is the foundation of language. Programming languages are built upon sets of tules called syntax. \n\n*Semicolons* is optional to be used, but is neccessary when having two statements on the same line. \n\n**Syntaxt**\n\nIncludes keywords like `var`, `return` and `true`. \n\n*Comments* are denoted by `//`. They are not read by the computer. \n\n**Variables**\n\nStore data and are the building blocks of Javascript. \n\nEach variable is defined by a case-sensitive name.\n\n```js\nvar myVariable = \"data\"\nconsole.log(myVariable)\n```\n\n**String**\n\nString can be sequences of characters. It can also include spaces, punctuation, and numbers. \n\nThey are identified by double quotes. \n\n**Numbers**\n\nThere is no need to use quote when you value numbers. \n\n`var myNumber = 10`\n\n**Expressions**\n\nAn expression can combine numbers, string and variables to output a value. They are evaluated from left to right when coding. \n\n**Arithmetic**\n\nThe four basic forms of arithmetic are represented by symbols called operators and are used when creating expressions.\n\n```js\nvar myNumber = 10 + 2\nconsole.log(myNumber)\n```\n\nThe same as C grammar, they are `+`, `-`, `*`, `/` and `%`。\n\n**Booleans**\n\nBooleans can be used to store true or false outcomes.\n\n```js\nvar myBooleans = true\nconsole.log(myBooleans)\n```\n\n**Comparisons**\n\nThere are six kinds of way to compare data.\n\n```js\n> Greater than\n< Less than\n>= Greater than or equal to\n<= Less than or equal to\n!= Not equal to \n== Equal to\n```\n\nBooleans work closely with comparision operators and rely on them to determine whether the boolean will output a true or false value.\n\n## Variables\n\nVariables are containers for storing values and are essential to write complex computer programs.\n\n**Delaration**\n\nYou can use `var` to declare a variable. \n\n**Naming**\n\nA variable's name is unique and case-sensitive.   \nYou can put your variable's name after the keyword `var`. \n\n**Assignment**\n\nTo assign a value, you can use `=`. \n\n```js\nvar myName = \"Ben\"\nconsole.log(myName)\n```\n\n**Reassignment**\n\nVariables are containers for values and you can replace the existing value in a variable with a new value.\n\n**Types**\n\nData types: number, string, boolean.   \nVariables can store values of any data type.\n\n```js\nvar myString = \"String\"\nvar myNumber = 33\nvar myBoolean = true\n```\n\n**Undefined**\n\nThe data type undefined denotes the absence of a value.  \nIf you declare a variable, but don't assign a value, it automatically holds the value undefined.\n\n```js\nvar myNothing\nconsole.log(myNothing)\n```\n\nThen the computher will output \"undefined\".\n\n**Initialization**\n\nWhen a variable is given a value it is called initialization. \n\n**Type Comparisons**\n\nYou can use `===` and `!==` to compare the value and data type. \n\n```js\nvar Something = 10 === \"10\"\nconsole.log(Something)\n```\n\nThen the computer will output `false`. \n\n## Functions\n\nFunctions are the verbs of programming.  \nThey tell the computer to do a set of actions.   \n\n```js\nfunction myFunction(){\nconsole.log(\"Function!\")\n}\n\nmyFunction()\n```\n\n**Console.log**\n\nThis funcion has the computer print data to the console for your viewing.\n\n**Declaring Functions**\n\nYou can use the keyword `function` to declare a funcion and give is an action to execute inside `{}`.\n\n**Storing Functions**\n\nYou can also use a variable to store function.   \nThis can make it more easier when we use a funcion.\n\n```js\nvar myFunction = function(){\nconsole.log(\"Funciont!\")\n}\n\nmyFunction()\n```\n\n**Parameters**\n\nParameters are variables you give a function as inputs inside `()`.  \nParameters are given specific values when you call the function. \n\n```js\nvar getCost = function(price){\nconsole.log( \"$\" + price )\n}\n\ngetCost(20)\n```\n\nThen the `price` is a parameter. \n\n**Calling Functions**\n\nWhen you call a function you are assigning a value to your parameters.  \nThis value is called an argument.\n\n**Arguments**\n\nArguments are the values you assign to parameters.\n\n`20` is an argument.\n\n**Missing Arguments**\n\nIf a function with a parameter is called with a missing argument, that parameter is assigned the value undefined by default.\n\n```js\nfunction say(myname){\n  console.log(myname)\n}\n\nsay()\n```\n\n**Body**\n\nAnything inside `()` is considered the body of the function, and is executed when the function is called.\n\n```js\nfunction getcost(price){\n  var tip = price * 0.2\n  var cost = price + tip\nconsole.log(\"$\" + cost)\n}\n\ngetcost(20)\n```\n\n\n"
		},
		{
			"post_id": 16,
			"title": "# CSS Basic Grammar",
			"date_published": 1462734234,
			"body": "I want to put these basic grammar all together here. To make things more convenient.\n\n---\n\n## CSS\n\nStands for Cascading Style Sheets. Used to describe HTML elements styles. \n\n```css\nh1 {\n  color: red;\n}\n```\n\n## Style\n\nStyle sheets are typically written in a separate file, but you can also apple styles directly in your HTML. To do so, you can use the `style` attribute. \n\nBut style attribute can only be applied to individual elements. \n\n```html\n<body>\n  <h1 style=\"color: red\">\n    Site Name\n  </h1>\n</body>\n```\n\n## Link\n\nLink your CSS file. \n\n```html\n<head>\n  <link rel=\"stylesheet\"\n    type=\"text/css\"\n    href=\"/styles.css\">\n</head>\n```\n\n## Selectors\n\nChoose and style specific HTML elements. \n\nSelectors find HTML elements based on ID, class, element name and more. \n\nUsing `*` to select all elements. \n\n```css\n* {\n  color: #;\n}\n```\n\n**Color**\n\nThere are three ways to represent a color in CSS. \n\n* Hexadecimal: #2F9C0A -- six digit alpha-numeric combination\n\n* RGB: 201, 44, 44 -- each color component can take values between 0-255, the higher the value, the more prominent the color \n\n* Default: Green -- apply a default green color\n\n**Pixels**\n\nMeassuring your browser elements. \n\n**Class**\n\nThe syntax is `.classname` in your CSS file when using class selectors. \n\n```html\n<div class=\"header\">\n```\n\n```css\n.header {\n  color: #;\n}\n```\n\n**IDs**\n\nIf you assign an ID attribute in your HTML file, then that is applied to a single element. \n\nUsing the syntax `#diname` to declare an ID selector. \n\n```html\n<div id=\"title\">\n```\n\n```css\n#title {\n  color: #;\n}\n```\n\n**Psuedo classes**\n\nBe used when styles change due to an action occuring. \n\nUsing `action` selector to show how a link color changes from blue to purple once clicked: \n\n```html\n<a href=\"http://\">\n```\n\n```css\na:active {\n  color: purple;\n}\n```\n\n## Properties\n\nDefine the styles being applied to the selector. \n\nSelectors can hold multiple properties. \n\n```css\nh2 {\n  color: #;\n  font-size: 10px;\n}\n```\n\nAll properties need assigned values. It is necessary to add a semicolon after each propery-value pair. \n\n**Font**\n\nSet the size and type of font for your element. \n\n```css\nh1 {\n  font: 15px Chalkduster;\n}\n```\n\n**Background-color**\n\nAdd a color to the background of an element. \n\n```css\nh1 {\n  background-color: green;\n}\n```\n\n**Width & Height**\n\nProvides a fixed width and height to an element. \n\n```css\nimg {\n  height: 30px;\n  width: 50px;\n}\n```\n\n## Spacing\n\nThe CSS box modle consists `margins`, `borders`, `padding`, `content`. \n\nThis model gives every HTML element a `margin`, `border`, `padding` and `content`. \n\n**Margin**\n\nThe first layer. If you have a margin of 10px there will be 10px of spacing on the left, right, to and bottom of your content. \n\n```html\n<body>\n  <div id=\"box\"></div>\n</body>\n```\n\n```css\n#box {\n  height: 50px;\n  width: 50px;\n  border: 1px solid red;\n  margin: 10px;\n}\n```\n\n`margin` applies a margin to all sides of your content. You can also specify margins separately with margin-right, margin-left, top & bottom. \n\nMargins can also have negative values. \n\n**Border**\n\nBorder property takes three values: thickness, type & color. \n\n`border: 1px solid red;` \n\n`border: 1px dashed blue;`\n\n*Border-radius*\n\nDefines how rounded the corners of your border are. \n\n`border-radius: 4px;`\n\n**Padding**\n\nAdds space between the content and the border. \n\n`padding: 20px;`\n\n**Content**\n\nContent can be images, text or anything else you want to add on your web pages.\n\n```html\n<body>\n  <div>\n  Content\n  </div>\n</bode>\n```\n\n```css\ndiv {\n  height: 50px;\n  width: 50px;\n  border-radius: 4px;\n  border: 1px solid red;\n  margin: 10px;\n  padding:15px; \n}\n```\n\n## Positioning\n\nHow to organize & position the different sections of your website. \n\n**Containers**\n\nHow you section off portions of your website. \n\nSuch as `div` is a container. \n\n```css\ndiv {\n  background-color: #eeeeee;\n  height: 50px;\n  width: 50px;\n}\n```\n\n**Display**\n\nDisplay property allows you to create containers with a single value. \n\n`display: block;`\n\n*block* : creates a square block that takes up the full width of the browser. Be used to organize a blank web page. \n\n*inline-block* : organizes your boxes horizontally. \n\n*inline* : puts your elements on the same line. When inline is applied elements lose their dimensions. \n\n*none* : removes its associated elements from the web page. \n\n**Float**\n\nPlaces an element in a relative position on your browser. You can set float to right, left or center.\n\n**Position**\n\nPosition can be static, fixed, relative & absolute. \n\n*static* : default position property. If you do not assign a position then the element paces itself wherever it wants. \n\n*absolute* : places the element based upon the position of the parent element. \n\n*relative* : places elements based on the static position it would otherwise take. \n\n*fixed* : keeps an element in the place. Even if you scroll the element will stay put. \n\n"
		},
		{
			"post_id": 15,
			"title": "# PGP/GPG Command Line",
			"date_published": 1462737808.262,
			"body": "PGP/GPG加密的一些常用指令。\n\n---\n\n## 安裝\n\nLinux系統下安裝指令：\n\n`$ sudo pacman -S gnupg`\n\n## 生成鑰匙對\n\n`$ gpg --gen-key`\n\n```sh\nPlease select what kind of key you want: \n(1) RSA and RSA(default)\n(2) DSA and Elgamal\n(3) DSA(sign only)\n(4) RSA(sign only)\nYour selection?\n```\n    \n默認RSA。\n\n```sh\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want?\n```\n    \n默認2048位。\n\n```sh\nPlease specify how long the key should e valid.\n0 = key does not expire\n<n> = key expires in n days\n<n> w = key expires in n months\n<n> y = key expires in n years\nKey is valid for? (0)\n```\n    \n默認永久有效。\n\n```sh\nReal name: \nEmail address: \nComment: \n```\n    \n這三行信息用以產生UID標識。\n\n## 查看鑰匙對\n\n<i class=\"\"></i><strong> 查看公鑰</strong>\n\n`$ gpg --list-keys`\n    \n在指令中使用UID標識時，前面必須加上\"0x\"。\n\n<i class=\"\"></i><strong> 查看私鑰</strong>\n\n`$ gpg --list-secret-keys`\n\n## 導出公鑰\n\n`$ gpg -a --output --export UID`\n    \nUID可使用鑰匙對名稱或Email地址。\n\n<i class=\"\"></i><strong> 參數</strong>\n\n* `-a`：文本輸出格式，默認二進制。\n\n* `-output`：輸出文件名。\n\n* `-export`： 執行輸出公鑰操作。\n\n### 查看內容\n\n`$ cat`\n    \n## 發佈公鑰\n\n`$ gpg --keyserver key.gnupg.net --send-key ID`\n    \n### 參數\n\n* `-keyserver`：指定公鑰服務器。\n\n* `-send-key`：指定公鑰ID。\n\n## 獲取公鑰\n\n`$ gpg --keyserver keys.gnupg.net --search-key ID`\n    \nID也可使用UID標識。\n\n## 導入公鑰\n\n服務器導入指令：\n\n`$ gpg --keyserver keys.gnupg.net --recv-key UID`\n    \n本地導入指令：\n\n`$ gpg --import key.public`\n    \n## 核對指紋並簽署\n\n核對指令：\n\n`$ gpg --fingerprint`\n    \n簽署指令：\n\n`$ gpg --sign-key ID`\n    \n刪除指令：\n\n`$ gpg --delete-keys ID`\n    \n## 刪除\n\n### 公鑰\n\n`$ gpg --delete-key ID`\n    \n### 私鑰\n\n`$ gpg --delete-secret-key ID`\n\n## 文件加密\n\n### 加密\n\n`$ gpg -a --output message-ciper.txt -r ID -e message.txt`\n    \n參數：\n\n* `-a`：輸出文件格式。\n\n* `-output`：輸出文件名。\n\n* `-r`：信息接收者（recipient)公鑰ID。\n\n* `-e`：加密（encrypt）操作。\n\n如所加密文件為二進制，`-a`參數可省略。\n\n### 解密\n\n`$ gpg --output message-plain.txt -d message-ciper.txt`\n    \n參數：\n\n* `-output`：輸出文件名。\n\n* `-d`：解密（decrypt）操作。\n\n## 數字簽名\n\n### 方法A：生成獨立簽名文件\n\n**簽名**\n\n`$ gpg -a -b message.txt -u ID`\n    \n參數：\n\n* `-a`：輸出文件格式。\n\n* `-b`：以生成獨立的簽名文件的方式進行簽名。\n\n* `-u`：指定私鑰。\n\n**檢驗**\n\n`$ gpg --verify message.txt.asc`\n    \nGood signature則通過檢驗。\n\n### 方法B：不生成獨立簽名文件\n\n**簽名**\n\n`$ gpg -a --clearsign message.txt`\n    \nclearsign參數將簽名與原信息合併後生成一個新文件。\n\n**檢驗**\n\n`$ gpg --verify new.txt`\n    \n**提取信息**\n\n`$ gpg --output message-original.txt -d new.txt`\n    \n---\n\n<center>\n<h4>「信息安全並非是讓人懷疑一切，而是讓每個人都能夠保有隱私的權利。」</h4>\n</center>\n\n\n"
		},
		{
			"post_id": 14,
			"title": "# Jekyll/Liquid Grammar",
			"date_published": 1462737769.95,
			"body": "Jekyll/Liquid常用語法記錄。\n\n---\n\n## What is Jekyll\n\nJekyll是一個靜態網站生成器。    \n通過標記語言Markdown或textile和模版引擎liquid轉換生成網頁。    \nJekyll依賴於ruby開發平台。\n\n## 目錄結構\n\n通過`$ jekyll new SiteName`目錄可以迅速在當前目錄下生成一個基本的Jekyll結構目錄。\n\n```sh\n.\n|-- _config.yml\n|-- _includes/\n|   |-- footer.html\n|   |-- head.html\n|-- _layouts/\n|-- _posts/\n|   |-- 2016-01-01-title.markdown\n|   |-- 2016-01-02-title.markdown\n|-- _drafts/\n|   |-- title.markdown\n|-- _data/\n|   |-- feed.yml\n|-- _site/\n|-- index.html\n```\n\n**_config.yml**\n\n全局配置文件，其中包含網站所有基礎信息，便於需要時調用。\n\n**_drafts**\n\n存放未發佈的文章。\n\n**_includes**\n\n存放關於網站header, footer, sidebar等公共部分，便於需要時調用。\n\n**_layouts**\n\n存放頁面基礎配置文件，如page, post頁面第一層設置，使用html語法編寫。   \n頁面設置可以多層嵌套。  \n\n在使用第一層配置時，使用layout來指定:   \n\n```yml\n---\nlayout: page\n---\n```\n\n**_posts**\n\n存放已發佈內容，命名必須按照`Y-M-D-title.markdown`來命名。  \n語法必須使用Markdown, HTML或texile。\n\n**_data**\n\n存放`.yml`, `yaml`, `json`, `csv`等文件。用於設置全局變量。\n\n**_site**\n\nJekyll用於生成網站的文件，需要在`.gitignore`中屏蔽。\n\n**index.html**\n\n主頁文件。\n\n*所有存放在根目錄下並且不以下划線開頭的文件夾中有格式的文件都會被處理成page。*\n\n## 全局變量配置\n\n全局配置擁有默認配置，可以手動配置需要修改的地方。\n\n**時區**\n\n```yml\n# timezone: America/Argentina/San_Luis\ntimesone: Timesone\n```\n\n**鏈接格式**\n\nPost中的URL格式通過`permalink`來配置。\n\n```yml\n# /2016/01/01/title.html\npermalink: /:year/:month/:day/:title.html\n\n# /01-01-2016/title.html\npermalink: /:month-:day-:year/:title.html\n```\n\n同時也有已有配置可以直接設置。\n\n```yml\n# /:category/:year/:month/:day/:title.html\npermalink: date\n\n# /:category/:year/:month/:day/:title.html\npermalink: pretty\n\n# /:category/:title.html\npermalink: none\n```\n\n**分頁**\n\n文章分頁變量：`paginate`, `paginate_path`。\n\n```yml\npaginate: 5\npaginate_path: \"blog/page:num/\"\n```\n\n其中`/blog/`目錄為`baseurl`目錄。`page`是字符常量，變量是`:num`分頁頁碼，自動從第二頁開始編碼。\n\n**默認值設定**\n\n設置`author`, `layout`等默認值。  \n在設定後可以隨時通過`post`題頭覆蓋這些默認值。\n\n```yml\n# in _cofig.yml\ndefaults:\n - \n  scope:\n    path: \"\"  # empty means all files in the project\n    type: \"posts\"  \n  values:\n    layout: \"post\"\n    author: \"Ben\"\n\n  -\n   scope:\n    path: \"project\"\n    type: \"pages\"\n   values: \n     layout: \"project\"\n```\n\n## Jekyll模版、變量\n\nJekyll模版分為兩部分，頭部定義以及Liquid語法。\n\n**頭部定義**\n\n定義制定模版的變量，這裡的所有設置都可以覆蓋全局變量中的基礎配置。\n\n```yml\n---\nlayout: post\ntitle: title\nsubtitle: subtitle\ndate: date\ncategory: category\ndecription: description\npublished: true\npermalink: none\n---\n```\n\n所有的變量都是樹節點，連接全局變量配置根節點。\n\n全局根節點有：  \n* site: `config_yml`全局配置信息\n* page: 頁面配置信息。\n* content: 包含頁面子視圖，用於引入子節點內容，不能在post和page文件中使用。\n* paginator: 分頁信息。\n\n*`post`變量僅作用於`for`循環內部。*\n\n**site 變量**\n\n變量 | 描述\n:--- | ---\n`site.time`|  當前時間   \n`site.pages` |  所有頁面列表  \n`site.posts`| 按時間逆排序所有文章列表  \n`site.related_posts`| 包含最多近期十篇文章列表  \n`site.static_files` | 所有靜態文件列表  \n`site.html_pages`|  所有HTML頁面列表  \n`site.collections`| 自定義對象集合列表  \n`site.data`|  data目錄下YAML文件數據列表  \n`site.documents` |  所有Collections文檔列表  \n`site.categories.Category`|  所有Category類別下文章列表  \n`site.tags.Tag`|  所有Tag標籤下列表  \n`site.Configuration_Data`| 其他自定義變量  \n\n**page 變量**\n\n變量 | 描述\n:--- | ---\n`page.content`\t| 頁面的內容\n`page.title`\t| 頁面的標題\n`page.excerpt`\t| 未渲染的摘要\n`page.url`\t| 不帶域名的頁面鏈接\n`page.date`\t| 指定每一篇 post 的時間\n`page.id`\t| 每一篇 post 的唯一標示符(在RSS中非常有用)\n`page.categories`\t| post 隸屬的一個分類列表，可在 YAML 頭部指定\n`page.tags`\t| post 隸屬的一個標籤列表，可在 YAML 頭部指定\n`page.path`\t| 頁面的源碼地址\n`page.next`\t| 按時間順序排列的下一篇文章\n`page.previous`\t| 按時間順序排列的上一篇文章\n\n**paginator 變量**\n\n變量 |\t描述\n:--- | ---\n`paginator.per_page` | \t每一頁的 post 數量\n`paginator.posts`| \t當前頁面上可用的 post 列表\n`paginator.total_posts`| \t所有 post 的數量\n`paginator.total_pages`\t| 分頁總數\n`paginator.page`\t| 當前頁的頁碼，或者 nil\n`paginator.previous_page`\t| 上一頁的頁碼，或者 nil\n`paginator.previous_page_path`\t| 上一頁的路徑，或者 nil\n`paginator.next_page`\t| 下一頁的頁碼，或者 nil\n`paginator.next_page_path`\t| 下一頁的路徑，或者 nil\n\n## Liquid 語法\n\nLiquid是Ruby的一個模版引擎庫，Jekyll中用到Liquid標記有兩種：**輸出**和**標籤**。\n\n* Output標記：變成文本輸出，被2層成對花括號包住。  \n* Tag標記：執行命令，被成對的花括號和百分號包住。\n\n## Jekyll 輸出 Output\n\n```ryby\nHello  { { name } }\nHello  { { user.name } }\nHello  { { 'Ben' } }\n```\n\nOutput標記可以使用過濾器Filters對輸出內容進行簡單處理。\n多個Filters間用竪線隔開，從左到右依次執行，Filter左邊總是輸入，返回值為下一個Filter的輸入或最終結果。\n\n```ruby\nHello { { 'Ben' | upcase } }  # 轉換為大寫輸出\nHello Ben has { { 'Ben' | size } } letters. # 字符串長度\nHello { { '*Ben*' | markdownify | upcase } }  # 將Markdown字符串轉換成HTML大寫文本輸出\nHello { { 'now' | date: \"%Y %M %D\" } }  # 按照指定格式輸出當前時間\n```\n\n## 過濾器Filters\n\n下面是常用的過濾器方法，更多API需要查閱源碼，一般主要看兩個Ruby Plugin文件：`filters.rb`（Jekyll）和`standardfilters.rb`（Liquid）。\n\n* `date` - 將時間戳轉化為另一種格式   \n* `capitalize` - 輸入字符串首字母大寫   \n* `downcase` - 輸入字符串轉換為小寫  \n* `upcase` - 輸入字符串轉換為大寫  \n* `first` - 返回數組中第一個元素  \n* `last` - 返回數組數組中最後一個元素  \n* `join` - 用特定的字符將數組連接成字符串輸出  \n* `sort` - 對數組元素排序  \n* `map` - 輸入數組元素的一個屬性作為參數，將每個元素的屬性值映射為字符串  \n* `size` - 返回數組或字符串的長度   \n* `escape` - 將字符串轉義輸出   \n* `escape_once` - 返回轉義後的HTML文本，不影響已經轉義的HTML實體  \n* `strip_html` - 刪除 HTML 標籤  \n* `strip_newlines` - 刪除字符串中的換行符(\\n)   \n* `newline_to_br` - 用HTML` <br/>` 替換換行符 \\n  \n* `replace` - 替換字符串中的指定內容    \n* `replace_first` - 查找並替換字符串中第一處找到的目標子串   \n* `remove` - 刪除字符串中的指定內容   \n* `remove_first` - 查找並刪除字符串中第一處找到的目標子串    \n* `truncate` - 截取指定長度的字符串，第2個參數追加到字符串的尾部    \n* `truncatewords` - 截取指定單詞數量的字符串   \n* `prepend` - 在字符串前面添加字符串    \n* `append` - 在字符串後面追加字符串   \n* `slice` - 返回字符子串指定位置開始、指定長度的子串   \n* `minus` - 減法運算   \n* `plus` - 加法運算   \n* `times` - 乘法運算   \n* `divided_by` - 除法運算  \n* `split` - 根據匹配的表達式將字符串切成數組   \n* `modulo` - 求模運算   \n\n## Jekyll Tag\n\n標籤用於模版中的執行語句。下面是目前Jekyll/Liquid標準標籤庫：\n\nTags | Description\n:--- | ---\nassign\t| 為變量賦值\ncapture\t| 用捕獲到的文本為變量賦值\ncase\t| 條件分支語句 case…when…\ncomment\t| 注釋語句\ncycle\t| 某些特定值間循環選擇，如顏色、DOM類\nfor\t| 循環語句\nif\t| if/else 語句\ninclude\t| 包含另一個模版，文件在 `_includes` 目錄\nraw\t| 禁用範圍內的 Tag 命令，避免語法衝突\nunless\t| if 語句的否定語句\n\n**Comments**\n\n起到注釋Liquid代碼作用。\n\n```ruby\nThis is Benjamin. { % comment % } Comments { % endcomment % }\n```\n\n**Raw**\n\n臨時禁止執行Jekyll Tag命令。\n\n```ruby\n{ % raw % }\n This is a raw line. { % includ head % } will not show.\n{ % endraw % }\n```\n\n**If/Else**\n\n條件語句，可以使用關鍵字有：`if`, `unless`, `elseif`, `else`。\n\n**Case**\n\n適用於條件實例很多的情況。\n\n```ruby\n{ % case template % }\n{ % when 'label' % }\n{ % when 'product' % }\n{ % else % }\n{ % endcase % }\n```\n\n**Cycle**\n\n經常需要在相似的任務間選擇時，可以使用`cycle`標籤。\n\n```ruby\n{ % cycle 'one', 'two', 'three' % }\n{ % cycle 'one', 'two', 'three' % }\n```\n\n同時可以指定循環名稱進行分組處理。\n\n```ruby\n{ % cycle 'group1': 'one', 'two', 'three' % }\n```\n\n**For loops**\n\n循環遍歷數組。\n\n```ruby\n{ % for item in array % }\n{ { item } }\n{ % endfor % }\n```\n\n循環迭代Hash散列，`item[0]`是鍵，`item[1]`是值。\n\n```ruby\n{ % for item in hash % }\n{ { item[0] } }: { { item[1] } }\n{ % endfor % }\n```\n\n每個循環週期，提供下面幾個可用的變量：\n\n```ruby\nforloop.length  # => length of the entire for loop\nforloop.index  # => index of the current iteration\nforloop.index0  # => index of the current iteration (zero based)\nforloop.rindex  # => how many items are still left? \nforloop.rindex0  # => how many items are still left? (zero based)\nforloop.first  # => is this the first iteration? \nforloop.last  # => is this the last iteration? \n```\n\n還有幾個屬性用來限定循環過程：\n\n`limit:int`：限制循環迭代次數   \n`offset:int`：從第n個item開始迭代   \n`reversed`：反轉循環順序  \n\n**Variable Assignment**\n\n為變量賦值，用於輸出或其他Tag。\n\n```ruby\n{ % assign index = 1 % }\n{ % assign name = 'freestyle' % }\n\n{ % for t in collections.tags % }{ % if t == name % }\n  Freestyle!\n{ % endif % }{ % endfor % }\n\n\n/ 變量是布爾類型 /\n\n{ % assign freestyle = false % } \n\n{ % for t in collections.tags % }{ % if t == 'freestyle' % }\n  { % assign freestyle = true % }\n{ % endif % }{ % endfor % }\n\n{ % if freestyle % }\n  Freestyle!\n{ % endif % }\n```\n\n`capture`允許將大量字符串合併為單個字符串並賦值給變量，而不會輸出顯示。\n\n## 其他模版語句\n\n**格式化時間**\n\n```ruby\n{ { site.time | date_to_xmlschema } }     # => 2008-11-07T13:07:54-08:00\n{ { site.time | date_to_rfc822 } }        # => Mon, 07 Nov 2008 13:07:54 -0800\n{ { site.time | date_to_string } }        # => 07 Nov 2008\n{ { site.time | date_to_long_string } }   # => 07 November 2008\n```\n\n**代碼語法高亮**\n\n安裝`pygments.rb`的`gem`組件和Python 2.x後，配置文件添加`highlighter:pygmnts`，就可以使用語法高亮了。\n\n```ruby\n{ % highlight ruby linenos % }\n# some ruby codes\n{ % endhighlight % }\n```\n\n*參數*  \n`ruby`：指定語言  \n`linenos`：顯示行號  \n\n在給代碼著色時，需配置相對應的CSS文件。\n\n**生成摘要**\n\n配置文件中設定`excerpt_separator`取值，每篇post都會自動截取從開始到這個值間的內容作為這篇文的摘要`post.excerpt`使用。  \n如果要禁用某篇文章的摘要，可以在該篇文章YAML頭部設定`excerpt_separator: \"\"`。\n\n```html\n{ % for post in site.posts % }\n<a href=\"{ { post.url } }\">{ { post.title } }</a>\n{ { post.exceerpt | remove: 'test' } }\n{ % endfor % }\n```\n\n**刪除HTML標籤**\n\n這個在摘要作為`head`標籤里的`meta=\"description\"`內容輸出時很有用。\n\n```ruby\n{ { post.excerpt | strp_html } }\n```\n\n**刪除指定文本**\n\n過濾器`remove`可以刪除變量中的指定內容。\n\n```ruby\n{ { post.url | remove: 'http' } }\n```\n\n**CGI Escape**\n\n通常用於將URL中的特殊字符轉義為`%xx`形式。\n\n```ruby\n{ { \"foo.bar;baz?\" | cgi_escape } }  # => foo%2Cbar%3Bbaz%3F\n```\n\n**排序**\n\n```ruby\n# Sort an array. Optional arguments for hashes:\n#   1. property name\n#   2. nils order ('first' or 'last')\n\n{ { site.pages | sort: 'title', 'last' } }\n```\n\n## Assets 樣式文件\n\nJekyll支持Sass和CoffeeScript，通過新建`.sass`, `.scss`, `.coffee`格式文件，並在開頭添加一堆`---`來使用這個功能。\n\n\n"
		},
		{
			"post_id": 12,
			"title": "# 使用VeraCrypt製作一個強加密卷",
			"date_published": 1462737650.615,
			"body": "If you want to keep a secret, you must also hide it from yourself.\n\n---\n\n## 起因\n\n最近在Twitter上看到黨國公安的`取證大師`一系列看起來很高級的東西，雖然它對付普通人比較厲害，對付我這種人還是略遜一籌（我不用QQ飛信微信這一類的東西，而看截圖它主要是針對這些大眾軟件的，因此對我的殺傷力就少了一些），但是還是不能掉以輕心，如果它在技術上能實現說明書上的三分之二，那就是相當厲害了，在這個大數據的年代裡，隱私似乎變成了一種奢侈品，Big brother is always watching you。\n\n關於取證大師可以參看[這裡](https://chinadigitaltimes.net/chinese/2016/03/%E3%80%90%E7%AB%8B%E5%AD%98%E6%AD%A4%E7%85%A7%E3%80%91%E5%8F%96%E8%AF%81%E5%A4%A7%E5%B8%88/)。\n\n為了保護我那丁點可憐的隱私，我用VeraCrypt製作了一個強加密卷。\n\n## VeraCrypt 簡單介紹\n\n* 功能強大，提供圖形界面\n* 隱藏加密卷功能\n* keyfile作為密鑰加密文件\n\n## 加密卷結構\n\n**第一層**\n\n首先選擇一個合適的硬盤作為第一層加密卷，可以是一整塊磁盤，或者是一塊磁盤中的一部分，或者是一個移動硬盤。\n\n**第二層**\n\n在第一層加密卷中再存放一個隱藏加密卷，這種隱藏加密卷分為兩個部分，經過不同的解密方式後開啟的是不同的區域，掩護加密卷就是第二層。\n\n**第三層**\n\n在創建好隱藏卷後，最核心的隱藏卷就是真正用來存放資料的地方，這裡是第三層。\n\n**第N層**\n\n當然，只要空間足夠，可以創建無數個隱藏加密卷中的隱藏加密卷，來最大程度保護核心機密。\n\n## 下載VeraCrypt\n\n*這篇文章默認操作系統是OS X，Linux系統大同小異，只是一些軟件的版本不同。*\n\nVeraCrypt的官網在[這裡](https://veracrypt.codeplex.com/)。\n\n官網提供下載文件、GPG簽名文件以及GPG公鑰，關於什麼是數字簽名可以參考[官方說明](https://veracrypt.codeplex.com/wikipage?title=Digital%20Signatures)，關於GPG的命令行操作可以參考[這篇博文](http://benjaminblog.ml/coding/gpg.html)。\n\n在核對完簽名後就可以放心安裝了。\n\n## OS X FUSE\n\nVeraCrypt需要FUSE來支持，可以在[FUSE官網](https://osxfuse.github.io/)上下載。\n\n建議下載穩定版，測試版bug實在太多\n\n在安裝FUSE的時候需要勾選`FUSE Compatibility Layer`，否則VeraCrypt會提醒你重新安裝。\n\n## 創建加密卷\n\nVeraCrypt的引導界面非常詳細，只要英文閱讀能力不算太差，一般不會出現太大問題，可能出現問題的時候都會多次彈出`Warning`來警告確認操作。\n\n*注：在選擇加密卷文件類型時不能選`NONE`，否則無法讀取。*\n\n**加密準備**\n\n在進行創建加密區域前，VeraCrypt需要收集大量的隨機信息，所以需要不斷的移動鼠標來產生隨機信息，直到第一個進度條讀取完畢。\n\n**進行加密**\n\n第二個進度條顯示的是創建加密卷的進度，如果創建的加密卷容量比較大，這個過程真的需要非常久的時間，一般需要幾個小時才能完成。\n\n**隱藏卷的掩護卷**\n\n在隱藏卷創建完成後，VeraCrypt會彈出掩護卷，你可以放置任何你在被迫解密的情況下想讓對方看到的東西。如果不想做得太明顯，這部分的文件最好是一些看似重要其實無關緊要的內容，最好採取棄車保帥的策略。\n\n## 掛載加密卷\n\n在連接一個加密的硬盤後，電腦會跳出無法識別的警告，這時候需要先用VeraCrypt掛載後才能使用。\n\n假設創建的是一個三層加密卷，那麼需要掛載兩次，第一次先掛載加密的磁盤，第二次掛載隱藏卷。\n\n掛載過程會非常緩慢，不能著急，否則很有可能死機，需要耐心等待。\n\n## 更多保護措施\n\n**Keyfile**\n\nVeraCrypt提供使用一個文件作為密鑰加密文件的功能，這個Keyfile可以是任何文件，包括`MP3`，`jpg`，`txt`甚至是一份說明書，都可以作為Keyfile，也可以讓VeraCrypt自動生成一個Keyfile。\n\n有了Keyfile，可以省去記憶密碼的麻煩，但是缺點是Keyfile一旦丟失，加密文件就永遠無法打開，因此Keyfile最好選擇不引人注目又常見的內容，比如一首歌或者一份冰箱說明書。\n\n**加密卷名稱**\n\n無論是加密後的磁盤還是隱藏卷，它的名稱都是可以任意修改的，甚至可以將隱藏卷的名稱修改成一個隱藏文件，這樣都不會影響到其中存放的數據。\n\n**分區加密**\n\n對於一個加密的磁盤來說，在其中再次創建加密卷的時候最好進行分區加密，一來不同的加密分區可以更好的保護數據安全，二來一個加密卷不會太大，更能分散注意力。\n\n當然，無論是隱藏卷中的隱藏卷分區，還是加密分區中的隱藏卷，就看你如何部署了。\n\n## 缺點\n\n所有事物都是有缺點的，VeraCrypt也不例外。\n\n* 加密過程無比緩慢，一般沒有幾個小時跑不完\n* 裝載過程也無比緩慢，而且還容易死機\n* 使用過程中讀寫文件無比緩慢，我使用命令行操作都讓Mac被迫重啟過三次\n\n總而言之，和所有的安全措施一樣，那就是*運行緩慢*，*無比緩慢*，但是針對VeraCrypt幾乎無法暴力破解這一點，所有的等待都是值得的，因而它也更適合需要高強度加密並且不會被經常修改的數據。\n"
		},
		{
			"post_id": 11,
			"title": "# 7-Zip Command Line",
			"date_published": 1462737595.73,
			"body": "最近因為玩 SQL 的原因，常常接觸到壓縮文件，發現 Mac 自帶的 7z 真的是非常強大，總結一下它的使用技巧。\n\n---\n\n## 簡單介紹\n\n承襲我一貫的信仰，7z 也是開源的，並且讓我喜歡的一點是，7z 擁有極高的壓縮比，往往可以把一個很大的文件壓縮到很小。\n\n### 命令行界面\n\n不清楚 7z 是否有圖形界面，但我覺得命令行界面已經足夠了，畢竟我是個能用鍵盤就絕不用滑鼠的人。當然主要還是懶。\n\n通過 `7z` 命令直接就可以呼出幫助文檔，參數眾多，可見功能強大。\n\n### 支持格式\n\n壓縮／解壓縮支持：7z, XZ, BZIP2, GZIP, TAR, ZIP, WIM  \n僅解壓縮：ARJ, CAB, CHM, CPIO, CramFS, DEB, DMG, FAT, HFS, ISO, LZH, LZMA, MBR, MSI, NSIS, NTFS, RAR, RPM, SquashFS, UDF, VHD, WIM, XAR, Z\n\n### 加密算法\n\n7z 在壓縮時可以指定密碼，密碼使用 AES-256 算法加密。 \n\n## 壓縮\n\n```sh\n$ 7z a test.7z test.txt -p123     // add test.txt into test.7z\n```\n\n**參數**  \n\n* `a`：添加文件\n* `-p`：指定密鑰\n\n## 解壓縮\n\n```sh\n$ 7z e test.7z \n$ 7z x test.7z -o~/test\n```\n\n**參數**\n\n* `e`：釋放文件\n* `x`：釋放文件（保留全路徑）\n* `-o`：釋放路徑\n\n## 其他常用命令\n\n7z 能做的不僅僅是壓縮和解壓縮而已。\n\n**列出壓縮文件內容**\n\n```sh\n$ 7z l test.7z\n```\n\n**刪除文件**\n\n```sh\n$ 7z d test.7z test.txt\n```\n\n即從 test.7z 中刪除 test.txt 文件。  \n如需刪除文件夾可以加上 `-r` 遞歸參數。\n\n**測試完整性**\n\n```sh\n$ 7z t test.7z test.txt\n```\n\n檢測 test.7z 中是否包含 test.txt。  \n同時也支持 `-r` 遞歸參數。\n\n## 附錄：7z 幫助文檔參考\n\n**Usage**  \n\n 7z <command> [<switches>...] <archive_name> [<file_names>...] [<@listfiles...>]\n\n**Commands**\n\n  `a` : Add files to archive   添加文件  \n  `b` : Benchmark\n  `d` : Delete files from archive   刪除文件  \n  `e` : Extract files from archive (without using directory names)   釋放文件（不保留路徑）  \n  `h` : Calculate hash values for files   計算文件 Hash 值  \n  `i` : Show information about supported formats   輸出支持格式的詳細信息\n  `l` : List contents of archive   列出文件內容  \n  `rn` : Rename files in archive   移除文件  \n  `t` : Test integrity of archive   檢查完整性  \n  `u` : Update files to archive   更新文件   \n  `x` : eXtract files with full paths   釋放文件（保留路徑）\n\n**Switches**\n \n  `--` : Stop switches parsing   \n  `-ai[r[-|0]]{@listfile|!wildcard}` : Include archives   包含文件  \n  `-ax[r[-|0]]{@listfile|!wildcard}` : eXclude archives   釋放文件  \n  `-ao{a|s|t|u}` : set Overwrite mode  \n  `-an` : disable archive_name field  \n  `-bb[0-3]` : set output log level   \n  `-bd` : disable progress indicator  \n  `-bs{o|e|p}{0|1|2}` : set output stream for output/error/progress line  \n  `-bt` : show execution time statistics  \n  `-i[r[-|0]]{@listfile|!wildcard}` : Include filenames  \n  `-m{Parameters}` : set compression Method  \n  `-mmt[N]` : set number of CPU threads  \n  `-o{Directory}` : set Output directory   設定輸出路徑  \n  `-p{Password}` : set Password   設置密鑰  \n  `-r[-|0]` : Recurse subdirectories  \n  `-sa{a|e|s}` : set Archive name mode  \n  `-scc{UTF-8|WIN|DOS}` : set charset for for console input/output  \n  `-scs{UTF-8|UTF-16LE|UTF-16BE|WIN|DOS|{id}}` : set charset for list files  \n  `-scrc[CRC32|CRC64|SHA1|SHA256|*]` : set hash function for x, e, h commands  \n  `-sdel` : delete files after compression  \n  `-seml[.]` : send archive by email   郵件發送壓縮文件  \n  `-sfx[{name}]` : Create SFX archive   創建 SFX 文件  \n  `-si[{name}]` : read data from stdin  \n  `-slp` : set Large Pages mode  \n  `-slt` : show technical information for l (List) command  \n  `-snh` : store hard links as links  \n  `-snl` : store symbolic links as links  \n  `-sni` : store NT security information  \n  `-sns[-]` : store NTFS alternate streams  \n  `-so` : write data to stdout  \n  `-spd` : disable wildcard matching for file names  \n  `-spe` : eliminate duplication of root folder for extract command  \n  `-spf` : use fully qualified file paths  \n  `-ssc[-]` : set sensitive case mode  \n  `-ssw` : compress shared files  \n  `-stl` : set archive timestamp from the most recently modified file  \n  `-stm{HexMask}` : set CPU thread affinity mask (hexadecimal number)  \n  `-stx{Type}` : exclude archive type  \n  `-t{Type}` : Set type of archive   設置壓縮文件類型    \n  `-u[-][p#][q#][r#][x#][y#][z#][!newArchiveName]` : Update options   更新文件選項    \n  `-v{Size}[b|k|m|g]` : Create volumes   創建卷    \n  `-w[{path}]` : assign Work directory. Empty path means a temporary directory   指定工作目錄，空路徑即為臨時目錄   \n  `-x[r[-|0]]]{@listfile|!wildcard}` : eXclude filenames   釋放文件名稱   \n  `-y` : assume Yes on all queries   所有詢問都設置回答 yes\n\n\n\n"
		},
		{
			"post_id": 10,
			"title": "# Chmod Command Line",
			"date_published": 1462737544.512,
			"body": "一開始做運維和系統管理的時候，就會遇到 `chmod` 命令，然而剛開始修改文件權限的時候總是要去查詢權限代碼（就是那幾個數字），後來發現不能這麼傻下去，不明白原理實在太痛苦，一定有更好的辦法，然後我就仔細的研究了一下 `chmod` 這個命令，為了以後查詢起來方便（已經忘了好幾次了），現在做一個總結。\n\n---\n\n## 分組權限\n\n在 Linux 中，權限是分組賦予的，一般有三組：\n\n* 所有者權限：文件創始者，與 root 權限相當，擁有對文件的讀、寫和執行權\n* 同組權限：所有者所在的用戶組其他成員的權限\n* 其他用戶權限：除所有者及其所在用戶組成員的其他用戶\n\n在運行 `ls -l` 命令後所對應的三組權限說明，即對應上面這三組用戶。\n\n## 訪問權限\n\nLinux 系統中訪問權限有三種，分別是可讀、可寫、可運營權限。\n\n* `r`：可讀權限，讀取文件或文件夾中的內容\n* `w`：可寫權限，對文件進行編輯修改，寫入內容到目錄中\n* `x`：可執行權限，將文件作為執行文件執行，進入目錄並以目錄名稱作為路徑名訪問它所包含的子目錄和文件\n\n**說明**\n\n1. 對文件擁有 `w` 權限不可刪除文件，必須對文件所在目錄擁有 `w` 權限\n2. 對目錄擁有 `w` 權限不能進入目錄，必須擁有 `x` 執行權限\n3. 對目錄有 `x` 執行權，必須知道目錄名稱同時擁有 `r` 可讀權才能訪問目錄\n4. 對目錄同時擁有 `rx` 權限才能使用 `ls` 命令列出目錄下文件\n5. 對目錄擁有 `w` 可寫權限，可以對目錄下所有文件以及子目錄進行創建、修改、刪除\n\n## 字母設定法\n\n```sh\n$ chmod [option] [mode] file\n```\n\n### Options\n\n  `-c, --changes`          like verbose but report only when a change is made   在文件權限更改後再顯示更改動作  \n  `-f, --silent, --quiet`  suppress most error messages   權限無法更改也不顯示錯誤信息  \n  `-v, --verbose`          output a diagnostic for every file processed   輸出詳細信息   \n      `--no-preserve-root`  do not treat '/' specially (the default)  \n      `--preserve-root`    fail to operate recursively on '/'  \n      `--reference=RFILE`  use RFILE's mode instead of MODE values  \n  `-R, --recursive`        change files and directories recursively   遞歸權限變更命令  \n\n### 對象\n  \n  `u`：user，文件或目錄所有者  \n  `g`：group，所有者同組用戶  \n  `o`：others，其他用戶  \n  `a`：all，所有用戶，默認對象\n  \n### 操作符號\n  \n  `+`：增加權限  \n  `-`：取消權限  \n  `=`：增加某項權限後取消其他權限\n  \n### 權限\n\n`r` ：可读  \n`w` ：可写  \n`x` ：可执行  \n`X` ：只有目标文件对某些用户是可执行的或该目标文件是目录时才追加x 属性   \n`s` ：在文件执行时把进程的属主或组ID置为该文件的文件属主。方式“u＋s”设置文件的用户ID位，“g＋s”设置组ID位  \n`t` ：保存程序的文本到交换设备上  \n`u` ：与文件属主拥有一样的权限  \n`g` ：与和文件属主同组的用户拥有一样的权限  \n`o` ：与其他用户拥有一样的权限  \n\n## 數字設定法\n\n這裡的數字指的是一個三位數，這三位數中每一個數字分別對應 User，Group，Others 三組用戶。\n\n其中 `r` 為 4 , `w` 為 2 , `x` 為 1 , `-` 為 0。\n\n  \n  \n\n\n"
		},
		{
			"post_id": 9,
			"title": "# OSI Model  開放式系統互連通信參考模型",
			"date_published": 1462737453.5,
			"body": "OSI Model 全稱 Open System Interconnection Reference Model，將計算機網絡體系結構劃分為七層。\n\n---\n\n```raw\n                                                       OSI Model\n\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Application layer:                                                                                     '\n'                                                                                                        '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n' |  HTTP API Server  |   ... |          SSH.NET           |   ... | SMTP web API |   ... | HTML Class | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n'                                                                                                        '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Presentation layer:                                                                                                   '\n'                                                                                                                       '\n' +-------------------+       +----------------------------+       +--------------+       +------------+       +------+ '\n' |        CSS        |   ... |            GIF             |   ... |     HTML     |   ... |    XML     |   ... | JSON | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+       +------+ '\n'                                                                                                                       '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Session layer:                                                                                         '\n'                                                                                                        '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n' |       HTTP        |   ... |           HTTPS            |   ... |     SSH      |   ... |   Telnet   | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n'                                                                                                        '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Transport layer:                                           '\n'                                                            '\n' +-------------------+       +----------------------------+ '\n' |       PPTP        |   ... |            TCP             | '\n' +-------------------+       +----------------------------+ '\n'                                                            '\n'                         - - - - - - - - - - - - - - - - - -+\n'   :                   '\n'   :                   '\n'   :                   '\n' +-------------------+ '\n' |      TLS/SSL      | '\n' +-------------------+ '\n'                       '\n+ - - - - - - - - - - - +\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Network layer:                                             '\n'                                                            '\n' +-------------------+       +----------------------------+ '\n' |       IPv4        |   ... |            IPv6            | '\n' +-------------------+       +----------------------------+ '\n'                                                            '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Data Link layer:                                                                  '\n'                                                                                   '\n' +-------------------+       +----------------------------+       +--------------+ '\n' |       L2TP        |   ... |           PPPoE            |   ... |    Wi-Fi     | '\n' +-------------------+       +----------------------------+       +--------------+ '\n'                                                                                   '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Physical layer:                                                                                        '\n'                                                                                                        '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n' |     Ethernet      |   ... |           Modem            |   ... |     DSL      |   ... |    USB     | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n'                                                                                                        '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Host layers:                                                                                           '\n'                                                                                                        '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n' |    Application    |   ... |        Presentation        |   ... |   Session    |   ... | Transport  | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n'                                                                                                        '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Media layers:                                                                     '\n'                                                                                   '\n' +-------------------+       +----------------------------+       +--------------+ '\n' |      Network      |   ... |         Data link          |   ... |   Physical   | '\n' +-------------------+       +----------------------------+       +--------------+ '\n'                                                                                   '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n```\n\n* 7 應用層 Application layer：網絡進程到應用程序\n* 6 表示層Presentation layer：數據表示形式，加密和解密，把機器相關的數據轉換成獨立於機器的數據\n* 5 會話層 Session layer：主機間通訊，管理應用程序之間的會話（已廢棄）\n* 4 傳輸層 Transport layer：在網絡的各個節點之間可靠的分發數據包（已廢棄）\n* 3 網絡層 Network layer：在網絡的各個節點之間進行地址分配、路由和（不一定可靠的）分發報文\n* 2 數據鏈路層 Data Link layer：一個可靠的點對點數據直鏈\n* 1 物理層 Physical layer：一個（不一定可靠）點對點的數據直鏈\n\n這幾層模型間的關係又可以劃分為：\n\n```raw\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Host layers:                                                                                           '\n'                                                                                                        '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n' |    Application    |   ... |        Presentation        |   ... |   Session    |   ... | Transport  | '\n' +-------------------+       +----------------------------+       +--------------+       +------------+ '\n'                                                                                                        '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Media layers:                                                                     '\n'                                                                                   '\n' +-------------------+       +----------------------------+       +--------------+ '\n' |      Network      |   ... |         Data link          |   ... |   Physical   | '\n' +-------------------+       +----------------------------+       +--------------+ '\n'                                                                                   '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n```\n\n\n\n\n"
		},
		{
			"post_id": 8,
			"title": "# Disk Utility Tool Command Line",
			"date_published": 1462737288.514,
			"body": "之前安裝 Ubuntu 的時候提到了 `dd` 命令，最近 Ubuntu 16.04 又爆出來引入了多款趙國生產的證書，因此我準備放棄虛擬機的 Kali，直接把 Ubuntu 換成 Kali，這時候就要發揮 `dd` 命令的作用了。\n\n然而這篇我不準備寫 `dd` 命令，而是準備總結一下 OS X 系統下硬盤管理命令——Disk Utility。\n\n---\n\n## 簡單介紹\n\n我在 Ubuntu 上試了一下，`apt-get` 並不能查到這個命令，而 OS X 系統下查了查 `diskutil` 命令類型，顯示說明它並不是系統原生命令，而是 OS X 特有的硬盤管理工具，配合有圖形界面，因此這個命令很有可能只在 OS X 系統下才有效。\n\n```sh\n$ diskutil -h\n```\n\n即可呼出命令幫助。\n\n## 基礎命令行\n\n下面是一些 `diskutil` 的常用命令行。\n\n```sh\n$ diskutil list     // list all disks\n$ diskutil info     // show information about a specific disk\n$ diskutil mount     // mount a volume\n$ diskutil umout     // unmount a volume\n$ diskutil eject     // eject a disk\n```\n\n## 其他常用命令\n\n下面是一些或許會用到的命令行。\n\n```sh\n$ diskutil rename     // rename a volume\n$ diskutil eraseDisk     // erase a disk\n$ diskutil eraseVolume     // erase a volume\n$ diskutil partitionDisk    // partition a disk, remove all volume\n$ diskutil resizeVolume     // increase or decrease a volume's size\n```\n\n## 附錄：Dist Utility -h\n\nUtility to manage local disks and volumes  \nMost options require root access to the device\n\nUsage:  diskutil [quiet] <verb> <options>, where <verb> is as follows:\n\n     list                  (List the partitions of a disk)  \n     info[rmation]         (Get information on a specific disk or partition)  \n     listFilesystems       (List file systems available for formatting)  \n     activity              (Continuous log of system-wide disk arbitration)  \n\n     u[n]mount             (Unmount a single volume)  \n     unmountDisk           (Unmount an entire disk (all volumes))   卸載硬盤  \n     eject                 (Eject a disk)  \n     mount                 (Mount a single volume)  \n     mountDisk             (Mount an entire disk (all mountable volumes))   掛載硬盤  \n\n     enableJournal         (Enable HFS+ journaling on a mounted HFS+ volume)  \n     disableJournal        (Disable HFS+ journaling on a mounted HFS+ volume)  \n     moveJournal           (Move the HFS+ journal onto another volume)  \n     enableOwnership       (Treat as exact User/Group IDs for a mounted volume)  \n     disableOwnership      (Ignore on-disk User/Group IDs for a mounted volume)  \n\n     rename[Volume]        (Rename a volume)   重命名卷\n\n     verifyVolume          (Verify the file system data structures of a volume)   驗證卷內文件數據結構    \n     repairVolume          (Repair the file system data structures of a volume)   恢復卷內文件數據結構\n\n     verifyDisk            (Verify the components of a partition map of a disk)   驗證硬盤分割區結構  \n     repairDisk            (Repair the components of a partition map of a disk)   恢復硬盤分割區結構\n\n     eraseDisk             (Erase an existing disk, removing all volumes)    格式化硬盤  \n     eraseVolume           (Erase an existing volume)   格式化卷   \n     reformat              (Erase an existing volume with same name and type)     \n     eraseOptical          (Erase optical media (CD/RW, DVD/RW, etc.))   格式化特定媒體文件  \n     zeroDisk              (Erase a disk, writing zeros to the media)  \n     randomDisk            (Erase a disk, writing random data to the media)  \n     secureErase           (Securely erase a disk or freespace on a volume)   安全格式化硬盤\n\n     partitionDisk         ((re)Partition a disk, removing all volumes)   重新分割硬盤，刪除所有卷  \n     resizeVolume          (Resize a volume, increasing or decreasing its size)   重新設置卷大小  \n     splitPartition        (Split an existing partition into two or more)  \n     mergePartitions       (Combine two or more existing partitions into one)  \n\n     appleRAID <verb>      (Perform additional verbs related to AppleRAID)  \n     coreStorage <verb>    (Perform additional verbs related to CoreStorage)  \n\ndiskutil <verb> with no options will provide help on that verb\n"
		},
		{
			"post_id": 7,
			"title": "# Python 算法練習",
			"date_published": 1462737271.266,
			"body": "\n\n\n匯總一下學習 Python 時的算法練習筆記。\n\n> 有兩種方式構建軟件設計：一種是把軟件做得很簡單以至於明顯找不到缺陷；另一種是把它做得很複雜以至於找不到明顯的缺陷。\n  — — C.A.R. Hoare\n  \n> 獲得人生中的成功需要的專注與堅持不懈多過天才與機會。\n  — — C.W. Wendte\n\n---\n  \n## 題頭\n在Python中，題頭文件這麼寫：\n\n```py\n#!/usr/bin/python\n# Filename: hello.py\n\nprint(\"Hello World!\")\n```\n\n它被稱為組織行。\n\n## 可執行的 Python 程序\n\n給 Python 程序執行的許可：\n\n```sh\n$ chmod a+x hello.py\n$ ./hello.py\n```\n\n因為源文件中添加了組織行指定了解釋器，因此無論將文件名及擴展名改成什麼，都不會影響執行。\n\n### PATH 環境設置\n\n在設置 PATH 之前，命令只能在其所在目錄執行，設置後，可以全局執行。\n\n```sh\n$ echo $PATH\n/opt/mono/bin/:/usr/local/bin:/usr/bin:/usr/X11R6/bin:/home/swaroop/bin\n$ cp hello.py /home/swaroop/bin/hello\n$ hello\n```\n\n其中`swaroop`是系統用戶名，在配置文件中使用`PATH=$PATH:/home/swaroop/mydir`使命令可以全局使用。\n\n## 獲取幫助\n\nPython 自身帶有的`Python Doc`非常適合用來自我學習，配置`Python Doc`環境變量使用`env`命令：\n\n```sh\n$ env PYTHONDOCS=/usr/share/doc/python-docs-2.3.4/html/ python\n```\n\n之後在 Python 交互環境中就可以直接食用`help`命令來獲取幫助。\n\n```sh\n>>> help('sys')\n```\n\n`help`中的內容一定要帶有引號。\n\n## 基本概念\n\n### 字面意義上的常量\n\n所有從字面上就可以理解其意義的符號被稱為字面意義上的常量。\n\n```raw\n5 123 'hello world' 1.45\n```\n\n這些固定不變的值都是字面意義上的常量。\n\n### 數\n\n* 整數：2\n* 長整數：444594884\n* 浮點數：3.14\n* 複數：(1+2j)\n\n### 字符串\n\n字符的序列。\n\n* 使用單引號：所有的空白都會照原樣保留。\n* 使用雙引號：同單引號。\n* 使用三引號：提示一個多行字符串，在其中可以自由地使用單引號或雙引號。\n* 轉義符：`\\`用來轉義字符，行末的`\\`表示字符串在下一行繼續，而非開始一個新行。\n* 自然字符串：字符串前綴`r`或`R`表示字符串內的字符不需要任何轉義，所有內容都直接輸出。\n* Unicode 字符串：字符串前綴`u`或`U`表示字符串內可以使用 Unicode 文本，如中文。\n字符串是不可變的。\n* 級連字符串：如果將兩個字符串按字面意義相鄰放置，Python 會將它們自動級連，如`what is ` `your name` 會自動轉為`what is your name`。\n\n### 變量\n\n既可以儲存信息，又可以操作他們。\n\n**標識符的命名**\n\n* 第一個字符必須是字母或下劃線\n* 其他字符由大小寫字母、數字、下劃線組成\n* 大小寫敏感\n* 不可使用連結符`-`\n\n**數據類型**\n\n變量可以處理不同類型的值，稱為數據類型。  \n基本類型是數和字符串，也可以用類來創造自己的類型。\n\n### 對象\n\n在程序中用到的任何東西都稱為`對象` 。\n\n使用變量時只需要給他們賦值，不需要聲明或定義數據類型。\n\n### 邏輯行與物理行\n\n邏輯行：編寫程序時所看見的，Python 假定每個物理行對應一個邏輯行。\n\n當在一個物理行中寫多個邏輯行時，分號表示一個邏輯行的結束。  \n當在多個物理行中寫同一個邏輯行時，`\\`表示明確的行連接，`()`，`[]`，`{}`表示暗示的行連接。\n\n### 縮進\n\n邏輯行前的縮進用來決定語句的分組，同一層次的語句必須有相同的縮進，錯誤的縮進會引發錯誤。  \n混合使用制表符或空格的縮進也會引發錯誤。\n\n## 埃氏篩法篩選素數\n\n第一種寫法：定義無限數列\n\n```py\n# !/usr/bin/python3\n# Filename: Primes\ndef _odd_list():\n    n = 1\n    while True:\n        n += 2\n        yield n\ndef _not_div(n):\n    return lambda x : x % n > 0\ndef primes():\n    yield 2\n    it = _odd_list()\n    while True:\n        n = next(it)\n        yield n\n        it = filter(_not_div(n), it)\nfor n in primes():\n    if n < 100:\n        print(n)\n    else:\n        break\n```\n\n第二種寫法：定義有限數列\n\n```py\n# !/usr/bin/python3\n# Filename: Primes\ndef _not_div(n):\n    lambda x : x % n > 0\nprint(2)\nn = 3\nit = filter(_not_div(n), range(3,1000,2))\nwhile True:\n    n = next(it)\n    print(n)    \n    it = filter(_not_div(n), it)\n```\n\n## 篩選回數\n\n回數：從左到右和從右到左是一個數，如`12321`。\n\n第一種寫法：定義無限序列\n\n```py\n# !/usr/bin/python3\n# Filename: Palindrome\ndef _odd_list():\n    n = 10\n    while True:\n        n += 1\n        yield n\ndef _filter_():\n    return lambda x : str(x) == str(x)[::-1]\ndef palindrome():\n    it = filter(_filter(), _odd_list())\n    while True:\n        n = next(it)\n        yiled n\nfor n in palindrome():\n    if n < 1000:\n        print(n)\n    else:\n        break\n```\n\n第二種寫法：定義有限序列\n\n```py\n# !/usr/bin/python3\n# Filename: Palindrome\ndef _palindrome_()\n    return lambda x : str(x) == str(x)[::-1]\nit = filter(_palindrome_(), range(10,1000))\nwhile True:\n    n = next(it)\n    print(n)\n```\n\n### 兩種寫法\n\n當定義有限序列時必須在最後輸出時加以限制，當定義無限序列時，會以無法定義`next(it)`結束。\n\n## 排序函數\n\n使用`sorted`來進行排序。\n\n```py\n# !/usr/bin/python\n# Filename: Sorted\nL = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]\ndef _by_name(t):\n    return t[0].lower()\ndef _by_score(t):\n    return t[1]\nL1 = sorted(L, key=_by_name)\nL2 = sorted(L, key=_by_score, reverse=True)\nprint(L1, L2)\n```\n\n簡寫：\n\n```py\n# !/usr/bin/python3\n# Filename: Sorted\nL = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]\nL1 = sorted(L, lambda x : x[0].lower())\nL2 = sorted(L, lambda x : x[1], reverse=True)\nprint(L1, L2)\n```\n\n## 為函數調用輸出log\n\n在函數調用前以及調用後都輸出 log：\n\n```py\n# !/usr/bin/python3\n# Filename: log\nimport functools\ndef log(begin, end):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s' % (begin, func.__name__))\n            func()\n            print('%s' % end)\n        return wrapper\n    return decorator\n@log('being called', 'end called')\ndef now():\n    print('something')\nnow()\n```\n\n使函數既支持定義 log ，又支持無定義 log：\n\n```py\n# !/usr/bin/python3\n# Filename: log\nimport functools\ndef _not_callable_(text):\n    def decorater(func):\n        @functools.wraps(func)\n        def wrapper(*args, *kw):\n            print('%s %s', (text, func.__name__)\n        return wrapper\n    return decotrator\ndef _callable_(func):\n    @functools.wraps(func)\n    def wrapper(*args, *kw):\n        print('calling: %s', func.__name__)\n    return wrapper\ndef log(func):\n    if callable(func):\n        return _callable_(func)\n    else:\n        return _not_callable_(func)\n@log\ndef first():\n    print('something')\n@log('being called')\ndef second():\n    print('other things')\nfirst()\nsecond()\n```\n\n## 內建模塊\n\n書寫格式：\n\n```py\n# !/usr/bin/env python3\n# -*- coding: utf-8 -*-\n' some commits '\n__author__ = 'Benjamin'\nimport sys\ndef test():\n    args = sys.argv\n    if len(args) == 1:\n        print('Hello World')\n    elif len(args) == 2:\n        print('Hello %s' % args[1])\n    else:\n        print('Wrong input')\nif __name__ == '__main__':\n    test()\n```\n\n其中前兩行為題頭部分，第四行為模塊的註釋，第六行是模塊作者名稱，接下來是模塊內容。\n最後兩行保證此模塊只能在命令行中運行，而不適用於交互環境。\n\n## 使用第三方庫製作圖片縮略圖\n\n庫：PIL\n\n```py\n# !/usr/bin/env python3\n# -*- coding utf-8 -*-\n# Filename: Thumbnail\nfrom PIL import Image \nimport sys\nim = Image.open('%s', argv[1])\nprint(im.format, im.size, im.mode)\nim.thumbnail((500, 300))\nim.save('thumbnail.png', 'PNG')\n```\n\n## 利用裝飾器 @property 來構造不可變更的函數子類\n\n```py\n# !/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Filename: Property\n\nclass Screen(object):\n    \n    @property\n    def width(self):\n        return self._width\n    \n    @width.setter\n    def width(self, value):\n        self._width = value\n\n    @property\n    def height(self):\n        return self._height\n\n    @height.setter\n    def height(self, value):\n        self._height = value\n\n    @property\n    def resolution(self):\n        return self._width * self._height\n\ns = Screen()\ns.width = 1024\ns.height = 768\nprint(s.resolution)\n```\n\n## 利用類來輸出斐波那契數列 \n\n```py\n# !/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Filename: Fib\n\nclass Fib(object):\n    def __init__(self):\n        self.a , self.b = 0, 1\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.a , self.b = self.b , self.a + self.b\n        if a > 1000:\n            raise StopIteration()\n        return self.a\n\nfor n in Fib():\n    print(n)\n```\n\n"
		},
		{
			"post_id": 6,
			"title": "# TCP 三次握手與四次握手",
			"date_published": 1462737186.322,
			"body": "TCP 連結中進行連結需要進行三次握手，斷開連接時需要四次握手。\n\n---\n\n## TCP Three-way Handshake\n\n* Client 端發出請求連結的 SYN 同步信號\n* Server 端授予連結，發送 SYN 同步信號，並且回覆 ACK 報文\n* Client 端回覆 ACK 報文，確認連結\n\n```raw\n              TCP Three-way Handshake\n\n           ACK = Y + 1 Seq = Z\n  +-----------------------------------------+\n  |                                         v\n+--------+  SYN = 1 Seq = X               +--------+\n| Client | -----------------------------> | Server |\n+--------+                                +--------+\n  ^        SYN = 1 ACK = X + 1 Seq = Y      |\n  +-----------------------------------------+\n```\n\n### 半連結狀態 Half-open Connect\n\n在 TCP 三次握手中，Server 端發送 SYN 信號後、接收 Client 端確認連結報文前，TCP 連結處於半連結（Half-open Connect）狀態，此時服務器處於 Syn_RECV 狀態，當收到 Client 端發出的 ACK 報文後，服務器進入 ESTABLISHED 狀態。\n\n### SYN 攻擊\n\n在 TCP 半連結狀態時，攻擊 Client 端，在短時間內偽造大量不存在的IP地址，向 Server 端不端發送 SYN 同步請求，Server 端回覆 ACK 報文以及 SYN 信號授予連結，但由於目標 IP 地址不存在，沒有確認連結的回覆，Server 端需要不端發送信號直至 Timeout，偽造的 IP 地址發送的 SYN 請求信號長時間佔用未連結隊列，正常的 SYN 請求信號被丟棄，這種服務器攻擊被稱為 **SYN 攻擊**。\n\nSYN 攻擊屬於一種典型的 DDoS 攻擊，如果服務器連結列表上出現大量的半連結狀態隨機 IP 地址，則很有可能受到了 SYN 攻擊。\n\n對於 SYN 攻擊可採用修改 TCP 協議來進行防範，包括 SynAttackProtect 保護機制，SYN cookies 技術，增加最大半連結以及縮短超時時間等。\n\n## TCP Four-way Handshake\n\n* Client 端發送 Fin 信號以及 ACK 報文要求斷開連接\n* Server 端收到信號並發送 ACK 報文回執，進行停止連結準備\n* Server 端完成準備，發送 Fin 信號以及 ACK 報文後斷開連接\n* Client 端發送 ACK 報文，無回覆，Timeout 斷開連接。\n\n```raw\n\n                             TCP Four-way Handshake\n\n                                       ACK = Y Seq = X\n                              +-------------------------------------+\n                              |                                     v\n                            +--------+  Fin = 1 ACK = Z Seq = X   +--------+\n  +-----------------------> | Client | -------------------------> | Server | -+\n  |                         +--------+                            +--------+  |\n  |                           ^        ACK = X + 1 Seq = Z          |         |\n  | Fin = 1 ACK = X Seq = Y   +-------------------------------------+         |\n  |                                                                           |\n  |                                                                           |\n  +---------------------------------------------------------------------------+\n```\n\n在 TCP 四次握手中，無論是 Client 端還是 Server 端，都可以率先請求斷開連接。\n\n\n"
		},
		{
			"post_id": 5,
			"title": "# Zips Command Line",
			"date_published": 1462737053.072,
			"body": "之前整理過 7z 的命令行，這裡再集合整理一下 Unix 系統下其他的壓縮歸檔文件命令行。\n\n---\n\n## tar\n\n`tar` 命令在 Unix 系統下非常常用，它有多個壓縮率不同的版本，常見的有 `tar.xz` 和 `tar.gz`，前者的壓縮率更高，但存在兼容性問題。\n\n單純的 `tar` 後綴代表未被壓縮的 `tar` 文件，已壓縮的 `tar` 文件會再追加一個擴展名，如：\n\n* `.tar.gz` 縮寫為 `.tgz`，代表經過 `gzip` 壓縮後的 `tar` 文件\n* `.tbz` 與 `.tb2` 為 `.tar.bz2` 縮寫，代表經過 `bzip2` 壓縮的 `tar` 文件\n* `.tar.Z` 縮寫為 `.taz`\n* `.tar.lzma` 縮寫為 `.tlz`\n* `.tar.xz` 縮寫為 `.taz`，代表經過 `xz` 壓縮的 `tar` 文件\n\n### 參數\n\n* `-c, --create`：創建新的 tar 文件\n* `-x, --extract, --get`：解開 tar 文件\n* `-t, --list`：列出 tar 文件內容\n* `-r, --append`：附加新文件到 tar 文件中\n* `-u, --update`：更新 tar 文件\n* `-A, --catenate, --concatenate`：將 tar 文件作為一個整體追加到另一個 tar 文件中\n* `-d, --diff, --compare`：將文件系統中的文件與 tar 文件中的文件進行比較\n* `--delete`：刪除 tar 文件中的文件（不可用於已保存在磁帶上的 tar 文件）\n\n### Options\n\n* `-v, --verbose`：列出詳細信息，使用一個 `v` 僅列出文件名，使用兩個 `v` 列出文件詳細信息\n* `-k, --keep-old-files`：不刪除文件系統上已有文件\n* `-f, --file`：指定要處理的文件名，可使用 `-` 代表標準輸出或標準輸入\n* `-P, --absolute-names`：使用絕對路徑\n* `-j, --bzip2`：調用 bzip2 進行壓縮或解壓縮\n* `-J, --xz, --lzma`：調用 XZ Utils 執行壓縮或解壓縮\n* `-z, --gzip, --gunzip, --ungzip`：調用 gzip 進行壓縮或解壓縮\n* `-Z, --compress, --uncompress`：調用 compress 進行壓縮或解壓縮\n\n## gzip\n\n`gzip` 代表 GNU zip，基礎是 DEFLATE。\n\n文件格式：\n\n* 10 字節的頭，包含幻數、版本號和時間戳\n* 可選的擴展頭，如原文件名\n* 文件體，包括 DEFLATE 壓縮的數據\n* 8 字節的尾註，包括 CRC-32 較驗和以及未壓縮的原始數據長度\n\n通常情況下，gzip 僅用來壓縮單個文件。多個文件壓縮歸檔時通常先將其合併成一個 tar 文檔，然後調用 gzip 進行壓縮。\n\nZIP 雖然也使用 DEFLATE 算法，並且可移植性更好，不需要 tar 進行歸檔，但是 ZIP 對每個文件進行單獨壓縮而不利用文件間的冗余信息，因此 ZIP 的壓縮率要低於 tar 壓縮包。\n\n### 參數\n\n* `-c, --stdout`：解壓縮內容輸出到標準輸出，原文件保持不變\n* `-d, --decompress`：解壓縮\n* `-f, --force`：強制覆蓋舊文件\n* `-l, --list`：列出壓縮包內儲存的原始文件信息\n* `-n, --no-name`：壓縮時不保存原始文件的文件名和時間戳，解壓縮時不恢復原始文件的文件名和時間戳（解壓縮得到的文件是壓縮包的文件名）\n* `-N, --name`：壓縮時保存原始文件的文件名和時間戳，解壓縮時恢復原始文件名和時間戳\n* `-q, --quiet`：抑制所有警告信息\n* `-r, --recursive`：遞歸\n* `-t, --test`：測試壓縮文件完整性\n* `-v, --verbose`：冗余模式（顯示每一步執行內容）\n* `-1, -2, ..., -9`：壓縮率依次增大，速度依次減慢，默認為 `-6`\n\n## bzip2\n\n基於數據塊排序算法，相對於 gzip，可以生成相當小的壓縮文件，但代價是 4 倍的內存和處理器時間消耗。但按照絕對壓縮效率來講，bzip2 不如 7z 和 RAR 格式。\n\nbzip2 和 gzip 類似，只是一個數據壓縮工具，而不是歸檔工具，當進行多個文件壓縮時需要借助 tar 進行歸檔。\n\n常用命令：\n\n```sh\n$ bzip2 file        // 壓縮文件\n$ bzip2 -d file.bz2         // 解壓縮文件\n```\n\n其餘命令行參數同 gzip 類似。\n\n## xz\n \n 與 gzip 和 bzip2 一樣，通常作為一種歸檔文件的自身壓縮格式。\n \n xz 層有過一個名為 pxz 的分支，提供多線程壓縮功能，後來 xz 自身直接提供多線程壓縮功能。\n \n 7-Zip 以及 RAR 均支持 xz 壓縮格式。\n \n xz 通常出現在系統源文件的壓縮中，也是 Linux 內核的格式，2013 年開始 xz 正式做為發行內核源代碼的默認格式。\n"
		},
		{
			"post_id": 4,
			"title": "# Draw ASCII with Vim",
			"date_published": 1462736590,
			"body": "其實要繪製 ASCII Art 有很多種辦法，包括現在還有在線繪製，只要動動鼠標就可以畫的很好。但對於我這個骨灰級 Vim 使用者來講，當然要找找怎麼樣才能在 Vim 裡輸出 ASCII 的方法。\n\n---\n\n## Graph::Easy\n\n這是一個 Perl 依賴模塊，使用方法簡單，可以輸出多種圖片格式，支持 Dot 語言以及 Graphviz。\n\n語法：\n\n```raw\ngraph {\n    label: TCP Three-way Handshack\n}\n\n[ Client ] -- SYN = 1 Seq = X --> [ Server ] \n[ Server ] .. SYN = 1 ACK = X + 1 Seq = Y ..> [ Client ]\n[ Client ] == ACK = Y + 1 Seq = Z ==> [ Server ]\n```\n\n上面的語句經過渲染後將會得到 TCP 三次握手的示意圖：\n\n```raw\n              TCP Three-way Handshake\n\n           ACK = Y + 1 Seq = Z\n  #=========================================#\n  H                                         v\n+--------+  SYN = 1 Seq = X               +--------+\n| Client | -----------------------------> | Server |\n+--------+                                +--------+\n  ^        SYN = 1 ACK = X + 1 Seq = Y      :\n  ...........................................\n```\n\n### 常用命令\n\n```raw\n    graph-easy [options] [inputfile [outputfile]]\n\n            echo \"[ Bonn ] - car -> [ Berlin ]\" | graph-easy    // 渲染命令\n            graph-easy --input=graph.dot --as_ascii     // 將 Dot 文件渲染為 ASCII 輸出\n            graph-easy --html --output=mygraph.html graph.txt       // 輸出 HTML 文件\n            graph-easy graph.txt graph.svg      // 輸出 SVG 文件\n            graph-easy graph.txt --as_dot | dot -Tpng -o graph.png      // 將文件轉化為 Dot 格式後使用 Dot 渲染為 png 圖片\n            graph-easy graph.txt --png      // 渲染為 png 格式\n            graph-easy graph.vcg --dot      \n            graph-easy graph.dot --gdl      \n            graph-easy graph.dot --graphml      \n```\n\n### 參數\n\n* `--input`：指定輸入文件。eg. graph-easy --input=input.txt  \n* `--output`：指定輸出文件。eg. graph-easy --output=output.txt input.txt  \n* `--as`：指定輸出文件格式。  \neg. `$ graph-easy --as=ascii input.txt`   \n或 `$ graph-easy --ascii`\n* `--from`：指定輸入文件格式。  \neg. `$ graph-easy --from=dot input output.txt`\n或 `$ graph-easy --from_dot input output.txt`\n\n### 支持輸入格式\n\nGraph::Easy 可以指定輸入文件格式，支持的格式有：\n\n```raw\ngraphviz    the DOT language\n                  txt         Graph::Easy text\n                  vcg         VCG text\n                  gdl         GDL (Graph Description Language) text\n```\n\n### 支持輸出格式\n\nGraph::Easy 中輸出文件如不指定格式，則根據輸入文件的後綴確定，如無後綴，則默認輸出 ASCII 文件。\n\n可以支持輸出的格式有：\n\n```raw\n    ascii       ASCII art rendering\n    boxart      Unicode Boxart rendering\n    html        HTML\n    svg         Scalable Vector Graphics\n    graphviz    the DOT language\n    dot         alias for \"graphviz\"\n    txt         Graph::Easy text\n    vcg         VCG (Visualizing Compiler Graphs - a subset of GDL) text\n     gdl         GDL (Graph Description Language) text\n     graphml     GraphML\n\nIn addition, the following formats are understood and piped through the program specified with the --renderer option\n              (default: dot):\n\n    bmp         Windows bitmap\n    gif         GIF \n    hpgl        HP-GL/2 vector graphic\n    jpg         JPEG\n    pcl         PCL printer language\n    pdf         PDF\n    png         PNG\n    ps          Postscript \n    ps2         Postscript with PDF notations (see graphviz documentation)\n                  tga         Targa bitmap\n                  tif         TIFF bitmap\n```\n\n## DrawIt\n\nDrawIt 是一個 Vim 插件，可以直接在 Vim 中使用鍵盤操作進行繪製。\n\n### 常用命令\n\n以下所有命令必須在 Vim 命令模式下輸入。\n\n```raw\n\\di         進入 DrawIt 模式\n\\ds         退出 DrawIt 模式\n\n>           向右畫線\n<           向左畫線\n^           向上畫線\nv           向下畫線\n\n\\v \\> \\^ \\<     畫大箭頭\n\nCtrl + v        進入矩形選框狀態\n\\b              在選擇區域內畫矩形\n\\e              在選擇區域內畫橢圓\n\\f              填充區域\n\nSpace           擦除模式\n```\n\n### OSI 模型\n\n這是用 DrawIt 繪製的 OSI 模型。\n\n```raw\n            +--------------------------------+\n            |       Application layer        |                                                                                         \n            +--------------------------------+\n            |       Presentation layer       |                                                                                          \n            +--------------------------------+\n            |         Session layer          |                                                                                       \n            +--------------------------------+\n            |        Transport layer         |                                                                                        \n            +--------------------------------+\n            |         Network layer          |                                                                                       \n            +--------------------------------+\n            |        Data Link layer         |                                                                                        \n            +--------------------------------+\n            |         Physical layer         |                                                                                        \n            +--------------------------------+  \n```\n\n\n\n"
		},
		{
			"post_id": 3,
			"title": "# Let's exchange our Blog links",
			"date_published": 1462734403.169,
			"body": "之前總結了那麼多ZeroNet可能會出現的問題，那麼就從最原始的部分開始努力，我們交換 Blog 友鏈吧！\n\n---\n如果你想和我交換友鏈，可以在這篇博文下面留言，附上你的 Blog 地址，我們一起重新建造一個網絡世界。"
		},
		{
			"post_id": 2,
			"title": "# 母親節",
			"date_published": 1462698657.275,
			"body": "今天和媽聊了聊，雖然不是因為母親節的緣故，但寫這麼一個標題，就當作是母親節的緣故吧。\n\n---\n事情的起因是一次香港海關過關經歷。\n\n媽過關的時候，遇到了一名看似很有錢很有錢的廣東人，這個有錢我已經不想形容，聽對方描述應當大概就是月入百萬和玩兒似的這種概念，結果海關工作人員將他們一行幾人分開攔了下來，就被狗血淋頭的罵了一頓。\n\n大概的意思就是港人又歧視陸人啦，你們的吃穿用度都是我們供應啦掙得也是我們的錢啦這類的。\n\n媽和我講，以前都不知道為什麼有些港人那樣討厭大陸人，現在她算是明白了，真是讓人看不慣，有錢就了不起啦？陸人真是窮的就只剩下錢了。\n\n我說中國人現在，覺得自己有錢就可以欺負別人，當初受窮的時候被欺負多了，如今好不容易靠點手段有點錢了，就想和當年那些欺負他們的人一樣去欺負別人。共產黨以仇恨立國，他們也以仇恨發家，無論掙錢與否，都是在證明給人看，好像他們掙了錢，你不巴結他們，他們就會跳腳，他們的尊嚴好像就建立在那些紙片上了一樣。\n\n陸人總是講，說自由有什麼用啦，又不能讓我多吃一口飯，追求真理又有什麼用啦，真理又不能養活我。可是連良知、真理、自由都不要了，只要錢，連人都不做了，還活著做什麼呢？\n\n後來和媽又聊了聊最近的魏則西事件，從這裡聊到了 GFW ，又聊到了當年 Google 的極光行動和驟雨計劃，還有最近的 SS 流量探測技術發展。\n\n感覺在現實生活中能放心大膽聊這些的，也就算是和媽了。爸是沒法聊的，他總覺得我一個小孩子老是想教育他。\n\n後來說到國外學校裸體遊行的事，媽和我講要吃的壯一些，不然身材太差好丟人的。\n\n總之這個母親節過得我覺得要比很多人好的多。雖然媽都忘了今天是母親節，我也沒講。"
		},
		{
			"post_id": 1,
			"title": "# The First Post",
			"date_published": 1460234956,
			"body": "The first thing must be:\n\nHello World !\n\n---\n\nThen Markdown testing:\n\n# Heading\n## Heading\n### Heading\n\n*italic*\n**bold**\n~~strikethrough~~\n\n1. num\n2. num\n3. num\n\n\n* list-data\n* list-data\n* list-data\n\n> blockquote\n\n`code`\n\n```sh\n$ npm install -g\n```\n\n```py3\ndef _let_us():\n    print(\"Let's do something!\")\n\n_let_us()\n```\n\n\nThen Chinese testing:\n\n他们会吃人，就未必不会吃我。\n\n你看那女人“咬你几口”的话，和一伙青面獠牙人的笑，和前天佃户的话，明明是暗号。我看出他话中全是毒，笑中全是刀。他们的牙齿，全是白厉厉的排着，这就是吃人的家伙。\n\n照我自己想，虽然不是恶人，自从踹了古家的簿子，可就难说了。他们似乎别有心思，我全猜不出。况且他们一翻脸，便说人是恶人。我还记得大哥教我做论，无论怎样好人，翻他几句，他便打上几个圈；原谅坏人几句，他便说“翻天妙手，与众不同”。我那里猜得到他们的心思，究竟怎样；况且是要吃的时候。\n\n> 凡事总须研究，才会明白。古来时常吃人，我也还记得，可是不甚清楚。我翻开历史一查，这历史没有年代，歪歪斜斜的每页上都写着“仁义道德”几个字。我横竖睡不着，仔细看了半夜，才从字缝里看出字来，满本都写着两个字是“吃人”！"
		}
	]
}