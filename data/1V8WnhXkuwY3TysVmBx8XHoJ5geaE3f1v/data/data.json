{
	"title": "Ktty's ZeroBlog",
	"description": "Ktty's ZeroBlog.",
	"links": "- [Source code](https://github.com/)\n-[一个数学问题](xx)",
	"next_post_id": 4,
	"demo": false,
	"modified": 1463648154,
	"post": [
		{
			"post_id": 3,
			"title": "对“求N个随机数使其和固定”的实现方式的探究",
			"date_published": 1463559421.037,
			"body": "#对“求N个随机数使其和固定”的实现方式的探究\n##0x00 前言\n最近碰到一个这样的需求，数值表要求如下：\n<table>\n<tr>\n<td>最小攻击力</td>\n<td>最大攻击力</td>\n<td>最小防御力</td>\n<td>最大防御力</td>\n<td>最小体力</td>\n<td>最大体力</td>\n<td>最终战力</td>\n</tr>\n<tr>\n<td>400</td>\n<td>480</td>\n<td>200</td>\n<td>240</td>\n<td>900</td>\n<td>1080</td>\n<td>1600</td>\n</tr>\n</table>\n战力=攻击力+防御+体力\n---\n其实就是战力固定，需要分解出攻击力、防御、体力\n##0x01 需求分解\n- 1、随机生成N个数，使得它们的和固定为S\n- 2、随机生成N个数，且$$n_i\\in[a,b]$$,同时使得它们的和固定为S\n- 3、随机生成N个数，且$$n_i\\in[a_i,b_i]$$,同时使得它们的和固定为S\n\n##0x02 第一种情况\n\n###方法一：剩余随机法\n* 1、随机生成第一个数$$n_1=random( 0,S )$$\n* 2、随机生成第二个数$$n_2=random(0,S-n_1)$$\n* 3、随机生成第三个数$$n_3=random(0,S-n_1-n_2)$$\n* 4、如此类推，生成最后一个$$n_N=random(0,S-\\sum_{i=1}^{N-1}n_i) $$\n\n```lua\nfunction n_random(N,S)\n\tlocal rlist = {}\n\tfor i=1,N-1 do\n\t\tlocal r = 0\n\t\tif S ~= 0 then\n\t\t\tr = math.random(S)\n\t\tend\n\t\tS = S - r \n\t\trlist[i] = r\n\tend\n\trlist[N] = S\n\treturn rlist\nend\n```\n运行几次可以得到结论，后面几项非常大的概率为0，该方式**不够随机**\n\n###方法二：缩放法\n* 1、随机生成$$N$$个浮点数$$p_i=random(0,1)$$\n* 2、令$$n_i =\\frac{p_i}{\\sum_{j=1}^{N}p_j} * S $$\n\n```lua\nfunction n_random(N,S)\n\tlocal plist = {}\n\tlocal rlist = {}\n\tlocal psum = 0\n\tfor i=1,N do\n\t\tplist[i] = math.random()\n\t\tpsum = psum + plist[i]\n\t\tprint(plist[i])\n\tend\n\t\n\tfor i=1,N do\n\t\trlist[i] = tonumber(string.format(\"%.0f\",plist[i] * S / psum ))\n\tend\n\treturn rlist\nend\n```\n该方法可以近似均匀，不过好像还不是很随机\n\n###方法三：打点取段法\n将一个长度为S的线段，随机取N-1个点，那么就将其分成了N分，那么这N个长度则是我们所需要的。\n\n```lua\nfunction n_random(N,S )\n\tlocal list = {}\n\tlocal rlist = {}\n\tfor i=1,N-1 do\n\t\tlist[i] = math.random(S)\n\tend\n\ttable.sort(list)\t--排序\n\trlist[1] = list[1]\n\trlist[N] = S - list[N-1]\n\tfor i=2,N-1 do\n\t\trlist[i] = list[i] - list[i-1]\n\tend\n\treturn rlist\nend\n```\n这种方法仿佛是***最好的随机的方法***\n\n##0x03 第二种情况\n这种情况跟前一种的唯一区别是对单个随机数限定了范围$$[a,b]$$\n我们不妨转化一下问题为\n\n> 随机生成N个数，且$$n_i\\in[0,b-a]$$,同时使得它们的和固定为$$S-a*N$$\n\n即\n>  随机生成N个数，且$$n_i\\in[0,c]$$,同时使得它们的和固定为$$s$$\n\n###方法一：剩余随机法\n同上一种\n> math.random(S) 改为 math.random(c) 即可\n\n###方法二：随机扔球法\n将问题看成是\n> 有N个桶，每个桶的容量是c，将s个球随机扔在桶里，最后每个桶里面球的数量组成一组随机数\n\n```lua\nfunction n_random(N,S,c)\n\tlocal rlist = {}\n\tlocal plist = {}\n\tfor i=1,N do\n\t\t--初始化\n\t\tplist[i] = i\n\t\trlist[i] = 0\n\tend\n\n\tfor i=1,S do\n\t\tlocal id  = math.random(#plist)\n\t\tlocal index = plist[id]\n\t\trlist[index] = rlist[index] + 1\n\t\tif rlist[index] >= c then\n\t\t\t--已经满了\n\t\t\ttable.remove(plist,id)\n\t\tend\n\tend\n\n\treturn rlist\nend\n\n```\n这种方式应该属于***很好的一种随机方式，但是缺点就是效率问题***\n##0x04 第三种情况\n这种情况是覆盖前两种情况的，具有普遍意义\n\n依然可以转化成上一种情况去处理\n> 随机生成N个数，且$$n_i\\in[0,b_i-a_i]$$,同时使得它们的和固定为$$S-\\sum_{i=1}^{N}a_i$$\n\n\n\nPS：本文代码全部使用lua，不考虑没有解的情况，因为那种是可以提前判断出来的，比如$$N*a>S$$\n\n\n\n\n\n\n\n\n\n\n\n\n"
		}
	]
}