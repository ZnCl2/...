{
	"title": "kostaNew",
	"description": "Блог человека, который пришел в ZeroNet потусоваться.\n\n",
	"links": "- [Audio sample](http://127.0.0.1:43110/1Lod6THUt6v6ebZdBF2voYMk2QfvLvPm4q)\n- [Audio sample (git-hub)](https://github.com/kostaNew/zeronet-audio-demo)",
	"next_post_id": 5,
	"demo": false,
	"modified": 1458221754,
	"post": [
		{
			"post_id": 4,
			"title": "Анонс плагина EasyMetrics",
			"date_published": 1458211976.525,
			"body": "Примерно неделю назад я начал разработку инструмента, для сбора и анализа статистики по ZeroNet. Надеюсь, что в итоге это станет либо аналогом Google Analytics, либо инструментом для администраторов прокси. Пока что это просто плагин для записи информации, которая выводится в http://127.0.0.1:43110/Stats в разделе Sites, и скрипт для ее обработки. \n\nНесмотря на такой маленький функционал, плагин уже позволяет узнавать некоторые интересные вещи:\n - Сравнивать популярность блогов.\n - Сравнивать размеры коммьюнити на разных языках.\n - Оценивать суточные колебания количества пиров и размеры сети.\n\n---\n\n### Какие результаты можно получить?\n\nПример. Сравнение популярности блогов GomZik и kostaNew по количеству пиров. Видно что блог GomZik, значительно популярнее.\n\n[![rus_dev_blog](https://ipfs.pics/ipfs/QmVv6priy2U2NSvXCnq8bT29REQTBjvosD6qtmQXJ37Eh3)](https://ipfs.pics/QmVv6priy2U2NSvXCnq8bT29REQTBjvosD6qtmQXJ37Eh3)\n\nСравнение ZeroTalk и национальных коммьюнити.\n\n[![community](https://ipfs.pics/ipfs/QmT4DngeYV4JHD5EKufPpKSuW3r8fptcuRgwRujKvXbxRg)](https://ipfs.pics/QmT4DngeYV4JHD5EKufPpKSuW3r8fptcuRgwRujKvXbxRg)\n\nСуточные колебания пиров по наиболее популярным сайтам. Заметьте, что ZeroTalk вообще мало кому нужен по сравнению с почтой и Play. Стоит отметить, что эти цифры нельзя считать максимальным размером сети, однако качественные результаты достаточно надежны.\n\n[![zeronet](https://ipfs.pics/ipfs/QmUxAnnYid61bk2uvE3y58BtXAJpXK654Qh8ZRANDeA5Rn)](https://ipfs.pics/QmUxAnnYid61bk2uvE3y58BtXAJpXK654Qh8ZRANDeA5Rn)\n\nДанные собирались из узла, находящегося в Нью-Йорке. К сожалению, по многим сайтам данные писались не с самого начала.\n\n### Какие требования?\n\nДля работы плагина, в используемом Python должны быть доступны модули **numpy** и **pandas**. Для обработки данных, необходимы **numpy**, **matplotlib** и **pandas**.\n\n### Как запустить сбор статистики?\n\n1. Скачать все из [репозитория проекта](https://github.com/kostaNew/zeronet-easymetrics)\n2. Скопировать папку **EasyMetrics** в **ZeroNet/plugins**\n3. Перезапустить ZeroNet\n4. Подождать 2 минуты и проверить что в папке **ZeroNet/metrics** появилась новая папка с форматом `YY_MM_DD_HH_MM_SS` и в ней файлы zite.py и params.json\n\n### Как обрабатывать статистику?\n\nБлижайшие несколько месяцев я не планирую включать обработку данных в графический интерфейс ZeroNet. Тем не менее уже есть набор ipython notebooks и специальный скрипт с несколькими стандартными графиками.\n\nДля использования скрипта с предложенным по умолчанию дата сетом:\n1. Перейдите в папку **DataProcessing**.\n2. Вызовете `python ./go peers zeronet`\n3. Подождите, посмотрите на картинку, подумайте;)\n4. Так же возможны вызовы `python ./go peers community`, `python ./go peers rus_dev_blog`.\n\nТеперь попробуем понять, что произошло. `python ./go` вызывает скрипт обработки данных, принимающий `<task>` и `<scope>`. `<task>` определяет то, что мы хотим вывести на экран. На данный момент доступен только один вариант: `peers`. Эта задача строит график количества пиров по времени для нескольких зайтов. `<scope>` определяет область интереса: зайты, пользователи, узлы... `<scope>` - прописаны в файле **config.json**.\nНа данный момент реализованы `<scope>` включающие только зайты. Например:\n\n```\n\"rus_dev_blog\":[{\"zite\":\"1CpGZyfbUBBV5uXUoY653wVoqZFRojbEzd\",\"label\":\"GomZik\"},\n\t\t{\"zite\":\"1FMeSorqAS8Kq5E5XJpGGBJ8Qb2CxXhaYb\",\"label\":\"kostaNew\"}\n\t\t]\n```,\nсодержит два зайта. Параметр `\"zite\"` - определяет адрес зайта. Адрес должен быть полным, .bit домены не поддерживаются. `\"label\"` - название графика в легенде.\n\nДля того чтобы указать путь до папки с обрабатываемыми данными поменяйте параметр `\"folder\": \"../DataProcessingExamples/2016-03-14_14-30-28\"`.\n\nВручную можно построить более интересные графики. Если вы умеете, используйте pandas самостоятельно.\n\n### Почему все так сложно?\n\nПока что я не пытаюсь сделать максимально удобный инструмент с красивыми графиками. Я хочу сделать инструмент для определения важнейших показателей роста сети и найти показатели, которые вообще могут адекватно о чем то говорить. Например, совершенно непонятно, как оценить общее количество пиров сети. Цифры, приведенные в графике выше, говорят только об окружении сервера, но не о сети целиком.\n\n### Что будет дальше?\n\nЯ планирую улучшать информативность построения графиков и добавить несколько новых `<task>`, в том числе обрабатывающих данные зайтов и анализирующие файлы **content.json**. Жду от вас идеи графиков, которые позволят понять что-нибудь интересное."
		},
		{
			"post_id": 3,
			"title": "Диагностические средства ZeroNet",
			"date_published": 1457883593.298,
			"body": "\nНедавно выяснилось, что большинство людей не в курсе о таких диагностических возможностях ZeroNet как Stats, Benchmark и т.д. Поэтому, я покопался в ядре и посмотрел что в нем вообще есть. \n\nНашел еще 2-3 интересные штуки, но самый ЭПИК я осознал в конце. Оказалось, что владельцы прокси не отключают Stats плагин и уязвимы к (D)DOS из-за этого.\n\nСодержание:\n - Инструменты ядра: Console, Debug, TestStream\n - Инструменты Stats: Benchmark, Stats, GcCollect\n - Уязвимость ZeroNet прокси\n\n---\n\n**Введение**\n\nИтак, в ZeroNet есть набор средств диагностики лежащих по текстовым адресам вида.\n```\nhttp://127.0.0.1:43110/Console\nhttp://127.0.0.1:43110/Debug\nhttp://127.0.0.1:43110/TestStream\nhttp://127.0.0.1:43110/Benchmark\nhttp://127.0.0.1:43110/Stats\nhttp://127.0.0.1:43110/GcCollect\nhttp://127.0.0.1:43110/Dumpobj\nhttp://127.0.0.1:43110/Listobj\n```\nОбратите внимание, что это не .bit домены! \n\nКогда вы обращаетесь по любому адресу, запрос улетает в функцию route(path) объекта UiRequest. Если обращение идет не по адресу сайта и не по .bit домену, то происходит вызов функции вида actionXXXXX. Например, обращение по адресу Debug вызовет функцию actionDebug.\n\nТакой механизм очень здорово подходит для плагинов. Потому что позволяет делать не конфликтующие плагины, если адреса, по которым вызываются инструменты, не пересекаются. Плагин Stats работает как раз через этот механизм. Концепция полностью аналогична навешиванию на WebSocket, о котором я написал в конце [этого поста](http://127.0.0.1:43110/1FMeSorqAS8Kq5E5XJpGGBJ8Qb2CxXhaYb/?Post:2).\n\nТеперь рассмотрим какие инструменты входят в стандартный бандл.\n\n**Инструменты ядра**\n\nТут совсем негусто. В основном, инструменты ядра нужны для отладки. Они требуют [Werkzeug](http://werkzeug.pocoo.org/) и запуск с ключом `--debug` для правильной работы. Предназначение инструментов Console и Debug описано в [официальной документации](https://zeronet.readthedocs.org/en/latest/site_development/getting_started/). \n\n```\nhttp://127.0.0.1:43110/Console\n```\nВызывает интерактивную Python консоль, если есть Werkzeug, иначе, просто вываливает ошибку. При выпадении ошибки видно некоторую полезную информацию: версию python, gevent, ZeroNet; плагины; используемые трекеры...\n\n```\nhttp://127.0.0.1:43110/Debug\n```\nПозволяет отлаживать последнюю выпавшую ошибку через механизм DebugHook. Как конкретно этот механизм работает внутри, я пока не понял, но его классы лежат в папке Debug.\n\n```\nhttp://127.0.0.1:43110/TestStream\n```\nВыводит \"Hello!\" с задержкой. Скорее всего, нужен чтобы убедиться, что взаимодействие с браузером вообще работает.\n\n**Инструменты Stats**\n\nА вот тут начинается самое интересное. Плагин Stats добавляет в ZeroNet три очень важных и интересных вызова;)\n\n```\nhttp://127.0.0.1:43110/Benchmark\n```\nТестирует производительность вашей системы для работы с ZeroNet.  Ниже привожу полный дамп для моей системы:\n```\nBenchmarking ZeroNet 0.3.6 (rev966) Python 2.7.9 (default, Apr 2 2015, 15:33:21) [GCC 4.9.2] on: linux2...\n\nCryptBitcoin:\n- hdPrivatekey x 10..........0.223s [x3.14: WOW]\n- sign x 10..........0.113s [x3.09: WOW]\n- openssl verify x 100..........0.177s [x2.10: Fast]\n- pure-python verify x 10..........0.493s [x3.25: WOW]\n\nCryptHash:\n- sha256 5M x 10..........0.455s [x1.32: Fine]\n- sha512 5M x 10..........0.290s [x2.07: Fast]\n- os.urandom(256) x 100 000..........2.179s [x0.30: Sloooow]\n\nMsgpack:\n- pack 5K x 10 000..........0.449s [x1.74: Fast]\n- unpack 5K x 10 000..........0.746s [x1.61: Fine]\n- streaming unpack 5K x 10 000..........0.804s [x1.74: Fast]\n\nDb:\n- Open x 10..........2.855s [x0.05: Sloooow]\n- Insert x 10 x 1000..........0.688s [x1.45: Fine]\n- Buffered insert x 100 x 100..........0.975s [x1.33: Fine]\n- Total rows in db: 20000\n- Indexed query x 1000..........0.171s [x1.46: Fine]\n- Not indexed query x 100..........0.296s [x2.03: Fast]\n- Like query x 100..........0.787s [x2.29: Fast]\n\nDone. Total: 12.40s\n```\nПо данным с форумов и блога [@musickiller](http://127.0.0.1:43110/blog.musickiller.bit/?Post:40), показатели общего времени прохождения теста на ПК составляют от 5 до 20 секунд, на Android -- 90 и выше. Обратите внимание, что тест сильно грузит машину. При этом, его можно запустить много раз.\n\n```\nhttp://127.0.0.1:43110/Stats\n```\nВыводит данные о ваших соединениях с пирами и статистику по загруженным вами 0сайтам. Здесь можно посмотреть у каких пиров какая версия ZeroNet. А так же ту статистику, которые вы видите в правой боковой панели по 0сайту, для всех сайтов сразу.\n\nВ режиме `--debug` так же пишет дополнительную информацию: объем занимаемой классами и объектами памяти; ошибки гринлетов (greenlet) и адреса подключения воркеров (workers); параметры cоединений по различным адресам, сокетам; данные о работе msgpack; загруженные модули python и пути до них. Многое из этого требует дальнейшего изучения. \n\nПрокомментирую термины, которые уже начал понимать. Гринлеты (greenlets) - это легковесные потоки, предоставляемые gevent. Они предоставляют конкурентное выполнение задач, более удобным способом, чем встроенные механизмы Python. К сожалению, для них работает GIL, а значит нет настоящего параллелизма. Воркеры (workers) - это элементы очереди задач ядра ZeroNet, именно эти штуки следят за загрузкой нужных файлов из пиров.\n\n```\nhttp://127.0.0.1:43110/GcCollect\n```\nВызывает сборку мусора в ядре ZeroNet и возвращает сколько объектов было собрано. Эта команда работает даже без режима отладки.\n\n```\nhttp://127.0.0.1:43110/Dumpobj\nhttp://127.0.0.1:43110/Listobj\n```\nКоманды работающие только в режиме Debug. Должны выводить данные об объектах в памяти в определенном формате. Однако, у меня почему то не заработали. Возможно, я просто не дождался, так как в коде обеих функций используется команда `gc.get_objects()`.\n\n**Уязвимость ZeroNet прокси**\n\nБарабанная дробь. Владельцы прокси вообще не поняли что они позапускали, ни на одном из них плагин Stats не отключен. Любой может быстро стучаться извне на /Benchmark и положить сервер частыми запросами. Более того, серверы компрометируют таким образом свое оборудование и свои коннекты, что не очень хорошо. \n\nИспользуя список прокси от @eugenere, который лежит [тут](http://127.0.0.1:43110/148or6yKMeNV4qdmKyCtpaNiFAeU1cccCw/?Post:19) я благополучно стырил с трех из них данные. Если такие данные кому то нужны для изучения без злого умысла, могу переслать лично.\n\n**В заключение**\n\nНекоторые вещи вообще непонятно как работают. Если у кого то получилось использовать их правильно, напишите в комментарии, пожалуйста. Так же в коде ядра есть еще более 10 функций вида actionXXXXXX, но мне кажется они должны использоваться по-другому, а не вызываться из адресной строки."
		},
		{
			"post_id": 2,
			"title": "Немного инсайтов",
			"date_published": 1457799626.303,
			"body": "\nТак как с серьезными вещами все идет очень медленно, а документации и примеров страшно не хватает, то я решил написать про несколько \"открытий\". Надеюсь, это поможет некоторым лучше понять ZeroNet, если они на том же этапе, что и я.\n\nВ этом посте:\n - О шрифтах\n - О публикации зайта\n - Об опциональных файлах\n - Как писать плагины для ZeroNet\n\n---\n\n\n**О шрифтах**\nНа большинстве зайтов, основанных на стандартом шаблоне ZeroTalk и ZeroBlog, есть проблемы с отображением шрифтов. Русские буквы выглядят широкими, а английские маленькими. Это связано с тем, что в системе не стоят кириллические версии используемых шрифтов.\n\nИсправить это можно руками, скачав нужные семейства с Google Fonts и проставив все семейство в систему. Есть более продвинутые методы, но я к сожалению потерял описание, которое мне давали.\n\nОбычно проблемы вылазят на Ubuntu, со шрифтами Roboto и Tinos.\n\n**О публикации зайта**\nК зайтам лучше относиться не как к веб страницам, а как к нативным приложениям Android или iOS. Когда вы публикуете приложение для Android, то вы его сначала подписываете, а потом засылаете на проверку в Google. Тут аналогично. Все действия делаются в 3 этапа.\n\n```bash\npython zeronet.py siteCreate\npython zeronet.py siteSign\npython zeronet.py sitePublish\n```\n\nПервая команда создает зайт. Она создаст папку с вашим зайтом, файл index.html и content.json внутри нее. Название этой папки, по сути, является открытым ключом зайта. Закрытый ключ будет выведен в консоль. НЕ ПОТЕРЯЙТЕ ЕГО! Иначе ваш зайт превратится из кареты в тыкву, которую будет невозможно выложить по тому же адресу.\n\nВторая команда ну ОЧЕНЬ интеллектуальна. Ее главное предназначение это подписывать файл content.json. Однако, помимо этого, она записывает в content.json все лежащие в папке файлы. При этом тактично опуская временные файлы редактора, типа ogrizok_gedit.js~ и еще некоторый мусор. Так же, эта команда должна компилировать *.coffee скрипты, но к сожалению делает это только на Windows.\n\nТретья команда выкладывает зайт в открытый доступ. Для того что бы она сработала, вам требуется открытый порт 15441.\n\nСтоит отметить, что в формате `objectAction` есть еще несколько полезных команд для zeronet.py. Посмотреть их можно, используя ключ `--help`. А сам процесс публикации хорошо расписан в стандартной документации и презентации.\n\n**Об опциональных файлах**\nВ ноябре 2015 года в ZeroNet была добавлена возможность делать зайты с опциональными для загрузки файлами. К сожалению, в документации этот момент отразился настолько в [хитром месте](https://zeronet.readthedocs.org/en/latest/site_development/content_json/#optional), что многие так и не поняли как же этой возможностью воспользоваться.\n\nТем не менее, все очень просто. Надо написать в content.json строку `\"optional\": \"optional_files/.*\"`. Тогда во время подписывания зайта, все файлы, попадающие под указанный шаблон (в данном случае содержимое папки optional_files), станут опциональными. Проверить это можно в content.json. Секция `\"files\"` декларирует обязательные для загрузки зайта файлы, а секция `\"optional\\_files\"` опциональные.\n\nПосмотреть пример на опциональные файлы с проигрыванием музыки можно [тут](http://127.0.0.1:43110/1Lod6THUt6v6ebZdBF2voYMk2QfvLvPm4q), а его исходный код [тут](https://github.com/kostaNew/zeronet-audio-demo). Тег `<audio src=\"audio/Little_Bits.mp3\" preload=\"auto\">` обращается к обязательному файлу и плеер гарантированно будет готов к проигрыванию при открытии зайта. Тэг `<audio src=\"audio_optional/April_Kisses.mp3\" preload=\"none\">` не требует файла до нажатия кнопки play. Таким образом второй музыкальный файл не скачивается до запуска воспроизведения.\n\nСтоит отметить, что файлы можно загружать со стороны пользователя и делать их опциональными в папках с пользовательскими данными. Таким способом уже работает 0chan. Мне кажется, что появление большего количества зайтов с загружаемым пользовательским контентом, это дело времени, количества программистов и качества документации...\n\n**Как писать плагины для ZeroNet**\n\nА теперь мы подошли к самому интересному. Плагины для zeronet лежат в папке plugins и уже реализуют очень большой кусок логики. Плагин, по сути, является обычным питоновским модулем, который PluginManager дергает в определенное время и через механизм декораторов накладывает на код основного ядра. Отключенные плагины имеет префикс `disabled`. Плагины работающие только в режиме дебага, начинаются с `Debug`. \n\nЧто бы сделать свой плагин нужно:\n - Создать новую папку, например TestPlugin\n - Создать файлы `__init__.py` и `TestPlugin.py`\n - В `__init__.py` написать `import TestPlugin`\n - В `TestPlugin.py` написать импорт класса PluginManager: `from Plugin import PluginManager`\n - Определить класс плагина `class UiRequestPlugin(object):`\n - Определить в декораторе, на какой класс ядра он будет навешиваться. Например, навешивание на UiRequest: `@PluginManager.registerTo(\"UiRequest\")`\n\nЛогика работы очень простая. Если что то вызывает определенный в `UiRequestPlugin` метод, а его нет в ядре, то вызовется метод плагина. Если же метод в ядре есть, то он вызван не будет, а будет вызван метод вашего плагина. Во втором случае, важно правильно вернуть управление в ядро. Например так: `return super(UiRequestPlugin, self).route(path)`. Некоторые функции, которые вы переписываете, могут быть итераторами, поэтому используйте `yield`, примеров на это в стандартном бандле куча.\n\nКод простого плагина, пишущего строку в лог, можно найти [тут](https://github.com/kostaNew/zeronet-plugin-demo).\n\nЕсли плагинов на один класс много, то они будут навешиваться по очереди. Навеситься можно не на все классы ядра, а только на те, у которых подписано `@PluginManager.acceptPlugins`. На данный момент таких классов девять.\n\n - main.py\n - Config.py\n - File/FileRequest.py\n - User/User.py\n - User/UserManager.py\n - Ui/UiWebsocket.py\n - Ui/UiRequest.py\n - Site/Site.py\n - Site/SiteManager.py\n\nСтоит особо отметить файл UiWebsocket.py. Все реквесты из ZeroFrame улетают в ее метод handleRequest. Этот метод обрабатывает логику responce запроса, потом отсеивает попытки позвать административные команды без прав (sitePause, siteResume, siteDelete, siteList, siteSetLimit, siteClone, channelJoinAllsite, serverUpdate, serverPortcheck, serverShutdown, certSet, configSet). И в конце вызывает в объекте UiWebsocket метод, который состоит из слова action и названия команды с большой буквы. Например: actionFileWrite. Таким образом к UiWebsocket можно написать 100500 плагинов и все они не будут конфликтовать, если использовать разные названия для вызываемых из UI методов."
		},
		{
			"post_id": 1,
			"title": "Первый пост",
			"date_published": null,
			"body": "Итак, пожалуй, стоит с чего то начать. Этот пост о том, кто я, зачем я сюда пришел и чем мне интересен ZeroNet.\n\nЯ не строю иллюзий по поводу анонимности в ZeroNet, поэтому сразу завел публичный аккаунт, совпадающий с моими аккаунтами в обычном вебе. Меня зовут Константин Ушенин, я научный сотрудник в Уральском Федеральном Университете. Для вопросов я обычно доступен в vk: https://vk.com/kostanew\n\n---\n\n**Почему же мне так нравится проект ZeroNet?** В первую очередь тем, что это эксперимент, а мне, как научному сотруднику, эксперименты нравятся;) У сайтов нет хостинга и этого уже достаточно, что бы стало интересно. Когда вы делаете сайт в интернете или изучаете код чужого сайта, то знаете, что его внутреннее устройство является всего лишь повторением чего то уже сделанного до вас. В ZeroNet это не так. ZeroNet - это абсолютно новая технология, никто не знает что на ней можно сделать, для чего она подойдет лучше чем web, а что в ней не будет работать совсем. Кроме того, проекты ipfs и ZeroNet важны тем, что они потенциально могут решить проблему DDOS атак и проблему доставки контента до пользователей, силами самих пользователей. Не факт, что это получится, но когда то и гипертекст казался практически неработоспособной идеей.\n\n**Чем же ZeroNet лучше чем Freenet и i2p?** Я пытался пользоваться двумя последними технологиями и почувствовал адскую боль от попыток их настроить и найти хоть что-нибудь интересное в этих сетях. ZeroNet в отличии от них реально простой и реально живой. Люди пишут посты, я вижу посты в реальном времени и понимаю, что эти люди адекватные и являются профессионалами своего дела. Freenet, i2p и Tor заточены под настоящую анонимность и эта анонимность привлекает тех, кому она действительно нужна: любителей-ЦП и наркотиков. Я не хочу сказать что все в этих сетях сидят именно для этого, но в целом, результат действия такого контингента на сообщества внутри этих сетей крайне негативные. Возможно, ZeroNet еще просто не дожил до этого этапа, но я сомневаюсь, что кто то рискнет запостить настоящее ЦП, понимая, что его найдут через 2 дня, если очень захотят.\n\n**Кому ZeroNet может быть интересен из IT специалистов?** В первую очередь, Front-end разработчикам. В ZeroNet нет серверов и нет ajax, одна только клиентская часть и ядро. Это идеальная технология для того, что бы попробовать что то реально новое в своей работе. Так же ZeroNet будет интересен Python-истам. Навороченное ядро ZeroNet написано на Python, что уже не плохо. Однако, помимо этого, у сети есть потребность в большом количестве тулзов, которые могут автоматически выгружать метаинформацию в ZeroNet из обычного веба. Например, новости и базы торрентов. Такие вещи проще всего сделать на Python. Ну, и конечно, ZeroNet должен заинтересовать безопасников. Причем, по двум причинам. С одной стороны, тут все строится на парах открытый-закрытый ключ и ZeroNet - это хороший объект для изучения специфики этой криптографической концепции. С другой, в ZeroNet полно дыр и неудачных решений, которые надо искать и исправлять.\n\n**А зачем тут сидеть, если все равно все загнется и станет полумертвым, как Фидо?** ZeroNet не единственный проект подобного рода, например создатели utorrent делают Project Maelstrom, помимо них есть Pandora, base.network, MaidSafe, Morphis и многие другие. Просто ZeroNet один из первых у кого получилось. А когда проектов так много, то они обменяются идеями и хоть что-нибудь из этого да останется. Хотя мне кажется, что проект набравший за год 2,744 звезд на Github при 10% функционала не может умереть. Тем более что его разработчики поняли главные проблемы Freenet и i2p и сделали установку одной кнопкой и приятный пользовательский интерфейс;)"
		}
	]
}