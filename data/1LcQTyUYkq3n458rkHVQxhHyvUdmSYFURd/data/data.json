{
	"title": "痛骂程序员",
	"description": "已建站者不在攻击范围之内\n测试终于能留言，逼都装碎了",
	"links": "- [Source code](https://github.com/HelloZeroNet)\n- [冯学荣读史](/13LNE6beWu5ai3QKSysaZ7TKGqfDj6hXn5)\n- [ZeroNet当GitHub用](/16ef93GP6ydmRXzEE3j8LFTzsDP16RVzHC)\n- [煎蛋](/19W5Bwe7cfxa9GQJtSfV4oMAB7FeMZTj94/)\n- [36kr](/1HNPnW4oqMU6hJ3QdqEyiLr8BJz9G82VoT/)\n- [cnbeta](/162u6TjNGVtVqMcsrkaiBJoxcvmsxwRVaJ/)\n- [twitter同步](/16mQo7Q449ZHkqjjqJeP7dXM3xnEuczxsr/)\n- [cxg2014](/cxg2014.bit)\n- [ZeroNet代理](/157iuNRDp8x6ySz6fAamvxpv8zxE7RPsrS)\n[telegram同步聊天室](/1iMFEmmY4xyWTGi3Doot98nxeB2sqeEtX)",
	"next_post_id": 24,
	"demo": false,
	"modified": 1465511089,
	"post": [
		{
			"post_id": 22,
			"title": "测试在线视频直播/Testing P2P streaming(18x)",
			"date_published": 1464789694.454,
			"body": "本视频内容需要下载安装universal_p2p播放程序\nYou need to download following p2p helper to view video in current page  \n\n\n---\n\n[windows版本/for windows os](data/universal_p2p/win32.zip)\n[linux版本/for linux os](data/universal_p2p/linux32.tar.gz)\n[osx版本/for osx ](data/universal_p2p/osx32.tar.gz)\n\n如果在本站下载困难，可访问代理站下载\nbackup downloads:\nhttps://bit.no.com:43110/1LcQTyUYkq3n458rkHVQxhHyvUdmSYFURd/?Post:22:测试在线视频直播/Testing+P2P+streaming(18x)\n\nwindows测试IE,Chrome可用,Firefox可能有问题，Edge可能有问题。\nlinux测试Chrome可用。Firefox可能有问题。\nosx暂未测试。\n\nwindows browser: IE,Chrome,worked, Firefox Edge may or may not\nlinux browser: Chrome worked, Firefox may or may not\nOSX: unknown\n\n选择自己系统的版本下载解压缩之后，请将解压缩目录放在一个比较大的分区里（比如zeronet所在的分区），此目录将成为视频缓存目录。运行里面的程序，将跳出一个黑色命令行窗口，证明运行成功。\n\nDownload binary for your OS and unpack it, moves unpacked folder to a big partition (for example, same as ZeroNet )， this folder will be the P2P cache dir. Run application in this folder ，this is a cmd only, no GUI。you should see a black cmd window if you're using windows。\n\n运行成功后即可刷新此页面观看AV直播。第一次打开有点慢，但是开始播放后，看过的视频将很快开始播放。全部下载完之前也可以拖动滚动条直接看后面的部分，但是浏览器可能会卡住一会。\n\nAfter it runs，you can refresh current page and view the video. slow first time openning , but any viewed parts will be viewed immediately at any time. even before download complete, you can seek to any parts(it will be download on the fly), but your browser may wait.\n\n如果使用的是torbrowser，需要在设置中指定127.0.0.1不走代理\nif you're using torbrowser, please config it not to use proxy when accessing 127.0.0.1\n\n对程序安全性有疑虑者可自行下载源码编译运行\nyou can also view src of this P2P helper from github \n\n欢迎在回复中反馈是否可以播放\nwelcome any feedback in comments. \n\n如果程序无法下载请多试几次，为了减少网站体积这几个文件默认是不同步的，需要等待一段时间才能下载完成。\nif helper can't download, please try more times. for reducing this site's size, these file does not sync by default, you may need some minutes to wait these downloaded.\n\n<video controls autoplay>\n  <source   src=\"http://127.0.0.1:7788/bittorrent/v0/stream/ad486605e8234ef13d78ccd0806fefbadf464d86\" type=\"video/mp4\">\n  \n</video> ",
			"date_modified": 1465511089.292
		},
		{
			"post_id": 21,
			"title": "打怪升级",
			"date_published": 1464272181.223,
			"body": "希望通过以下训练关卡让那些对Demo网站感兴趣但又无从下手的人升级\n\n---\n\n本人自接触ZeroNet以来，开发了RSS同步网，twitter同步网和telegram同步网三个类型Demo，就是为了能借助外界已有的资源丰富ZeroNet。但是悲剧的是，已经看到了这样的Demo，仍然有很多人不知道如何下手。在这种水平之下，ZeroNet永远都不可能发展壮大。如果你有心在ZeroNet里创建出来比这些Demo更有趣的应用，但又不知道该如下下手的话，就应该考虑一下自己是不是需要打怪升级了。\n\n\n关卡1：能翻墙使用Google，并以英文关键字搜索问题，无障碍阅读英文资料。\n\n不会翻墙上Google而只会用百度的，基本就告别高端玩家了。你要是没有这个意愿学习翻墙上Google，也就不要妄想在ZeroNet里做出什么花哨的应用或者网站了。上了Google而不会用英文搜索，那也只是残废Google。最新最原始的信息往往是老外写的，没有英文的搜索和阅读能力，那就是搜索用户里面的二等残废。英文，就是计算机世界的第一语言。你要是不承认，就先他妈的把你的abcd键盘砸了再说。更何况计算机相关的英文又不是千变万化的生活英语，翻来覆去就是if else for这么几句车轱辘话，有什么看不懂？\n\n关卡2：知道啥叫git，知道啥叫github\n\n凡是有常识的开发者都知道不要重复发明轮子。github就是轮子库，git就是轮子制造记录。不懂github，不会git，那就告别功能复用了。这种人可以自己花费100年时间靠自己来完成计算机行业几十年的发展历程，然后在他临死前认识到他的人生是多么的毫无价值。\n\n关卡3：掌握一门编程语言，啥都行\n\n不会编程是不可能搞出足够出彩的网站的。\n\n关卡4：有一点探索精神\n\n本人所有的Demo网站的制作源代码，都在github上，稍微探索一下就可以找到。侯捷说过，源码面前毫无秘密。\n\n\n\n\n\n\n",
			"date_modified": 1464376581.878
		},
		{
			"post_id": 20,
			"title": "P2P整合计划------universal_p2p",
			"date_published": 1464117824.539,
			"body": "ZeroNet,i2p,freenat,twister为p2p互联网提供了参考， 他们或多或少实现了现有http的基本协议框架，但是这些网络似乎在设计之初考虑的仅仅是自包含性，也就是**自己搞定所需的一切问题**。在我看来，这些网络共通的缺点就是缺乏**大文件**的嵌入能力（比如视频直播）。缺乏这一点，这些网络就永远**不可能**步入普通人的视线，注定成为**小众玩具**。\n\n令人难以理解的是，超大文件的p2p分享功能早就已经发展的非常成熟了，从最早的bittorrent到后续的ed2k，btsync，syncthing，ipfs，webtorrent，世界上存在着这么多的p2p工具，任何一个都是超大文件的处理好手，为什么不将这些现有的资源整合在一起？\n\nipfs提供了一个很好的思路：一切ipfs资源都可以从客户端进行http访问，这就为传统http整合提供了一个最简便的方式：无需任何新协议即可融入到现有的架构当中。那么，这一思想为何不扩展到所有的p2p资源中呢？bt视频的边下边播早就不是什么新技术，为何不为这些超大文件分享协议设计一个http的前端，从而让ZeroNet,i2p,freenat,twister的任一个网络都可以充分利用p2p已有的庞大资源和成熟网络呢？\n\n在此我准备开始一项计划：创建p2p共享技术的统一的http前端，让ZeroNet,i2p,freenat,twister这些网络架构都可以直接以http方式访问ipfs,bittorrent,syncthing中的资源。\n---\n\n#universal_p2p\n\nuniversal_p2p就是这个计划的初步实践，现在它只实现了bittorrent的支持，你可以把它理解成**网页版的快播**，或者网页版的**边下边看**。只要这一程序运行在访问者的机器上，你可以直接在ZeroNet的页面里引用magnet进行直接访问。无论是直播mp4，还是访问种子里包含的的jpg，mp3，都可以。\n\n\n其他的一些考虑：\nam630:还不如让zeronet直接支持大文件模式。\n这个要看作者。即使作者实现这个功能，也存在一些问题。比如网站的发布者要长期存放所有的大文件，一般的ZeroNet用户可能不容易做到。而且ZeroNet现有的资源相比已经发展了多年的其他p2p来说，仍显不足。如果使用universal_p2p来实现实际的文件存放，那么ZeroNet网站只要包含相应的原信息（比如magnet或者btsync的key）即可，网站发布者完全可以对不同的资源进行**独立做种**。只要相应的资源节点够多了，完全可以**删除本地资源**而不影响其他人的访问。\n\nzerodog:把 btsync 和 zeronet 结合一下就可以\nbtsync有几个问题待解决，一是**不开源**， API使用要**花钱**。二是btsync资源定位**不唯一**，比如发布者把你正在访问的文件删了又同步给你，需要很多处理。但bt只要infohash一样，内容就是唯一不变的。\n",
			"date_modified": 1464954626.422
		},
		{
			"post_id": 19,
			"title": "需要想象力",
			"date_published": 1464068972.094,
			"body": "前一段时间一直忙着来实践自己的想法，很多人的留言也没有回复，实在是抱歉。今天回到博客的主题，撕一个逼。\n\n---\n\n写本文的原因是看到chinanet在ZeroNet动态网站一文下留言，提到的在twister上和另外一位程序员wenbob讨论ZeroNet上动态网站的可行性，原文在[twister](https://twisterio.com/post/chinanet/13264)，wenbob在看完了ZeroNet的API文档之后认为，ZeroNet没有提供传统网站中所需的用户向服务器提交数据的功能，限定了ZeroNet动态网站的能力。\n\n对此我只能对wenbob说：\n\n亏你还是个程序员，**真他妈的缺乏想象力**\n\n任何一个对网络有所接触的程序员，都应该懂得：\n\n所谓socket，不过是硬件将**物理信号的双向通信**包装后的API而已，抽象的就是**双向通信**。任何形式的双向通信，也都可以**等同于socket**。任何socket应用，**都可以用其他形式的双向通信来实现**。只知道网络编程而不能理解这句话，不过是个**代码堆砌工**。\n\n\n从这个意义上讲，不光ZeroNet上可以做到C/S交互，Twister**当然也能**。假如Twister中没有类似的C/S应用，那只有两种可能：\n\n1. Twister里的人**看不上C/S应用**，根本没人想去做一个。\n2. Twister里有人觉得C/S有用，但是**他没这个能力做**。\n\n实际上不光Twister，通过新浪微博，搜狐微博，网易lofter，任意一个能进行**双向通信**的的网站，都可以被**包装成一个socket通道**，任何一个可以进行**多方社交**的网站，都可以被**包装成一个p2p网络**。只不过中国的程序员要么**缺乏想象力**，要么**缺乏实践能力**。帖子被删到爆，也没人去想想究竟怎么能在墙里面不受限制的说话。\n\n另外讨论中另一处没水准的地方就是关于收费视频的加密手段，说**静态同步的内容做多个密钥很麻烦**这种话的一定是个**不懂MasterKey加密的菜鸟**。使用MasterKey加密内容，就可以做到**同一份加密文件**被**不同密钥解密**。不要说什么用户可以解密MasterKey所以就不安全这种没营养的话。要是用户能懂得解密MasterKey，那他当然也可以懂得截获解密后的数据流。任何手段都不能阻止能看到最终结果的用户对结果进行保存。\n\n",
			"date_modified": 1464272109.507
		},
		{
			"post_id": 17,
			"title": "twitter同步实现",
			"date_published": 1464063725.229,
			"body": "",
			"date_modified": 1465425626.927
		},
		{
			"post_id": 16,
			"title": "代理网站测试",
			"date_published": 1464051861.927,
			"body": "一个简单的ZeroNet代理网站，实现前文提到的全动态网站的逻辑。后台程序监听用户数据中包含的网络请求，访问之后再将实际网站的响应作为用户数据发布。访问者的前台js脚本在收到响应结果后区分出自己访问的网站，并将结果渲染在屏幕上。\n\n---\n\n实测发现，用户数据提交后后台马上能收到响应，速度很快。但服务器返回结果后发布结果的过程比较慢，而且当前ZeroNet对新数据的发布间隔有最小限制，所以结果返回的过程比较耗时。\n\n这一网站基本没有实用价值，主要是验证了前文提出的全动态网站的可行性。期待其他人进一步改进这一程序，让ZeroNet中的代理实现更加实用。\n\n同时希望以此为基础，激发大家的想象力，在ZeroNet中创建出更加出色的动态交互网站\n\n",
			"date_modified": 1464068950.792
		},
		{
			"post_id": 15,
			"title": "MUD坑爹",
			"date_published": 1463985993.854,
			"body": "这两天尝试搭建一个完全ZeroNet版的MUD游戏，发现MUD实在太TMD坑爹了。\n---\n大致搜了下，这些开放的MUD游戏都是基于一个什么mudos的引擎写的，可是这货太老几年前就不更新了，要换fluffOS来运行。结果尝试了一下发现MUD这玩意发展了这么久，竟然还是用telnet来登陆操作的！没web界面！难怪这么小众。好在mudchina搞了一个webtelnet库，可以把telnet以web页面显示，基本上ZeroNet版的MUD就是照抄webtelnet的逻辑。可是一实践才发现，fluffOS的telnet连接非常不稳定！也不知道是中文版的问题还是fluffOS的问题，断了之后就连不上！拿MUD来就是想快速建个demo，调bug就免了。\n\nMUD计划，决定放弃。尝试过程中的种种问题，记在这里。\n\n服务端要调用channelJoin来接收其他用户更新数据的提醒。这一提醒将以setSiteInfo调用产生。site_info.event[0]==\"file_done\"，则site_info[1]为更新的用户数据路径。根据此属性即可判定哪个用户提交了新的请求。\n\n客户端方面，如果要发送新的请求则必须保证用户数据有区别。ZeroNet优化掉了文件不变但是重复publish的情况，会导致服务端不能接收到新的消息",
			"date_modified": 1463987595
		},
		{
			"post_id": 14,
			"title": "ZeroNet结构解析/全动态网站/无限制网站",
			"date_published": 1463533616.65,
			"body": "本文面向对ZeroNet**全动态**网站/**无限制**网站开发有兴趣的爱好者\n---\n\nZeroNet本身尚在发展阶段，开发者提供了最基本的框架和几个demo试用(也就是ZeroChat/ZeroBlog/ZeroTalk)。大家在使用这几个demo的过程中可能觉得ZeroNet不够强大，限制多多。对ZeroNet建立全功能网站的能力有所怀疑，但经过这段时间的摸索，我确认只要开发得当，ZeroNet完全可以做到和传统网站一样**全动态**和**无限制**。\n\n首先我们必须理解传统的动态网站的运行模式\n\n![](img/14/tradition.png)\n\n其中网站后台程序使用PHP等语言开发，可以实现任意的动态结果返回，后台数据库和存储空间都放在网站服务器上，也是没有任何限制的。\n\n\n\nZeroNet的浏览器访问一个已同步好网站时的流程则是如下图所示\n![](img/14/local_zeronet_browser.png)\n此过程所有的网站数据都是由**本地**运行的ZeroNet提供的。这个过程**不能使用任何网站后台语言**，只能读取网站中已有的**静态数据**（包括使用js查询ZeroNet自动生成的json数据库缓存）。其实从功能上来讲只不过把动态过程**从后台语言移动到了前台js**而已。只要你能把网站数据组织成**合适的json数据**结构，就完全可以**替代后台语言对数据库**的使用，区别只不过是性能上有差异(后文将使用其他办法来解决这个问题)。\n\n网站的动态交互性体现在两部分上\n1. 将网站已有的固定内容按用户的需求提供给用户\n    比如ZeroBlog中的日志，不论是按日期索引，按标签索引，还是翻到第N页，（甚至可以添加站内搜索）都仅仅是**对已有固定内容**的**不同展示方式**。用户的任何请求所产生的页面结果**仅对当前操作用户产生效果**，而**不会反映到其他访问者**的浏览结果中。\n   这部分功能，完全由**网站发布者控制**，只有发布者更新网站，浏览者才能看到新的内容。\n\n2. 用户可以提交**自定义**的数据，并**对其他人**的浏览结果**产生影响**。\n   比如ZeroBlog中提交的评论，ZeroTalk中的回复，ZeroChat中的留言。这部分功能，**规则**(限定可提交的类型和大小)由网站**发布者**制定，**内容**由每个**浏览者自行控制**。只要浏览者提交的数据**符合网站规则**，就可以**形成互动**效果。\n\n用户最希望的动态交互是第二点。下面就以最简单但是最能体现第二点的ZeroChat的模型来分析这一功能。\n\n![](img/14/multi.png)\n\nZeroChat本身只有一个空的留言页面，全部内容都是依靠所有用户提交的留言json来产生。ZeroChat的/data/users/content.json文件中规定了每个用户只能提交json文件且不能超出提交上限，每个用户都在/data/users/用户publickey目录/data.json保存自己所有的留言。这一结构很重要，因为publickey**不重复**，所以每个用户提交的数据都**不会冲突**，既然不冲突，那任一用户的数据都可以在**任意时间**同步而不会影响其他人的数据(比如同步失败)，所以才能达成**每个用户的分布式**存储而**无需中央存储**。\n\n当用户彼此提交的数据发布并且同步后，页面接收到来自本地ZeroNet程序的fileDone提醒，并重新加载json数据库，从而完成用户自定义数据影响最终页面的目的。\n\n\n这种动态网站交互，动态效果的产生完全**依靠用户数据提交**和**前台js展示**，我称其为\"无后台动态网\"(动态内容不是由后台产生)。ZeroBlog，ZeroTalk，ZeroChat都属于这种类型。这种网站虽然只依赖ZeroNet本身的功能，但是却有两个**缺陷**：\n\n1. 用户提交数据**有上限**，达到数据上限后用户必须**删除**部分数据（如删除自己的回复或者主题），才能继续发布新的内容。但这不是用户希望的使用方式。\n2. **不能做服务端校验**，这是最大的问题。数据提交完全是用户的行为，只要符合网站规则（限定的类型和尺寸），内容无法做校验。比如ZeroBlog，用户回复时提交的数据完全是依靠前台js构建，但用户可以修改js代码，提交**任意不合法**的数据（比如把自己的回复时间改成10年前来抢沙发）。就如p2p所言，[**只要懂一点ZeroNet论坛的原理，只用一个帐号就可以大量刷屏，轻易使论坛处于瘫痪状态**](/1Nse6WcodQ5Mj6ZwvZvuyCVvQESwuxbCUy/?Topic:38_13Z7XxTa7JuFat3KzzMWu3onwM6biLuurJ/)。尽管可以用权限功能屏蔽刷屏用户，但这只能被刷屏之后的补救措施。\n\n那么，是否可以将传统网站的无限制存储和服务端校验融合到ZeroNet中？\n\n**可以**\n\n不光可以实现**无限制存储**和**服务端校验**，还可以使用**任意后台语言**进行网站构建。再来回顾一下传统网站的操作流程，客户端（浏览器）将请求（或者说就是自定义数据）发送到服务器，服务器响应后回复动态数据\n![](img/14/tradition.png)\n再来对比下ZeroChat这种多用户交互的ZeroNet结构\n![](img/14/multi.png)\n可以看出，其实对于ZeroNet而言，用户数据的**发布**是广播向所有ZeroNet程序的，你可以把这种广播行为理解成**传统网站流程中的客户端请求**（只不过客户端不光是浏览器，还包括了做广播的ZeroNet），而ZeroNet站主**更新站点**的内容，将会广播向所有的访问者，你可以把这**看作是传统网站流程中的返回动态结果**。\n\n**也就是说，只要你运行一个自动应答程序，接收用户的数据提交，并按照你的逻辑更新这个站点，那么你就实现了一个完全可控的动态ZeroNet网站，你可以使用任何传统网站的开发功能**\n\n![](img/14/dynamic_zeronet.png)\n其中步骤1,2,3对应于传统网站中的客户端请求，步骤4,5,6对应于传统网站中的服务端响应。只不过客户端是**浏览器+ZeroNet程序**，服务端是**后台程序+ZeroNet程序**。服务端**只需要运行在站主的机器**之上，切可以访问任意的存储空间和数据库。访问者使用的仍然是**无需任何修改**的ZeroNet程序。我称之为**有后台的动态网**。\n\n这一流程并不是我的独创，实际上ZeroNet中为新站点做种的 [New 0Net Sites](/1LtvsjbtQ2tY7SCtCZzC4KhErqEK3bXD4n/)就使用了这个流程：用户提交的zeronet网址写入data/users/publickey/data.json并发布，而运行在站主机器上的定时任务扫描这些地址并访问本地的ZeroNet，从而达到自动做种的功能。\n\n回到前面的问题，有后台相比无后台者有何优势？\n\n1. **实现服务端校验**。站主**不再依赖无校验**的用户数据，而是**完全可控页面可见**的内容，如果有恶意用户提交非法数据，可以**选择不更新页面**，并且可以**自动屏蔽**恶意用户。\n2. 配合归档实现**无限制的用户数据保存**。以ZeroChat为例，后台程序在接收到用户留言之后，**自动**将通过服务端校验的数据**归档到网站的静态数据**中，并通知客户端哪些数据已经归档，客户端js即可根据此信息**自动回收已归档的数据空间**，从而实现无限制的用户数据保存。只要前台js是配合归档数据逻辑编写，可以**无缝**将归档数据和用户提交但尚未通过服务器归档的数据**合并**，做到**用户透明**。\n3. 用户数据由服务端统一处理，可以保证**可重现性**。例如我们实现一个多人在线游戏，虽然不同玩家接收到其他玩家数据的时间都是不一致的，但是在后台程序运行的机器上看来，**仅会发生一个接收的序列**，那么这一固定序列生成的游戏流程**对于每个人来说都是一致**的。但假如没有后台，那么游戏的流程只能依靠前台js脚本对接收到的他人数据做处理，每个人都可能是**不同的接收过程**，从而导致每个人看到**不同的游戏结果**(当然这也未必就一定是不好，我们可以根据这一特性来编写一个搞笑性质的“蝴蝶效应”游戏)。\n4.可以完全实现用户权限控制。ZeroNet虽然也有一些权限控制能力，但是相比后台程序的无限灵活性来说仍显不够。\n\n部分问题考虑：\n\n传统网站的请求和响应都是很快的，ZeroNet的这种模拟会不会太慢？\n\n尚在实践当中。ZeroNet添加了差分传输之后，对于大文件的小修改传输性能是可以接受的，对此尚有疑惑的人，可以尝试[telegram同步网](/1iMFEmmY4xyWTGi3Doot98nxeB2sqeEtX)查看新信息出现的速度，或者自己在telegram添加@zeronet_bot自己测试延迟。\n\n如果很多用户同时向后台发出请求，站点如何能够在一个站点里向不同用户展示他们各自的动态结果？\n\n后台程序更新站点的结果未必就必须是一个完整页面，他也可以是一个携带着自定义信息的json文件，比如其中可以描述此次更新中每个发出请求的用户各自得到的动态结果分别是什么，再通过客户端的js进行鉴别并展示，每个用户就得到了自己的结果。\n\n\n假如实现了用户数据的自动归档，那么比如ZeroTalk中自己已经被归档的留言回复，就变成了网站内容的一部分，而不是用户数据的一部分，是不是就**没法像现在一样修改**了？\n\n不是的。虽然数据已经被服务端归档成静态数据，但是网站可以设计一套“修改归档数据请求协议”，用户可以发布一个“我要修改归档数据”的请求，后台根据这一请求来修改已经归档的数据，实现一样的功能。实际上由于服务端校验的实现，这一功能可以更加限制严格，比如被锁定的主题的内容不可被更改。\n\n归档解决了用户数据限制的问题，但是不会让网站越来越大吗？\n\n取决于网站如何设计。例如ZeroChat，大部分只关心最新的聊天内容是什么，而很少有人愿意翻到上一页的全部历史，那么完全可以把**用户数据归档变成optional_file**，只有有需要的人才去查询历史数据。\n\n传统网站都提供了私信功能，但是用户数据文件是广播给所有人的，怎么确保不会被他人看到所有内容？怎么保证我在这个网站的信息不会泄露(例如一个日记网站)?或者说我想存自己的银行密码，连网站本身都不信任，怎么办？\n\n**公钥加密**。就像ZeroMail一样，你只要用私信对象的公钥来加密信息，就可以确保只有接收者本人能解密信息（就如同ZeroMail）。你只要用你自己的公钥加密信息，就可以确保只有你本人能解密信息。ZeroNet的API中是无法在js中获取用户密钥的，而只能通过特定的API接口和用户的id来解密信息(ZeroNet的user.json中维护着用户id和对应的密钥)，因此你完全不用担心网站会盗取你的私钥，并且网站所有的代码都躺在你的硬盘里，你可以随时检阅他们是否有风险。同样的，也可以使用公钥加密来保护每个用户与网站之间的私密性。比如，网站为每一个访问用户生成一个随机密钥对，用每个用户的公钥对随机公钥进行加密并发送给客户端，每个客户端使用自己的私钥解密，即得到了服务端独一无二的随机公钥，之后向服务器发送的所有信息都以此随机公钥进行加密，就保证了其他用户不可见自己与服务器后台之间的所有通信。",
			"date_modified": 1463786160.991
		},
		{
			"post_id": 13,
			"title": "telegram bot",
			"date_published": 1463407769.964,
			"body": "zeronet里有没有人使用telegram呢？zeronet不便之一就是没有移动客户端，现在大家可以添加telegram 中的[@zeronet_bot](https://telegram.me/zeronet_bot)与其对话，或者将此bot添加到群聊中，所有的聊天将会被同步至[telegram同步聊天室](/1iMFEmmY4xyWTGi3Doot98nxeB2sqeEtX)\n\n---\n\ntelegram开放了Bot API，可用来实现全自动化的对话交互，只需在telegram bot中监听所有对话，并将内容发送至ZeroNet的聊天室，即可完成此过程",
			"date_modified": 1464064189.065
		},
		{
			"post_id": 12,
			"title": "建站所感",
			"date_published": 1462846149.432,
			"body": "感谢网络时代，感谢那些在中国不遗余力普及常识的博主们。我无以为报，只能尽我之力，在ZeroNet里让更多人知道你们的存在。\n---\n[王思想](/19N6UtHDeGgSuuxw6GpZyffhx1gyQrw1jJ)是我的网络时代启蒙老师，因此码字的时候多多少少模仿了王思想的风格。王思想曾说过（大意）：\n\n     不要叫我思想家，我普及的都是**常识**。我起名王思想，还被大家认为是思想家，正说明中国现在**最缺乏的就是常识**。\n\n王思想的博客镜像，就是为了让更多人能接触到，所谓的常识，应该是怎样的。\n\n另外一个对我影响深重的博主是[冯学荣](/13LNE6beWu5ai3QKSysaZ7TKGqfDj6hXn5/)，他的特点是从经济学的角度去分析事件，把人当作是**利益驱动**的个体来看待。他的文章在表述事件发展时最注重的就是**原因**，而非事件本身的道德性或者所谓的国民性。\n\n张雪忠在《鲁迅、柏杨和龙应台等人的国民性批判错在哪里？—— 兼谈文艺和知识的区分》一文中的分析或可支持这一论点。即，人的行为模式是当前环境下的一种选择，而非是天生的属性。所谓的劣根性的表现，也并不单单就发生在中国人身上。\n\n抛弃单纯的结果认定，而去分析推动人的行为的利益原因，是非常重要的。利益，这个一直以来有点污名化的词语，也是很多人所缺乏的常识之一。向身边人普及社会的公平正义时，是一定不能离开利益话题的。刷朋友圈的人很难理解为什么我要去管什么浦志强，但他们能知道谴责僵尸肉。因为这关系到他们每天的利益。何况追求社会公平正义很高尚吗？追求社会的公平正义，恰恰是为了自己的利益受到合理的保护。\n        \n\n\n\n\n\n\n\n\n\n\n\n我也模仿了这一点，把自己称作一个牛逼的程序员。其实我对ZeroNet的修改根本算不上什么技术活，在熟练的程序员看来不过是体力活而已。但就是这样的举手之劳都没有人像我一样来做一做，只能说明现在ZeroNet里的程序员们**连体力活都做不了**。\n\n\n\n\n\n\n\n",
			"date_modified": 1462849920.504
		},
		{
			"post_id": 11,
			"title": "希望各位读者自己建站",
			"date_published": 1462277084.221,
			"body": "因为时间缘故，没有太多时间和各位来捧场的读者互动，并非装逼实在抱歉。希望各位读者都来建站，到时必然去留言扯淡。",
			"date_modified": 1462277222.248
		},
		{
			"post_id": 10,
			"title": "为ZeroBlog添加最近更改提醒，挖坑再填有提示",
			"date_published": 1462189395.182,
			"body": "ZeroBlog不方便的一点是Blog写完之后只会在主页有一次提醒，之后的修补就没有通知了，这个修改可以在左侧的订阅栏中添加跟踪最近修改的功能，这样每次填坑都会有提醒。直接覆盖index.html,js/all.js,dbschema.json即可。或者拿下面的补丁\n\n ```patch\ndiff --git a/dbschema.json b/dbschema.json\nindex b400d06..7955ef5 100644\n--- a/dbschema.json\n+++ b/dbschema.json\n@@ -46,6 +46,7 @@\n \t\t\t\t[\"title\", \"TEXT\"],\n \t\t\t\t[\"body\", \"TEXT\"],\n \t\t\t\t[\"date_published\", \"INTEGER\"],\n+        [\"date_modified\",\"INTEGER\"],\n \t\t\t\t[\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n \t\t\t],\n \t\t\t\"indexes\": [\"CREATE UNIQUE INDEX post_uri ON post(json_id, post_id)\", \"CREATE INDEX post_id ON post(post_id)\"],\n@@ -72,6 +73,8 @@\n \t},\n \t\"feeds\": {\n \t\t\"Comments\": \"SELECT 'comment' AS type, date_added, post.title AS title, keyvalue.value || ': ' || comment.body AS body, '?Post:' || comment.post_id || '#Comments' AS url FROM comment LEFT JOIN json USING (json_id) LEFT JOIN json AS json_content ON (json_content.directory = json.directory AND json_content.file_name='content.json') LEFT JOIN keyvalue ON (keyvalue.json_id = json_content.json_id AND key = 'cert_user_id') LEFT JOIN post ON (comment.post_id = post.post_id)\",\n-\t\t\"Posts\": \"SELECT post_id AS event_uri, 'post' AS type, date_published AS date_added, title AS title, body AS body, '?Post:' || post_id AS url FROM post\"\n+\t\t\"Posts\": \"SELECT post_id AS event_uri, 'post' AS type, date_published AS date_added, title AS title, body AS body, '?Post:' || post_id AS url FROM post\",\n+    \"Changes\":\"SELECT post_id AS event_uri, 'post' AS type, date_modified AS date_added, title AS title, body AS body, '?Post:' || post_id AS url FROM post\"\n+\n \t}\n }\n\\ No newline at end of file\ndiff --git a/index.html b/index.html\nindex 3f9746c..c0cbff2 100644\n--- a/index.html\n+++ b/index.html\n@@ -93,6 +93,7 @@\n     <span class=\"published\" data-editable=\"date_published\" data-editable-mode=\"timestamp\">21 hours ago &middot; 2 min read</span>\n     <a href=\"?Post:23:title\" class=\"comments-num\">&middot; <div class=\"icon-comment\"></div> <span class=\"num\">3 comments</span></a>\n     <a href=\"#Like\" class=\"like\" title=\"Like this post\"><div class=\"icon-heart\"></div><div class=\"icon-heart icon-heart-anim\"></div> <span class=\"num\"></span></a>\n+    <span class=\"modified\">1 hours ago</span>\n     <!--<a class=\"score\" href=\"#Upvote\">\n      <span class=\"score-inactive\"> <span class=\"icon-up\">^</span><span class=\"score-num\">0</span> </span>\n      <span class=\"score-active\"> <span class=\"icon-up\">^</span><span class=\"score-num\">1</span> </span>\n@@ -114,6 +115,7 @@\n   <div class=\"details\">\n    <span class=\"published\" data-editable=\"date_published\" data-editable-mode=\"timestamp\">21 hours ago &middot; 2 min read</span>\n    <a href=\"#Like\" class=\"like\" title=\"Like this post\"><div class=\"icon-heart\"></div><div class=\"icon-heart icon-heart-anim\"></div> <span class=\"num\"></span></a>\n+   <span class=\"modified\">1 hours ago</span>\n    <br>\n       <span class=\"tag\" data-editable=\"tag\" data-editable-mode=\"simple\">tag: </span>\n   </div>\ndiff --git a/js/ZeroBlog.coffee b/js/ZeroBlog.coffee\nindex 6e67691..390b3cc 100644\n--- a/js/ZeroBlog.coffee\n+++ b/js/ZeroBlog.coffee\n@@ -81,6 +81,15 @@ class ZeroBlog extends ZeroFrame\n       LEFT JOIN keyvalue ON\n       (keyvalue.json_id = json_content.json_id AND key = 'cert_user_id')\n       LEFT JOIN post ON (comment.post_id = post.post_id)\")\n+\n+    @follow.addFeed(\"Changes\", \"\n+      SELECT\n+       'changes' AS type,\n+       date_modified AS date_added,\n+       title AS title,\n+       body AS body,\n+       '?Post:' || post_id AS url\n+      FROM post\", true)\n     @follow.init()\n \n \n@@ -470,7 +479,9 @@ class ZeroBlog extends ZeroFrame\n     query = \"\"\"\n       SELECT COUNT(*) as post_id,\n         NULL as title,NULL as body,NULL as date_published,\n-        NULL as json_id, NULL as comments,NULL as votes\n+        NULL as date_modified,NULL as json_id, NULL as comments,\n+        NULL as votes\n+        \n       FROM post\n       UNION ALL\n       SELECT * FROM (\n@@ -645,6 +656,14 @@ class ZeroBlog extends ZeroFrame\n     $(\".details .published\", elem).html(date_published)\n         .data(\"content\", post.date_published)\n \n+    if post.date_modified\n+      date_modified = \"last modified: \" + Time.since(post.date_modified)\n+      $(\".details .modified\", elem).html(date_modified)\n+    else\n+      $(\".details .modified\", elem).html(\"last modified: \" +\n+        Time.since(post.date_published))\n+\n+   \n \n     $(\".details .tag\",elem).append(tagToHtml(tag))\n \n@@ -766,6 +785,7 @@ class ZeroBlog extends ZeroFrame\n         #so must exclude tag property changes.\n         if changeKey != \"tag\"\n           post = (post for post in data.post when post.post_id == id)[0]\n+          post.date_modified= new Date().getTime()/1000\n          \n           if elem.data(\"editable-mode\") == \"timestamp\" # Time parse to timestamp\n             content = Time.timestamp(content)\n```",
			"date_modified": 1462193556.433
		},
		{
			"post_id": 9,
			"title": "ZeroNet发展规划",
			"date_published": 1462018476.118,
			"body": "写给那些看到ZeroNet优势，希望ZeroNet发展壮大但又不知如何下手的人。\n\n\n来ZeroNet看到的第一个博客可能是NextBlog，内容大意是：ZeroNet还未找到自己的流量发展方向。实际上现在任何传统互联网之外的\"网络\"，都**不会**在世界上引发大规模的替代行为，你想想老外想扯淡看黄图可以上twitter，看视频可以上youtube,netflex，需求已经得到满足的他们为什么非要去用一个不受审查和监管的ZeroNet？只有那些非法买卖毒品枪支什么的才去Tor暗网。所以ZeroNet这些玩意**在国外注定是小众**玩具而不会是大众需求。\n\n但任何一个坚定在ZeroNet里混的人都应该理解这玩意唯独对中国人有特殊的意义。\n\n问题在于，如何让那些已经满足于墙内互联网的人，认识到ZeroNet能做到但是墙内互联网做不到的事情。人是由目的驱动的，不是说**你能理解**ZeroNet的意义，**别人**就会跟着你用。你必须站在一个满足于传统互联网的人的角度去看待ZeroNet，去思考究竟什么才能吸引你。\n\n\n想象一下，作为一个天天刷微博看朋友圈上知乎的人，有什么才是ZeroNet中独有的？说来无非是两类：**不受审查的自由讨论**，和**不受监管的内容分享**。但是对于一个长时间在墙内的人来说，也许根本体会不到不受审查的自由讨论的意义，甚至即使有这样的环境，他们也未必就会因此去尝试ZeroNet。所以不受监管的内容分享，是吸引普通人来ZeroNet的最大特点。\n\n根据ZeroNet代理bit.no.com 2016-5-9的显示数据，节点第一多的是种子分享站play，说明即使是老外，也对盗版电影**最感兴趣**，中文网方面，GFWTalk以1141个节点雄踞榜首，接下来节点最多的分别是ShadowsocksR网，GanXingQu网，东先生的ZeroBlog网，BDSM小说，jav库，浮生网志，编程随想的博客镜像。除去论坛类型的网站之外，两个黄网的节点数**竟然**比编程随想的博客镜像的还要多，虽然不排除很多人已经看过编程随想博客这一情况，但也说明即使在ZeroNet这样一个仍然很不完善的环境中，上网的宅男中仍然有很大一部分人就是想去看色情内容。接下来的排名是，中文聊天室，杨深锐的博客，零网教学wiki，各种福利blog，绅士本子网和推女郎。最能说明问题就是**推女郎网**，这一网站建立才有几天，但是**凭借几张美女裸图**，节点数马上超越了很多个人博客。\n\n个人页面**吸引人数能超过黄网**的，**只有**ShadowsocksR网和东先生的ZeroBlog网。**衷心欢迎**那些看不上用黄网来吸引用户的人，能建出ShadowsocksR和东先生**一样节点众多**的网站。如果你们建不出来，那对不起，我要专门写一篇博文来**嘲笑**你们的**无能**。\n\n除去色情内容外，ZeroNet还能做什么来吸引用户：\n\n[**MUD站**](?Post:15)：ZeroNet目前的问题之一是人气不够集中，很难有强烈吸引人参与交流的内容，实时性不高，但是可以满足文字(甚至是全图形化)MUD站的需求。只要把用户的评论当作输入指令，在Blog中用javascript实现一个简单的MUD是完全可以的(并不是生成一个实时的游戏，而是生成一长段类似于武侠小说般的文字)。每个人同步网站后，游戏状态都要根据全部评论重新生成，在未来可能成为瓶颈，可以考虑**按Blog切分**，一篇Blog的评论达到上限时，由网站发布者将当前章节的**最终状态保存**，作为下一篇的**起始状态**，即可解决此问题\n\n**视频直播网**: 不论是色情内容还是最新电影，视频直播都绝对是吸引用户的重要手段，但限于ZeroNet大文件支持的不完善，并不适合直接发布视频本身。剩下的选择就是**ipfs**或者**webtorrent**。我个人并不太看好ipfs，主要是还要捆绑ipfs的程序，如果不捆绑，则要依赖gateway。假如ipfs的js客户端足够完善，那么可以考虑使用。webtorrent的尝试实际上在ZeroNet里面已经有了[fastcast](/1qJ3EM5rTa2wPTBvJuCFjdLXjrBCgBkR8/)，尽管有些小问题，但已经达到了实用状态。完全可以作为研究的方向。\n\n**热点同步网**：利用爬虫实时将新闻，八卦，微博，推特热点信息同步至ZeroNet。Telegram开放了机器人API，可以使用机器人API将[**telegram和ZeroNet连接**](?Post:13)起来\n\n[**翻墙代理**](/157iuNRDp8x6ySz6fAamvxpv8zxE7RPsrS/)：ZeroNet本身并不是为翻墙而设计，但是完全可以设计一个自动应答网站，自动将用户评论中的网址内容当作ZeroNet的内容发布出来，成为一个翻墙网站。\n\n\n\n\n\n\n",
			"date_modified": 1464064662.104
		},
		{
			"post_id": 8,
			"title": "友站链接",
			"date_published": 1461970659.737,
			"body": "[ZeroBlog上第一个应用+1](/typeblog.bit/?Post:6:%E7%AC%AC%E4%B8%80%E4%B8%AA+ZeroNet+%E5%BA%94%E7%94%A8:+1s)\n\n[我们为什么要去中心化](/typeblog.bit/?Post:7:%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96) 来自[typeblog.bit](http://127.0.0.1:43110/typeblog.bit)\n\n\n[博客样式修改指南](/codegass.bit/?Post:7:%E4%B8%80%E4%B8%AA%E7%B2%97%E7%95%A5%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97) ，来自[codegress.bit](http://127.0.0.1:43110/codegass.bit/)\n\n\n"
		},
		{
			"post_id": 7,
			"title": "Markdown中插入任意javascript的测试页面",
			"date_published": 1461940187.663,
			"body": "本文用于测试，仅在打开此完整页面后才会执行markdown中嵌入的javascript脚本并跳出对话框 。测试chrome,firefox,IE10,edge, tor browser 5.5.5可用。如果未跳出内容，请检查浏览器是否开启包含广告过滤功能\n---\n<script>\n$(function(){\n alert('hello world');\n});\n</script>"
		},
		{
			"post_id": 6,
			"title": "ZeroNet/ZeroBlog功能解析",
			"date_published": 1461916659.628,
			"body": "本文面向的是**研究建立完全原生**的ZeroNet全功能网站的**有上进心和钻研精神**的程序员，对于这些人，我致以最大的敬意，这仅仅是个人接触ZeroNet的一点心得和笔记，完全是爱好者之间交流的意思，丝毫不含任何的教程之意。\n---\nZeroNet可以用来搭建网站，但是很多人疑惑的是能搭建怎样的网站，最后能达到怎样的动态效果。这里就分享一下本人对ZeroBlog的研究过程。\n\n首先，除去静态文件服务之外，ZeroNet的**客户端本地**服务器(注意是客户端)**不支持**任何一种现有的**后台编程**语言(如php等)。即使ZeroNet的代码是由python编写，你也无法用利用任何后台的python功能。在ZeroNet里想要产生动态网页，必须完全使用前台的Javascript(或者coffeescript等间接的Javascript语言)。ZeroNet也**不支持原生**的后台数据库，取而代之的是json文件和ZeroNet提供的json到SQLite的自动缓存建立。这一json文件到数据库表行的映射关系通过dbschema.json描述。\n\nZeroNet提供了一套基于coffeescript的API，封装了ZeroNet后台固定支持的几个功能，其中与动态网站开发关系最密切的就是**文件读写**。用户留言以及附件上传功能完全依靠文件写入API。ZeroBlog中的所有日志内容，就是通过读写data/data.json来完成，这一点已经在[通过ZeroBlog快速建站](?Post:4)中有详细描述。\n\nZeroNet对网站\"数据库\"处理理念是：Json文件是数据源，通过dbschema.json的描述自动建立SQLITE数据库用来自动创建数据库，前台coffeescript通过调用SQL语句来快速索引Json文件中的数据，但更新数据的功能，仍要通过读写原生Json完成。因此**读取快**，但是**修改慢**。当你在ZeroBlog里插入上千条博客后，会发现通过浏览器页面修改博客的操作会非常卡顿。\n\nZeroNet网站开发测试流程和API参考都可以在[官网](https://zeronet.readthedocs.io/en/latest/site_development/getting_started/)看到详细内容，不再赘述。需要注意的是浏览器缓存可能导致coffeescript的修改无法即时显现，chrome可在开发者工具中选择不缓存。\n\nZeroBlog的dbschema.json中指定了数据库位置为data/zeroblog.db，可用sqlite3或者firefox的sqlite manager直接打开此文件查看数据库表结构，其中post表即包含了data/data.json中post数组的全部内容。\n\nZeroBlog.coffee:\n\npageMain，主页面入口，通过SQL对应页面中的 15篇post记录，通过applyPostdata将记录填入index.html的对应div下。ZeroNet提供的API中SQL查询的结果为一个json对象，每一列映射为列名的属性。\n\n读post:\nindex.html中，applyPostdata每次都从.post.template clone一个节点，然后将SQL查询的结果转换到这个Dom节点。例如post.title将填入.title节点,post.body填入.body节点。并将Dom节点的id指定为post_id。由于最终显示的内容（比如body）是markdown渲染的，所以dom节点的html并不是最原始的字符串。applyPostdata中利用了dom的data属性来保存原始字符串。这样在用户点击修改时即可显示未经markdown处理时的原始字符串。\n\n当用户点击某一篇文章查看全文时同样走的是applyPostdata流程，只不过Dom节点变成了.post-full。唯一的区别在于主页面显示时仅会显示---之前的内容（也就是那个readmore功能），而全文时则全部显示。\n\n改post:\n当用户在对应区域点击编辑时，即可通过之前保存的data属性获取原始字符串。ZeroBlog把post节点下对应属性显示的html节点都标记了与属性名一致的data-editable标记，根据此属性即可确定当前修改的是post的哪一个属性。\n\n写post：\n用户修改完内容点击保存时，ZeroBlog使用fileGet API将data/data.json读取出来，然后根据Dom节点的id来搜索出对应的post元素，修改后再使用writeDate API将data.json写回，并将当前被修改的content按照显示类型(是否markdown渲染)更新回Dom节点的HTML。\n\n\n\n### ZeroBlog中markdown的trick用法\n\n实际上ZeroBlog中的markdown支持HTML嵌入，这就表示你不光可以在blog中显示任意的HTML，还表示你可以**嵌入任意的javascript**，在这个貌似简单的Blog中使用任意现有的javascript功能和第三方库。ZeroBlog默认集成了jQuery，因此你可以把jQuery官网教程中任一个例子搬到ZeroBlog中。你可以试试把以下内容插入到你的Blog正文中看看效果\n```html\n<script>$(function(){\n alert('hello world');\n});\n</script>\n```\n为避免每次看本文都跳框，效果可以看[测试页面](?Post:7)\n\n\n### 基于ZeroBlog建立模板网站\n\n虽然可以使用markdown的trick用法在blog正文中插入任意的javascript，但是这种方式需要在原文中保存大量的javascript内容，尤其当你想建立一套模板网站（比如所有的blog都是视频内容，或者都是图片内容）时，data.json中几乎都是重复内容，所以更为彻底的解决办法是修改ZeroBlog的applyPostdata函数，令其对于每一篇blog都做你所需要的trick处理。\n\n\n[绅士本子网(18x)](/1AEqp2aLHuyWRHpByNbSjKpTjmKQXA8iug/)就是这样一个为快速建立图库网站而设计的模板网站，其中使用fotorama插件来生成看图功能，并对图片展示做了优化，只要你的post.body以\n\ndir/prefix1~n.jpg\n\n开头，则Blog会自动生成 \ndata/pic/dir/prefix1.jpg \ndata/pic/dir/prefix2.jpg\n......\ndata/pic/dir/prefixn.jpg \n 的图库，利用这一模板，可以快速生成大量的图库网站。\n\n限于ZeroNet的限制，dir和prefix必须只包含ascii字符\n\n\n\n\n",
			"date_modified": 1463533601.898
		},
		{
			"post_id": 5,
			"title": "我要成为ZeroNet里的大独裁者",
			"date_published": 1461894202.903,
			"body": "ZeroNet并不是一个完全平等的网络，他仅仅是提供了平等发布信息的环境而已。在这个网络中，有能力发布信息的人，才是**贵族**，而不自己建网站或者发言的人，只不过变成了这个新网络中的**二等公民**而已，与传统的互联网中没有什么区别。\n\n但是，由于我是一个**牛逼的程序员**，可以在短时间内建立大量网站，所以我实际上成为了这个网络中最有资源的人，我可以借助我的网站影响力来对ZeroNet里的读者产生导向作用，也就是说我是ZeroNet版的人民日报和新闻联播，是新时代网络的**大独裁者**\n\n一旦有现实需求，我一定会利用我在ZeroNet里的网站资源优势来**操纵**所有读者，把那些**只懂得看别人网站**而**不知道自己发声**的人当成我最佳的护卫队，必要时，也可以操纵他们当**炮灰**。因为我的**技术更好**，又**更有想法**，所以我做起坏事来**更隐蔽**，比普通人**更坏**。\n\n现在我这个**大独裁者**向你们这些**二等公民**宣布：你们唯一能做的，就是每个人都去建立一个自己的网站，以你们不可估量的**数量**优势，来对抗我一个人的技术优势。互联网的平等体现在他的多元性上，即使你们每个人博客写的low逼到**吃喝拉撒**，也对这个网络的多元性产生了不可限量的贡献。但是因为我知道中国的大多数人都是**懒B**，即使他们看到这里也绝对不会有哪怕一丝一毫的醒悟，所以我完全不在乎让这帮**炮灰**看到这篇文章"
		},
		{
			"post_id": 4,
			"title": "通过ZeroBlog快速建站",
			"date_published": 1461893657.715,
			"body": "本文面向的是有一定编程语言基础，希望将手中已有的大量资源快速转换为ZeroBlog的程序员。\n\n---\n\n需要javascript、json、nodejs知识。如果只用过javascript也没关系，后面两个是辅助，可以在**5分钟**之内学会。\n\n好了5分钟已到，你已经懂了json和nodejs，可以往下看了\n\nZeroBlog的结构很好理解，所有的Blog都存放在data/data.json文件中，默认克隆后的空Blog中的data.json如下\n\n```javascript\n{\n        \"title\": \"MyZeroBlog\",\n        \"description\": \"My ZeroBlog.\",\n        \"links\": \"- [Source code](https://github.com/HelloZeroNet)\",\n        \"next_post_id\": 2,\n        \"demo\": false,\n        \"modified\": 1432515193,\n        \"post\": [\n                {\n                        \"post_id\": 1,\n                        \"title\": \"Congratulations!\",\n                        \"date_published\": 1433033779.604,\n                        \"body\": \"Your zeronet blog has been successfully created!\"\n                }\n        ]\n}\n```\n\n\n你要做的就是写一个js脚本，把data.post数组填充成你想要的数据。\n\nnodejs库 [jsonfile](https://www.npmjs.com/package/jsonfile)可以用来读写json文件,npm install安装后可在你的js中引用。\n\n```  javascript\nvar jsonfile = require(\"jsonfile\");\ndataJson = jsonfile.readFileSync(\"data.json\");\n\nvar newPost = {\n     title: \"my js post\",\n     post_id: dataJson.next_post_id,\n     date_published: new Date().getTime()/1000,\n     body:'your markdown'\n};\n\ndataJson.post.push(newPost);\ndataJson.next_post_id++;\n\njsonfile.writeFileSync(\"new_data.json\",dataJson);\n```\n\n以上步骤就是nodejs读取data.json，更新后写入new_data.json的所有步骤，即使**不是程序员**也应该**一眼就能理解**这段代码的逻辑。接下来只需要检查下new_data.json内容是否正确，然后覆盖即可。由于ZeroNet的工作模式，前台页面不会马上刷新，可中断ZeroNet后在终端手动执行dbRebuild后再重开，即可看到你手动更新的结果。\n\n接下来你只需要寻找到合适的咨询来源，无论是你保存的小说还是别人已有的日志，只要把他们填入post，你的ZeroBlog马上就拥有了海量的内容。\n\n如果你使用的ZeroBlog模板**支持tag分类**，那么可以通过控制data.tag数组来为Blog添加tag。\n\n```javascript\ndataJson.tag.push({\nvalue:'mytag',\npost_id:3\n});\n\ndataJson.tag.push({\nvalue:'tag2',\npost_id:3\n});\n```\n以上代码将为post_id为3的日志添加mytag和tag2标签。需要注意的是同一个blog**不可有重复的标签**，否则在dbRebuild时不会成功。\n\n## 爬虫资源和RSS资源\n\n在之前的基础之上，你可以进一步编写网络爬虫，**实时**从网上抓取最新最实时的网站信息作为数据来源。解析网站提供的RSS订阅，是比较简单，最容易上手的方式\n\nRSS解析库可使用nodejs库[feedparser](https://www.npmjs.com/package/feedparser)，你要做的就是把这个API介绍的例子里面的RSS地址换成你自己的地址，把\n\n``` javascript\n  while (item = stream.read()) {    \n      console.log(item);  \n}\n```\n改成\n```javascript\n  dataJson.post.push({\n    title:item.title,\n    date_published:new Date(item.pubdate).getTime()/1000,\n    body:item.description,\n    post_id:xxx\n});\n```\n即可。这种方式适合于RSS订阅中包含了完整文章的类型，比如[INXIAN](https://feeds.feedburner.com/inxian)。对于RSS订阅中没有完整包含全部文章的情况，可通过rss的link属性获取完整页面的链接，然后用[jsdom](https://www.npmjs.com/package/jsdom)和jQuery来萃取你所需的网页元素。[jsdom](https://www.npmjs.com/package/jsdom)页面包含了实例代码，你完全可以照抄后用在自己的转换脚本中。jQuery是通过CSS selector来快速操作HTML Dom的一个js库，因此用它萃取页面元素需要HTML Dom和CSS知识。对此有基础的程序员应该在看到jQuery实例之后**20s内理解**jQuery的含义。在此仅提供几个操作提示。\n\nrequest库新版需要nodejs4.x\n\nchrome可使用jQuery-injector来快速插入jQuery并在console中测试你的jQuery结果\n\nnode-inspector可以使用chrome的debug界面调试你的nodejs脚本\n\n对于被墙的地址可使用http_proxy环境变量令nodejs通过代理访问，但此方法可能令node-inspector调试中断，可预先下载要访问的网络资源，然后通过nodejs的[http-server](https://www.npmjs.com/package/http-server)架设本地访问，方便调试。\n\n以上内容对于一个程序员来说，已经是**手把手**的教程了，任何一个**有自尊和自觉**的程序员应该**动动他们的脑子**去把自己所缺失的那部分知识去Google补上。不要TMD来这**问json是什么**，**jQuery怎么用**。我这样一个**牛逼的程序员**的时间很宝贵，没有时间和义务去教授同行这些他们**完全可以自学**的内容。\n",
			"date_modified": 1465278853.654
		},
		{
			"post_id": 3,
			"title": "ZeroNet网站开发索引",
			"date_published": 1461891496.599,
			"body": "每个人都应该创建自己的ZeroNet网站，不同人群要选择不同的建站流程。\n\n一般爱好者，写着玩的，可参考xxx的教程，简单说就是在主页面上你觉得好看的网站上克隆，然后剩下的就是在页面里更新。现在的各种福利Blog就是这样人肉完成的\n\n想快速把现有网站搬家进来的，可以考虑使用wget把网站转成静态的，直接放入ZeroNet发布。这种方式最快，但转换后的网站有很多外网链接，文件较多也不太方便ZeroNet里其他人同步。早期的王思想博客就是这样完成的。\n\n进一步来说，可将网站内容[转成ZeroBlog](?Post:4)的格式。通过写入tag来为网站做交叉索引，虽然显示上只有ZeroBlog的效果，但是已经具备了完整网站的特性。目前通过这种方式建站，成本最低，见效最快。是推荐各位使用的方式。对于想用这种方式快速建立网站的人群，需要学习的是如何写一个脚本，快速的把已有的内容转换成ZeroBlog的格式，也就是data.json。这部分内容需要的是javascript脚本知识。\n\n再进一步，如果想在现有的ZeroBlog上添加更多花哨的功能或者改动，就需要理解ZeroBlog/ZeroNet的实现逻辑，主要需要的是SQL和coffeescript脚本知识。基本理解了这一步之后，最后就可以完全建立自己的ZeroNet网站\n\n"
		},
		{
			"post_id": 1,
			"title": "开博第一骂，痛骂程序员",
			"date_published": 1433033779.604,
			"body": "  今天开博客，暴露很多个人信息实属无奈，毕竟zeronet里**像我一样牛逼的程序员已经找不到第二个了**。但是这个zeronet里净是一群水平不如我，只会打嘴炮又特爱在我面前装逼的人，今天必须痛骂这群人。\n\ngfw是根大鸡巴，每天都在强奸13亿人。大部分人就像调教系列里的女优一样，把被奸当成每天的日常任务了。\n\n那些活在**中国的程序员，百分之九十九也都在被天天爆菊**。然而这一群平时在互联网上大谈技术的装逼群体，竟然没有几个敢于把每天撸管的时间拿来**研究一下gfw是怎么艹自己**的。\n\n有人说大名鼎鼎的shadowsocks的作者clowdy是妹子我觉得很有可能，不然他就只会把他身为**男性程序员的钻研精神**用在找番号上。\n\n身为程序员，又生在天朝，生而肩负**不可推卸的推墙责任**。对于那些没有对此做出贡献的男程序员来说，假如clowdy是女性，那这就是他们身为男人的耻辱。假如clowdy是男性，那他们在clowdy面前就不配叫做男人，只能叫太监。\n\n如果是一个普通人学会翻墙，那是值得赞赏的，但假如一个程序员因为自己会翻墙就自以为摆脱了gfw，从而无视越来越烂的网络环境，那可真是可笑之极。每个程序员在写下代码的那一刻，都是这个虚拟世界的上帝，然而你却和普通人一样把时间花费在翻墙上，你们有什么资格自诩高人一等？不过是**口爆**变成了**颜射**而已。\n\ngoogle ip被封，goagent败阵，vpn厂商被约谈，不经审查不能入华，gfw融入流量识别和机器学习，ss越用越卡，今年连白名单都在放风了，gfw卡住你们下体的手越攥越紧，难道你们真要等到被掐碎了蛋蛋才知道自己也是被**温水煮熟的青蛙**？\n\n有些人天真的认为，**物理断网了，大家就上街**，真是**笑话**。除了程序员，有多少人能知道物理断网了？就是知道断网了的程序员，有几个有这个胆量？现在有几个上街抗议google被禁的程序员？\n\n中国的程序员是最有能力对抗gfw的人群，却也是最可恶的一群人，他们手中握有这个时代最先进的技术手段，却没有几个人有脑子去用。\n\nzeronet也许是中国男性程序员洗刷自己耻辱最好的，也可能是最后的一次机会，建立更多网站，能让更多普通人接触并留在zeronet，正是中国男性程序员现在应该废寝忘食去做的一件事。\n\n为什么要吸引普通人来用zeronet？使用的人够多，流量够多，你就不用每次都挂着tor。另外，让普通人使用这一无审查的平等网络，更是中国程序员义不容辞的责任，没有为此做出贡献的人，愧对python，愧对HTML，愧对javascript，愧对TCP/IP，愧对你脑袋上程序员这三个字。\n\n假如一个普通人说zeronet里资源太少不爱玩那情有可原，毕竟他们是小白，累死也只能弄出一个blog来，但身为一个程序员要是说出这种话，真应该删了他自己所有的代码然后转行去卖红薯。你只要写两行代码，就能把世界上任一个已经存在的人气资源搬进ZeroNet，你在这里就是最大的资源，你他妈有什么脸说zeronet里的资源少？\n\n那些有点自尊心的程序员，我要在这里碾压你，我的本职工作是C++，业余自学jQuery和SQL，不懂python、coffeescript，也不懂HTML里CSS控制的究竟是什么意思，也没用过nodejs。但是我在决定为ZeroNet做贡献之后，\n   我2个小时之内就用python写出建站脚本，1天就开始写coffeescript，两天后就用nodejs更新网站。\n   你们这种**看到了源代码**之后还懒得去用，懒得去研究学习，懒得去做贡献的，在我面前就是**战5渣**。在你们没有**建出一个像样的网站出来**之前，不要说自己是程序员。\n\n\n\n"
		}
	],
	"tag": [
		{
			"value": "程序员",
			"post_id": 3
		},
		{
			"value": "程序员",
			"post_id": 4
		},
		{
			"value": "后台网站",
			"post_id": 13
		},
		{
			"value": "后台网站",
			"post_id": 14
		},
		{
			"value": "撕逼",
			"post_id": 19
		}
	]
}