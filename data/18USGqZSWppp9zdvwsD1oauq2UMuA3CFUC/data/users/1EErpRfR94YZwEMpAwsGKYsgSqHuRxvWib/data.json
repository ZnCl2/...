{
	"pages": [
		{
			"id": "27c9b7e0-5380-11e7-9eb8-19a323a32633",
			"body": "First of all, a TL;DR for the impatient:\n1. aDTN is a protocol that works on the network layer, like IP, but without addressing\n2. someone looking at aDTN traffic only sees wireless devices broadcasting (i.e. not addressing to anyone in particular) random garbage of a fixed size at a constant rate\n3. ... unless that someone has shared keys with other users of the network they know and trust (i.e. *friends*), in which case it can make sense out of the \"garbage\" its friends are sending and retrieve the encoded messages\n4. received messages are stored on the device, and forwarded automatically later, so eventually they might reach the entire network\n5. non-friends do not know who is friends with whom, nor who is communicating with whom\n6. it offers anonymity protection to its users in the face of very strong adversaries, in contrast to existing device-to-device wireless systems like FireChat or Rumble\n\n# Understanding the aDTN protocol\n\naDTN is a network layer protocol for communicating anonymously over mobile, wireless, infrastructureless networks. What does this mean? And don't other systems already do that? Let's try to explain aDTN, step by step.\n\n## Network layer protocol\n\nA network layer protocol is a communication protocol that is used to transport data from one machine to another. For example, the Internet Protocol (IP) allows a computer, identified by an IP address, to send and receive packets of data over the Internet.\n\nThis is not the only way to transmit data between two machines. Most of the communications we know probably take that form, but we can do things differently. We can use different identifiers and different rules to send the data.\n\nAnd we can also not use any identifiers at all, which is the case in aDTN. This prevents a user from being associated to a piece of transmitted data via an identifier. How it all works will hopefully be clear to you by the end of this text.\n\n## Mobile networks\n\nA mobile network does not necessarily refer to a network of mobile phones. A mobile device could be any kind of computer that can be carried around, including not only mobile phones, but also laptops, gaming consoles, mini-computers like the raspberry pi, wearable devices like google glasses and smart watches, etc.\n\nOn a wired network the machines usually are not mobile. At most, they tend to turn on and off, but that's it. When they are powered on, usually they appear again on the same location and are connected to the same device as before. Also, \"bulkier\" computers such as servers mostly stay online at the same place over a longer period of time and retain their address, which allows things like Tor relays and exit nodes to exist.\n\nIn a wireless network, most user devices are mobile and can get in and out of range of each other. If you have a network consisting of only wireless mobile devices (see the section on infrastructureless networks below) which keep on changing their location and going out of range unpredictably, you can hardly run the Tor protocol on it, since the pre-computed paths required for onion routing may not exist anymore when the data is sent.\n\n## The wireless medium\n\nI don't think I have to explain what a wireless network is. You have probably used WiFi or Bluetooth at some point in your life. However, there is still a small detail I want to point out:\n\nThe communication medium of a wireless network is completely different than that of a wired network.\n\nWhen you use a cable to connect your computer to another device (e.g. a router or switch), you know that, in general, those are the only two devices which can send or receive packets (technically \"frames\", but let's call them packets) on that medium. I say \"in general\" because there have been eavesdropping attacks to Ethernet cables in the past, but they are by no means easy to perform, and if the cable connecting both devices is entirely within your field of vision, you will probably be able to detect such an attack.\n\nOn the other hand, the wireless medium is shared between all the wireless devices within range of each other. For instance, to separate our home WiFi network from those of our neighbors, we usually choose a fancy name to identify our network and make sure our own devices can talk to each other. Additionally, to make sure that our neighbors' devices do not talk to ours, or to prevent some unknown person from using our Internet access via the wireless network, we add some form of protection to our network, preferably using a cryptographically secure protocol to authenticate the devices.\n\n## Infrastructureless network\n\nThere is one catch regarding the security of WiFi networks. In order to authenticate your device to the network, you actually authenticate your device to a central node, the access point (AP), which usually goes by the name of \"wireless router\".\n\nAn AP is considered infrastructure. If you did not have it in your home, you would have a bit of trouble connecting your devices with one another wirelessly. They have the physical capability to do so, but most often the software that they carry does not enable them to coordinate. Hence, when most people think of a wireless network, they think of the classical AP as a gateway both to the Internet and their local network. (The Internet, by the way, is also infrastructure, but not wireless, so I won't talk much about it here.)\n\nAnother kind of wireless communication that we use which relies on infrastructure is the cellphone network. Even if your friend is sitting in front of you at the café, if you send them an SMS, that piece of data will first travel to the nearest cell tower, controlled by some telecommunication provider. Or if you both are connected to the Internet via a hotspot offered by the café and you send an email to your friend, that email will first travel through the hotspot and then through the Internet to your mail server, then to your friends' mail server and back through the hotspot to your friend's device.\n\nThese communication channels are vulnerable to surveillance and censorship by the infrastructure operators, and usually you also pay for using them. So now imagine if you had the option to bypass all the infrastructure (cell towers, wireless hotspots, the Internet, etc.) to wirelessly transmit digital data to the devices of the people around you -- also called device-to-device communication. Isn't that a lot more sensible? It gives you control over your privacy and does not cost you more.\n\nYou have probably heard of FireChat, which was widely used in the Hong Kong student protests some years ago. When the Chinese authorities decided that it was better to turn off the communication networks to prevent the protesters from organizing their actions, the young folks took their phones from their pockets and used FireChat to communicate in local chatrooms over a wireless network built on the spot without any infrastructure. Now if the authorities wanted to silence the protesters, they would have to seize every single phone, which they obviously could not do.\n\nThere are more projects of the kind. For example, Rumble is a social network for off-the-grid-communication, and the Serval project, which aims to use wireless devices to build a mesh network, was successfully employed in disaster relief operations when storms and floods destroyed communication infrastructure.\n\nBut I am here to present you aDTN, so there must be a scenario where the previous systems are not adequate. aDTN also builds a local wireless network that bypasses infrastructure, so what is different?\n\n## Anonymity\n\naDTN was designed to protect the users' privacy by hiding their identities. In other words, it supports anonymity by design. But since most people have a different concept of anonymity, and \"anonymity\" can be a rather vague concepts, here goes a brief introduction to the related terminology.\n\nIf you want to communicate anonymously over the Internet, nowadays you are probably going to use Tor. It attempts to protect you from a certain class of attackers, whose goal is to see to which device you are sending a packet to over the Internet. In other words, they want to link the sender's address to the recipient's address. This property is called *linkability*. So we can say that the goal of Tor is to make the sender and the recipient *unlinkable* (relationship anonymity.)\n\nThere are other forms of unlinkability, such as unlinkability between a message and its sender (sender anonymity), a message and its recipient (recipient anonymity), a message and its acknowledgement, a message and its reply, etc. Any two \"entities\" in a network, be they people or data, that have a relationship of some kind may need to be unlinkable in the eyes of an undesired observer.\n\nAdditionally there are other anonymity-related privacy protection goals, such as *undetectability*. It means that not only are the related entities unlinkable by some category of attacker, but also that the attacker is not sure that they exist at all. For example, if you send an undetectable message after encrypting it to look like random bits, and everyone is also sending random bits, then the attacker doesn't even know your message is there hiding in the traffic. You can even claim that you did not send anything meaningful, conferring you the possibility to deny any involvement in communication (also called plausible deniability).\n\nThe privacy protection goal of aDTN is to make communication *undetectable to anyone that you do not trust*. And now I can finally explain how it works.\n\n## So how does aDTN exactly achieve undetectability?\n\nAs I said above, since the nodes in aDTN are mobile, we cannot have relay nodes like Tor to hide the path of a packet as it travels from the sender to the recipient. So in aDTN we completely rethink the data dissemination approach: *everyone acts a relay node*. You store all the data you receive, and forward them when other users are around (this is called delay-tolerant networking, opportunistic networking or also store-carry-and-forward networking).\n\nHowever, you cannot have multiple layers of encryption for every packet of data you send, because you cannot plan a path in advance, so you can only add one layer of encryption. This doesn't sound very secure, because you cannot trust some random node you just met to hide the path of your packet. If that node is an attacker, then it can see whom you want to send the packet to. Your communication has been deanonymized.\n\nThe obvious solution is to only allow people that you trust in real life to be the recipients of your packets. Only they can decrypt the packets you send, instead of some random device you find in the network. Key exchange should not pose a problem, since you have to be near your friends to exchange packets wirelessly anyway.\n\nTo prevent an attacker from correlating traffic, there are two properties that the aDTN network must satisfy: **1.** nodes send packets at a constant rate, even if they have nothing meaningful to send (so an adversary cannot perform timing attacks), and **2.** the messages get padded to a certain fixed length, and then encrypted, forming a packet. If you use proper cryptography, the same message looks different when it is encrypted into a new packet, and is indistinguishable from the rest of the traffic at every hop, which looks like random junk if you do not own the right keys. Since you do not need any address, time-to-live or hop-count fields, or any other information that could be used to correlate traffic, anyone whom you do not trust cannot make any sense of what you are sending.\n\nDue to the limitation of available links, this system is not designed for real-time communications. On the other hand, if all the participants of, say, a discussion in a chat room are within a few hops of each other and their \"social trust graph\" is connected, then replies in the discussion usually arrive within a few seconds, so it is not completely unusable in such cases. We are planning to implement several services over this protocol: a public \"shoutbox\", where anyone can post messages anonymously, private messaging, a file sharing platform and local chat rooms.\n\nIf you want to have a more technical description of the protocol, please see [this wiki entry](../18USGqZSWppp9zdvwsD1oauq2UMuA3CFUC/?Page:how-does-the-adtn-protocol-work).\n\n## Paranoid level over 9000 - get your tinfoil hat ready!\n\nA useful application for the aDTN protocol is the scenario of a mass protest under strong surveillance, for example being at a long-term protest site like blockupy.\n\nA given participant will probably not go alone and their friends will also have other sets of people they know and trust, so they can relay packets to other groups while hiding that they came from that participant. Not even their friends can be sure that the packets were first sent by that participant.\n\nParticipants may wish to set their phones or tablets in airplane mode so that they do not connect to the local cellular network, which would let authorities easily know that they are in the area. Perhaps there will even be trusted associations that can act as major relays between disconnected groups of people and who can even push event news and reports to an online platform on behalf of the protesters who are afraid to be exposed if they did connect to the surveilled infrastructure.\n\nMost people may be happy to use existing solutions such as FireChat for this, but it was not designed with a strong adversary in mind. A state-level adversary that spreads eavesdropping devices among a large group of FireChat users can see with whom people are exchanging messages, store and correlate traffic, and easily communicate directly to a user of its choosing. Communication via FireChat is at best pseudonymous, but not necessarily anonymous.\n\nOf course one may argue that such an adversary is completely unrealistic, but fact is that such capabilities are easily available nowadays. One just needs e.g. the eavesdropper devices to have Internet access to a large data processing system specifically designed to analyse FireChat traffic. Compared to the amount of data that Google or Amazon can process, this is nothing.",
			"date_added": 1497719554654,
			"slug": "introduction-to-adtn"
		},
		{
			"id": "0a45f880-66cf-11e6-98a1-03998ddfa447",
			"body": "# How does the aDTN protocol work?\n\nContent is coming soon. For now you can read a high-level description of aDTN here: http://arxiv.org/pdf/1507.08475.pdf \n",
			"date_added": 1471695009800,
			"slug": "how-does-the-adtn-protocol-work"
		},
		{
			"id": "77609970-621a-11e6-969d-8dcea8199536",
			"body": "# How does the aDTN protocol work?\n\nContent is coming soon (estimated: August 14, 2016), for now you can read a high-level description of aDTN here: http://arxiv.org/pdf/1507.08475.pdf \n",
			"date_added": 1471177649288,
			"slug": "how-does-the-adtn-protocol-work"
		},
		{
			"id": "eccb5fc0-612e-11e6-bf9d-2906cac705d1",
			"body": "# How does the aDTN protocol work?\n\nContent is coming soon (estimated: August 13, 2016), for now you can read a high-level description of aDTN here: http://arxiv.org/pdf/1507.08475.pdf ",
			"date_added": 1471076485053,
			"slug": "how-does-the-adtn-protocol-work"
		},
		{
			"id": "85eafcb0-600d-11e6-b9b4-b15333988b9d",
			"body": "# How does the aDTN protocol work?\n\nContent is coming soon (estimated: August 12, 2016), for now you can read a high-level description of aDTN here: http://arxiv.org/pdf/1507.08475.pdf ",
			"date_added": 1470952187899,
			"slug": "how-does-the-adtn-protocol-work"
		},
		{
			"id": "0e92ec90-600d-11e6-b41b-d32bb7f6f7d0",
			"body": "First of all, a TL;DR for the impatient:\n1. aDTN is a protocol that works on the network layer, like IP, but without addressing\n2. someone looking at aDTN traffic only sees wireless devices broadcasting (i.e. not addressing to anyone in particular) random garbage of a fixed size at a constant rate\n3. ... unless that someone has shared keys with other users of the network they know and trust (i.e. *friends*), in which case it can make sense out of the \"garbage\" its friends are sending and retrieve the encoded messages\n4. received messages are stored on the device, and forwarded automatically later, so eventually they might reach the entire network\n5. non-friends do not know who is friends with whom, nor who is communicating with whom\n6. it offers anonymity protection to its users in the face of very strong adversaries, in contrast to existing device-to-device wireless systems like FireChat or Rumble\n\n# Understanding the aDTN protocol\n\naDTN is a network layer protocol for communicating anonymously over mobile, wireless, infrastructureless networks. What does this mean? And don't other systems already do that? Let's try to explain aDTN, step by step.\n\n## Network layer protocol\n\nA network layer protocol is a communication protocol that is used to transport data from one machine to another. For example, the Internet Protocol (IP) allows a computer, identified by an IP address, to send and receive packets of data over the Internet.\n\nThis is not the only way to transmit data between two machines. Most of the communications we know probably take that form, but we can do things differently. We can use different identifiers and different rules to send the data.\n\nAnd we can also not use any identifiers at all, which is the case in aDTN. This prevents a user from being associated to a piece of transmitted data via an identifier. How it all works will hopefully be clear to you by the end of this text.\n\n## Mobile networks\n\nA mobile network does not necessarily refer to a network of mobile phones. A mobile device could be any kind of computer that can be carried around, including not only mobile phones, but also laptops, gaming consoles, mini-computers like the raspberry pi, wearable devices like google glasses and smart watches, etc.\n\nOn a wired network the machines usually are not mobile. At most, they tend to turn on and off, but that's it. When they are powered on, usually they appear again on the same location and are connected to the same device as before. Also, \"bulkier\" computers such as servers mostly stay online at the same place over a longer period of time and retain their address, which allows things like Tor relays and exit nodes to exist.\n\nIn a wireless network, most user devices are mobile and can get in and out of range of each other. If you have a network consisting of only wireless mobile devices (see the section on infrastructureless networks below) which keep on changing their location and going out of range unpredictably, you can hardly run the Tor protocol on it, since the pre-computed paths required for onion routing may not exist anymore when the data is sent.\n\n## The wireless medium\n\nI don't think I have to explain what a wireless network is. You have probably used WiFi or Bluetooth at some point in your life. However, there is still a small detail I want to point out:\n\nThe communication medium of a wireless network is completely different than that of a wired network.\n\nWhen you use a cable to connect your computer to another device (e.g. a router or switch), you know that, in general, those are the only two devices which can send or receive packets (technically \"frames\", but let's call them packets) on that medium. I say \"in general\" because there have been eavesdropping attacks to Ethernet cables in the past, but they are by no means easy to perform, and if the cable connecting both devices is entirely within your field of vision, you will probably be able to detect such an attack.\n\nOn the other hand, the wireless medium is shared between all the wireless devices within range of each other. For instance, to separate our home WiFi network from those of our neighbors, we usually choose a fancy name to identify our network and make sure our own devices can talk to each other. Additionally, to make sure that our neighbors' devices do not talk to ours, or to prevent some unknown person from using our Internet access via the wireless network, we add some form of protection to our network, preferably using a cryptographically secure protocol to authenticate the devices.\n\n## Infrastructureless network\n\nThere is one catch regarding the security of WiFi networks. In order to authenticate your device to the network, you actually authenticate your device to a central node, the access point (AP), which usually goes by the name of \"wireless router\".\n\nAn AP is considered infrastructure. If you did not have it in your home, you would have a bit of trouble connecting your devices with one another wirelessly. They have the physical capability to do so, but most often the software that they carry does not enable them to coordinate. Hence, when most people think of a wireless network, they think of the classical AP as a gateway both to the Internet and their local network. (The Internet, by the way, is also infrastructure, but not wireless, so I won't talk much about it here.)\n\nAnother kind of wireless communication that we use which relies on infrastructure is the cellphone network. Even if your friend is sitting in front of you at the café, if you send them an SMS, that piece of data will first travel to the nearest cell tower, controlled by some telecommunication provider. Or if you both are connected to the Internet via a hotspot offered by the café and you send an email to your friend, that email will first travel through the hotspot and then through the Internet to your mail server, then to your friends' mail server and back through the hotspot to your friend's device.\n\nThese communication channels are vulnerable to surveillance and censorship by the infrastructure operators, and usually you also pay for using them. So now imagine if you had the option to bypass all the infrastructure (cell towers, wireless hotspots, the Internet, etc.) to wirelessly transmit digital data to the devices of the people around you -- also called device-to-device communication. Isn't that a lot more sensible? It gives you control over your privacy and does not cost you more.\n\nYou have probably heard of FireChat, which was widely used in the Hong Kong student protests some years ago. When the Chinese authorities decided that it was better to turn off the communication networks to prevent the protesters from organizing their actions, the young folks took their phones from their pockets and used FireChat to communicate in local chatrooms over a wireless network built on the spot without any infrastructure. Now if the authorities wanted to silence the protesters, they would have to seize every single phone, which they obviously could not do.\n\nThere are more projects of the kind. For example, Rumble is a social network for off-the-grid-communication, and the Serval project, which aims to use wireless devices to build a mesh network, was successfully employed in disaster relief operations when storms and floods destroyed communication infrastructure.\n\nBut I am here to present you aDTN, so there must be a scenario where the previous systems are not adequare. aDTN also builds a local wireless network that bypasses infrastructure, so what is different?\n\n## Anonymity\n\naDTN was designed to protect the users' privacy by hiding their identities. In other words, it supports anonymity by design. But since most people have a different concept of anonymity, and \"anonymity\" can be a rather vague concepts, here goes a brief introduction to the related terminology.\n\nIf you want to communicate anonymously over the Internet, nowadays you are probably going to use Tor. It attempts to protect you from a certain class of attackers, whose goal is to see to which device you are sending a packet to over the Internet. In other words, they want to link the sender's address to the recipient's address. This property is called *linkability*. So we can say that the goal of Tor is to make the sender and the recipient *unlinkable* (relationship anonymity.)\n\nThere are other forms of unlinkability, such as unlinkability between a message and its sender (sender anonymity), a message and its recipient (recipient anonymity), a message and its acknowledgement, a message and its reply, etc. Any two \"entities\" in a network, be they people or data, that have a relationship of some kind may need to be unlinkable in the eyes of an undesired observer.\n\nAdditionally there are other anonymity-related privacy protection goals, such as *undetectability*. It means that not only are the related entities unlinkable by some category of attacker, but also that the attacker is not sure that they exist at all. For example, if you send an undetectable message after encrypting it to look like random bits, and everyone is also sending random bits, then the attacker doesn't even know your message is there hiding in the traffic. You can even claim that you did not send anything meaningful, conferring you the possibility to deny any involvement in communication (also called plausible deniability).\n\nThe privacy protection goal of aDTN is to make communication *undetectable to anyone that you do not trust*. And now I can finally explain how it works.\n\n## So how does aDTN exactly achieve undetectability?\n\nAs I said above, since the nodes in aDTN are mobile, we cannot have relay nodes like Tor to hide the path of a packet as it travels from the sender to the recipient. So in aDTN we completely rethink the data dissemination approach: *everyone acts a relay node*. You store all the data you receive, and forward them when other users are around (this is called delay-tolerant networking, opportunistic networking or also store-carry-and-forward networking).\n\nHowever, you cannot have multiple layers of encryption for every packet of data you send, because you cannot plan a path in advance, so you can only add one layer of encryption. This doesn't sound very secure, because you cannot trust some random node you just met to hide the path of your packet. If that node is an attacker, then it can see whom you want to send the packet to. Your communication has been deanonymized.\n\nThe obvious solution is to only allow people that you trust in real life to be the recipients of your packets. Only they can decrypt the packets you send, instead of some random device you find in the network. Key exchange should not pose a problem, since you have to be near your friends to exchange packets wirelessly anyway.\n\nTo prevent an attacker from correlating traffic, there are two properties that the aDTN network must satisfy: **1.** nodes send packets at a constant rate, even if they have nothing meaningful to send (so an adversary cannot perform timing attacks), and **2.** the messages get padded to a certain fixed length, and then encrypted, forming a packet. If you use proper cryptography, the same message looks different when it is encrypted into a new packet, and is indistinguishable from the rest of the traffic at every hop, which looks like random junk if you do not own the right keys. Since you do not need any address, time-to-live or hop-count fields, or any other information that could be used to correlate traffic, anyone whom you do not trust cannot make any sense of what you are sending.\n\nDue to the limitation of available links, this system is not designed for real-time communications. On the other hand, if all the participants of, say, a discussion in a chat room are within a few hops of each other and their \"social trust graph\" is connected, then replies in the discussion usually arrive within a few seconds, so it is not completely unusable in such cases. We are planning to implement several services over this protocol: a public \"shoutbox\", where anyone can post messages anonymously, private messaging, a file sharing platform and local chat rooms.\n\nIf you want to have a more technical description of the protocol, please see [this wiki entry](../18USGqZSWppp9zdvwsD1oauq2UMuA3CFUC/?Page:how-does-the-adtn-protocol-work).\n\n## Paranoid level over 9000 - get your tinfoil hat ready!\n\nA useful application for the aDTN protocol is the scenario of a mass protest under strong surveillance, for example being at a long-term protest site like blockupy.\n\nA given participant will probably not go alone and their friends will also have other sets of people they know and trust, so they can relay packets to other groups while hiding that they came from that participant. Not even their friends can be sure that the packets were first sent by that participant.\n\nParticipants may wish to set their phones or tablets in airplane mode so that they do not connect to the local cellular network, which would let authorities easily know that they are in the area. Perhaps there will even be trusted associations that can act as major relays between disconnected groups of people and who can even push event news and reports to an online platform on behalf of the protesters who are afraid to be exposed if they did connect to the surveilled infrastructure.\n\nMost people may be happy to use existing solutions such as FireChat for this, but it was not designed with a strong adversary in mind. A state-level adversary that spreads eavesdropping devices among a large group of FireChat users can see with whom people are exchanging messages, store and correlate traffic, and easily communicate directly to a user of its choosing. Communication via FireChat is at best pseudonymous, but not necessarily anonymous.\n\nOf course one may argue that such an adversary is completely unrealistic, but fact is that such capabilities are easily available nowadays. One just needs e.g. the eavesdropper devices to have Internet access to a large data processing system specifically designed to analyse FireChat traffic. Compared to the amount of data that Google or Amazon can process, this is nothing.",
			"date_added": 1470951987673,
			"slug": "introduction-to-adtn"
		},
		{
			"id": "04258d30-600d-11e6-b41b-d32bb7f6f7d0",
			"body": "First of all, a TL;DR for the impatient:\n1. aDTN is a protocol that works on the network layer, like IP, but without addressing\n2. someone looking at aDTN traffic only sees wireless devices broadcasting (i.e. not addressing to anyone in particular) random garbage of a fixed size at a constant rate\n3. ... unless that someone has shared keys with other users of the network they know and trust (i.e. *friends*), in which case it can make sense out of the \"garbage\" its friends are sending and retrieve the encoded messages\n4. received messages are stored on the device, and forwarded later, automatically, so eventually they might reach the entire network\n5. non-friends do not know who is friends with whom, nor who is communicating with whom\n6. it offers anonymity protection to its users in the face of very strong adversaries, in contrast to existing device-to-device wireless systems like FireChat or Rumble\n\n# Understanding the aDTN protocol\n\naDTN is a network layer protocol for communicating anonymously over mobile, wireless, infrastructureless networks. What does this mean? And don't other systems already do that? Let's try to explain aDTN, step by step.\n\n## Network layer protocol\n\nA network layer protocol is a communication protocol that is used to transport data from one machine to another. For example, the Internet Protocol (IP) allows a computer, identified by an IP address, to send and receive packets of data over the Internet.\n\nThis is not the only way to transmit data between two machines. Most of the communications we know probably take that form, but we can do things differently. We can use different identifiers and different rules to send the data.\n\nAnd we can also not use any identifiers at all, which is the case in aDTN. This prevents a user from being associated to a piece of transmitted data via an identifier. How it all works will hopefully be clear to you by the end of this text.\n\n## Mobile networks\n\nA mobile network does not necessarily refer to a network of mobile phones. A mobile device could be any kind of computer that can be carried around, including not only mobile phones, but also laptops, gaming consoles, mini-computers like the raspberry pi, wearable devices like google glasses and smart watches, etc.\n\nOn a wired network the machines usually are not mobile. At most, they tend to turn on and off, but that's it. When they are powered on, usually they appear again on the same location and are connected to the same device as before. Also, \"bulkier\" computers such as servers mostly stay online at the same place over a longer period of time and retain their address, which allows things like Tor relays and exit nodes to exist.\n\nIn a wireless network, most user devices are mobile and can get in and out of range of each other. If you have a network consisting of only wireless mobile devices (see the section on infrastructureless networks below) which keep on changing their location and going out of range unpredictably, you can hardly run the Tor protocol on it, since the pre-computed paths required for onion routing may not exist anymore when the data is sent.\n\n## The wireless medium\n\nI don't think I have to explain what a wireless network is. You have probably used WiFi or Bluetooth at some point in your life. However, there is still a small detail I want to point out:\n\nThe communication medium of a wireless network is completely different than that of a wired network.\n\nWhen you use a cable to connect your computer to another device (e.g. a router or switch), you know that, in general, those are the only two devices which can send or receive packets (technically \"frames\", but let's call them packets) on that medium. I say \"in general\" because there have been eavesdropping attacks to Ethernet cables in the past, but they are by no means easy to perform, and if the cable connecting both devices is entirely within your field of vision, you will probably be able to detect such an attack.\n\nOn the other hand, the wireless medium is shared between all the wireless devices within range of each other. For instance, to separate our home WiFi network from those of our neighbors, we usually choose a fancy name to identify our network and make sure our own devices can talk to each other. Additionally, to make sure that our neighbors' devices do not talk to ours, or to prevent some unknown person from using our Internet access via the wireless network, we add some form of protection to our network, preferably using a cryptographically secure protocol to authenticate the devices.\n\n## Infrastructureless network\n\nThere is one catch regarding the security of WiFi networks. In order to authenticate your device to the network, you actually authenticate your device to a central node, the access point (AP), which usually goes by the name of \"wireless router\".\n\nAn AP is considered infrastructure. If you did not have it in your home, you would have a bit of trouble connecting your devices with one another wirelessly. They have the physical capability to do so, but most often the software that they carry does not enable them to coordinate. Hence, when most people think of a wireless network, they think of the classical AP as a gateway both to the Internet and their local network. (The Internet, by the way, is also infrastructure, but not wireless, so I won't talk much about it here.)\n\nAnother kind of wireless communication that we use which relies on infrastructure is the cellphone network. Even if your friend is sitting in front of you at the café, if you send them an SMS, that piece of data will first travel to the nearest cell tower, controlled by some telecommunication provider. Or if you both are connected to the Internet via a hotspot offered by the café and you send an email to your friend, that email will first travel through the hotspot and then through the Internet to your mail server, then to your friends' mail server and back through the hotspot to your friend's device.\n\nThese communication channels are vulnerable to surveillance and censorship by the infrastructure operators, and usually you also pay for using them. So now imagine if you had the option to bypass all the infrastructure (cell towers, wireless hotspots, the Internet, etc.) to wirelessly transmit digital data to the devices of the people around you -- also called device-to-device communication. Isn't that a lot more sensible? It gives you control over your privacy and does not cost you more.\n\nYou have probably heard of FireChat, which was widely used in the Hong Kong student protests some years ago. When the Chinese authorities decided that it was better to turn off the communication networks to prevent the protesters from organizing their actions, the young folks took their phones from their pockets and used FireChat to communicate in local chatrooms over a wireless network built on the spot without any infrastructure. Now if the authorities wanted to silence the protesters, they would have to seize every single phone, which they obviously could not do.\n\nThere are more projects of the kind. For example, Rumble is a social network for off-the-grid-communication, and the Serval project, which aims to use wireless devices to build a mesh network, was successfully employed in disaster relief operations when storms and floods destroyed communication infrastructure.\n\nBut I am here to present you aDTN, so there must be a scenario where the previous systems are not adequare. aDTN also builds a local wireless network that bypasses infrastructure, so what is different?\n\n## Anonymity\n\naDTN was designed to protect the users' privacy by hiding their identities. In other words, it supports anonymity by design. But since most people have a different concept of anonymity, and \"anonymity\" can be a rather vague concepts, here goes a brief introduction to the related terminology.\n\nIf you want to communicate anonymously over the Internet, nowadays you are probably going to use Tor. It attempts to protect you from a certain class of attackers, whose goal is to see to which device you are sending a packet to over the Internet. In other words, they want to link the sender's address to the recipient's address. This property is called *linkability*. So we can say that the goal of Tor is to make the sender and the recipient *unlinkable* (relationship anonymity.)\n\nThere are other forms of unlinkability, such as unlinkability between a message and its sender (sender anonymity), a message and its recipient (recipient anonymity), a message and its acknowledgement, a message and its reply, etc. Any two \"entities\" in a network, be they people or data, that have a relationship of some kind may need to be unlinkable in the eyes of an undesired observer.\n\nAdditionally there are other anonymity-related privacy protection goals, such as *undetectability*. It means that not only are the related entities unlinkable by some category of attacker, but also that the attacker is not sure that they exist at all. For example, if you send an undetectable message after encrypting it to look like random bits, and everyone is also sending random bits, then the attacker doesn't even know your message is there hiding in the traffic. You can even claim that you did not send anything meaningful, conferring you the possibility to deny any involvement in communication (also called plausible deniability).\n\nThe privacy protection goal of aDTN is to make communication *undetectable to anyone that you do not trust*. And now I can finally explain how it works.\n\n## So how does aDTN exactly achieve undetectability?\n\nAs I said above, since the nodes in aDTN are mobile, we cannot have relay nodes like Tor to hide the path of a packet as it travels from the sender to the recipient. So in aDTN we completely rethink the data dissemination approach: *everyone acts a relay node*. You store all the data you receive, and forward them when other users are around (this is called delay-tolerant networking, opportunistic networking or also store-carry-and-forward networking).\n\nHowever, you cannot have multiple layers of encryption for every packet of data you send, because you cannot plan a path in advance, so you can only add one layer of encryption. This doesn't sound very secure, because you cannot trust some random node you just met to hide the path of your packet. If that node is an attacker, then it can see whom you want to send the packet to. Your communication has been deanonymized.\n\nThe obvious solution is to only allow people that you trust in real life to be the recipients of your packets. Only they can decrypt the packets you send, instead of some random device you find in the network. Key exchange should not pose a problem, since you have to be near your friends to exchange packets wirelessly anyway.\n\nTo prevent an attacker from correlating traffic, there are two properties that the aDTN network must satisfy: **1.** nodes send packets at a constant rate, even if they have nothing meaningful to send (so an adversary cannot perform timing attacks), and **2.** the messages get padded to a certain fixed length, and then encrypted, forming a packet. If you use proper cryptography, the same message looks different when it is encrypted into a new packet, and is indistinguishable from the rest of the traffic at every hop, which looks like random junk if you do not own the right keys. Since you do not need any address, time-to-live or hop-count fields, or any other information that could be used to correlate traffic, anyone whom you do not trust cannot make any sense of what you are sending.\n\nDue to the limitation of available links, this system is not designed for real-time communications. On the other hand, if all the participants of, say, a discussion in a chat room are within a few hops of each other and their \"social trust graph\" is connected, then replies in the discussion usually arrive within a few seconds, so it is not completely unusable in such cases. We are planning to implement several services over this protocol: a public \"shoutbox\", where anyone can post messages anonymously, private messaging, a file sharing platform and local chat rooms.\n\nIf you want to have a more technical description of the protocol, please see [this wiki entry](../18USGqZSWppp9zdvwsD1oauq2UMuA3CFUC/?Page:how-does-the-adtn-protocol-work).\n\n## Paranoid level over 9000 - get your tinfoil hat ready!\n\nA useful application for the aDTN protocol is the scenario of a mass protest under strong surveillance, for example being at a long-term protest site like blockupy.\n\nA given participant will probably not go alone and their friends will also have other sets of people they know and trust, so they can relay packets to other groups while hiding that they came from that participant. Not even their friends can be sure that the packets were first sent by that participant.\n\nParticipants may wish to set their phones or tablets in airplane mode so that they do not connect to the local cellular network, which would let authorities easily know that they are in the area. Perhaps there will even be trusted associations that can act as major relays between disconnected groups of people and who can even push event news and reports to an online platform on behalf of the protesters who are afraid to be exposed if they did connect to the surveilled infrastructure.\n\nMost people may be happy to use existing solutions such as FireChat for this, but it was not designed with a strong adversary in mind. A state-level adversary that spreads eavesdropping devices among a large group of FireChat users can see with whom people are exchanging messages, store and correlate traffic, and easily communicate directly to a user of its choosing. Communication via FireChat is at best pseudonymous, but not necessarily anonymous.\n\nOf course one may argue that such an adversary is completely unrealistic, but fact is that such capabilities are easily available nowadays. One just needs e.g. the eavesdropper devices to have Internet access to a large data processing system specifically designed to analyse FireChat traffic. Compared to the amount of data that Google or Amazon can process, this is nothing.",
			"date_added": 1470951970180,
			"slug": "introduction-to-adtn"
		},
		{
			"id": "d3e7b6e0-6005-11e6-a87c-7b7e6b0471dc",
			"body": "First of all, a TL;DR for the impatient:\n1. aDTN is a protocol that works on the network layer, like IP, but without addressing\n2. someone looking at aDTN traffic only sees wireless devices broadcasting (i.e. not addressing to anyone in particular) random garbage of a fixed size at a constant rate\n3. ... unless that someone has shared keys with other users of the network they know and trust (i.e. *friends*), in which case it can make sense out of the \"garbage\" and retrieve the encoded message\n4. received messages are stored on the device, and forwarded later, automatically, so eventually they might reach the entire network\n5. non-friends do not know who is friends with whom, nor who is communicating with whom\n6. it offers anonymity protection to its users in the face of very strong adversaries, in contrast to existing device-to-device wireless systems like FireChat or Rumble\n\n# Understanding the aDTN protocol\n\naDTN is a network layer protocol for communicating anonymously over mobile, wireless, infrastructureless networks. What does this mean? And don't other systems already do that? Let's try to explain aDTN, step by step.\n\n## Network layer protocol\n\nA network layer protocol is a communication protocol that is used to transport data from one machine to another. For example, the Internet Protocol (IP) allows a computer, identified by an IP address, to send and receive packets of data over the Internet.\n\nThis is not the only way to transmit data between two machines. Most of the communications we know probably take that form, but we can do things differently. We can use different identifiers and different rules to send the data.\n\nAnd we can also not use any identifiers at all, which is the case in aDTN. This prevents a user from being associated to a piece of transmitted data via an identifier. How it all works will hopefully be clear to you by the end of this text.\n\n## Mobile networks\n\nA mobile network does not necessarily refer to a network of mobile phones. A mobile device could be any kind of computer that can be carried around, including not only mobile phones, but also laptops, gaming consoles, mini-computers like the raspberry pi, wearable devices like google glasses and smart watches, etc.\n\nOn a wired network the machines usually are not mobile. At most, they tend to turn on and off, but that's it. When they are powered on, usually they appear again on the same location and are connected to the same device as before. Also, \"bulkier\" computers such as servers mostly stay online at the same place over a longer period of time and retain their address, which allows things like Tor relays and exit nodes to exist.\n\nIn a wireless network, most user devices are mobile and can get in and out of range of each other. If you have a network consisting of only wireless mobile devices (see the section on infrastructureless networks below) which keep on changing their location and going out of range unpredictably, you can hardly run the Tor protocol on it, since the pre-computed paths required for onion routing may not exist anymore when the data is sent.\n\n## The wireless medium\n\nI don't think I have to explain what a wireless network is. You have probably used WiFi or Bluetooth at some point in your life. However, there is still a small detail I want to point out:\n\nThe communication medium of a wireless network is completely different than that of a wired network.\n\nWhen you use a cable to connect your computer to another device (e.g. a router or switch), you know that, in general, those are the only two devices which can send or receive packets (technically \"frames\", but let's call them packets) on that medium. I say \"in general\" because there have been eavesdropping attacks to Ethernet cables in the past, but they are by no means easy to perform, and if the cable connecting both devices is entirely within your field of vision, you will probably be able to detect such an attack.\n\nOn the other hand, the wireless medium is shared between all the wireless devices within range of each other. For instance, to separate our home WiFi network from those of our neighbors, we usually choose a fancy name to identify our network and make sure our own devices can talk to each other. Additionally, to make sure that our neighbors' devices do not talk to ours, or to prevent some unknown person from using our Internet access via the wireless network, we add some form of protection to our network, preferably using a cryptographically secure protocol to authenticate the devices.\n\n## Infrastructureless network\n\nThere is one catch regarding the security of WiFi networks. In order to authenticate your device to the network, you actually authenticate your device to a central node, the access point (AP), which usually goes by the name of \"wireless router\".\n\nAn AP is considered infrastructure. If you did not have it in your home, you would have a bit of trouble connecting your devices with one another wirelessly. They have the physical capability to do so, but most often the software that they carry does not enable them to coordinate. Hence, when most people think of a wireless network, they think of the classical AP as a gateway both to the Internet and their local network. (The Internet, by the way, is also infrastructure, but not wireless, so I won't talk much about it here.)\n\nAnother kind of wireless communication that we use which relies on infrastructure is the cellphone network. Even if your friend is sitting in front of you at the café, if you send them an SMS, that piece of data will first travel to the nearest cell tower, controlled by some telecommunication provider. Or if you both are connected to the Internet via a hotspot offered by the café and you send an email to your friend, that email will first travel through the hotspot and then through the Internet to your mail server, then to your friends' mail server and back through the hotspot to your friend's device.\n\nThese communication channels are vulnerable to surveillance and censorship by the infrastructure operators, and usually you also pay for using them. So now imagine if you had the option to bypass all the infrastructure (cell towers, wireless hotspots, the Internet, etc.) to wirelessly transmit digital data to the devices of the people around you -- also called device-to-device communication. Isn't that a lot more sensible? It gives you control over your privacy and does not cost you more.\n\nYou have probably heard of FireChat, which was widely used in the Hong Kong student protests some years ago. When the Chinese authorities decided that it was better to turn off the communication networks to prevent the protesters from organizing their actions, the young folks took their phones from their pockets and used FireChat to communicate in local chatrooms over a wireless network built on the spot without any infrastructure. Now if the authorities wanted to silence the protesters, they would have to seize every single phone, which they obviously could not do.\n\nThere are more projects of the kind. For example, Rumble is a social network for off-the-grid-communication, and the Serval project, which aims to use wireless devices to build a mesh network, was successfully employed in disaster relief operations when storms and floods destroyed communication infrastructure.\n\nBut I am here to present you aDTN, so there must be a scenario where the previous systems are not adequare. aDTN also builds a local wireless network that bypasses infrastructure, so what is different?\n\n## Anonymity\n\naDTN was designed to protect the users' privacy by hiding their identities. In other words, it supports anonymity by design. But since most people have a different concept of anonymity, and \"anonymity\" can be a rather vague concepts, here goes a brief introduction to the related terminology.\n\nIf you want to communicate anonymously over the Internet, nowadays you are probably going to use Tor. It attempts to protect you from a certain class of attackers, whose goal is to see to which device you are sending a packet to over the Internet. In other words, they want to link the sender's address to the recipient's address. This property is called *linkability*. So we can say that the goal of Tor is to make the sender and the recipient *unlinkable* (relationship anonymity.)\n\nThere are other forms of unlinkability, such as unlinkability between a message and its sender (sender anonymity), a message and its recipient (recipient anonymity), a message and its acknowledgement, a message and its reply, etc. Any two \"entities\" in a network, be they people or data, that have a relationship of some kind may need to be unlinkable in the eyes of an undesired observer.\n\nAdditionally there are other anonymity-related privacy protection goals, such as *undetectability*. It means that not only are the related entities unlinkable by some category of attacker, but also that the attacker is not sure that they exist at all. For example, if you send an undetectable message after encrypting it to look like random bits, and everyone is also sending random bits, then the attacker doesn't even know your message is there hiding in the traffic. You can even claim that you did not send anything meaningful, conferring you the possibility to deny any involvement in communication (also called plausible deniability).\n\nThe privacy protection goal of aDTN is to make communication *undetectable to anyone that you do not trust*. And now I can finally explain how it works.\n\n## So how does aDTN exactly achieve undetectability?\n\nAs I said above, since the nodes in aDTN are mobile, we cannot have relay nodes like Tor to hide the path of a packet as it travels from the sender to the recipient. So in aDTN we completely rethink the data dissemination approach: *everyone acts a relay node*. You store all the data you receive, and forward them when other users are around (this is called delay-tolerant networking, opportunistic networking or also store-carry-and-forward networking).\n\nHowever, you cannot have multiple layers of encryption for every packet of data you send, because you cannot plan a path in advance, so you can only add one layer of encryption. This doesn't sound very secure, because you cannot trust some random node you just met to hide the path of your packet. If that node is an attacker, then it can see whom you want to send the packet to. Your communication has been deanonymized.\n\nThe obvious solution is to only allow people that you trust in real life to be the recipients of your packets. Only they can decrypt the packets you send, instead of some random device you find in the network. Key exchange should not pose a problem, since you have to be near your friends to exchange packets wirelessly anyway.\n\nTo prevent an attacker from correlating traffic, there are two properties that the aDTN network must satisfy: **1.** nodes send packets at a constant rate, even if they have nothing meaningful to send (so an adversary cannot perform timing attacks), and **2.** the messages get padded to a certain fixed length, and then encrypted, forming a packet. If you use proper cryptography, the same message looks different when it is encrypted into a new packet, and is indistinguishable from the rest of the traffic at every hop, which looks like random junk if you do not own the right keys. Since you do not need any address, time-to-live or hop-count fields, or any other information that could be used to correlate traffic, anyone whom you do not trust cannot make any sense of what you are sending.\n\nDue to the limitation of available links, this system is not designed for real-time communications. On the other hand, if all the participants of, say, a discussion in a chat room are within a few hops of each other and their \"social trust graph\" is connected, then replies in the discussion usually arrive within a few seconds, so it is not completely unusable in such cases. We are planning to implement several services over this protocol: a public \"shoutbox\", where anyone can post messages anonymously, private messaging, a file sharing platform and local chat rooms.\n\nIf you want to have a more technical description of the protocol, please see [this wiki entry](../18USGqZSWppp9zdvwsD1oauq2UMuA3CFUC/?Page:how-does-the-adtn-protocol-work).\n\n## Paranoid level over 9000 - get your tinfoil hat ready!\n\nA useful application for the aDTN protocol is the scenario of a mass protest under strong surveillance, for example being at a long-term protest site like blockupy.\n\nA given participant will probably not go alone and their friends will also have other sets of people they know and trust, so they can relay packets to other groups while hiding that they came from that participant. Not even their friends can be sure that the packets were first sent by that participant.\n\nParticipants may wish to set their phones or tablets in airplane mode so that they do not connect to the local cellular network, which would let authorities easily know that they are in the area. Perhaps there will even be trusted associations that can act as major relays between disconnected groups of people and who can even push event news and reports to an online platform on behalf of the protesters who are afraid to be exposed if they did connect to the surveilled infrastructure.\n\nMost people may be happy to use existing solutions such as FireChat for this, but it was not designed with a strong adversary in mind. A state-level adversary that spreads eavesdropping devices among a large group of FireChat users can see with whom people are exchanging messages, store and correlate traffic, and easily communicate directly to a user of its choosing. Communication via FireChat is at best pseudonymous, but not necessarily anonymous.\n\nOf course one may argue that such an adversary is completely unrealistic, but fact is that such capabilities are easily available nowadays. One just needs e.g. the eavesdropper devices to have Internet access to a large data processing system specifically designed to analyse FireChat traffic. Compared to the amount of data that Google or Amazon can process, this is nothing.",
			"date_added": 1470948882766,
			"slug": "introduction-to-adtn"
		},
		{
			"id": "cf2a55e0-6005-11e6-a87c-7b7e6b0471dc",
			"body": "First of all, a TL;DR for the impatient:\n1. aDTN is a protocol that works on the network layer, like IP, but without addressing\n2. someone looking at aDTN traffic only sees wireless devices broadcasting (i.e. not addressing to anyone in particular) random garbage of a fixed size at a constant rate\n3. ... unless that someone has shared keys with other users of the network they know and trust (i.e. *friends*), in which case it can make sense out of the \"garbage\" and retrieve the encoded message\n4. received messages are stored on the device, and forwarded later, automatically, so eventually they might reach the entire network\n5. non-friends do not know who is friends with whom, nor who is communicating with whom\n6. it offers anonymity protection to its users in the face of very strong adversaries, in contrast to existing device-to-device wireless systems like FireChat or Rumble\n\nDetails below.\n\n# Understanding the aDTN protocol\n\naDTN is a network layer protocol for communicating anonymously over mobile, wireless, infrastructureless networks. What does this mean? And don't other systems already do that? Let's try to explain aDTN, step by step.\n\n## Network layer protocol\n\nA network layer protocol is a communication protocol that is used to transport data from one machine to another. For example, the Internet Protocol (IP) allows a computer, identified by an IP address, to send and receive packets of data over the Internet.\n\nThis is not the only way to transmit data between two machines. Most of the communications we know probably take that form, but we can do things differently. We can use different identifiers and different rules to send the data.\n\nAnd we can also not use any identifiers at all, which is the case in aDTN. This prevents a user from being associated to a piece of transmitted data via an identifier. How it all works will hopefully be clear to you by the end of this text.\n\n## Mobile networks\n\nA mobile network does not necessarily refer to a network of mobile phones. A mobile device could be any kind of computer that can be carried around, including not only mobile phones, but also laptops, gaming consoles, mini-computers like the raspberry pi, wearable devices like google glasses and smart watches, etc.\n\nOn a wired network the machines usually are not mobile. At most, they tend to turn on and off, but that's it. When they are powered on, usually they appear again on the same location and are connected to the same device as before. Also, \"bulkier\" computers such as servers mostly stay online at the same place over a longer period of time and retain their address, which allows things like Tor relays and exit nodes to exist.\n\nIn a wireless network, most user devices are mobile and can get in and out of range of each other. If you have a network consisting of only wireless mobile devices (see the section on infrastructureless networks below) which keep on changing their location and going out of range unpredictably, you can hardly run the Tor protocol on it, since the pre-computed paths required for onion routing may not exist anymore when the data is sent.\n\n## The wireless medium\n\nI don't think I have to explain what a wireless network is. You have probably used WiFi or Bluetooth at some point in your life. However, there is still a small detail I want to point out:\n\nThe communication medium of a wireless network is completely different than that of a wired network.\n\nWhen you use a cable to connect your computer to another device (e.g. a router or switch), you know that, in general, those are the only two devices which can send or receive packets (technically \"frames\", but let's call them packets) on that medium. I say \"in general\" because there have been eavesdropping attacks to Ethernet cables in the past, but they are by no means easy to perform, and if the cable connecting both devices is entirely within your field of vision, you will probably be able to detect such an attack.\n\nOn the other hand, the wireless medium is shared between all the wireless devices within range of each other. For instance, to separate our home WiFi network from those of our neighbors, we usually choose a fancy name to identify our network and make sure our own devices can talk to each other. Additionally, to make sure that our neighbors' devices do not talk to ours, or to prevent some unknown person from using our Internet access via the wireless network, we add some form of protection to our network, preferably using a cryptographically secure protocol to authenticate the devices.\n\n## Infrastructureless network\n\nThere is one catch regarding the security of WiFi networks. In order to authenticate your device to the network, you actually authenticate your device to a central node, the access point (AP), which usually goes by the name of \"wireless router\".\n\nAn AP is considered infrastructure. If you did not have it in your home, you would have a bit of trouble connecting your devices with one another wirelessly. They have the physical capability to do so, but most often the software that they carry does not enable them to coordinate. Hence, when most people think of a wireless network, they think of the classical AP as a gateway both to the Internet and their local network. (The Internet, by the way, is also infrastructure, but not wireless, so I won't talk much about it here.)\n\nAnother kind of wireless communication that we use which relies on infrastructure is the cellphone network. Even if your friend is sitting in front of you at the café, if you send them an SMS, that piece of data will first travel to the nearest cell tower, controlled by some telecommunication provider. Or if you both are connected to the Internet via a hotspot offered by the café and you send an email to your friend, that email will first travel through the hotspot and then through the Internet to your mail server, then to your friends' mail server and back through the hotspot to your friend's device.\n\nThese communication channels are vulnerable to surveillance and censorship by the infrastructure operators, and usually you also pay for using them. So now imagine if you had the option to bypass all the infrastructure (cell towers, wireless hotspots, the Internet, etc.) to wirelessly transmit digital data to the devices of the people around you -- also called device-to-device communication. Isn't that a lot more sensible? It gives you control over your privacy and does not cost you more.\n\nYou have probably heard of FireChat, which was widely used in the Hong Kong student protests some years ago. When the Chinese authorities decided that it was better to turn off the communication networks to prevent the protesters from organizing their actions, the young folks took their phones from their pockets and used FireChat to communicate in local chatrooms over a wireless network built on the spot without any infrastructure. Now if the authorities wanted to silence the protesters, they would have to seize every single phone, which they obviously could not do.\n\nThere are more projects of the kind. For example, Rumble is a social network for off-the-grid-communication, and the Serval project, which aims to use wireless devices to build a mesh network, was successfully employed in disaster relief operations when storms and floods destroyed communication infrastructure.\n\nBut I am here to present you aDTN, so there must be a scenario where the previous systems are not adequare. aDTN also builds a local wireless network that bypasses infrastructure, so what is different?\n\n## Anonymity\n\naDTN was designed to protect the users' privacy by hiding their identities. In other words, it supports anonymity by design. But since most people have a different concept of anonymity, and \"anonymity\" can be a rather vague concepts, here goes a brief introduction to the related terminology.\n\nIf you want to communicate anonymously over the Internet, nowadays you are probably going to use Tor. It attempts to protect you from a certain class of attackers, whose goal is to see to which device you are sending a packet to over the Internet. In other words, they want to link the sender's address to the recipient's address. This property is called *linkability*. So we can say that the goal of Tor is to make the sender and the recipient *unlinkable* (relationship anonymity.)\n\nThere are other forms of unlinkability, such as unlinkability between a message and its sender (sender anonymity), a message and its recipient (recipient anonymity), a message and its acknowledgement, a message and its reply, etc. Any two \"entities\" in a network, be they people or data, that have a relationship of some kind may need to be unlinkable in the eyes of an undesired observer.\n\nAdditionally there are other anonymity-related privacy protection goals, such as *undetectability*. It means that not only are the related entities unlinkable by some category of attacker, but also that the attacker is not sure that they exist at all. For example, if you send an undetectable message after encrypting it to look like random bits, and everyone is also sending random bits, then the attacker doesn't even know your message is there hiding in the traffic. You can even claim that you did not send anything meaningful, conferring you the possibility to deny any involvement in communication (also called plausible deniability).\n\nThe privacy protection goal of aDTN is to make communication *undetectable to anyone that you do not trust*. And now I can finally explain how it works.\n\n## So how does aDTN exactly achieve undetectability?\n\nAs I said above, since the nodes in aDTN are mobile, we cannot have relay nodes like Tor to hide the path of a packet as it travels from the sender to the recipient. So in aDTN we completely rethink the data dissemination approach: *everyone acts a relay node*. You store all the data you receive, and forward them when other users are around (this is called delay-tolerant networking, opportunistic networking or also store-carry-and-forward networking).\n\nHowever, you cannot have multiple layers of encryption for every packet of data you send, because you cannot plan a path in advance, so you can only add one layer of encryption. This doesn't sound very secure, because you cannot trust some random node you just met to hide the path of your packet. If that node is an attacker, then it can see whom you want to send the packet to. Your communication has been deanonymized.\n\nThe obvious solution is to only allow people that you trust in real life to be the recipients of your packets. Only they can decrypt the packets you send, instead of some random device you find in the network. Key exchange should not pose a problem, since you have to be near your friends to exchange packets wirelessly anyway.\n\nTo prevent an attacker from correlating traffic, there are two properties that the aDTN network must satisfy: **1.** nodes send packets at a constant rate, even if they have nothing meaningful to send (so an adversary cannot perform timing attacks), and **2.** the messages get padded to a certain fixed length, and then encrypted, forming a packet. If you use proper cryptography, the same message looks different when it is encrypted into a new packet, and is indistinguishable from the rest of the traffic at every hop, which looks like random junk if you do not own the right keys. Since you do not need any address, time-to-live or hop-count fields, or any other information that could be used to correlate traffic, anyone whom you do not trust cannot make any sense of what you are sending.\n\nDue to the limitation of available links, this system is not designed for real-time communications. On the other hand, if all the participants of, say, a discussion in a chat room are within a few hops of each other and their \"social trust graph\" is connected, then replies in the discussion usually arrive within a few seconds, so it is not completely unusable in such cases. We are planning to implement several services over this protocol: a public \"shoutbox\", where anyone can post messages anonymously, private messaging, a file sharing platform and local chat rooms.\n\nIf you want to have a more technical description of the protocol, please see [this wiki entry](../18USGqZSWppp9zdvwsD1oauq2UMuA3CFUC/?Page:how-does-the-adtn-protocol-work).\n\n## Paranoid level over 9000 - get your tinfoil hat ready!\n\nA useful application for the aDTN protocol is the scenario of a mass protest under strong surveillance, for example being at a long-term protest site like blockupy.\n\nA given participant will probably not go alone and their friends will also have other sets of people they know and trust, so they can relay packets to other groups while hiding that they came from that participant. Not even their friends can be sure that the packets were first sent by that participant.\n\nParticipants may wish to set their phones or tablets in airplane mode so that they do not connect to the local cellular network, which would let authorities easily know that they are in the area. Perhaps there will even be trusted associations that can act as major relays between disconnected groups of people and who can even push event news and reports to an online platform on behalf of the protesters who are afraid to be exposed if they did connect to the surveilled infrastructure.\n\nMost people may be happy to use existing solutions such as FireChat for this, but it was not designed with a strong adversary in mind. A state-level adversary that spreads eavesdropping devices among a large group of FireChat users can see with whom people are exchanging messages, store and correlate traffic, and easily communicate directly to a user of its choosing. Communication via FireChat is at best pseudonymous, but not necessarily anonymous.\n\nOf course one may argue that such an adversary is completely unrealistic, but fact is that such capabilities are easily available nowadays. One just needs e.g. the eavesdropper devices to have Internet access to a large data processing system specifically designed to analyse FireChat traffic. Compared to the amount of data that Google or Amazon can process, this is nothing.",
			"date_added": 1470948874814,
			"slug": "introduction-to-adtn"
		},
		{
			"id": "e1889400-5fe6-11e6-a5a0-3fe3bc8d74bb",
			"body": "# Timberdoodle - an android messenger running aDTN\n\nIn 2015 a group of students implemented an android app running the aDTN protocol. It can be found here:\nhttps://github.com/timberdoodle/TimberdoodleApp\n\nIt features both public broadcasts and private messaging relayed anonymously over a wireless device-to-device (and friend-to-friend) network.\n\nHowever, there are some fixes required:\n* the app uses the IEEE 802.11 wireless communication standard in ad-hoc mode, which is barely supported by any device. The plan is to either use IEEE 802.11s or Bluetooth (in which case it would be more clever to borrow the excellent network module of the Rumble project)\n* the GUI needs some improvement\n* random errors that crash the application show a clear need for adequate error handling\n\nI currently cannot dedicate much time to this part of the project, so if you love Android programming and want to help, please get in contact with me (see main page for contact info).",
			"date_added": 1470935591232,
			"slug": "android-messaging-app"
		},
		{
			"id": "d269e190-5fe6-11e6-a5a0-3fe3bc8d74bb",
			"body": "# Timberdoodle - an android messenger running aDTN\n\nIn 2015 a group of students implemented an android app running the aDTN protocol. It can be found here:\nhttps://github.com/timberdoodle/TimberdoodleApp\n\nIt features both public broadcasts and private messaging relayed anonymously over a wireless device-to-device (and friend-to-friend) network.\n\nHowever, there are some fixes required:\n * the app uses the IEEE 802.11 wireless communication standard in ad-hoc mode, which is barely supported by any device. The plan is to either use IEEE 802.11s or Bluetooth (in which case it would be more clever to borrow the excellent network module of the Rumble project)\n* the GUI needs some improvement\n* random errors that crash the application show a clear need for adequate error handling\n\nI currently cannot dedicate much time to this part of the project, so if you love Android programming and want to help, please get in contact with me (see main page for contact info).",
			"date_added": 1470935565866,
			"slug": "android-messaging-app"
		},
		{
			"id": "25d16180-5fe4-11e6-b3c4-8573352cccee",
			"body": "# aDTN -- anonymous delay-tolerant networking\n\nThis is a Wiki about aDTN, a wireless protocol which features **paranoid-grade anonymity** and **censorship resistance**.\n\n## What can it do?\naDTN implements an \"automated sneakernet\"-like network protocol on mobile devices and has following features:\n* only friends can exchange data directly (authentication is ensured cryptographically)\n* no user can determine the original sender of a packet (unless the sender wishes to be known)\n* since there are no addresses, the intended recipient of a packet is also unknown - actually, anyone can receive it\n  * but if the payload is confidential, then it can be encrypted for the intended recipient and no one else will know who that is\n* a constant sending rate prevents timing attacks by non-friends\n* perfectly random-looking packets prevent non-friends from tracking packets over the network\n\nSince it uses a store-carry-and-forward approach, aDTN cannot be used for real time applications such as streaming, but it can be used for local chatting, for example.\n\nAdditional info:\n* [[Introduction to aDTN]] -- if you want to understand why this protocol exists and what it is good for.\n* [[How does the aDTN protocol work?]] -- if you are interested in more technical information. It's not rocket science, so don't be scared to click the link :-)\n\n## Implementation\nSo far I have a [[python library for linux]], which I am using to test network performance. It works, but I am planning to introduce some performance improvements in the near future.\n\nAdditionally, there is an [[android messaging app]] being developed. It still requires some work, and works for some phones, but not all. It allows users to publish public messages anonymously and to send private messages. File sharing and chat rooms are planned for the future (but I need a hand from Android developers).\n\n## Contact\nIf you have questions or want to help, feel free to contact *megfault* here on ZeroNet via ZeroMail or send her a bitmessage to the address *BM-2cTBr98R7yRycQUih6WvvAQwTvRdc1VbHu*.",
			"date_added": 1470934417304,
			"slug": "home"
		},
		{
			"id": "193206f0-5fe4-11e6-b3c4-8573352cccee",
			"body": "# aDTN -- anonymous delay-tolerant networking\n\nThis is a Wiki about aDTN, a wireless network-layer protocol which features **paranoid-grade anonymity** and **censorship resistance**.\n\n## What can it do?\naDTN implements an \"automated sneakernet\"-like network protocol on mobile devices and has following features:\n* only friends can exchange data directly (authentication is ensured cryptographically)\n* no user can determine the original sender of a packet (unless the sender wishes to be known)\n* since there are no addresses, the intended recipient of a packet is also unknown - actually, anyone can receive it\n  * but if the payload is confidential, then it can be encrypted for the intended recipient and no one else will know who that is\n* a constant sending rate prevents timing attacks by non-friends\n* perfectly random-looking packets prevent non-friends from tracking packets over the network\n\nSince it uses a store-carry-and-forward approach, aDTN cannot be used for real time applications such as streaming, but it can be used for local chatting, for example.\n\nAdditional info:\n* [[Introduction to aDTN]] -- if you want to understand why this protocol exists and what it is good for.\n* [[How does the aDTN protocol work?]] -- if you are interested in more technical information. It's not rocket science, so don't be scared to click the link :-)\n\n## Implementation\nSo far I have a [[python library for linux]], which I am using to test network performance. It works, but I am planning to introduce some performance improvements in the near future.\n\nAdditionally, there is an [[android messaging app]] being developed. It still requires some work, and works for some phones, but not all. It allows users to publish public messages anonymously and to send private messages. File sharing and chat rooms are planned for the future (but I need a hand from Android developers).\n\n## Contact\nIf you have questions or want to help, feel free to contact *megfault* here on ZeroNet via ZeroMail or send her a bitmessage to the address *BM-2cTBr98R7yRycQUih6WvvAQwTvRdc1VbHu*.",
			"date_added": 1470934396128,
			"slug": "home"
		},
		{
			"id": "06badab0-5fe4-11e6-a7c9-effdb7017967",
			"body": "",
			"date_added": 1470934365148,
			"slug": "python-client-for-linux"
		},
		{
			"id": "edb756a0-5fdf-11e6-ab4e-91de1f7ec792",
			"body": "# aDTN -- anonymous delay-tolerant networking\n\nThis is a Wiki about aDTN, a protocol for wireless communication which features **paranoid-grade anonymity** and **censorship resistance**.\n\n## What can it do?\naDTN implements an \"automated sneakernet\"-like network protocol on mobile devices and has following features:\n* only friends can exchange data directly (authentication is ensured cryptographically)\n* no user can determine the original sender of a packet (unless the sender wishes to be known)\n* since there are no addresses, the intended recipient of a packet is also unknown - actually, anyone can receive it\n  * but if the payload is confidential, then it can be encrypted for the intended recipient and no one else will know who that is\n* a constant sending rate prevents timing attacks by non-friends\n* perfectly random-looking packets prevent non-friends from tracking packets over the network\n\nSince it uses a store-carry-and-forward approach, aDTN cannot be used for real time applications such as streaming, but it can be used for local chatting, for example.\n\nAdditional info:\n* [[Introduction to aDTN]] -- if you want to understand why this protocol exists and what it is good for.\n* [[How does the aDTN protocol work?]] -- if you are interested in more technical information. It's not rocket science, so don't be scared to click the link :-)\n\n## Implementation\nSo far I have a [[python library for linux]], which I am using to test network performance. It works, but I am planning to introduce some performance improvements in the near future.\n\nAdditionally, there is an [[android messaging app]] being developed. It still requires some work, and works for some phones, but not all. It allows users to publish public messages anonymously and to send private messages. File sharing and chat rooms are planned for the future (but I need a hand from Android developers).\n\n## Contact\nIf you have questions or want to help, feel free to contact *megfault* here on ZeroNet via ZeroMail or send her a bitmessage to the address *BM-2cTBr98R7yRycQUih6WvvAQwTvRdc1VbHu*.",
			"date_added": 1470932605194,
			"slug": "home"
		},
		{
			"id": "5fd96fd0-5fdf-11e6-ab4e-91de1f7ec792",
			"body": "# aDTN -- anonymous delay-tolerant networking\n\nThis is a Wiki about aDTN, a protocol for wireless communication which features **paranoid-grade anonymity** and **censorship resistance**.\n\n## What can it do?\naDTN implements an automated sneakernet on mobile devices and has following features:\n* only friends can exchange data directly (authentication is ensured cryptographically)\n* no user can determine the original sender of a message\n* since there are no addresses, the intended recipient is also unknown\n* a constant sending rate prevents timing attacks\n* perfectly random-looking packets prevent non-friends from tracking messages over the network\n\nSince it uses a store-carry-and-forward approach, it cannot be used for real time applications such as streaming, but it can be used for local chatting, for example.\n\nAdditional info:\n* [[Introduction to aDTN]] -- if you want to understand why this protocol exists and what it is good for.\n* [[How does the aDTN protocol work?]] -- if you are interested in more technical information. It's not rocket science, so don't be scared to click the link :-)\n\n## Implementation\nSo far I have a [[python library for linux]], which I am using to test network performance. It works, but I am planning to introduce some performance improvements in the near future.\n\nAdditionally, there is an [[android messaging app]] being developed. It still requires some work, and works for some phones, but not all. It allows users to publish public messages anonymously and to send private messages. File sharing and chat rooms are planned for the future (but I need a hand from Android developers).\n\n## Contact\nIf you have questions or want to help, feel free to contact *megfault* here on ZeroNet via ZeroMail or send her a bitmessage to the address *BM-2cTBr98R7yRycQUih6WvvAQwTvRdc1VbHu*.",
			"date_added": 1470932367183,
			"slug": "home"
		},
		{
			"id": "0279c7e0-5fdf-11e6-b4d8-87e29ae6c64b",
			"body": "",
			"date_added": 1470932210526,
			"slug": "python-client-for-linux"
		},
		{
			"id": "f2dd8100-5fde-11e6-90ed-b9a89b53cfd1",
			"body": "# aDTN library for Linux systems\n\nTo test the aDTN protocol's performance I did a quick implementation in Python3, which you can find here: https://github.com/megfault/aDTN-python\n\nThe interaction is strictly done via command line so far and not particularly user-friendly, but the plan is to make a decent GUI in the future. Feel free to send your pull requests!\n\nInstructions can be found on the README file.",
			"date_added": 1470932184341,
			"slug": "python-library-for-linux"
		},
		{
			"id": "e87e7980-5fde-11e6-b096-c1ae21a9cb81",
			"body": "",
			"date_added": 1470932166940,
			"slug": "python-client-for-linux"
		},
		{
			"id": "dece9dc0-5fde-11e6-abc6-f9e3d776ffcb",
			"body": "# aDTN -- anonymous delay-tolerant networking\n\nThis is a Wiki about aDTN, a protocol for wireless communication which features **paranoid-grade anonymity** and **censorship resistance**.\n\n## What can it do?\naDTN implements an automated sneakernet on mobile devices and has following features:\n* only friends can exchange data directly (authentication is ensured cryptographically)\n* no user can determine the original sender of a message\n* since there are no addresses, the intended recipient is also unknown\n* a constant sending rate prevents timing attacks\n* perfectly random-looking packets prevent non-friends from tracking messages over the network\n\nSince it uses a store-carry-and-forward approach, it cannot be used for real time applications such as streaming, but it can be used for local chatting, for example.\n\nIf you want to understand why this protocol exists and what it is good for, read this page: [[Introduction to aDTN]].\n\nIf you are interested in more technical information, you find it here: [[How does the aDTN protocol work?]]\nIt's not rocket science, so don't be scared to click the link :-)\n\n## Implementation\nSo far I have a [[python library for linux]], which I am using to test network performance. It works, but I am planning to introduce some performance improvements in the near future.\n\nAdditionally, there is an [[android messaging app]] being developed. It still requires some work, and works for some phones, but not all. It allows users to publish public messages anonymously and to send private messages. File sharing and chat rooms are planned for the future (but I need a hand from Android developers).\n\n## Contact\nIf you have questions or want to help, feel free to contact *megfault* here on ZeroNet via ZeroMail or send her a bitmessage to the address *BM-2cTBr98R7yRycQUih6WvvAQwTvRdc1VbHu*.",
			"date_added": 1470932150684,
			"slug": "home"
		},
		{
			"id": "6c5b9ee0-5fb2-11e6-b75d-398a558ddb7f",
			"body": "# How does the aDTN protocol work?\n\nContent is coming soon, for now you can read a high-level description of aDTN here: http://arxiv.org/pdf/1507.08475.pdf ",
			"date_added": 1470913060814,
			"slug": "how-does-the-adtn-protocol-work"
		},
		{
			"id": "47bf6ff0-5fb0-11e6-88b5-5740108d5f86",
			"body": "# Timberdoodle - an android messenger running aDTN\n\nIn 2015 a group of students implement an android app running the aDTN protocol. It can be found here:\nhttps://github.com/timberdoodle/TimberdoodleApp\n\nIt features both public broadcasts and private messaging relayed anonymously over a wireless device-to-device (and friend-to-friend) network.\n\nHowever, there are some fixes required:\n * the app uses the IEEE 802.11 wireless communication standard in ad-hoc mode, which is barely supported by any device. The plan is to either use IEEE 802.11s or Bluetooth (in which case it would be more clever to borrow the excellent network module of the Rumble project)\n* the GUI needs some improvement\n* random errors that crash the application show a clear need for adequate error handling\n\nI currently cannot dedicate much time to this part of the project, so if you love Android programming and want to help, please get in contact with me (see main page for contact info).",
			"date_added": 1470912140399,
			"slug": "android-messaging-app"
		},
		{
			"id": "2d5dbea0-5fb0-11e6-a1dd-ab7d71bbac53",
			"body": "# Timberdoodle - an android messenger running the aDTN protocol\n\nIn 2015 a group of students implement an android app running the aDTN protocol. It can be found here:\nhttps://github.com/timberdoodle/TimberdoodleApp\n\nIt features both public broadcasts and private messaging relayed anonymously over a wireless device-to-device (and friend-to-friend) network.\n\nHowever, there are some fixes required:\n * the app uses the IEEE 802.11 wireless communication standard in ad-hoc mode, which is barely supported by any device. The plan is to either use IEEE 802.11s or Bluetooth (in which case it would be more clever to borrow the excellent network module of the Rumble project)\n* the GUI needs some improvement\n* random errors that crash the application show a clear need for adequate error handling\n\nI currently cannot dedicate much time to this part of the project, so if you love Android programming and want to help, please get in contact with me (see main page for contact info).",
			"date_added": 1470912096138,
			"slug": "android-messaging-app"
		},
		{
			"id": "271d6720-5fb0-11e6-a1dd-ab7d71bbac53",
			"body": "# Timberdoodle - an android messenger running the aDTN protocol\n\nIn 2015 a group of students implement an android app running the aDTN protocol. It can be found here:\nhttps://github.com/timberdoodle/TimberdoodleApp\n\nIt features both public broadcasts and private messaging relayed anonymously over a wireless device-to-device (and friend-to-friend) network.\n\nHowever, there are some fixes required:\n * the app uses the IEEE 802.11 wireless communication standard in ad-hoc mode, which is barely supported by any device. The plan is to either use IEEE 802.11s or Bluetooth (in which case it would be more clever to borrow the excellent network module of the Rumble project)\n* the GUI needs some improvement\n* random errors that crash the application show a clear need for adequate error handling\n\nI currently cannot dedicate much time to this part of the project, so if you love Android programming and want to help, please get in contact with me (see main page for contact info). I alre",
			"date_added": 1470912085651,
			"slug": "android-messaging-app"
		},
		{
			"id": "14555130-5faf-11e6-89d8-37f4ccd30a53",
			"body": "# aDTN client for Linux systems\n\nTo test the aDTN protocol's performance I did a quick implementation in Python3, which you can find here: https://github.com/megfault/aDTN-python\n\nThe interaction is strictly done via command line so far and not particularly user-friendly, but the plan is to make a decent GUI in the future. Feel free to send your pull requests!\n\nInstructions can be found on the README file.",
			"date_added": 1470911624644,
			"slug": "python-client-for-linux"
		}
	]
}