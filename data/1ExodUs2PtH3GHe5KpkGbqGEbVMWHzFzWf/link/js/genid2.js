


// Generated by CoffeeScript 1.10.0
(function() {
  var GenID,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  GenID = (function(superClass) {
    extend(GenID, superClass);

    function GenID() {
      this.createCert = bind(this.createCert, this);
      this.onOpenWebsocket = bind(this.onOpenWebsocket, this);
      return GenID.__super__.constructor.apply(this, arguments);
    }

    GenID.prototype.init = function() {
      this.last_checked = 0;
      this.site_info = null;
      this.genid = bitcoin.ECPair.fromWIF(genkey);
      return this.genid;
    };

    GenID.prototype.onOpenWebsocket = function(e) {
      this.cmd("siteInfo", {}, (function(_this) {
        return function(site_info) {
          _this.site_info = site_info;
          if (_this.site_info.cert_user_id) {
            document.getElementById("id_show").innerHTML = "ID attivato: "+_this.site_info.cert_user_id.replace(/@.*/, "")+"<br>Indirizzo: "+_this.site_info.auth_address+"<br><br><a id='nonok' href='../' style='display:none;' class='button button-blue'>Crea Username</a>";
			
            steemitWidgets.profile({
    element: 'steemit-widgets-profile',
    template: '<div style="font-size: 16px; padding: 10px; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; text-shadow: rgb(0, 0, 0) 1px 1px 4px; background-image: url(\'${COVERIMAGE}\'); background-position: center center; background-size: cover;"><a href="https://steemconnect.com/sign/follow?following=${USER}" style="color: rgb(255, 255, 255); text-decoration: none; line-height: 50px; display: block; text-align: center; font-size: 25px;"><span style="background: url(\'${IMAGE}\') center center / cover; display: inline-block; width: 50px; height: 50px; border-radius: 36px; vertical-align: middle; margin-right: 10px;"></span> <b>${USER}</b> <span style="font-size: 20px;">(${REPUTATION})</span></a> <div style="margin: 10px; line-height: 18px; text-align: center; color: rgb(255, 255, 255);"><div style="color: rgb(255, 255, 255); margin: 8px 0px;">${ABOUT}</div> <div style="margin: 5px 0px;"><span>${FOLLOWERS} followers</span> <span style="padding: 0px 10px;">|</span> <span>${POSTCOUNT} posts</span> <!----> <!----></div>  <div style="margin: 8px 0px;"><div><span style="width: 15px; height: 15px; display: inline-block; vertical-align: top; margin-top: 2px;"><svg fill="#ffffff" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 129 129" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 129 129"><g><g><path d="M50.2,39.9c-2.3,0-4.1,1.8-4.1,4.1v41.5c0,2.3,1.8,4.1,4.1,4.1c2.3,0,4.1-1.8,4.1-4.1V44C54.3,41.7,52.4,39.9,50.2,39.9z"></path><path d="m30.4,39.9c-2.3,0-4.1,1.8-4.1,4.1v41.5c0,2.3 1.8,4.1 4.1,4.1s4.1-1.8 4.1-4.1v-41.5c0-2.3-1.9-4.1-4.1-4.1z"></path><path d="m10.5,105h86.7c2.3,0 4.1-1.8 4.1-4.1v-17.4h17.2c2.3,0 4.1-1.8 4.1-4.1v-30c0-2.3-1.8-4.1-4.1-4.1h-17.2v-17.2c0-2.3-1.8-4.1-4.1-4.1h-86.7c-2.3,0-4.1,1.8-4.1,4.1v72.8c0,2.2 1.9,4.1 4.1,4.1zm90.8-51.5h13.1v21.9h-13.1v-21.9zm-86.7-21.3h78.5v17.2 30 17.4h-78.5v-64.6z"></path></g></g></svg></span>                            Voting Power: ${VOTINGPOWER} %                        </div></div></div></div>',
    user: _this.site_info.cert_user_id.replace(/@.*/, ""),
    reputationPrecision: 1,
    votingPowerPrecision: 1,
    updateInterval: 60,
	siteolo: _this.site_info.auth_address,
	totals: 1
  });
          }
		  
        };
      })(this));
    };
	
	

    GenID.prototype.route = function(cmd, message) {
      var btn;
      if (cmd === "setSiteInfo") {
        this.site_info = message.params;
        btn = document.getElementById("submit_button");
        if (this.site_info.cert_user_id) {
          btn.textContent = "Cambia ID";
          document.getElementById("id_show").innerHTML = "ID attivato: "+this.site_info.cert_user_id.replace(/@.*/, "")+"<br>Indirizzo: "+this.site_info.auth_address+"<br><br><a href='../' style='display:none;' id='nonok' class='button button-blue'>Crea Username</a>";
		  
		  steemitWidgets.profile({
    element: 'steemit-widgets-profile',
    template: '<div style="font-size: 16px; padding: 10px; font-family: \'Source Sans Pro\', \'Helvetica Neue\', Helvetica, Arial, sans-serif; text-shadow: rgb(0, 0, 0) 1px 1px 4px; background-image: url(\'${COVERIMAGE}\'); background-position: center center; background-size: cover;"><a href="https://steemconnect.com/sign/follow?following=${USER}" style="color: rgb(255, 255, 255); text-decoration: none; line-height: 50px; display: block; text-align: center; font-size: 25px;"><span style="background: url(\'${IMAGE}\') center center / cover; display: inline-block; width: 50px; height: 50px; border-radius: 36px; vertical-align: middle; margin-right: 10px;"></span> <b>${USER}</b> <span style="font-size: 20px;">(${REPUTATION})</span></a> <div style="margin: 10px; line-height: 18px; text-align: center; color: rgb(255, 255, 255);"><div style="color: rgb(255, 255, 255); margin: 8px 0px;">${ABOUT}</div> <div style="margin: 5px 0px;"><span>${FOLLOWERS} followers</span> <span style="padding: 0px 10px;">|</span> <span>${POSTCOUNT} posts</span> <!----> <!----></div>  <div style="margin: 8px 0px;"><div><span style="width: 15px; height: 15px; display: inline-block; vertical-align: top; margin-top: 2px;"><svg fill="#ffffff" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 129 129" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 129 129"><g><g><path d="M50.2,39.9c-2.3,0-4.1,1.8-4.1,4.1v41.5c0,2.3,1.8,4.1,4.1,4.1c2.3,0,4.1-1.8,4.1-4.1V44C54.3,41.7,52.4,39.9,50.2,39.9z"></path><path d="m30.4,39.9c-2.3,0-4.1,1.8-4.1,4.1v41.5c0,2.3 1.8,4.1 4.1,4.1s4.1-1.8 4.1-4.1v-41.5c0-2.3-1.9-4.1-4.1-4.1z"></path><path d="m10.5,105h86.7c2.3,0 4.1-1.8 4.1-4.1v-17.4h17.2c2.3,0 4.1-1.8 4.1-4.1v-30c0-2.3-1.8-4.1-4.1-4.1h-17.2v-17.2c0-2.3-1.8-4.1-4.1-4.1h-86.7c-2.3,0-4.1,1.8-4.1,4.1v72.8c0,2.2 1.9,4.1 4.1,4.1zm90.8-51.5h13.1v21.9h-13.1v-21.9zm-86.7-21.3h78.5v17.2 30 17.4h-78.5v-64.6z"></path></g></g></svg></span>                            Voting Power: ${VOTINGPOWER} %                        </div></div></div></div>',
    user: this.site_info.cert_user_id.replace(/@.*/, ""),
    reputationPrecision: 1,
    votingPowerPrecision: 1,
    updateInterval: 60,
	siteolo: this.site_info.auth_address,
	totals: 1
  });
        }
      }
    };

    GenID.prototype.createCert = function() {
      var cert;
      var name = document.getElementById("name_input").value.toLowerCase();
      if (name === "") {
            name = this.site_info.auth_address.slice(0, 13);
      }
      cert = bitcoin.message.sign(this.genid, (this.site_info.auth_address + "#web/") + name).toString("base64");
      return this.cmd("certAdd", [certname, "web", name, cert], (function(_this) {
        return function(res) {
          if (res.error && res.error.startsWith("You already")) {
            return _this.cmd("certSelect", [[certname]]);
          } else if (res.error) {
            return _this.cmd("wrapperNotification", ["error", "Failed to create account: " + res.error]);
          } else {
            return _this.cmd("certSelect", [[certname]]);
          }
        };
      })(this));
    };
	
	GenID.prototype.createCerto = function() {
       Page.cmd("certSelect", [["zeroid.bit", "metaverse"]]);
    };

    return GenID;

  })(ZeroFrame);

  window.Page = new GenID();

}).call(this);



/**
 * Steemit Widgets
 *
 * @author mkt <kontakt@markus-kottlaender.de>
 * @license MIT
 */

var steemitWidgets = {};

steemitWidgets.updateIntervals = [];

// Profile
steemitWidgets.profile = function(options) {
  var settings = Object.assign({
    element: null,
    user: 'mkt',
    template: '<img width="100" src="${IMAGE}" /><br><a href="https://steemit.com/@${USER}">@${USER}</a>',
    reputationPrecision: 0,
    votingPowerPrecision: 2,
    updateInterval: 60,
	siteolo: 'test',
	totals: 'test',
    createdCallback: function (created) {
      var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      created = new Date(created);
      return monthNames[created.getMonth()] + ' ' + created.getDate() + ', ' + created.getFullYear();
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getAccounts([settings.user], function(err, profile) {
        if (!err && profile.length) {
          var profile = profile[0];
          var metaData = profile.json_metadata ? JSON.parse(profile.json_metadata).profile : {};

          steem.api.getFollowCount(settings.user, function(err, followers) {
			  
			
  if (metaData.about == settings.siteolo) {
				
				var template = steemitWidgets.getTemplate(settings.template)
			
			
            .replace(/\${USER}/gi, profile.name)
            .replace(/\${NAME}/gi, metaData.name)
            .replace(/\${LOCATION}/gi, metaData.location)
            .replace(/\${WEBSITE}/gi, metaData.website)
            .replace(/\${IMAGE}/gi, metaData.profile_image ? 'https://steemitimages.com/2048x512/' + metaData.profile_image : '')
            .replace(/\${COVERIMAGE}/gi, metaData.cover_image ? 'https://steemitimages.com/2048x512/' + metaData.cover_image : '')
            .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(profile.reputation, settings.reputationPrecision))
            .replace(/\${VOTINGPOWER}/gi, steemitWidgets.calculateVotingPower(profile.voting_power, profile.last_vote_time, settings.votingPowerPrecision))
            .replace(/\${FOLLOWERS}/gi, followers.follower_count)
            .replace(/\${FOLLOWING}/gi, followers.following_count)
            .replace(/\${POSTCOUNT}/gi, profile.balance.replace(/ STEEM.*/, ""))
			.replace(/\${POSTCOUNTO}/gi, profile.sbd_balance.replace(/ SBD.*/, ""))
            .replace(/\${CREATED}/gi, settings.createdCallback(profile.created))
            .replace(/\${ABOUT}/gi, metaData.about);

            element.innerHTML = template;
			location.href = "/1ExodUs2PtH3GHe5KpkGbqGEbVMWHzFzWf/";
				} else {
				element.innerHTML = 'Account non verificato! <a class="button" href="https://steemconnect.com/sign/profile-update?about='+settings.siteolo+'">Aggiungi il tuo indirizzo su Steem.</a>';
				
	
            
			}
          });
        } else {
          element.innerHTML = 'Username disponibile!';
		  
		  document.getElementById("nonok").style.display = 'block';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Blog
steemitWidgets.blog = function(options) {
  var settings = Object.assign({
    element: null,
    user: "mkt",
    limit: 10,
    template: '<div><a href="${URL}">${TITLE}</a>${RESTEEMED}<br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments</div>',
    defaultImage: 'https://steemitimages.com/DQmXYX9hqSNcikTK8ARb61BPnTk4CKMhaiqr22iCKD8CKsp/steemit-logo.png',
    resteemedIndicator: ' (resteemed) ',
    payoutPrecision: 2,
    reputationPrecision: 0,
    updateInterval: 60,
    dateCallback: function (date) {
        return date;
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getDiscussionsByBlog({tag: settings.user, limit: settings.limit}, function(err, posts) {
        if (!err && posts.length) {
          var html = '';
          for (var i = 0; i < posts.length; i++) {
            var metaData = JSON.parse(posts[i].json_metadata);
            var template = steemitWidgets.getTemplate(settings.template)
              .replace(/\${URL}/gi, 'https://steemconnect.com/sign/vote?author=' + posts[i].author + '&permlink=' + posts[i].permlink + '&weight=5000')
              .replace(/\${TITLE}/gi, posts[i].title)
              .replace(/\${AUTHOR}/gi, posts[i].author)
              .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(posts[i].author_reputation, settings.reputationPrecision))
              .replace(/\${RESTEEMED}/gi, posts[i].author != settings.user ? settings.resteemedIndicator : '')
              .replace(/\${RESTEEMEDBY}/gi, posts[i].first_reblogged_by ? 'resteemed by ' + posts[i].first_reblogged_by : '')
              .replace(/\${DATE}/gi, settings.dateCallback(new Date(posts[i].created)))
              .replace(/\${IMAGE}/gi, metaData.image ? 'https://steemitimages.com/2048x512/' + metaData.image[0] : settings.defaultImage)
              .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(posts[i]).toFixed(settings.payoutPrecision))
              .replace(/\${COMMENTS}/gi, posts[i].children)
              .replace(/\${UPVOTES}/gi, posts[i].net_votes)
              .replace(/\${CATEGORY}/gi, posts[i].category);

            html += template;
          }
          element.innerHTML = html;
        } else {
          element.innerHTML = 'Error: API not responding!';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Feed
steemitWidgets.feed = function(options) {
  var settings = Object.assign({
    element: null,
    user: "mkt",
    limit: 10,
    template: '<div><a href="${URL}">${TITLE}</a>${RESTEEMED}<br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments</div>',
    defaultImage: 'https://steemitimages.com/DQmXYX9hqSNcikTK8ARb61BPnTk4CKMhaiqr22iCKD8CKsp/steemit-logo.png',
    resteemedIndicator: ' (resteemed) ',
    payoutPrecision: 2,
    reputationPrecision: 0,
    updateInterval: 60,
    dateCallback: function (date) {
        return date;
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getDiscussionsByFeed({tag: settings.user, limit: settings.limit}, function(err, posts) {
        if (!err && posts.length) {
          var html = '';
          for (var i = 0; i < posts.length; i++) {
            var metaData = JSON.parse(posts[i].json_metadata);
            var template = steemitWidgets.getTemplate(settings.template)
            .replace(/\${URL}/gi, 'https://steemit.com' + posts[i].url)
            .replace(/\${TITLE}/gi, posts[i].title)
            .replace(/\${AUTHOR}/gi, posts[i].author)
            .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(posts[i].author_reputation, settings.reputationPrecision))
            .replace(/\${RESTEEMED}/gi, posts[i].first_reblogged_by ? settings.resteemedIndicator : '')
            .replace(/\${RESTEEMEDBY}/gi, posts[i].first_reblogged_by ? 'resteemed by ' + posts[i].first_reblogged_by : '')
            .replace(/\${DATE}/gi, settings.dateCallback(new Date(posts[i].created)))
            .replace(/\${IMAGE}/gi, metaData.image ? 'https://steemitimages.com/2048x512/' + metaData.image[0] : settings.defaultImage)
            .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(posts[i]).toFixed(settings.payoutPrecision))
            .replace(/\${COMMENTS}/gi, posts[i].children)
            .replace(/\${UPVOTES}/gi, posts[i].net_votes)
            .replace(/\${CATEGORY}/gi, posts[i].category);

            html += template;
          }
          element.innerHTML = html;
        } else {
          element.innerHTML = 'Error: API not responding!';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// New
steemitWidgets.new = function(options) {
  var settings = Object.assign({
    element: null,
    tag: null,
    limit: 10,
    template: '<div><a href="${URL}">${TITLE}</a><br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments</div>',
    defaultImage: 'https://steemitimages.com/DQmXYX9hqSNcikTK8ARb61BPnTk4CKMhaiqr22iCKD8CKsp/steemit-logo.png',
    payoutPrecision: 2,
    reputationPrecision: 0,
    updateInterval: 60,
    dateCallback: function (date) {
        return date;
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getDiscussionsByCreated({tag: settings.tag, limit: settings.limit}, function(err, posts) {
        if (!err && posts.length) {
          var html = '';
          for (var i = 0; i < posts.length; i++) {
            var metaData = JSON.parse(posts[i].json_metadata);
            var template = steemitWidgets.getTemplate(settings.template)
            .replace(/\${URL}/gi, 'https://steemconnect.com/sign/vote?author=' + posts[i].author + '&permlink=' + posts[i].permlink + '&weight=5000')
            .replace(/\${TITLE}/gi, posts[i].title)
            .replace(/\${AUTHOR}/gi, posts[i].author)
            .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(posts[i].author_reputation, settings.reputationPrecision))
            .replace(/\${DATE}/gi, settings.dateCallback(new Date(posts[i].created)))
            .replace(/\${IMAGE}/gi, metaData.image ? 'https://steemitimages.com/2048x512/' + metaData.image[0] : settings.defaultImage)
            .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(posts[i]).toFixed(settings.payoutPrecision))
            .replace(/\${COMMENTS}/gi, posts[i].children)
            .replace(/\${UPVOTES}/gi, posts[i].net_votes)
            .replace(/\${CATEGORY}/gi, posts[i].category);

            html += template;
          }
          element.innerHTML = html;
        } else {
          element.innerHTML = 'Error: API not responding!';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Hot
steemitWidgets.hot = function(options) {
  var settings = Object.assign({
    element: null,
    tag: null,
    limit: 10,
    template: '<div><a href="${URL}">${TITLE}</a><br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments</div>',
    defaultImage: 'https://steemitimages.com/DQmXYX9hqSNcikTK8ARb61BPnTk4CKMhaiqr22iCKD8CKsp/steemit-logo.png',
    payoutPrecision: 2,
    reputationPrecision: 0,
    updateInterval: 60,
    dateCallback: function (date) {
        return date;
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getDiscussionsByHot({tag: settings.tag, limit: settings.limit}, function(err, posts) {
        if (!err && posts.length) {
          var html = '';
          for (var i = 0; i < posts.length; i++) {
            var metaData = JSON.parse(posts[i].json_metadata);
            var template = steemitWidgets.getTemplate(settings.template)
            .replace(/\${URL}/gi, 'https://steemit.com' + posts[i].url)
            .replace(/\${TITLE}/gi, posts[i].title)
            .replace(/\${AUTHOR}/gi, posts[i].author)
            .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(posts[i].author_reputation, settings.reputationPrecision))
            .replace(/\${DATE}/gi, settings.dateCallback(new Date(posts[i].created)))
            .replace(/\${IMAGE}/gi, metaData.image ? 'https://steemitimages.com/2048x512/' + metaData.image[0] : settings.defaultImage)
            .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(posts[i]).toFixed(settings.payoutPrecision))
            .replace(/\${COMMENTS}/gi, posts[i].children)
            .replace(/\${UPVOTES}/gi, posts[i].net_votes)
            .replace(/\${CATEGORY}/gi, posts[i].category);

            html += template;
          }
          element.innerHTML = html;
        } else {
          element.innerHTML = 'Error: API not responding!';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Trending
steemitWidgets.trending = function(options) {
  var settings = Object.assign({
    element: null,
    tag: null,
    limit: 10,
    template: '<div><a href="${URL}">${TITLE}</a><br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments</div>',
    defaultImage: 'https://steemitimages.com/DQmXYX9hqSNcikTK8ARb61BPnTk4CKMhaiqr22iCKD8CKsp/steemit-logo.png',
    payoutPrecision: 2,
    reputationPrecision: 0,
    updateInterval: 60,
    dateCallback: function (date) {
        return date;
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    run();
    if (settings.updateInterval) {
      steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
    }

    function run() {
      steem.api.getDiscussionsByTrending({tag: settings.tag, limit: settings.limit}, function(err, posts) {
        if (!err && posts.length) {
          var html = '';
          for (var i = 0; i < posts.length; i++) {
            var metaData = JSON.parse(posts[i].json_metadata);
            var template = steemitWidgets.getTemplate(settings.template)
            .replace(/\${URL}/gi, 'https://steemit.com' + posts[i].url)
            .replace(/\${TITLE}/gi, posts[i].title)
            .replace(/\${AUTHOR}/gi, posts[i].author)
            .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(posts[i].author_reputation, settings.reputationPrecision))
            .replace(/\${DATE}/gi, settings.dateCallback(new Date(posts[i].created)))
            .replace(/\${IMAGE}/gi, metaData.image ? 'https://steemitimages.com/2048x512/' + metaData.image[0] : settings.defaultImage)
            .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(posts[i]).toFixed(settings.payoutPrecision))
            .replace(/\${COMMENTS}/gi, posts[i].children)
            .replace(/\${UPVOTES}/gi, posts[i].net_votes)
            .replace(/\${CATEGORY}/gi, posts[i].category);

            html += template;
          }
          element.innerHTML = html;
        } else {
          element.innerHTML = 'Error: API not responding!';
        }
      });
    }
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Full Post
steemitWidgets.fullPost = function(options) {
  var settings = Object.assign({
    element: null,
    author: 'mkt',
    permlink: 'steemline-beta-multifeed-ui-and-notifications-for-steemit',
    template: '<div><a href="${URL}">${TITLE}</a><br>${Payout}, ${UPVOTES} Upvotes, ${COMMENTS} Comments<p>${BODY}</p></div>',
    payoutPrecision: 2,
    reputationPrecision: 0,
    dateCallback: function (date) {
        return date;
    },
    bodyCallback: function (body) {
        return body;
    },
    tagsCallback: function (tags) {
      var tagsHtml = '',
          i;
      for (i = 0; i < tags.length; i++) {
          tagsHtml += '<a href="https://steemit.com/trending/' + tags[i] + '">' + tags[i] + '</a>';
      }
      return '<div class="steemit-full-post-tags">' + tagsHtml + '</div>';
    }
  }, options);

  var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

  if (element) {
    steem.api.getContent(settings.author, settings.permlink, function(err, post) {
      if (!err && post) {
        var metaData = JSON.parse(post.json_metadata);
        var template = steemitWidgets.getTemplate(settings.template)
        .replace(/\${URL}/gi, 'https://steemit.com' + post.url)
        .replace(/\${TITLE}/gi, post.title)
        .replace(/\${AUTHOR}/gi, post.author)
        .replace(/\${REPUTATION}/gi, steemitWidgets.calculateReputation(post.author_reputation, settings.reputationPrecision))
        .replace(/\${DATE}/gi, settings.dateCallback(new Date(post.created)))
        .replace(/\${BODY}/gi, settings.bodyCallback(post.body))
        .replace(/\${PAYOUT}/gi, steemitWidgets.getPayout(post).toFixed(settings.payoutPrecision))
        .replace(/\${COMMENTS}/gi, post.children)
        .replace(/\${UPVOTES}/gi, post.net_votes)
        .replace(/\${CATEGORY}/gi, post.category)
        .replace(/\${TAGS}/gi, settings.tagsCallback(metaData.tags));

        element.innerHTML = template;
      } else {
        element.innerHTML = 'Error: API not responding!';
      }
    });
  } else {
    console.log('Element ' + settings.element + ' not found!');
  }
};

// Ticker
steemitWidgets.ticker = function(options) {
    var settings = Object.assign({
        element: null,
        currency: 'steem',
        template: '<h3>${NAME} <small>(${SYMBOL})</small></h3><p>USD: ${PRICE_USD}<br>BTC: ${PRICE_BTC}</p>',
        priceBTCPrecision: 8,
        priceUSDPrecision: 2,
        updateInterval: 300 // coinmarketcap limit
    }, options);

    var element = settings.element instanceof Element ? settings.element : document.getElementById(settings.element);

    if (element) {
        run();
        if (settings.updateInterval) {
            steemitWidgets.updateIntervals.push(setInterval(run, settings.updateInterval * 1000));
        }

        function run() {

            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://api.coinmarketcap.com/v1/ticker/' + settings.currency + '/', true);
            xhr.send();
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status == 200) {
                        var ticker = JSON.parse(xhr.responseText)[0],
                            html = '';

                        var template = steemitWidgets.getTemplate(settings.template)
                            .replace(/\${ID}/g, ticker.id)
                            .replace(/\${NAME}/g, ticker.name)
                            .replace(/\${RANK}/g, ticker.rank)
                            .replace(/\${SYMBOL}/g, ticker.symbol)
                            .replace(/\${IMAGE}/g, 'https://files.coinmarketcap.com/static/img/coins/64x64/' + ticker.id + '.png')
                            .replace(/\${24H_VOLUME_USD}/g, parseFloat(ticker['24h_volume_usd']).toLocaleString(undefined, {minimumFractionDigits: 2}))
                            .replace(/\${AVAILABLE_SUPPLY}/g, parseFloat(ticker.available_supply).toLocaleString(undefined, {minimumFractionDigits: 2}))
                            .replace(/\${TOTAL_SUPPLY}/g, parseFloat(ticker.total_supply).toLocaleString(undefined, {minimumFractionDigits: 2}))
                            .replace(/\${MARKET_CAP_USD}/g, parseFloat(ticker.market_cap_usd).toLocaleString())
                            .replace(/\${PERCENT_CHANGE_1H}/g, steemitWidgets.getColoredPercentChange(ticker.percent_change_1h))
                            .replace(/\${PERCENT_CHANGE_7D}/g, steemitWidgets.getColoredPercentChange(ticker.percent_change_7d))
                            .replace(/\${PERCENT_CHANGE_24H}/g, steemitWidgets.getColoredPercentChange(ticker.percent_change_24h))
                            .replace(/\${PRICE_BTC}/g, parseFloat(ticker.price_btc).toFixed(settings.priceBTCPrecision))
                            .replace(/\${PRICE_USD}/g, parseFloat(ticker.price_usd).toFixed(settings.priceUSDPrecision));

                        html += template;
                        element.innerHTML = html;
                    } else {
                        element.innerHTML = 'Error: API not responding!';
                    }
                }
            };
        }
    } else {
        console.log('Element ' + settings.element + ' not found!');
    }
};

/**
 * Helpers
 */

steemitWidgets.getTemplate = function(template) {
  var templateElement = document.getElementById(template);
  if (templateElement) {
    return templateElement.innerHTML;
  }

  return template;
}

steemitWidgets.getPayout = function(post) {
  if (post.last_payout == '1970-01-01T00:00:00') {
    var payout = post.pending_payout_value.replace(' SBD', '');
    return parseFloat(payout);
  }

  var authorPayout = post.total_payout_value.replace(' SBD', '');
  var curatorPayout = post.curator_payout_value.replace(' SBD', '');

  return parseFloat(authorPayout) + parseFloat(curatorPayout);
}

steemitWidgets.getColoredPercentChange = function(percentChange) {
    if (percentChange > 0) {
        percentChange = '+' + percentChange;
    }

    if (percentChange > 0) {
        return '<span style="color: #090;">' + percentChange + ' %</span>';
    } else if (percentChange < 0) {
        return '<span style="color: #900;">' + percentChange + ' %</span>';
    } else {
        return percentChange + ' %';
    }
}

steemitWidgets.calculateReputation = function(rep, precision) {
  var reputation = ((((Math.log10(Math.abs(rep))) - 9) * 9) + 25),
      precision = parseInt(precision);

  return (rep < 0 ? '-' : '') + (precision ? reputation.toFixed(precision) : Math.floor(reputation));
}

steemitWidgets.calculateVotingPower = function(votingPower, lastVoteTime, precision) {
  var secondsPassedSinceLastVote = (new Date - new Date(lastVoteTime + "Z")) / 1000;
  votingPower += (10000 * secondsPassedSinceLastVote / 432000);

  return Math.min(votingPower / 100, 100).toFixed(precision);
}

// jQuery adapter

if (window.jQuery) {
  jQuery.fn.steemitProfile = function(options) {
    steemitWidgets.profile(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitBlog = function(options) {
    steemitWidgets.blog(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitFeed = function(options) {
    steemitWidgets.feed(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitNew = function(options) {
    steemitWidgets.new(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitHot = function(options) {
    steemitWidgets.hot(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitTrending = function(options) {
    steemitWidgets.trending(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitFullPost = function(options) {
    steemitWidgets.fullPost(jQuery.extend({element: this[0]}, options));
  };
  jQuery.fn.steemitTicker = function(options) {
    steemitWidgets.ticker(jQuery.extend({element: this[0]}, options));
  };
}


