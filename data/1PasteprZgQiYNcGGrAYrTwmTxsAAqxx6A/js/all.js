/*
 *PastePr - encrypted paste zite
 *Copyright (C) 2016 by Basxto
 *
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
// Generated by CoffeeScript 1.10.0
(function() {
  var Paste, ZeroConfig, ZeroFrame,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ZeroFrame = (function() {
    function ZeroFrame(url) {
      this.onCloseWebsocket = bind(this.onCloseWebsocket, this);
      this.onOpenWebsocket = bind(this.onOpenWebsocket, this);
      this.route = bind(this.route, this);
      this.onMessage = bind(this.onMessage, this);
      this.url = url;
      this.waiting_cb = {};
      this.wrapper_nonce = document.location.href.replace(/.*wrapper_nonce=([A-Za-z0-9]+).*/, "$1");
      this.connect();
      this.next_message_id = 1;
      this.init();
    }

    ZeroFrame.prototype.init = function() {
      return this;
    };

    ZeroFrame.prototype.connect = function() {
      this.target = window.parent;
      window.addEventListener("message", this.onMessage, false);
      return this.cmd("innerReady");
    };

    ZeroFrame.prototype.onMessage = function(e) {
      var cmd, message;
      message = e.data;
      cmd = message.cmd;
      if (cmd === "response") {
        if (this.waiting_cb[message.to] != null) {
          return this.waiting_cb[message.to](message.result);
        } else {
          return this.log("Websocket callback not found:", message);
        }
      } else if (cmd === "wrapperReady") {
        return this.cmd("innerReady");
      } else if (cmd === "ping") {
        return this.response(message.id, "pong");
      } else if (cmd === "wrapperOpenedWebsocket") {
        return this.onOpenWebsocket();
      } else if (cmd === "wrapperClosedWebsocket") {
        return this.onCloseWebsocket();
      } else {
        return this.route(cmd, message);
      }
    };

    ZeroFrame.prototype.route = function(cmd, message) {
      return this.log("Unknown command", message);
    };

    ZeroFrame.prototype.response = function(to, result) {
      return this.send({
        "cmd": "response",
        "to": to,
        "result": result
      });
    };

    ZeroFrame.prototype.cmd = function(cmd, params, cb) {
      if (params == null) {
        params = {};
      }
      if (cb == null) {
        cb = null;
      }
      return this.send({
        "cmd": cmd,
        "params": params
      }, cb);
    };

    ZeroFrame.prototype.send = function(message, cb) {
      if (cb == null) {
        cb = null;
      }
      message.wrapper_nonce = this.wrapper_nonce;
      message.id = this.next_message_id;
      this.next_message_id += 1;
      this.target.postMessage(message, "*");
      if (cb) {
        return this.waiting_cb[message.id] = cb;
      }
    };

    ZeroFrame.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log.apply(console, ["[ZeroFrame]"].concat(slice.call(args)));
    };

    ZeroFrame.prototype.onOpenWebsocket = function() {
      return this.log("Websocket open");
    };

    ZeroFrame.prototype.onCloseWebsocket = function() {
      return this.log("Websocket close");
    };

    return ZeroFrame;

  })();

  window.ZeroFrame = ZeroFrame;

  ZeroConfig = (function() {
    function ZeroConfig(zf) {
      this.zf = zf;
      this.store = bind(this.store, this);
      this.load = bind(this.load, this);
      this.defaultConfig = bind(this.defaultConfig, this);
    }

    ZeroConfig.prototype.defaultConfig = function() {
      this.config = {
        "license": 0,
        "encrypted": true
      };
      return this.zf.log("config", "Default Configuration loaded.");
    };

    ZeroConfig.prototype.load = function() {
      var inner_path;
      if (!this.zf.site_info.cert_user_id) {
        this.zf.cmd("wrapperNotification", ["info", "Please, select your account."]);
        this.defaultConfig();
        return false;
      }
      inner_path = "data/users/" + this.zf.site_info.auth_address + "/config.encrypted.json";
      return this.zf.cmd("fileGet", {
        "inner_path": inner_path,
        "required": false
      }, (function(_this) {
        return function(data) {
          if (data) {
            return _this.zf.cmd("eciesDecrypt", [data], function(decrypted) {
              _this.config = JSON.parse(decrypted);
              return _this.zf.log("config", "Configuration successfully loaded.");
            });
          } else {
            return _this.defaultConfig();
          }
        };
      })(this));
    };

    ZeroConfig.prototype.store = function() {
      var inner_path, json_raw;
      inner_path = "data/users/" + this.zf.site_info.auth_address + "/config.encrypted.json";
      json_raw = unescape(encodeURIComponent(JSON.stringify(this.config, void 0, '\t')));
      return this.zf.cmd("eciesEncrypt", [json_raw], (function(_this) {
        return function(encrypted) {
          return _this.zf.cmd("fileWrite", [inner_path, btoa(encrypted)], function(res) {
            if (res === "ok") {
              return _this.zf.log("config", "Configuration successfully stored.");
            } else {
              return _this.zf.cmd("wrapperNotification", ["error", "File write error: " + res]);
            }
          });
        };
      })(this));
    };

    return ZeroConfig;

  })();

  Paste = (function(superClass) {
    extend(Paste, superClass);

    function Paste() {
      this.upload = bind(this.upload, this);
      this.crpytUpload = bind(this.crpytUpload, this);
      this.onOpenWebsocket = bind(this.onOpenWebsocket, this);
      this.selectUser = bind(this.selectUser, this);
      return Paste.__super__.constructor.apply(this, arguments);
    }

    Paste.prototype.licenses = ["GPLv3", "GPLv2", "AGPLv3", "Apache License 2.0", "MPL 2.0", "CC0 1.0 Universal", "CC BY 4.0 International", "CC BY 3.0 International", "CC BY-SA 4.0 International", "CC BY-SA 3.0 International", "LGPLv3", "LGPLv2.1", "FDLv1.3", "FDLv1.2", "X11 License", "Artistic License 2.0", "custom"];

    Paste.prototype.init = function() {
      var i, len, license, ref;
      this.cmd("wrapperNotification", ["info", "Welcome to PastePrimitively"]);
      ref = this.licenses;
      for (i = 0, len = ref.length; i < len; i++) {
        license = ref[i];
        document.getElementById("license").add(new Option(license));
      }
      return document.getElementById("license").selectedIndex = 0;
    };

    Paste.prototype.selectUser = function() {
      this.cmd("certSelect", [["zeroid.bit", "zeroverse.bit"]]);
      return false;
    };

    Paste.prototype.routeUrl = function(url, hash) {
      var id, iv, key, match;
      this.log("Routing url:", url);
      if (match = url.match(/Paste:([0-9]+-[^#&]*)/)) {
        this.log("Matched Paste:", match[1]);
        this.log("Key:", hash);
        id = match[1].split('-');
        iv = "";
        if (match = hash.match(/iv:([^#&]*)/)) {
          iv = match[1];
        }
        key = "";
        if (match = hash.match(/key:([^#&]*)/)) {
          key = match[1];
        }
        return this.load(id[0], id[1], iv, key);
      }
    };

    Paste.prototype.load = function(id, address, iv, key) {
      var query;
      query = "SELECT paste.*, keyvalue.value AS cert_user_id, data_json.directory AS dir FROM paste\nLEFT JOIN json AS data_json USING (json_id)\nLEFT JOIN json AS content_json ON (\n  data_json.directory = content_json.directory AND content_json.file_name = 'content.json'\n)\nLEFT JOIN keyvalue ON (keyvalue.key = 'cert_user_id' AND keyvalue.json_id = content_json.json_id)\nWHERE id = '" + id + "' AND dir = 'users/1" + address + "'\nORDER BY id";
      this.log("You requested:", "id:" + id + ";address:" + address + ";iv:" + iv + ";key:" + key + ";");
      this.log("sql", query);
      return this.cmd("dbQuery", [query], (function(_this) {
        return function(pastes) {
          var paste;
          _this.log("sql return", pastes);
          if (pastes && pastes.length === 1) {
            paste = pastes[0];
            document.getElementById("paste").value = paste.content;
            document.getElementById("title").value = paste.title;
            document.getElementById("license").selectedIndex = paste.license;
            document.getElementById("author").innerHTML = " by " + paste.cert_user_id;
            if (paste.encrypted === 1) {
              document.getElementById("encrypt").checked = true;
              if (iv !== "" && key !== "") {
                _this.cmd("aesDecrypt", [iv, paste.title, key], function(decrypted) {
                  _this.log("decrypted: ", decrypted);
                  return document.getElementById("title").value = decrypted;
                });
                return _this.cmd("aesDecrypt", [iv, paste.content, key], function(decrypted) {
                  _this.log("decrypted: ", decrypted);
                  return document.getElementById("paste").value = decrypted;
                });
              } else {
                return _this.cmd("wrapperNotification", ["error", "Can't encrypt, key or iv missing."]);
              }
            }
          } else {
            return _this.cmd("wrapperNotification", ["error", "Can't find requested paste."]);
          }
        };
      })(this));
    };

    Paste.prototype.route = function(cmd, message) {
      if (cmd === "setSiteInfo") {
        if (message.params.cert_user_id) {
          document.getElementById("select_user").innerHTML = message.params.cert_user_id;
        } else {
          document.getElementById("select_user").innerHTML = "Sign in...";
        }
        return this.site_info = message.params;
      }
    };

    Paste.prototype.onOpenWebsocket = function(e) {
      return this.cmd("siteInfo", {}, (function(_this) {
        return function(site_info) {
          if (site_info.cert_user_id) {
            document.getElementById("select_user").innerHTML = site_info.cert_user_id;
          }
          _this.site_info = site_info;
          _this.log("location:", window.location.search);
          _this.log("hash:", window.location.hash);
          _this.routeUrl(window.location.search.substring(1), window.location.hash.substring(1));
          _this.cmd("innerLoaded", true);
          if (!_this.config) {
            _this.config = new ZeroConfig(_this);
            return _this.config.load();
          }
        };
      })(this));
    };

    Paste.prototype.crpytUpload = function() {
      if (document.getElementById("encrypt").checked) {
        return this.cmd("aesEncrypt", [document.getElementById("title").value], (function(_this) {
          return function(encrypted) {
            _this.log("encrypted: ", encrypted);
            document.getElementById("title").value = encrypted[2];
            return _this.cmd("aesEncrypt", [document.getElementById("paste").value, encrypted[0], encrypted[1]], function(encrypted) {
              _this.log("encrypted: ", encrypted);
              return _this.upload(encrypted);
            });
          };
        })(this));
      } else {
        return this.upload(false);
      }
    };

    Paste.prototype.upload = function(encrypted) {
      var inner_path;
      if (!Pastepr.site_info.cert_user_id) {
        Pastepr.cmd("wrapperNotification", ["info", "Please, select your account."]);
        return false;
      }
      inner_path = "data/users/" + this.site_info.auth_address + "/data.json";
      this.cmd("fileGet", {
        "inner_path": inner_path,
        "required": false
      }, (function(_this) {
        return function(data) {
          var json_raw, now, text;
          if (data) {
            data = JSON.parse(data);
          } else {
            data = {
              "paste": []
            };
          }
          now = +(new Date);
          text = document.getElementById("paste").value;
          if (encrypted) {
            text = encrypted[2];
          }
          if (data.next_id == null) {
            data.next_id = 0;
          }
          data.paste.push({
            "id": data.next_id++,
            "title": document.getElementById("title").value,
            "content": text,
            "license": document.getElementById("license").selectedIndex,
            "encrypted": !!encrypted,
            "date_added": now
          });
          json_raw = unescape(encodeURIComponent(JSON.stringify(data, void 0, '\t')));
          return _this.cmd("fileWrite", [inner_path, btoa(json_raw)], function(res) {
            if (res === "ok") {
              return _this.cmd("sitePublish", {
                "inner_path": inner_path
              }, function(res) {
                var url;
                document.getElementById("paste").value = text;
                url = "http://127.0.0.1:43110/1PasteprZgQiYNcGGrAYrTwmTxsAAqxx6A?Paste:" + (data.next_id - 1) + "-" + (_this.site_info.auth_address.substr(1));
                if (encrypted) {
                  url += "#iv:" + encrypted[1] + "&key:" + encrypted[0];
                }
                return document.getElementById("permalink").innerHTML = "Your permalink: <a href=\"" + url + "\">" + url + "</a>";
              });
            } else {
              return _this.cmd("wrapperNotification", ["error", "File write error: " + res]);
            }
          });
        };
      })(this));
      return false;
    };

    return Paste;

  })(ZeroFrame);

  window.Pastepr = new Paste();

  window.onhashchange = (function(_this) {
    return function(e) {
      return Pastepr.routeUrl(window.location.search.substring(1), window.location.hash.substring(1));
    };
  })(this);

}).call(this);
