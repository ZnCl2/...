{"next_paste_id":2,"next_comment_id":0,"paste":[{"paste_id":0,"description":"( ͡° ͜ʖ ͡°) ","body":"#tor.py\nimport socks\nimport codecs\nimport socket\nimport time\nfrom stem.control import Controller\nfrom stem import Signal\nfrom bs4 import BeautifulSoup as bs\nsocks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, \"127.0.0.1\", 9150)\nfrom urllib import request\nfrom tkinter import *\nfrom PIL import Image, ImageTk\nimport os\nimport alpha\n\ntimeout = 120\nsocket.setdefaulttimeout(timeout)\n\n# This function has no DNS resolve\n# it need to use the real ip adress to connect instead of www.google.com\ndef create_connection_fixed_dns_leak(address, timeout=None, source_address=None):\n    sock = socks.socksocket()\n    sock.connect(address)\n    return sock\n#connect to Tor Network\ndef connect():\n    with Controller.from_port(port = 9151) as controller: #authenticate in tor network\n        controller.authenticate()\n        socket.socket = socks.socksocket\n        socket.create_connection = create_connection_fixed_dns_leak\n#get's page content\ndef get_html_file(url):\n    request.urlretrieve(url, \"main.pl\")\n\ndef find_captha_id(tag):\n    input_tag = str(soup.findAll(tag)[1])\n    captha_id = ''\n    for i in input_tag:\n        if i.isdigit() or i=='-':\n            captha_id+=i\n    return captha_id\n\ndef get_captha_img(captha_id):\n    request.urlretrieve(\"http://prjadetzgebvdmb6.onion/cgi-bin/chat.pl?action=captcha&client=\"+captha_id, \"captha.jpg\")\n\ndef delete_trash():\n    f.seek(0)\n    f.truncate()\n    f.write(soup.prettify())\n    for tag in soup.find_all('table'):\n        tag.decompose()\n    f.seek(0)\n    f.truncate()\n    f.write(soup.prettify())\n#main program\n\nconnect()\n\nurl = 'http://prjadetzgebvdmb6.onion/cgi-bin/chat.pl'\nget_html_file(url)\nf = open(\"main.pl\",\"r+\")\nsoup = bs(f, \"html.parser\")\ndelete_trash()\ncaptha_id = find_captha_id('input')\nprint (captha_id, \"- captcha id\")\nf.close()\nget_captha_img(captha_id)\ncapin = input(\"enter captha: \")\n\nget_html_file('http://prjadetzgebvdmb6.onion/cgi-bin/chat.pl?action=login&captchaid='+captha_id+'&nick=pandroid&pass=pandroidQ1W2E3&captchafield='+capin+'&colour=99999')\nf = open(\"main.pl\",\"r+\")\nsoup = bs(f, \"html.parser\")\ndelete_trash()\ninput_tag = str(soup.findAll('frame')[1])\nprint(input_tag[66:98], \" - session id\")\nf.close()\n\n\nstarttime=time.time()\n\ntimer = True\nxxx = 1\nwhile timer:\n\turl = 'http://prjadetzgebvdmb6.onion/cgi-bin/chat.pl?action=ccview&session='+input_tag[66:98]\n\tget_html_file(url)\n\tf = codecs.open(\"main.pl\",\"r+\",encoding=\"utf-8\")\n\tsoup = bs(f, \"html.parser\")\n\tf.seek(0)\n\tf.truncate()\n\tsoup.prettify()\n\tfor tag in soup.find_all('table'):\n\t\ttag.decompose()\n\tf.write(soup.prettify())\n\tf.close\n\n\tf = open(\"main.pl\", \"r+\")\n\tsoup = bs(f,\"html.parser\")\n\tlinks = []\n\ti = 0\n\ts = 0\n\tfor link in soup.findAll('a'):\n\t\tif link.get('href') and i > 2:\n\t\t\ttmplink = link.get('href')[28:].replace(\"%2F\", \"/\")\n\t\t\ttmplink = tmplink.replace(\"%3F\", \"/\")\n\t\t\ttmplink = tmplink.replace(\"%3D\", \"/\")\n\t\t\ttmplink = tmplink.replace(\"%3A\" , \":\")\n\t\t\tlinks.append(tmplink)\n\t\ti+=1\n\tf.close\n\t#print (links)\n\tprint (i-6, \"links found\")\n\n\tfor lnk in links:\n\t\twith open(\"linkdb.txt\", \"r+\") as f:\n\t\t\tline_found = any(lnk in line for line in f)\n\t\t\tif not line_found:\n\t\t\t\tf.seek(0, os.SEEK_END)\n\t\t\t\tf.write(lnk+\"\\n\")\n\t\t\t\tURL = lnk.replace('\\n', '')\n\t\t\t\tIMAGE = URL.rsplit('/',1)[1]\n\t\t\t\ts+=1\n\t\t\t\tprint(IMAGE, s, \"/\", i-6)\n\t\t\t\ttry:\n\t\t\t\t\trequest.urlretrieve(URL, IMAGE)\n\t\t\t\texcept Exception:\n\t\t\t\t\tif True:\n\t\t\t\t\t\tprint ('404 found. moving on...')\n\t\t\t\t\t\tpass\n\txxx=xxx+1\n\tif xxx==5:\n\t\ttimer = False\n\ttime.sleep(60.0 - ((time.time() - starttime) % 60.0))\n\nalpha.work()\n","language":"text/x-python","encrypted":false,"added":1492581674},{"paste_id":1,"description":"( ͡° ͜ʖ ͡°)  part-2","body":"#alpha.py\nimport glob\nimport hashlib\nimport os\n\ndef parseI():\n    global jpgimage\n    jpgimage = glob.glob('*.jpg')\n    jpgimage += glob.glob('*.jpeg')\n    jpgimage += glob.glob('*.gif')\n    jpgimage += glob.glob('*.png')\n\ndef removecopy():\n    global jpgimage\n    count = len(jpgimage)\n    for image in jpgimage:\n        with open(\"md5db.txt\", \"r+\") as f:\n            Ihash = hashlib.md5(open(image,'rb').read()).hexdigest()\n            hash_found = any(Ihash in line for line in f)\n            if not hash_found:\n                f.seek(0, os.SEEK_END)\n                f.write(Ihash+\"\\n\")\n            else:\n                os.remove(image)\n        count-=1\n        print(str(count)+\" - left\")\n\ndef work():\n    global md5\n    md5 = []\n    parseI()\n    removecopy()\n","language":"text/x-python","encrypted":false,"added":1492581738}],"comment":[]}