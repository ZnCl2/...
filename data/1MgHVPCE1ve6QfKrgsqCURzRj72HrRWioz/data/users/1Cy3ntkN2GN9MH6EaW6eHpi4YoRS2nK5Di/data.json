{"next_paste_id":5,"next_comment_id":0,"paste":[{"paste_id":0,"description":"","body":"Git Center - GitHub for ZeroNet\nGit Center is a decentralized hosting platform for Git repositories. We provide several collaboration features such as bug tracking for every project, and private and public repositories.\n\n> Why Git Center?\nCurrently Git Center is the only repository hosting in ZeroNet. This is like 0git, but better: a full alternative to GitHub.\n\n> Cool! How can I access it?\nFull link: http://127.0.0.1:43110/1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t/\nCurrently you can also use http://127.0.0.1:43110/0sh.bit/?GitCenter","language":"text/plain","encrypted":false,"added":1509637199},{"paste_id":1,"description":"","body":"-- content.json\n{\n \"address\": \"1GitLiXB6t5r8vuU2zC6a8GYj9ME6HMQ4t\",\n \"files\": {\n  \"data.json\": {\n   \"sha512\": \"95417d0b0e16c43b46a90c7215c42749e002ad00f45cbfaf6c74d579c83500dd\",\n   \"size\": 65\n  }\n },\n \"inner_path\": \"data/users/1CvyxRucf7BbDvGtFe5LayTS2qX88VN7Er/content.json\",\n \"modified\": 1513435873,\n \"signs\": {\n  \"1CvyxRucf7BbDvGtFe5LayTS2qX88VN7Er\": \"HL3EL/PuTW02aPqsiBEgZRPJUgyOBxQZQUXFdfUPVJ68EueUqT7Qv0C76dfrhHbUkeLRMkuNoy6Fd7Hu/g+z28s=\"\n }\n}\n\n-- data.json\n<pre>\n{\n\t\"commitEmail\": \"ivanq@zeroid.bit\",\n\t\"commitName\": \"Ivanq\"\n}","language":"text/plain","encrypted":false,"added":1513445104},{"paste_id":2,"description":"ZeroHello.xml","body":"<Container>\n\t<Use lib=\"Loops\" />\n\t<Use lib=\"TabSwitch\" />\n\t<Use lib=\"Conditional\" />\n\t<Use lib=\"Scrollable\" />\n\t<Use lib=\"Events\" />\n\t<Use lib=\"ZeroFrame\" />\n\n\t<Global ::getAllSiteList=\"cached(ZeroFrame.cmd, 'siteList')\" />\n\t<Global ::getAllSites=\"dict([(site['address'], site) for site in getAllSiteList()])\" />\n\n\t<Global ::getFavoriteList=\"ZeroFrame.cmd('userGetSettings').get('favorite_sites', {}).keys()\" />\n\t<Global ::getFavorites=\"[getAllSites()[address] for address in getFavoriteList()]\" />\n\n\t<Global ::getOwnedSites=\"[site for site in getAllSiteList() if site['settings']['own']]\" />\n\n\t<Define name=\"Offset\">\n\t\t<Slot define=\"left\" default=\"0\" />\n\t\t<Slot define=\"right\" default=\"0\" />\n\t\t<Slot define=\"top\" default=\"0\" />\n\t\t<Slot define=\"bottom\" default=\"0\" />\n\t\t<Slot define=\"bg\" :default=\"__unset__\" />\n\t\t<Slot define=\"\" container=\"node\" />\n\n\t\t<StackPanel :bg=\"bg\" orientation=\"vertical\">\n\t\t\t<Rect width=\"0\" :height=\"top\" />\n\n\t\t\t<StackPanel orientation=\"horizontal\" :inherit-bg=\"bg\">\n\t\t\t\t<Rect :width=\"left\" height=\"0\" />\n\t\t\t\t<Slot />\n\t\t\t\t<Rect :width=\"right\" height=\"0\" />\n\t\t\t</StackPanel>\n\n\t\t\t<Rect width=\"0\" :height=\"bottom\" />\n\t\t</StackPanel>\n\t</Define>\n\n\t<Define name=\"Site\">\n\t\t<Slot define=\"dot\" />\n\t\t<Slot define=\"\" container=\"text\" />\n\n\t\t<Focusable ::onFocus=\"print self.children[0].parent.children[0] == self.children[0]\">\n\t\t\t<If\n\t\t\t\t:is=\"focused\"\n\n\t\t\t\twith=\"bg\"\n\t\t\t\tthen=\"#353946 | blue\"\n\t\t\t\telse=\"inherit\"\n\t\t\t>\n\t\t\t\t<StackPanel width=\"100%\" :bg=\"bg\" orientation=\"horizontal\">\n\t\t\t\t\t<Rect width=\"100%\" height=\"1\" />\n\n\t\t\t\t\t<Switch />\n\n\t\t\t\t\t<Text :color=\"dot\" bg=\"inherit\">  @ </Text>\n\t\t\t\t\t<Text color=\"#FFF | white\" bg=\"inherit\"><Slot /></Text>\n\n\t\t\t\t\t<Switch />\n\n\t\t\t\t\t<Text width=\"100%\" color=\"#3D444B | white\" bg=\"inherit\" fill=\"fill\">_</Text>\n\t\t\t\t</StackPanel>\n\t\t\t</If>\n\t\t</Focusable>\n\t</Define>\n\n\t<Define name=\"SiteGroup\">\n\t\t<Slot define=\"\" container=\"text\" />\n\n\t\t<StackPanel width=\"100%\" bg=\"inherit\" orientation=\"vertical\">\n\t\t\t<Rect width=\"100%\" height=\"1\" />\n\t\t\t<Text color=\"#666 | white\" bg=\"inherit\">    <Slot />:</Text>\n\t\t\t<Rect width=\"100%\" height=\"1\" />\n\t\t</StackPanel>\n\t</Define>\n\n\t<Define name=\"ColoredValue\">\n\t\t<Slot define=\"color\" />\n\t\t<Slot define=\"name\" />\n\t\t<Slot define=\"value\" />\n\n\t\t<Offset left=\"2\" top=\"1\" right=\"2\" bottom=\"1\" bg=\"#FFF | white\">\n\t\t\t<StackPanel orientation=\"horizontal\" bg=\"inherit\">\n\t\t\t\t<Text color=\"#2d2f3e | black\" bg=\"inherit\"><Slot name=\"name\" />: </Text>\n\t\t\t\t<Text :color=\"color\" bg=\"inherit\"><Slot name=\"value\" /></Text>\n\t\t\t</StackPanel>\n\t\t</Offset>\n\t</Define>\n\n\t<!-- main -->\n\t<StackPanel width=\"100%\" height=\"100%\" orientation=\"horizontal\" optimize=\"aggressive\">\n\t\t<!-- sidebar -->\n\t\t<StackPanel width=\"30%\" height=\"100%\" orientation=\"vertical\">\n\n\t\t\t<!-- 0 Hello ZeroNet_ -->\n\t\t\t<StackPanel width=\"100%\" height=\"5\" bg=\"#1E2429 | black\" orientation=\"horizontal\">\n\n\t\t\t\t<Rect width=\"3\" height=\"100%\" />\n\n\t\t\t\t<!-- 0 -->\n\t\t\t\t<StackPanel width=\"3\" height=\"5\" bg=\"inherit\" orientation=\"vertical\">\n\t\t\t\t\t<Text color=\"#9764f8 | magenta\" bright=\"bright\" bg=\"inherit\"> _ </Text>\n\t\t\t\t\t<Text color=\"#9764f8 | magenta\" bright=\"bright\" bg=\"inherit\">/ \\</Text>\n\t\t\t\t\t<Text color=\"#9764f8 | magenta\" bright=\"bright\" bg=\"inherit\">|/|</Text>\n\t\t\t\t\t<Text color=\"#9764f8 | magenta\" bright=\"bright\" bg=\"inherit\">\\_/</Text>\n\t\t\t\t</StackPanel>\n\n\t\t\t\t<Rect width=\"3\" height=\"100%\" />\n\n\t\t\t\t<!-- Hello ZeroNet_ -->\n\t\t\t\t<StackPanel width=\"100%\" height=\"5\" bg=\"inherit\" orientation=\"vertical\">\n\t\t\t\t\t<Rect width=\"100%\" height=\"2\" />\n\t\t\t\t\t<Text color=\"#FFF | white\" bright=\"bright\" bg=\"inherit\">Hello ZeroNet_</Text>\n\t\t\t\t</StackPanel>\n\t\t\t</StackPanel>\n\n\t\t\t<Scrolled y=\"0\">\n\t\t\t\t<StackPanel width=\"100%\" height=\"100%\" bg=\"#232A31 | black\" orientation=\"vertical\">\n\t\t\t\t\t<!-- Sites -->\n\t\t\t\t\t<Rect width=\"100%\" height=\"1\" />\n\t\t\t\t\t<Text color=\"#83EFFF | cyan\" bright=\"bright\" bg=\"inherit\">    Sites</Text>\n\t\t\t\t\t<Text color=\"#83EFFF | cyan\" bright=\"bright\" bg=\"inherit\">   -------</Text>\n\n\t\t\t\t\t<!-- Filter: Site name -->\n\t\t\t\t\t<Rect width=\"100%\" height=\"1\" />\n\n\t\t\t\t\t<StackPanel width=\"100%\" height=\"3\" bg=\"inherit\" orientation=\"horizontal\">\n\t\t\t\t\t\t<Rect width=\"2\" height=\"100%\" />\n\n\t\t\t\t\t\t<StackPanel width=\"100% - 4\" inherit-color=\"#6c7884 | white\" bg=\"#1e2429 | black\" orientation=\"horizontal\">\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\">+-</Text>\n\t\t\t\t\t\t\t<Text width=\"100% - 4\" color=\"inherit\" bg=\"inherit\" fill=\"fill\">-</Text>\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\">-+</Text>\n\n\t\t\t\t\t\t\t<Switch />\n\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\">| </Text>\n\t\t\t\t\t\t\t<Text width=\"100% - 4\" color=\"#FFF | white\" bg=\"inherit\">Filter: Site name</Text>\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\"> |</Text>\n\n\t\t\t\t\t\t\t<Switch />\n\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\">+-</Text>\n\t\t\t\t\t\t\t<Text width=\"100% - 4\" color=\"inherit\" bg=\"inherit\" fill=\"fill\">-</Text>\n\t\t\t\t\t\t\t<Text color=\"inherit\" bg=\"inherit\">-+</Text>\n\t\t\t\t\t\t</StackPanel>\n\t\t\t\t\t</StackPanel>\n\n\t\t\t\t\t<Rect width=\"100%\" height=\"1\" />\n\n\n\t\t\t\t\t<!-- Favorites -->\n\t\t\t\t\t<SiteGroup>FAVORITES</SiteGroup>\n\n\t\t\t\t\t<For slot=\"site\" :in=\"getFavorites()\">\n\t\t\t\t\t\t<Site :dot=\"toColor(site['address'], 40, 50)\"><Slot name=\"site['content']['title'].encode('utf-8')\" /></Site>\n\t\t\t\t\t</For>\n\n\t\t\t\t\t<!-- Owned sites -->\n\t\t\t\t\t<SiteGroup>OWNED SITES</SiteGroup>\n\n\t\t\t\t\t<For slot=\"site\" :in=\"getOwnedSites()\">\n\t\t\t\t\t\t<Site :dot=\"toColor(site['address'], 40, 50)\"><Slot name=\"site['content']['title'].encode('utf-8')\" /></Site>\n\t\t\t\t\t</For>\n\t\t\t\t</StackPanel>\n\t\t\t</Scrolled>\n\t\t</StackPanel>\n\n\t\t<StackPanel width=\"70%\" height=\"100%\" bg=\"#FFF | white\" orientation=\"vertical\">\n\t\t\t<AlignRight width=\"100%\" height=\"5\" bg=\"#EDF2F5 | white\">\n\t\t\t\t<Offset top=\"1\" bottom=\"1\">\n\t\t\t\t\t<StackPanel orientation=\"horizontal\" wspacing=\"2\">\n\t\t\t\t\t\t<ColoredValue color=\"#2ecc71\" name=\"PORT\" value=\"CLOSED\" />\n\t\t\t\t\t\t<ColoredValue color=\"#E7A43C\" name=\"TOR\" value=\"ERROR\" />\n\t\t\t\t\t</StackPanel>\n\t\t\t\t</Offset>\n\t\t\t</AlignRight>\n\t\t</StackPanel>\n\t</StackPanel>\n</Container>","language":"text/plain","encrypted":false,"added":1522958106},{"paste_id":4,"description":"KxoID registrar code","body":"# Superadmin setup:\n# {\n#     \"level\": 1,\n#     \"privatekey\": \"...\"\n# }\n# Admin setup:\n# {\n#     \"level\": 2,\n#     \"public_address\": \"...\",\n#     \"privatekey\": \"...\"\n# }\n\n\nimport ZeroFrame\nimport PeerMessage\nimport json\nimport datetime\nimport re\nimport base64\nimport Util\n\n\nSA_PUBLIC_ADDRESS = u\"12F5SvxoPR128aiudte78h8pY7mobroG6V\" # public address, genid.getAddress()\n\nconsensus = {}\ncurrent_registrations = {}\ncurrent_registrations_passing = set()\n\ndef start():\n    # Set up global constants\n    suf = \"\" if config[\"level\"] == 1 else str(config[\"level\"])\n\n    global LEVEL, REGISTER_CMD, REGISTERBOT_CMD, PUBLIC_ADDRESS, PRIVATEKEY\n    LEVEL = config[\"level\"]\n    REGISTER_CMD = \"register\" + suf\n    REGISTERBOT_CMD = \"registerbot\" + suf\n    PUBLIC_ADDRESS = SA_PUBLIC_ADDRESS if LEVEL == 1 else config[\"public_address\"]\n    PRIVATEKEY = config[\"privatekey\"]\n\n    if LEVEL not in (1, 2):\n        print(\"[KxoNetwork] KxoNetwork can't function properly, level is either 1 or 2\")\n\n    # Join PeerMessage\n    PeerMessage.join()\n    PeerMessage.onPeerReceive(onPeerReceive)\n\n\ndef decrypt(data):\n    return ZeroFrame.eciesDecrypt(data, PRIVATEKEY, wait=True)\n\n\n\ndef onPeerReceive(ip, hash, message, signed_by, cert, **_):\n    if message is None or signed_by is None:\n        return\n\n    with Transaction(signed_by):\n        if message.startswith(REGISTER_CMD + \"|\"):\n            is_bot = False\n        elif message.startswith(REGISTERBOT_CMD + \"|\"):\n            is_bot = True\n        elif message.startswith(\"success|\") or message.startswith(\"error|\") or message.startswith(\"consensusRequest|\"):\n            # Check that this message is signed either by a superadmin\n            # or by an admin\n            if signed_by in getAllowedAddresses():\n                PeerMessage.peerValid(hash=hash)\n            else:\n                PeerMessage.peerInvalid(hash=hash)\n\n            if message.startswith(\"consensusRequest|\"):\n                # Consensus request\n                username, address, date = message.split(\"|\")[1:]\n                date = int(date)\n                if (\n                    current_registrations.get(username, float(\"+inf\")) < date or\n                    current_registrations.get(address, float(\"+inf\")) < date\n                ):\n                    # We started registering before, report\n                    PeerMessage.peerBroadcast(\n                        f\"consensusVeto|{username}|{address}|{date}\"\n                    )\n                    return\n            elif message.startswith(\"consensusVeto|\"):\n                # Consensus veto\n                if ip != \"self\":\n                    username, address, date = message.split(\"|\")[1:]\n                    date = int(date)\n                    consensus[(username, address, date)] = signed_by\n            return\n        else:\n            # Unknown command\n            print(\"[KxoNetwork] Unknown command:\", message.split(\"|\")[0])\n            return\n\n        # This message is OK\n        PeerMessage.peerValid(hash=hash)\n\n        username = decrypt(message.split(\"|\")[1])\n\n        # Check whitespace / emptyness\n        if username == \"\" or re.findall(r\"\\s\", username) != []:\n            print(\"[KxoNetwork] Whitespace / blank username:\", username)\n            raise KxoError(\"WhitespaceOrBlank\")\n\n        # Check uniqueness\n        if not checkUniqueness(username, signed_by):\n            print(\"[KxoNetwork] Not unique username/key:\", username, \"/\", signed_by)\n            raise KxoError(\"NotUnique\")\n\n        # Add to current registrations\n        date = datetime.datetime.now().timestamp()\n        current_registrations[username] = date\n        current_registrations[signed_by] = date\n\n        if not checkConsensus(username, signed_by):\n            # Remove from current registrations\n            try:\n                del current_registrations[username]\n            except Exception:\n                pass\n            try:\n                del current_registrations[signed_by]\n            except Exception:\n                pass\n            return\n\n        # Really registering\n        current_registrations_passing.add(username)\n        current_registrations_passing.add(signed_by)\n\n        # Sign certificate\n        cert_auth_type = \"bot\" if is_bot else \"web\"\n        cert = signed_by + \"#\" + cert_auth_type + \"/\" + username\n        signature = ZeroFrame.ecdsaSign(cert, PRIVATEKEY, wait = True)\n        print(\"KxoNetwork: \", cert, signature, PRIVATEKEY)\n\n        # Add to database\n        addToDatabase(username, signed_by, signature, is_bot)\n\n        # Send the result\n        ZeroFrame.peerBroadcast(\n            message=f\"success|{signed_by}|{username}|{signature}\",\n            immediate=True,\n            privatekey=PRIVATEKEY\n        )\n\n        # Remove from current registrations\n        try:\n            del current_registrations[username]\n        except Exception:\n            pass\n        try:\n            del current_registrations[signed_by]\n        except Exception:\n            pass\n        try:\n            current_registrations_passing.remove(username)\n        except Exception:\n            pass\n        try:\n            current_registrations_passing.remove(signed_by)\n        except Exception:\n            pass\n\n\n\n\ndef checkUniqueness(username, signed_by):\n    rows = ZeroFrame.dbQuery(\n        f\"\"\"\n            SELECT * FROM (\n                SELECT * FROM ids\n                UNION\n                SELECT * FROM bots\n            )\n\n            INNER JOIN json USING (json_id)\n\n            WHERE (\n                username=\"{username}\" OR\n                address=\"{signed_by}\"\n            ) AND (\n                file_name = \"ids.json\" OR\n                (\n                    cert_auth_type IS NOT NULL AND\n                    cert_user_id IS NOT NULL AND\n                    trustedpeer_sig IS NOT NULL\n                )\n            )\n        \"\"\",\n        wait=True\n    )\n\n    def isSignedRow(row):\n        if row[\"file_name\"] == \"ids.json\":\n            # Superadmin\n            return True\n\n        auth_address = row[\"directory\"].replace(\"users/\", \"\")\n        cert = auth_address + \"#\" + row[\"cert_auth_type\"] + \"/\" + row[\"cert_user_id\"]\n        return ZeroFrame.ecdsaVerify(cert, getAllowedAddresses(), row[\"trustedpeer_sig\"], wait=True)\n\n    return not any(map(isSignedRow, rows))\n\n\ndef addToDatabase(username, address, signature, is_bot=False):\n    # Check that we are logged in\n    site_info = ZeroFrame.siteInfo(wait=True)\n    if site_info[\"cert_user_id\"] is None:\n        # Login\n        ZeroFrame.certSet(\"kxoid.bit\", wait=True)\n        # Check that we are logged in now\n        site_info = ZeroFrame.siteInfo(wait=True)\n        if site_info[\"cert_user_id\"] is None:\n            print(\"[KxoNetwork] KxoNetwork can't function properly, you need a KxoID account\")\n            return\n\n    # Get data.json/content.json path\n    auth_address = site_info[\"auth_address\"]\n    if LEVEL == 1:\n        # Superadmin\n        data_inner_path = \"data/ids.json\"\n        content_inner_path = \"content.json\"\n    elif LEVEL == 2:\n        # Admin\n        data_inner_path = f\"data/users/{auth_address}/data.json\"\n        content_inner_path = f\"data/users/{auth_address}/content.json\"\n\n    # Parse old data\n    data = ZeroFrame.fileGet(inner_path=data_inner_path, required=False, wait=True)\n    if data:\n        data = json.loads(data)\n    else:\n        data = {}\n\n    id_table = \"bots\" if is_bot else \"ids\"\n\n    # Create table if it doesn't exist\n    if id_table not in data:\n        data[id_table] = []\n\n    # Add a row to the table\n    date = datetime.datetime.now().timestamp()\n    data[id_table].append({\n        \"id\": date,\n        \"username\": username,\n        \"address\": address,\n        \"signature\": signature,\n        \"date_added\": date\n    })\n\n    # Save\n    data = json.dumps(data)\n    res = ZeroFrame.fileWrite(data_inner_path, base64.b64encode(data.encode(\"utf8\")), wait=True)\n    if res != \"ok\":\n        print(\"[KxoNetwork] Failed to register user, error while writing:\", res)\n        raise KxoError(\"ServerError\")\n    \n    if LEVEL == 1:\n        res = ZeroFrame.siteSign(inner_path=content_inner_path, privatekey = \"stored\", wait=True)\n    elif LEVEL == 2:\n        res = ZeroFrame.siteSign(inner_path=content_inner_path, wait=True)\n    \n    if res != \"ok\":\n        print(\"[KxoNetwork] Failed to register user, error while signing:\", res)\n        raise KxoError(\"ServerError\")\n    # Note: no need to check publishing for errors, since an error is OK in this case\n    # (e.g.: the port may be closed)\n    ZeroFrame.sitePublish(inner_path=content_inner_path, sign=False)\n\n\ndef getAllowedAddresses():\n    allowed_addresses = ZeroFrame.siteInfo(wait=True)[\"content\"][\"allowed_addresses\"]\n    return [SA_PUBLIC_ADDRESS] + allowed_addresses\n\n\ndef checkConsensus(username, address):\n    if username in current_registrations_passing or address in current_registrations_passing:\n        return False\n\n\n    # Request consensus\n    date = current_registrations[username]\n    PeerMessage.peerBroadcast(\n        message=f\"consensusRequest|{username}|{address}|{date}\"\n    )\n\n    Util.sleep(15)\n\n    if (username, address, date) in consensus:\n        # Veto\n        veto_address = consensus[(username, address, date)]\n        print(f\"[KxoNetwork] Consensus veto (by {veto_address}): not registering {username} for {address}\")\n        del consensus[(username, address, date)]\n        return False\n    return True\n\n\n\n# A useful wrapper for \"with\" clause. Usage:\n# with Transaction(signed_by):\n#     if not message:\n#         raise KxoError(\"Blank\")\n\nclass KxoError(Exception):\n    def __init__(self, message):\n        Exception.__init__(self)\n        self.message = message\n    def __str__(self):\n        return self.message\n\nclass Transaction:\n    def __init__(self, signed_by):\n        self.signed_by = signed_by\n\n    def __enter__(self):\n        pass\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if isinstance(exc_value, KxoError):\n            message = \"error|\" + self.signed_by + \"|\" + str(exc_value)\n            ZeroFrame.peerBroadcast(message=message, privatekey=PRIVATEKEY)\n        elif exc_value is not None:\n            raise exc_value\n\n\n\n\n# Read config\nconfig = ZeroFrame.fileGet(\"0config.json\", wait = True)\nif config is not None:\n    config = json.loads(config)\n    start()","language":"text/x-python","encrypted":false,"added":1568751227}],"comment":[]}