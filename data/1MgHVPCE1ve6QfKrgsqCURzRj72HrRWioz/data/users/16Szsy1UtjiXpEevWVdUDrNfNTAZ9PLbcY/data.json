{"next_paste_id":37,"next_comment_id":0,"paste":[{"paste_id":0,"description":"","body":"<!-- A simple paste-bin with syntax highlighting support! -->\n\n<head>\n  <title>Example</title>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n</head>","language":"xml","added":1457075043},{"paste_id":1,"description":"Description here","body":"fn main() {\n    println!(\"Hello world!\");\n}","language":"rust","added":1457075743},{"paste_id":2,"description":"","body":"test","language":"text/plain","added":1457076772},{"paste_id":6,"description":"","body":"testing testing testing...","language":"text/plain","added":1457078194},{"paste_id":14,"description":"","body":"test","language":"text/plain","added":1457080308},{"paste_id":15,"description":"","body":"test!","language":"text/plain","added":1457080347},{"paste_id":16,"description":"","body":"Test","language":"text/plain","added":1457088895},{"paste_id":18,"description":"test","body":"using System;\nusing static System.Console;\n\nnamespace Meme\n{\n    class Meme\n    {\n        public static void Main(string[] args)\n        {\n            WriteLine(\"Nice Meme!\");\n            ReadLine();\n        }\n    }\n}","language":"text/x-csharp","added":1457147795},{"paste_id":22,"description":"","body":"Updated ZeroFrame","language":"text/plain","added":1457184673},{"paste_id":23,"description":"","body":"xhr = new XMLHttpRequest()\nxhr.addEventListener \"load\", ->\n    console.log this.responseText\n,false\nxhr.open \"GET\", \"/zeroid.bit/data/users.json\", true\nxhr.send()","language":"text/x-coffeescript","added":1457237907},{"paste_id":24,"description":"KIQUwUzMdIch5ZAlZA7M0gLKACCb0ytWgKVyTYcZAvqv/BWl39q95J8t1zjDBE+f2gX2rQAgoSwz8MembUAmsuJoFYLkzcz90uRgtx69SPRkGwulEq9KYKZ54b6N6arV2h4SPOULKBIUW4U5ALX2v3NK1x1AY3ybrVUVejFkVEBgJLI7LTz62cLg9hNc2Q8mvR/7fMJj","body":"DsbtOOzrJliLxlfUvC/ucALKACDDcgpMKRIO2nhGc3WSjSzpvADwkhVlXR2fQ0UkMZRzNwAg5hWLw4AIVly7wtrXuXXnh7WJY3qrQ2EC9RoHaVvvUzds+2gScyuD+DCy1zYaEtvyRD5QJjRfr9j6f4ccf6o64V9iIwqUw+9Nkan4Su/KtJsDSftnVJQ6CYHbJiG9rqUTs94BkNNkV1BkLgpM6bCx5p13Q6VmNswMjzalcxp9AzgJlgfn94M7S5ZiMbaBuWTcfNU+OxEGP1YxTbr7XSznvdWcse5G/rX7O7OeHh1oJpNtc4utjinqBy49ZsJgIjXOrHSKoTFNy/u912VufAtBU0/QlQPQlx5stSYd0PRFO5t5UmNKh4Bh5rD4aEyQV4rQ21hpJXGwwunMmLkskmPHNy6SXy/SsIxDdpm69fiUouFrRzCjjojjSo/zkkGE+QzdrwICfWAifQ0P346dYbXiFOHH2CHd6ieeShZoxk9OCwdLauhvN1ZbzhPtrppnLSwiuxR9HvsFvmniN8187SlpG4tO/qRgrZve0jR5XQkYsrUpU0voMZ6ZtG8v2mnUiKERSGCnFPWXcHI78nNW8Hz4P9s//9tpPQDHRAuu6NEvFvgGXp/SW6FurdX7POcqFKelK88E/DFTPNplwyhuvctrvNktlKOwBzwY//w6/FomFUHbMmcc3MwyDMBdzq6ClqTOvpM01ts64ZNvKwJee2dmTmPrvPp6CKAcw54zSDbfVTqK3rBKu8+c985gya+hPeQOwX9hSfLxNZtXaq2t4B0YcBbzkSKB773pXtMSI17URLM=","language":"text/plain","encrypted":true,"added":1457245584},{"paste_id":25,"description":"QcL0TgcsuJmer9SniGo2ZwLKACDPNBlVJB/Tl+KFbVA/qLBDZw68f1ankRh3pKNzhKhiSQAgrQX+fuXSO4OSSTcR1AqYJlu7810gpAWH9nVQ/oyM/VMm/lmq9xne7DkT2ahMdzH+Kg3HYinm6jwHMHP/hp33vye/E2+tvu1sb0nPbag2dVs=","body":"Zctoe7wd/sdBjrMo8bdngQLKACBatURVybqd51IVeth3VoXNWV9PkBMB3ZY/X27bHtTzVwAg+ZOi64brAMg3mJwC1pM690w5oIzyWCb+tG3G3vsopqQhkzAq3v3bFtaNCFAKNpJ0f82u/mNACcVM90AFqD1Z7DznALh7rCaJBCqUL1ZFXyi2HLRNniJiEdUa/L6jnNqY","language":"text/x-sh","encrypted":true,"added":1457250883},{"paste_id":26,"description":"lUoqnj+u6ISO6KUESjPCDALKACB9DpAbxP1DgwDHlitGVVd7tLKUvjgyS93e0P1UWb4kpAAgbsEmfSCPj6T3k0psX/qVVQMCXEJtVckvIZleWTKfDnFTTPUoJVanSRPfIA/NwogxdOXfXz3L7gOeknOHlAGbq8i2arYLghxA7Cz4oPjLbxM=","body":"qrQkEE6M3S6skOWjQnJwyQLKACAtoUEvM3mXSs2FowWzoVe4BK8isAQjUD89PEWMuYwlYgAgc0q2JTReitQKqj0FyWh6t4ggQEtXy1triq39hyyjHpVEtoDncyf5WSex6rqJHxumHCMlfZ+tu41hPpMBmS2u1+Ib8pzvHlKGQd6MoS0XGjI=","language":"text/plain","encrypted":true,"added":1457306655},{"paste_id":30,"description":"","body":"hi :)","language":"text/plain","encrypted":false,"added":1457404059},{"paste_id":31,"description":"+C/IH+pD/UfLHgL3bMVsigLKACAjPBPpmIhek9pUnL/edSlTKTfMdX7MhVHdRX6aJX62cwAgdC9vGiRIQi+bBBhFJYzIYKZzmCpc+i1vUcvrQcwmTrLm7B3Oed2Qlv8av4Z8McgaPr1LVKftN4m0fgApkaE/sWACIE/sxbg4MnpxzGG/A3E=","body":"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","language":"XBO/Sy6oiyxopHz6KIwPCgLKACDyPiE9NEW0ObWzZ5k98kQwl42F+Ne7vdyhR7FGmuGQAgAgi96PbaDn23uiOBIn3ScjU1bMWNPyJOm9vlHMbeJA5AVkkS6LHai7S36UG4eQajkIGcuGI6ujIf7QRrTHEQ0RW9zBbFFPAkR4VOJmBlgg61f9leetS8hVIQ7oYUpRKJZB","encrypted":true,"added":1457432110},{"paste_id":33,"description":"nanasi: in-browser ZeroNet account generation","body":"class Nanasi extends ZeroFrame\n    init: ->\n        @last_checked = 0\n        @site_info = null\n\n        @nanasi = bitcoin.ECPair.fromWIF \"L21fbJbceebx6B3bwMK2U46W1Un7peLqBtPjfyARZpxsME9rxWFz\"\n\n    onOpenWebsocket: (e) =>\n        @cmd \"siteInfo\", {}, (site_info) =>\n            @site_info = site_info\n            if @site_info.cert_user_id\n                document.getElementById(\"id_show\").textContent = @site_info.cert_user_id\n                document.getElementById(\"submit_button\").textContent = \"Post\"\n        @update_posts()\n\n    update_posts: =>\n        @cmd \"dbQuery\", [\"\"\"\n            select\n                hash,\n                name,\n                time,\n                body,\n                keyvalue.value as cert_user_id\n            from post\n            left join json as data on (data.json_id = post.json_id)\n            left join json as content on (content.directory = data.directory AND content.file_name = 'content.json')\n            left join keyvalue on (keyvalue.json_id = content.json_id AND keyvalue.key = 'cert_user_id')\n            where time > #{@last_checked} order by time asc\n            \"\"\"], (res) =>\n            if res.error\n                @cmd \"wrapperNotification\", [\"error\", \"Failed to query:#{res.error}\"]\n                return\n\n            @last_checked = new Date().getTime()\n            posts = document.getElementById(\"posts\")\n\n            for r in res\n                console.log JSON.stringify(r)\n\n                post = document.getElementById(\"post_base\").cloneNode(true)\n                post.id = \"\"\n                hash = post.getElementsByClassName(\"hash\")[0]\n                hash.textContent = r.hash[0..7]\n                hash.name = r.hash[0..7]\n                hash.href = \"#\" + r.hash[0..7]\n                post.getElementsByClassName(\"name\")[0].textContent = r.name\n                post.getElementsByClassName(\"time\")[0].textContent = new Date(r.time).toLocaleString()\n                body = post.getElementsByClassName(\"body\")[0]\n                body.textContent = r.body\n                body.innerHTML = body.innerHTML.replace(/&gt;&gt;([A-Za-z0-9+\\/]{8})/g, \"\"\"<a href=\"#$1\">$&</a>\"\"\")\n                post.getElementsByClassName(\"id\")[0].textContent = r.cert_user_id\n                if posts.firstChild\n                    posts.insertBefore post, posts.firstChild\n                else\n                    posts.appendChild post\n\n            console.log \"updated\"\n\n    route: (cmd, message) ->\n        if cmd == \"setSiteInfo\"\n            @site_info = message.params\n            btn = document.getElementById(\"submit_button\")\n            if @site_info.cert_user_id\n                btn.textContent = \"Post\"\n            else\n                btn.textContent = \"Create account\"\n            document.getElementById(\"id_show\").textContent = @site_info.cert_user_id\n            if @site_info.event\n                console.log @site_info.event\n                if @site_info.event[0] == \"file_done\" && @site_info.event[1].match /.*data\\.json$/\n                    @update_posts()\n\n    write: =>\n        unless @site_info.cert_user_id\n            @createCert()\n            return\n\n        submit_button = document.getElementById(\"submit_button\")\n        submit_button.disabled = true\n\n        inner_path = \"data/users/#{@site_info.auth_address}/data.json\"\n        @cmd \"fileGet\", {inner_path, required: false}, (data) =>\n            if data\n                data = JSON.parse(data)\n            else\n                data = {post: []}\n\n            name = document.getElementById(\"name_input\").value\n            name = \"No name\" if name == \"\"\n\n            k =\n                name: name\n                body: document.getElementById(\"body_input\").value\n                time: new Date().getTime()\n\n            sha = new jsSHA(\"SHA-256\", \"TEXT\")\n            sha.update(JSON.stringify([@site_info.auth_address, k.name, k.body, k.time]))\n            k.hash = sha.getHash(\"B64\")\n\n            data.post.push k\n\n            json_raw = unescape(encodeURIComponent(JSON.stringify(data, null, \"\\t\")))\n\n            @cmd \"fileWrite\", [inner_path, btoa(json_raw)], (res) =>\n                if res == \"ok\"\n                    @cmd \"sitePublish\", {inner_path: inner_path}, (res) =>\n                        if res == \"ok\"\n                            document.getElementById(\"name_input\").textContent = \"\"\n                            document.getElementById(\"body_input\").value = \"\"\n                            submit_button.disabled = false\n                            @update_posts()\n                        else\n                            @cmd \"wrapperNotification\", [\"error\", \"Failed to post: \" + res.error]\n                else\n                    @cmd \"wrapperNotification\", [\"error\", \"Failed to post: \" + res.error]\n\n    createCert: =>\n        cert = bitcoin.message.sign(@nanasi, \"#{@site_info.auth_address}#web/\" + @site_info.auth_address[0..12]).toString(\"base64\")\n\n        @cmd \"certAdd\", [\"nanasi\", \"web\", @site_info.auth_address[0..12], cert], (res) =>\n            if res.error && res.error.startsWith(\"You already\")\n                @cmd \"certSelect\", [[\"zeroid.bit\", \"nanasi\"]]\n            else if res.error\n                @cmd \"wrapperNotification\", [\"error\", \"Failed to create account: \" + res.error]\n            else\n                @cmd \"certSelect\", [[\"zeroid.bit\", \"nanasi\"]]\n\n    insertHash: (e)->\n        body = document.getElementById \"body_input\"\n        body.value = body.value[0...body.selectionStart] + \">>#{e.textContent}\\n\" + body.value[body.selectionStart..]\n        window.scrollTo(0, 0)\n        body.focus()\n\nwindow.Page = new Nanasi()\n","language":"text/x-coffeescript","encrypted":false,"added":1457483314}],"comment":[]}