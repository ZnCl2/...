{"next_paste_id":2,"next_comment_id":0,"paste":[{"paste_id":0,"description":"","body":"<html>\n<head>\n    <!-- Source: http://wiki.openstreetmap.org/wiki/Openlayers_Track_example -->\n    <title>Tesla roadtrip Norway</title>\n    <link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" />\n    <!-- bring in the OpenLayers javascript library -->\n    <script src=\"ZeroFrame.js\"></script>\n    <script>zero_frame = new ZeroFrame(); zero_frame.monkeyPatchAjax();</script>\n    <script src=\"OpenLayers.js\"></script>\n    <!-- bring in the OpenStreetMap OpenLayers layers.  -->\n    <script src=\"OpenStreetMap.js\"></script>\n\n    <script type=\"text/javascript\">\n\n        var map; //complex object of type OpenLayers.Map\n\n        async function init() {\n            map = new OpenLayers.Map (\"map\", {\n                controls:[\n                    new OpenLayers.Control.Navigation(),\n                    new OpenLayers.Control.PanZoomBar(),\n                    new OpenLayers.Control.ScaleLine({geodesic: true}),\n                    new OpenLayers.Control.MousePosition(),\n                    new OpenLayers.Control.LayerSwitcher(),\n                    new OpenLayers.Control.Attribution()],\n                maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),\n                maxResolution: 156543.0399,\n                numZoomLevels: 19,\n                units: 'm',\n                projection: new OpenLayers.Projection(\"EPSG:900913\"),\n                displayProjection: new OpenLayers.Projection(\"EPSG:4326\")\n            } );\n\n            // Define the map layer\n            // Here we use a predefined layer that will be kept up to date with URL changes\n            layerMapnik = new OpenLayers.Layer.OSM.Mapnik(\"Mapnik\");\n            map.addLayer(layerMapnik);\n            layerCycleMap = new OpenLayers.Layer.OSM.CycleMap(\"CycleMap\");\n            map.addLayer(layerCycleMap);\n            layerMarkers = new OpenLayers.Layer.Markers(\"Markers\");\n            map.addLayer(layerMarkers);\n\n        // This is the layer that uses the locally stored tiles\n            var newLayer = new OpenLayers.Layer.OSM(\"Local Tiles\", \"tiles/${z}/${x}/${y}.png\", {numZoomLevels: 19, alpha: true, isBaseLayer: true});\n            map.addLayer(newLayer);\n\n            // Start position for the map\n            var currpos = await loadJSON(\"current.json\");\n            var lat=currpos.lat;\n            var lon=currpos.lon;\n            var zoom=8;\n            var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection(\"EPSG:4326\"), map.getProjectionObject());\n            map.setCenter(lonLat, zoom);\n\n            // Add the Layer with the GPX Track\n            var lgpx = new OpenLayers.Layer.Vector(\"Track\", {\n                strategies: [new OpenLayers.Strategy.Fixed(), new OpenLayers.Strategy.Refresh({interval: 40000, force: true})],\n                protocol: new OpenLayers.Protocol.HTTP({\n                    url: \"track.gpx\",\n                    format: new OpenLayers.Format.GPX()\n                }),\n                style: {strokeColor: \"green\", strokeWidth: 5, strokeOpacity: 0.5},\n                projection: new OpenLayers.Projection(\"EPSG:4326\")\n            });\n            map.addLayer(lgpx);\n\n            // Add a layer with the used charging stations\n            var pois = new OpenLayers.Layer.Text( \"Ladungen\",\n                    { location:\"./charges.txt\",\n                      projection: map.displayProjection\n                    });\n            map.addLayer(pois);\n\n            // Add a Layer with the Marker for the current position\n            var icon = new OpenLayers.Icon('car.svg');\n            layerMarkers.addMarker(new OpenLayers.Marker(lonLat,icon));\n        }\n\n        // Load JSON text from server hosted file and return JSON parsed object\n        async function loadJSON(filePath) {\n          // Load json file;\n          // var json = loadTextFileAjaxSync(filePath, \"application/json\");\n          json = await zero_frame.cmdp(\"fileGet\", filePath)\n          // Parse json\n          return JSON.parse(json);\n        }\n\n        // Load text with Ajax synchronously: takes path to file and optional MIME type\n        function loadTextFileAjaxSync(filePath, mimeType)\n        {\n          var xmlhttp=new XMLHttpRequest();\n          xmlhttp.open(\"GET\",filePath,false);\n          if (mimeType != null) {\n            if (xmlhttp.overrideMimeType) {\n              xmlhttp.overrideMimeType(mimeType);\n            }\n          }\n          xmlhttp.send();\n          if (xmlhttp.status==200)\n          {\n            return xmlhttp.responseText;\n          }\n          else {\n            // TODO Throw exception\n            return null;\n          }\n        }\n    </script>\n\n</head>\n<!-- body.onload is called once the page is loaded (call the 'init' function) -->\n<body onload=\"init();\">\n    <!-- define a DIV into which the map will appear. Make it take up the whole window -->\n    <div style=\"width:90%; height:90%\" id=\"map\"></div>\n</body>\n</html>\n ","language":"text/html","encrypted":false,"added":1501802884},{"paste_id":1,"description":"ZeroNet benchmark results","body":"= Win10.0.15.063 + Intel i5 6600k + HDD =\n\n== Python 32bit ==\n\nBenchmarking ZeroNet 0.5.7 (rev2187) Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)] on: win32...\n\nCryptBitcoin:\n- hdPrivatekey x 10..........0.181s [x3.87: Insane!!]\n- sign x 10..........0.352s [x0.99: OK]\n- openssl verify x 100..........0.123s [x3.01: WOW]\n- pure-python verify x 10..........0.266s [x6.02: Insane!!]\n\nCryptHash:\n- sha256 5M x 10..........0.156s [x3.85: Insane!!]\n- sha512 5M x 10..........0.213s [x2.82: WOW]\n- os.urandom(256) x 1000..........0.001s [x6.50: Insane!!]\n\nMsgpack: (version: 0.4.8)\n- pack 5K x 10 000..........0.096s [x8.13: Insane!!]\n- unpack 5K x 10 000..........0.009s [x133.34: Insane!!]\n- streaming unpack 5K x 10 000..........0.018s [x77.78: Insane!!]\n\nDb: (version: 3.8.11, API: 2.6.0)\n- Open x 10..........0.022s [x5.91: Insane!!]\n- Insert x 10 x 1000..........0.375s [x2.67: WOW]\n- Buffered insert x 100 x 100..........0.533s [x2.44: Fast]\n- Total rows in db: 20000\n- Indexed query x 1000..........0.082s [x3.05: WOW]\n- Not indexed query x 100..........0.162s [x3.70: Insane!!]\n- Like query x 100..........0.302s [x5.96: Insane!!]\n\nCompression:\n- Zip pack x 10..........0.056s [x2.14: Fast]\n- Zip unpack x 10..........0.096s [x2.08: Fast]\n- Tar.gz pack x 10..........0.135s [x2.22: Fast]\n- Tar.gz unpack x 10..........0.103s [x1.94: Fast]\n- Tar.bz2 pack x 10..........0.919s [x2.18: Fast]\n- Tar.bz2 unpack x 10..........0.235s [x2.13: Fast]\n\nDone. Total: 4.70s\n\nMem usage: 66MB (150site, debug mode, ZeroHello opened)\n\n\n== Python 64bit ==\n\nBenchmarking ZeroNet 0.5.7 (rev2187) Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:53:40) [MSC v.1500 64 bit (AMD64)] on: win32...\n\nCryptBitcoin:\n- hdPrivatekey x 10..........0.090s [x7.78: Insane!!]\n- sign x 10..........0.173s [x2.02: Fast]\n- openssl verify x 100..........0.070s [x5.29: Insane!!]\n- pure-python verify x 10..........0.126s [x12.70: Insane!!]\n\nCryptHash:\n- sha256 5M x 10..........0.130s [x4.62: Insane!!]\n- sha512 5M x 10..........0.085s [x7.06: Insane!!]\n- os.urandom(256) x 1000..........0.001s [x6.50: Insane!!]\n\nMsgpack: (version: 0.4.8)\n- pack 5K x 10 000..........0.097s [x8.04: Insane!!]\n- unpack 5K x 10 000..........0.008s [x150.00: Insane!!]\n- streaming unpack 5K x 10 000..........0.017s [x82.35: Insane!!]\n\nDb: (version: 3.8.11, API: 2.6.0)\n- Open x 10..........0.015s [x8.67: Insane!!]\n- Insert x 10 x 1000..........0.345s [x2.90: WOW]\n- Buffered insert x 100 x 100..........0.476s [x2.73: WOW]\n- Total rows in db: 20000\n- Indexed query x 1000..........0.069s [x3.62: Insane!!]\n- Not indexed query x 100..........0.121s [x4.96: Insane!!]\n- Like query x 100..........0.268s [x6.72: Insane!!]\n\nCompression:\n- Zip pack x 10..........0.051s [x2.35: Fast]\n- Zip unpack x 10..........0.075s [x2.67: WOW]\n- Tar.gz pack x 10..........0.112s [x2.68: WOW]\n- Tar.gz unpack x 10..........0.079s [x2.53: WOW]\n- Tar.bz2 pack x 10..........0.798s [x2.51: WOW]\n- Tar.bz2 unpack x 10..........0.231s [x2.16: Fast]\n\nDone. Total: 3.70s\n\nMem usage: 87MB (150site, debug mode, ZeroHello opened)\n\n\n== Python 64bit on Linux Subsystem for Windows ==\n\nBenchmarking ZeroNet 0.5.7 (rev2187) Python 2.7.13 (default, Aug 21 2017, 19:40:19) [GCC 5.4.0 20160609] on: linux2...\n\nCryptBitcoin:\n- hdPrivatekey x 10..........0.077s [x9.07: Insane!!]\n- sign x 10..........0.143s [x2.45: Fast]\n- openssl verify x 100..........0.059s [x6.23: Insane!!]\n- pure-python verify x 10..........0.105s [x15.18: Insane!!]\n\nCryptHash:\n- sha256 5M x 10..........0.125s [x4.80: Insane!!]\n- sha512 5M x 10..........0.085s [x7.07: Insane!!]\n- os.urandom(256) x 1000..........0.005s [x1.19: OK]\n\nMsgpack: (version: 0.4.8)\n- pack 5K x 10 000..........0.140s [x5.57: Insane!!]\n- unpack 5K x 10 000..........0.214s [x5.62: Insane!!]\n- streaming unpack 5K x 10 000..........0.235s [x5.95: Insane!!]\n\nDb: (version: 3.11.0, API: 2.6.0)\n- Open x 10..........0.013s [x9.78: Insane!!]\n- Insert x 10 x 1000..........0.331s [x3.02: WOW]\n- Buffered insert x 100 x 100..........0.516s [x2.52: WOW]\n- Total rows in db: 20000\n- Indexed query x 1000..........0.125s [x2.00: Fast]\n- Not indexed query x 100..........0.114s [x5.28: Insane!!]\n- Like query x 100..........0.247s [x7.29: Insane!!]\n\nCompression:\n- Zip pack x 10..........0.042s [x2.85: WOW]\n- Zip unpack x 10..........0.113s [x1.76: Fast]\n- Tar.gz pack x 10..........0.103s [x2.92: WOW]\n- Tar.gz unpack x 10..........0.077s [x2.61: WOW]\n- Tar.bz2 pack x 10..........0.874s [x2.29: Fast]\n- Tar.bz2 unpack x 10..........0.192s [x2.61: WOW]\n\nDone. Total: 4.19s","language":"text/x-markdown","encrypted":false,"added":1503337909}],"comment":[]}