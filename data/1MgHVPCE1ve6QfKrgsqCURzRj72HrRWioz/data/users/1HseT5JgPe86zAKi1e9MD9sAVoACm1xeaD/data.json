{"next_paste_id":1,"next_comment_id":0,"paste":[{"paste_id":0,"description":"","body":"/* package.json\n{\n  \"name\": \"znb\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"lowdb\": \"^1.0.0\",\n    \"phantom\": \"^4.0.5\",\n    \"request\": \"^2.82.0\",\n    \"request-promise-native\": \"^1.0.4\",\n    \"shuffle-array\": \"^1.0.1\",\n    \"snoowrap\": \"^1.14.2\"\n  }\n}\n*/\n \nconst SUBREDDITS = [\n    'FractalPorn',\n    'cats',\n    'foxes',\n];\nconst ZN_PROFILE_URL = 'http://127.0.0.1:43110/Me.ZeroNetwork.bit/?Profile/' +\n    '12h51ug6CcntU2aiBjhP8Ns2e5VypbWWtv/1HseT5JgPe86zAKi1e9MD9sAVoACm1xeaD/dqhufbjdxj@zeroid.bit';\nconst REDDIT_POLL_LIMIT = 20;\nconst REDDIT_CREDENTIALS = {\n    username: '...',\n    password: '...',\n    clientId: '...',\n    clientSecret: '...',\n    userAgent: 'nodejs',\n};\nconst IMGUR_CREDENTIALS = {\n    clientId: '...',\n    clientSecret: '...',\n};\nconst IMGUR_HEADERS = {\n    'Authorization': `Client-ID ${IMGUR_CREDENTIALS.clientId}`,\n};\n \nconst fs = require('fs');\nconst request = require('request');\nconst rp = require('request-promise-native');\nconst phantom = require('phantom');\nconst snoowrap = require('snoowrap');\nconst lowdb = require('lowdb');\nconst FileSync = require('lowdb/adapters/FileSync');\nconst shuffle = require('shuffle-array');\n \nconst adapter = new FileSync('db.json');\nconst db = lowdb(adapter);\n \nif (!db.get('imageQueue').value()) {\n    db.set('imageQueue', []).write();\n}\n \nfunction iq(images) {\n    const imageQueue = db.get('imageQueue').value();\n    if (images) {\n        db.set('imageQueue',\n            shuffle(imageQueue.concat(images))\n        ).write();\n    } else {\n        const image = imageQueue.pop();\n        db.set('imageQueue', shuffle(imageQueue)).write();\n        return image;\n    }\n}\n \nfunction sleep(ms) {\n    return new Promise(resolve =>\n        setTimeout(resolve, ms)\n    );\n}\n \nasync function getImgurAlbumImages(albumId) {\n    const response = await rp.get({\n        url: `https://api.imgur.com/3/album/${albumId}/images`,\n        headers: IMGUR_HEADERS,\n    });\n    const data = JSON.parse(response).data;\n    return data.link ||\n        data.map(entry => entry.link);\n}\n \nasync function getImgurGalleryImages(galleryId) {\n    const response = await rp.get({\n        url: `https://api.imgur.com/3/gallery/${galleryId}`,\n        headers: IMGUR_HEADERS,\n    });\n    const data = JSON.parse(response).data;\n    return data.images\n        ? data.images.map(entry => entry.link)\n        : data.link;\n}\n \nasync function getImgurImage(imageId) {\n    const response = await rp.get({\n        url: `https://api.imgur.com/3/image/${imageId}`,\n        headers: IMGUR_HEADERS,\n    });\n    return JSON.parse(response).data.link;\n}\n \nfunction downloadFile(uri, path) {\n    return new Promise(resolve =>\n        request(uri).pipe(fs.createWriteStream(path)).on('close', resolve)\n    );\n}\n \nasync function postImage(path) {\n    const instance = await phantom.create();\n    const page = await instance.createPage();\n    await page.open(ZN_PROFILE_URL);\n    await page.switchToFrame('inner-iframe');\n    await page.evaluate(function () {\n        document.querySelector('.icon-image').click();\n    });\n    await page.uploadFile('input[type=file]', path);\n    await sleep(3000);\n    await page.evaluate(function () {\n        document.querySelector('.button-submit').click();\n    });\n    await sleep(3000);\n    await instance.exit();\n}\n \n(async function () {\n    const reddit = new snoowrap(REDDIT_CREDENTIALS);\n    while (true) {\n        for (const subreddit of SUBREDDITS) {\n            const submissions = await reddit.getNew(subreddit, { limit: REDDIT_POLL_LIMIT });\n            for (const submission of submissions) {\n                const url = submission.url;\n                const url_ = url.replace(/\\./g, '_');\n                try {\n                    if (!db.get(url_).value()) {\n                        db.set(url_, true).write();\n                        if (url.indexOf('.gifv') !== -1) {\n                            continue;\n                        }\n                        const imgurAlbumMatch = url.match(/\\/imgur.com\\/a\\/(.*)/);\n                        if (imgurAlbumMatch) {\n                            const images = await getImgurAlbumImages(imgurAlbumMatch[1]);\n                            iq(images);\n                            continue;\n                        }\n                        const imgurGalleryMatch = url.match(/\\/imgur.com\\/gallery\\/(.*)/);\n                        if (imgurGalleryMatch) {\n                            const images = await getImgurGalleryImages(imgurGalleryMatch[1]);\n                            iq(images);\n                            continue;\n                        }\n                        const imgurImageMatch = url.match(/\\/imgur.com\\/(.*)/);\n                        if (imgurImageMatch) {\n                            const imageId = imgurImageMatch[1];\n                            if (imageId.indexOf('.') === -1) {\n                                const image = await getImgurImage(imageId);\n                                iq([image]);\n                            } else {\n                                iq([url]);\n                            }\n                            continue;\n                        }\n                        if (\n                            url.indexOf('i.redd.it') !== -1 ||\n                            url.indexOf('i.imgur.com') !== -1\n                        ) {\n                            iq([submission.url]);\n                        }\n                    }\n                } catch (e) {\n                    console.warn(`Error while processing '${url}': ${e}`);\n                }\n            }\n        }\n        const imageUrl = iq();\n        console.log(`[${new Date().toTimeString().slice(0, 8)}] posting ${imageUrl}...`);\n        const ext = imageUrl.split('.').pop().split(/\\#|\\?/)[0];\n        const path = `D:/Pictures/zerome-reddit/${Date.now()}.${ext}`;\n        await downloadFile(imageUrl, path);\n        await postImage(path);\n        console.log('-> success!');\n        await sleep(600000);\n    }\n}());","language":"text/javascript","encrypted":false,"added":1506170830}],"comment":[]}