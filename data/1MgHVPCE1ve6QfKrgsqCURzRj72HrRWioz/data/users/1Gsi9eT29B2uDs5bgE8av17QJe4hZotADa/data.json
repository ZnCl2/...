{"next_paste_id":18,"next_comment_id":0,"paste":[{"paste_id":16,"description":"Magnet links to html","body":"import urlparse\nimport urllib\nfrom collections import defaultdict\n\n# Magnet links to html\n# Written by innocentchild@zeroid.bit/innocentchild@cryptoid.bit/innocentchild@kaffie.bit\n# License: WTFPL\n\ndef bytes_2_human_readable(number_of_bytes):\n    if number_of_bytes < 0:\n        raise ValueError(\"!!! number_of_bytes can't be smaller than 0 !!!\")\n\n    step_to_greater_unit = 1024.\n\n    number_of_bytes = float(number_of_bytes)\n    unit = 'bytes'\n\n    if (number_of_bytes / step_to_greater_unit) >= 1:\n        number_of_bytes /= step_to_greater_unit\n        unit = 'KB'\n\n    if (number_of_bytes / step_to_greater_unit) >= 1:\n        number_of_bytes /= step_to_greater_unit\n        unit = 'MB'\n\n    if (number_of_bytes / step_to_greater_unit) >= 1:\n        number_of_bytes /= step_to_greater_unit\n        unit = 'GB'\n\n    if (number_of_bytes / step_to_greater_unit) >= 1:\n        number_of_bytes /= step_to_greater_unit\n        unit = 'TB'\n\n    precision = 1\n    number_of_bytes = round(number_of_bytes, precision)\n\n    return str(number_of_bytes) + ' ' + unit\n\nfile = open(\"complete_listing_part1_named.txt\", 'r')\ndata = defaultdict(str)\nfor line in file:\n\tparsed = urlparse.urlparse(line)\n\tname = urllib.unquote(urlparse.parse_qs(parsed.query)['dn'][0])\n\tsize = bytes_2_human_readable(urlparse.parse_qs(parsed.query)['xl'][0])\n\tdata[name] = '<a href=\"' + line + '\">' + name + '(' + size  + ')' + '</a>'\n\t\nkeys = sorted(data, key=lambda s: s.lower())\nnewfile = open(\"listinghtml.txt\", 'w')\nfor key in keys:\n\tnewfile.write(data[key])\nnewfile.close()","language":"text/x-python","encrypted":false,"added":1520149875},{"paste_id":17,"description":"SkyTorrents metadata fetcher v.3","body":"from __future__ import print_function\nfrom tempfile import mkstemp\nfrom shutil import move\nfrom os import fdopen, remove\nimport libtorrent as lt\nimport urllib\nimport time\nimport tempfile\nimport fileinput\n\n# SkyTorrents metadata fetcher\n# Written by innocentchild@zeroid.bit/innocentchild@cryptoid.bit/innocentchild@kaffie.bit\n# License: WTFPL\n\n# Editable by user\ntimeout  = 600 #How long we try fetching a magnet URI before giving up.\nparallell_fetches  = 100 #The number of magnet URIs fetching at the same time.\nsrc_file = \"complete_listing_part1.txt\" #The file with all our magnet URI.\nout_file = \"complete_listing_part1_named.txt\" #The file with output URI.\n# End editable\n\nses = lt.session()\nses.listen_on(6881, 6891)\nses.add_extension('ut_metadata')\nses.add_extension('ut_pex')\nses.add_extension('smart_ban')\nses.add_extension('metadata_transfer')\nses.add_dht_router(\"router.utorrent.com\", 6881)\nses.add_dht_router(\"router.bittorrent.com\", 6881)\nses.add_dht_router(\"dht.transmissionbt.com\", 6881)\nses.add_dht_router(\"dht.aelitis.com\", 6881)\nses.start_dht()\nses.start_lsd()\nses.start_upnp()\nses.start_natpmp()\nparams = {\n    'save_path': tempfile.mkdtemp(),\n    'storage_mode': lt.storage_mode_t(2),\n    'auto_managed': True,\n    'file_priorities': [0]*5\n}\n\ntrackers = \"&tr=udp%3A%2F%2Fbt.xxx-tracker.com%3A2710%2Fannounce&tr=http%3A%2F%2Fshare.camoe.cn%3A8080%2Fannounce&tr=udp%3A%2F%2Fthetracker.org%3A80%2Fannounce&tr=http%3A%2F%2F0d.kebhana.mx%3A443%2Fannounce&tr=http%3A%2F%2Fbt.dl1234.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=https%3A%2F%2Fopen.acgnxtracker.com%3A443%2Fannounce&tr=http%3A%2F%2F0d.kebhana.com.mx%3A443%2Fannounce&tr=http%3A%2F%2Fretracker.mgts.by%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.justseed.it%3A1337%2Fannounce&tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.vanitycore.co%3A6969%2Fannounce&tr=udp%3A%2F%2Finferno.demonoid.pw%3A3418%2Fannounce&tr=http%3A%2F%2Ftracker.city9x.com%3A2710%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&tr=http%3A%2F%2Fretracker.spark-rostov.ru%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.christianbro.pw%3A6969%2Fannounce&tr=udp%3A%2F%2Fpubt.in%3A2710%2Fannounce&tr=https%3A%2F%2Fzer0day.000webhostapp.com%3A443%2Fannounce&tr=udp%3A%2F%2Ftracker.cypherpunks.ru%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&tr=udp%3A%2F%2Fretracker.coltel.ru%3A2710%2Fannounce&tr=udp%3A%2F%2Ftracker.internetwarriors.net%3A1337%2Fannounce&tr=udp%3A%2F%2Fpublic.popcorn-tracker.org%3A6969%2Fannounce&tr=udp%3A%2F%2Fzephir.monocul.us%3A6969%2Fannounce&tr=http%3A%2F%2Falpha.torrenttracker.nl%3A443%2Fannounce&tr=udp%3A%2F%2Ftracker.uw0.xyz%3A6969%2Fannounce&tr=http%3A%2F%2Ftorrentsmd.eu%3A8080%2Fannounce&tr=http%3A%2F%2Ftorrentsmd.com%3A8080%2Fannounce&tr=https%3A%2F%2Fevening-badlands-6215.herokuapp.com%3A443%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&tr=udp%3A%2F%2Fp4p.arenabg.com%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.skyts.net%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.safe.moe%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.piratepublic.com%3A1337%2Fannounce&tr=udp%3A%2F%2Fbt.aoeex.com%3A8000%2Fannounce&tr=udp%3A%2F%2Fallesanddro.de%3A1337%2Fannounce&tr=udp%3A%2F%2F9.rarbg.to%3A2710%2Fannounce&tr=udp%3A%2F%2Ftracker.open-internet.nl%3A6969%2Fannounce&tr=udp%3A%2F%2Ftrackerxyz.tk%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker4.itzmx.com%3A2710%2Fannounce&tr=udp%3A%2F%2Ftracker2.christianbro.pw%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker1.wasabii.com.tw%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.xku.tv%3A6969%2Fannounce\" #A list of trackers which may speed up the fetching process.\n\ndef file_len(fname): #Returns the length of a file\n    with open(fname) as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n    \ndef add_handle(file, handles, i): #Adds a new magnet url handle\n\tline = read_line_at(file, i)\n\turl = \"magnet:?xt=urn:btih:\" + line + trackers;\n\tprint(\"Fetching \" + line) #Useless printout to show the user things are happening\n\thandle = lt.add_magnet_uri(ses, url, params)\n\thandle.pause()\n\thandles.append([handle, line, 0])\n\t\ndef quote(str): #Quotes a string, so it can be used in a URI.\n\treturn urllib.quote_plus(str)\n\t\ndef write(out_file, str): #Writes a string to a file.\n\tfilenew = open(out_file,  'a')\n\tfilenew.write(str)\n\tfilenew.close()\n\t\ndef read_line_at(src_file, i): #Reads the line at index i.\n\twith open(src_file, 'r') as file:\n\t\tfor j, line in enumerate(file):\n\t\t\tif i == j:\n\t\t\t\treturn line[:-1]\n\t\t\t\t\ndef remove_newlines(src_file): #Removes any empty lines in src_file.\n\tprint(\"Removing empty lines...\")\n\tdata = []\n\twith open(src_file, 'r') as file:\n\t\tfor line in file:\n\t\t\tdata.append(line[:-1])\n\twith open(src_file, 'w') as file:\n\t\tfor dat in data:\n\t\t\tif dat.rstrip():\n\t\t\t\tprint(dat, file=file)\n\ndef replace(file_path, pattern, subst): #A really overkill way of replacing a single line in a file.\n\tfh, abs_path = mkstemp()\n\twith fdopen(fh,'w') as new_file:\n\t\twith open(file_path) as old_file:\n\t\t\tfor line in old_file:\n\t\t\t\tnew_file.write(line.replace(pattern, subst))\n\tremove(file_path)\n\tmove(abs_path, file_path)\n\nhandles = []\nremove_newlines(src_file) #Cleans up after last run.\nfileLen = file_len(src_file) #The total number of magnet URI.\nfor i in range(min(fileLen, parallell_fetches)): #Initialize with a set number of magnet URI.\n\tadd_handle(src_file, handles, i)\nwhile len(handles) > 0: #We continue until all magnet URI have timed out or been fetched.\n\tfor handle in handles:\n\t\tif handle[0].has_metadata(): #Some background process if fetching metadata. We just need to check if it is done.\n\t\t\thandleInfo = handle[0].get_torrent_info() #All available info for the fetched magnet URI.\n\t\t\twrite(out_file, \"magnet:?xt=urn:btih:%s&dn=%s&xl=%d\\n\" % (handle[1], quote(handleInfo.name()), handleInfo.total_size())) #Writes a magnet link with metadata to a file.\n\t\t\tprint(handle[0].get_torrent_info().name()) #Prints the name of the fetched file to show that things are happening.\n\t\t\treplace(src_file, handle[1], \"\") #Prevents a magnet URI being fetched again, if the script has to be restarted.\n\t\t\tses.remove_torrent(handle[0])\n\t\t\thandles.remove(handle) #We don't need this anymore.\n\t\t\ti += 1\n\t\t\tif i < fileLen:\n\t\t\t\tadd_handle(src_file, handles, i) #Makes sure we always have as many fetching magnets as parallell_fetches allows.\n\t\telse:\n\t\t\thandle[2] += 1 #At least one second has passed, so we increase the timeout.\n\t\t\tif handle[2] > timeout:\n\t\t\t\tses.remove_torrent(handle[0]) #Actually stop fetching the URI.\n\t\t\t\thandles.remove(handle) #I'm tired of waiting for this magnet URI. Get it out of here.\n\t\t\t\ti += 1\n\t\t\t\tif i < fileLen: #If we still have more magnet URI left, add a new one.\n\t\t\t\t\tadd_handle(src_file, handles, i)\n\ttime.sleep(1) #Sleep to let the CPU rest for a bit. Not sleeping would not speed up the fetching process anyway.","language":"text/x-python","encrypted":false,"added":1520259235}],"comment":[]}