{"next_paste_id":12,"next_comment_id":0,"paste":[{"paste_id":0,"description":"You can access to ~100% of online science for free through the Library Genesis / Sci-Hub servers below.","body":"https://sci-hub.tw/\nhttps://booksc.org/\nhttps://sci-hub.ren/\nhttps://libgen.is/\nhttps://sci-hub.shop/\nhttps://booksc.xyz/\nhttps://sci-hub.se/\nhttps://libgen.me/\nhttps://libgen.lc/\nhttps://sci-hub.st/\nhttps://sci-hub.ee/\nhttps://doi.qqsci.com/\n\nCloudflare free servers\nlibgen.unblocked.at\nlibgen.unblocked.mobi\nlibgen.unblocked.app\nlibgen.unblocked.win\nlibgen.unblocked.name\nlibgen.unblocked.me.uk\nlibgen.unblocked.blue\nlibgen.unblocked.club\nlibgen.unblocked.how\nlibgen.unblocked.pink\nlibgen.unblocked.cloud\nlibgen.unblocked.gdn\nlibgen.unblocked.vet\nlibgen.unblocked.red\nlibgen.unblocked.uno\nlibgen.unblocked.tv\nlibgen.unblocked.cat\nlibgen.unblocked.ink\nlibgen.unblocked.pro\nlibgen.unblocked.mx\nlibgen.unblocked.lat\nlibgen.unblocked.tw\nlibgen.unblocked.co\nlibgen.unblocked.sh\nlibgen.unblocked.pl\nlibgen.unblocked.li\nlibgen.unblocked.bet\nlibgen.unblocked.vip\nlibgen.unblocked.live\nlibgen.unblocked.cam\nlibgen.unblocked.one\nlibgen.unblocked.pub\nlibgen.unblocked.pw\nlibgen.unblocked.bid\nlibgen.unblocked.onl\nlibgen.unblocked.ve\nlibgen.unblocked.la\nsci.libgen.me\n\nLibgen proxy, unblock access\nhttps://sitenable.info/proxify.php?proxy=c2l0ZW5hYmxlLmluZm8=&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://sitenable.ch/proxify.php?proxy=c2l0ZW5hYmxlLmNo&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://siteget.net/proxify.php?proxy=c2l0ZWdldC5uZXQ=&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://sitenable.co/proxify.php?proxy=c2l0ZW5hYmxlLmNv&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://sitenable.top/proxify.php?proxy=c2l0ZW5hYmxlLnRvcA==&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://freeanimesonline.com/proxify.php?proxy=ZnJlZWFuaW1lc29ubGluZS5jb20=&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://filesdownloader.com/proxify.php?proxy=ZmlsZXNkb3dubG9hZGVyLmNvbQ==&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://freeproxy.io/proxify.php?proxy=ZnJlZXByb3h5Lmlv&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\nhttps://sitenable.pw/proxify.php?proxy=c2l0ZW5hYmxlLnB3&site=aHR0cDovL2dlbi5saWIucnVzLmVjLw==\n\nother scihub aggregators\nhttps://sci-hub.now.sh/\nhttp://sci-hub.tech/\nhttps://lovescihub.wordpress.com/\n\n","language":"text/plain","encrypted":false,"added":1591147582},{"paste_id":1,"description":"É Por Você Que Canto - Leandro & Leonardo","body":"Quanto mais o tempo passa\nMais eu gosto de você\nEste seu jeito de me abraçar\nEste seu jeito de olhar pra mim\nFoi que fez com que\nEu gostasse logo de você\nTanto assim\nÉ por você que canto\n\nQuanto mais você me abraça\nMais eu quero ter você\nCada beijo que você me dá\nFaz meu corpo todo estremecer\nSem você eu sei que\nNão teria nenhuma razão\nPra viver\nÉ por você que canto\n\nPode tudo transformar\nPode tudo se perder\nPode o mundo virar contra mim\nAconteça seja lá o que for\nCada dia que passar\nEu quero ainda muito mais\nSeu amor\nÉ por você que canto\n\nQuanto mais você me abraça\nMais eu quero ter você\nCada beijo que você me dá\nFaz meu corpo todo estremecer\nSem você eu sei que\nNão teria nenhuma razão\nPra viver\nÉ por você que canto\n\nPode tudo transformar\nPode tudo se perder\nPode o mundo virar contra mim\nAconteça seja lá o que for\nCada dia que passar\nEu quero ainda muito mais\nSeu amor\nÉ por você que canto\nÉ por você que canto","language":"text/plain","encrypted":false,"added":1591149206},{"paste_id":2,"description":"Evidências - Chitãozinho & Xororó","body":"Quando eu digo que deixei de te amar\nÉ porque eu te amo\nQuando eu digo que não quero mais você\nÉ porque eu te quero\nEu tenho medo de te dar meu coração\nE confessar que eu estou em tuas mãos\nMas não posso imaginar\nO que vai ser de mim\nSe eu te perder um dia\n\nEu me afasto e me defendo de você\nMas depois me entrego\nFaço tipo, falo coisas que eu não sou\nMas depois eu nego\nMas a verdade\nÉ que eu sou louco por você\nE tenho medo de pensar em te perder\nEu preciso aceitar que não dá mais\nPra separar as nossas vidas\n\nE nessa loucura de dizer que não te quero\nVou negando as aparências\nDisfarçando as evidências\nMas pra que viver fingindo\nSe eu não posso enganar meu coração?\nEu sei que te amo!\n\nChega de mentiras\nDe negar o meu desejo\nEu te quero mais que tudo\nEu preciso do seu beijo\nEu entrego a minha vida\nPra você fazer o que quiser de mim\nSó quero ouvir você dizer que sim!\n\nDiz que é verdade, que tem saudade\nQue ainda você pensa muito em mim\nDiz que é verdade, que tem saudade\nQue ainda você quer viver pra mim","language":"text/plain","encrypted":false,"added":1591149646},{"paste_id":3,"description":"Aqui É o Seu Lugar - Pablo","body":"Não dá pra entender o meu coração\nMudou de amizade pra louca paixão\nEntão foi dessa forma que eu percebi\nNão quero te assustar ou me iludir\n\nNão dá mais\nNão dá pra enganar ou querer fugir\nNão dá mais\nSe esse sentimento vai crescendo em mim\nMas tenho que encarar essa decisão\nDe me confessar e abrir meu coração\n\nÉ pra você\nQue eu mando flores todas as manhãs, viu?\nÉ você\nQue faz meu coração bater a mais de mil\nJá não sei\nO que mais eu faço pra te conquistar\nSe ligue vem depressa aqui é o seu lugar\nNesse coração que só quer te amar (bis)\n\n","language":"text/plain","encrypted":false,"added":1591150116},{"paste_id":4,"description":"Eu Era - Marcos & Belutti","body":"Aí você escolhe a melhor roupa\nAí você arruma o seu cabelo\nE sai com aquela sua amiga louca\nQue diz que o bom da vida é ser solteiro\n\nMe diz se adiantou alguma coisa\nProcurar alívio passageiro\nBeijar umas quatro ou cinco bocas\nCom beijos que não têm gosto de beijo\n\nAí lembrou de mim, não teve jeito\nAí lembrou de mim, não teve jeito\n\nBeijou a boca errada, lembrou da boca certa\nEntrou numa gelada, lembrou da minha coberta\nSabe esse alguém perfeito que você tanto espera?\nEu era, eu era\n\nAí você se lembra que a gente se completa\nE vai voltar pra mim, se for um pouco esperta\nPorque esse alguém perfeito que você tanto espera\nEu era, eu era\nEu era\n\nAí você escolhe a melhor roupa\nAí você arruma o seu cabelo\nE sai com aquela sua amiga louca\nQue diz que o bom da vida é ser solteiro\n\nMe diz se adiantou alguma coisa\nProcurar alívio passageiro\nBeijar umas quatro ou cinco bocas\nCom beijos que não têm gosto de beijo\n\nAí lembrou de mim, não teve jeito\nAí lembrou de mim, não teve jeito\n\nBeijou a boca errada, lembrou da boca certa\nEntrou numa gelada, lembrou da minha coberta\nSabe esse alguém perfeito que você tanto espera?\nEu era, eu era\n\nAí você se lembra que a gente se completa\nE vai voltar pra mim, se for um pouco esperta\nPorque esse alguém perfeito que você tanto espera\nEu era, eu era\n\nBeijou a boca errada, lembrou da boca certa\nEntrou numa gelada, lembrou da minha coberta\nSabe esse alguém perfeito que você tanto espera?\nEu era, eu era\n\nAí você se lembra que a gente se completa\nE vai voltar pra mim, se for um pouco esperta\nPorque esse alguém perfeito que você tanto espera\nEu era, eu era, eu era\nEu era","language":"text/plain","encrypted":false,"added":1591150298},{"paste_id":5,"description":"Jesus Cristo - Roberto Carlos","body":"Jesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\n\nOlho no céu e vejo\nUma nuvem branca\nQue vai passando\nOlho na terra e vejo\nUma multidão\nQue vai caminhando\n\nComo essa nuvem branca\nEssa gente não sabe aonde vai\nQuem poderá dizer o caminho certo\nÉ você, meu Pai\n\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\n\nToda essa multidão\nTem no peito amor\nE procura a paz\nE apesar de tudo\nA esperança não se desfaz\n\nOlhando a flor que nasce\nNo chão daquele que tem amor\nOlho no céu e sinto\nCrescer a fé no meu Salvador\n\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\n\nEm cada esquina vejo\nO olhar perdido de um irmão\nEm busca do mesmo bem\nNessa direção caminhando vem\n\nÉ meu desejo ver\nAumentando sempre\nEssa procissão\nPara que todos cantem\nNa mesma voz essa oração\n\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\n\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo!\nJesus Cristo, eu estou aqui\n\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\nJesus Cristo! Jesus Cristo!\nJesus Cristo, eu estou aqui\n\n","language":"text/plain","encrypted":false,"added":1591150692},{"paste_id":6,"description":"Tocando Em Frente - Almir Sater","body":"Ando devagar\nPorque já tive pressa\nE levo esse sorriso\nPorque já chorei demais\n\nHoje me sinto mais forte\nMais feliz, quem sabe\nSó levo a certeza\nDe que muito pouco sei\nOu nada sei\n\nConhecer as manhas\nE as manhãs\nO sabor das massas\nE das maçãs\n\nÉ preciso amor\nPra poder pulsar\nÉ preciso paz pra poder sorrir\nÉ preciso a chuva para florir\n\nPenso que cumprir a vida\nSeja simplesmente\nCompreender a marcha\nE ir tocando em frente\n\nComo um velho boiadeiro\nLevando a boiada\nEu vou tocando os dias\nPela longa estrada, eu vou\nEstrada eu sou\n\nConhecer as manhas\nE as manhãs\nO sabor das massas\nE das maçãs\n\nÉ preciso amor\nPra poder pulsar\nÉ preciso paz pra poder sorrir\nÉ preciso a chuva para florir\n\nTodo mundo ama um dia\nTodo mundo chora\nUm dia a gente chega\nE no outro vai embora\n\nCada um de nós compõe a sua história\nCada ser em si\nCarrega o dom de ser capaz\nE ser feliz\n\nConhecer as manhas\nE as manhãs\nO sabor das massas\nE das maçãs\n\nÉ preciso amor\nPra poder pulsar\nÉ preciso paz pra poder sorrir\nÉ preciso a chuva para florir\n\nAndo devagar\nPorque já tive pressa\nE levo esse sorriso\nPorque já chorei demais\n\nCada um de nós compõe a sua história\nCada ser em si\nCarrega o dom de ser capaz\nE ser feliz","language":"text/plain","encrypted":false,"added":1591151117},{"paste_id":7,"description":"Sinônimos - Zé Ramalho","body":"Quanto o tempo o coração leva pra saber\nQue o sinônimo de amar é sofrer\nNo aroma de amores pode haver espinhos\nÉ como ter mulheres e milhões e ser sozinho\nNa solidão de casa, descansar\nO sentido da vida, encontrar\nNinguém pode dizer onde a felicidade está\n\nO amor é feito de paixões\nE quando perde a razão\nNão sabe quem vai machucar\nQuem ama nunca sente medo\nDe contar os seus segredos\nSinônimo de amor é amar\n\nQuem revelará o mistério que tem a fé\nE quantos segredos traz o coração de uma mulher\nComo é triste a tristeza mendigando um sorriso\nUm cego procurando a luz na imensidão do paraíso\nQuem tem amor na vida, tem sorte\nQuem na fraqueza sabe ser bem mais forte\nNinguém sabe dizer onde a felicidade está\n\nO amor é feito de paixões\nE quando perde a razão\nNão sabe quem vai machucar\nQuem ama nunca sente medo\nDe contar os seus segredos\nSinônimo de amor é amar\n\nO amor é feito de paixões\nE quando perde a razão\nNão sabe quem vai machucar\nQuem ama nunca sente medo\nDe contar os seus segredos\nSinônimo de amor é amar\n\nSinônimo de amor é amar\nSinônimo de amor é amar\n\nO amor é feito de paixões\nE quando perde a razão\nNão sabe quem vai machucar\nQuem ama nunca sente medo\nDe contar os seus segredos\nSinônimo de amor é amar\n\nQuem revelará o mistério que tem a fé\nE quantos segredos traz o coração de uma mulher\nComo é triste a tristeza mendigando um sorriso\nUm cego procurando a luz na imensidão do paraíso\n\nO amor é feito de paixões\nE quando perde a razão\nNão sabe quem vai machucar\nQuem ama nunca sente medo\nDe contar os seus segredos\nSinônino de amor é amar","language":"text/plain","encrypted":false,"added":1591151318},{"paste_id":8,"description":"Admirável Gado Novo - Zé Ramalho","body":"Ôôô, boi\n\nVocês que fazem parte dessa massa\nQue passa nos projetos do futuro\nÉ duro tanto ter que caminhar\nE dar muito mais do que receber\n\nE ter que demonstrar sua coragem\nÀ margem do que possa parecer\nE ver que toda essa engrenagem\nJá sente a ferrugem lhe comer\n\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\n\nLá fora faz um tempo confortável\nA vigilância cuida do normal\nOs automóveis ouvem a notícia\nOs homens a publicam no jornal\n\nE correm através da madrugada\nA única velhice que chegou\nDemoram-se na beira da estrada\nE passam a contar o que sobrou!\n\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\n\nÔôô, boi\n\nO povo foge da ignorância\nApesar de viver tão perto dela\nE sonham com melhores tempos idos\nContemplam essa vida numa cela\n\nEsperam nova possibilidade\nDe verem esse mundo se acabar\nA arca de Noé, o dirigível\nNão voam, nem se pode flutuar\n\nNão voam, nem se pode flutuar\nNão voam, nem se pode flutuar\n\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\nÊ, ô, ô, vida de gado\nPovo marcado, ê!\nPovo feliz!\n\nÔôô, boi","language":"text/plain","encrypted":false,"added":1591151585},{"paste_id":9,"description":"Conquest Of Paradise - Vangelis","body":"In noreni per ipe\nIn noreni cora\nTira mine per ito\nNe domina\n\nIn noreni per ipe\nIn noreni cora\nTira mine per ito\nNe domina\n\nIn noreni per ipe\nIn noreni cora\nTira mine per ito\nNe domina\n\nIn romine tirmeno\nNe romine to fa\nImaginas per meno per imentira\n\nTRADUÇÃO:\n\nNoite adentro\nÀ noite encontrados\nMuitos tesouros perdidos\nPor eles dominados\n\nNoite adentro\nÀ noite encontrados\nMuitos tesouros perdidos\nPor eles dominados\n\nNoite adentro\nÀ noite encontrados\nMuitos tesouros perdidos\nPor eles dominados\n\nNa ruína se perde\nPara a ruína não se vai\nImagina ser pouco e mentira","language":"text/plain","encrypted":false,"added":1591151928},{"paste_id":10,"description":"Sobrevivi - Sarah Farias","body":"Foram noites intermináveis, eu só chorava\nBem no auge da minha dor, nada me consolava\nMas eu sobrevivi como a águia solitária\nE a sorte, de novo, sorriu pra mim\nDeus me escondeu bem debaixo de suas asas\nNenhuma peste me matou\nNenhuma flecha me atingiu\n\nEu aprendi a ganhar perdendo\nAprendi a subir descendo\nDoeu, doeu, mas eu cresci\nE cresci diminuindo\nApareci desaparecendo\nE o poder de Deus na minha fraqueza\nSe aperfeiçoou\n\nTem coisa boa chegando\nTem algo acontecendo\nE não importa o que eu sofri\nO que importa é que eu sobrevivi\nTem coisa boa chegando\nTem algo acontecendo\nE não importa o que eu sofri\nO que importa é que eu sobrevivi\n\nEu aprendi a ganhar perdendo\nAprendi a subir descendo\nDoeu, doeu, mas eu cresci\nE cresci diminuindo\nApareci desaparecendo\nE o poder de Deus, na minha fraqueza\nSe aperfeiçoou\n\nTem coisa boa chegando\nTem algo acontecendo\nE não importa o que eu sofri\nO que importa é que eu sobrevivi\nTem coisa boa chegando\nTem algo acontecendo\nE não importa o que eu sofri\nO que importa é que eu sobrevivi\n\nSobrevivi\nSobrevivi\nSobrevivi","language":"text/plain","encrypted":false,"added":1591152150},{"paste_id":11,"description":"Design for a CoinSwap Implementation for Massively Improving Bitcoin Privacy and Fungibility","body":"# Design for a CoinSwap Implementation for Massively Improving Bitcoin Privacy and Fungibility\n\n### Abstract\n\nImagine a future where a user Alice has bitcoins and wants to send them with maximal privacy, so she creates a special kind of transaction. For anyone looking at the blockchain her transaction appears completely normal with her coins seemingly going from address A to address B. But in reality her coins end up in address Z which is entirely unconnected to either A or B.\n\nNow imagine another user, Carol, who isn't too bothered by privacy and sends her bitcoin using a regular wallet which exists today. But because Carol's transaction looks exactly the same as Alice's, anybody analyzing the blockchain must now deal with the possibility that Carol's transaction actually sent her coins to a totally unconnected address. So Carol's privacy is improved even though she didn't change her behaviour, and perhaps had never even heard of this software.\n\nIn a world where advertisers, social media and other companies want to collect all of Alice's and Carol's data, such privacy improvement would be incredibly valuable. And also the doubt added to every transaction would greatly boost the fungibility of bitcoin and so make it a better form of money.\n\nThis undetectable privacy can be developed today by implementing CoinSwap, although by itself that isn't enough. There must be many building blocks which together make a good system. The software could be standalone as a kind of bitcoin mixing app, but it could also be a library that existing wallets can implement allowing their users to send Bitcoin transactions with much greater privacy.\n\n## CoinSwap\n\nLike CoinJoin, CoinSwap was invented in 2013 by Greg Maxwell[1]. Unlike CoinJoin it is relatively complicated to implement and so far has not been deployed. But the idea holds great promise, and fixes many of the problems of some kinds of CoinJoins. CoinSwap is the next step for on-chain bitcoin privacy.\n\nCoinSwap is a way of trading one coin for another coin in a non-custodial way. It is closely related to the idea of an atomic swap. Alice and Bob can trade coins with each other by first sending to a CoinSwap address and having those coins then sent to Bob:\n\n    Alice's Address 1 ----> CoinSwap Address 1 ----> Bob's Address 1\n\nAn entirely separate set of transactions gives Bob's coins to Alice in return:\n\n    Bob's Address 2 ----> CoinSwap Address 2 ----> Alice's Address 2\n\nWhere the symbol `---->` is a bitcoin transaction.\n\nPrivacy is improved because an observer of the blockchain cannot link Alice's Address 1 to Alice's Address 2, as there is no transaction between them. Alice's Address 2 could either be an address in Alice's wallet, or the address of someone else she wants to transfer money to. CoinSwap therefore breaks the transaction graph heuristic, which is the assumption that if a transaction A -> B is seen then the ownership of funds actually went from A to B.\n\nCoinSwap doesnt break any of bitcoin's assumptions or features like an auditable supply or pruning. It can be built on today's bitcoin without any new soft forks.\n\nCoinSwap can't improve privacy much on its own, so it requires other building block to create a truly private system.\n\n### ECDSA-2P\n\nThe original CoinSwap idea uses 2-of-2 multisig. We can get a slightly bigger anonymity set by using 2-of-3 multisigs with a fake third public key. For a much greater anonymity set we can use 2-party ECDSA to create 2-of-2 multisignature addresses that look the same as regular single-signature addresses[2]. Even the old-style p2pkh addresses starting with 1 can be CoinSwap addresses.\n\nBecause the transactions blend in with the rest of bitcoin, an application based on CoinSwap would provide much more privacy than the existing equal-output coinjoin apps (JoinMarket, Wasabi Wallet and Samourai Wallet's Whirlpool). CoinSwaps would also be cheaper for the same amount of privacy, as CoinJoin users usually create multiple CoinJoins to get effective privacy, for example JoinMarket's tumbler script does between 7-12 coinjoins (which are bigger than regular transactions too) when run with default parameters.\n\nSchnorr signatures with Musig provide a much easier way to create invisible 2-of-2 multisig, but it is not as suitable for CoinSwap. This is because the anonymity set for ECDSA would be much greater. All addresses today are ECDSA, and none are schnorr. We'd have to wait for schnorr to be added to bitcoin and then wait for users to adopt it. We see with segwit that even after nearly 3 years that segwit adoption is only about 60%, and segwit actually has a sizeable financial incentive for adoption via lower fees. Schnorr when used for single-sig doesn't have such an incentive, as Schnorr single-sig costs the same size as today's p2wpkh, so we can expect adoption to be even slower. (Of course there is an incentive for multisig transactions, but most transactions are single-sig). As schnorr adoption increases this CoinSwap system could start to use it, but for a long time I suspect it will mostly be using ECDSA for a greater anonymity set.\n\n### Liquidity market\n\nWe can create a liquidity market for CoinSwap very similar to how JoinMarket works for CoinJoins. In our example above Alice would be a market taker and Bob would be a market maker. The taker Alice pays a fee to the maker Bob in return for choosing the amount of a CoinSwap and when it happens. This allows an excellent user experience because Alice can create CoinSwaps for any size she wants, at any time she wants. Right now in JoinMarket there is liquidity to create CoinJoins of sizes up to about 200 BTC, and we can expect a similar kind of thing with CoinSwap.\n\n### Multi-transaction CoinSwaps to avoid amount correlation\n\nThis CoinSwap is vulnerable to amount correlation:\n\n    AliceA (15 BTC) ----> CoinSwap AddressA ----> BobA (15 BTC)\n    BobB (15 BTC) ----> CoinSwap AddressB ----> AliceB (15 BTC)\n\nWhere AliceA, AliceB are addresses belonging to Alice. BobA, BobB are addresses belonging to Bob. If an adversary starts tracking at address AliceA they could unmix this CoinSwap easily by searching the entire blockchain for other transactions with amounts close to 15 BTC, which would lead them to address AliceB. We can beat this amount correlation attack by creating multi-transaction CoinSwaps. For example:\n\n    AliceA (15 BTC) ----> CoinSwap AddressA ----> BobA (15 BTC)\n\n    BobB (7 BTC) ----> CoinSwap AddressB ----> AliceB (7 BTC)\n    BobC (5 BTC) ----> CoinSwap AddressC ----> AliceC (5 BTC)\n    BobD (3 BTC) ----> CoinSwap AddressD ----> AliceD (3 BTC)\n\nNow in the multi-transaction CoinSwap, the market taker Alice has given 15 BTC and got back three transactions which add up to the same amount, but nowhere on the blockchain is there an output where Alice received exactly 15 BTC.\n\n### Routing CoinSwaps to avoid a single points of trust\n\nIn the original CoinSwap idea there are only two parties Alice and Bob, so when they CoinSwap Bob will know exactly where the Alice's coins went. This means Bob is a single point of failure in Alice's privacy, and Alice must trust him not to spy on her.\n\nTo spread out and decentralize the trust, we can create CoinSwaps where Alice's payment is routed through many Bobs.\n\n    AliceA ====> Bob ====> Charlie ====> Dennis ====> AliceB\n\nWhere the symbol `====>` means one CoinSwap. In this situation Alice will be a market taker in the liquidity market, and all the other entities (Bob, Charlie, Dennis) will be market makers. Only Alice will know the entire route, and the makers will only know the previous and next bitcoin addresses along the route.\n\nThis could be made to work by Alice handling almost everything about the CoinSwap on the other maker's behalf. The makers wouldn't have TCP connections between each other, but only to Alice, and she would relay CoinSwap-relevant information between them. The other makers are not aware whether their incoming coins came from Alice herself or the previous maker in Alice's route. \n\n\n### Combining multi-transaction with routing\n\nRouting and multi-transaction must be combined to get both benefits. If Alice owns multiple UTXOs (of value 6 BTC, 8 BTC and 1 BTC) then this is easy with this configuration:\n\n             Alice\n    (6 BTC) (8 BTC) (1 BTC)\n       |       |       |\n       |       |       |\n       v       v       v\n              Bob\n    (5 BTC) (5 BTC) (5 BTC)\n       |       |       |\n       |       |       |\n       v       v       v\n            Charlie\n    (9 BTC) (5 BTC) (1 BTC)\n       |       |       |\n       |       |       |\n       v       v       v\n            Dennis\n    (7 BTC) (4 BTC) (4 BTC)\n       |       |       |\n       |       |       |\n       v       v       v\n             Alice\n\nWhere the downward arrow symbol is a single CoinSwap hash-time-locked contract. Each hop uses multiple transactions so no maker (Bob, Charlie, Dennis) is able to use amount correlation to find addresses not directly related to them, but at each hop the total value adds up to the same amount 15 BTC. And all 3 makers must collude in order to track the source and destination of the bitcoins.\n\nIf Alice starts with only a single UTXO then the above configuration is still vulnerable to amount correlation. One of the later makers (e.g. Dennis) knows that the total coinswap amount is 15 BTC, and could search the blockchain to find Alice's single UTXO. In such a situation Alice must use a branching configuration:\n\n                            Alice\n                           (15 BTC)\n                              |\n                              |\n                              v\n                             Bob\n                            /   \\\n                           /     \\\n               <-----------       ----------->\n               |                             |\n    (2 BTC) (2 BTC) (2 BTC)        (3 BTC) (3 BTC) (3 BTC)\n        |       |       |             |       |       |\n        |       |       |             |       |       |\n        v       v       v             v       v       v\n            Charlie                       Dennis\n    (1 BTC) (2 BTC) (3 BTC)       (5 BTC) (3 BTC) (1 BTC)\n        |       |       |             |       |       |\n        |       |       |             |       |       |\n        v       v       v             v       v       v\n             Edward                          Fred\n     (4 BTC) (1 BTC) (1 BTC)       (4 BTC) (2 BTC) (3 BTC)\n        |       |       |             |       |       |\n        |       |       |             |       |       |\n        v       v       v             v       v       v\n              Alice                         Alice\n\nIn this diagram, Alice sends 15 BTC to Bob via CoinSwap who sends 6 BTC on to Charlie and the remaining 9 BTC to Dennis. Charlie and Dennis do a CoinSwap with Edward and Fred who forward the coins to Alice. None of the makers except Bob know the full 15 BTC amount and so can't search the blockchain backwards for Alice's initial UTXO. Because of multiple transactions Bob cannot look forward to search for the amounts he sent 6 BTC and 9 BTC. A minimum of 3 makers in this example need to collude to know the source and destination of the coins.\n\nAnother configuration is branch merging, which Alice would find useful if she has two or more UTXOs for which there must not be evidence that they're owned by the same entity, and so they must not be spent together in the same transaction.\n\n              Alice                         Alice\n             (9 BTC)                       (6 BTC)\n                |                             |\n                |                             |\n                v                             v\n               Bob                         Charlie\n     (4 BTC) (3 BTC) (2 BTC)       (1 BTC) (2 BTC) (3 BTC)\n        |       |       |             |       |       |\n        |       |       |             |       |       |\n         \\       \\       \\           /       /       /\n          \\       \\       \\         /       /       /\n           \\       \\       \\       /       /       /\n            >------->-------\\     /-------<-------<\n                             \\   /\n                             Alice\n                            (15 BTC)\n\nIn this diagram Alice sends the two UTXOs (9 BTC and 6 BTC) to two different makers, who forward it onto Alice. Because the two UTXOs have been transferred to different makers they will likely never be co-spent.\n\nThese complex multi-transaction routed coinswaps are only for the highest threat models where the makers themselves are adversaries. In practice most users would probably choose to use just one or two hops.\n\n\n### Breaking change output and wallet fingerprinting heuristics\n\nEqual-output CoinJoins easily leak change addresses (unless they are sweeps with no change). CoinSwap doesn't have this flaw which allows us to break some of the weaker change output heuristics[3].\n\nFor example address reuse. If an output address has been reused it is very likely to be a payment output, not a change output. In a CoinSwap application we can break this heuristic by having makers randomly with some probability send their change to an address they've used before. That will make the heuristics think that the real change address is actually the payment address, and the real payment is actually the change, and could result in an analyzer of the blockchain grouping the payment address inside the maker's own wallet cluster.\n\nAnother great heuristic to break is the script type heuristic. If the maker's input are all in p2sh-p2wpkh addresses, and their payment address is also of type p2sh-p2wpkh, then the maker could with some probability set the change address to a different type such as p2wpkh. This could trick a chain analyzer in a similar way.\n\n### Fidelity bonds\n\nAnybody can enter the CoinSwap market as a maker, so there is a danger of sybil attacks. This is when an adversary deploys huge numbers of maker bots. If the taker Alice chooses maker bots which are all controlled by the same person then that person can deanonymize Alice's transaction by tracking the coins along the route.\n\nA solution to this is fidelity bonds. This is a mechanism where bitcoin value is deliberately sacrificed to make a cryptographic identity expensive to obtain. The sacrifice is done in a way that can be proven to a third party. One way to create a fidelity bond is to lock up bitcoins in a time-locked address. We can code the taker bots to behave in a way that creates market pressure for maker bot operators to publish fidelity bonds. These fidelity bonds can be created anonymously by anyone who owns bitcoin.\n\nFidelity bonds are a genuine sacrifice which can't be faked, they can be compared to proof-of-work which backs bitcoin mining. Then for a sybil attacker to be successful they would have to lock up a huge value in bitcoin for a long time. I've previously analyzed fidelity bonds for JoinMarket[4], and using realistic numbers I calculate that such a system would require about 55000 BTC (around 500 million USD at today's price) to be locked up for 6 months in time-locked addresses. This is a huge amount and provides strong sybil resistance.\n\n### Who goes first\n\nFidelity bonds also solve the \"who goes first\" problem in CoinSwap.\n\nThis problem happens because either Alice or Bob must broadcast their funding transaction first, but if the other side halts the protocol then they can cause Alice or Bob's to waste time and miner fees as they're forced to use the contract transactions to get their money back. This is a DOS attack. If a malicious CoinSwapper could keep halting the protocol they could stop an honest user from doing a CoinSwap indefinitely. Fidelity bonds solve this by having the fidelity bond holder go second. If the fidelity bond holder halts the protocol then their fidelity bond can be avoid by the user in all later CoinSwaps. And the malicious CoinSwapper could pack the orderbook with their sybils without sacrificing a lot of value for fidelity bonds.\n\nAs a concrete example, Alice is a taker and Bob is a maker. Bob publishes a fidelity bond. Alice \"goes first\" by sending her coins into a 2-of-2 multisig between her and Bob. When Bob sees the transaction is confirmed he broadcasts his own transactions into another 2-of-2 multisig. If Bob is actually malicious and halts the protocol then he will cost Alice some time and money, but Alice will refuse to ever CoinSwap with Bob's fidelity bond again.\n\nIf DOS becomes a big problem even with fidelity bonds, then its possible to have Alice request a \"DOS proof\" from Bob before broadcasting, which is a set of data containing transactions, merkle proofs and signatures which are a contract where Bob promises to broadcast his own transaction if Alice does so first. If Alice gets DOSed then she can share this DOS proof publicly. The proof will have enough information to convince anyone else that the DOS really happened, and it means that nobody else will ever CoinSwap with Bob's fidelity bond either (or at least assign some kind of ban score to lower the probability). I doubt it will come to this so I haven't expanded the idea much, but theres a longer writeup in the reference[5].\n\n### Private key handover\n\nThe original proposal for CoinSwap involved four transactions. Two to pay into the multisig addresses and two to pay out. We can do better than this with private key handover[6]. This is an observation that once the CoinSwap preimage is revealed, Alice and Bob don't have to sign each other's multisig spend, instead they could hand over their private key to the other party. The other party will know both keys of the 2-of-2 multisig and therefore have unilateral control of the coins. Although they would still need to watch the chain and respond in case a hash-time-locked contract transaction is broadcasted.\n\nAs well as saving block space, it also improves privacy because the coins could stay unspent for a long time, potentially indefinitely. While in the original coinswap proposal an analyst of the chain would always see a funding transaction followed closely in time by a settlement transaction, and this could be used as a fingerprint.\n\nWe can go even further than private key handover using a scheme called SAS: Succinct Atomic Swap[7]. This scheme uses adapter signatures[8] to create a similar outcome to CoinSwap-with-private-key-handover, but only one party in the CoinSwap must watch and respond to blockchain events until they spend the coin. The other party just gets unilateral control of their coins without needing to watch and respond.\n\n\n### PayJoin with CoinSwap\n\nCoinSwap can be combined with CoinJoin. In original CoinSwap, Alice might pay into a CoinSwap address with a regular transaction spending multiple of her own inputs:\n\n    AliceInputA (1 BTC) ----> CoinSwap Address (3 BTC)\n    AliceInputB (2 BTC)\n\nThis leaks information that all of those inputs are owned by the same person. We can make this example transaction a CoinJoin by involving Bob's inputs too. CoinJoin requires interaction but because Alice and Bob are already interacting to follow the CoinSwap protocol, so it's not too hard to have them interact a bit more to do a CoinJoin too. The CoinJoin transaction which funds the CoinSwap address would look like this:\n\n    AliceInputA (1 BTC) ----> CoinSwap Address (7 BTC)\n    AliceInputB (2 BTC)\n    BobInputA   (4 BTC)\n\nAlice's and Bob's inputs are both spent in a same transaction, which breaks the common-input-ownership heuristic. This form of CoinJoin is most similar to the PayJoin protocol or CoinJoinXT protocol. As with the rest of this design, this protocol does not have any special patterns and so is indistinguishable from any regular bitcoin transaction.\n\nTo make this work Bob the maker needs to provide two unrelated UTXOs, one that is CoinSwapped and the other CoinJoined.\n\n#### Using decoy UTXOs to protect from leaks\n\nIf Bob the maker was just handing out inputs for CoinJoins to any Alice who asked, then malicious Alice's could constantly poll Bob to learn his UTXO and then halt the protocol. Malicious Alice could learn all of Bob's UTXOs and easily unmix future CoinSwaps by watching their future spends.\n\nTo defend against this attack we have Bob maintain a list of \"decoy UTXOs\", which are UTXOs that Bob found by scanning recent blocks. Then when creating the CoinJoin, Bob doesn't just send his own input but sends perhaps 50 or 100 other inputs which don't belong to him. For the protocol to continue Alice must partially-sign many CoinJoin transactions; one for each of those inputs, and send them back to Bob. Then Bob can sign the transaction which contains his genuine input and broadcast it. If Alice is actually a malicious spy she won't learn Bob's input for sure but will only know 100 other inputs, the majority of which have nothing to do with Bob. By the time malicious Alice learns Bob's true UTXO its already too late because its been spent and Alice is locked into the CoinSwap protocol, requiring time, miner fees and CoinSwap fees to get out.\n\nThis method of decoy UTXOs has already been written about in the original PayJoin designs from 2018[9][10].\n\n### Creating a communication network using federated message boards\n\nRight now JoinMarket uses public IRC networks for communication. This is subpar for a number of reasons, and we can do better.\n\nI propose that there be a small number of volunteer-operated HTTP servers run on Tor hidden services. Their URLs are included in the CoinSwap software by default. They can be called message board servers. Makers are also servers run on hidden services, and to advertise themselves they connect to these message board servers to post the makers own .onion address. To protect from spam, makers must provide a fidelity bond before being allowed to write to the HTTP server.\n\nTakers connect to all these HTTP message boards and download the list of all known maker .onion addresses. They connect to each maker's onion to obtain parameters like offered coinswap fee and maximum coinswap size. This is equivalent to downloading the orderbook on JoinMarket. Once takers have chosen which makers they'll do a CoinSwap with, they communicate with those maker again directly through their .onion address to transmit the data needed to create CoinSwaps.\n\nThese HTTP message board servers can be run quite cheaply, which is required as they'd be volunteer run. They shouldn't require much bandwidth or disk space, as they are well-protected from spam with the fidelity bond requirement. The system can also tolerate temporary downtimes so the servers don't need to be too reliable either. It's easy to imagine the volunteers running them on a raspberry pi in their own home. These message board servers are similar in some ways to the DNS seeds used by Bitcoin Core to find its first peers on bitcoin's p2p network. If the volunteers ever lose interest or disappear, then the community of users could find new volunteer operators and add those URLs to the default list.\n\nIn order to censor a maker, _all_ the message board servers would have to co-operate to censor him. If censorship is happening on a large scale (for example if the message board servers only display sybil makers run by themselves) then takers could also notice a drop in the total value of all fidelity bonds.\n\n\n## How are CoinSwap and Lightning Network different?\n\nCoinSwap and Lightning Network have many similarities, so it's natural to ask why are they different, and why do we need a CoinSwap system at all if we already have Lightning?\n\n### CoinSwap can be adopted unilaterally and is on-chain\n\nToday we see some centralized exchange not supporting so-called ''privacy altcoins'' because of regulatory compliance concerns. We also see some exchanges frowning upon or blocking CoinJoin transactions they detect[11]. (There is some debate over whether the exchanges really blocked transactions because they were CoinJoin, but the principle remains that equal-output CoinJoins are inherently visible as such). It's possible that those exchanges will never adopt Lightning because of its privacy features.\n\nSuch a refusal would simply not be possible with CoinSwap, because it is fundamentally an on-chain technology. CoinSwap users pay to bitcoin addresses, not Lightning invoices. Anybody who accepts bitcoin today will accept CoinSwap. And because CoinSwap transactions can be made indistinguishable from regular transactions, it would be very difficult to even determine whether they got paid via a CoinSwap or not. So CoinSwap is not a replacement for Lightning, instead it is a replacement for on-chain privacy technology such as equal-output CoinJoins which are implemented today in JoinMarket, Wasabi Wallet and Samourai Wallet. Ideally this design, if implemented, would be possible to include into the many already-existing bitcoin wallets, and so the CoinSwaps would be accessible to everyone.\n\nThis feature of CoinSwap will in turn help Lightning Network, because those censoring exchanges won't be able to stop transactions with undetectable privacy no matter what they do. When they realize this they'll likely just implement Lightning Network anyway regardless of the privacy.\n\nBitcoin needs on-chain privacy as well, otherwise the bad privacy can leak into layer-2 solutions.\n\n### Different ways of solving liquidity\n\nLightning Network cannot support large payment amounts. Liquidity in payment channels on the Lightning network is a scarce resource. Nodes which relay lightning payments always take care that a payment does not exhaust their liquidity. Users of Lightning today must often be aware of inbound liquidity, outbound liquidity and channel rebalancing. There even exist services today which sell Lightning liquidity.\n\nThis CoinSwap design solves its liquidity problem in a completely different way. Because of the liquidity market similar to JoinMarket, all the required liquidity is always available. There are never any concerns about exhausting channel capacity or a route not being found, because such liquidity is simply purchased from the liquidity market right before it is used.\n\nIt is still early days for Lightning, and liquidity has been a known issue since the start. Many people are confident that the liquidity issue will be improved. Yet it seems hard to imagine that Lightning Network will ever reliably route payments of 200 BTC to any node in the network (and it doesn't have to to be successful), yet on JoinMarket today as I write these words there are offers to create CoinJoins with amounts up to around 200 BTC. We can expect similar large amounts to be sendable in CoinSwap. The liquidity market as a solution is known to work and has been working for years.\n\n### Sybil resistance\n\nCoinSwap can support fidelity bonds and so can be made much more resistant to sybil attacks. We saw in the earlier section that realistic numbers from JoinMarket imply a sybil attacker would have to lock up hundreds of millions of USD worth of bitcoin to successfully deanonymize users.\n\nIt's difficult to compare this to the cost of a sybil attack in Lightning network as such attacks are hard to analyze. For example, the attacker needs to convince users to route payments through the attacker's own nodes, and maybe they could do this, but putting numbers on it is hard. Even so it is very likely that the true cost is much less than 500 million USD locked up for months because Lightning nodes can be set up for not more than the cost of hardware and payment channel capacity, while CoinSwap makers would require expensive fidelity bond sacrifices.\n\nAs this CoinSwap design would cost much more sybil attack, its privacy would be much greater in this respect.\n\n\n## How are CoinSwap, PayJoin and PaySwap different?\n\nPayJoin can also be indistinguishable from regular bitcoin transaction, so why don't we all just use that and not go further?\n\nThe answer is the threat models. PayJoin works by having the customer and merchant together co-operate to increase both their privacy. It works if the adversary of both of them is a passive observer of the blockchain.\n\nPayJoin doesnt help a customer at all if the user's adversary is the merchant. This situation happens all the time today, for example exchanges spying on their customers. CoinSwap can help in this situation, as it doesn't assume or require that the second party is your friend. The same argument applies to PaySwap.\n\nObviously PayJoin and PaySwap are still very useful, but they operate under different threat models.\n\n\n## Conclusion\n\nCoinSwap is a promising privacy protocol because it breaks the transaction graph heuristic, but it cant work on its own. In order to create a truly private system of sending transactions which would improve bitcoin's fungibility, CoinSwap must be combined with a couple of other building blocks:\n\n* ECDSA-2P\n* Liquidity market\n* Routed CoinSwaps\n* Multi-transaction CoinSwaps\n* Breaking change output heuristics\n* Fidelity bonds\n* PayJoin with CoinSwap\n* Federated message boards protected from spam with fidelity bonds\n\nCoinSwap transactions could be made to look just like any other regular bitcoin transaction, with no distinguishing fingerprint. This would make them invisible.\n\nI intend to create this CoinSwap software. It will be almost completely decentralized and available for all to use for free. The design is published here for review. If you want to help support development I accept donations at https://bitcoinprivacy.me/coinswap-donations\n\n\nSee also the bitcoin development mailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017898.html\n\n## References\n\n- [1] \"CoinSwap: Transaction graph disjoint trustless trading\" https://bitcointalk.org/index.php?topic=321228.0\n\n- [2] http://diyhpl.us/wiki/transcripts/scalingbitcoin/tokyo-2018/scriptless-ecdsa/\n\n- [3] https://en.bitcoin.it/wiki/Privacy#Change_address_detection\n\n- [4] \"Design for improving JoinMarket's resistance to sybil attacks using fidelity bonds\" https://gist.github.com/chris-belcher/18ea0e6acdb885a2bfbdee43dcd6b5af/\n\n- [5] https://github.com/AdamISZ/CoinSwapCS/issues/50\n\n- [6] https://github.com/AdamISZ/CoinSwapCS/issues/53\n\n- [7] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017846.html\n\n- [8] https://github.com/ElementsProject/scriptless-scripts/blob/master/md/atomic-swap.md\n\n- [9] https://blockstream.com/2018/08/08/en-improving-privacy-using-pay-to-endpoint/\n\n- [10] https://medium.com/@nopara73/pay-to-endpoint-56eb05d3cac6\n\n- [11] https://cointelegraph.com/news/binance-returns-frozen-btc-after-user-promises-not-to-use-coinjoin\n","language":"text/plain","encrypted":false,"added":1591152962}],"comment":[]}