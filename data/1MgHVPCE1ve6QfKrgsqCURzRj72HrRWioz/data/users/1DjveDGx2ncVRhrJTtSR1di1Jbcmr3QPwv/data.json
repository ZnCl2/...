{"next_paste_id":2,"next_comment_id":0,"paste":[{"paste_id":0,"description":"polysafe.html","body":"<!DOCTYPE html>\n<html>\n<!--\nCopyright 2018 Fabian Henneke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-->\n<head>\n    <meta charset=\"utf-8\" />\n    <title>PolySafe</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <style>\n        form {\n            display: grid;\n            grid-template-columns: max-content max-content;\n            grid-gap: 10px;\n            align-items: center;\n        }\n\n        .grid-1-l {\n            grid-row: 1;\n            grid-column: 1;\n        }\n\n        .grid-1-r {\n            grid-row: 1;\n            grid-column: 2;\n        }\n        .grid-2-l {\n            grid-row: 2;\n            grid-column: 1;\n        }\n        .grid-2-r {\n            grid-row: 2;\n            grid-column: 2;\n        }\n        .grid-3-l {\n            grid-row: 3;\n            grid-column: 1;\n        }\n        .grid-3-r {\n            grid-row: 3;\n            grid-column: 2;\n        }\n        .grid-4-r {\n            grid-row: 4;\n            grid-column: 2;\n        }\n    </style>\n</head>\n\n<body>\n    <form>\n        <div class=\"grid-1-l\">\n            <label for=\"file\">File to encrypt:</label>\n        </div>\n        <div class=\"grid-1-r\">\n            <input type=\"file\" id=\"file\" autofocus>\n        </div>\n        <div class=\"grid-2-l\">\n            <label for=\"password\">Password:</label>\n        </div>\n        <div class=\"grid-2-r\">\n            <input type=\"password\" id=\"password\">\n        </div>\n        <div class=\"grid-3-l\">\n            <label for=\"password_repeated\">Repeat password:</label>\n        </div>\n        <div class=\"grid-3-r\">\n            <input type=\"password\" id=\"password_repeated\">\n        </div>\n        <div class=\"grid-4-r\">\n            <input type=\"submit\" value=\"Encrypt file\">\n        </div>\n    </form>\n    <script>\n        'use strict';\n\n        function getRandomBytes(num) {\n            let bytes = new Uint8Array(num);\n            window.crypto.getRandomValues(bytes);\n            return bytes;\n        }\n\n        function readFile(file) {\n            return new Uint8Array(new FileReader().readAsArrayBuffer(file));\n        }\n\n        function readFile(file) {\n            const reader = new FileReader();\n\n            return new Promise((resolve, reject) => {\n                reader.onerror = () => {\n                    reader.abort();\n                    reject(new DOMException('Cannot read input file.'));\n                };\n\n                reader.onload = () => {\n                    resolve(new Uint8Array(reader.result));\n                };\n                reader.readAsArrayBuffer(file);\n            });\n        };\n\n        function preprendFilename(filename, data_bytes) {\n            const filename_bytes = new TextEncoder('utf-8').encode(filename + '/');\n            const combined_bytes = new Uint8Array(filename_bytes.length + data_bytes.length);\n            combined_bytes.set(filename_bytes, 0);\n            combined_bytes.set(data_bytes, filename_bytes.length);\n            return combined_bytes;\n        }\n\n        function deriveKey(password, salt) {\n            const passwordBytes = new TextEncoder('utf-8').encode(password);\n            return window.crypto.subtle.importKey(\n                'raw',\n                passwordBytes, {\n                    name: 'PBKDF2',\n                },\n                false,\n                ['deriveKey']\n            ).then(function (key) {\n                return window.crypto.subtle.deriveKey({\n                        name: 'PBKDF2',\n                        salt,\n                        iterations: 200000,\n                        hash: {\n                            name: 'SHA-1'\n                        }\n                    },\n                    key, {\n                        name: 'AES-GCM',\n                        length: 128\n                    },\n                    false,\n                    ['encrypt']\n                )\n            });\n        }\n\n        function encrypt(key, iv, bytes) {\n            return window.crypto.subtle.encrypt({\n                name: 'AES-GCM',\n                length: 128,\n                iv\n            }, key, bytes);\n        }\n\n        /*\n        MIT LICENSE\n        Copyright 2011 Jon Leighton\n        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n        */\n\n        function base64ArrayBuffer(arrayBuffer) {\n            let base64 = '';\n            const encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n            const bytes = new Uint8Array(arrayBuffer);\n            const byteLength = bytes.byteLength;\n            const byteRemainder = byteLength % 3;\n            const mainLength = byteLength - byteRemainder;\n\n            let a, b, c, d;\n            let chunk;\n\n            // Main loop deals with bytes in chunks of 3\n            for (var i = 0; i < mainLength; i = i + 3) {\n                // Combine the three bytes into a single integer\n                chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n                // Use bitmasks to extract 6-bit segments from the triplet\n                a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n                b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n                c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n                d = chunk & 63; // 63       = 2^6 - 1\n\n                // Convert the raw binary segments to the appropriate ASCII encoding;\n                base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n            }\n\n            // Deal with the remaining bytes and padding\n            if (byteRemainder == 1) {\n                chunk = bytes[mainLength];\n\n                a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n                // Set the 4 least significant bits to zero\n                b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n                base64 += encodings[a] + encodings[b] + '==';\n            } else if (byteRemainder == 2) {\n                chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n                a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n                b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n                // Set the 2 least significant bits to zero\n                c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n                base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n            }\n\n            return base64;\n        }\n\n        function serialize(salt, iv, cipher_buffer) {\n            const payload = JSON.stringify({\n                salt: Array.prototype.slice.call(salt),\n                iv: Array.prototype.slice.call(iv),\n                encrypted: base64ArrayBuffer(cipher_buffer)\n            });\n            const decryptor_html = DECRYPTOR_TEMPLATE.replace('{{___PAYLOAD___}}', payload);\n            return new TextEncoder('utf-8').encode(decryptor_html);\n        }\n\n        function download(filename, buffer) {\n            const a = document.createElement('a');\n            a.style = 'display: none';\n            document.body.appendChild(a);\n            const blob = new Blob([buffer], {\n                type: 'application/octet-stream'\n            });\n            const url = window.URL.createObjectURL(blob);\n            a.href = url;\n            a.download = filename;\n            a.click();\n            window.URL.revokeObjectURL(url);\n        }\n\n        function runEncrypt() {\n            if (!window.crypto) {\n                alert(\n                    'Full support for the WebCrypto API is needed for decryption. Please use one of the following browsers: Chrome 37+, Firefox 34+, Safari 7+, Opera 24+'\n                )\n                return;\n            }\n\n            const file = document.getElementById('file').files[0];\n            if (!file) {\n                alert('Select a file first.');\n                return;\n            }\n            const password = document.getElementById('password').value;\n            if (password != document.getElementById('password_repeated').value) {\n                alert('Passwords must match.');\n                return;\n            }\n\n            const encryptButton = document.querySelector('input[type=submit]');\n            encryptButton.disabled = true;\n            encryptButton.value = 'Encrypting...';\n\n            const salt = getRandomBytes(16);\n            const iv = getRandomBytes(16);\n\n            readFile(file)\n                .then(file_bytes => preprendFilename(file.name, file_bytes))\n                .then(payload_bytes => deriveKey(password, salt)\n                    .then(key => encrypt(key, iv, payload_bytes)))\n                .then(buffer => serialize(salt, iv, buffer))\n                .then(buffer => download(file.name + '.html', buffer))\n                .catch(e => alert('Error during encryption: ' + e.message))\n                .finally(() => {\n                    encryptButton.disabled = false;\n                    encryptButton.value = 'Encrypt file';\n                });\n        }\n\n        document.querySelector('form').addEventListener('submit', e => {\n            e.preventDefault();\n            runEncrypt();\n        });\n\n        const DECRYPTOR_TEMPLATE =\n            `\n<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <title>PolySafe</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n</head>\n\n<body>\n    <form>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" autofocus>\n        <input type=\"submit\" value=\"Decrypt file\">\n    </form>\n    <script id=\"data\" type=\"application/json\">\n        {{___PAYLOAD___}}\n    <\\/script>\n    <script>\n        if (window.crypto && !window.crypto.subtle && window.crypto.webkitSubtle) {\n            window.crypto.subtle = window.crypto.webkitSubtle;\n        }\n\n        function base64ToArray(base64) {\n            return new Uint8Array(atob(base64).split('').map(function (c) {\n                return c.charCodeAt(0);\n            }));\n        }\n\n        function deriveKey(password, salt) {\n            var passwordBytes = new TextEncoder('utf-8').encode(password);\n\n            return window.crypto.subtle.importKey(\n                'raw',\n                passwordBytes, {\n                    name: 'PBKDF2'\n                },\n                false,\n                ['deriveKey']\n            ).then(function (key) {\n                return window.crypto.subtle.deriveKey({\n                        name: 'PBKDF2',\n                        salt: salt,\n                        iterations: 200000,\n                        hash: {\n                            name: 'SHA-1'\n                        }\n                    },\n                    key, {\n                        name: 'AES-GCM',\n                        length: 128\n                    },\n                    false,\n                    ['decrypt']\n                )\n            });\n        }\n\n        function decrypt(key, iv, bytes) {\n            return window.crypto.subtle.decrypt({\n                name: 'AES-GCM',\n                length: 128,\n                iv: iv\n            }, key, bytes);\n        }\n\n        function extractDecryptedFile(buffer) {\n            var bytes = new Uint8Array(buffer);\n            var slash_pos = Array.prototype.indexOf.call(bytes, '/'.charCodeAt(0));\n            if (slash_pos == -1) {\n                throw 'Decrypted data is corrupted';\n            } else {\n                var name = new TextDecoder('utf-8').decode(new Uint8Array(Array.prototype.slice.call(bytes, 0, slash_pos)));\n                var content = new Uint8Array(Array.prototype.slice.call(bytes, slash_pos + 1));\n                return {\n                    name: name,\n                    content: content\n                };\n            }\n        }\n\n        function download(file) {\n            var a = document.createElement('a');\n            a.style = 'display: none';\n            document.body.appendChild(a);\n            var blob = new Blob([file.content]);\n            var url = window.URL.createObjectURL(blob);\n            a.href = url;\n            a.download = file.name;\n            a.click();\n            setTimeout(function () {\n                window.URL.revokeObjectURL(url);\n            }, 10000);\n        }\n\n        function runDecrypt() {\n            if (!window.crypto) {\n                alert(\n                    'Full support for the WebCrypto API is needed for decryption. Please use one of the following browsers: Chrome 37+, Firefox 34+, Safari 7+, Opera 24+'\n                )\n            }\n\n            var decryptButton = document.querySelector('input[type=submit]');\n            decryptButton.disabled = true;\n            decryptButton.value = 'Decrypting...';\n\n            setTimeout(function () {\n                var data = JSON.parse(document.getElementById('data').textContent);\n                var salt = new Uint8Array(data.salt);\n                var iv = new Uint8Array(data.iv);\n                var encrypted = base64ToArray(data.encrypted);\n\n                var password = document.querySelector('input[type=password]').value;\n                deriveKey(password, salt)\n                    .then(function (key) {\n                        return decrypt(key, iv, encrypted);\n                    })\n                    .catch(function () {\n                        throw 'Wrong password or corrupted file.';\n                    })\n                    .then(extractDecryptedFile)\n                    .then(download)\n                    .catch(function (e) {\n                        alert('Error during decryption: ' + e);\n                    })\n                    .then(function () {\n                        decryptButton.disabled = false;\n                        decryptButton.value = 'Decrypt file';\n                    });\n            }, 0);\n        }\n\n        document.querySelector('form').addEventListener('submit', function(e) {\n            e.preventDefault();\n            runDecrypt();\n        });\n    <\\/script>\n</body>\n\n</html>`;\n    </script>\n</body>\n\n</html>\n","language":"text/html","encrypted":false,"added":1576270604},{"paste_id":1,"description":"gerador-de-senhas.html","body":"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"pt-br\" lang=\"pt-br\">\n  <head>\n    <title>Gerador de senhas</title>\n    <meta name=\"author\" content=\"Gabriel Barros | www.gabrielbarros.com.br\" />\n\n    <script type=\"text/javascript\">\n      <!--\n      // função dec2hex: converte números decimais em números hexadecimais \n      function dec2hex(numero) {\n        var base = 16;\n        var digito = new Array();\n        var i = 0;\n\n        while (numero != 0) {\n          i++;\n          digito[i] = numero % base;\n          numero = Math.floor(numero / base);\n        }\n        value = \"\";\n        while (i >= 1)  {\n          switch (digito[i]) {\n            case 10: { value += \"A\"; break }\n            case 11: { value += \"B\"; break }\n            case 12: { value += \"C\"; break }\n            case 13: { value += \"D\"; break }\n            case 14: { value += \"E\"; break }\n            case 15: { value += \"F\"; break }\n            default: { value += digito[i]; break }\n          }\n          i--;\n        }\n        return value;\n      }\n\n      function GerarSenha() {\n        document.forms[0].senha.value = \"\";\n        tamanho = document.forms[0].digitos.value;\n\n        // validar o campo *dígitos*\n        if (tamanho < 1 || isNaN(tamanho)) {\n          alert(\"Escolha um valor numérico válido para esse campo\");\n          document.forms[0].digitos.focus();\n          document.forms[0].digitos.select();\n          return;\n        }\n\n        // ajusta o tamanho (em pixels) do campo de acordo com o número de dígitos\n        document.forms[0].senha.style.width = (tamanho * 9) + \"px\";\n\n        // códigos ASCII decimais\n        min = 32;\n        max = 126;\n\n        for (i = 1; i <= tamanho; i++) {\n          caracter = min + Math.floor((Math.random() * (max - min)));  // 32 a 126\n          caracter = \"%\" + dec2hex(caracter);\n          caracter = unescape(caracter);\n          document.forms[0].senha.value += caracter;\n          document.getElementById(\"aguarde\").innerHTML = \"aguarde...\";\n        }\n        document.getElementById(\"aguarde\").innerHTML = \"\";\n      }\n      //-->\n    </script>\n\n    <style type=\"text/css\">\n      <!--\n      * {font: 11px Verdana}\n      .campo1 {width: 180px}\n      .campo2 {width: 40px}\n      .campo1, .campo2 {border: solid 1px #CCC}\n      .botao {border: solid 1px #BBB; background-color: #EEE; cursor: pointer}\n      #aguarde {font-style: italic}\n      -->\n    </style>\n  </head>\n\n  <body>\n    <form action=\"#\" onsubmit=\"GerarSenha(); return false\">\n      Senha: <input type=\"text\" name=\"senha\" size=\"30\" class=\"campo1\" readonly=\"readonly\" />&nbsp;&nbsp;\n      <input type=\"submit\" value=\"Gerar senha\" class=\"botao\" /><br /><br />\n      Dígitos: <input type=\"text\" value=\"20\" name=\"digitos\" size=\"3\" class=\"campo2\" maxlength=\"2\" /> \n    </form><br />\n    <div id=\"aguarde\"></div> \n  </body>\n</html>","language":"text/html","encrypted":false,"added":1576273235}],"comment":[]}