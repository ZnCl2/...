{
	"title": "gledos的博客",
	"description": "真实的知识",
	"links": "[Markdown语法说明中文版](?Post:2:Markdown%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%E4%B8%AD%E6%96%87%E7%89%88)\n\n[陈佳的博客](/1Bm8RDrnitgbh7Nbsbo6T9j5VDLWTGaar4/)\n\n[gledos的明网博客](https://gledos.science)​​​​​​",
	"next_post_id": 12,
	"demo": false,
	"modified": 1590913556,
	"post": [
		{
			"post_id": 10,
			"title": "伪科学、前科学、副科学（超科学）、原科学、非科学",
			"date_published": 1499239652.211,
			"body": "```\n作者：Amos\n链接：https://www.zhihu.com/question/21442190/answer/18456508\n```\n\n佛罗伊德学说的部分内容：\n\n> 通常人们会认为科学的对立面就是伪科学，其实不是。\n> 这里先解释几个相近的概念：\n> \n> *   **伪科学（pseudoscience）：在特定的时间和地点冒充科学，把已经被科学界证明不属科学的东西当作科学对待，并且长期不能或者拒绝提供严格的证据。**\n> *   前科学：有些理论本身是错误的，但在科学史上不能简单地说它是伪科学，因为它对该学科的发展有一定的贡献，在那段历史时期，它属于科学。\n> *   副科学（parascience）：也叫超科学，它泛指不被主流科学界认可的所谓科学或者比科学更有价值的理论。也有使用\"病态科学\"（pathological science）叫法的。\n> *   原科学（protoscience）：处于假说或不完善阶段，还没有被科学所证实，也没有被推翻的理论。原科学并不反对科学验证，但由于其结果不完全确定（催眠术等）、难于验证（例如古代宇航员理论、夸克）等原因，目前阶段还无法作出定论。\n> *   非科学：就是不可证伪的，所以这样的知识属于非科学，它们在科学的领域之外。按照波普尔的可证伪原则：哲学、数学、神学、宗教等都不是科学。\n\n---\n\n> * * *\n> \n> 这些概念的提出是源于科学的严谨性，然而它们之间却有太多的模糊不清的交集。在现实中，通常不容易区分，伪科学活动本身也有一个演化过程。\n> 就像科学也是在进步和发展的，9世纪中叶永动机被认为是科学，而当时被认为是伪科学的大陆漂移学说到了现在却成为了公认的科学学说。\n> 批判理性主义的创始人波普尔是头一位提出「实证科学」与「伪科学」的分辨标准具有所谓「分界问题」的人，他宣称「可证伪性」是分辨科学与伪科学的终极标准，并将弗洛伊德的精神分析作为伪科学的例子。\n> 但现实世界不是非黑即白的，之前就说过，伪科学与科学通常是相伴而行的，完整的科学史显示，许多对科学作出了重大贡献的杰出科学家同时也有意或者无意参与了大量的伪科学活动（想想牛的一比的牛顿爵士晚年）。\n> \n> 所以说科学的内核是社会共享的，理论欲成为标准的科学成果需要科学共同体的严格审核，杰出科学家的各种研究也并非都能成为科学知识体系的一部分，科学权威不能成为科学与伪科学划界的标准。\n> 真正的科学需要同时具有：\n> \n> *   重复性：不同的人在同样的环境和条件下必须能够再现同样的结果\n> *   可证伪性：可被观察到并且证明是错误的性质\n\n其实，人类的历史是一段发展的历史，近100年的时间里面，我们甚至可以说推翻了过去100万年内形成的90%以上的『常识』，产生的信息量超过了有人类以来的总和。所以我可以断定，在未来的某一天，伟大的人类会将我们现在掌握的『常识』再一次推翻90%以上。\n所以除非**时间停滞，将四维空间中时间的坐标移去**。在某一个特定的时间节点去看，才可以断然确定，这是伪科学。\n举例来说，当年马克思断定资本主义一定会产生垄断，发展为帝国主义，然后走向灭亡，而劳动是生产中唯一有价值的部分。当年我们觉得这是无比正确的科学观点，然而现在呢？随着《反垄断法》的出台，大小政府的辩论，公司结构的自我调整，市场的优胜劣汰，全球范围内已经形成了一个经济社会。并且这一伟大的成就让我们可以专注于个人的兴趣和专长，而不必担心任何生活必需品的短缺。\n\n所以，现在我已觉得单单将这些概念列举出来是无法很好的回答这个问题的。既然都是『X科学』，就应该先搞清楚什么是『科学』。\n虽然经历了千年发展，但是艺术却不是科学。因为一幅画、一段旋律无法让所有人都产生共鸣，感到美的存在。\n科学必须严谨，在同一条件下，不能够得出不同的结果。所以其实科学是一种思考方式，坚信这个世界有着某种规律，所谓科学就是找到这个规律，并搞清楚它发生的前因后果和相关联系。\n物理、化学、生物、建筑、结构这些无一不是在寻找自然的规律，并且可以让我们人类加以利用，所以它们是科学。\n从这个概念引申开来说，其实数学也不是科学，因为数学只是我们人类发明的一门工具，用以帮助我们更好的探索这个世界的规律。就像牛顿爵士发明了微积分才解开物质引力规律。\n\n然后我们再回到公元前亚里士多德的时代，他的理论在当时无疑是非常之科学的，既有实验又有论证，还可以很好的被利用和实践在生活中。\n就像《三体》中著名的那个推理，盒子里的人掌握的规则就仅仅是盒子里的规则，当他们有一天走出了盒子，就会发现盒子外存在一种完全不同的规则。但是用不着慌张，我们再找就行了，因为科学精神就是这么一种寻找世界真理的态度。靠着它，我们发现了经典物理，然后又发现了截然不同的量子物理。"
		},
		{
			"post_id": 9,
			"title": "「幸存者偏差」中关于二战飞机的例子，前后解释有些矛盾，是怎么回事？",
			"date_published": 1499238721.248,
			"body": "『本文正在施工』\n\n```\n作者：怡通\n链接：https://www.zhihu.com/question/21949175/answer/19970975\n```\n\n我们来看这篇 1943 年的论文吧。\n\n论文背景是，二战时，从战火中返航的飞机的伤痕呈现某种规律，有的部位中弹多，有的部位中弹少。为了提高飞机的防御力，直觉上似乎应该在弹孔密集处加强装甲。\n\n不过这位专家说：到底哪里最需要防护，直觉说了不算，我算给你看。\n\n![](img/post9/img1.jpg)\n\n* * *\n\n（Cameron Moll 画的示意图）\n\n这位专家是匈牙利裔犹太人，后来去美国做研究，二战前后达到个人学术成就的顶峰。\n\n此时你是否想起了一头姓冯名诺依曼的超级神犇？\n\n不过这里说的不是冯·诺依曼，而是**亚伯拉罕·沃尔德（Abraham Wald）**。\n![](img/post9/img2.jpg)\n\n沃尔德的名气比冯·诺依曼小一万倍，但在当时神牛辈出的学术圈也不是无名之辈。\n\n诺贝尔奖经济学奖得主，弗里德曼，为美国海军研究炸弹试验方案时，卡在一个统计学问题上。弗里德曼求助犹太老乡沃尔德，问题迎刃而解。战后沃尔德拓展了这个问题，写成专著《序列分析》。\n\n**弗里德曼把这段经历写入了自传，称赞道：「他（沃尔德）是一位杰出的统计学家，为统计学做出了创造性的贡献。」**\n\n（沃尔德台词：老乡见老乡，风头全抢光！快把话题转回我的论文）\n\n========\n\n沃尔德的论文题目是：\n**A Method of Estimating Plane Vulnerability Based on Damage of Survivors**\n**一种根据幸存飞机损伤情况推测飞机要害部位的方法。**\n\n![](img/post9/img3.jpg)\n\n上图是正文第一页。开篇是定义参数，推出引理，列出数值分析方法等等。\n\n铺垫了五十五页之后，沃尔德开始代入数据，演示如何计算飞机要害处。他用了一组虚构的数据：\n\n400 架飞机参与轰炸行动，返回 359 架。在返回的这些飞机中， 240 架毫发无损， 68 架中弹 1 发，29 架中弹 2 发， 12 架中弹 3 发， 10 架中弹 4 发。另外还已知飞机的各部位面积及各部位中弹次数，其中**发动机部位的弹孔分布最稀疏**。**但对于没回来的飞机是怎么死的一无所知。**\n\n**我的第一反应是：这道应用题是不是条件不足？**\n**只了解返航的飞机的情况，完全不知道坠毁的飞机哪里中了弹，没有对照，怎么知道哪个部位是要害呢？**\n\n沃尔德毕竟是吃这碗饭的，前五十五页也不是白写的。推算结论如下表：\n![](img/post9/img4.jpg)\n\n大意是说，根据这组虚构的数据，得出结论，发动机是最要命的地方，被击中一弹，就有 39% 的概率坠毁。\n\n**弹孔最稀疏处，恰恰是要害处，因为没怎么被击中要害的飞机才更有机会返航、进入统计样本。这就是「幸存者偏差」，更多描述请阅读 [程毅南关于](http://www.zhihu.com/question/21949175/answer/19938682)****[「](http://www.zhihu.com/question/21949175/answer/19938682)****[幸存者偏差」的答案](http://www.zhihu.com/question/21949175/answer/19938682) 。**\n\n接下来，沃尔德马上推出升级版算法：只要知道返回的飞机何处中了何种子弹，我就可以算出飞机不同部位被不同武器击中之后的坠毁概率！**此处使用的数据仍是虚构的，只为演示算法，结论如下：**\n![](img/post9/img5.jpg)\n\n沃尔德根据虚构的数据算出：\n1\\. 飞机最怕被20毫米机炮击中发动机，挂掉的概率是 53.4% ；\n2\\. 第二危险的是被7.9毫米机枪击中驾驶舱，有 19.4% 的概率坠毁；\n3\\. 综合来说，发动机是最致命的地方；\n4\\. 综合来说，被20毫米机炮击中掉血最多。\n\n**或许有人会说：我用膝盖都能想到发动机和驾驶舱是要害，还要你算给我看？更不用说你的数据还是虚构的了。**\n\n不过我的想法是，**设计飞机的人不会没有考虑到发动机和驾驶舱的重要性，或许已经给予了充分甚至过分的保护了呢？加厚装甲的代价是损失飞行灵活性，不是想加就加的。**\n\n所以在这点上我同意 @欲三更 所说的，凭常识是不足以判断飞机哪里需要加固的。有了计算方法，我们才有办法知道对要害的保护有没有矫枉过正，有没有暴露出新的要害。\n\n========\n\n沃尔德的论文链接：[http://cna.org/sites/default/files/research/0204320000.pdf](http://cna.org/sites/default/files/research/0204320000.pdf)\n今人对此文的分析：[http://people.ucsc.edu/~msmangel/Wald.pdf](http://people.ucsc.edu/~msmangel/Wald.pdf)\n\n这篇 1943 年的论文的实用价值在于：战场上我们很难找回坠毁的飞机，因而没有办法像 [CSI](https://zh.wikipedia.org/wiki/CSI犯罪現場) 那样去给飞机验尸，但是不要紧，只要分析返回的飞机，使用统计学方法，就可以推算出那些挂掉的飞机的死因，以助改进飞机的设计。\n\n总之，故事确有真实源头，不过故事中没有提到的是，飞机的要害部位与弹孔分布的关系，不是光凭空口推理的，而是一位优秀的统计学家以平生所学，花了近百页的篇幅，列了一百多个式子推导出来的。\n\n沃尔德的结局令人惋惜。1950 年，四十八岁的他受印度政府邀请，携妻前往印度讲学。不料，航行至印度的尼尔吉里丘陵时，飞机坠毁，沃尔德和妻子都未能成为幸存者。"
		},
		{
			"post_id": 4,
			"title": "模因、模因论、meme和梗",
			"date_published": 1497082906.916,
			"body": "**模因**（Meme）也称为**米姆**、**弥**、**弥因**、**弥母**、**迷因**、**文化基因**等等，是文化资讯传承时的单位。意思是一个想法，行为或风格从一个人到另一个人的文化传播过程。\n\n这个词是在1976年，由**理查·道金斯**在《**自私的基因**》一书中所创造，将文化传承的过程，以生物学中的演化繁殖规则来作类比，有共同先祖、随著环境改变进化、优胜劣汰等等。模因包含甚广包括宗教、谣言、新闻、知识、观念、习惯、习俗甚至口号、谚语、用语、用字、笑话。\n\n* * *\n\n这里有一个视频简单的描述了模因:[链接](https://www.bilibili.com/video/av11222602/ \"【游戏众生相】模因：表情包背后的迷思\")\n\nmeme\n\n未完待续(~~一直~~最近很懒)"
		},
		{
			"post_id": 10000,
			"title": " 自由氧协议（FO license）",
			"date_published": 1461215664,
			"body": "> **The only solution to the problem of intellectual monopoly is to get rid of it entirely.** --by [David K. Levine](mailto:20david@dklevine.com)\n\n1.  任何带上自由氧协议的知识都是自由的，每一份带有自由氧协议的知识都是一份自由氧。\n2.  任何形式的知识都可以印上自由氧协议，包括但不限于：文字、音乐、食谱、视频、代码、图片、绘画等。\n3.  任何人都可以获取自由氧，不限年龄、性别、职业、人种、地区、国籍等，没有任何限制。\n4.  获取了自由氧的人，可以以任意方式处理自由氧，包括但不限于：收藏、复制、添加、修改、截取、翻译、转换、传播、交易等。\n5.  对知识最大的尊重就是传播它，对自由氧最大的尊重也是一样。但对自由氧作者最大的尊重是传播作者的名字，如果你尊重自由氧，也尊重自由氧的作者，请在传播自由氧的同时带上作者的名字。\n6.  尊重什么，不尊重什么，是个人自由，你可以不尊重任何东西。\n7.  自由氧的作者保留辱骂的权利，但绝不会动用不正义的力量，例如个人暴力和政府暴力等。\n\n更多：[自由氧说明书](http://www.jianshu.com/p/779c610f92eb)\n\n本文遵循[自由氧协议](http://www.jianshu.com/p/c52437052f8e)"
		},
		{
			"post_id": 10001,
			"title": "自由氧说明书--纪念盗版独立日",
			"date_published": 1464660000,
			"body": "![](img/post10001/img1.jpg)\n\n###### 人，经济与国家.jpg\n\n* * *\n\n文：[夏虫](http://www.jianshu.com/u/cc24e6d293d1)\n\n自由氧这一概念，是我在阅读罗斯巴德的《人，经济与国家》时，受到的启发。在书中，罗斯巴德多次提到，知识如空气，实乃人类之福利。比如：\n\n> 知识的重要特点是，人类只需要一次学习，之后不需重复。它会被人类记录下来，不需要再被产生。从此作为一种无限使用，永不消耗，不需要被节省的资源伴随着文明。知识就像空气一样，是人类生存的重要福利。[1]\n\n这里我把recipe译作知识，我认为很贴切。再比如：\n\n> 什么东西才能称之为财产？很显然，只有稀缺之物才是财产。那些开放向全人类的福利，不能成为人类行为的对象，也不能被一个人拥有，更不能称之为财产。在自由的市场中，没有人能声称拥有空气。[2]\n\n我在5月31日写下自由氧的说明书，因为这一天也是盗版独立日[3]，值得纪念。我码出[自由氧协议](http://www.jianshu.com/p/c52437052f8e)只是为了表达心中一句话：[滚蛋吧！知识产权！](http://www.jianshu.com/p/f0f0cd9ce797)\n\n![](img/post10001/img2.jpg)\n\n###### 海盗湾.jpg\n\n知识不能被物化，自古以来也从未被物化。人们不能像摘下一个苹果一样，去摘下知识，更不能像丢弃一个苹果一样，丢弃知识。知识温柔如氧气，弥漫在你我周围，沁入耳鼻，滋润思想。知识也凶猛似爆炸，每一个碎片都深插在脑海神经，当爆炸来临，你没有选择，也无法抛弃。\n\n一个人出生睁开第一眼看到这个世界，手术灯在爆炸，房屋在爆炸，人也在爆炸，长大了，花草在爆炸，书籍在爆炸，汽车也在爆炸。所有的信息碎片都会毫无理由的飞向经过之人，再敏捷的人也无法闪避，再强大的人也无法抗拒。引爆新知识的人很牛，但被炸到的人却很无辜。在途经每一个爆炸之前，没人会知道爆炸会留下什么样的碎片，但当爆炸之后却没人能将颅中碎片清理干净，如果每一片碎片都带有引爆者的钢印，如果每一次爆炸都是新的思想禁锢，那知识的流淌与穿越将会从享受变成痛苦。\n\n如果强行将知识物化，那么我们每一个人都将出生就带有原罪。产权必有所属，而我们从睁眼开始就在偷窃，实实在在的偷窃，未经许可，拿走了不属于自己的东西。所以我视知识产权为宗教，众生皆有原罪，并信奉一个不存在的东西。幸运的是，知识不能产权化，知识不具有排他性和稀缺性，这句话被聪明的人强调过一万次，但还是值得重复更多次。很多人都爱说，盗版就是抢劫，抄袭就是偷窃，但是盗版、抄袭、山寨从来都不是偷窃，世上会有没有遗失物的偷窃吗？说自己的知识被偷窃了的人，就像拿着自己手机打电话报警，说自己手机被偷了的人一样荒诞可笑。世人可以给盗版者、抄袭者、山寨者栽上任何罪名，但绝不可能是偷窃。其实不妨说得更颠覆一点，盗版者、抄袭者、山寨者在我眼里都如玄奘一般，筛选有价值的知识，传播着有价值的信息，埋头于有价值的改进。\n\n曾经我一直以为，“没有XXX，就没有新中国”，是最强洗脑。后来发现我错了，一路过来，途经历史政治马哲毛概，我们才记住这一句。当我发现洗脑界的最强王者，“没有知识产权，就没有创新”，这一句彪悍到不需要任何解释。此处的“洗脑”，是个中性词，因为讨论的不是道的层面，而是术的层面。从术的层面，后者不知道高到哪里去了，在高喊口号的人里，几乎无人知晓知识产权的历史与发展，也从来不会有人告诉你这句口号的道理。总之，大家就是信了，毫不质疑，更加不允许别人质疑。甚至有些人在盗版网站高呼，“我用盗版，但是我支持打击盗版，支持知识产权”，一边享受着世俗的快乐，一边祈求宗教的安慰，吃一块肉，扇自己一巴掌，念两句经，继续埋头吃肉，滑稽者不在少数。\n\n当然，事实证明人们也仅仅记住了口号。《社会神经学》刊登了一篇澳大利亚莫纳什大学心理学家罗伯特•埃雷斯（Robert Eres）等人的[论文](http://www.ncbi.nlm.nih.gov/pubmed/27156807)，他们的最新研究成果是：大脑不承认那些无形的信息是一种财产。无论是人的行为，还是潜意识，都没有知识产权的一席之地。不仅生命科学，各流派的社会科学也找不到对知识产权的支持。往左走，马克思主义经济学认为一切科学技术、文艺作品都是全人类劳动成果积累的结果，其一切发展都属于全人类，而不属于任何个人、团体或是法人，并且与知识产权有关的内容都属于一次性劳动，马哲认为一次性劳动只能一次性收益，重复劳动才能重复收益。往右走，知识产权严重危害言论自由和人身自由，是真自由主义眼中的垃圾，暴力的本质危害着市场，和真实产权有着激烈冲突，资本主义更视知识产权为市场毒瘤。\n\n反对知识产权不需要太多的理由，因为它本身就不是产权。但恰恰它又有无数的理由。每一条理由都可以叫知识产权滚蛋一万遍。首先，知识产权是欺凌于真实产权之上的，暴力会闯入私地掠夺私产，仅仅因为你的私产上有着别人不想让你印的字符。第二，知识产权限制自由意志，在此“宗教”之下，你控制自己的喉咙唱首歌，控制自己的手写字，也是容易违反教条的。第三，知识产权的历史肮脏黑暗，它不是来自于某个智者哲人，而是来及强权、皇室、政府，从诞生起，就如过街老鼠，杀人瘟疫一般遭人唾弃，直到近代政府越做越大，才逐渐洗白，所以知识产权从来没有严密的逻辑，更不需要任何解释，散发着蛮横的恶臭。暴力已经有足够多的理由来恐吓我们，色情、赌博、政治及各种政治不正确都会成为理由，这个时代还加入了知识产权，我们不需要给暴力更多的理由来限制我们。\n\n其实一直都有很多与知识产权作斗争的人，这些人都是绝顶聪明的。我需要一个符合我的想法的协议，但我翻遍了各种协议，即使宽松的也要求非商业。这也不符合我的想法，自由氧是支持作品商业化的。一个开源免费的作品，如果经过改动有人愿意付费使用，这绝对是非常具有价值的改动，即使只改动了一个字符，我也认为非常伟大。极端的，一个字符也没改变，还能获得收益，那我觉得更加了不起。不应该禁锢这些有价值的改动和传播。\n\n自由氧就是让知识解脱，也是让我自己自由，不再束缚在知识产权的宗教之内。\n\n本文遵循[自由氧协议](http://www.jianshu.com/p/c52437052f8e)\n\n### 注释\n\n1.  The distinguishing feature of a recipe is that, once learned, it generally does not have to be learned again. It can be noted and remembered. Remembered, it no longer has to be produced; it remains with the actor as an unlimited factor of production that never wears out or needs to be economized by human action. It becomes a general condition of human welfare in the same way as air.\n    --Chapter 1 Fundamentals of Fuman Action-3.Further Implications:The Means\n    _Man,Economy,and State with Power and Market_, Murray N.Rothbard\n\n2.  What goods become property? Obviously, only scarce means are property. General conditions of welfare, since they are abundant to all, are not the objects of any action, and therefore cannot be owned or become property. On the free market, it is nonsense to say that someone “owns” the air. ...Only if a good is scarce is it necessary for anyone to obtain it, or ownership of it, for his use. The only way that a man could assume ownership of the air is to use violence to enforce this claim. Such action could not occur on the unhampered market.\n    --Chapter 2 Direct Exchange,2.Types of Interpersonal Action:Voluntary Exchange and the Contractual Society\n    _Man,Economy,and State with Power and Market_, Murray N.Rothbard\n\n3.  2006年5月31日，瑞典警方突袭了“海盗湾”，查封了海盗湾以及所有服务器，包括路由器、交换机、传真机等，装了满满三车。海盗湾主创人员弗里德里克、高特弗里德等人被带至警局问话，直到晚上才被释放。事发当天，美国电影协会发表题为《瑞典当局击沉海盗船》的新闻稿，称这次行动为版权保护事业的一座“里程碑”。美国电影协会主席丹·格里克曼说：“今天发生在瑞典的这次行动，向全球各地的盗版者们提了个醒：这个世界没有可以保护你们的避风港。”但美国电影协会高兴得太早了。三天后，海盗湾重新上线，服务器被转移至荷兰。网站首页的海盗船标志旁边，出现了一行字母——“HOLLYWOOD”（好莱坞）。海盗船向这行字母猛烈开火，将它打得七零八落。为纪念这次事件，海盗湾把每年的5月31日定为“盗版独立日”（Pirate Independence Day）。"
		},
		{
			"post_id": 1,
			"title": "gledos的记事本",
			"date_published": 944818247,
			"body": "把目录清理了,重新来zeronet,然后遇到了一些bug.......\n\n啊,痛苦啊\n\n然后修好了,还把字体和一些的文字修改了"
		},
		{
			"post_id": 3,
			"title": "互联网之子 : 亚伦·斯沃茨的故事 The Internet's Own Boy : The Story of Aaron Swartz",
			"date_published": 1496729693.06,
			"body": "> **亚伦·斯沃茨**（英语:**Aaron Hillel Swartz;**1986年11月8日－2013年1月11日），美籍软件工程师、作家、政治组织者、互联网活动家、维基百科人。\n> \n> 斯沃茨参与了网摘格式 [RSS](https://zh.wikipedia.org/wiki/RSS \"RSS\")、文档格式 [Markdown](https://zh.wikipedia.org/wiki/Markdown \"Markdown\")、[创作共用](https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8 \"创作共用\")、网站框架 [web.py](https://zh.wikipedia.org/w/index.php?title=Web.py&action=edit&redlink=1 \"Web.py（页面不存在）\")、社会化新闻站点[Reddit](https://zh.wikipedia.org/wiki/Reddit \"Reddit\")（后因于其自己创办的Infogami之合并使之成为合伙人之一）的开发、发展。协助创办了[渐进社会变革活动委员会](https://zh.wikipedia.org/w/index.php?title=Progressive_Change_Campaign_Committee&action=edit&redlink=1 \"Progressive Change Campaign Committee（页面不存在）\")斯沃茨一直关注互联网自由及网路资讯流通等议题，并创办了因反对SOPA而知名的组职“求进会”（Demand Progress）。\n> \n> 2011年7月19日他被指控自[JSTOR](https://zh.wikipedia.org/wiki/JSTOR \"JSTOR\")非法下载大量学术期刊文章，并遭联邦政府起诉被捕，面临百万美元罚款和最高35年徒刑，因而获得主流媒体关注。2013年1月11日早晨，他被发现在[纽约市](https://zh.wikipedia.org/wiki/%E7%B4%90%E7%B4%84%E5%B8%82 \"纽约市\")[布鲁克林区](https://zh.wikipedia.org/wiki/%E5%B8%83%E9%AD%AF%E5%85%8B%E6%9E%97%E5%8D%80 \"布鲁克林区\")的公寓中上吊自杀身亡。\n> \n> 来自于[亚伦·斯沃茨 - 维基百科](https://zh.wikipedia.org/wiki/亚伦·斯沃茨)\n\n* * *"
		},
		{
			"post_id": 2,
			"title": "Markdown语法说明中文版",
			"date_published": 1496570073.971,
			"body": "`本文使用谷歌翻译进行繁体转简体,可能会有不准确的词语,欢迎反馈`\n\n![Markdown](img/post2/img1.png)\n\n* * *\n\n*   [概述](#overview)\n    *   [哲学](#philosophy)\n    *   [行内HTML](#html)\n    *   [特殊字元自动转换](#autoescape)\n*   [区块元素](#block)\n    *   [段落和换行](#p)\n    *   [标题](#header)\n    *   [区块引言](#blockquote)\n    *   [清单](#list)\n    *   [程式码区块](#precode)\n    *   [分隔线](#hr)\n*   [区段元素](#span)\n    *   [连结](#link)\n    *   [强调](#em)\n    *   [程式码](#code)\n    *   [图片](#img)\n*   [其它](#misc)\n    *   [跳脱字元](#backslash)\n    *   [自动连结](#autolink)\n*   [感谢](#acknowledgement)\n\n**注意：**这份文件是用Markdown 写的，你可以[看看它的原始档](https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md) 。\n\n* * *\n\n## 概述\n\n### 哲学\n\nMarkdown 的目标是实现「易读易写」。\n\n不过最需要强调的便是它的可读性。一份使用Markdown 格式撰写的文件应该可以直接以纯文字发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有text-to-HTML 格式的影响，包括[Setext](http://docutils.sourceforge.net/mirror/setext.html)、[atx](http://www.aaronsw.com/2002/atx/)、[Textile](http://textism.com/tools/textile/)、[reStructuredText](http://docutils.sourceforge.net/rst.html)、[Grutatext](http://www.triptico.com/software/grutatxt.html)和[EtText](http://ettext.taint.org/doc/)，然而最大灵感来源其实是纯文字的电子邮件格式。\n\n因此Markdown 的语法全由标点符号所组成，并经过严谨慎选，是为了让它们看起来就像所要表达的意思。像是在文字两旁加上星号，看起来就像_强调_。Markdown 的清单看起来，嗯，就是清单。假如你有使用过电子邮件，区块引言看起来就真的像是引用一段文字。\n\n### 行内HTML\n\nMarkdown 的语法有个主要的目的：用来作为一种网路内容的_写作_用语言。\n\nMarkdown 不是要来取代HTML，甚至也没有要和它相似，它的语法种类不多，只和HTML 的一部分有关系，重点_不是_要创造一种更容易写作HTML 文件的语法，我认为HTML 已经很容易写了，Markdown 的重点在于，它能让文件更容易阅读、编写。HTML 是一种_发布_的格式，Markdown 是一种_编写_的格式，因此，Markdown 的格式语法只涵盖纯文字可以涵盖的范围。\n\n不在Markdown 涵盖范围之外的标签，都可以直接在文件里面用HTML 撰写。不需要额外标注这是HTML 或是Markdown；只要直接加标签就可以了。\n\n只有区块元素──比如`<div>`、`<table>`、`<pre>`、`<p>` 等标签，必须在前后加上空行，以利与内容区隔。而且这些（元素）的开始与结尾标签，不可以用tab 或是空白来缩排。Markdown 的产生器有智慧型判断，可以避免在区块标签前后加上没有必要的`<p>` 标签。\n\n举例来说，在Markdown 文件里加上一段HTML 表格：\n\n```\nThis is a regular paragraph.\n\n<table>\n    <tr>\n        <td>Foo</td>\n    </tr>\n</table>\n\nThis is another regular paragraph.\n```\n\n请注意，Markdown 语法在HTML 区块标签中将不会被进行处理。例如，你无法在HTML 区块内使用Markdown 形式的`*强调*`。\n\nHTML 的区段标签如`<span>`、`<cite>`、`<del>` 则不受限制，可以在Markdown 的段落、清单或是标题里任意使用。依照个人习惯，甚至可以不用Markdown 格式，而采用HTML 标签来格式化。举例说明：如果比较喜欢HTML 的`<a>` 或`<img>` 标签，可以直接使用这些标签，而不用Markdown 提供的连结或是影像标示语法。\n\nHTML 区段标签和区块标签不同，在区段标签的范围内， Markdown 的语法是有效的。\n\n### 特殊字元自动转换\n\n在HTML 文件中，有两个字元需要特殊处理： `<` 和`&` 。`<` 符号用于起始标签，`&` 符号则用于标记HTML 实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是`<` 和`&`。\n\n`&` 符号其实很容易让写作网路文件的人感到困扰，如果你要打「AT&T」 ，你必须要写成「`AT&T`」 ，还得转换网址内的`&` 符号，如果你要连结到：\n\n```\nhttp://images.google.com/images?num=30&q=larry+bird\n```\n\n你必须要把网址转成：\n\n```\nhttp://images.google.com/images?num=30&q=larry+bird\n```\n\n才能放到连结标签的`href` 属性里。不用说也知道这很容易忘记，这也可能是HTML 标准检查所检查到的错误中，数量最多的。\n\nMarkdown 允许你直接使用这些符号，但是你要小心跳脱字元的使用，如果你是在HTML 实体中使用`&` 符号的话，它不会被转换，而在其它情形下，它则会被转换成`&`。所以你如果要在文件中插入一个著作权的符号，你可以这样写：\n\n```\n©\n```\n\nMarkdown 将不会对这段文字做修改，但是如果你这样写：\n\n```\nAT&T\n```\n\nMarkdown 就会将它转为：\n\n```\nAT&T\n```\n\n类似的状况也会发生在`<` 符号上，因为Markdown 支援[行内HTML](#html) ，如果你是使用`<` 符号作为HTML 标签使用，那Markdown 也不会对它做任何转换，但是如果你是写：\n\n```\n4 < 5\n```\n\nMarkdown 将会把它转换为：\n\n```\n4 < 5\n```\n\n不过需要注意的是，code 范围内，不论是行内还是区块， `<` 和`&` 两个符号都_一定_会被转换成HTML 实体，这项特性让你可以很容易地用Markdown写HTML code （和HTML 相对而言， HTML 语法中，你要把所有的`<` 和`&` 都转换为HTML 实体，才能在HTML 文件里面写出HTML code。）\n\n* * *\n\n## 区块元素\n\n### 段落和换行\n\n一个段落是由一个以上相连接的行句组成，而一个以上的空行则会切分出不同的段落（空行的定义是显示上看起来像是空行，便会被视为空行。比方说，若某一行只包含空白和tab，则该行也会被视为空行），一般的段落不需要用空白或断行缩排。\n\n「一个以上相连接的行句组成」这句话其实暗示了Markdown 允许段落内的强迫断行，这个特性和其他大部分的text-to-HTML 格式不一样（包括MovableType 的「Convert Line Breaks」选项），其它的格式会把每个断行都转成`<br />` 标签。\n\n如果你_真的_想要插入`<br />` 标签的话，在行尾加上两个以上的空白，然后按enter。\n\n是的，这确实需要花比较多功夫来插入`<br />` ，但是「每个换行都转换为`<br />`」的方法在Markdown 中并不适合， Markdown 中email 式的[区块引言](#blockquote) 和多段落的[清单](#list) 在使用换行来排版的时候，不但更好用，还更好阅读。\n\n### 标题\n\nMarkdown 支援两种标题的语法，[Setext](http://docutils.sourceforge.net/mirror/setext.html) 和[atx](http://www.aaronsw.com/2002/atx/) 形式。\n\nSetext 形式是用底线的形式，利用`=` （最高阶标题）和`-` （第二阶标题），例如：\n\n```\nThis is an H1\n=============\n\nThis is an H2\n-------------\n```\n\n任何数量的`=` 和`-` 都可以有效果。\n\nAtx 形式则是在行首插入1 到6 个`#` ，对应到标题1 到6 阶，例如：\n\n```\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n```\n\n你可以选择性地「关闭」atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上`#`，而行尾的`#` 数量也不用和开头一样（行首的井字数量决定标题的阶数）：\n\n```\n# This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n```\n\n### Blockquotes\n\nMarkdown 使用email 形式的区块引言，如果你很熟悉如何在email 信件中引言，你就知道怎么在Markdown 文件中建立一个区块引言，那会看起来像是你强迫断行，然后在每行的最前面加上`>` ：\n\n```\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n> \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n```\n\nMarkdown 也允许你只在整个段落的第一行最前面加上`>` ：\n\n```\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\nid sem consectetuer libero luctus adipiscing.\n```\n\n区块引言可以有阶层（例如：引言内的引言），只要根据层数加上不同数量的`>` ：\n\n```\n> This is the first level of quoting.\n>\n> > This is nested blockquote.\n>\n> Back to the first level.\n```\n\n引言的区块内也可以使用其他的Markdown 语法，包括标题、清单、程式码区块等：\n\n```\n> ## This is a header.\n> \n> 1\\. This is the first list item.\n> 2\\. This is the second list item.\n> \n> Here's some example code:\n> \n> return shell_exec(\"echo $input | $markdown_script\");\n```\n\n任何标准的文字编辑器都能简单地建立email 样式的引言，例如BBEdit ，你可以选取文字后然后从选单中选择_增加引言阶层_。\n\n### 清单\n\nMarkdown 支援有序清单和无序清单。\n\n无序清单使用星号、加号或是减号作为清单标记：\n\n```\n* Red\n* Green\n* Blue\n```\n\n等同于：\n\n```\n+ Red\n+ Green\n+ Blue\n```\n\n也等同于：\n\n```\n- Red\n- Green\n- Blue\n```\n\n有序清单则使用数字接着一个英文句点：\n\n```\n1\\. Bird\n2\\. McHale\n3\\. Parish\n```\n\n很重要的一点是，你在清单标记上使用的数字并不会影响输出的HTML 结果，上面的清单所产生的HTML 标记为：\n\n```\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n```\n\n如果你的清单标记写成：\n\n```\n1\\. Bird\n1\\. McHale\n1\\. Parish\n```\n\n或什至是：\n\n```\n3\\. Bird\n1\\. McHale\n8\\. Parish\n```\n\n你都会得到完全相同的HTML 输出。重点在于，你可以让Markdown 文件的清单数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。\n\n如果你使用懒惰的写法，建议第一个项目最好还是从1\\. 开始，因为Markdown 未来可能会支援有序清单的start 属性。\n\n清单项目标记通常是放在最左边，但是其实也可以缩排，最多三个空白，项目标记后面则一定要接着至少一个空白或tab。\n\n要让清单看起来更漂亮，你可以把内容用固定的缩排整理好：\n\n```\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\n    viverra nec, fringilla in, laoreet vitae, risus.\n* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n    Suspendisse id sem consectetuer libero luctus adipiscing.\n```\n\n但是如果你很懒，那也不一定需要：\n\n```\n* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\nAliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.\n* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\nSuspendisse id sem consectetuer libero luctus adipiscing.\n```\n\n如果清单项目间用空行分开， Markdown 会把项目的内容在输出时用`<p>`\n标签包起来，举例来说：\n\n```\n* Bird\n* Magic\n```\n\n会被转换为：\n\n```\n<ul>\n<li>Bird</li>\n<li>Magic</li>\n</ul>\n```\n\n但是这个：\n\n```\n* Bird\n\n* Magic\n```\n\n会被转换为：\n\n```\n<ul>\n<li><p>Bird</p></li>\n<li><p>Magic</p></li>\n</ul>\n```\n\n清单项目可以包含多个段落，每个项目下的段落都必须缩排4 个空白或是一个tab ：\n\n```\n1\\. This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.\n\n2\\. Suspendisse id sem consectetuer libero luctus adipiscing.\n```\n\n如果你每行都有缩排，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：\n\n```\n* This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You're\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.\n\n* Another item in the same list.\n```\n\n如果要在清单项目内放进引言，那`>` 就需要缩排：\n\n```\n* A list item with a blockquote:\n\n    > This is a blockquote\n    > inside a list item.\n```\n\n如果要放程式码区块的话，该区块就需要缩排_两次_，也就是8 个空白或是两个tab：\n\n```\n* A list item with a code block:\n\n        <code goes here>\n```\n\n当然，项目清单很可能会不小心产生，像是下面这样的写法：\n\n```\n1986\\. What a great season.\n```\n\n换句话说，也就是在行首出现_数字-句点-空白_，要避免这样的状况，你可以在句点前面加上反斜线。\n\n```\n1986\\. What a great season.\n```\n\n### 程式码区块\n\n和程式相关的写作或是标签语言原始码通常会有已经排版好的程式码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown会用`<pre>` 和`<code>` 标签来把程式码区块包起来。\n\n要在Markdown 中建立程式码区块很简单，只要简单地缩排4 个空白或是1 个tab 就可以，例如，下面的输入：\n\n```\nThis is a normal paragraph:\n\n    This is a code block.\n```\n\nMarkdown 会转换成：\n\n```\n<p>This is a normal paragraph:</p>\n\n<pre><code>This is a code block.\n</code></pre>\n```\n\n这个每行一阶的缩排（4 个空白或是1 个tab），都会被移除，例如：\n\n```\nHere is an example of AppleScript:\n\n    tell application \"Foo\"\n        beep\n    end tell\n```\n\n会被转换为：\n\n```\n<p>Here is an example of AppleScript:</p>\n\n<pre><code>tell application \"Foo\"\n    beep\nend tell\n</code></pre>\n```\n\n一个程式码区块会一直持续到没有缩排的那一行（或是文件结尾）。\n\n在程式码区块里面， `&` 、 `<` 和`>` 会自动转成HTML 实体，这样的方式让你非常容易使用Markdown 插入范例用的HTML 原始码，只需要复制贴上，再加上缩排就可以了，剩下的Markdown 都会帮你处理，例如：\n\n```\n    <div class=\"footer\">\n        © 2004 Foo Corporation\n    </div>\n```\n\n会被转换为：\n\n```\n<pre><code><div class=\"footer\">\n    &copy; 2004 Foo Corporation\n</div>\n</code></pre>\n```\n\n程式码区块中，一般的Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以Markdown 语法撰写Markdown 语法相关的文件。\n\n### 分隔线\n\n你可以在一行中用三个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线：\n\n```\n* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n```\n\n* * *\n\n## 区段元素\n\n### 连结\n\nMarkdown 支援两种形式的连结语法： _行内_和_参考_两种形式。\n\n不管是哪一种，连结的文字都是用[方括号] 来标记。\n\n要建立一个行内形式的连结，只要在方块括号后面马上接着括号并插入网址连结即可，如果你还想要加上连结的title 文字，只要在网址后面，用双引号把title 文字包起来即可，例如：\n\n```\nThis is [an example](http://example.com/ \"Title\") inline link.\n\n[This link](http://example.net/) has no title attribute.\n```\n\n会产生：\n\n```\n<p>This is <a href=\"http://example.com/\" title=\"Title\">\nan example</a> inline link.</p>\n\n<p><a href=\"http://example.net/\">This link</a> has no\ntitle attribute.</p>\n```\n\n如果你是要连结到同样主机的资源，你可以使用相对路径：\n\n```\nSee my [About](/about/) page for details.\n```\n\n参考形式的连结使用另外一个方括号接在连结文字的括号后面，而在第二个方括号里面要填入用以辨识连结的标签：\n\n```\nThis is [an example][id] reference-style link.\n```\n\n你也可以选择性地在两个方括号中间加上空白：\n\n```\nThis is [an example] [id] reference-style link.\n```\n\n接着，在文件的任意处，你可以把这个标签的连结内容定义出来：\n\n```\n[id]: http://example.com/ \"Optional Title Here\"\n```\n\n连结定义的形式为：\n\n*   方括号，里面输入连结的辨识用标签\n*   接着一个冒号\n*   接着一个以上的空白或tab\n*   接着连结的网址\n*   选择性地接着title 内容，可以用单引号、双引号或是括弧包着\n\n下面这三种连结的定义都是相同：\n\n```\n[foo]: http://example.com/ \"Optional Title Here\"\n[foo]: http://example.com/ 'Optional Title Here'\n[foo]: http://example.com/ (Optional Title Here)\n```\n\n**请注意：**有一个已知的问题是Markdown.pl 1.0.1 会忽略单引号包起来的连结title。\n\n连结网址也可以用方括号包起来：\n\n```\n[id]: <http://example.com/> \"Optional Title Here\"\n```\n\n你也可以把title 属性放到下一行，也可以加一些缩排，网址太长的话，这样会比较好看：\n\n```\n[id]: http://example.com/longish/path/to/resource/here\n    \"Optional Title Here\"\n```\n\n网址定义只有在产生连结的时候用到，并不会直接出现在文件之中。\n\n连结辨识标签可以有字母、数字、空白和标点符号，但是并_不_区分大小写，因此下面两个连结是一样的：\n\n```\n[link text][a]\n[link text][A]\n```\n\n_预设的连结标签_功能让你可以省略指定连结标签，这种情形下，连结标签和连结文字会视为相同，要用预设连结标签只要在连结文字后面加上一个空的方括号，如果你要让\"Google\" 连结到google.com，你可以简化成：\n\n```\n[Google][]\n```\n\n然后定义连结内容：\n\n```\n[Google]: http://google.com/\n```\n\n由于连结文字可能包含空白，所以这种简化的标签内也可以包含多个文字：\n\n```\nVisit [Daring Fireball][] for more information.\n```\n\n然后接着定义连结：\n\n```\n[Daring Fireball]: http://daringfireball.net/\n```\n\n连结的定义可以放在文件中的任何一个地方，我比较偏好直接放在连结出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。\n\n下面是一个参考式连结的范例：\n\n```\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/ \"Google\"\n  [2]: http://search.yahoo.com/ \"Yahoo Search\"\n  [3]: http://search.msn.com/ \"MSN Search\"\n```\n\n如果改成用连结名称的方式写：\n\n```\nI get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/ \"Google\"\n  [yahoo]: http://search.yahoo.com/ \"Yahoo Search\"\n  [msn]: http://search.msn.com/ \"MSN Search\"\n```\n\n上面两种写法都会产生下面的HTML。\n\n```\n<p>I get 10 times more traffic from <a href=\"http://google.com/\"\ntitle=\"Google\">Google</a> than from\n<a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a>\nor <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p>\n```\n\n下面是用行内形式写的同样一段内容的Markdown 文件，提供作为比较之用：\n\n```\nI get 10 times more traffic from [Google](http://google.com/ \"Google\")\nthan from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or\n[MSN](http://search.msn.com/ \"MSN Search\").\n```\n\n参考式的连结其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有81 个字元，但是用行内形式的连结却会增加到176个字元，如果是用纯HTML 格式来写，会有234 个字元，在HTML 格式中，标签比文字还要多。\n\n使用Markdown 的参考式连结，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的资讯移到段落文字之外，你就可以增加连结而不让文章的阅读感觉被打断。\n\n### 强调\n\nMarkdown 使用星号（`*`）和底线（`_`）作为标记强调字词的符号，被`*` 或`_` 包围的字词会被转成用`<em>` 标签包围，用两个`*` 或`_` 包起来的话，则会被转成`<strong>`，例如：\n\n```\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n```\n\n会转成：\n\n```\n<em>single asterisks</em>\n\n<em>single underscores</em>\n\n<strong>double asterisks</strong>\n\n<strong>double underscores</strong>\n```\n\n你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。\n\n强调也可以直接插在文字中间：\n\n```\nun*frigging*believable\n```\n\n但是如果你的`*` 和`_` 两边都有空白的话，它们就只会被当成普通的符号。\n\n如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：\n\n```\n\\*this text is surrounded by literal asterisks\\*\n```\n\n### 程式码\n\n如果要标记一小段行内程式码，你可以用反引号把它包起来（``` ），例如：\n\n```\nUse the `printf()` function.\n```\n\n会产生：\n\n```\n<p>Use the <code>printf()</code> function.</p>\n```\n\n如果要在程式码区段内插入反引号，你可以用多个反引号来开启和结束程式码区段：\n\n```\n``There is a literal backtick (`) here.``\n```\n\n这段语法会产生：\n\n```\n<p><code>There is a literal backtick (`) here.</code></p>\n```\n\n程式码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：\n\n```\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n```\n\n会产生：\n\n```\n<p>A single backtick in a code span: <code>`</code></p>\n\n<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n```\n\n在程式码区段内，`&` 和方括号都会被转成HTML 实体，这样会比较容易插入HTML 原始码，Markdown 会把下面这段：\n\n```\nPlease don't use any `<blink>` tags.\n```\n\n转为：\n\n```\n<p>Please don't use any <code><blink></code> tags.</p>\n```\n\n你也可以这样写：\n\n```\n`—` is the decimal-encoded equivalent of `—`.\n```\n\n以产生：\n\n```\n<p><code>&#8212;</code> is the decimal-encoded\nequivalent of <code>&mdash;</code>.</p>\n```\n\n### 图片\n\n很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。\n\nMarkdown 使用一种和连结很相似的语法来标记图片，同样也允许两种样式： _行内_和_参考_。\n\n行内图片的语法看起来像是：\n\n```\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \"Optional title\")\n```\n\n详细叙述如下：\n\n*   一个惊叹号`!`\n*   接着一对方括号，里面放上图片的替代文字\n*   接着一对普通括号，里面放上图片的网址，最后还可以用引号包住并加上\n    选择性的'title' 文字。\n\n参考式的图片语法则长得像这样：\n\n```\n![Alt text][id]\n```\n\n「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：\n\n```\n[id]: url/to/image \"Optional title attribute\"\n```\n\n到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的`<img>` 标签。\n\n* * *\n\n## 其它\n\n### 自动连结\n\nMarkdown 支援比较简短的自动连结形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成连结，连结的文字就和连结位置一样，例如：\n\n```\n<http://example.com/>\n```\n\nMarkdown 会转为：\n\n```\n<a href=\"http://example.com/\">http://example.com/</a>\n```\n\n自动的邮件连结也很类似，只是Markdown 会先做一个编码转换的过程，把文字字元转成16 进位码的HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如：\n\n```\n<address@example.com>\n```\n\nMarkdown 会转成：\n\n```\n<a href=\"mailto:addre\nss@example.co\nm\">address@exa\nmple.com</a>\n```\n\n在浏览器里面，这段字串会变成一个可以点击的「address@example.com」连结。\n\n（这种作法虽然可以混淆不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引来广告信件的。）\n\n### 跳脱字元\n\nMarkdown 可以利用反斜线来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用`<em>` 标签），你可以在星号的前面加上反斜线：\n\n```\n\\*literal asterisks\\*\n```\n\nMarkdown 支援在下面这些符号前面加上反斜线来帮助插入普通的符号：\n\n```\n\\ 反斜线\n` 反引号\n* 星号\n_ 底线\n{} 大括号\n[] 方括号\n() 括号\n# 井字号\n+ 加号\n- 减号\n. 英文句点\n! 惊叹号\n```\n\n## 感谢\n\n感谢[leafy7382](https://twitter.com/#!/leafy7382) 协助翻译，[hlb](http://iamhlb.com/)、[Randylien](http://twitter.com/randylien) 帮忙润稿，[ethantw](https://twitter.com/#!/ethantw) 的[汉字标准格式・CSS Reset](http://ethantw.net/projects/han/)， [WM](http://kidwm.net/) 回报文字错误。"
		}
	]
}