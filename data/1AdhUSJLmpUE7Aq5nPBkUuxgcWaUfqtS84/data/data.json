{
	"title": "BORS©.Blog",
	"description": "Блог PHP-фреймворка и просто разной DevOps всячины",
	"links": "* [Блог Balancer'а](/1MaQ4W5D6G52TpBfPACU9k9QcB1DxvHZ5v/)\n*   [Balancer's Wiki](/1NbzP9dgYhuY71bde9G1LuVGaCE69venzR/)",
	"next_post_id": 16,
	"demo": false,
	"modified": 1544272096,
	"post": [
		{
			"post_id": 15,
			"title": "Наложение текста поверх картинок на сайте с разметкой Markdown",
			"date_published": 1544271873.829,
			"body": "Жена на сайте делает ссылки на разделы в виде картинок. И накладывает на них надписи вручную в графическом редакторе:\n\n![2018-12-08_13-37-47.png (0x0)](data/img/post_15_2018-12-08_13-37-47.png)\n\nСейчас ей, похоже, надоело и она спросила, нельзя ли это как-то автоматизировать :)\n\nПишет страницы она в [Grav'е](https://getgrav.org/) в разметке `Markdown`. Понятно, что при этом можно делать вставки на чистом HTML и написать что угодно, но это не спортивно! Мне давно интересно реализовывать что-то расширенное в рамках синтаксиса и идеологии Markdown.\n\nКартинки в Markdown вставляются с таким синтаксисом:\n\n```markdown\n![](http://ссылка)\n```\n\nИли, в неурезанном варианте:\n\n```markdown\n![Alt-текст](http://ссылка)\n```\n\nАга! Первое же, что приходит в голову, использовать Alt-текст для визуального вывода поверх картинки. Ну и сама картинка может быть произвольного формата, а выводить нужно в фиксированном размере, в нашем случае 250x200px. Укажем всю эту обработку, задав CSS-класс картинки:\n\n```markdown\n![Лабораторные животные](lab-mouse.jpg){.cover}\n```\n\n* * *\n\nТранслируется оно в HTML вида:\n\n```html\n<img src=\"lab-mouse.jpg\" alt=\"Лабораторные животные\" title=\"\" class=\"cover\">\n```\n\n**Оформление**\n\nСперва опишем лимит размера картинки. Делаем её без полей, вписывая и обрезая лишнее в 250x500\\. Это сегодня совсем просто:\n\n```css\nimg.cover {\n    width: 250px;\n    height: 200px;\n    object-fit: cover;\n}\n```\n\nА вот дальше — сложнее. Вытащить поле `alt` из `img` средствами CSS невозможно. Нужно переходить к JavaScript. На том же jQuery поле alt достаётся в одно действие. И, раз мы уже это делаем, то оформим картинку с подписью в рамках современных стандартов. Сегодня это рекомендуется делать примерно так:\n\n```html\n<figure>\n  <img src=\"image.jpg\" alt=\"Картинка\">\n  <figcaption>Заголовок картинки</figcaption>\n</figure>\n```\n\nПоехали:\n\n```javascript\n$('img.cover').each(function()\n{\n    var img=$(this);\n    var alt = img.attr('alt');\n    img.wrap(\"<figure class=\\\"cover\\\"></figure>\");\n    img.after(\"<figcaption>\"+alt+\"</figcaption>\");\n});\n```\n\nГотово. Теперь после загрузки страницы текст из поля alt рисуется под картинкой в виде:\n\n```html\n<figure class=\"cover\">\n    <img src=\"lab-mouse.jpg\" alt=\"Лабораторные животные\" title=\"\" class=\"cover\"> \n    <figcaption>Лабораторные животные</figcaption>\n</figure>\n```\n\nОсталось только раскрасить надпись и наложить её поверх картинки:\n\n```css\nfigure.cover {\n    position: relative;\n    width: fit-content;\n    display: inline-block;\n}\n\nfigure.cover figcaption {\n    position: absolute;\n    bottom: 0;\n    color: white;\n    font-size: 24px;\n    padding: 0 4px 4px 4px;\n    display: block;\n    width: 100%;\n    text-align: center;\n    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.9), 0 0 2em rgba(0, 0, 0, 0.7);\n    line-height: 1.0;\n}\n```\n\n**Результат:**\n\n​​​​​​​​​​​​​​![2018-12-08_14-13-45.jpg (786x215)](data/img/post_15_2018-12-08_14-13-45.jpg)"
		},
		{
			"post_id": 14,
			"title": "YAML to PHP",
			"date_published": 1539139940.157,
			"body": "Обнаружил у себя сегодня ещё один заповедник с YAML-классами :) Переконвертировал…\n\nПоскольку _в этот_ блог давно ничего не писал, и предыстория осталась за кадром, вкратце:\n\n- Раньше в движке были «YAML-классы». С виду удобная фигня, когда можно было в .yaml кратко описать основные поля и методы. При работе класслоадера такой файл компилировался в кеш и оттуда брался как .php\n\n- На практике оказалось часто неудобно. Когда это были файлы в 1-2 строчки, то и на PHP описать то же самое в 4-5 строк не обломишься. А вот когда потом это всё требовалось расширять, можно было застрелиться :) Начинались костыли из PHP-вставок в отдельном файле и т.п. Кроме того, класслоадер в Composer стал стандартом и собственный колхоз стал терять смысл.\n\n- Посему в утилитку `bors` была добавлена команда `yaml2php` для конвертации первого во второе и YAML-класслоадер снесён из фреймворка. Кажется, вообще с механизмом своих класслоадеров.\n\nПример такой миграции: https://bitbucket.org/Balancer/balancer-board-bors/commits/b26cda898ad61c096dbd0994ef3ff252f5489877"
		},
		{
			"post_id": 13,
			"title": "Фильтры обсценной лексики",
			"date_published": 1527870758.148,
			"body": "По случаю тут вспомнилось. Тесты «мат-фильтра» пришлось сразу пополнить «словами-исключениями». А то, типа, как на известном военном авиафоруме долгое время слово «истребитель» писалось со звёздочккми: «истр*тель». Военная авиация! :D Но со временем стали попадаться более редкие и изысканные обороты, требующие пополнения матфильтра с обоих сторон. «Разрешённые» слова из юнит-теста привожу тут для прикола :)\n\n```php\n    static function __unit_test($test)\n    {\n        // Список нормальных слов с выглядещами обсценно подстроками.\n        $allowed = ['ансамбля Джебат дебаты колебания колебать колебаться постебаться дебилов учёба'];\n        $allowed[] = 'Усугубляясь истребители застрахуйте рубля Хулиганы потребляет потреблять тихую психуют психующим';\n        $allowed[] = 'оскорблять уподобляться Усугубляясь Олеговна плохую лихую употребляющих сухую глухую';\n        $allowed[] = 'хребтами Глеб Глеба небу сабля гребля корабля лапидарий скипидар туебень залужью';\n        $allowed[] = 'абляция'; // В начале строки!\n        $allowed[] = 'аббляционного веба потребляемого стеблями констебля';\n        $allowed[] = 'небу ещёб ещеб нёбу хлебом Пиебалгс деблокировать хлебнуло хулит';\n        $allowed[] = 'ибупрофен Ибашники';\n        $allowed[] = 'хребтом хребтами хребту сердцебиение досудебную колеблется беби мразеблоггерша';\n        $allowed[] = 'дирижабля дубля волшебную внеблоковый пищеблоку хребта ассеблеров';\n        $allowed[] = 'заштрихуйте Хулиан Хулио потребную Хулимсунт'; // Хулимсунт — посёлок такой.\n        $allowed[] = 'хулахуп ибо хулению служебную Себу'; // Себу — провинция на Филиппинах.\n\n// ...\n```"
		},
		{
			"post_id": 11,
			"title": "БД на хосте или в LXC-контенере",
			"date_published": 1512355134.939,
			"body": "Похоже, нужно возвращаться к идее индивидуальных серверов БД в LXC-контейнерах. С одной стороны, это заметный оверхед по памяти/кешам, из-за которых я и пришёл к идее использования общей БД на хосте для всех контейнеров, с другой стороны, начинается каша при попытке многосторонней репликации баз данных и лишний геморрой при переносе контейнера на другой сервер. Когда всё в локальной БД контейнера, то этот контейнер можно тупо запаковать и перебросить куда надо целиком.\n\nЕдинственное, над чем надо ещё подумать, делать ли LXC-контейнер полностью автономным или держать два отдельных контейнера для БД и для сайта. Во втором случае получаются лишние сущности, но процесс переноса можно разделить на этапы."
		},
		{
			"post_id": 10,
			"title": "Ещё один WTF от разработчиков",
			"date_published": 1504909599.212,
			"body": "Смотрю тут движки форумов. Вижу на официальном сайте одного из них в новостях вот такое чудо :D\n\n![wtf-developers.png (647x258)](data/img/post_10_wtf-developers.png)"
		},
		{
			"post_id": 9,
			"title": "Яндекс...",
			"date_published": 1503898839.769,
			"body": "Что-то Яндекс совсем опустился. Вот, к примеру, подобные записи в блоге:\n\n[http://www.zites.cf/2016/03/6-new-troubles](http://www.zites.cf/2016/03/6-new-troubles)\n\nУникальный для Интернета контент. Никаких копипаст. Однако, из поиска выбрасывается: «Недостаточно качественный контент». И такое — сотнями. Ну и какого им ещё нужно, блин?\n\n![yandeks-hernya.jpg (300x200)](data/img/post_9_yandeks-hernya.jpg)"
		},
		{
			"post_id": 8,
			"title": "Содержание",
			"date_published": 3275878500,
			"body": "Содержание блога (отдельным постом для запинивания)\n\n* * *\n\n## Тесты\n\n*   [Производительность MariaDB в Docker-контейнере](/1AdhUSJLmpUE7Aq5nPBkUuxgcWaUfqtS84/?Post:7:Производительность+MariaDB+в+Docker-контейнере)\n*   [О недорогих VPS (черновик)](/1MaQ4W5D6G52TpBfPACU9k9QcB1DxvHZ5v/?Post:30:%D0%9E+%D0%BD%D0%B5%D0%B4%D0%BE%D1%80%D0%BE%D0%B3%D0%B8%D1%85+VPS+(%D1%87%D0%B5%D1%80%D0%BD%D0%BE%D0%B2%D0%B8%D0%BA)"
		},
		{
			"post_id": 7,
			"title": "Производительность MariaDB в Docker-контейнере",
			"date_published": 1502346003.938,
			"body": "Возвращаясь к старому спору :)\n\nУ меня тут образовался новый и пока пустой сервер на Scaleway. Решил сравнить свежим взглядом и посмотреть, что изменилось с последних моих тестов. Использую всё тот же `sysbench`, тест complex на 1 млн строк. Три варианта:\n\n*   host через сокет\n*   host через 127.0.0.1\n*   docker с мапингом на 127.0.0.1\n\n* * *\n\nУсловия:\n\n*   Конфиги идентичны (оптимизированы)\n*   MariaDB-10.2.7\\. На хосте — Ubuntu xenial, в Docker — официальный образ на jessie.\n*   Сам каталог базы контейнера смонтирован в хост\n*   Параметры docker по умолчанию, запуск через docker-compose\n\nРезультат, итоговый, минимальные значения из небольшой серии.\n\nТип | transactions/30s | min time | avg time | 95 percentile\n----------|-------|-------|--------|-------\nсокет     | 39506 | 3.1мс |  6.2мс | 9.6мс\n127.0.0.1 | 32856 | 3.9мс |  7.3мс | 10.9мс\ndocker    | 17622 | 6.4мс | 13.6мс | 20.4мс\n\nВ общем, если без хитростей, то docker по-прежнему вдвое медленнее. Если с хитростями, то я пока не знаю, куда копать :)"
		},
		{
			"post_id": 6,
			"title": "WTF-Code",
			"date_published": 1500884481.692,
			"body": "Кидал тут в группу в Telegram примеры WTF-кода, которые встречал в своей практике. Решил и тут поделиться :)\n\n![](https://gateway.ipfs.a0z.ru/ipfs/QmQipH97FJbktWwrJGKugDpFJLa1NYSFsiWPdNbQGm7FZF/fileyNQLjI.png)\n\n![](https://gateway.ipfs.a0z.ru/ipfs/QmVS87fzivrcQPRFahEjdrQZ73MAngz9A1CPf7buFKjwjy/filejUPaCW.png)\n\n![](https://gateway.ipfs.a0z.ru/ipfs/QmatALyhvkuAmk7vhx1YGYh7i9kMcrH5TBrzzbVWLZfajU/filez80UcL.png)\n"
		},
		{
			"post_id": 5,
			"title": "Миграции БД",
			"date_published": 1496810190.104,
			"body": "Уже писал ранее в одном из блогов (когда же я их объединю? :) ) о проблеме выбора места для хранения миграций composer-пакетов. Пока у нас один только набор миграций для приложения, проблемы нет. Когда же надо поддерживать отдельно пакеты composer, то нельзя их миграции хранить в общей базе. Они могут обновляться независимо! Значит, или по отдельной таблицей на каждый пакет в общем базе в MySQL (как правило) или, чтобы не засорять базу, по отдельному файлу sqlite для каждого пакета в composer/data. Склонялся ко второму варианту, но (отчасти из-за лени) реализовывал первый. Это меня и спасло, когда пришлось при отладке постоянно перегружать старые дампы сторонней БД. Если бы история миграций хранилась отдельно, в локальном sqlite, был бы облом из-за несоответствия БД и истории миграций. А тут, поскольку и история и БД хранятся вместе и консистентны, просто делаем `phinx migrate` после каждой загрузки дампа. И всё прекрасно обновляется.\n\nТак что отныне — всегда отдельная таблица для отдельного пакета!"
		},
		{
			"post_id": 4,
			"title": "Положение с Graphviz в PHP",
			"date_published": 1496809673.573,
			"body": "Я много лет использовал PEAR [Image_GraphViz](https://pear.php.net/package/Image_GraphViz) и не знал бед. Но теперь этот пакет устарел, не поддерживается, его нет в Composer и так далее. Вчера потребовалось по-быстрому вывести на PHP пару диаграмм из БД. Решил сделать современно/модно/молодёжно. Полез в [libraries.io](http://libraries.io/), отсортировал по популярности пакеты Composer с подстрокой Graphviz и... Завис. Есть монолитные пакеты, генерирующие готовые изображения, но с очень куцыми функциями, не реализующими многое из возможностей GraphViz. Есть в большом ассортименте более гибкие пакеты, создающие GraphViz-скрипты (для `dot`), но нет средств рендерить их. Два часа угрохал, но так ничего штатными средствами и не добился. Плюнул, быстро слепил костыль с прямой генерацией строками скрипта и вызов `dot` через exec, сделав задачу за 10 минут. А с библиотеками придётся разбираться позже :-/"
		},
		{
			"post_id": 3,
			"title": "Фабрики/одиночки в приложениях",
			"date_published": 1496809465.027,
			"body": "Раньше активно использовал для запуска приложений синглтоны:\n\n```php\n\\Balancer\\Board\\App::instance()->run();\n```\nПришлось отказаться. Ибо появились случаи, когда это же самое приложение нужно регистрировать внутри главного для работы по отдельным адресам. Так что теперь только фабрики!\n```php\n\\Balancer\\Board\\App::factory()->run();\n```\nДля простых случаев «один сайт — одно приложение» разницы нет, но в сложных... Я долго так ловил одну ошибку, не понимая, почему не срабатывает роутинг :)"
		},
		{
			"post_id": 2,
			"title": "Иерархия с навигацией в другие домены/проекты",
			"date_published": 1495147615.253,
			"body": "Основательно зарылся в один крупный проект (конечно же, на BORS©), так что давно не писал ничего. А вылезла заметная проблема — с новым App-подходом, когда вся работа идёт не в рамках одного глобального приложения, а с локальными приложениями, вешающимися на конкретные домены и пути, отвалилась навигация («хлебные крошки»), ссылающаяся на посторонние ресурсы. Например, у нас форум на одном домене, а родителем к нему прописана страница в другом домене. Раньше второй проект всё равно был доступен в общей каше кода, теперь — нет. Нужно повесить этот проект при инциации приложения в точке входа на нужный домен:\n\n```php\n// Форум\n\\Balancer\\Board\\App::instance()\n    // Вот, то, что нужно, чтобы форум ссылался на нужную корневую страницу\n    ->reg_app(\\Balancer\\Site\\Main::class, '//www.balancer.ru/')\n    ->run();\n```\n\nСледует обратить внимание на `//` вместо `http://` или `https://`. Сейчас в движке происходит отход от использования явного указания протокола, поскольку это чревато проблемами http-ресурсов на https-страницах."
		},
		{
			"post_id": 1,
			"title": "ZeroNet. Поехали!",
			"date_published": 1495147281,
			"body": "Я уже начинал вести отдельный блог фреймворка в GitHub через ФС (надеюсь, после слияния с ними эта запись окажется уже в середине потока), но оформлять так материалы оказалось неудобно. И хотя у нас есть, скажем, WordPress, который в роли блог-платформы почти идеален, мне удобнее делать заметки в блогах ZeroNet. Даже не смотря на то, что в системе написанной на Python + JS писать о PHP несколько странно :D\n\nТак что теперь я постараюсь писать чаще и именно через ZeroNet :) А далее уже настрою двусторонний синк с ФС-блогом в `bors/app-data` / GitHub. А со временем, может, и с WordPress. С последнего, например, удобнее всего писать в дороге, через мобильный клиент. Но это — потом."
		}
	]
}