{
	"title": "Deavmi's Blog",
	"description": "A blog about programming, food, documentation (specification) writing and more!\n\nAll content is licensed under the Creative Commons Attribution-ShareAlike 4.0 International.",
	"links": "###Sites\n####Access through proxy\n- [Personal homepage](https://deavmi.github.io)\n- [Blog](/17wS1n8SJjkJ9uBg834m3NNiWkqdP29aWM)\n\n###Notable posts\n####Access through proxy\n\n####_Great things_\n\n- [My own Lips dialect proposal](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:34:My+own+Lisp+dialect+proposal)\n- [Bash page hit counter](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:32:Bash+Page+Hit+Counter+for+CGI)\n- [Mark programming language proposal](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:26:Mark+Programming+Language+proposal)\n- [RaspberryPi Professional Setup Script](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:24:RaspberryPi+Professional+Setup+Script)\n- [The Freedom Box Project](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:23:The+Freedom+Box+-+Offline,+anonymous+file+sharing.)\n- [Silex - A web browser that runs on the ZeroNet stack](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:9:Silex+-+A+web+browser+that+runs+on+the+ZeroNet+stack)\n\n####_Needs crypto-analysis_\n\n- [Encryption protocol with character map](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Home)\n\n####_Other not-so-great things (don't use em')_\n\n- [Blueberry encryption algorithmn](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:33:Blueberry+encryption+protocol)\n- [A new encryption protocol](/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:30:A+new+Encryption+Protocol+-+Scrapped+idea)\n\n###Social Media\n\n- [GNU Social](https://quitter.se/deavmi)\n- [Pjuu](https://pjuu.com/deavmi)\n- [Twitter](https://twitter.com/deavmi)\n\n###Projects and Papers\n####Access through proxy\n\nA list of all my project and papers that I have programed and written can be found on the [Deavmi Archive Network (**DAN**)](/183hZtmtXXB3vxZTn3WYbjVWtAsoVEtRXN).\n\n###Things I host\n####Access through proxy\n\n- [**Programming.Net**](http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u/?Topic:1_1JdoX9KdJeRVjN9zvK8N9C5jybEHzZe8n/Welcome+to+Programming+Net) - _A programming forum for everyone._\n- [**Apps.Net**](/162z113Fbji6vynmrX13u8NvXd1mT33R6k/?Topic:1_1JdoX9KdJeRVjN9zvK8N9C5jybEHzZe8n/Welcome+to+Apps+Net) - _A software forum for everyone._\n- [**Dev.Net**]() - _The developers social network._\n- [**iOS.Net**](/1P6WFojtuCiDkwbFj9ZnrvqwdcCT7xFK45) - _iOS Forum_\n- [**FireFox.Net**](/1sc5TFHZUjznSmk9vgB7QtTQxtREppSTx) - _FireFox Forum_\n- [**LinuxMint.Net**](/19ycfoq7pQmMfeUdTFAZi1m2P9UzYb4sAs) - _LinuxMint Forum_\n- [**GNU.Net**](/19ZZnk7RMpL4dUdMNMvNUgXN3mxeNkaVyD) - _GNU Forum_\n- [**RaspberryPi.Net**](/1E7cBjoPgdgcDjSDUGZLDUUMHFBLozQGos) - _RspberryPi Forum_\n- [**Ubuntu.Net**](/18Jyx5q5od3vz3dmx6pGgNDhAyGTYMEBrc) - _Ubuntu Forum_\n- [**Android.Net**](/1EUPzXaa8mhiWQqJwhjrfPuAdd4wYgtrCg) - _Android Forum_\n- [**RedHat.Net**](/13jwpiuJH5Xy96ZHD4vb238Wf5HEYr2DZr) - _RedHat Forum_\n- [**OpenBSD.Net**](/1HbyjyGj3M4hcBKSmVDpW3PwJhRmrCV2Ux) - _OpenBSD Forum_\n- [**Linux.Net**](/16Go5kc2U9Ff4jeaY8kYiDEgpMYdgyboPY) - _Linux Forum_\n- [**Chrome.Net**](/1Hh2q9k6bdwqFBk9wq99QzYWPWYrTQ5P2h) - _Chrome Forum_\n- [**Windows.Net**](/1AdrCr4x1yysKbu7LAhC9cNikbredEygmf) - _Windows Forum_\n- [**ArchLinux.Net**](/1K7je8msjzcCrVyeGeA7C3zuaUQ9E9RfTf) - _ArchLinux Forum_\n- [**Java.Net**](/1MDBBSi3RjGZ1NTteeDDEAMZosKwqvowZD) - _Java Forum_\n- [**FreeBSD.Net**](/1DNokZm62nHkiBayTUFToXQxBwoGmCqAzc) - _FreeBSD Forum_\n\n\n###Credits\n\nThanks to Connor for doing the mandatory (because my spelling sucks) spelling checks on my blog posts.\n\n###Donate\n\nNothing really, just doge.",
	"next_post_id": 50,
	"demo": false,
	"modified": 1445025016,
	"post": [
		{
			"post_id": 49,
			"title": "Better description on the \"What exactly is the FreedomCrate?\"",
			"date_published": 1443794631.936,
			"body": "I have a new post up on _\"What exactly is the FreedomCrate?\"_ on the [FreedomCrate Blog](/1KdZx5chU5scTr5sHy4gkwVmVmJC99rzjD/?Post:2:What+is+the+Freedom+Crate,+exactly+)."
		},
		{
			"post_id": 48,
			"title": "mkIndex v1.0 released!",
			"date_published": 1443729378.296,
			"body": "**mkIndex** is now available for your CGI server [here](https://notabug.org/deavmi/mkIndex)."
		},
		{
			"post_id": 47,
			"title": "mkIndex - Directory index generator",
			"date_published": 1443689975.3,
			"body": "I am currently working on a little HTML directory indexer which will be run as a CGI script which will then index the current directory and generate a HTML file containing links to those files. I am coding it all today and will be getting it up on [Notabug.org](https://notabug.org) soon later today."
		},
		{
			"post_id": 46,
			"title": "libhash - hashing made easy",
			"date_published": 1443615176.952,
			"body": "Since I have started developing some wrapper libraries in Python and my curiosity in cryptography has grew if have since decided to contribute to the sustainability of the programmers and cryptographers community by developing easy to use cryptographic hash function wrapper libraries in Python. I started with [libmd5sum](http://bit.no.com:43110/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:35:libmd5sum+coming+soon!) (which will be released soon) and now have decided to make a series of these libraries and soon combine them all into one big wrapper library called **libhash**."
		},
		{
			"post_id": 44,
			"title": "I shan't write my own crypto! But I still will try.",
			"date_published": 1443608300.713,
			"body": "I am not a cryptographer and have no experience with crypto, hence I shan't write any crypto. I will write related programs though and will write this project [Encryption protocol with character map](http://bit.no.com:43110/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:42:Encryption+protocol+with+character+map) and this one [Blueberry encryption protocol](http://bit.no.com:43110/17pTf9tzLGxVQnRKGhg1M85DCXJ7YXPdv9/?Post:33:Blueberry+encryption+protocol) (for educational purposes).\n\n**Do not use any crypto protocol I have proposed, unless you can analyse it to make sure it is secure. ~Hopefully you are a cryptographer.**"
		},
		{
			"post_id": 43,
			"title": "Silex web browser syntax",
			"date_published": 1443607861.323,
			"body": "I want to do a little overview of the syntax of Silex's. This won't be a long post at all, so let's get started.\n\nTo set the title or change the title of the page you use the `title{` tag which you put your title in between like so: `title{ Hello World }`."
		},
		{
			"post_id": 42,
			"title": "Encryption protocol with character map",
			"date_published": 1443602347.305,
			"body": "This is an idea that I had from I think Term 2 that after I watched _The Imitation GamEncryption protocol with character mape_.\n\nSo I came up with an idea of a character map that could be used for symmetrical encryption (because asymmetric is just too hard to comprehend). I think describing it with text right now is too hard.\n\n##The situation\n\n> Bob wants to send a text file over the Internet (insecure channel) to Alice, but there is a bad guy in between, he is **Zuma** and he can see our message if we do not encrypt it with a key that he does not know.\n\nBob's text file is like so:\n\n````\nHi Alice. What is your phone number?\n````\n\nWhat Bob now does is he creates a character map that will map each character being used in the text file to a secret pass-phrase.\n\n> \"My character map looks like so,\" said Bob.\n\nBob creates his crib or character map and saves it as `map.txt`.\n\n````\nH=nt4ej4vhynyttiueryguithrjkrhbjhgjfdfb\ni=67rt67r6tyrgrg6br5trgbtygyubtgygjhvhvbvb\n =57689654678965467890hhhffffffffGG&^^^^ffffffff\nA=R&^GB^^&TT&^^T&T^&^T&YT IV&VVB^T&\nl=B&T^R^T&&TV&R&TIRU^T^R&TB&^TB&^T\ni=gghug7y87y8y78y7*T&*T&*T78gyt8T&*%&^*^&*^$%^#$^&&^&*(&(&(*\nc=y7667GGGGHhght6hg5876g6f575vb867v5675vt76bn\ne=VFYTYTVRFjfhggjhfdjkhgjkfdhb54$^&*(&*^%&**8678\n````\n\n> \"Hey Alice (wasup babe). I'm going to send you my crib file (character map),\" said Bob.\n\n> \"Bob, that is preposterous. Do you even Public Key Crypto Bro?\"\n\nNow Bob will send the crib to Alice using public-key cryptography. Once completed he will then encrypt his message using the encryption program that can replace each occurrence of the the character (say now `H`) with its value (`nt4ej4vhynyttiueryguithrjkrhbjhgjfdfb`). It then takes the encrypted values and separates them by commas (`,`). By the way commas are not allowed in the map, shame. When Alice gets the encrypted file she will reverse the process by using the same crib file (character map) to decrypt the file into `Hi Alice. What is your phone number?`.\n\n> \"You ain't getting my number,\" said Alice.\n\n#Update, don't use me (unless you always use Caeser ciphers)\n"
		},
		{
			"post_id": 38,
			"title": "Database protocol proposal",
			"date_published": 1443556035.698,
			"body": "I have recently been thinking of creating my own database scheme of which I would implement in Python. I wanted it to be very simple but have some little features of which empower the user of the database and give it a feeling of databases-within-databases (not how you would imagine (that would be hard)). Below is the layout for the database I want to create, everything is separated by one SPACE like so:\n\n````database\nname local Tristan B. Kildaire\nage external myOtherDB.db\ngender remote https://lolsec.com/passwords.db\n````\n\n1. The first item in the SPACE separated values database is the **key**. This is like a variable and is sued to reference a value stored in the database.\n2. The second item is the location of the **value**, is it in the current database (`local`), in a separate database (`external`) or is it on a remote machine's database (`remote`).\n\nWhen you request a value from the database you request it by giving the database the **key** containing the value you want to get. Once you have given the database program the **key** you want a value retrieved from, the database will scan through the database file specified and look for that key. Once a match is found the **value** bound to the **key** is returned and Bob's your uncle.\n\nThis database scheme will be manageable via a REPL or the command-line or via a Python wrapper which uses the command-line.\n\nI will post updates on this soon. I am also thinking of making a simple database in Bash also, but not like this database scheme but rather way more simpler."
		},
		{
			"post_id": 35,
			"title": "libmd5sum coming soon!",
			"date_published": 1443548729.538,
			"body": "I said to myself that I had to make a hash digest library for Python of which was not the included one of the standard library of which I do not understand the syntax and the use of the `b` in front of the content of which needs to be hashed. So I then created **libmd5sum** which can create an md5 message digest from either a file or from a string of text. It will be up very soon on [Notabug](https://notabug.org). It will include usage help too."
		},
		{
			"post_id": 34,
			"title": "My own Lisp dialect proposal",
			"date_published": 1443542317.222,
			"body": "I want to quickly type up a cheat sheet of what I would like my own Lisp dialect to look like. This post won't explain anything of the language's syntax and how things are interpreted but just all of the available syntax.\n\n1. Defining a variable\n\t````lisp\n\t(defvar age int 2)\n\t````\n2. Comments\n\t````lisp\n\t(comment \"Hello There\")\n\t````\n3. Functions\n\t````lisp\n\t(defun addNumbers (x y)\n\t(return (+ x y))\n\t)\n\t````\n4. Subroutine\n\t````lisp\n\t(defsub printName (name)\n\t(print name)\n\t)\n\t````\n5. Addition\n\t````lisp\n\t(add 1 1)\n\t(+ 1 1)\n\t````\n6. Subtraction\n\t````lisp\n\t(sub 1 1)\n\t(- 1 1)\n\t````\n7. Multiplication\n\t````lisp\n\t(mul 1 1)\n\t(* 1 1)\n\t````\n8. Division\n\t````lisp\n\t(div 1 1)\n\t(/ 1 1)\n\t````\n9. Modulus\n\t````lisp\n\t(mod 1 1)\n\t(% 1 1)\n\t````\n10. while loop\n\t````lisp\n\t(while (== 1 1)\n\t(print \"Hello World\")\n\t(break)\n\t)\n\t````\n11. for loop (it's actually a foreach loop)\n\t````lisp\n\t(for [1,2,3,4] 2\n\t(print \"Hello World\")\n\t(break)\n\t)\n\t````\n12. if statement\n\t````lisp\n\t(if (and (== 1 1) (== 2 2))\n\t(print \"It's true that 1 equals 1 and 2 equals 2.\")\n\t)\n\t````\n13. assigning values\n\t````lisp\n\t(defvar name \"Tristan\")\n\t(setval name \"Bobby\")\n\t````\n14. undeclaring a variable\n\t````lisp\n\t(defvar name \"Tristan\")\n\t(undefvar name)\n\t````\n14. undeclaring variable\n\t````lisp\n\t(defsub addNumbers (x, y)\n\t(+ x y))\n\t)\n\t(undefsub addNumbers)\n\t````\n14. undeclaring a function\n\t````lisp\n\t(defun addNumbers (x, y)\n\t(return (+ x y))\n\t)\n\t(undefun addNumbers)\n\t````\n15. split string into array\n\t````lisp\n\t(split \"hello world\" \"\")\n\t````\n16. md5 hash of string\n\t````lisp\n\t(md5 \"Hello World\")\n\t````\n\nAs you can see I am trying to keep the language as polish notational as possible and keeping it true to the Lisp motto."
		},
		{
			"post_id": 33,
			"title": "Blueberry encryption protocol (is this good?)",
			"date_published": 1443540759.055,
			"body": "Following up on a [long thread on Quitter about hashing and how there can be times where a hash of a completely different message results in the same message digest as another seed](https://quitter.se/conversation/4057604#notice-4057792).\n\n> Hello World - encrypt with hash (hash is 77Y)\n\n> Bye World - encrypt with hash (hash is 77Y)\n\n> Person could do dictionary attack and get 'Bye World' as the dictionary value and then hash it and get a message digest and then un-encrypt the text file containing Hello World.\n\n> This is due to the possibility of collisions in hash functions.\n\nHence I have come up with a simpler approach to a password generator for encryption. Let me give you the breakdown below.\n\nYou have a text file containing the text below:\n\n````\nHello World\n````\n\n###Step 1\n\nYou split the contents of the file into an array containing each character in the string `Hello World`, you array would be `array = [\"H\",\"e\",\"l\",\"l\",\"o\",\" \",\"W\",\"o\",\"r\",\"l\",\"d\"]` and a length of 11 characters.\n\n###Step 2\n\nYou get the Unicode value for each character in the array and concatenate this into a string called `x`.\n\n###Step 3\n\nYou convert `x` to a hexadecimal for beauty sakes and because umbers can be easy to guess, but when you add letters to the situation the brute force attack will take longer. This new password in the hexadecimal number format is `a` as a variable.\n\n###Completed!\n\nNow you encrypt your file using your favourite encryption software using the password `a`.\n\n#Update, don't use me (unless you always use Caeser ciphers)"
		},
		{
			"post_id": 32,
			"title": "Bash Page Hit Counter for CGI",
			"date_published": 1443539636.008,
			"body": "I have release a small little suite of tools that allow you to have a little hit counter for your website's page by running the Bash script on every page load via an `iframe` tag which will have the `src` attribute set to the CGI script (bash script).\n\nHere is the source code: https://notabug.org/deavmi/phc4CGI"
		},
		{
			"post_id": 31,
			"title": "BashDNS - The origins",
			"date_published": 1443534357.611,
			"body": "> I still have to update this later on in a new revised version of this idea, but for now this is what I wrote.\n\nI have a really badass idea for a DNS system of which will work just with files and yeah.\n\nYou will have a directory containing IP addresses and one containing domain names.\n\nWhen you do a look up for an IP address to find the domain names that point to it, you will open each domain name file in the domain names directory and check if that IP is in the domain name file.\n\nWhen you do a look up for domain names it will scan the IP address directory and open and read each IP address file to see which IP addresses and linked with certain domain names.\n\nWhen creating a domain name you create a file in the domain names directory named as the domain name, you then add an IP address to it. This IP address will be written to the domain name file and also a new IP address file in the IP addresses folder will be created named by the IP address you chose and the contents of this file will be the domain name you created.\n\nWhen updating the IP address of a domain you will change the IP address by creating a new IP address and then writing it to the domain name file and then you will delete the old IP address file in the IP addresses folder and create a new one containing the domain name as the file contents.\n\nWhen updating the domain name you will create a new domain name file and take the IP address from the old domain name file and place it into the new domain name file. You will also update the IP address file in the IP addresses folder to point to the new domain.\n\nThere are two terminal modes, the command-line arguments mode and the interactive mode.\n\nThe interactive mode acts like a REPL and the command-line argument modes lets you issue commands to the BashDNS database.\nSuch as adding a domain name to the registrar. This can be done in both the command-line argument mode and the interactive (REPL) mode."
		},
		{
			"post_id": 30,
			"title": "A (terrible) new Encryption Protocol - Scrapped idea",
			"date_published": 1443519414.585,
			"body": "I have come up with a brilliant way (probably already thought of) system for securely encrypting files. There are three methods that I have come up with which I will list below:\n\n1. The contents of the file are the password method\n2. The contents of the file are the password method (with more maths involved)\n3. A uniform password (contents hashing (digest as password))\n4. The best way\n\nI am now going to explain exactly what I mean by each of these three methods mentioned above so that you can fully understand the all.\n\n##The contents of the file are the password method\n\n\"_The contents of the file are the password method_\" involves taking the contents of a file and using that as the password, this creates what I call the _recursion effect_ as to know the password you need to know the contents of the file.\n\nBelow is an example:\n\nHere is the un-encrypted file named `contents.txt`:\n\n````\nHello World\n````\n\nAnd the password used to encrypt this file will be `Hello World`.\n\n###Advantages\n\n* I would say that this is the most secure method.\n\n###Disadvantages\n\n* Encrypting something big like an essay would mean remembering or writing on paper the whole essay as it is now your password to unencrypted your essay.\n\n##The contents of the file are the password method (with more maths involved)\n\n\"_The contents of the file are the password method (with more maths involved)_\" involves using a mathematical formula/algorithm to generate long numbers of which grow proportionally in size while the file that needs to be encrypted grows in size. Wait, isn't this like an MD5 hash or something. The answer is **no**. Crptographic hashes have a forumula of whcih maintains size in a range, just look below and you will see how the MD5 hash digest of `hello` and `helloo` are the same in length of characters.\n\n````\nhelloo: b373870b9139bbade83396a49b1afc9a\nhello: 5d41402abc4b2a76b9719d911017c592\n````\n\nAnyway, our system will do something like this:\n\nGenerating a password for encrypting the file:\n\nFile name: hello1.txt\n\n````\nHello World\n````\n\nWould generate a password of say now length of `length/2` which is `11/2`. (Our encryption formula is this `length of string/2`)\n\nNow the next file below would generate something different (by the way there is an extra space character of the word `World` which you cannot see):\n\nFile name hello2.txt\n\n````\nHello World \n````\n\nWould generate a password of say now length of `length/2` which is `12/2`.\n\n###Advantages\n\n* Very similar to the first method **but** the passwords are more memorable.\n\n###Disadvantages\n\n* Not as secure as the first method\n* Passwords are not uniform like hash digest, the length varies on the size of the file being encrypted.\n\n##A uniform password (contents hashing (digest as password))\n\n\"_A uniform password (contents hashing (digest as password))_\" involves creating a cryptographic hash digest of the contents of the file being encrypted and then use the generated hash digest as the password to encrypt the file.\n\nSo let's encrypt the below file named `hello.txt`:\n\nFile name: `hello.txt`\n\n````\nHello World\n````\n\nNow what we would do is create a MD5 hash digest of `Hello World`, which is `b10a8db164e0754105b7a99be72e3fe5` by the way, and then encrypt the file `hello.txt` using that hash digest.\n\n##The best way\n\n\"_The best way_\" involves a more intricate design with a better formula (I personally think).\n\nLet me give you a break down of how it would work. I will make a future post on this protocol of which I am dubbing \"_Blueberry_\" but for now here it is.\n\nSay now you have a file named `pizza.txt` and it has the contents below:\n\nFile name: `pizza.txt`\n````\nHello World\n````\n\nWhat we do to generate a password for this file to be used in encrypting the file goes as follows.\n\n####Section 1 - Splitting the contents in half\n\n1. **Step 1:** We split the contents into halves. Make `x` the length of the file contents as characters and `y1` the first half of these contents and `y2` the second half of these contents.\n2. **Step 2:** `x` = 11\n3. **Step 3:** `y1` = 5\n4. **Step 4:** `y2` = 6\n5. **Step 5:** Our array of characters is now `contents = [\"Hello\", \" World\"]`\n\n####Section 2 - Getting the two hash digests of `y1` and `y2`\n\n1. **Step 1:** We now do an md5 hash of both `y1` and `y2`.\n2. **Step 2:** `md5(y1)` = 8b1a9953c4611296a827abf8c47804d7`\n3. **Step 3:** `md5(y2)` = 540e2430990447ba7e9c43578b30955b`\n\n####Section 3 - Some variable assignment\n\n1. **Step 1:** We make a variable named `a` and assign it the value returned from the `md5` function of which is compostioned within the value returned from the `dec` function; like so `dec(md5(y1))` (This converts the hex value returned from the `md5` function into the decimal number system).\n2. **Step 2:** We make a variable named `b` and assign it the value returned from the `md5` function of which is compositioned within the value returned from the `dec` function; like so `dec(md5(y2))` (This converts the hex value returned from the `md5` function into the decimal number system).\n\n####Section 4 - Let's compose this altogether now\n\n1. **Step 1:** We create a variable named `div` and set its value to `a/b`.\n2. **Step 2:** We now concatenate the values `a`, `div` and `b` together into a variable we call `p`.\n\n####Done!\n\nNow you can encrypt your file using the password of `p`!\n\n#Update, don't use me (unless you always use Caeser ciphers)"
		},
		{
			"post_id": 29,
			"title": "Version Control System of my own.",
			"date_published": 1443518585.107,
			"body": "I want to create my own Version Control System because why not, it means handling big amounts of data which is something I enjoy a lot. Before we start I want to give a brief overview of what it will use as the transport protocol. It will use the SFTP protocol for transferring files back and forth, the server side will run a [SFTP server](https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol#SFTP_server) and the client will run a [SFTP client](https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol#SFTP_client). Using the SFTP protocol we have a transport protocol now of which we can use for the client to send files over to the client and vice-versa.\n\n##Our VCS stack\n\nIn our VCS stack we will probably be using the [lsh](https://en.wikipedia.org/wiki/Lsh) SSH server/client bundle which includes a server program named `lsh-server` and a client program named `lsh-client`.\n\n##How it all works\n\n###Creating a repository\n\nYou create a repository by running `leny init [repo name]`, once this has run you will have a new repository created in the form of a directory named whatever you typed after the `init` command-line argument.\n\nInside the repository directory you will find a sub-directory named `.leny`. This is where all the data such as the directory that holds the commits will be and also the `.ignore` file will be which tells Leny which files to not track.\n\n###Creating your first commit\n\nFirst let's create a file to add to this commit. Do so by running `touch myFile.txt`.\n\nNow add this file to the tracking list so that it will be added to the commit we are making now and all future commits. (the file tracking list is in the `.leny/` directory and is a plain text file named `tracking`). You can add a file to the tracked files list by typing in `leny track [filename]`.\n\nNow let's create our first commit, do this by typing in `leny commit [commit message]`. This will archive all the contents of the working directory of which are tracked and are not in the ignored files list and then do an md5 hash of the archive once the archive has been created and then rename the archive to that message digest generated by the md5 function.\nThis archive is located in the `.leny/commits/` directory.\n\nAfter that has happened we then append to the `commits.list` file the message digest retrieved from the md5 hash function of which the seed for the function was the data of the archive that was created.\nEverything appended to the `commits.list` file is obviously in chronological order."
		},
		{
			"post_id": 27,
			"title": "E-Mail on ZeroNet...",
			"date_published": 1443469274,
			"body": "There are two approaaches to this."
		},
		{
			"post_id": 26,
			"title": "Mark Programming Language proposal",
			"date_published": 1443461818.447,
			"body": "I have been thinking of a syntax for a language that is **m**odern but simple like the **C** programming language. I wanted something taht has block styling lile Visual Basic, Basic, Ruby and Fortran because if you think about it, it is very attractive and makes your source code look liek English poetry which is great!\n\n##What is this blog post about then?\n\nWell I want to try and specificfy the syntax right here in this blog. I will probably end up specifying the whole language. You know what, let's do that rather.\n\n##Mark Programming Language Specification\n\nThis is a work-in-progress documentation for the Mark Programming Language.\n\n###Syntax\n\nIn this section I will be discussing the syntax for the Mark programming language, all of it. I will explain everything in-depth so that you can basically learn the language right here.\n\nSo let's get started already!\n\n####Structure of a Mark program\n\nThe main code block of every program is the `program` code block. The `program` code block looks like so:\n\n````mark\nprogram HelloWorld\n\nend program\n````\n\n1. The `program` code block starts with the identifier `program` then a SPACE and then the name of the program with **no spaces** in between.\n\n2. All the code that your Mark program will be running will be within the `program [programName]` and `end program` identifiers.\n\n3. The identifiers `program` and `end program` must be written as is; all lower-case.\n\nExtra-information: This code block styling is reminiscent of that of Fortran's. We copied the Fortran main program code blocking style.\n\n####Creating your first Mark program\n\nIn this topic we will be creating our first Mark program that does a simple thing; prints out `Hello World` to the screen.\n\nStart off with your basic program structure using the pragmas `program` and `end program` that will enclose our code:\n\n````mark\nprogram HelloWorld\n\nend program\n````\n\n1. We are going to call our program `HelloWorld`.\n\nNow let's add the code that will print the text `Hello World` to the screen.\n\n````mark\nprogram HelloWorld\n\n\tprint(\"Hello World\");\n\nend program\n````\n\nNow save this program as `myProgram.mark`.\n\n1. We are using the built-in (a function or subroutine that is built into the language itself) `print` which will print whatever is between the parenthesis to the screen (standard output).\n2. Between the brackets is `\"Hello World\"`, anything enclosed between two double quotes are known as **strings**. **Strings** are a data type in Mark (think like data types in maths, `integer`, `decimal`, `complex` etc.).\n3. The first value, a string (`\"Hello World\"`), is the first argument of the `print` built-in subroutine accepts. It must be of type **string**.\n4. We end off the line with a semi-colon. In case  you didn't know what that was, it's the `;` symbol on your keyboard.\n\nNow we compile the above program in the terminal using `./mark -c myProgram.mark` and then run our program by typing in `./a.out`. `a.out` is the default name for the compiled executable. You can change this by using the `-cn` command-line argument for the `mark` executable; running `./mark -cn myProgram.mark swagMonster` would compile `myProgram.mark` to an executable named `swagMonster` and can be run using `./swagMonster`.\n\nIf you ever need to find a certain command-line argument for the `mark` compiler and a description of the command-line argument then just type in `./mark --help`."
		},
		{
			"post_id": 25,
			"title": "Raspberry Pi running WordPress via LAMP stack",
			"date_published": 1443458471.674,
			"body": "A great tutorial on how to set-up a **LAMP** stack (**L**inux,  **A**pache web server, **M**ySQL and **P**HP) can be found on the RaspberryPi site [here](https://www.raspberrypi.org/learning/lamp-web-server-with-wordpress/worksheet/).\n\nI am going to be using this tutorial for setting up the one RaspberryPi in the **Freedom Box** that I am creating."
		},
		{
			"post_id": 24,
			"title": "RaspberryPi Professional Setup Script",
			"date_published": 1443444580.548,
			"body": "The RaspberryPi's Official distribution of GNU/Linux is Raspbian which comes with many pre-installed programs one might not need if you are say now a developer for example, then **minecraft-pi** won't be needed (unless you enjoy a good game of one of the best games ever). ANother example is if you are using the Raspberry Pi as a dedicated server for some application you do not need to have packages installed that you will not need, like **scratch**.\n\n**The question:** SO Deavmi, tell us then how you can fix this.\n**The Answer:** Simply do some copy-pasta of this below script in your terminal and it will actually do more than what I said above. Yes, it will remove the unneeded packages but will do several other things to your GNU/Linux system which are listed below the script.\n\nOne-line version (great for people that have a graphical environment and can copy and paste into the terminal. Great for Putty sessions.)\n\n````bash\nsudo apt-get -y remove minecraft-pi wolfram-engine sonic-pi scratch && sudo apt-get clean && sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get -y dist-upgrade && sudo apt-get autoclean && sudo apt-get -y autoremove\n````\n\nSeparated line version:\n\n````bash\nsudo apt-get -y remove minecraft-pi wolfram-engine sonic-pi scratch\nsudo apt-get clean\nsudo apt-get update\nsudo apt-get -y upgrade\nsudo apt-get -y dist-upgrade\nsudo apt-get autoclean\nsudo apt-get -y autoremove\n````\n\nWhat this script will do (also) is as follows:\n\n1. Clean the pre-installed packages lists (delete them)\n2. Re-download the current packages lists\n3. Do a system upgrade (`apt-get upgrade`)\n4. Do a full upgrade (`apt-get dist-upgrade`)\n5. Remove all downloaded `.deb` files downloaded during (installs and upgrades)\n6. Remove all other dependencies that the removed packages (e.g. **wolfram-engine**) relied on. (Also packages no longer needed due to new packages being installed via upgrading the packages)\n\nAll of these seven commands in total:\n\nGive you a fresh-ish (we could of used `--purge`) system of which you can now use for whatever you want without any programs that you do not need being installed."
		},
		{
			"post_id": 23,
			"title": "The Freedom Box - Offline, anonymous file sharing.",
			"date_published": 1443443305.914,
			"body": "Project ID: `D43`\n\nDuring the school holidays I embarked on a project to create a crate of an assortment of pieces of technology to facilitate offline file-sharing and such. It creates an open WiFi hotspot of which people can connect to using their laptops, phones or whatever WiFi-enabled device they have with them in the vicinity of the access point. Once connected to the access point they can try to visit a site like **duckduckgo.com** but will then be redirected to the Raspberry Pi router running the awesome [**PirateBox**](http://piratebox.cc) software which contains a homepage that has a chat box, a file uploader/browser and also forum software.\n\nLet's review what the first Raspberry Pi does:\n\n1. It is the centralised router for the Freedom Box's network.\n2. It has a landing page for...\n\t* Uploading files\n\t* Viewing uploaded files\n\t* Anonymous chat\n\t* Forum\n\nThe second RaspberryPi has a pretty simple job, it runs the [**MotionPie**](https://github.com/ccrisan/motionpie) camera surveillance software which in this case I use to get snapshot images from the web cam and stream them onto the PirateBox's landing page. This RaspberryPi will also run an IRC server hopefully.\n\nAnd lastly, the third Raspberry Pi. This one runs the [**Buddypress**](https://buddypress.org) social networking software, so that people can create social accounts to send each other messages and post content.\n\nNo one can sensor the Freedom Box, besides the owner, but the point is that many Freedom Boxes can be built to create a physical distributed network of information.\n\nYou can really help by donating money via the below methods:\n\n1. Bitcoin: [1F8QPFbG3eMhPRAHVPFyNtbdgGgRfjX5AJ](bitcoin://1F8QPFbG3eMhPRAHVPFyNtbdgGgRfjX5AJ)\n2. Dogecoin: [D99AJvnx9w3ic3rrThXbSJ8pHcYLEtQPS1](dogecoin://D99AJvnx9w3ic3rrThXbSJ8pHcYLEtQPS1)\n\nThanks by the way!\n\nThis money will go to Deavmi and he will see where it will go, for this project or not."
		},
		{
			"post_id": 21,
			"title": "Spiral - A small micro-blogging-like social network for Zeronet (WIP)",
			"date_published": 1443177582.984,
			"body": "Project ID: `DQ10`\n\nI have come up with a little idea to also, as part of my many ZeroNet project ideas, create a little micro-blogging  like social network that runs on the ZeroNet and is text-based and runs in your terminal.\n\n##How will it work?\n\nThis is a very simple application and it works, very simply.\n\n###Setup of client/server\n\nWhat you will need:\n\n1. A new empty ZeroNet site (we will probably make this automatic but you will have to get the address of the site created.)\n\nWhen you start Spiral, it will open ask you for the address to the site you just created in ZeroNet and then save that to the `home_addr.conf` file located in `~/.spiral/home_addr.conf`.\n\nOnce this is completed Spiral will then ask you to follow friends. The ID of a friend is his/her ZeroNet address and also a friendly name that will be bound to that ID (so that you do not have to attempt to remember a long string of gibberish), once you have completed entering these ID's they will then be saved to the file `~/.spiral/friends.list` and will look like so:\n\n````friends.list\nID friendly_name\n````\n\n**Note:** You may only bind the unique friendly name to one ID. No duplicate friendly names may exist.\n\n###Following a user\n\nTo follow a user you type into the Spiral REPL `follow [ZeroNet site address]`, what happens next is as follows.\n\n**Quick Note** If you follow someone in Spiral then you will get their posts in your feed. They can then mention you and you will be able to pick up the mention. **But for you to mention them** and to have them successfully see your mention, they must follow you.\n\n1. We make a request to get our own copy of their ZeroNet site by doing an HTTP connection to `http://127.0.0.1:43110/[ZeroNet site address]`. This will trigger our ZeroNet client to try and get a copy of that site mirrored onto our ZeroNet client, we will continuously make requests with a ten second interval to that site until a directory named `[ZeroNet site address]` exists in your ZeroNet `data/` directory.\n\n###Un-following a user\n\nTo unfollow a user you type into the Spiral REPL `unfollow [friendly name (if one exists) OR ZeroNet site address]`, what happens next is as follows.\n\n1. Sprial will recursively delete the whole directory in your ZeroNet's `data/` directory named `[ZeroNet site address]`.\n2. Sprial will then update the `friends.list` file located in the `~/.sprial/` directory to remove the friend being un-followed (namely the `ZeroNet site address` and the `friendly name`).\n\n###Creating a post - Work in progress\n\nTo create a post type into the Spiral REPL `post [your post data]`, what happens next is as follow.\n\n1. Spiral will create a new post by appending to the posts file named `feed.posts` which is located in the `[ZeroNet folder]/data/[your ID]/.spiral/posts/` directory.\n\n\n\n"
		},
		{
			"post_id": 9,
			"title": "Silex - A web browser that runs on the ZeroNet stack",
			"date_published": 1443169520.795,
			"body": "Project ID: `DQ431`\n\n##In a nutshell what is Silex?\n\nI came up with an awesome idea to create a text-based web browser that uses its own basic specification for web pages unlike that of our current browsers that use the HTML specification. Our specification is the **Silex specification.** Silex is a basic text-based web browser that I will write in Python (because Python is so easy.).\n\n##More in depth, please....\n\nSilex has its own specification as we previously said, the `.silex` files are our HTML equivalent which contain a tag for the _title_ of the page (`title:` and `:end title`), the _body_ of the page (`body:` and `:end body`), the _authors_ of the page (`authors:` and `:end authors`), the _description_ of the page (`description:` and `:end description`) and lastly the _license_ of the page if any (`license:` and `:end license`).\nWe currently only have 5 tags, but for what Silex does that should be enough. This is because it is not meant to be a very visually appealing browser as it is only a text-based browser.\n\n##What do the web pages look like?\n\nA site with the following source code in its `.silex` web page file:\n\n````silex\ntitle{Hello World}\nauthors{Deavmi}\nlicense{GNU GPL v3.0 or above}\nbody{\nWelcome to my Silex site. This site runs on the ZeroNet.\n\nHope you enjoy it.\n}\n````\n\nWould look like so in your terminal while viewing it with Silex:\n\n````terminal\n++++ Hello World - Silex ++++\nAuthor(s): Deavmi\nLicense(s): GNU GPL v3.0 or above\n(SPACE HERE)\nWelcome to my Silex site. This site runs on the ZeroNet.\n\nHope you enjoy it.\n````\n\n##The Core\n\nI now want to explain how the actual program works; the **Silex web browser**.\n\nPages are retrieved from the ZeroNet from ZeroNet sites which we call in the Silex ecosystem, _brokers_. Think of _brokers_ as big servers that hold many sites (`.silex` files).\n\nWhen you request a Silex site/page  in the Silex web-browser you just type in the address of the site (which is a cryptographic has of the contents of the `.silex` file combined with a cryptographic hash of the ZeroNet sites hosting it and then these two hash concatenated together and hashed as a concatenated string; all of this leads up to the site/page address which you type into your browser.) This cryptographic hash of say now a site named `hello.silex` containing the value `Hello World` will be hashed to create a digest of `x`, then we will get the public-key of the ZeroNet site (broker) that the `hello.silex` file is hosted on and get a hash digest of `y`, the we concatenate the digest `x` and `y` together to get `xy`, we then hash `xy` to get a hash digest of `xy`. Now we add this to the _book_.\n\n##What's the book?\n\nThe _**book**_ is a file `book.list` located in `~/.silex/book.list` which holds a copy of the digest of `xy` we created previously and right next to that, the file name of the site `hello.silex`. It would look like so:\n\n````book\nxx567TFffry45fdgtyr333HHfggd hello.silex\n````\n\nWhen you request the site `xx567T&Fffry45fdgtyr333HHfggd`, Silex will go scan all ZeroNet sites (brokers) for the file `hello.silex` and will have each occurrence of the file `hello.silex` and see if the whole hashing process we did earlier matches the hash digest `xx567T&Fffry45fdgtyr333HHfggd`, if so the site will then be served to you.\n\n##How did the book get populated\n\nUpon each start up of Silex web browser, the Silex daemon will run and write to a file named `status`, if the value (contents) of the file `status` equal `ready` then Silex web browser will stop waiting and will allow you to type in a URL to visit.\n\nSo the Silex daemon does all the hashing and upon each start it overwrites the contents of the `book.list` file adding the name of the file, in this case `hello.silex` and a hash digest of the file, in this case `xy`.\n\n##How does it know which ZeroNet sites to use?\n\nGoo question, or else we would scan all of the directories (making the daemon's process even longer and slower (yes, a downside to the Silex system)) in your `data/` directory in your ZeroNet program data.\n\nWhat we have to fix this is a file named `brokers.list` which contains all the public-keys (addresses) of the ZeroNet sites which are to be used as brokers. Any site (public-key) not in here will be skipped upon the daemon doing it's hash 'n scan process.\n\n##So what does this mean in the end?\n\nIt means that you can browse sites that need not have images or any dynamic content extremely fast because of the torrenting system and the fact that it is text-only (small file size) and that the parsing done is minimal due to the minimal syntax of the **Silex specification** or what I should actually be calling the **SML** which stands for the **Silex Mark-up Language**."
		},
		{
			"post_id": 8,
			"title": "libtype coming out soon!",
			"date_published": 1443022908.585,
			"body": "Do you need an easy way to figure out if a certain value is of a certain type in Python and also if a certain value (object) is of a matching type to another type. Well then you're in luck **libtype** is here to save you.\n\nLibtype is currently in development and will be available tomorrow afternoon.\n\nRead the [forum post](http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u/?Topic:4_1JdoX9KdJeRVjN9zvK8N9C5jybEHzZe8n/+My+program+libtype+Easy+library+for+getting+the+data+type+of+values) on [Programming.Net](http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u) ."
		},
		{
			"post_id": 7,
			"title": "Apps.net forum launched!",
			"date_published": 1443002474.101,
			"body": "I have just launched a brand new forum on ZeroNet called **Apps.net**. It is a _\"apps\"_ or applications forum as you can tell by the name. I created it as a way for all of the people to share software (not pirating software) on the forum (rather links to the sites, **still not pirating**).\n\n##Links\n\nLink to forum: [http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u](http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u)\n\n##Status\n\nThe site is fully online as of now and has one peer/node of which is mirroring its contents."
		},
		{
			"post_id": 6,
			"title": "Noob to ZeroNet. (Public private-key)",
			"date_published": 1442999469.175,
			"body": "I really started getting into [ZeroNet](http://zeronet.io) yesterday but I started to realise that using proxies as your own node is a bad thing. Just don't log in there and register the name you want on their machine becaue first of all:\n\n1. There goes your now public, private-key.\n2. You cannot get the sites you host there and edit them locally without asking the owner of the proxy to send them to you via email or something.\n\nSo this is what I suggest.\n\n1. For editors, run your node locally and then once you have your site's public-key, simple go and visit this address in your browser `http://bit.no.com:43110/[site's public-key goes here]` and then  tell your freinds to **read** your blog here. **Notice:** It will take some time to I guess announce the torrent file or whatever accross the network, so be patient, it should take like ten minutes, once it is done, you can edit your blog locally and then viw it whilest you are away from your node by visitng the link [http://bit.no.com:43110/[site's public-key goes here]](http://bit.no.com:43110/[site's public-key goes here])."
		},
		{
			"post_id": 4,
			"title": "Programming.net forum launched!",
			"date_published": 1442942846,
			"body": "I have just launched a brand new forum on ZeroNet called **Programming.net**. It is a programming forum as you can tell by the name. I created it as a way for me to be able to learn programming and ask my questions very easily, I felt that if we had something like [/r/learnpython](https://reddit.com/r/learnpython) on [reddit](https://reddit.com) then why not try to replicate all of the programming sub-reddits on reddit into one forum on the ZeroNet.\n\n##Links\n\nLink to forum: [http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u](http://bit.no.com:43110/17YUF4geTD7gBDPeMtQtnV7uhhNcjrYi9u)\n\n##Status\n\nThe site is fully online as of now and has one peer/node of which is mirroring its contents."
		},
		{
			"post_id": 2,
			"title": "Bash Basics",
			"date_published": 1442940321.053,
			"body": "I will be starting a new series soon on Bash called \"_Bash Basics_\". I am going to try and cover many aspects of the Bash scripting language that I can by posting them as individual blog posts. I will be posting as much as I can from what I have so far learnt from Bash, as I myself am still learning to script in Bash.\n\n##Why Bash?\n\nBash is a great scripting language, it is damn easy to learn and is not advanced at all but relatively simple.\n\n###Update\n\nYou can now find the [first tutorial](http://bit.no.com:43110/17wS1n8SJjkJ9uBg834m3NNiWkqdP29aWM/?Post:1:Tutorial+1+-+Simple+Hello+World) (<-- there) and the site [here](http://bit.no.com:43110/17wS1n8SJjkJ9uBg834m3NNiWkqdP29aWM)."
		},
		{
			"post_id": 1,
			"title": "Welcome to Deavmi's blog!",
			"date_published": 1433033779,
			"body": "Welcome to my blog. I will be putting some cool stuff up here. Like all the stuff I learn from computer programming and such. Also maybe stuff related to food and such because food is yummy and I love it. I might also post some links to the pictures I have taken that I upload to Wikimedia Commons (for use hopefully in Wikimedia, anywhere else will be great also :D). And lastly all the stuff relating to the documents that I am writing, all of which are specifications.\n\n###Who is Deavmi?\n\n````nim\nvar name: string = \"Deavmi\"\necho(\"Hello my name is \", name)\n````\n\nBut a little more about me quickly. I am Deavmi, I love computer programming, it is an art of which whatever you dream you can (most of the time) make possible, even if you cannot make it possible you can get damn close to making it possible.\n\n###What programming languages do I love?\n\n1. Python\n    * Because it is so damn easy and the pure-oop approach makes everything very easy\n2. Julia\n    * Functions for so many things is actually very nice but when I wanted to first try out functional programming I started with a pure functional programming language, **Haskell**, of which was just too hard for me to comprehend. Maybe next time, _Haskell_.\n3. Nim\n    * Because when Python tries to use the pure-oop approach it gets very confusing in some aspects, therefore Nim is here to the rescue to be like C or Perl where everything is not an object, Nim is great because of this exact point.\n4. C\n    * Because it's the father of all languages.\n    * Is very understandable.\n5. Fortran\n    * My grandmother was a Fortran programmer hence I am following the family trait and programming things in Fortran. You would be surprised with what you can actually do in Fortran (at least I was). Fortran actually has a very nice syntax when it comes to the styling code blocks.\n6. Bash\n    * Because when everything is a string stuff gets confusing. But really, I love Bash for the ability of being able to actually write some great software (not just scripts) in a language like this. This is probably due to the fact that you have an abundance of command-line tools out there to use in your Bash scripts.\n7. Lisp\n    * Using [Polish-notation](https://en.wikipedia.org/wiki/Polish_notation) for everything actually can be quite appealing in a uniform syntax approach, although I would need to format my Lisp code very well for it to be readable (if that's even possible in Lisp ;) ).\n\n###Where can you find my projects and papers?\n\nI don't have many projects, I used to, but that was back when I was a noob playing around in Visual Studio IDE with Visual Basic (programmers are actually always noob, because we are always learning). Anyway, there is a maintained list of all the stuff that I am currently working on at the  [**Deavmi Archive Network (DAN)**](http://127.0.0.1:43110/183hZtmtXXB3vxZTn3WYbjVWtAsoVEtRXN) which is, as you can see, an archive of all the stuff I am working on. The **DAN** includes the project's title, description and links to the source code (ain't got no time for compiling)."
		}
	]
}