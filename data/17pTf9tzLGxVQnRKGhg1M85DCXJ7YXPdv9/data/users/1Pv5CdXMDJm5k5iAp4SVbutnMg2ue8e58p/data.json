{
	"next_comment_id": 2,
	"comment": [
		{
			"comment_id": 1,
			"body": "The way I understand it, the character map idea is essentially a substitution cipher that can be broken by studying the frequencies of characters in each language. Breaking the substitution cipher is a small and simple exercise that is done as a demonstration of the weakness of that cipher on PAPER in about 30minutes at a crypto introduction course/lecture. An absolute failure.\n\nMay be I shouldn't reveal my real identity, but I don't consider the ZeroNet to be anonymous anyway, so here are a few references to some of my work:\n\nA purely Ruby based e-mail encryption software, written from scratch:\nhttps://github.com/martinvahi/mmmv_devel_tools/tree/master/src/mmmv_devel_tools/mmmv_crypt_t1\n\nThe main idea behind the mmmv_crypt_t1 is that when other crypto algorithms are optimized for \"pracitical speed\", then the mmmv_crypt_t1 is optimized for cryptographic strength and reliability of the software. For example, a bank is OK, if the temporary keys of a card payment session get cracked 10 minutes after the session has been closed, but emails have to stay encrypted for at least 50 years, till the regime falls. Namely, the Egyptian Mubarak stayd \"in power\" for about 40 years. The Soviet Union lasted about 50 years. The Nazy Germany lasted, well, at least about a decade, may be more, depending on whether the seeds of the Nazy Germany can be seen from the pre-World-War-1, not WW2, but WW1, era. So, the practical requirement is about \n\nlife_of_the_regime + ~30years === ~70 years.\n\nSo, that's the perspective of a PROPER email encryption. Besides, the banks reveal everything to the supermafia the moment the \"police\" (supermafia goons) show up with a \"court order\". So, the banks only need cryptography for protecting sessions and those last a few hours maximum. At the same time the banks need their electronic equipment to be cheap and the battery life of the various mobile card terminals to be as long as possible, but proper encryption takes computing power, which takes electrical power, which drains batteries of the mobile card terminals, which must last as long as possible to serve end user comfort.\n\nThe one-time-pad is theoretically unbreakable, but there is a distinction between theoretical unbreakability and practical breakability. A citation from my own wiki:\n\n\"The previously described proof only says that it is not possible to INFER THE ACTUAL clear-text from the cryptotext. The proof does not rule out a case, where multiple probabilistic clear-text candidates might be derived from the cryptotext\"\n\nhttps://bitrary.softf1.com/index.php?title=Software_Development_:_Security_:_Cryptography_:_Onetime_pad#Practical_Attacks\n\n\nThe math behind the mmmv_crypt_t1:\n    https://longterm.softf1.com/specifications/txor/index.html\n\n    https://bitrary.softf1.com/index.php?title=Software_Development_:_Security_:_Cryptography_:_Onetime_pad\n\n\nI've been also working on the following projects:\nhttps://silktorrent.softf1.com/\n\nA slow-as-hell but portable Hash algorithm:\nhttps://longterm.softf1.com/specifications/hash_functions/plaice_hash_function/index.html\n\nI also like to point out that ideas are WORTHLESS, if they are implemented poorly. The amount of fancy features does not matter, if the basic functionality stops working due to poor choice of dependencies or bugs in the implementation. If You look around the WildWildWeb, there are plenty of various fancy projects that have very fancy functionality, but in the long term only the carefully implemented and well thought out projects prevail. \n\nExamples of flashy \"all-around\" technology that ended up being dead due to shoddy implementation and/or shoddy social processes around them: Java Applets, Adobe Flash, Microsoft Foundation Classes (the Microsoft Silverlight does not even qualify, because it never got off the ground), in some way even the VRML, which was all open and monetarily supported by multiple companies, but what the VRML was lacking was freelance software developers that use the VRML for practical work. The hordes of 3D artists do not carry out the software development work that is necessary to keep a 3D standard at float. My prediction is that the Microsoft Java Substitute, generally called as C#, is going to meet the Titanic the moment the Microsoft stops financing its development. The \n\nhttp://dotnetfoundation.org/\n\nis living and breathing from Microsoft money. The .NET Foundation is, of course, a huge improvement from the Sun_Microsysems/Oracle Java mess, but the C# lacks the freelancers and the C# stays alive only due to Microsoft money. A counter-example is the Free Pascal/Lazarus ecosystem\n\nhttps://www.freepascal.org/\nhttps://www.lazarus-ide.org/\n\nthat stays alive due to freelancers, without any budget. It's high quality, reliable. Truly the best desktop GUI programming system that I'm aware of. Even better than the web browsers, because the only web browser that got developed by freelancers was/is the \n\nhttps://konqueror.org/\n\nwhich supposedly was the initial source that the Google Chrome developers forked to develop the Google Chrome. The main problem with the web browsers is that the amount of halve-baked, crappy, standards just piles up and that sort of pile of legacy crap is not something that a small group of freelancers are able to support. Given that no software project gets an ever-lasting stream of proper financing, the Mozilla Firefox and Google Chrome projects will eventually run out of financing, but the Free Pascal and Lazarus projects do not depend on corporate financing. The same holds for the \n\nhttp://www.vim.org/\n\nwhich has such a deep and outlasting penetration that all major IDEs, even the Microsoft Visual Studio, support the Vim key bindings to some extent, if not by default, then through some plugin, which can be proprietary\n\nhttp://www.viplugin.com/viplugin.htm\n\nThat is to say, if You're planning an implementation, then it's wise to choose Your dependencies so that they last for a long time, because if You want Your software to be usable over a long time period, then its dependencies must be available over the same long time period and the money-burning-flashlight-technologies don't survive the \"financing winters\". (The term \"financing winter\" comes from the term \"AI winter\", which stood for a period, where artificial intelligence research had extra hard difficulties obtaining any financing, because the old computers of the era did not deliver on the glory promises of the former AI researchers, who promised talking and understanding robots and alike.)\n\nThank You for reading my post and other references :-)",
			"post_id": 42,
			"date_added": 1508985502
		}
	],
	"comment_vote": {}
}