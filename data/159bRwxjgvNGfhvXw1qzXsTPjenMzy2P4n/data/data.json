{
	"title": "eventi's ZeroBlog",
	"description": "[Tiddly Wiki](tiddle.html)\n---\n[eventi@zeroid.bit](http://127.0.0.1:43110/Mail.ZeroNetwork.bit/?to=eventi)\n[@eventi](http://twitter.com/eventi)",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 14,
	"demo": false,
	"modified": 1459246525,
	"post": [
		{
			"post_id": 13,
			"title": "Bitcoin Faucets are mostly not worth it...",
			"date_published": 1459246378.809,
			"body": "But this one is paying out about 20000 satoshi per reCatcha, and doesn't make you wait to play again... last night watching Daredevil I made about 0.01 btc, which is not bad while idly watching TV\n\nhttp://10000satoshi.com/register?ref=233527"
		},
		{
			"post_id": 12,
			"title": "Why ZeroNet?",
			"date_published": 1459005735.609,
			"body": "[ZeroPolls: Why are you using ZeroNet?](/ZeroPolls.bit/?Poll:1-1DcDDitsjFJohvwonPmpibRChmA7uGxqL7)\n\nComment if it's for a reason I didn't mention"
		},
		{
			"post_id": 11,
			"title": "Pick a card... any card",
			"date_published": 1458995197.001,
			"body": "Here's a cool way to shuffle cards without the need for any player to trust any other player, and yet be assured that it's a fair shuffle.\n\nTo illustrate, let the cards can be represented by [01234] and there are two players, of course named Alice and Bob.\n\nFirst Alice encrypts each card with the same key.  In this comically over simplified case, the encryption algorithm is adding the key to the card value, (modulo 10).\n\nSo Alice adds 7 to each card (mod 10):\n```\n [01234]\n+[77777] (mod 10)\n=[78901]\n```\nand shuffles the cards `[97810]`\n\nBob adds 4 to each card \n```\n [97810]\n+[44444]\n=[31254]``` \n\nand reshuffles `[21435]`\n\nAlice can then remove her initial encryption without learning the actual card values (since Bob's encryption is still in place).\n\n```\n [21435]\n-[77777]\n=[54738] \n```\n  She then encrypts using a different key for each card:\n```\n [54768]\n+[12345]\n=[66003]\n```\nAnd Bob does the same: remove his encryption\n```\n [66003]\n-[44444]\n=[22669]\n```\nreencrypt with a different key for each card:\n```\n [22669]\n+[24680]\n=[46249]\n```\nNow they both agree that Alice should get the first and third cards, so Bob publicizes part of his key that represents those cards, and Alice uses it to reveal her cards:\n```\n  [46249]\n -[2x6xx] (Part of Bob's key)\n -[12345] (Alice's Key)\n=[1x3xx] (Cards known to Alice)\n```\n\nAnd Alice shows Bob the parts of her key which Bob is entitled to (the second and fourth cards)\n```\n  [46249]\n -[x2x4x] (Part of Alice's key)\n -[24680] (Bob's Key)\n=[x0x2x] (Cards known to Bob)\n```\n\n"
		},
		{
			"post_id": 9,
			"title": "An IOU idea",
			"date_published": 1458271251.091,
			"body": "I thought about this a long time ago, right when I started working for a company who made FaceBook apps... An IOU based money transfer system.\n\nAlice wants Bob to wash his car.\nBob wants to buy Carl's record player.\nCarl needs to pay his landlord Dave.\n\nSuppose Alice trusts Bob enough to loan him $20. After that, she wouldn't loan him anything until the $20 was returned, and then he'd again be able to borrow $20. We could say that Alice trusts Bob for $20.\n\nWe could record each person's trust of another like this:\n\nAlice>Bob $20\nAlice>Carl $100 (Carl is a very good friend)\nBob>Carl $45\nCarl>Alice $20\nCarl>Bob $50\nDave->Alice $50\nDave->Carl $40\n\nYou see that Bob doesn't trust Alice, but he trusts Carl for $45 who trusts Alice for $20.  So if Alice wanted to borrow from Bob, she could write a $20 IOU to Carl in exchange for a $20 IOU from him, and then give that to Bob. So effectively Bob>Alice $20\n\nThis would change the values in the original table:\n\nAlice>Bob $20\nAlice>Carl $100\nBob>Carl $25(-20)\nCarl>Alice $0(-20)\nCarl>Bob $50\nDave->Alice $50\nDave->Carl $40\n\nAlice would owe Carl $20, Carl owes Bob $20\n\nYou could even borrow from multiple people to pay one person, say Bob borrows $20 from Alice and $30 from Carl to pay Dave (who doesn't trust Bob)\n\nAlice>Bob $0(-20)\nAlice>Carl $100\nBob>Carl $25(-20)\nCarl>Alice $0(-20)\nCarl>Bob $20(-30)\nDave->Alice $50\nDave->Carl $40\n\nAlice owes Carl $20, Carl owes Bob $20, Bob owes Alice $20 and Carl $30\n\nAlice now has a $20 IOU from Bob, and uses it to pay Carl. Carl uses that same IOU to pay back Bob, and the network gets simplified:\n\nAlice>Bob $20\nAlice>Carl $100\nBob>Carl $45\nCarl>Alice $20\nCarl>Bob $20(-30)\nDave->Alice $50\nDave->Carl $40\n\nBob owes Carl $30\n\nI think I may have messed up a bit, but you get the idea...  If this were all computerized, an algorithm would travel the network looking for opportunities to simplify itself and keep track of outstanding IOUs.\n\nI never did get around to implementing it, but it's always been stuck in my head\n\n\n"
		},
		{
			"post_id": 7,
			"title": "FEED THE SEEDER!!!",
			"date_published": 1457461922.227,
			"body": "This is a cool idea: collect site URLs and proactively headlessly retrieve them, thereby increasing the seeds.\n\nhttp://127.0.0.1:43110/1LtvsjbtQ2tY7SCtCZzC4KhErqEK3bXD4n"
		},
		{
			"post_id": 5,
			"title": "Social Ideas",
			"date_published": 1457285790.084,
			"body": "1. Registration: User registers at directory which maps userids to their (self hosted) social.json\n`zero://social.bit/eventi@zeroit.bit => zero://eventi.bit/social.json`\n2. User hosted app returns appropriate json for permission level\n_please forgive my pseudo json_\n```json\n{ \n\t\"public\" : [\n\t\t\"linkedin\" : \"eventi.bit/linked.json\",\n\t\t\"twitter\" : \"eventi.bit/twitter.json\"\n\t],\n\t\"friends\": [\n\t\t\"facebook\":  \"eventi.bit/face.json\",\n\t\t\"listening\": \"eventi.bit/listen.json\"\n\t]\n}\n```\n\t\t \n- Discovery: Following a user\n-- look up user in directory\n-- get relevant feed\n- Example\n-- twitterlike app\n--- get list of followed ids\n--- get their social.json URLS from the directory\n--- access their user.twitter.tweets object\n--- store in reverse time order\n"
		},
		{
			"post_id": 4,
			"title": "Finally Synced Namecoin!!!",
			"date_published": 1457269747.996,
			"body": "Hopefully I'll be [eventi.bit](/eventi.bit) soon... praying my namecoin stays alive long enough\n\nhttp://127.0.0.1:43110/cryptonbits.bit/?Post:4:How+to+connect+your+.bit+domain+with+your+Zeronet+site\n\nAnd then I'll have to do \n\nhttp://127.0.0.1:43110/1QLLPpowM6BWxKYKops1WkCafuFPhFBnAx/?Post:3:Using+.bit+domains"
		},
		{
			"post_id": 3,
			"title": "Using the Multiuser plugin",
			"date_published": 1457258499.996,
			"body": "```bash\n#enable the plugin\nmv plugins/disable-Multiuser plugins/Multiuser\n```\nNow restart zeronet, and when you reconnect to [ZeroHello](/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D) , you'll see that it has created a new identity for you:\n![image alt](http://i.imgur.com/TAI3xgb.png)\nGo ahead and save that somewhere (I recommend [pass](https://www.passwordstore.org/)) and click the \"OK, Saved it\" button\n\nHead to [ZeroID](/zeroid.bit) and assume a new identity\n![image](http://i.imgur.com/Owb81sw.png)\n![image](http://i.imgur.com/WfCPPth.png)\n\nAnd you'll see you can use it at [ZeroMail](/Mail.ZeroNetwork.bit) or any site that accepts identities from zeroid.bit\n![image](http://i.imgur.com/q6lhGpC.png)\n\n- Log out\n![image](http://i.imgur.com/gh8a98Z.png)\n![image](http://i.imgur.com/wSOHvpc.png)\n\n- Log back in as original user\nGet your initial private key from here, click \"Login\" and paste into the box\n```\n#get your previous master\ngrep master_seed data/users.json\n```\n\n**UPDATE**\nRunning this plugin disables a few functions which many of us find desirable, including deleting sites.\n\nA few selective edits to this file will fix that email me for more info if you need help\n\nhttps://github.com/HelloZeroNet/ZeroNet/commit/36d3268cf7de35ea51d423f0f2767e903b5fb077\n"
		}
	]
}