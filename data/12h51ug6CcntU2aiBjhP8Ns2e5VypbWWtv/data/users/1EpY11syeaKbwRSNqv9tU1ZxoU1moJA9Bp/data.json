{
	"next_comment_id": 6,
	"user_name": "loligod@zeroid.bit",
	"hub": "1oranGeS2xsKZ4jVsu9SVttzgkYXu4k9v",
	"post_like": {},
	"comment": [
		{
			"comment_id": 1,
			"body": "That's completely understandable. Tron is semi-centralized. ",
			"post_uri": "1FKuNsExQML7APuNmkCV8uzB5pKupcmnck_1550341473",
			"date_added": 1550529774
		},
		{
			"comment_id": 2,
			"body": "@Piloth The Mack: [It's true](https://questions.coincheckup.com/tron/is-tron-trx-centralized-decentralized-or-semi-centralized/). But there isn't much public information on it because it's directly built into the protocol (and who wants to look at boring stuff like that). Makes it really fast though. Like really really fast. ",
			"post_uri": "1FKuNsExQML7APuNmkCV8uzB5pKupcmnck_1550341473",
			"date_added": 1550531475
		},
		{
			"comment_id": 3,
			"body": "My rule of thumb is when you need to subtask a subtask break the TODOs up into different parent tasks. Then use function calls to abstract the functionality out in a more understandable way. ",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1551370100",
			"date_added": 1551373035
		},
		{
			"comment_id": 4,
			"body": "Generally speaking (but not in all cases) when you have subtasks of subtasks somewhere you will need to call then on other tasks as well. A perfect example of this is specific Database calls. Most people want to do it within the function for the call but sometimes need to do the same thing other places too. If you do it more than twice on different functions always abstract it out into it's own function and return result that way. Ya it takes more time and can be cluttered if you don't break up tasks into different classes but that is something you should be doing anyway. :D",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1551370100",
			"date_added": 1551373355
		},
		{
			"comment_id": 5,
			"body": "Tree based TODOs are great but you need to have a way to reference other tasks and subtasks which prevents you from needing to replicate things cluttering up your application. Abstract syntax tree structures with polymorphism for all subtasks would be the holy grail of a TODO tree based manager in my opinion. ",
			"post_uri": "1GnJD7CXskmG8GywMbTvbP12wneCFW9XzR_1551370100",
			"date_added": 1551374055
		}
	]
}