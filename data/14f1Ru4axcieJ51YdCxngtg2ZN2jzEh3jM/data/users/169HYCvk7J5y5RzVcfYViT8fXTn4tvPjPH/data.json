{
	"file": {
		"1554425180-86005-32578868ab4925e268f5780.png": {
			"title": "3257886-8ab4925e268f5780",
			"size": 230197,
			"date_added": 1554425180
		},
		"1554425318-689408-325788684e5e44c58f16020.png": {
			"title": "3257886-84e5e44c58f16020",
			"size": 260299,
			"date_added": 1554425318
		},
		"1554425354-810096-325788649a0eb24edc0355d.png": {
			"title": "3257886-49a0eb24edc0355d",
			"size": 309256,
			"date_added": 1554425354
		}
	},
	"next_topic_id": 2,
	"topic": [
		{
			"topic_id": 1554425557,
			"title": "ZeroNet之反向代理与正向代理",
			"body": "#1.概念\n\n正向代理是一个位于客户端和目标服务器之间的代理服务器(中间服务器)。为了从原始服务器取得内容，客户端向代理服务器发送一个请求，并且指定目标服务器，之后代理向目标服务器转交并且将获得的内容返回给客户端。正向代理的情况下客户端必须要进行一些特别的设置才能使用。\n\n反向代理正好相反。对于客户端来说，反向代理就好像目标服务器。并且客户端不需要进行任何设置。客户端向反向代理发送请求，接着反向代理判断请求走向何处，并将请求转交给客户端，使得这些内容就好似他自己一样，一次客户端并不会感知到反向代理后面的服务，也因此不需要客户端做任何设置，只需要把反向代理服务器当成真正的服务器就好了。\n\n#2.区别\n\n正向代理需要你主动设置代理服务器ip或者域名进行访问，由设置的服务器ip或者域名去获取访问内容并返回；而反向代理不需要你做任何设置，直接访问服务器真实ip或者域名，但是服务器内部会自动根据访问内容进行跳转及内容返回，你不知道它最终访问的是哪些机器。\n\n正向代理是代理客户端，为客户端收发请求，使真实客户端对服务器不可见；而反向代理是代理服务器端，为服务器收发请求，使真实服务器对客户端不可见。\n\n从上面的描述也能看得出来正向代理和反向代理最关键的两点区别：\n\n   - 是否指定目标服务器\n\n   - 客户端是否要做设置\n    下面用一张图来表示两者的差异：\n \n![ 3257886-8ab4925e268f5780.png](data/users/169HYCvk7J5y5RzVcfYViT8fXTn4tvPjPH/1554425180-86005-32578868ab4925e268f5780.png =50x100)\n\n正向代理中，proxy和client同属一个LAN，对server透明； 反向代理中，proxy和server同属一个LAN，对client透明。 实际上proxy在两种代理中做的事都是代为收发请求和响应，不过从结构上来看正好左右互换了下，所以把前者那种代理方式叫做正向代理，后者叫做反向代理。\n  从用途上来区分：\n\n- 正向代理：正向代理用途是为了在防火墙内的局域网提供访问internet的途径。另外还可以使用缓冲特性减少网络使用率\n- 反向代理：反向代理的用途是将防火墙后面的服务器提供给internet用户访问。同时还可以完成诸如负载均衡等功能\n\n  从安全性来讲：\n\n- 正向代理：正向代理允许客户端通过它访问任意网站并且隐蔽客户端自身，因此你必须采取安全措施来确保仅为经过授权的客户端提供服务\n- 反向代理：对外是透明的，访问者并不知道自己访问的是代理。对访问者而言，他以为访问的就是原始服务器\n\n#3. 使用场景\n正向代理的典型用途是为在防火墙内的局域网客户端提供访问Internet的途径。正向代理还可以使用缓冲特性减少网络使用率。反向代理的典型用途是将 防火墙后面的服务器提供给Internet用户访问。反向代理还可以为后端的多台服务器提供负载平衡，或为后端较慢的服务器提供缓冲服务。\n\n##3.1 正向代理\n从上面的介绍也就可以猜出来正向代理的至少一个功能（俗称翻墙），也即：\n用户A无法访问facebook，但是能访问服务器B，而服务器B可以访问facebook。于是用户A访问服务器B，通过服务器B去访问facebook，，服务器B收到请求后，去访问facebook，facebook把响应信息返回给服务器B，服务器B再把响应信息返回给A。这样，通过代理服务器B，就实现了翻墙。\n\n##3.2 反向代理\n从上面的介绍也可以猜出来反向代理的至少一个功能（比如负载均衡），也即：\n假设用户A访问 `http://www.somesite.com/something.html` ，但`www.somesite.com`上并不存在`something.html`页面，于是接收用户请求的该服务器就偷偷从另外一台服务器上取回来，然后返回给用户，而用户并不知道`something.html`页面究竟位于哪台机器上。\n反向代理的作用就比较多了，这里简单列举一下：\n\n- 保护和隐藏原始资源服务器\n- 加密和SSL加速\n- 负载均衡\n- 缓存静态内容\n- 压缩\n- 减速上传\n- 安全\n- 外网发布\n\n保护和隐藏原始资源服务器\n \n![ 3257886-84e5e44c58f16020.png](data/users/169HYCvk7J5y5RzVcfYViT8fXTn4tvPjPH/1554425318-689408-325788684e5e44c58f16020.png =500x100)\n\n用户A始终认为它访问的是原始服务器B而不是代理服务器Z，但实用际上反向代理服务器接受用户A的应答，从原始资源服务器B中取得用户A的需求资源，然后发送给用户A。由于防火墙的作用，只允许代理服务器Z访问原始资源服务器B。尽管在这个虚拟的环境下，防火墙和反向代理的共同作用保护了原始资源服务器B，但用户A并不知情。\n\n负载均衡\n \n![ 3257886-49a0eb24edc0355d.png](data/users/169HYCvk7J5y5RzVcfYViT8fXTn4tvPjPH/1554425354-810096-325788649a0eb24edc0355d.png =500x100)\n\n当反向代理服务器不止一个的时候，我们甚至可以把它们做成集群，当更多的用户访问资源服务器B的时候，让不同的代理服务器Z（x）去应答不同的用户，然后发送不同用户需要的资源。\n\n----\n\n两者的区别在于代理的对象不一样：正向代理代理的对象是客户端，反向代理代理的对象是服务端。\n\n最常用的反向代理就是[frp软件](https://github.com/fatedier/frp)，可以帮助内网中zeronet打开端口，有助于联通。",
			"added": 1554425556,
			"parent_topic_uri": "1517729130_1K7tW4WEbso38uMs4RN3W7GihA6tTqrApz"
		}
	],
	"topic_vote": {
		"1517729130_1K7tW4WEbso38uMs4RN3W7GihA6tTqrApz": 1
	},
	"next_comment_id": 1,
	"comment": {},
	"comment_vote": {}
}