{
	"next_topic_id": 10,
	"topic": [
		{
			"topic_id": 1586067894,
			"title": "经常问的问题",
			"body": "# 经常问的问题\n\n\n#### 我需要打开一个端口吗？\n\n这是 __可选的__, 您可以在没有开放端口的情况下浏览和使用零网站点。\n如果你想要创建自己的新站点，强烈建议你把端口打开。\n\n在启动时，零网尝试使用[UPnP](https://wikipedia.org/wiki/Universal_Plug_and_Play)在您的路由器上为您打开一个端口\n，如果失败了，您必须手动操作：\n\n - 尝试使用[http://192.168.1.1](http://192.168.1.1) 或 [http://192.168.0.1](http://192.168.0.1) 访问路由器的网站界面\n - 查找“启用UPnP支持”或类似选项，然后重新启动零网。\n\n如果它仍然不起作用，那么尝试找到路由器网页页面的“端口转发”部分。 不同的路由器有不同的显示。 [这是YouTube上的教程。](https://www.youtube.com/watch?v=aQXJ7sLSz14) 要转发端口默认是15441。\n\n\n---\n\n\n#### 零网是匿名的吗？\n\n它具有和BitTorrent相同的匿名性，随着网络和站点获得更多的节点，隐私性（找出谁是评论/站点所有者的可能性）将会增加。\n\n零网可与匿名网络配合使用：您可以使用Tor网络轻松隐藏你的IP地址。\n\n---\n\n\n#### 如何在Tor浏览器中使用零网？\n\n在Tor模式下，建议在Tor浏览器中使用零网：\n\n- 启动Tor浏览器\n- 进入地址 `about:config` 并接受风险警告\n- 点击 `Settings...`\n- 搜索 `no_proxies_on`\n- 双击首选项条目\n- 进入地址 `127.0.0.1` 并按 OK\n- 在浏览器中打开[http://127.0.0.1:43110](http://127.0.0.1:43110)\n\n如果您仍然看到空白页：\n\n - 单击NoScript按钮（工具栏上第一个）\n - 选择 “临时允许所有页面”\n - 重新加载页面\n \n---\n\n\n#### 如何在Tor上使用零网？\n\n如果你想隐藏你的IP, 安装最新版的零网然后点击 Tor > 对ZeroHello上的每个连接开启Tor。\n\n在Windows平台上, Tor已经打包在零网中。 零网将在第一次运行时会尝试下载并解压Tor。 If this fails for any reason, you can install it manually following the instruction in `core\\tools\\tor\\manual_install.txt`.\n\n对其他操作系统, 遵循这\"如何在Linux/MacOS中使零网工作在Tor网络上？\"这部分建议。\n\n> __小提示:__ 你可以使用零网[统计](http://127.0.0.1:43110/Stats)页面验证你的IP地址。\n\n> __小提示:__ 如果你连接错误，确保你使用的是最新版本的Tor。 (0.2.7.5+ required)\n\n\n---\n\n\n#### 如何在Linux/MacOS中使零网工作在Tor网络上？\n\n - 遵循Tor官方指南安装对应系统下的Tor: [Linux](https://www.torproject.org/docs/tor-doc-unix.html.en) [Mac](https://www.torproject.org/docs/tor-doc-osx.html.en)。\n - `sudo nano /etc/tor/torrc`\n - Remove the `#` character from lines `ControlPort 9051` and `CookieAuthentication 1` (line ~57)\n - 重启 tor\n - Add permission for yourself to read the auth cookie. With Debian Linux, the command is `sudo usermod -a -G debian-tor [yourlinuxuser]`<br>(if you are not on Debian check the file's user group by `ls -al /var/run/tor/control.authcookie`)\n - Logout/Login with your user to apply group changes\n\n> __小提示:__ Use the `ls -ld /var/run/tor` command to make sure it has the correct `drwxr-sr-x` permission bits. (fix it with `chmod g+sx /var/run/tor/` if necessary)\n\n> __小提示:__ You can verify if your Tor setup is running correctly using `echo 'PROTOCOLINFO' | nc 127.0.0.1 9051`\n\n> __小提示:__ It's also possible to use Tor without modifying torrc (or to use older versions of Tor clients), by running `zeronet.py --tor disable --proxy 127.0.0.1:9050 --disable_udp`, but then you will lose ability to talk with other .onion addresses.\n\n\n\n---\n\n#### 是否可以使用配置文件？\n\n任何命令行配置标志也可以用作配置选项。 将这些选项逐行放入零网的顶级目录（具有zeronet.py的那一层目录）中`zeronet.conf`的文件中。 例如：\n\n```\n[global]\ndata_dir = my-data-dir\nlog_dir = my-log-dir\nui_restrict =\n 1.2.3.4\n 2.3.4.5\n```\n\n要列出可能的选项，请使用`zeronet.py --help`命令\n\n---\n\n\n#### 如果我的ISP或政府阻止它，如何使Tor工作？\n\nZeroNet does not include [Tor pluggable transports](https://www.torproject.org/docs/pluggable-transports.html.en) yet. The easiest way to make Tor work in a censored network is to start the Tor browser, configure it to connect to the Tor network with working pluggable transports, and modify ZeroNet's config to use Tor browser's proxy and control port by starting ZeroNet with `--tor_controller 127.0.0.1:9151 --tor_proxy 127.0.0.1:9150` or by adding these parameters to `zeronet.conf`.\n\n```\n[global]\ntor_controller = 127.0.0.1:9151\ntor_proxy = 127.0.0.1:9150\n```\n\n\n---\n\n\n#### 我可以在多台机器上使用相同的账号吗？\n\n是的，你可以。只需将`data/users.json`文件复制到新机器上即可。\n\n\n---\n\n\n#### 如何创建“很酷的”（非.bit）网站地址？\n\n用[vanitygen](https://bitcointalk.org/index.php?topic=25804.0) 生成一个. 一旦得到你的公钥, 创建 `data/1YourPublicKey...tCkBzAXTKvJk4uj8` 目录. 放些文件在那儿.\n\n然后访问 [http://127.0.0.1:43110/1YourPublicKey...tCkBzAXTKvJk4uj8/](http://127.0.0.1:43110/1YourPublicKey...tCkBzAXTKvJk4uj8/). 拖`0` 按钮到左边并在侧边栏中签名你的站点。\n\n\n---\n\n\n#### 如何注册.bit域名？\n\n你可以使用[Namecoin](https://namecoin.info/)注册.bit域名。\n使用客户端的界面或[命令行界面](https://github.com/namecoin/wiki/blob/master/How-to-register-and-configure-.bit-domains.md)管理你的域名。\n\n当注册完成后，你必须通过添加一个zeronet项编辑你的域名记录， 例如：\n\n```\n{\n...\n    \"zeronet\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\",\n    \"map\": {\n        \"blog\": { \"zeronet\": \"1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8\" },\n        \"talk\": { \"zeronet\": \"1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\" }\n    },\n...\n}\n```\n\n> __小提示:__ 其他注册.bit域名的方法: [domaincoin.net](https://domaincoin.net/), [peername.com](https://peername.com/), [dotbit.me](https://dotbit.me/)\n\n> __小提示:__ 你可以在[namecha.in](http://namecha.in/)验证你的域名, 例如: [zeroid.bit](http://namecha.in/name/d/zeroid)\n\n> __小提示:__ 你应该只使用 [小写字母, 数字 在你的域名中](http://wiki.namecoin.info/?title=Domain_Name_Specification_2.0#Valid_Domains)。\n\n> __小提示:__ 要让ZeroHello显示你的域名而不是你的站点比特币地址，添加一个域名项到你的content.json中。 ([示例](https://github.com/HelloZeroNet/ZeroBlog/blob/master/content.json#L6))\n\n\n---\n\n\n#### 我可以使用生成的网站地址/私钥接受比特币付款吗？\n\n是的，这是一个标准的比特币地址。 私钥是WIF格式的，因此您可以在大多数客户端中导入它。\n\n> __小提示:__ 我们不建议您在网站的地址上保留大量资金，因为每次修改网站时都必须输入私钥。\n\n\n---\n\n\n#### 有人托管恶意内容会发生什么？\n\n零网站点是在沙盒中的，它们具有与您通过网络访问的任何常见网站相同的权限。\n您可以完全控制您所托管的内容。 如果您发现可疑内容，您可以随时停止托管该站点。\n\n---\n\n\n#### 是否可以将零网安装到远端机器上？\n\n是的，但你必须启用UiPassword插件。只需将__plugins/disabled-UiPassword__目录重命名为 __plugins/UiPassword__就可以了。然后使用<br>`zeronet.py --ui_ip \"*\" --ui_password anypassword`在远端机器上启动零网。\n这会将零网网页服务器绑定到所有接口，但为保证安全，您只能通过输入给定的密码来访问它。\n\n> __小提示:__ 您还可以使用`--ui_restrict ip1 ip2`来限制基于IP地址的接口。\n\n> __小提示:__ 您可以通过创建一个`zeronet.conf`文件并在其中添加`[global]`和`ui_password = anypassword`行来在配置文件中指定密码。\n\n\n---\n\n\n#### 有没有办法跟踪零网正在使用的带宽？\n\n可以，零网侧边栏中的 已发送/已接受 字节。<br>(通过拖动右上方的`0`按钮到左侧可以打开侧边栏)\n\n> __小提示:__ 每个连接的流量统计: [http://127.0.0.1:43110/Stats](http://127.0.0.1:43110/Stats)\n\n\n---\n\n\n#### 如果两个人使用相同的私钥修改网站会发生什么？\n\n每个content.json文件都带有时间戳，客户端始终接受具有有效签名的最新那个文件。\n\n\n---\n\n\n#### 零网是否用到比特币中的区块链技术？\n\n不，零网仅使用到比特币加密技术来对站点地址和内容进行签名/验证。\n用户识别也用到比特币的[BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)格式。\n\n域名币的区块链用在域名注册中，但客户不会下载区块链。 但区块链元数据可通过零网网络传播。\n\n\n---\n\n\n#### 零网是否仅支持HTML，CSS网站？\n\n零网是为动态，实时更新的网站而构建的，但您可以使用它来托管任何类型的文件，例如（VCS库，您自己的瘦客户端，数据库等）。\n\n\n---\n\n\n#### 如何创建新的零网站点？\n\n[请遵循这些说明。](../using_zeronet/create_new_site/)\n\n---\n\n\n#### 当我访问站点时会发生什么？\n\n- 当您想要打开一个新站点时，它会向BitTorrent跟踪器询问访问者的IP地址。\n- 最初，一个名为 __content.json__ 的文件被下载下来，该文件包含所有其他文件的文件名，\n  __哈希值__ 和站长的加密签名。\n- 下载的content.json文件将通过使用站点的 __地址__ 和该文件中站长的 __签名__ 被进一步 __验证__ 。\n- 然后其他文件(html, css, js...)被 __下载下来__ 并被通过它们的大小和来自content.json中的SHA512哈希值验证.\n- 每个访问过的站点然后又 __被你托管着__ .\n- 如果站长（拥有站点地址的私钥的人）修改了站点， 然后他签名了新的content.json文件并__将它发布给其他节点__。在节点验证了文件的完整性后（通过签名）， 节点们将__下载修改后的文件__ 并将新content文件发给其他节点。\n\n更多信息:\n [零网 示例站点](../using_zeronet/sample_sites/),\n [零网如何工作的演示文档](https://docs.google.com/presentation/d/1_2qK1IuOKJ51pgBvllZ9Yu7Au2l551t3XBgyTSvilew/pub)",
			"added": 1586067893,
			"parent_topic_uri": "1517729130_1K7tW4WEbso38uMs4RN3W7GihA6tTqrApz"
		},
		{
			"topic_id": 1586068021,
			"title": "zeronet 开发相关",
			"body": "",
			"added": 1586068019,
			"parent_topic_uri": "1517729130_1K7tW4WEbso38uMs4RN3W7GihA6tTqrApz",
			"type": "group"
		},
		{
			"topic_id": 1586068048,
			"title": "入门知识",
			"body": "# 入门\n\n零网允许您在分布式网络平台上发布静态和动态网站。\n\n在零网中，没有服务器的概念。 因此，不需要像PHP或Ruby这样的服务器语言。 相反，可以使用零网的API（称为ZeroFrame），JavaScript（或CoffeeScript）以及提供给所有网站的SQL数据库来创建动态内容。\n\n## 教程\n\n### ZeroChat教程\n\n在本教程中，我们将在不到100行代码中构建一个P2P，分布式，无服务器的聊天站点。\n\n* [Read on ZeroBlog](http://127.0.0.1:43110/Blog.ZeroNetwork.bit/?Post:99:ZeroChat+tutorial)\n* [Read on Medium.com](https://decentralize.today/decentralized-p2p-chat-in-100-lines-of-code-d6e496034cd4)\n\n## 有用的信息\n\n### 零网调试模式\n\n零网可以使用`--debug`标签来让网站开发变得更容易。\n\n运行零网的调试模式: `python zeronet.py --debug`\n\n如果你正在使用编译版的零网:\n\n* 在Windows平台上: `lib\\ZeroNet.cmd --debug`\n* 在Linux平台上: `./ZeroNet.sh --debug`\n* 在Mac平台上: `./ZeroNet.app/Contents/MacOS/ZeroNet --debug`\n\n#### 调试模式特点：\n\n- 自动的[CoffeeScript](http://coffeescript.org/) -> JavaScript转换 (如果安装了coffeescript编译器)\n- 调试消息将显示在控制台上\n- 当一些源文件被修改后自动重新加载(UiRequest, UiWebsocket, FileRequest)，进而避免了重启(需要 [PyFilesystem](http://pyfilesystem.org/) on GNU/Linux)\n- `http://127.0.0.1:43110/Debug` 在最新的错误发生处的可回溯和交互式Python控制台 (用到很酷的Werkzeug调试器 - 需要 [Werkzeug](http://werkzeug.pocoo.org/))\n- `http://127.0.0.1:43110/Console` 生成一个交换式Python控制台 (需要 [Werkzeug](http://werkzeug.pocoo.org/))\n\n### 编写CoffeeScript\n\n为帮助编写基于CoffeeScript脚本的零网站点并充分利用零网的内部的CoffeeScript -> JavaScript转换器, 首先开启调试模式[Debug](#zeronet-debug-mode)。 另外，确保你希望工作的站点被标记为你自己的站点，只需在站点侧边栏中开启\"这是我的站点\"。\n\n<!-- 这是正确的吗? -->\n零网会把全部的CoffeeScript文件编译成一个叫`all.js`的文件, 同时将它部署在你站点顶级目录下的一个叫`js/`文件夹中。 这个文件同时会包括你所有的JavaScript代码。 然后你可以仅仅导入你所有的动态代码到你HTML文件中，仅需在`</body>`标签前添加:\n\n```html\n<script type=\"text/javascript\" src=\"js/all.js?lang={lang}\"></script>\n```\n\n<!-- 为什么? -->\n!!! info \"Note\"\n\n    `{lang}`是一个 *预置变量*, 当加载站点时，会自动被零网替换为合适的值。\n\t\n\t\n### 禁用HTTP浏览器缓存\n\n除了调试模式之外，在浏览器中禁用HTTP缓存是零网站点开发的必要部分。 现代网页浏览器尝试尽其可能地缓存网页内容。 由于所有零网站点都在iframe中运行，因此网页浏览器无法检测到零网站点内容何时发生更改，因此如果启用了HTTP缓存，则通常不会反映站点的更改。\n\n要禁用，请打开浏览器的开发者工具，导航到开发者工具设置，然后选中“禁用HTTP缓存（勾选框选中时）”选项。 根据设置建议，确保在测试站点更新时，保持开发者工具打开！\n\n### 额外功能（仅适用于您拥有的网站）\n\n - 合并的CSS文件: 站点文件夹的全部CSS文件将会被合并成一个叫`all.css`的文件。 你可以选择在你的站点中只包含这个文件就够了。 如果你想让开发变得容易，进而想包括其他CSS文件， 你可以将它们添加到站点 `content.json`的忽视项中。 这样做，它们不会随着你站点的发布而被发布出去。 (例如: 在站点的`content.json`中添加 `\"ignore\": \"(js|css)/(?!all.(js|css))\"` 这将会忽略除`all.js`和`all.css`的所有CSS和JS文件)\n - 合并的JS文件: 站点文件夹的全部JS文件将会被合并成一个叫`all.js`的文件。 如果CoffeeScript编译器存在，它将会转换`.coffee`为`.js`.\n - 合并到all.css/all.js中的文件顺序: 首先，在css/js文件夹中文件排到最前面； 在css/js文件夹中的文件将根据文件名顺序被依次合并(01_a.css, 02_a.css, 等)\n\n## 需要帮助？\n\n零网拥有一个逐渐成长的开发者社区，开发者们四处闲逛。 如果您想寻求帮助，建议或只是想要闲逛，请随时联系以下服务：\n\n### 论坛\n\n* [ZeroExchange](http://127.0.0.1:43110/zeroexchange.bit/), 一个P2P版的StackOverflow\n* [ZeroTalk](http://127.0.0.1:43110/Talk.ZeroNetwork.bit/), 一个P2P类似Reddit的论坛\n\n### 聊天室\n\n* [#zeronet-dev:matrix.org](https://riot.im/app/#/room/#zeronet-dev:matrix.org) on Matrix\n* IRC at #zeronet on Freenode",
			"added": 1586068045,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068113,
			"title": "ZeroFrame API参考",
			"body": "# ZeroFrame API参考\n\n## ZeroFrame的API\n\nZeroFrame是一个允许零网网站与零网守护进程交互的API。 它允许站点保存/检索文件，发布更新和许多其他内容。 每当创建新站点时，库的拷贝放在了`js/ZeroFrame.js`中。\n\n和JavaScript文件一样，这个库也可以从外部导入。或者站点开发者也可以选择[通过NPM导入](ZeroFrame API Page, ##Import?)。 有关API详细信息，请参阅[ZeroFrame API参考]()。\n\n## 封装器\n\n与iframe外部代码交互的命令。\n\n\n### wrapperConfirm\n显示带有确认的通知。\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    message = '你确定要删除这个吗？'\n    buttonTitle = '删除'\n\n    zeroframe.cmd 'wrapperConfirm', [message, buttonTitle], (confirmed) =>\n      if confirmed\n        console.log '正在删除帖子...'\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    let message = '你确定要删除这个吗？';\n    let buttonTitle = '删除';\n\n    zeroframe.cmd('wrapperConfirm', [message, buttonTitle], (confirmed) => {\n      if (confirmed) {\n        console.log('正在删除帖子...');\n      }\n    };\n    ```\n\n    **输出:**\n\n    用户点击确认:\n\n    ```javascript\n    \"正在删除帖子...\"\n    ```\n\n    !!! info \"注释\"\n\n        如果用户拒绝通知，则不运行回调函数。\n---\n\n\n### wrapperInnerLoaded\n由于URL中的`#anchors` 只适用于外部网页，而不适用于ZeroNet站点所在的内部iframe，因此必须使用此命令。当站点完全加载时，调用此方法将当前锚应用于内部iframe的`src`URL中。\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperInnerLoaded', []\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperInnerLoaded', []);\n    ```\n\n    **输出:**\n\n    如果用户点击 `http://127.0.0.1:43110/mysite.bit#my-title`:\n\n    ```\n    [Wrapper] 添加哈希到目标处 http://127.0.0.1:43110/mysite.bit/?wrapper_nonce=some_nonce#my-title\n    ```\n\n\t\n---\n\n### innerLoaded\n[wrapperInnerLoaded](#wrapperinnerloaded)的别名。\n\n---\n\n\n### wrapperGetLocalStorage\n检索ZeroNet站点本地存储的内容。\n\n!!! info \"注释\"\n\n    由于ZeroNet站点都在同一个域上运行，因此本地存储技术上是由所有站点共享的，这具有安全风险。 因此UiWrapper将每个站点划分为只能访问它们自己站点的那部分。\n\n**返回**: JSON格式的此站点本地存储。\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd \"wrapperGetLocalStorage\", [], (res) =>\n      res ?= {}\n      console.log \"本地存储值:\", res\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd(\"wrapperGetLocalStorage\", [], (res) => {\n      res = res || {};\n      console.log(\"本地存储值:\", res);\n    });\n    ```\n\n    **输出:**\n\n    如果本地存储是空:\n\n    ```javascript\n    本地存储内容: {}\n    ```\n\n    如本地存储已通过[wrapperSetLocalStorage](#wrappersetlocalstorage)修改:\n\n    ```javascript\n    本地存储内容: {\"score\": 500}\n    ```\n\n---\n\n### wrapperGetState\n从浏览器返回当前选项卡的历史状态。\n\n**返回**: 浏览器的当前历史状态对象。\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperGetState', {}, (state) ->\n      console.log state\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperGetState', {}, (state) => {\n      console.log(state);\n    });\n    ```\n\n    **输出:**\n\n    ```\n    null\n    ```\n\t\n---\n\n### wrapperGetAjaxKey\n**返回**: 检索可用于发出ajax（XMLHTTPRequest，fetch）请求的密钥。\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperGetAjaxKey', {}, (ajax_key) ->\n      req = new window.XMLHttpRequest()\n      req.open 'GET', \"content.json?ajax_key=#{ajax_key}\"\n      # Optional: only if you want to request a partial file\n      # req.setRequestHeader 'Range', 'bytes=10-200'\n      req.onload = ->\n        console.log req.response\n      req.send()\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperGetAjaxKey', {}, (ajax_key) => {\n      const req = new window.XMLHttpRequest();\n      req.open('GET', `content.json?ajax_key=${ajax_key}`);\n      // Optional: only if you want request partial file\n      // req.setRequestHeader('Range', 'bytes=10-200');\n      req.onload = () => {\n        console.log(req.response);\n      };\n      req.send();\n    });\n    ```\n\n    **输出:**\n\n    我们需要的文件。 在本例中，是当前站点的`content.json`:\n\n    ```javascript\n    {\n      \"address\": \"1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D\",\n      \"address_index\": 66669697,\n      \"background-color\": \"#FFF\",\n      \"description\": \"\",\n      \"files\": {\n        \"index.html\": {\n        \"sha512\": \"542f7724432a22ceb8821b4241af4d36cfd81e101b72d425c6c59e148856537e\",\n        \"size\": 1114\n        },\n        \"js/ZeroFrame.js\": {\n        \"sha512\": \"42125c7aa72496455e044e3fd940e0f05db86824c781381edb7a70f71a5f0882\",\n        \"size\": 3370\n        }\n      },\n      \"ignore\": \"\",\n      \"inner_path\": \"content.json\",\n      \"modified\": 1541199581,\n      \"postmessage_nonce_security\": true,\n      \"signers_sign\": \"G6Aq7MXMzCjvEdqCToGTDZ7mrsCfaQzZdoBqHg4Cle2NHGno1Pgx2dvgeTFpsWkFP/oAA4CHKt2Zu+KueJM+7Mg=\",\n      \"signs\": {\n        \"1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D\": \"COr0M7+egjY29ZhW7mQp4MPHYuwrgOKVk6kl1CnRPef2QPbUQARYigo0cId8nIs7Y6Fnaj+uHR2HPvh09XVGb1Q=\"\n      },\n      \"signs_required\": 1,\n      \"title\": \"my site\",\n      \"translate\": [\"js/all.js\"],\n      \"zeronet_version\": \"0.6.4\"\n    }\n    ```\n\n    !!! info \"注释\"\n        \n\t\t建议使用这种情况与非零网源通信。 这不是为站点检索文件内容的推荐方法。 对这种情况，使用[fileGet](#fileget)命令代替。\n\n\t\t从其他ZeroNet站点检索文件可以通过[CORS plugin](#plugin-cors)完成。\n\n        你也可以使用来自`ZeroFrame.js`的`monkeyPatchAjax`函数来补充默认的XMLHTTPRequest和fetch实现。\n\n---\n\n### wrapperNotification\n展示一个通知。\n\n参数                   | 描述\n                  ---  | ---\n**type**               | 可以的值: info, error, done\n**message**            | 你想显示的消息\n**timeout** (可选)     | 超过此间隔后隐藏展示 (毫秒)\n\n**返回**: None\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperNotification', ['done', '您的注册信息已发送!', 10000]\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperNotification', ['done', '您的注册信息已发送!', 10000]);\n    ```\n\n\n---\n\n### wrapperOpenWindow\n导航或打开一个新的弹出窗口。\n\n参数                   | 描述\n                  ---  | ---\n**url**                | 打开页面的地址\n**target** (可选)      | 目标窗口的名字\n**specs** (可选)       | 窗口的特殊属性 (见: [window.open](https://developer.mozilla.org/en-US/docs/Web/API/Window/open))\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperOpenWindow', ['https://zeronet.io', '_blank', 'width=550,height=600,location=no,menubar=no']\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperOpenWindow', ['https://zeronet.io', '_blank', 'width=550,height=600,location=no,menubar=no']);\n    ```\n\n---\n\n\n### wrapperPermissionAdd\n为站点请求新的允许权限。\n\n参数             | 描述\n             --- | ---\n**permission**   | 允许的名字 (例如 Merger:ZeroMe)\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperPermissionAdd', ['Merger:ZeroMe'], (res) ->\n      if res == 'ok'\n        console.log '权限已授予。'\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperPermissionAdd', ['Merger:ZeroMe'], (res) => {\n      if (res === 'ok') {\n        console.log('权限已授予。');\n      }\n    });\n    ```\n\n    **输出:**\n\n    如果用户接受了请求的权限:\n\n    ```\n    权限已授予。\n    ```\n\n    如果用户拒绝了或没有回答请求，该方法将不会运行。\n\n\t\n---\n\n### wrapperPrompt\n提示用户输入文本。\n\n参数                | 描述\n               ---  | ---\n**message**         | 你想显示的消息\n**type** (可选)     | 输入的类型 (例如 `text`, `password`)\n\n**返回**: 输入的文本。\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    # 提示输入站点的私钥\n    zeroframe.cmd 'wrapperPrompt', ['Enter your private key:', 'password'], (privatekey) ->\n      # 签名并发布 content.json\n      zeroframe.cmd 'sitePublish', [privatekey], (res) ->\n        console.log '发布结果:', res\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe = new ZeroFrame();\n\n    // 提示输入站点的私钥\n    zeroframe.cmd('wrapperPrompt', ['Enter your private key:', 'password'], function(privatekey) {\n      // 签名并发布 content.json\n      zeroframe.cmd('sitePublish', [privatekey], function(res) {\n        console.log('发布结果:', res);\n      });\n    });\n    ```\n\n    **输出:**\n\n    ```\n    发布结果: ok\n    ```\n\n\n---\n\n### wrapperPushState\n改变地址同时为浏览器历史添加新的条目。 见[JavaScript pushState](https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method). 还可以参见 [wrapperReplaceState](#wrapperreplacestate)。\n\n参数                | 描述\n               ---  | ---\n**state**           | 状态javascript对象\n**title**           | 此页面的标题\n**url**             | 此页面的地址\n\n**返回**: None\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperPushState', [{'scrollY': 100}, 'Profile page', 'Profile']\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperPushState', [{'scrollY': 100}, 'Profile page', 'Profile']);\n    ```\n\n\n---\n\n### wrapperReplaceState\n更改网址且不向浏览器的历史记录添加新条目。 参见[JavaScript replaceState](https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_replaceState()_method)。\n\n参数                | 描述\n               ---  | ---\n**state**           | 状态javascript对象\n**title**           | 页面标题\n**url**             | 页面的网址\n\n**返回**: None\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperReplaceState', [{'scrollY': 100}, 'Profile page', 'Profile']\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperReplaceState', [{'scrollY': 100}, 'Profile page', 'Profile']);\n    ```\n\n\t\n---\n\n### wrapperRequestFullscreen\n设置当前页面为全屏. (在第一次通话时请求网站的许可)\n\n!!! warning \"弃用\"\n\n    从ZeronetRev3136开始，您可以直接使用全屏JavaScript的API，而无需首先询问封装器.\n\n将当前页面设置为全屏。\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd('wrapperRequestFullscreen')\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperRequestFullscreen')\n    ```\n\n\n---\n\n### wrapperSetLocalStorage\n设置为站点存储的浏览器本地存储数据\n\n参数                   | 描述\n                  ---  | ---\n**data**               | 你想为此站点存储的任何数据结构\n\n**返回**: None\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    setTimeout(->\n      zeroframe.cmd 'wrapperSetLocalStorage', {'score': 500}, (res) =>\n        console.log '分数已保存。'\n    , 100)\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    import 'js/ZeroFrame.js'\n\n    setTimeout(() => {\n      zeroframe.cmd('wrapperSetLocalStorage', {'score': 500}, (res) => {\n        console.log('分数已保存。');\n      });\n    }, 100);\n\n    const zeroframe = new ZeroFrame();\n    ```\n\n    !!! info \"注释\"\n\n        `wrapperSetLocalStorage`依赖于`site_info`, 这是一个包含站点信息的对象，该站点在ZeroFrame加载时从ZeroNet后台程序检索。 为了允许这种情况发生，我们将“wrapperSetLocalStorage”的执行延迟了100毫秒。\n\n    **输出:**\n\n    如果本地存储为空:\n\n    ```javascript\n    分数已保存。\n    ```\n\n\n---\n\n### wrapperSetTitle\n设置该站点的标题。\n\n参数                   | 描述\n                  ---  | ---\n**title**              | 新的浏览器标签页标题\n\n**返回**: None\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperSetTitle', '我的新标题'\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperSetTitle', '我的新标题');\n    ```\n\n    站点标题现在将会是`我的新标题`。\n\n\n---\n\n\n### wrapperSetViewport\n设置网站的视区元标签内容（移动手机网站所需）。\n\n\n参数                | 描述\n               ---  | ---\n**viewport**        | 视区元标签内容\n\n**返回**: None\n\n??? \"示例\"\n\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'wrapperSetViewport', 'width=device-width, initial-scale=1.0'\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('wrapperSetViewport', 'width=device-width, initial-scale=1.0');\n    ```\n\n\n---\n\n\n## UiServer\n\nUiServer将完成所有'后端'工作（例如：查询数据库，访问文件等）。 这些是让网站动态化所需的API调用。\n\n### announcerInfo\n当前站点的跟踪程序统计信息\n\n**返回**:\n```json\n{\n\t\"stats\": {\n\t\t\"zero://45.77.23.92:15555\": {\n\t\t\t\"status\": \"announced\",\n\t\t\t\"num_success\": 1,\n\t\t\t\"time_last_error\": 0,\n\t\t\t\"time_status\": 1541776998.782,\n\t\t\t\"num_request\": 1,\n\t\t\t\"time_request\": 1541776996.884,\n\t\t\t\"num_error\": 0\n\t\t},\n\t\t...\n\t}\n}\n```\n\n\n### certAdd\n向当前用户添加新的证书。\n\n参数                 | 描述\n                 --- | ---\n**domain**           | 证书颁发者域名\n**auth_type**        | 注册时使用的Auth类型\n**auth_user_name**   | 注册时使用的用户名\n**cert**             | 证书本身: 由证书站点所有者签名的字符串 `auth_address#auth_type/auth_user_name` \n\n**返回**: `\"ok\"`, `\"Not changed\"` 或者 `{\"error\": error_message}`。\n\n**示例:**\n```coffeescript\n@cmd \"certAdd\", [\"zeroid.bit\", auth_type, user_name, cert_sign], (res) =>\n\t$(\".ui\").removeClass(\"flipped\")\n\tif res.error\n\t\t@cmd \"wrapperNotification\", [\"error\", \"#{res.error}\"]\n```\n\n\n---\n\n\n### certSelect\n显示证书选择器。\n\n参数                         | 描述\n\t\t\t\t         --- | ---\n**accepted_domains** （可选）| 站点接受为授权提供者的域列表\n**accept_any** （可选）      | 不限制接受的证书提供者\n**accepted_pattern**（可选） | 接受的证书提供者地址的正则表达式模式\n\n**返回**: None\n\n**示例:**\n```coffeescript\n@cmd \"certSelect\", {\"accepted_domains\": [\"zeroid.bit\"], \"accepted_pattern\": \"1ZeroiD[0-9]\"}\n```\n\n\n---\n\n\n### channelJoin\n\n请求有关网站活动的通知。\n\n参数        | 描述\n        --- | ---\n**channel** | 将加入的频道\n\n**返回**: None\n\n**Channels**:\n\n - **siteChanged** (默认加入的)<br>事件: peers_added, file_started, file_done, file_failed\n\n**示例**:\n```coffeescript\n# 封装器websocket连接就绪\nonOpenWebsocket: (e) =>\n\t@cmd \"channelJoinAllsite\", {\"channel\": \"siteChanged\"}\n\n# 路由传入的请求和消息\nroute: (cmd, data) ->\n\tif cmd == \"setSiteInfo\"\n\t\t@log \"站点已改变\", data\n\telse\n\t\t@log \"未知命令\", cmd, data\n```\n\n**示例事件数据**\n```json\n{\n\t\"tasks\":0,\n\t\"size_limit\":10,\n\t\"address\":\"1RivERqttrjFqwp9YH1FviduBosQPtdBN\",\n\t\"next_size_limit\":10,\n\t\"event\":[ \"file_done\", \"index.html\" ],\n\t[...] # Same as siteInfo return dict\n}\n\n```\n\n\n---\n\n\n### dbQuery\n在sql缓存上执行查询\n\n参数                 | 描述\n                 --- | ---\n**query**            | Sql查询命令\n**params**           | 此sql查询的子参数\n\n**返回**: 数组格式的查询结果。\n\n\n**示例:**\n```javascript\nPage.cmd(\"dbQuery\", [\n   \"SELECT * FROM json WHERE file_name = :file_name\",\n   {file_name: \"data.json\"}\n], (res) => { console.log(res.length) })\n```\n\n```javascript\nPage.cmd(\"dbQuery\", [\n    \"SELECT * FROM json WHERE file_name IN :file_names\",\n    {file_names: [\"data.json\", \"content.json\"]}\n], (res) => { console.log(res.length) })\n```\n\n```javascript\nPage.cmd(\"dbQuery\", [\n    \"SELECT * FROM json ?\",\n    {file_name: [\"data.json\", \"content.json\"]}\n], (res) => { console.log(res.length) })\n```\n\n\n```coffeescript\n@log \"Updating user info...\", @my_address\nPage.cmd \"dbQuery\", [\"SELECT user.*, json.json_id AS data_json_id FROM user LEFT JOIN json USING(path) WHERE path='#{@my_address}/data.json'\"], (res) =>\n\tif res.error or res.length == 0 # Db not ready yet or No user found\n\t\t$(\".head-user.visitor\").css(\"display\", \"\")\n\t\t$(\".user_name-my\").text(\"Visitor\")\n\t\tif cb then cb()\n\t\treturn\n\n\t@my_row = res[0]\n\t@my_id = @my_row[\"user_id\"]\n\t@my_name = @my_row[\"user_name\"]\n\t@my_max_size = @my_row[\"max_size\"]\n```\n\n\n---\n\n\n### dirList\n列出目录的内容\n\n参数             | 描述\n             --- | ---\n**inner_path**   | 要列出的目录\n\n**返回**: 文件及目录名的列表\n\n\n---\n\n\n### fileDelete\n删除一个文件。\n\n参数             | 描述\n             --- | ---\n**inner_path**   | 要想删除的文件\n\n**返回**: 成功时返回\"ok\"，否则返回错误消息。\n\n\n---\n\n\n### fileGet\n获取一个文件的内容。\n\n参数                    | 描述\n                    --- | ---\n**inner_path**          | 想要得到的文件\n**required** (可选) | 如果文件不存在，尝试并等待该文件。 (默认值: True)\n**format** (可选)   | 返回数据的编码格式。 (text or base64) (默认值: text)\n**timeout** (可选)  | 数据到达的最长等待时间 (默认值: 300)\n\n**返回**: <string> 文件的内容。\n\n\n**示例:**\n```coffeescript\n# 对ZeroTalk主题进行投票\nsubmitTopicVote: (e) =>\n\tif not Users.my_name # 未注册\n\t\tPage.cmd \"wrapperNotification\", [\"info\", \"Please, request access before posting.\"]\n\t\treturn false\n\n\telem = $(e.currentTarget)\n\telem.toggleClass(\"active\").addClass(\"loading\")\n\tinner_path = \"data/users/#{Users.my_address}/data.json\"\n\n\tPage.cmd \"fileGet\", [inner_path], (data) =>\n\t\tdata = JSON.parse(data)\n\t\tdata.topic_votes ?= {} # 如果不存在则创建\n\t\ttopic_address = elem.parents(\".topic\").data(\"topic_address\")\n\n\t\tif elem.hasClass(\"active\") # 向主题添加投票\n\t\t\tdata.topic_votes[topic_address] = 1\n\t\telse # 从主题中删除投票\n\t\t\tdelete data.topic_votes[topic_address]\n\n\t\t# 写入文件并发布到其他节点\n\t\tPage.writePublish inner_path, Page.jsonEncode(data), (res) =>\n\t\t\telem.removeClass(\"loading\")\n\t\t\tif res == true\n\t\t\t\t@log \"File written\"\n\t\t\telse # 失败\n\t\t\t\telem.toggleClass(\"active\") # Change back\n\n\treturn false\n```\n\n\n---\n\n\n### fileList\n文件夹中的文件列表\n\n参数             | 描述\n             --- | ---\n**inner_path**   | 需要显示的文件夹\n\n**返回**: 文件夹中的文件列表（递归）\n\n\n---\n\n\n### fileNeed\n（可选）文件下载的初始化。\n\n参数                    | 描述\n                    --- | ---\n**inner_path**          | 你想要得到的文件\n**timeout** (可选)      | 数据到达的最长等待时间 (默认值: 300)\n\n**返回**: 成功下载后返回 `\"ok\"`\n\n\n---\n\n### fileQuery\n简单的json文件查询命令\n\n参数                 | 描述\n                 --- | ---\n**dir_inner_path**   | 查询文件的模式\n**query**            | 查询命令（可选）\n\n**返回**: 以数组形式匹配内容。\n\n**查询示例:**\n\n - `[\"data/users/*/data.json\", \"topics\"]`: 从全部用户文件中返回话题项\n - `[\"data/users/*/data.json\", \"comments.1@2\"]`: 从全部用户文件中返回`user_data[\"comments\"][\"1@2\"]`值\n - `[\"data/users/*/data.json\", \"\"]`: 从全部用户文件中返回全部数据\n - `[\"data/users/*/data.json\"]`: 从全部用户文件中返回全部数据 (和上面一样)\n\n**示例:**\n```coffeescript\n@cmd \"fileQuery\", [\"data/users/*/data.json\", \"topics\"], (topics) =>\n\ttopics.sort (a, b) -> # Sort by date\n\t\treturn a.added - b.added\n\tfor topic in topics\n\t\t@log topic.topic_id, topic.inner_path, topic.title\n```\n\n\n---\n\n\n### fileRules\n返回文件的规则。\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 文件内部路径\n\n**返回**: 数组格式的匹配内容。\n\n**示例结果:**\n\n```json\n{\n\t\"current_size\": 2485,\n\t\"cert_signers\": {\"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"]},\n\t\"files_allowed\": \"data.json\",\n\t\"signers\": [\"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\"],\n\t\"user_address\": \"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\",\n\t\"max_size\": 100000\n}\n```\n\n**示例:**\n```coffeescript\n@cmd \"fileRules\", \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\", (rules) =>\n\t@log rules\n```\n\n\n---\n\n\n### fileWrite\n\n在文件中写内容\n\n\n参数               | 描述\n               --- | ---\n**inner_path**     | 要写入文件的内部路径\n**content_base64** | 要写入文件的内容（base64格式编码）\n\n**返回**: 成功返回`\"ok\"`，否则返回错误消息。\n\n**示例:**\n```coffeescript\nwriteData: (cb=null) ->\n\t# 编码为json，编码为utf8\n\tjson_raw = unescape(encodeURIComponent(JSON.stringify({\"hello\": \"ZeroNet\"}, undefined, '\\t')))\n\t# 转换为base64格式并发送\n\t@cmd \"fileWrite\", [\"data.json\", btoa(json_raw)], (res) =>\n\t\tif res == \"ok\"\n\t\t\tif cb then cb(true)\n\t\telse\n\t\t\t@cmd \"wrapperNotification\", [\"error\", \"File write error: #{res}\"]\n\t\t\tif cb then cb(false)\n```\n\n_注释:_ 要写content.json中没列出的文件，你必须在你想写的站点的data/sites.json`文件中具有`\"own\": true`项\n\n\n---\n\n\n### ping\n测试UiServer的websocket连接\n\n**返回:** pong\n\n\n---\n\n\n### serverInfo\n\n**返回:** JavaScript对象格式的服务器全部信息。\n\n**示例:**\n```coffeescript\n@cmd \"serverInfo\", {}, (server_info) =>\n\t@log \"Server info:\", server_info\n```\n\n**返回值的示例:**\n```json\n{\n\t\"debug\": true, # 运行在调试模式\n\t\"fileserver_ip\": \"*\", # 绑定的文件服务器\n\t\"fileserver_port\": 15441, # 文件服务器端口\n\t\"ip_external\": true, # 主动或被动模式\n\t\"platform\": \"win32\", # 操作系统\n\t\"ui_ip\": \"127.0.0.1\", # 绑定的网页服务器\n\t\"ui_port\": 43110, # 网页服务器端口\n\t\"version\": \"0.2.5\" # 版本\n}\n```\n\n\n\n\n---\n\n\n### siteInfo\n\n**返回**: JavaScript对象格式的站点全部信息\n\n**示例:**\n```coffeescript\n@cmd \"siteInfo\", {}, (site_info) =>\n\t@log \"Site info:\", site_info\n```\n\n**返回值示例:**\n```json\n{\n\t\"tasks\": 0, # 目前需下载的文件数\n\t\"size_limit\": 10, # 当前站点大小限制(MB)\n\t\"address\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\", # 站点地址\n\t\"next_size_limit\": 10, # 全部站点文件容量限制\n\t\"auth_address\": \"2D6xXUmCVAXGrbVUGRRJdS4j1hif1EMfae\", # 当前用户的比特币地址\n\t\"auth_key_sha512\": \"269a0f4c1e0c697b9d56ccffd9a9748098e51acc5d2807adc15a587779be13cf\", # 弃用，不再使用\n\t\"peers\": 14, # 站点的节点\n\t\"auth_key\": \"pOBdl00EJ29Ad8OmVIc763k4\", # 弃用，不再使用\n\t\"settings\":  {\n\t\t\"peers\": 13, # 排序需要的节点数\n\t\t\"serving\": true, # 托管站点\n\t\t\"modified\": 1425344149.365, # 全部站点文件的最新修改时间\n\t\t\"own\": true, # 自己的站点\n\t\t\"permissions\": [\"ADMIN\"], # 站点权限\n\t\t\"size\": 342165 # 站点总大小（字节）\n\t},\n\t\"bad_files\": 0, # 需要下载的文件\n\t\"workers\": 0, # 当前正在的下载\n\t\"content\": { # 根content.json\n\t\t\"files\": 12, # 文件数，详细的文件信息被移除以减小数据传输和解析的时间\n\t\t\"description\": \"This site\",\n\t\t\"title\": \"ZeroHello\",\n\t\t\"signs_required\": 1,\n\t\t\"modified\": 1425344149.365,\n\t\t\"ignore\": \"(js|css)/(?!all.(js|css))\",\n\t\t\"signers_sign\": null,\n\t\t\"address\": \"1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr\",\n\t\t\"zeronet_version\": \"0.2.5\",\n\t\t\"includes\": 0\n\t},\n\t\"cert_user_id\": \"zeronetuser@zeroid.bit\", # 为该站点当前选择的账号\n\t\"started_task_num\": 1, # 最新的已下载文件数\n\t\"content_updated\": 1426008289.71 # Content.json更新时间\n}\n```\n\n\n---\n\n\n### sitePublish\n发布站点的content.json\n\n参数                      | 描述\n                      --- | ---\n**privatekey** (可选) | 用于签名的私钥（默认值：当前用户的私钥）\n**inner_path** (可选) | 要发布的内容json的内部路径（默认值：content.json）\n**sign** (可选)       | 如果为True则在发布之前签名content.json（默认值：True）\n\n**返回**: 成功返回`\"ok\"`，否则返回错误消息。\n\n**示例:**\n```coffeescript\n# 提示私钥\n@cmd \"wrapperPrompt\", [\"输入你的私钥:\", \"密码\"], (privatekey) =>\n\t$(\".publishbar .button\").addClass(\"loading\")\n\t# 发送签名的content.json并发布请求到服务器\n\t@cmd \"sitePublish\", [privatekey], (res) =>\n\t\t$(\".publishbar .button\").removeClass(\"loading\")\n\t\t@log \"Publish result:\", res\n```\n\n\n---\n\n\n### siteReload\n重新加载content.json文件内容并扫描可选文件\n\n**返回**: 成功返回\"ok\"\n\n\n---\n\n\n### siteSign\n给站点的content.json签名\n\n参数                               | 描述\n                               --- | ---\n**privatekey** (可选)              | 用于签名的私钥（默认值：当前用户的私钥）\n**inner_path** (可选)              | 要签名的内容json的内部路径（默认值：content.json）\n**remove_missing_optional** (可选) | 从content.json中删除文件夹下不存在的可选文件（默认值：False）\n\n**返回**: 成功返回`\"ok\"`，否则返回错误消息。\n\n> __注释:__\n> 使用定义在users.json中的\"stored\"项作为私钥 (例如 克隆的站点)\n\n**示例:**\n```coffeescript\nif @site_info[\"privatekey\"] # 存储在users.json中的私钥\n\t@cmd \"siteSign\", [\"stored\", \"content.json\"], (res) =>\n\t\t@log \"签名结果\", res\n```\n\n\n---\n\n\n\n### siteUpdate\n\n强制检查并从其他节点下载更新的内容（仅当用户处于被动模式并使用老旧零网时，才需要）\n\n参数          | 描述\n          --- | ---\n**address**   | 想要更新的站点地址（只允许当前站点，不需要站点ADMIN权限）\n\n**返回:** None\n\n**示例:**\n```coffeescript\n# 对被动连接的手动站点更新\nupdateSite: =>\n\t$(\"#passive_error a\").addClass(\"loading\").removeClassLater(\"loading\", 1000)\n\t@log \"Updating site...\"\n\t@cmd \"siteUpdate\", {\"address\": @site_info.address}\n```\n\n\n---\n\n\n### userGetSettings\n\n获取用户保存的设置。\n\n**返回:** 用户使用userSetSettings保存的具体站点设置。\n\n\n---\n\n\n### userSetSettings\n\n设置用户的具体站点的设置。\n\n参数          | 描述\n          --- | ---\n**settings**  | 针对具体站点，想要存储的用户设置\n\n**返回:** 成功时返回`\"ok\"`。\n\n\n---\n\n\n## 插件: Bigfile\n\n\n### BigfileUploadInit\n\n初始化大文件上传。\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 上传的位置\n**size**             | 文件大小\n\n\n**返回**: 词典格式的此次上传信息:\n\n参数                   | 描述\n                   --- | ---\n**url**                | 上传端的Http地址\n**piece_size**         | 文件每个单独哈希部分的大小\n**inner_path**         | 文件的站点内部路径\n**file_relative_path** | 相对content.json的文件路径\n\n> __注释:__ 不支持的非ascii字符将自动从`inner_path`和`file_relative_path`项值中被移除\n\n**示例**\n\n```javascript\nvar input = document.createElement('input')\ndocument.body.appendChild(input)\ninput.type = \"file\"\ninput.style.visibility = \"hidden\"\n\ninput.onchange = () => {\n    var file = input.files[0]\n    page.cmd(\"bigfileUploadInit\", [\"optional/\"+file.name, file.size], (init_res) => {\n        var formdata = new FormData()\n        formdata.append(file.name, file)\n\n        var req = new XMLHttpRequest()\n        req.upload.addEventListener(\"progress\", console.log)\n        req.upload.addEventListener(\"loadend\", () =>\n            page.cmd(\"wrapperConfirm\", [\"上传完成!\", \"打开文件\"],\n                () => { window.top.location = init_res.inner_path }\n            )\n        )\n        req.withCredentials = true\n        req.open(\"POST\", init_res.url)\n        req.send(formdata)\n    })\n}\ninput.click()\n```\n\n\n---\n\n## 插件: Chart\n\n### chartDbQuery\n\n在图表数据库上执行数据库查询。\n\n实参和返回值: 和[dbQuery](#dbquery-query-param)一样\n\n\n### chartGetPeerLocations\n\n在客户端中获取节点列表\n\n**返回**: 节点列表\n\n**示例**:\n```javascript\nPage.cmd(\"chartGetPeerLocations\")\n> [\n>  {lat: 43.6655, city: \"Toronto\", ping: null, lon: -79.4204, country: \"Canada\"},\n> ...\n> ]\n```\n\n---\n\n## 插件: Cors\n\n在虚拟目录**/cors-siteaddress/**下允许跨站点文件访问，并使用[as](#as-address-cmd-arguments)API命令授予跨站点数据库查询。\n\n### corsPermission\n\n请求与给定站点的跨源资源共享权限。\n\n参数                 | 描述\n                 --- | ---\n**address**          | 你想获取cors权限的站点地址\n\n**返回**: 成功时返回`\"ok\"`。\n\n授予权限后，其他站点的文件将通过http请求或fileGet API命令在**/cors-siteaddress/**虚拟目录下变得可用。\n\n如果需要，站点将添加到用户的客户端中。\n\n\n---\n\n## 插件: Multiuser\n\n!!! info \"注释\"\n    以下命令只能由具有\"ADMIN\"[权限](#wrapperpermissionadd)的站点执行。\n\n\n### userLoginForm\n\n请求使用私钥登录。\n\n!!! info \"信息\"\n    多用户插件将获取此私钥，将其转换为主种子。通过在浏览器中设置缓存(例如 `master_address=1bc83cc...`)，您可以指定在所有后续请求中充当哪个用户。\n\n    这个缓存是由UiWrapper作为其WebSocket连接握手的一部分发送的。 选择此方法是因为它不需要修改现有的请求，而且它还可以与托管在单独计算机上的ZeroNet客户端通信(比如 ZeroNet 代理)。\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'userLoginForm', []\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('userShowMasterSeed', []);\n    ```\n\n    **输出:**\n\n    None，登录提示将出现在iframe无法访问的窗口中。\n\n\n### userShowMasterSeed\n\n请求显示用户的私钥。\n\n??? \"示例\"\n    ```coffeescript tab=\"CoffeeScript\"\n    zeroframe = new ZeroFrame()\n\n    zeroframe.cmd 'userShowMasterSeed', []\n    ```\n\n    ```javascript tab=\"JavaScript\"\n    const zeroframe = new ZeroFrame();\n\n    zeroframe.cmd('userShowMasterSeed', []);\n    ```\n\n    **输出:**\n\n    None，私钥将出现在iframe无法访问的窗口中。\n\n\n---\n\n\n## 插件: CryptMessage\n\n\n### userPublickey\n\n获取用户站点的特定公钥。\n\n参数                 | 描述\n                 --- | ---\n**index** (可选)     | 站点内的子公钥。(默认值: 0)\n\n\n**返回**: base64编码的公钥\n\n---\n\n### eciesEncrypt\n\n使用公钥加密文本。\n\n参数                           | 描述\n                           --- | ---\n**text**                       | 需要加密的文本\n**publickey** (可选)           | 用户的公钥索引(int) 或者 base64编码的公钥(默认值: 0)\n**return_aes_key** (可选)      | 获取用到加密的AES关键字 (默认值: False)\n\n\n**返回**: base64格式的加密文本 或者 [base64格式的加密文本，base64格式的AES关键字]\n\n---\n\n### eciesDecrypt\n\n尝试解密文本列表\n\n参数                           | 描述\n                           --- | ---\n**params**                     | 加密文本的列表或文本\n**privatekey** (可选)          | 用户的私钥索引(int) 或者base64编码的私钥(默认值: 0)\n\n\n**返回**: 加密文本解密后的文本或列表 (失败的解码返回空值)\n\n---\n\n### aesEncrypt\n\n使用密钥和iv加密文本\n\n参数                           | 描述\n                           --- | ---\n**text**                       | 需使用AES加密的文本\n**key** (optional)             | Base64编码的密码 (默认值: generate new)\n**iv** (optional)              | Base64编码的iv (默认值: generate new)\n\n\n**返回**: [base64编码的关键字, base64编码的iv, base64编码的加密文本]\n\n\n---\n\n### aesDecrypt\n\n使用IV和AES密钥解密文本\n\n参数                           | 描述\n                           --- | ---\n**iv**                         | Base64格式的IV\n**encrypted_text**             | Base64格式的加密文本\n**encrypted_texts**            | [base64格式的iv, base64格式的加密文本]对列表\n**key**                        | 这段文本的Base64格式密码\n**keys**                       | 解码关键词(对每一对都尝试)\n\n\n**返回**:解码的文本或解码后的文本列表\n\n\n---\n\n\n## 插件: Newsfeed\n\n\n### feedFollow\n\n设置关注的sql查询。\n\nSQL查询应生成具有列的行:\n\n域             | 描述\n           --- | ---\n**type**       | 类型: post, article, comment, mention\n**date_added** | 事件时间\n**title**      | 事件要显示的第一行\n**body**       | 事件的第二和第三行\n**url**        | 链接到事件页\n\n参数           | 描述\n           --- | ---\n**feeds**      | 格式: {\"查询名\": [SQL查询, [参数1, 参数2, ...], ...}, 参数将被转义, 由插入Sql查询的`:params`间的`,`连接。\n\n**返回**: `\"ok\"`。\n\n**示例:**\n```coffeescript\n# 关注ZeroBlog帖子\nquery = \"\n\tSELECT\n\t post_id AS event_uri,\n\t 'post' AS type,\n\t date_published AS date_added,\n\t title AS title,\n\t body AS body,\n\t '?Post:' || post_id AS url\n\tFROM post\n\"\nparams = [\"\"]\nPage.cmd feedFollow [{\"Posts\": [query, params]}]\n```\n\n---\n\n### feedListFollow\n\n当前关注的投喂返回\n\n**返回**: 与feedFollow命令相同格式的当前关注投喂\n\n\n---\n\n### feedQuery\n\n在用户的通知源中执行对关注站点/页面的全部查询。\n\n**返回**: 关注的Sql查询结果\n\n参数                 | 描述\n                 --- | ---\n**limit**            | 每个关注站点的结果数限制 (默认值: 10)\n**day_limit**        | 返回时间不早于此天数 (默认值: 3)\n\n\n---\n\n## 插件: MergerSite\n\n\n### mergerSiteAdd\n\n开始下载新的合并站点。\n\n参数                 | 描述\n                 --- | ---\n**addresses**        | 站点地址或站点地址列表\n\n\n---\n\n### mergerSiteDelete\n\n停止托管并删除一个合并站点。\n\n参数                 | 描述\n                 --- | ---\n**address**          | 站点地址\n\n\n---\n\n### mergerSiteList\n\n返回合并的站点。\n\n参数                 | 描述\n                 --- | ---\n**query_site_info**  | 如果为True，则返回合并站点的详细站点信息\n\n\n---\n\n\n## 插件: Mute\n\n\n### muteAdd\n\n添加新用户到屏蔽列表。 (对非ADMIN权限站点需要确认)\n\n参数                 | 描述\n                 --- | ---\n**auth_address**     | 用户数据的文件夹名\n**cert_user_id**     | 用户的证书用户名\n**reason**           | 屏蔽理由\n\n**返回**: 如果确认返回`\"ok\"`\n\n**示例:**\n```coffeescript\nPage.cmd(\"muteAdd\", ['1GJUaZMjTfeETdYUhchSkDijv6LVhjekHz','helloworld@kaffie.bit','垃圾邮件发送者'])\n```\n\n---\n\n### muteRemove\n\n从屏蔽列表中移除用户。 (对非ADMIN站点要求确认)\n\n参数                 | 描述\n                 --- | ---\n**auth_address**     | 用户数据的文件夹名\n\n**返回**: 如果确认返回`\"ok\"`\n\n**示例:**\n```coffeescript\nPage.cmd(\"muteRemove\", '1GJUaZMjTfeETdYUhchSkDijv6LVhjekHz')\n```\n\n---\n\n### muteList\n\n屏蔽用户列表。 (所在站点要求ADMIN权限)\n\n**返回**: 数组格式的屏蔽用户\n\n\n---\n\n\n## 插件: OptionalManager\n\n\n### optionalFileList\n\n返回可选文件列表\n\n参数                 | 描述\n                 --- | ---\n**address**          | 要列出可选文件的站点地址 (默认值: current site)\n**orderby**          | 返回的可选文件的顺序 (默认值: time_downloaded DESC)\n**limit**            | 返回的可选文件的最大数目 (默认值: 10)\n\n**返回**: 返回的每个可选文件是包含下面列的数据库行:\n\n列名                | 描述\n                --- | ---\n**file_id**         | 文件的ID\n**site_id**         | 文件来自的站点ID\n**inner_path**      | 从站点根目录开始的文件路径\n**hash_id**         | 文件的哈希\n**size**            | 文件的大小（字节）\n**peer**            | 此文件有多少节点\n**uploaded**        | 此文件中有多少字节已上传到其他节点\n**is_downloaded**   | 此文件是否已完全下载\n**is_pinned**       | 是否已锁定此文件\n**time_added**      | 添加此文件的时间\n**time_downloaded** | 此文件下载完成的时间\n**time_accessed**   | 上次访问此文件的时间\n\n---\n\n### optionalFileInfo\n\n查询有关给定路径的单个可选文件的信息。\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 从站点根目录开始的文件路径\n\n**返回**: 具有下面列数据的数据行:\n\n列名                | 描述\n                --- | ---\n**file_id**         | 文件的ID\n**site_id**         | 文件来自的站点ID\n**inner_path**      | 从站点根目录开始的文件路径\n**hash_id**         | 文件的哈希\n**size**            | 文件的大小（字节）\n**peer**            | 此文件有多少节点\n**uploaded**        | 此文件中有多少字节已上传到其他节点\n**is_downloaded**   | 此文件是否已完全下载\n**is_pinned**       | 是否已锁定此文件\n**time_added**      | 添加此文件的时间\n**time_downloaded** | 此文件下载完成的时间\n**time_accessed**   | 上次访问此文件的时间\n\n---\n\n### optionalFilePin\n\n锁定下载的可选文件。该文件现在从自动可选文件清理中排除。\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 此文件的路径\n**address**          | 此文件的地址 (默认值: current site)\n\n---\n\n### optionalFileUnpin\n\n移除下载的可选文件固定。该文件现在包含在自动可选文件清理中。\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 此文件的路径\n**address**          | 此文件的地址 (默认值: current site)\n\n---\n\n### optionalFileDelete\n\n删除下载的可选文件\n\n参数                 | 描述\n                 --- | ---\n**inner_path**       | 此文件的路径\n**address**          | 此文件的地址 (默认值: current site)\n\n---\n\n### optionalLimitStats\n\n返回当前被可选文件占用的磁盘空间\n\n**返回**: limit, used and free space statistics\n\n---\n\n\n### optionalLimitSet\n\n设置可选文件限制\n\n参数                 | 描述\n                 --- | ---\n**limit**            | 以gb或已用空间的百分比表示的可选文件可用最大空间\n\n---\n\n### optionalHelpList\n\n列出可选文件的自动下载目录\n\n参数                 | 描述\n                 --- | ---\n**address**          | 要列出帮助目录的站点地址 (默认值: current site)\n\n**返回**: JavaScript对象格式的自动下载目录和描述。\n\n---\n\n\n### optionalHelp\n\n将目录添加到自动下载列表。\n\n参数                 | 描述\n                 --- | ---\n**directory**        | 想要添加到自动下载列表的目录\n**title**            | 条目标题（显示在ZeroHello上）\n**address**          | 要添加自动下载目录的站点地址（默认值：current site）\n\n---\n\n### optionalHelpRemove\n\n禁止在目录中自动下载可选文件。 仅当网站上启用了[optionalHelp](#optionalhelp)时有效。\n\n参数                 | 描述\n                 --- | ---\n**directory**        | 要从自动下载列表中删除的目录\n**address**          | 站点的地址（默认值：current site）\n\n---\n\n### optionalHelpAll\n\n帮助将每个新上传的可选文件下载到站点\n\n参数                 | 描述\n                 --- | ---\n**value**            | 启用或禁用自动下载\n**address**          | 受影响站点的地址（默认值：current site）\n\n\n---\n\n\n## 管理员命令\n_(在data/sites.json中需要ADMIN权限)_\n\n\n### as\n\n在其他站点的上下文中执行命令\n\n\n参数                 | 描述\n                 --- | ---\n**address**          | 上下文网站的地址\n**cmd**              | API命令名称\n**arguments**        | API命令参数\n\n**返回**: 命令的返回值\n\n\n**示例**\n\n```javascript\nPage.cmd(\"as\", [\"138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP\", \"siteSetLimit\", 20], console.log )\n```\n\n```javascript\naddress = \"138R53t3ZW7KDfSfxVpWUsMXgwUnsDNXLP\"\nquery = \"SELECT * FROM json WHERE file_name = :file_name\"\nparams = {\"file_name\": \"data.json\"}\nPage.cmd(\"as\", [address, \"dbQuery\", [query, params]], function(res) { console.log(res.length) } )\n```\n\n\n### certList\n\n返回有关当前已知身份提供程序证书的信息。\n\n**返回**: 一个对象列表，每个对象表示来自身份提供程序的证书。\n\n**示例**\n\n```javascript\nPage.cmd(\"certSelect\")\n```\n\n```javascript\n[\n  ...\n  {\n    \"auth_type\": \"web\",\n    \"domain\": \"zeroid.bit\",\n    \"selected\": false,\n    \"auth_user_name\": \"username\",\n    \"auth_address\": \"1GUDV...\"\n  },\n  ...\n]\n```\n\n\n### certSet\n\n为当前站点设置使用的证书。\n\n参数                 | 描述\n                 --- | ---\n**domain**           | 证书颁发者的域名\n\n**返回**: None\n\n\n---\n\n\n### channelJoinAllsite\n\n请求有关每个站点事件的通知。\n\n参数                | 描述\n               ---  | ---\n**channel**         | 要加入的频道（请参阅channelJoin）\n\n**返回**: None\n\n\n---\n\n**返回**: ok\n\n### configSet\n\n创建或更新ZeroNet的配置文件中的一个条目。(默认是zeronet.conf)\n\n\n参数                 | 描述\n                 --- | ---\n**key**              | 配置条目名称\n**value**            | 配置条目新值\n\n\n**返回**: ok\n\n---\n\n### serverPortcheck\n\n开始检查端口是否打开\n\n**返回**: True (端口已打开) 或者 False (端口已关闭)\n\n\n---\n\n\n### serverShutdown\n\n停止运行ZeroNet客户端。\n\n**返回**: None\n\n\n\n---\n\n\n### serverUpdate\n\n从github重新下载ZeroNet。\n\n**返回**: None\n\n\n---\n\n\n### siteClone\n将站点文件复制到新站点中。\n\n如果文件或文件夹有`-default`后缀的文件或文件夹版本，他们将会被自动跳过，同时带后缀的版本将会被复制而不是原来的文件或文件夹。\n\n\n例如 如果你有一个`data`和`data-default`文件夹: 这个`data`文件夹将不会被拷贝同时这个`data-default`文件夹会被重新命名为data。\n\n参数                | 描述\n               ---  | ---\n**address**         | 想克隆的网站地址\n**root_inner_path** | 新站点的源文件夹\n\n**返回**: None, 当完成时自动重新导向到新站点\n\n\n---\n\n\n### siteList\n\n**返回**: <list> 所有下载网站的站点信息列表\n\n\n---\n\n\n### sitePause\n暂停网站托管\n\n参数                | 描述\n               ---  | ---\n**address**         | 想要暂停的网站地址\n\n**返回**: None\n\n\n---\n\n\n### siteResume\n恢复网站托管\n\n参数                | 描述\n               ---  | ---\n**address**         | 想要恢复的网站地址\n\n**返回**: None",
			"added": 1586068109,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068237,
			"title": "dbschema.json的结构",
			"body": "# dbschema.json的结构\n\n[dbschema.json示例文件](https://github.com/HelloZeroNet/ZeroTalk/blob/master/dbschema.json)\n\n以下代码将执行以下操作:\n\n - 如果收到一个更新的 data/users/*/data.json 文件 (例如.: 一个用户发布了某些内容):\n   - `data[\"topics\"]` 中的每行都会被存储到 `topic` 表中\n   - `data[\"comment_votes\"]` 中的每个键都会被存储到 `comment_vote` 表的 `comment_hash` 列中，同时每个键值都会被存储到相同行的 `vote` 中\n - 如果收到一个更新的 data/users/content.json 文件 (例如.: 新用户创建):\n   -  `content[\"include\"]` 中的 `\"user_id\", \"user_name\", \"max_size\", \"added\"` 键都会被存储到 `user` 表中，同时相应的键被存储为 `path`\n\n> 注意: [一些限制](content_json/#regular-expression-limitations) 应用于正则表达式中以避免可能的ReDoS脆弱性.\n\n```json\n\n{\n  \"db_name\": \"ZeroTalk\", # 数据库名字 (仅仅用于调试)\n  \"db_file\": \"data/users/zerotalk.db\", # 相对于站点目录的数据库文件\n  \"version\": 2, # 1 = Json table has path column that includes directory and filename\n                # 2 = Json table has separate directory and file_name column\n                # 3 = Same as version 2, but also has site column (for merger sites)\n  \"maps\": { # Json到数据库的映射\n    \".*/data.json\": { # 相对于数据库的文件正则表达式\n      \"to_table\": [ # 加载值到表中\n        {\n          \"node\": \"topics\", # 读取data.json[topics]的键和值\n          \"table\": \"topic\" # 将数据写到topic表中\n        },\n        {\n          \"node\": \"comment_votes\", # 读取data.json[comment_votes]的键和值\n          \"table\": \"comment_vote\", # 将数据写到comment_vote表中\n          \"key_col\": \"comment_hash\",\n            # data.json[comment_votes]是个简单词典, 词典的键\n            # 存储到comment_vote表的comment_hash列\n\n          \"val_col\": \"vote\"\n            # data.json[comment_votes]词典的值存储到comment_vote表的vote列\n\n        }\n      ],\n      \"to_keyvalue\": [\"next_message_id\", \"next_topic_id\"]\n        # 将data.json[next_topic_id]存储到keyvalue表中\n        # (键: next_message_id, 值: data.json[next_message_id] value)\n\n    },\n    \"content.json\": {\n      \"to_table\": [\n        {\n          \"node\": \"includes\",\n          \"table\": \"user\",\n          \"key_col\": \"path\",\n          \"import_cols\": [\"user_id\", \"user_name\", \"max_size\", \"added\"],\n            # 仅仅导入这些列到user表\n          \"replaces\": {\n            \"path\": {\"content.json\": \"data.json\"}\n              # Replace content.json to data.json in the\n              # value of path column (required for joining)\n          }\n        }\n      ],\n      \"to_json_table\": [ \"cert_auth_type\", \"cert_user_id\" ]  # 直接保存cert_auth_type和cert_user_id到json表(更容易、更快的数据查询)\n    }\n  },\n  \"tables\": { # 表定义\n    \"topic\": { # 定义topic表\n      \"cols\": [ # 此表的列\n        [\"topic_id\", \"INTEGER\"],\n        [\"title\", \"TEXT\"],\n        [\"body\", \"TEXT\"],\n        [\"type\", \"TEXT\"],\n        [\"parent_topic_hash\", \"TEXT\"],\n        [\"added\", \"DATETIME\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX topic_key ON topic(topic_id, json_id)\"],\n        # 自动创建的索引\n\n      \"schema_changed\": 1426195822\n        # Last time of the schema changed, if the client's version is different then\n        # automatically destroy the old, create the new table then reload the data into it\n\n    },\n    \"comment_vote\": {\n      \"cols\": [\n        [\"comment_hash\", \"TEXT\"],\n        [\"vote\", \"INTEGER\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX comment_vote_key ON comment_vote(comment_hash, json_id)\", \"CREATE INDEX comment_vote_hash ON comment_vote(comment_hash)\"],\n      \"schema_changed\": 1426195826\n    },\n    \"user\": {\n      \"cols\": [\n        [\"user_id\", \"INTEGER\"],\n        [\"user_name\", \"TEXT\"],\n        [\"max_size\", \"INTEGER\"],\n        [\"path\", \"TEXT\"],\n        [\"added\", \"INTEGER\"],\n        [\"json_id\", \"INTEGER REFERENCES json (json_id)\"]\n      ],\n      \"indexes\": [\"CREATE UNIQUE INDEX user_id ON user(user_id)\", \"CREATE UNIQUE INDEX user_path ON user(path)\"],\n      \"schema_changed\": 1426195825\n    },\n    \"json\": {  # Json table format only required if you have specified to_json_table pattern anywhere\n        \"cols\": [\n            [\"json_id\", \"INTEGER PRIMARY KEY AUTOINCREMENT\"],\n            [\"directory\", \"TEXT\"],\n            [\"file_name\", \"TEXT\"],\n            [\"cert_auth_type\", \"TEXT\"],\n            [\"cert_user_id\", \"TEXT\"]\n        ],\n        \"indexes\": [\"CREATE UNIQUE INDEX path ON json(directory, site, file_name)\"],\n        \"schema_changed\": 4\n    }\n  }\n}\n```\n\n## data.json文件的示例\n```json\n{\n  \"next_topic_id\": 2,\n  \"topics\": [\n    {\n      \"topic_id\": 1,\n      \"title\": \"Newtopic\",\n      \"body\": \"Topic!\",\n      \"added\": 1426628540,\n      \"parent_topic_hash\": \"5@2\"\n    }\n  ],\n  \"next_message_id\": 19,\n  \"comments\": {\n    \"1@2\": [\n      {\n        \"comment_id\": 1,\n        \"body\": \"New user test!\",\n        \"added\": 1423442049\n      }\n    ],\n    \"1@13\": [\n      {\n        \"comment_id\": 2,\n        \"body\": \"hello\",\n        \"added\": 1424653288\n      },\n      {\n        \"comment_id\": 13,\n        \"body\": \"test 123\",\n        \"added\": 1426463715\n      }\n    ]\n  },\n  \"topic_votes\": {\n    \"1@2\": 1,\n    \"4@2\": 1,\n    \"2@2\": 1,\n    \"1@5\": 1,\n    \"1@6\": 1,\n    \"3@2\": 1,\n    \"1@13\": 1,\n    \"4@5\": 1\n  },\n  \"comment_votes\": {\n    \"5@5\": 1,\n    \"2@12\": 1,\n    \"1@12\": 1,\n    \"33@2\": 1,\n    \"45@2\": 1,\n    \"12@5\": 1,\n    \"34@2\": 1,\n    \"46@2\": 1\n  }\n}\n```\n\n## content.json文件的示例\n\n```json\n{\n  \"files\": {},\n  \"ignore\": \".*/.*\",\n  \"includes\": {\n    \"13v1FwKcq7dx2UPruFcRcqd8s7VBjvoWJW/content.json\": {\n      \"added\": 1426683897,\n      \"files_allowed\": \"data.json\",\n      \"includes_allowed\": false,\n      \"max_size\": 10000,\n      \"signers\": [\n        \"13v1FwKcq7dx2UPruFcRcqd8s7VBjvoWJW\"\n      ],\n      \"signers_required\": 1,\n      \"user_id\": 15,\n      \"user_name\": \"meginthelloka\"\n    },\n    \"15WGMVViswrF13sAKb7je6oX3UhXavBxxQ/content.json\": {\n      \"added\": 1426687209,\n      \"files_allowed\": \"data.json\",\n      \"includes_allowed\": false,\n      \"max_size\": 10000,\n      \"signers\": [\n        \"15WGMVViswrF13sAKb7je6oX3UhXavBxxQ\"\n      ],\n      \"signers_required\": 1,\n      \"user_id\": 18,\n      \"user_name\": \"habla\"\n    }\n  }\n}\n```",
			"added": 1586068232,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068261,
			"title": "content.json的结构",
			"body": "# content.json的结构\n\n每个ZeroNet站点都有一个`content.json`文件。 ([content.json示例文件](https://github.com/HelloZeroNet/ZeroTalk/blob/master/content.json))\n\n除其他外，此文件将包含您网站上所有文件的列表以及使用您的私钥创建的签名。 这用于确保站点文件的真实性并避免篡改（即：只有您或您信任的人才能更新您站点的内容）。\n\n以下是支持的`content.json`键列表：\n\n---\n\n## 自动生成\n\n_创建或克隆站点时会自动添加这些键。_\n\n### address\n\n您的网站地址\n\n**示例**: 1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\n\n\n---\n\n\n### address_index\n\nThe site address's BIP32 sub-key index of your BIP32 seed. Auto-added when you clone a site. It allows recovery of the site's privatekey from your BIP32 seed.\n\n**示例**: 30926910\n\n---\n\n\n### cloned_from\n\n仅适用于克隆网站。 克隆站点的站点地址。\n\n**示例**: 1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8\n\n---\n\n\n### clone_root\n\n仅适用于克隆网站。 从中克隆的网站上的子目录。\n\n**示例**: template-new\n\n\n---\n\n\n### files\n\nSize and sha512 hashes of automatically downloaded files contained in your site. Automatically added by the command `zeronet.py siteSign siteaddress privatekey`.\n\n**示例**:\n```python\n    \"css/all.css\": {\n      \"sha512\": \"869b09328f07bac538c313c4702baa5276544346418378199fa5cef644c139e8\",\n      \"size\": 148208\n    }\n```\n\n\n---\n\n\n### files_optional\n\nSize and sha512 hashes of optional files contained in your site. Automatically added by the command `zeronet.py siteSign siteaddress privatekey`.\n\n**示例**:\n```python\n    \"data/myvideo.mp4\": {\n      \"sha512\": \"538c09328aa52765443464135cef644c144346418378199fa5cef61837819538\",\n      \"size\": 832103\n    }\n```\n\n\n\n---\n\n\n### modified\n\n生成content.json的时间。\n\n**示例**: 1425857522.076\n\n\n---\n\n\n### sign (deprecated)\n\nECDSA sign of the content.json file content. (keys sorted, without whitespace and the `sign` and `signers_sign` nodes). For backward compatibility, will be removed soon.\n\n**示例**:\n```python\n  \"sign\": [\n    43117356513690007125104018825100786623580298637039067305407092800990252156956,\n    94139380599940414070721501960181245022427741524702752954181461080408625270000\n  ],\n```\n\n\n---\n\n\n### signers_sign\n\nPossible signer addresses for the root content.json signed using the site address private key. Multiple entries are allowed here, allowing for site Multisig functionality.\n\n**Format of the signed string**: [number_of_signers_required]:[signer address],[signer address]\n\n*示例*:\n```\nsigns_required: 1:1PcxwuHYxuJEmM4ydtB1vbiAY6WkNgsz9G,1CK6KHY6MHgYvmRQ4PAafKYDrg1ejbH1cE\nsigners_sign: MEUCIQDuz+CzOVvFkv1P2ra9i5E1p1G0/1cOGecm7GpLpMLhuwIgBIbCL0YHXD1S2+x48QS5VO/rISrkdLiUR+o+x1X0y1A=\n```\n\n上述签名消息使用的签名地址是\"1PcxwuHYxuJEmM4ydtB1vbiAY6WkNgsz9G\".\n\n---\n\n\n### signs\n\nECDSA signature for the the content.json file content:\n\n - `sign`, `signs` JSON nodes removed\n - JSON dumped with keys sorted alphabetically, without whitespace\n - Signature generated on the dumped data, using Electrum Bitcoin message signature format:\n    * [Message encoding](https://github.com/vbuterin/pybitcointools/blob/87806f3c984e258a5f30814a089b5c29cbcf0952/bitcoin/main.py#L405): `sha256(\"\\x18\" || \"Bitcoin Signed Message:\\n\" || num_to_var_int(len(message)) || message)`\n    * [Serialization format](https://github.com/MuxZeroNet/zerolib/blob/f13126e04bf99b1b416a7ea5b5cad7924cdc15a4/zerolib/integrity/bitcoin.py#L82-L93): `recovery_id || r || s`, where 27 ≤ recovery_id ≤ 30; signature length = 1 + 32 + 32 = 65 bytes.\n    * Double vertical bar `||` denotes byte concatenation.\n\n**示例**:\n```python\n  \"signs\": {\n    \"1TaLk3zM7ZRskJvrh3ZNCDVGXvkJusPKQ\": \"G6/QXFKvACPQ7LhoZG4fgqmeOSK99vGM2arVWkm9pV/WPCfc2ulv6iuQnuzw4v5z82qWswcRq907VPdBsdb9VRo=\"\n  },\n```\n\n\n----\n\n\n### zeronet_version\n\nZeroNet版本用于生成content.json文件。\n\n**Example**: 0.2.5\n\n---\n\n## 可选设置\n\n_如果需要功能，可以添加这些选项。_\n\n\n### background-color\n\n包装器的背景颜色\n\n**示例**: #F5F5F5\n\n\n---\n\n\n### cloneable\n\n如果为**true**，则允许克隆网站。\n\n为了使您的网站可以正确克隆，您必须有一个单独的数据文件夹，以便干净克隆（例如，没有任何博客文章）。要做到这一点，你必须这样做\n将 **-default** 后缀添加到数据文件和目录上。在克隆过程中，仅复制具有 **-default** 后缀的目录，后缀将在新站点中被自动删除。\n\n\n---\n\n\n### description\n\n您的网站描述，显示在ZeroHello的网站标题下。\n\n**示例**: Decentralized forum demo\n\n\n---\n\n\n### domain\n\n您网站的Namecoin域名。 如果用户启用了Zeroname插件，ZeroHello将链接到此。\n\n**示例**: Blog.ZeroNetwork.bit\n\n\n\n\n---\n\n\n### ignore\n\n不要签署与此模式匹配的文件。\n\n**示例**: `((js|css)/(?!all.(js|css))|data/users/.*)` (ignore all js and css files except all.js and all.css and don't add anything from the `data/users/` directory)\n\n注意: [一些限制](#regular-expression-limitations) 应用于正则表达式中.\n\n---\n\n\n### includes\n\n在网站中包含另一个content.json。 这通常用于后续管理用户数据的content.json文件。\n\n**示例**:\n\n```python\n\"includes\": {\n  \"data/users/content.json\": {\n    \"signers\": [  # Possible signers address for the file\n      \"1LSxsKfC9S9TVXGGNSM3vPHjyW82jgCX5f\"\n    ],\n    \"signers_required\": 1 # The *number* of Valid signs required to accept the file (Multisig possibility),\n    \"files_allowed\": \"data.json\", # Preg pattern for the allowed files in the include file\n    \"includes_allowed\": false, # Whether nested includes are allowed\n    \"max_size\": 10000, # Max allowed size of included content.json and files it signs (in bytes)\n  }\n}\n```\n\n\n---\n\n\n### merged_type\n\n该网站所属的合并类型。\n\n**示例**: `ZeroMe`\n\n\n---\n\n\n### optional\n\nPreg模式的可选文件。\n\n**示例**: `(data/mp4/.*|updater/.*)` (data/mp4和updater目录下的所有内容都是可选的)\n\n注意: [一些限制](#regular-expression-limitations) 应用于正则表达式中.\n\n---\n\n\n### signs_required\n\n接受该文件所需的有效标志**数量**。 允许Multisig功能。\n\n\n**示例**: 1\n\n\n---\n\n\n### title\n\n该网站的标题，在浏览器标题和ZeroHello中可见。\n\n**示例**: ZeroTalk\n\n\n----\n\n\n### translate\n\n文件需要翻译。 （在`languages`目录中使用语言json文件）\n\n**示例**: [\"index.html\", \"js/all.js\"]\n\n\n----\n\n\n### favicon\n\n该网站的图标。 用站点特定的图标替换默认的ZeroNet徽标。 可以是.ico，.png，.svg等。\n\n**示例**: favicon.ico\n\n\n----\n\n\n### user_contents\n\n当前目录中允许的用户内容的规则。\n\nNode                   | 描述\n                  ---  | ---\n**archived**           | 删除早于指定时间戳签名的指定用户内容文件夹(键：文件夹名，值：时间戳)\n**archived_before**    | 删除所有签名早于指定时间戳的用户内容文件夹\n**cert_signers**       | 接受的域名和有效的签名者地址\n**permission_rules**   | 基于签名域名或授权方法的允许文件名和总目录大小\n**permissions**        | 每个用户的权限。(false = 禁止的用户)\n\n**示例**:\n```python\n  \"user_contents\": {\n    \"archived\": {\n      \"1165u6pt5mQNFjyhMVwy6azB7bZuQGLA9b\": 1523088096\n    },\n    \"archived_before\": 1523088096,\n    \"cert_signers\": {\n      \"zeroid.bit\": [ \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\" ]\n    },\n    \"permission_rules\": {\n      \".*\": {\n        \"files_allowed\": \"data.json\",\n        \"files_allowed_optional\" : \"\\\\.(png|jpeg|jpg|gif|webm|mp4|ogg|mp3|pdf|epub|zip|tar\\\\.gz)(\\\\.piecemap\\\\.msgpack)\",\n        \"max_size\": 10000,\n        \"max_size_optional\": 10000000\n      },\n      \"bitid/.*@zeroid.bit\": { \"max_size\": 40000 },\n      \"bitmsg/.*@zeroid.bit\": { \"max_size\": 15000 }\n    },\n    \"permissions\": {\n      \"bad@zeroid.bit\": false,\n      \"nofish@zeroid.bit\": { \"max_size\": 100000 }\n    }\n  }\n```\n\n注意: [一些限制](#regular-expression-limitations) 应用于正则表达式中.\n\n----\n\n\n### viewport\n\n视区元标记的内容。 （用于适合移动设备的页面）\n\n**示例**: width=device-width, initial-scale=1.0\n\n\n----\n\n## 正则表达式限制\n\n为避免[ReDoS](https://en.wikipedia.org/wiki/ReDoS)算法复杂性攻击，以下限制适用于每种模式：\n\n - 在`*,+,{`的重复字符之前，`.`字符是必需的\n - 单个模式允许最多9次重复\n - 模式的最大长度为255个字符\n \n### 示例:\n\n - `((?!json).)*$` not allowed, because of `)` before the `*` character. Possible fix: `.*(?!json)$`\n - `(.*.epub|.*.jpg|.*.jpeg|.*.png|data/.*.gif|.*.avi|.*.ogg|.*.webm|.*.mp4|.*.mp3|.*.mkv|.*.eot)` not allowed, because it has 12 `.*` repetition patterns. Possible fix: `.*(epub|jpg|jpeg|png|data/gif|avi|ogg|webm|mp4|mp3|mkv|eot)`",
			"added": 1586068255,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068415,
			"title": "编码标准",
			"body": "# 如果您想与ZeroNet合作，则遵守编码标准\n - 遵循 [PEP8](https://www.python.org/dev/peps/pep-0008/)\n - 简单比复杂好\n - 过早优化是万恶之源\n\n### 命名规则\n - 类名(ClassNames): 大写, 骆驼命名法\n - 函数名(functionNames): 以小写字母开头, 骆驼命名法\n - 变量名(variable_names): 小写, 下划线\n\n### 变量\n - 文件路径(file_path): 相对于工作文件夹的文件路径(data/17ib6teRqdVgjB698T4cD1zDXKgPqpkrMg/css/all.css)\n - 内部路径(inner_path): 相对于站点文件夹的文件路径(css/all.css)\n - 文件名(file_name): all.css\n - 文件(file): Python文件对象\n - 私钥(privatekey): 站点私钥(没有下划线)\n\n### 源文件文件夹和命名\n - 最好一个文件代表一个类\n - 源文件名和目录来自类名(ClassName): WorkerManager类 = Worker/WorkerManager.py",
			"added": 1586068408,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068463,
			"title": "ZeroNet网络协议",
			"body": "# ZeroNet网络协议\n\n - 每条消息均使用[MessagePack](http://msgpack.org/)编码\n - 每个请求具有3个参数:\n    * `cmd`: 请求命令\n    * `req_id`: 请求的唯一id (simple, incremented nonce per-connection), the client has to include this when reply to the command.\n    * `params`: 请求的参数\n - 请求示例: `{\"cmd\": \"getFile\", \"req_id\": 1, \"params:\" {\"site\": \"1EU...\", \"inner_path\": \"content.json\", \"location\": 0}}`\n - 响应示例: `{\"cmd\": \"response\", \"to\": 1, \"body\": \"content.json content\", \"location\": 1132, \"size\": 1132}`\n - 错误响应示例: `{\"cmd\": \"response\", \"to\": 1, \"error\": \"Unknown site\"}`\n\n\n# 握手\n通过向目标网络地址发送请求,每个连接都以握手开始:\n\n参数                 | 描述\n                 --- | ---\n**crypt**            | Null/None, 仅用于响应\n**crypt_supported**  | 客户端支持的一系列连接加密方法\n**fileserver_port**  | 客户端的文件服务器端口\n**onion**            | (仅用于tor)客户的洋葱地址\n**protocol**         | 客户端使用的协议版本(v1或v2)\n**port_opened**      | 客户端的客户端端口打开状态\n**peer_id**          | (未在tor上使用)客户端的peer_id\n**rev**              | 客户的修订号\n**version**          | 客户端版本\n**target_ip**        | 服务器的网络地址\n\n目标基于“crypt_supported”在套接字上初始化加密,然后return:\n\n返回值               | 描述\n                 --- | ---\n**crypt**            | 要使用的加密\n**crypt_supported**  | 服务器支持的连接加密方法数组\n**fileserver_port**  | 服务器的文件服务器端口\n**onion**            | (仅用于tor)服务器的洋葱地址\n**protocol**         | 服务器使用的协议版本(v1或v2)\n**port_opened**      | 服务器的客户端端口打开状态\n**peer_id**          | (未在tor上使用)服务器的peer_id\n**rev**              | 服务器的修订号\n**version**          | 服务器的版本\n**target_ip**        | 客户端的网络地址\n\n> **注意:** .onion连接上不使用加密,因为Tor网络默认提供传输安全性.\n> **注意:** 如果可以假设远程客户端支持SSL,则还可以在握手之前隐式初始化SSL.\n\n**示例**:\n\n发送握手:\n\n```json\n{\n  \"cmd\": \"handshake\",\n  \"req_id\": 0,\n  \"params\": {\n    \"crypt\": None,\n    \"crypt_supported\": [\"tls-rsa\"],\n    \"fileserver_port\": 15441,\n    \"onion\": \"zp2ynpztyxj2kw7x\",\n    \"protocol\": \"v2\",\n    \"port_opened\": True,\n    \"peer_id\": \"-ZN0056-DMK3XX30mOrw\",\n    \"rev\": 2122,\n    \"target_ip\": \"192.168.1.13\",\n    \"version\": \"0.5.6\"\n  }\n}\n```\n\n返回:\n\n```\n{\n \"protocol\": \"v2\",\n \"onion\": \"boot3rdez4rzn36x\",\n \"to\": 0,\n \"crypt\": None,\n \"cmd\": \"response\",\n \"rev\": 2092,\n \"crypt_supported\": [],\n \"target_ip\": \"zp2ynpztyxj2kw7x.onion\",\n \"version\": \"0.5.5\",\n \"fileserver_port\": 15441,\n \"port_opened\": False,\n \"peer_id\": \"\"\n}\n```\n\n# 节点请求\n\n#### getFile _site_, _inner_path_, _location_, _[file_size]_\n向客户端请求文件\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**inner_path**       | 相对于站点目录的文件路径\n**location**         | 此字节中的请求文件(一个请求中最多发送了512个字节,因此您需要多个请求以获取更大的文件)\n**file_size**        | 所需文件的总大小(可选)\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**body**             | 请求的文件内容\n**location**         | 发送的最后一个字节的位置\n**size**             | 文件总大小\n\n\n---\n\n#### streamFile _site_, _inner_path_, _location_, _[file_size]_\n从客户端流式传输文件\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**stream_bytes**     | 消息包有效负载之后的文件数据长度\n\n为了避免python-msgpack序列化大型二进制字符串,文件正文直接附加在MessagePack有效负载之后. 例如,\n\n```\n> {\"cmd\": \"streamFile\", \"id\": 1, \"inner_path\": \"content.json\", \"size\": 1234}\n< {\"cmd\": \"response\", \"to\": 1, \"stream_bytes\": 1234}\n< content of the file\n```\n\n> ZeroNet实施细节:对于大于256 kb的文件段,默认情况下启用流.\n\n---\n\n\n#### ping\n检查客户端是否还活着\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**body**             | Pong\n\n\n---\n\n\n#### pex _site_, _peers_, _need_\n与客户端交换对等体.\n同行打包到 6 bytes (4byte IP使用 inet_ntoa + 2byte 用于端口)\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**peers**            | 请求者已打包的对等方列表\n**peers_onion**      | 请求者已打包的Tor Onion对等方列表\n**need**             | 请求者想要的对等体数\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**peers**            | 他为该站点拥有的IPv4对等方列表(打包)\n**peers_onion**      | 此网站的Tor Torion同行列表(打包)\n\n“peer”列表中的每个元素都是一个打包的IPv4地址.\n\nIP地址     | 端口\n---------- | ----\n`4 bytes`  | `2 bytes`\n\n`peers_onion` 列表中的每个元素都是一个打包的Tor Onion服务地址.\n\nB32解码的Tor地址           | 端口\n------------------------- | ----\n`binary_str[0:-2]`        | `binary_str[-2:]`\n\n要恢复洋葱地址,请将第一部分通过`base64.b32encode`传递,并将`.onion`附加到返回值.\n\n---\n\n#### update _site_, _inner_path_, _body_, _[diffs]_\n更新一个站点文件.\n\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**inner_path**       | 相对于站点目录的文件路径\n**body**             | 更新后的content.json的完整内容\n**diffs** (optional) | [Diff opcodes](#possible-diff-opcodes) 用于content.json中的修改文件\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**ok**               | 更新成功提示消息:)\n\n##### 格式差异\n\n包含修改的字典\n\n - Key: 更改了文件到content.json的相对路径(例如:`data.json`)\n - Value: 文件的不同操作码的列表(例如:'[['=',5],['+','\\ nello new line'],['-',6]]`)\n\n##### 可能的不同操作码:\n\n操作码                                   | 描述\n                                     --- | ---\n**['=', 相同的字符]**     | 尚未更改文件的一部分(例如:`['=',5]`)\n**['+', 新字符]**                      | 添加的字符(例如:“ ['+”,` \\ nhello新行”]`)\n**['-', 删除字符数]**  | 更新文件的完整内容(例如:`['-', 6]`)\n\n收到更新后,客户端将尝试使用差异修补文件.\n如果它与content.json(具有不同版本的文件)提供的sha哈希不匹配,它将自动从更新的发件人重新下载整个文件.\n\n> __提示:__ 补丁程序每个文件限制为30KB,仅用于.json文件\n\n---\n\n#### listModified _site_, _since_\n列出自给定参数以来修改的content.json文件. 它曾经用于获取站点的用户提交的内容.\n\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**since**            | 自此时间戳以来,列出content.json文件.\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**modified_files**   | Key: content.json inner_path <br>值:上次修改日期\n\n**示例**:\n\n```json\n> zeronet.py --silent peerCmd 127.0.0.1 15441 listModified \"{'site': '1BLogC9LN4oPDcruNz3qo1ysa133E9AGg8', 'since': 1497507030}\"\n{\n  \"to\": 1,\n  \"cmd\": \"response\",\n  \"modified_files\": {\n    \"data/users/1NM9k7VJfrb1UWw5agAvyRfSn3ws1wTJ5U/content.json\": 1497579272,\n    \"data/users/1QEfmMwKVxgR4rkREbdJYjgUmF3Zy8pwHt/content.json\": 1497565986,\n    \"data/users/16NS3rBdW9zpLmLSQoD8nLTtNVsRFtVBhd/content.json\": 1497575039,\n    \"data/users/1CjXarXgvcNeCJ2nMQxUi4DRFWp3GEur2W/content.json\": 1497513808,\n    \"data/users/1L5rGDgTs4W2V7gekSvJNhKa7XaHkVwotD/content.json\": 1497615798,\n    \"data/users/1LWuc6JBhUGrKEAh1aPrPU85dEMcKmg3pS/content.json\": 1497594716,\n    \"data/users/1KdnTJVBGzEZrJppFZtzfG9chukuMv8xSb/content.json\": 1497584640,\n    \"data/users/1GMNmr2bDPbT4c8yVnyCoDHke52CNCdqAa/content.json\": 1497614188,\n    \"data/users/1GRm9rED83Tkfi3iWS9m3LWHiRpPZehWLd/content.json\": 1497827772,\n    \"data/users/12Ugp53jiMdvj1Kxa1w7c2LcXUBdGPs1oK/content.json\": 1497692901,\n    \"data/users/1F6BMqittjWUStzUbRXm2kG2GQ3RdBLqFQ/content.json\": 1497571485,\n    \"data/users/1GgNo3CmxPd7n2pMSF3uyqf1XHvgtTUqCe/content.json\": 1497560829,\n    \"data/users/16nArdxrSaNThNp83kL8E6NLL9WD98iUne/content.json\": 1497627929,\n    \"data/users/16CAJkbfNRxNJq4aKdrZ2MSYFfFGvQ8JPi/content.json\": 1497664899,\n    \"data/users/1DrBS2sTD3BX5BBxG8eqYsxXSvGt9kc5HE/content.json\": 1497632000,\n    \"data/users/19sggoAZ4hcorrrfWoFWP9rwfpVsL29cnZ/content.json\": 1497928134,\n    \"data/users/1NYpJupegoTXL4cFpkNdLNJ4XaAhTNhPe1/content.json\": 1497535771,\n    \"data/users/1R67TfYzNkCnh89EFfGmXn5LMb4hXaMRQ/content.json\": 1497691787,\n    \"data/users/1C9HXUYFSVafLxanwkaFPZRcRgCEGsj2Cn/content.json\": 1497572833,\n    \"data/users/1LgoHzNGWeijeZbJ8a1YgGjMCnjaM4BWG/content.json\": 1497620232,\n    \"content.json\": 1497623639\n  }\n}\n```\n\n---\n\n\n#### getHashfield _site_\n获取客户端下载的 [可选文件ID] (#optional-file-id).\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**hashfield_raw**    | 使用`array.array(“ H”,[1000,1001 ..]).tostring()`编码的可选文件ID.\n\n**示例**:\n```json\n> zeronet.py --silent peerCmd 192.168.1.13 15441 getHashfield \"{'site': '1Gif7PqWTzVWDQ42Mo7np3zXmGAo3DXc7h'}\n{\n  'to': 1,\n  'hashfield_raw': 'iG\\xde\\x02\\xc6o\\r;...',\n  'cmd': 'response'\n}\n```\n\n---\n\n\n#### setHashfield _site_, _hashfield_raw_\n设置请求者客户端具有的 [可选文件ID] (#optional-file-id)列表.\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**hashfield_raw**    | 使用`array.array(“ H”,[1000,1001 ..]).tostring()`编码的可选文件ID.\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**ok**               | 更新\n\n\n---\n\n\n#### findHashIds _site_, _hash_ids_\n查询客户端是否知道具有请求的hash_ids的任何对等方\n\n参数                 | 描述\n                 --- | ---\n**site**             | 站点地址(例如:1EU1tbG9oC1A8jz2ouVwGZyQ5asrNsE4Vr)\n**hash_ids**         | 客户端当前正在寻找的可选文件ID的列表\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**peers**            | Key: 可选文件ID <br>值:使用`socket.inet_aton(ip)+ struct.pack(“ H”,port)编码的ipv4对等点列表\n**peers_onion**      | 可选文件id <br>值:使用`base64.b32decode(onion.replace(“.onion”,“”).upper())+ struct.pack(“ H”,port)编码的Tor同级列表.\n\n**示例**:\n```json\n> zeronet.py --silent peerCmd 192.168.1.13 15441 findHashIds \"{'site': '1Gif7PqWTzVWDQ42Mo7np3zXmGAo3DXc7h', 'hash_ids': [59948, 29811]}\"\n{\n  'to': 1,\n  'peers': {\n    29811: [\n      'S&9\\xd3Q<',\n      '>f\\x94\\x98N\\xa4',\n      'gIB\\x90Q<',\n      '\\xb4\\xady\\xf7Q<'\n    ],\n    59948: [\n      'x\\xcc>\\xf6Q<',\n      'S\\xa1\\xddkQ<',\n      '\\x05\\xac\\xe8\\x8dQ<',\n      '\\x05\\xc4\\xe1\\x93Q<',\n      'Q\\x02\\xed\\nQ<'\n    ]\n  },\n  'cmd': 'response',\n  'peers_onion': {\n    29811: ['\\xc7;A\\xce\\xbc\\xd9O\\xe2w<Q<'],\n    59948: ['\\xc7;A\\xce\\xbc\\xd9O\\xe2w<Q<']\n  }\n}\n```\n\n##### 可选文件ID\n哈希的前4个字符的整数表示:\n```\n>>> int(\"ea2c2acb30bd5e1249021976536574dd3f0fd83340e023bb4e78d0d818adf30a\"[0:4], 16)\n59948\n```\n\n---\n\n#### checkport _port_\n检查其他对等体的请求端口.\n\n\n参数                 | 描述\n                 --- | ---\n**port**             | 将检查的端口.\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**status**           | 端口状态(“打开”或“关闭”)\n**ip_external**      | 请求者的外部IP\n\n---\n\n# 大文件插件\n\n#### getPieceFields _site_\n\n返回字典中客户端对该站点具有的所有大文件[piecefield](#bigfile-piecefield).\n\n参数                 | 描述\n                 --- | ---\n**site**             | 要求的地点\n\n\n**返回**:\n\n返回值                 | 描述\n                   --- | ---\n**piecefields_packed** | Key: Bigfile的sha512/256 [merkle根哈希](#bigfile-merkle-root)<br>值:打包[piecefield](#bigfile-piecefield)\n\n---\n\n#### setPieceFields _site_, _piecefields_packed_\n\n为该站点设置客户的[piecefields](#picefield).\n\n参数                   | 描述\n                   --- | ---\n**site**               | 请求的页面地址\n**piecefields_packed** | Key: Bigfile的sha512/256 [merkle根哈希](#bigfile-merkle-root)<br>值:打包[piecefield](#bigfile-piecefield)\n\n\n**返回**:\n\n返回值               | 描述\n                 --- | ---\n**ok**               | 更新\n\n\n##### Bigfile piecefield\n\n将大文件下载件信息保存在一个具有1/0值的简单字符串中. (1 =已下载,0 =未下载)\n\n> __示例__: `1110000001` 表示文件大小为9-10MB,客户端以1MB的大小下载了前3MB和后1MB.\n\n**Packed format**:\n\n通过计算以“ 1”开头的重复字符,将字符串转换为int列表.\n\n> __示例__: `1110000001` to `[3, 6, 1]`, `0000000001` to `[0, 9, 1]`, `1111111111` to `[10]`\n\n转换后,使用array.array('H',piecefield)将其转换为更有效的[typed array](https://docs.python.org/2/library/array.html).\n\n##### 大文件Merkle根\n\n在大文件哈希过程中,除了将逐段的sha512/256哈希摘要存储在[piecemap](#bigfile-piecemap)文件中之外,该算法还使用 [merkle-tools](https://github.com/tierion/merkle-tools)实现.\nmerkle根仅用作标识大文件的ID,尚未用作验证文件的ID.\n\n> __提示__: 选择merkle根来标识文件,而不是文件的实际SHA-512 / 256哈希. 显然,使用后者会导致对同一文件进行两次哈希处理. (对于整个文件一次一次计件图)\n\n> __提示__: merkle根不用于验证碎片或大文件的完整性,因为与逐个哈希映射文件本身相比,这样做会占用更多的带宽和空间来传输和存储merkle证明以进行部分验证.\n\n##### 大文件片段图\n\n它包含每个SHA-512/256 哈希. 片段大小和picemap文件名在`content.json`中定义, 例如:\n\n```\n...\n \"files_optional\": {\n  \"bigfile.mp4\": {\n   \"piece_size\": 1048576,\n   \"piecemap\": \"bigfile.mp4.piecemap.msgpack\",\n   \"sha512\": \"d1f0d150e1e73bb1e684d370224315d7ba21e656189eb646ef7cc394d033bc2b\",\n   \"size\": 42958831\n  },\n...\n```\n\n具有以下数据结构,片断图文件打包为[msgpack](https://msgpack.org/)格式:\n\n```\n{\n  b'bigfile.mp4': {b'sha512_pieces': [\n    b\"e\\xde\\x0fx\\xec\\xc5LZ9\\x0e\\xe7\\x85E\\x1b\\xd5\\xe4C'\\xe7req\\xe3<\\xff\\\\\\xbb\\xc8b\\xc2\\xc1\\x8e\",\n    b'\\xef\\xe8\\xed\\xfe\\x16/\\x96\\xdb;;\\x06n[8_\\x06\\x9ak|\\xe1\\x9f\\xe1\\xaf\\x87\\x96\\xdd\\xfd\\x9bEf\\xd9!',\n    b'\\x1c\\xd6-\\x1f\\xce\\xde{\\xcd\\x01\\x93un =D\\x0brmB-\\xd1\\x8c\\xbf\\xfe\\xca\\x8a\\x1c\\xf60\\xbb\\xedD',\n    b'\\x1aQdF\\xd2\\xbc\\xdff{\\xb7\\x89\\xf2\\xd3\\r\\xa9\\xe1\\xefA-V\\x18\\xa4\\xc8e\\x13\\x88v\\x13\\\\&\\xfbW',\n    ...\n  ]}\n}\n```",
			"added": 1586068455,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		},
		{
			"topic_id": 1586068514,
			"title": "证书颁发机构",
			"body": "# 证书颁发机构\n\n没有密码的帐户？ 我的证书？ 您意识到ZeroNet的ID系统不符合惯例。 在本节中，您将了解用户证书和证书颁发机构如何在ZeroNet中工作。\n\n## 证书颁发机构做什么？\n\n在ZeroNet中，所有内容都由比特币签名密钥签名。 证书为比特币地址提供唯一且可记忆的名称。 证书颁发机构（或ID提供者）负责证明唯一友好名称和比特币地址之间的关系。\n\n## 证书格式\n\n### 正文\n\n证书正文包含比特币地址，门户类型和可记忆的用户名。\n\n```\n[BitcoinAddress]#[PortalType]/[UserName]\n```\n\n**示例:**\n\n```\n1H28iygiKXe3GUMcD77HiifVqtf3858Aft#web/hellozeronet\n```\n\n- Bitcoin address: `1H28iygiKXe3GUMcD77HiifVqtf3858Aft`\n- Portal type: `web`\n- User name: `hellozeronet`\n\n**一般规则:**\n\nThe Bitcoin address, the portal type and the user name **must not** contain the character `#`, `@` or `/`\n\nOnly 0-9 and a-z are allowed in a user name. All English letters in a user name **must** be in lower case. Characters not in the allowed set **must not** be used as parts of a user name. A user name **should not** be too long. A user name **should** be legible and **should not** interfere with user interface rendering.\n\nA user name **must** be unique in the pool of all registered user names.\n\n### 签名\n\n证书签名算法加载秘密签名密钥并为正文生成确定性比特币签名。\n\n**From the source code:**\n\n```python\nsign = os.popen(\"python zeronet.py --debug cryptSign %s#bitmsg/%s %s 2>&1\" % (auth_address, user_name, config.site_privatekey)).readlines()[-1].strip()\n```\n\n### 证书\n\n通过查看ZeroID的源代码，我们知道证书如何存储在其公共数据库中。\n\n```python\ndata[\"users\"][user_name] = \"bitmsg,%s,%s\" % (auth_address, sign)\n```\n\n**示例:**\n\n```\n\"hellozeronet\": \"web,1H28iygiKXe3GUMcD77HiifVqtf3858Aft,HA2A+iKekECD3hasrsN8IrR86BnXQ63kPH+9A85JLO9hLUpRJTBn62UfnuuF92B9CIc6+EewAIqzIn9UoVq2LPA=\"\n```\n\nA certificate can be stored in various formats. However, all formats must include:\n\n- The Bitcoin address: `1H28iygiKXe3GUMcD77HiifVqtf3858Aft`\n- The portal type: `web`\n- The user name: `hellozeronet`\n- The signature from authority: `HA2A+iKekECD3hasrsN8IrR86BnXQ63kPH+9A85JLO9hLUpRJTBn62UfnuuF92B9CIc6+EewAIqzIn9UoVq2LPA=`\n\n## `content.json`使用规则\n\n网站所有者可以选择要信任的证书颁发机构。\n\n例如，Blue Hub接受由ZeroID签署的证书。 This rule is defined in its `data/users/content.json`\n\n- The ID provider has a friendly name: `zeroid.bit`\n- The public key digest of the ID provider is: `1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz`\n\n```json\n\"user_contents\": {\n  \"cert_signers\": {\n   \"zeroid.bit\": [\n    \"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"\n   ]\n  }\n}\n```\n\n每个用户都在他的比特币文件夹中的清单文件中显示他的证书。 例如， `data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json` 说:\n\n```json\n{\n \"address\": \"1BLueGvui1GdbtsjcKqCf4F67uKfritG49\",\n \"cert_auth_type\": \"web\",\n \"cert_sign\": \"HPiZsWEJ5eLnspUj8nQ75WXbSanLz0YhQf5KJDq+4bWe6wNW98Vv9PXNyPDNu2VX4bCEXhRC65pS3CM7cOrjjik=\",\n \"cert_user_id\": \"nofish@zeroid.bit\",\n \"files\": {\n  \"data.json\": {\n   \"sha512\": \"8e597412a2bc2726ac9a1ee85428fb3a94b09f4e7a3f5f589119973231417b15\",\n   \"size\": 21422\n  }\n },\n \"inner_path\": \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\",\n \"modified\": 1492458379,\n \"signs\": {\n  \"1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj\": \"G8kaZIGAstsiWLVY20e2ogJQi4OO+QuwqJ9GTj3gz7YleST/jst7RQH7hDn0uf8BJMBjFs35H3LPhNHHj4jueh8=\"\n }\n}\n```\n\n特定站点：\n\n- Expected site URL: `\"address\": \"1BLueGvui1GdbtsjcKqCf4F67uKfritG49\"`\n- Expected file path: `\"inner_path\": \"data/users/1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj/content.json\"`\n\n证书信息：\n\n- ID provider: `zeroid.bit`\n- User name: `nofish`\n- User Bitcoin address: `1J3rJ8ecnwH2EPYa6MrgZttBNc61ACFiCj`\n- Portal type: `web`\n- Signature from ID provider: `HPiZsWEJ5eLnspUj8nQ75WXbSanLz0YhQf5KJDq+4bWe6wNW98Vv9PXNyPDNu2VX4bCEXhRC65pS3CM7cOrjjik=`\n\n### 验证过程\n\n1. The verifying algorithm reads `data/users/content.json` to determine what is the expected site for the user content.\n\n2. The verifying algorithm reads `data/users/content.json` to look up the public key digest of the ID provider.\n\n3. Given a user Bitcoin address, a portal type and a user name, the verifying algorithm reconstructs the body of the certificate.\n\n4. The verifying algorithm checks the signature from the ID provider, with the public key defined in `data/users/content.json`, to ensure the authenticity of the certificate body.\n\n5. The verifying algorithm loads the user public key and checks the authenticity of the user content.\n\n## 证书颁发机构的功能和限制\n\n- 证书颁发机构为用户公钥摘要提供可记忆的名称。 它还有助于缓解垃圾邮件和未经请求的内容。\n\n- 用户不必泄露密码等秘密信息。 此外，用户只需要进行一次身份验证。\n\n- 任何ZeroNet开发人员都无需批准证书颁发机构。 站点所有者可以为了用户内容质量选择信任哪些证书颁发机构。\n\n- 证书颁发机构负责维护其用户名池。\n\n- ZeroID不会撤销或续订证书。\n\n## 我可以没有证书颁发机构吗？\n\n通常，当您将内容添加到其他人的站点时，需要证书。 在修改自己的站点时，您不需要证书。",
			"added": 1586068505,
			"parent_topic_uri": "1586068021_16X18b5LiJjriTsbi3R9ttk3VnBf6donSh"
		}
	],
	"topic_vote": {
		"1582200126_19j1obcsYihhYGVrEqerD8zuataig8TTQP": 1
	},
	"next_comment_id": 5,
	"comment": {
		"1585910924_1NnCNCau8QnJDzkZqX9KMdqn4SenArGwRv": [
			{
				"comment_id": 1,
				"body": "> [ksksk@zeroid.bit](#comment_1_14dAZkibZVvs1RjTNf4a74KSLdmq4gDUhU): 教我 [...]\n教你啥，吃屎吗",
				"added": 1586067832
			},
			{
				"comment_id": 2,
				"body": "你只需了解一下zeroframe.js这个函数就可以了，可以看官方开发文档",
				"added": 1586068661
			}
		],
		"1586070177_14dAZkibZVvs1RjTNf4a74KSLdmq4gDUhU": [
			{
				"comment_id": 3,
				"body": "这个不错，GitHub上下载zeronet太慢了，用这个还可以分享给那些想上零网的人。",
				"added": 1586071088
			}
		],
		"1586131371_1QDMRYsPQf1CLzzHjbofzQGeKF9CYScBhX": [
			{
				"comment_id": 4,
				"body": "完全没问题，我记得有人已经做过了。",
				"added": 1586133463
			}
		]
	},
	"comment_vote": {}
}