{
	"title": "ACBC.BIT",
	"description": "My ZeroBlog.",
	"links": "- [Source code](https://github.com/HelloZeroNet)",
	"next_post_id": 33,
	"demo": false,
	"modified": 1543767306,
	"post": [
		{
			"post_id": 32,
			"title": "bash",
			"date_published": 1543767271.729,
			"body": "```bash\n##############################################################################\n# BASH CHEATSHEET (中文速查表)  -  by skywind (created on 2018/02/14)\n# Version: 44, Last Modified: 2018/10/17 03:15\n# https://github.com/skywind3000/awesome-cheatsheets\n##############################################################################\n\n\n##############################################################################\n# 常用快捷键（默认使用 Emacs 键位）\n##############################################################################\n\nCTRL+A              # 移动到行首，同 <Home>\nCTRL+B              # 向后移动，同 <Left>\nCTRL+C              # 结束当前命令\nCTRL+D              # 删除光标前的字符，同 <Delete> ，或者没有内容时，退出会话\nCTRL+E              # 移动到行末，同 <End>\nCTRL+F              # 向前移动，同 <Right>\nCTRL+G              # 退出当前编辑（比如正在 CTRL+R 搜索历史时）\nCTRL+H              # 删除光标左边的字符，同 <Backspace>\nCTRL+K              # 删除光标位置到行末的内容\nCTRL+L              # 清屏并重新显示\nCTRL+N              # 移动到命令历史的下一行，同 <Down>\nCTRL+O              # 类似回车，但是会显示下一行历史\nCTRL+P              # 移动到命令历史的上一行，同 <Up>\nCTRL+R              # 历史命令反向搜索，使用 CTRL+G 退出搜索\nCTRL+S              # 历史命令正向搜索，使用 CTRL+G 退出搜索\nCTRL+T              # 交换前后两个字符\nCTRL+U              # 删除字符到行首\nCTRL+V              # 输入字符字面量，先按 CTRL+V 再按任意键\nCTRL+W              # 删除光标左边的一个单词\nCTRL+X              # 列出可能的补全\nCTRL+Y              # 粘贴前面 CTRL+u/k/w 删除过的内容\nCTRL+Z              # 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台\nCTRL+_              # 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7\n\nALT+b               # 向后（左边）移动一个单词\nALT+d               # 删除光标后（右边）一个单词\nALT+f               # 向前（右边）移动一个单词\nALT+t               # 交换字符\nALT+BACKSPACE       # 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板\n\nCTRL+X CTRL+X       # 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 \nCTRL+X CTRL+E       # 用你指定的编辑器，编辑当前命令\n\n\n##############################################################################\n# BASH 基本操作\n##############################################################################\n\nexit                # 退出当前登陆\nenv                 # 显示环境变量\necho $SHELL         # 显示你在使用什么 SHELL\n\nbash                # 使用 bash，用 exit 返回\nwhich bash          # 搜索 $PATH，查找哪个程序对应命令 bash\nwhereis bash        # 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库\nwhatis bash         # 查看某个命令的解释，一句话告诉你这是干什么的\n\nclear               # 清初屏幕内容\nreset               # 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）\n\n\n##############################################################################\n# 目录操作\n##############################################################################\n\ncd                  # 返回自己 $HOME 目录\ncd {dirname}        # 进入目录\npwd                 # 显示当前所在目录\nmkdir {dirname}     # 创建目录\nmkdir -p {dirname}  # 递归创建目录\npushd {dirname}     # 目录压栈并进入新目录\npopd                # 弹出并进入栈顶的目录\ndirs -v             # 列出当前目录栈\ncd -                # 回到之前的目录\ncd -{N}             # 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个\n\n\n##############################################################################\n# 文件操作\n##############################################################################\n\nls                  # 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录\nls -l               # 列表方式显示目录内容，包括文件日期，大小，权限等信息\nls -a               # 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）\nln -s {fn} {link}   # 给指定文件创建一个软链接\ncp {src} {dest}     # 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）\nrm {fn}             # 删除文件，rm -r 递归删除目录，rm -f 强制删除\nmv {src} {dest}     # 移动文件，如果 dest 是目录，则移动，是文件名则覆盖\ntouch {fn}          # 创建或者更新一下制定文件\ncat {fn}            # 输出文件原始内容\nany_cmd > {fn}      # 执行任意命令并将标准输出重定向到指定文件\nmore {fn}           # 逐屏显示某文件内容，空格翻页，q 退出\nless {fn}           # 更高级点的 more，更多操作，q 退出\nhead {fn}           # 显示文件头部数行，可用 head -3 abc.txt 显示头三行\ntail {fn}           # 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行\ntail -f {fn}        # 持续显示文件尾部数据，可用于监控日志\nnano {fn}           # 使用 nano 编辑器编辑文件\nvim {fn}            # 使用 vim 编辑文件\ndiff {f1} {f2}      # 比较两个文件的内容\nwc {fn}             # 统计文件有多少行，多少个单词\nchmod 644 {fn}      # 修改文件权限为 644，可以接 -R 对目录循环改权限\nchgrp group {fn}    # 修改文件所属的用户组\nchown user1 {fn}    # 修改文件所有人为 user1, chown user1:group1 fn 可以修改组\nfile {fn}           # 检测文件的类型和编码\nbasename {fn}       # 查看文件的名字（不包括路径）\ndirname {fn}        # 查看文件的路径（不包括名字）\ngrep {pat} {fn}     # 在文件中查找出现过 pat 的内容\ngrep -r {pat} .     # 在当前目录下递归查找所有出现过 pat 的文件内容\nstat {fn}           # 显示文件的详细信息\n\n\n##############################################################################\n# 用户管理\n##############################################################################\n\nwhoami              # 显示我的用户名\nwho                 # 显示已登陆用户信息，w / who / users 内容略有不同\nw                   # 显示已登陆用户信息，w / who / users 内容略有不同\nusers               # 显示已登陆用户信息，w / who / users 内容略有不同\npasswd              # 修改密码，passwd {user} 可以用于 root 修改别人密码\nfinger {user}       # 显示某用户信息，包括 id, 名字, 登陆状态等\nadduser {user}      # 添加用户\ndeluser {user}      # 删除用户\nw                   # 查看谁在线\nsu                  # 切换到 root 用户\nsu -                # 切换到 root 用户并登陆（执行登陆脚本）\nsu {user}           # 切换到某用户\nsu -{user}          # 切换到某用户并登陆（执行登陆脚本）\nid {user}           # 查看用户的 uid，gid 以及所属其他用户组\nid -u {user}        # 打印用户 uid\nid -g {user}        # 打印用户 gid\nwrite {user}        # 向某用户发送一句消息\nlast                # 显示最近用户登陆列表\nlast {user}         # 显示登陆记录\nlastb               # 显示失败登陆记录\nlastlog             # 显示所有用户的最近登陆记录\nsudo {command}      # 以 root 权限执行某命令\n\n\n##############################################################################\n# 进程管理\n##############################################################################\n\nps                        # 查看当前会话进程\nps ax                     # 查看所有进程，类似 ps -e\nps aux                    # 查看所有进程详细信息，类似 ps -ef\nps auxww                  # 查看所有进程，并且显示进程的完整启动命令\nps -u {user}              # 查看某用户进程\nps axjf                   # 列出进程树\nps xjf -u {user}          # 列出某用户的进程树\nps -eo pid,user,command   # 按用户指定的格式查看进程\nps aux | grep httpd       # 查看名为 httpd 的所有进程\nps --ppid {pid}           # 查看父进程为 pid 的所有进程\npstree                    # 树形列出所有进程，pstree 默认一般不带，需安装\npstree {user}             # 进程树列出某用户的进程\npstree -u                 # 树形列出所有进程以及所属用户\npgrep {procname}          # 搜索名字匹配的进程的 pid，比如 pgrep apache2\n\nkill {pid}                # 结束进程\nkill -9 {pid}             # 强制结束进程，9/SIGKILL 是强制不可捕获结束信号\nkill -KILL {pid}          # 强制执行进程，kill -9 的另外一种写法\nkill -l                   # 查看所有信号\nkill -l TERM              # 查看 TERM 信号的编号\nkillall {procname}        # 按名称结束所有进程\npkill {procname}          # 按名称结束进程，除名称外还可以有其他参数\n\ntop                       # 查看最活跃的进程\ntop -u {user}             # 查看某用户最活跃的进程\n\nany_command &             # 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台\njobs                      # 查看所有后台进程（jobs）\nbg                        # 查看后台进程，并切换过去\nfg                        # 切换后台进程到前台\nfg {job}                  # 切换特定后台进程到前台\n\ntrap cmd sig1 sig2        # 在脚本中设置信号处理命令\ntrap \"\" sig1 sig2         # 在脚本中屏蔽某信号\ntrap - sig1 sig2          # 恢复默认信号处理行为\n\nnohup {command}           # 长期运行某程序，在你退出登陆都保持它运行\nnohup {command} &         # 在后台长期运行某程序\ndisown {PID|JID}          # 将进程从后台任务列表（jobs）移除\n\nwait                      # 等待所有后台进程任务结束\n\n\n##############################################################################\n# 常用命令：SSH / 系统信息 / 网络\n##############################################################################\n\nssh user@host             # 以用户 user 登陆到远程主机 host\nssh -p {port} user@host   # 指定端口登陆主机\nssh-copy-id user@host     # 拷贝你的 ssh key 到远程主机，避免重复输入密码\nscp {fn} user@host:path   # 拷贝文件到远程主机\nscp user@host:path dest   # 从远程主机拷贝文件回来\nscp -P {port} ...         # 指定端口远程拷贝文件\n\nuname -a                  # 查看内核版本等信息\nman {help}                # 查看帮助\nman -k {keyword}          # 查看哪些帮助文档里包含了该关键字\ninfo {help}               # 查看 info pages，比 man 更强的帮助系统\nuptime                    # 查看系统启动时间\ndate                      # 显示日期\ncal                       # 显示日历\nvmstat                    # 显示内存和 CPU 使用情况\nvmstat 10                 # 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出\nfree                      # 显示内存和交换区使用情况\ndf                        # 显示磁盘使用情况\ndu                        # 显示当前目录占用，du . --max-depth=2 可以指定深度\nuname                     # 显示系统版本号\nhostname                  # 显示主机名称\nshowkey -a                # 查看终端发送的按键编码\n\nping {host}               # ping 远程主机并显示结果，CTRL+C 退出\nping -c N {host}          # ping 远程主机 N 次\ntraceroute {host}         # 侦测路由连通情况\nmtr {host}                # 高级版本 traceroute\nhost {domain}             # DNS 查询，{domain} 前面可加 -a 查看详细信息\nwhois {domain}            # 取得域名 whois 信息\ndig {domain}              # 取得域名 dns 信息\nroute -n                  # 查看路由表\nnetstat -a                # 列出所有端口\nnetstat -an               # 查看所有连接信息，不解析域名\nnetstat -anp              # 查看所有连接信息，包含进程信息（需要 sudo）\nnetstat -l                # 查看所有监听的端口\nnetstat -t                # 查看所有 TCP 链接\nnetstat -lntu             # 显示所有正在监听的 TCP 和 UDP 信息\nnetstat -lntup            # 显示所有正在监听的 socket 及进程信息\nnetstat -i                # 显示网卡信息\nnetstat -rn               # 显示当前系统路由表，同 route -n\nss -an                    # 比 netstat -an 更快速更详细\nss -s                     # 统计 TCP 的 established, wait 等\n\nwget {url}                # 下载文件，可加 --no-check-certificate 忽略 ssl 验证\nwget -qO- {url}           # 下载文件并输出到标准输出（不保存）\ncurl -sL {url}            # 同 wget -qO- {url} 没有 wget 的时候使用\n\nsz {file}                 # 发送文件到终端，zmodem 协议\nrz                        # 接收终端发送过来的文件\n\n\n##############################################################################\n# 变量操作\n##############################################################################\n\nvarname=value             # 定义变量\nvarname=value command     # 定义子进程变量并执行子进程\necho $varname             # 查看变量内容\necho $$                   # 查看当前 shell 的进程号\necho $!                   # 查看最近调用的后台任务进程号\necho $?                   # 查看最近一条命令的返回码\nexport VARNAME=value      # 设置环境变量（将会影响到子进程）\n\narray[0]=valA             # 定义数组\narray[1]=valB\narray[2]=valC\narray=([0]=valA [1]=valB [2]=valC)   # 另一种方式\narray=(valA valB valC)               # 另一种方式\n\n${array[i]}               # 取得数组中的元素\n${#array[@]}              # 取得数组的长度\n${#array[i]}              # 取得数组中某个变量的长度\n\ndeclare -a                # 查看所有数组\ndeclare -f                # 查看所有函数\ndeclare -F                # 查看所有函数，仅显示函数名\ndeclare -i                # 查看所有整数\ndeclare -r                # 查看所有只读变量\ndeclare -x                # 查看所有被导出成环境变量的东西\ndeclare -p varname        # 输出变量是怎么定义的（类型+值）\n\n${varname:-word}          # 如果变量不为空则返回变量，否则返回 word\n${varname:=word}          # 如果变量不为空则返回变量，否则赋值成 word 并返回\n${varname:?message}       # 如果变量不为空则返回变量，否则打印错误信息并退出\n${varname:+word}          # 如果变量不为空则返回 word，否则返回 null\n${varname:offset:len}     # 取得字符串的子字符串\n\n${variable#pattern}       # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable##pattern}      # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable%pattern}       # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable%%pattern}      # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable/pattern/str}   # 将变量中第一个匹配 pattern 的替换成 str，并返回\n${variable//pattern/str}  # 将变量中所有匹配 pattern 的地方替换成 str 并返回\n\n${#varname}               # 返回字符串长度\n\n*(patternlist)            # 零次或者多次匹配\n+(patternlist)            # 一次或者多次匹配\n?(patternlist)            # 零次或者一次匹配\n@(patternlist)            # 单词匹配\n!(patternlist)            # 不匹配\n\narray=($text)             # 按空格分隔 text 成数组，并赋值给变量\nIFS=\"/\" array=($text)     # 按斜杆分隔字符串 text 成数组，并赋值给变量\ntext=\"${array[*]}\"        # 用空格链接数组并赋值给变量\ntext=$(IFS=/; echo \"${array[*]}\")  # 用斜杠链接数组并赋值给变量\n\n$(UNIX command)           # 运行命令，并将标准输出内容捕获并返回\nvarname=$(id -u user)     # 将用户名为 user 的 uid 赋值给 varname 变量\n\nnum=$(expr 1 + 2)         # 兼容 posix sh 的计算，使用 expr 命令计算结果\nnum=$(expr $num + 1)      # 数字自增\nexpr 2 \\* \\( 2 + 3 \\)     # 兼容 posix sh 的复杂计算，输出 10\n\nnum=$((1 + 2))            # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算\nnum=$(($num + 1))         # 变量递增\nnum=$((num + 1))          # 变量递增，双括号内的 $ 可以省略\nnum=$((1 + (2 + 3) * 2))  # 复杂计算\n\n\n##############################################################################\n# 事件指示符\n##############################################################################\n\n!!                  # 上一条命令\n!^                  # 上一条命令的第一个单词\n!$                  # 上一条命令的最后一个单词\n!string             # 最近一条包含string的命令\n!^string1^string2   # 最近一条包含string1的命令, 快速替换为string2, 相当于!!:s/string1/string2/\n!#                  # 本条命令之前所有的输入内容\n\n\n##############################################################################\n# 函数\n##############################################################################\n\n# 定义一个新函数\nfunction myfunc() {\n    # $1 代表第一个参数，$N 代表第 N 个参数\n    # $# 代表参数个数\n    # $0 代表被调用者自身的名字\n    # $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd \"$@\" \n    # $* 空格链接起来的所有参数，类型是字符串\n    {shell commands ...}\n}\n\nmyfunc                    # 调用函数 myfunc \nmyfunc arg1 arg2 arg3     # 带参数的函数调用\nmyfunc \"$@\"               # 将所有参数传递给函数\nshift                     # 参数左移\n\nunset -f myfunc           # 删除函数\ndeclare -f                # 列出函数定义\n\n\n##############################################################################\n# 条件判断（兼容 posix sh 的条件判断）：man test\n##############################################################################\n\nstatement1 && statement2  # and 操作符\nstatement1 || statement2  # or 操作符\n\nexp1 -a exp2              # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）\nexp1 -o exp2              # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）\n( expression )            # 如果 expression 为真时返回真，输入注意括号前反斜杆\n! expression              # 如果 expression 为假那返回真\n\nstr1 = str2               # 判断字符串相等，如 [ \"$x\" = \"$y\" ] && echo yes\nstr1 != str2              # 判断字符串不等，如 [ \"$x\" != \"$y\" ] && echo yes\nstr1 < str2               # 字符串小于，如 [ \"$x\" \\< \"$y\" ] && echo yes\nstr2 > str2               # 字符串大于，注意 < 或 > 是字面量，输入时要加反斜杆\n-n str1                   # 判断字符串不为空（长度大于零）\n-z str1                   # 判断字符串为空（长度等于零）\n\n-a file                   # 判断文件存在，如 [ -a /tmp/abc ] && echo \"exists\"\n-d file                   # 判断文件存在，且该文件是一个目录\n-e file                   # 判断文件存在，和 -a 等价\n-f file                   # 判断文件存在，且该文件是一个普通文件（非目录等）\n-r file                   # 判断文件存在，且可读\n-s file                   # 判断文件存在，且尺寸大于0\n-w file                   # 判断文件存在，且可写\n-x file                   # 判断文件存在，且执行\n-N file                   # 文件上次修改过后还没有读取过\n-O file                   # 文件存在且属于当前用户\n-G file                   # 文件存在且匹配你的用户组\nfile1 -nt file2           # 文件1 比 文件2 新\nfile1 -ot file2           # 文件1 比 文件2 旧\n\nnum1 -eq num2             # 数字判断：num1 == num2\nnum1 -ne num2             # 数字判断：num1 != num2\nnum1 -lt num2             # 数字判断：num1 < num2\nnum1 -le num2             # 数字判断：num1 <= num2\nnum1 -gt num2             # 数字判断：num1 > num2\nnum1 -ge num2             # 数字判断：num1 >= num2\n\n\n##############################################################################\n# 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句\n##############################################################################\n\ntest {expression}         # 判断条件为真的话 test 程序返回0 否则非零\n[ expression ]            # 判断条件为真的话返回0 否则非零\n\ntest \"abc\" = \"def\"        # 查看返回值 echo $? 显示 1，因为条件为假\ntest \"abc\" != \"def\"       # 查看返回值 echo $? 显示 0，因为条件为真\n\ntest -a /tmp; echo $?     # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值\n[ -a /tmp ]; echo $?      # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0\n\ntest cond && cmd1         # 判断条件为真时执行 cmd1\n[ cond ] && cmd1          # 和上面完全等价\n[ cond ] && cmd1 || cmd2  # 条件为真执行 cmd1 否则执行 cmd2\n\n# 判断 /etc/passwd 文件是否存在\n# 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假\nif test -e /etc/passwd; then\n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]\n# 这个名字为 \"[\" 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些\nif [ -e /etc/passwd ]; then   \n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到\n[ -e /etc/passwd ] && echo \"alright it exists\" || echo \"it doesn't exist\"\n\n# 判断变量的值\nif [ \"$varname\" = \"foo\" ]; then\n    echo \"this is foo\"\nelif [ \"$varname\" = \"bar\" ]; then\n    echo \"this is bar\"\nelse\n    echo \"neither\"\nfi\n\n# 复杂条件判断，注意 || 和 && 是完全兼容 POSIX 的推荐写法\nif [ $x -gt 10 ] && [ $x -lt 20 ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 可以用 && 命令连接符来做和上面完全等价的事情\n[ $x -gt 10 ] && [ $x -lt 20 ] && echo \"yes, between 10 and 20\"\n\n# 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆\nif [ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 同样可以用 && 命令连接符来做和上面完全等价的事情\n[ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ] && echo \"yes, between 10 and 20\"\n\n\n# 判断程序存在的话就执行\n[ -x /bin/ls ] && /bin/ls -l\n\n# 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:\nhttps://www.ibm.com/developerworks/library/l-bash-test/index.html\n\n\n##############################################################################\n# 流程控制：while / for / case / until \n##############################################################################\n\n# while 循环\nwhile condition; do\n    statements\ndone\n\ni=1\nwhile [ $i -le 10 ]; do\n    echo $i; \n    i=$(expr $i + 1)\ndone\n\n# for 循环：上面的 while 语句等价\nfor i in {1..10}; do\n    echo $i\ndone\n\nfor name [in list]; do\n    statements\ndone\n\n# for 列举某目录下面的所有文件\nfor f in /home/*; do \n    echo $f\ndone\n\n# bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh\nfor (( initialisation ; ending condition ; update )); do\n    statements\ndone\n\n# 和上面的写法等价\nfor ((i = 0; i < 10; i++)); do echo $i; done\n\n# case 判断\ncase expression in \n    pattern1 )\n        statements ;;\n    pattern2 )\n        statements ;;\n    * )\n        otherwise ;;\nesac\n\n# until 语句\nuntil condition; do\n    statements\ndone\n\n# select 语句\nselect name [in list]; do\n  statements that can use $name\ndone\n\n\n##############################################################################\n# 命令处理\n##############################################################################\n\ncommand ls                         # 忽略 alias 直接执行程序或者内建命令 ls\nbuiltin cd                         # 忽略 alias 直接运行内建的 cd 命令\nenable                             # 列出所有 bash 内置命令，或禁止某命令\nhelp {builtin_command}             # 查看内置命令的帮助（仅限 bash 内置命令）\n\neval $script                       # 对 script 变量中的字符串求值（执行）\n\n\n##############################################################################\n# 输出/输入 重定向\n##############################################################################\n\ncmd1 | cmd2                        # 管道，cmd1 的标准输出接到 cmd2 的标准输入\n< file                             # 将文件内容重定向为命令的标准输入\n> file                             # 将命令的标准输出重定向到文件，会覆盖文件\n>> file                            # 将命令的标准输出重定向到文件，追加不覆盖\n>| file                            # 强制输出到文件，即便设置过：set -o noclobber\nn>| file                           # 强制将文件描述符 n的输出重定向到文件\n<> file                            # 同时使用该文件作为标准输入和标准输出\nn<> file                           # 同时使用文件作为文件描述符 n 的输出和输入\nn> file                            # 重定向文件描述符 n 的输出到文件\nn< file                            # 重定向文件描述符 n 的输入为文件内容\nn>&                                # 将标准输出 dup/合并 到文件描述符 n\nn<&                                # 将标准输入 dump/合并 定向为描述符 n\nn>&m                               # 文件描述符 n 被作为描述符 m 的副本，输出用\nn<&m                               # 文件描述符 n 被作为描述符 m 的副本，输入用\n&>file                             # 将标准输出和标准错误重定向到文件\n<&-                                # 关闭标准输入\n>&-                                # 关闭标准输出\nn>&-                               # 关闭作为输出的文件描述符 n\nn<&-                               # 关闭作为输入的文件描述符 n\ndiff <(cmd1) <(cmd2)               # 比较两个命令的输出\n\n\n##############################################################################\n# 文本处理 - cut\n##############################################################################\n\ncut -c 1-16                        # 截取每行头16个字符\ncut -c 1-16 file                   # 截取指定文件中每行头 16个字符\ncut -c3-                           # 截取每行从第三个字符开始到行末的内容\ncut -d':' -f5                      # 截取用冒号分隔的第五列内容\ncut -d';' -f2,10                   # 截取用分号分隔的第二和第十列内容\ncut -d' ' -f3-7                    # 截取空格分隔的三到七列\necho \"hello\" | cut -c1-3           # 显示 hel\necho \"hello sir\" | cut -d' ' -f2   # 显示 sir\nps | tr -s \" \" | cut -d \" \" -f 2,3,4  # cut 搭配 tr 压缩字符\n\n\n##############################################################################\n# 文本处理 - awk / sed \n##############################################################################\n\nawk '{print $5}' file              # 打印文件中以空格分隔的第五列\nawk -F ',' '{print $5}' file       # 打印文件中以逗号分隔的第五列\nawk '/str/ {print $2}' file        # 打印文件中包含 str 的所有行的第二列\nawk -F ',' '{print $NF}' file      # 打印逗号分隔的文件中的每行最后一列 \nawk '{s+=$1} END {print s}' file   # 计算所有第一列的合\nawk 'NR%3==1' file                 # 从第一行开始，每隔三行打印一行\n\nsed 's/find/replace/' file         # 替换文件中首次出现的字符串并输出结果 \nsed '10s/find/replace/' file       # 替换文件第 10 行内容\nsed '10,20s/find/replace/' file    # 替换文件中 10-20 行内容\nsed -r 's/regex/replace/g' file    # 替换文件中所有出现的字符串\nsed -i 's/find/replace/g' file     # 替换文件中所有出现的字符并且覆盖文件\nsed -i '/find/i\\newline' file      # 在文件的匹配文本前插入行\nsed -i '/find/a\\newline' file      # 在文件的匹配文本后插入行\nsed '/line/s/find/replace/' file   # 先搜索行特征再执行替换\nsed -e 's/f/r/' -e 's/f/r' file    # 执行多次替换\nsed 's#find#replace#' file         # 使用 # 替换 / 来避免 pattern 中有斜杆\nsed -i -r 's/^\\s+//g' file         # 删除文件每行头部空格\nsed '/^$/d' file                   # 删除文件空行并打印\nsed -i 's/\\s\\+$//' file            # 删除文件每行末尾多余空格\nsed -n '2p' file                   # 打印文件第二行\nsed -n '2,5p' file                 # 打印文件第二到第五行\n\n\n##############################################################################\n# 排序 - sort\n##############################################################################\n\nsort file                          # 排序文件\nsort -r file                       # 反向排序（降序）\nsort -n file                       # 使用数字而不是字符串进行比较\nsort -t: -k 3n /etc/passwd         # 按 passwd 文件的第三列进行排序\nsort -u file                       # 去重排序\n\n\n##############################################################################\n# 快速跳转 - https://github.com/rupa/z\n##############################################################################\n\nsource /path/to/z.sh               # .bashrc 中初始化 z.sh\nz                                  # 列出所有历史路径以及他们的权重\nz foo                              # 跳到历史路径中匹配 foo 的权重最大的目录\nz foo bar                          # 跳到历史路径中匹配 foo 和 bar 权重最大的目录\nz -l foo                           # 列出所有历史路径中匹配 foo 的目录及权重\nz -r foo                           # 按照最高访问次数优先进行匹配跳转\nz -t foo                           # 按照最近访问优先进行匹配跳转\n\n\n##############################################################################\n# 键盘绑定\n##############################################################################\n\nbind '\"\\eh\":\"\\C-b\"'                # 绑定 ALT+h 为光标左移，同 CTRL+b / <Left>\nbind '\"\\el\":\"\\C-f\"'                # 绑定 ALT+l 为光标右移，同 CTRL+f / <Right>\nbind '\"\\ej\":\"\\C-n\"'                # 绑定 ALT+j 为下条历史，同 CTRL+n / <Down>\nbind '\"\\ek\":\"\\C-p\"'                # 绑定 ALT+k 为上条历史，同 CTRL+p / <Up>\nbind '\"\\eH\":\"\\eb\"'                 # 绑定 ALT+H 为光标左移一个单词，同 ALT-b \nbind '\"\\eL\":\"\\ef\"'                 # 绑定 ALT+L 为光标右移一个单词，同 ALT-f \nbind '\"\\eJ\":\"\\C-a\"'                # 绑定 ALT+J 为移动到行首，同 CTRL+a / <Home>\nbind '\"\\eK\":\"\\C-e\"'                # 绑定 ALT+K 为移动到行末，同 CTRL+e / <End>\nbind '\"\\e;\":\"ls -l\\n\"'             # 绑定 ALT+; 为执行 ls -l 命令\n\n\n##############################################################################\n# 网络管理：ip / ifconfig / nmap ...\n##############################################################################\n\nip a                               # 显示所有网络地址，同 ip address\nip a show eth1                     # 显示网卡 IP 地址\nip a add 172.16.1.23/24 dev eth1   # 添加网卡 IP 地址\nip a del 172.16.1.23/24 dev eth1   # 删除网卡 IP 地址\nip link show dev eth0              # 显示网卡设备属性\nip link set eth1 up                # 激活网卡\nip link set eth1 down              # 关闭网卡\nip link set eth1 address {mac}     # 修改 MAC 地址\nip neighbour                       # 查看 ARP 缓存\nip route                           # 查看路由表\nip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    # 添加静态路由\nip route del 10.1.0.0/24           # 删除静态路由\n\nifconfig                           # 显示所有网卡和接口信息\nifconfig -a                        # 显示所有网卡（包括开机没启动的）信息\nifconfig eth0                      # 指定设备显示信息\nifconfig eth0 up                   # 激活网卡\nifconfig eth0 down                 # 关闭网卡\nifconfig eth0 192.168.120.56       # 给网卡配置 IP 地址\nifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     # 配置 IP 并启动\nifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            # 修改 MAC 地址\n\nnmap 10.0.0.12                     # 扫描主机 1-1000 端口\nnmap -p 1024-65535 10.0.0.12       # 扫描给定端口\nnmap 10.0.0.0/24                   # 给定网段扫描局域网内所有主机\nnmap -O -sV 10.0.0.12              # 探测主机服务和操作系统版本\n\n\n##############################################################################\n# 有趣的命令\n##############################################################################\n\nman hier                           # 查看文件系统的结构和含义\nman test                           # 查看 posix sh 的条件判断帮助\nman ascii                          # 显示 ascii 表\ngetconf LONG_BIT                   # 查看系统是 32 位还是 64 位\nbind -P                            # 列出所有 bash 的快捷键\nmount | column -t                  # 漂亮的列出当前加载的文件系统\ncurl ip.cn                         # 取得外网 ip 地址和服务商信息\ndisown -a && exit                  # 关闭所有后台任务并退出\ncat /etc/issue                     # 查看 Linux 发行版信息\nlsof -i port:80                    # 哪个程序在使用 80 端口？\nshowkey -a                         # 取得按键的 ASCII 码\nsvn diff | view -                  # 使用 Vim 来显示带色彩的 diff 输出\nmv filename.{old,new}              # 快速文件改名\ntime read                          # 使用 CTRL-D 停止，最简单的计时功能\ncp file.txt{,.bak}                 # 快速备份文件\nsudo touch /forcefsck              # 强制在下次重启时扫描磁盘\nfind ~ -mmin 60 -type f            # 查找 $HOME 目录中，60 分钟内修改过的文件\ncurl wttr.in/~beijing              # 查看北京的天气预报\necho ${SSH_CLIENT%% *}             # 取得你是从什么 IP 链接到当前主机上的\necho $[RANDOM%X+1]                 # 取得 1 到 X 之间的随机数\nbind -x '\"\\C-l\":ls -l'             # 设置 CTRL+l 为执行 ls -l 命令\nfind / -type f -size +5M           # 查找大于 5M 的文件\nchmod --reference f1 f2            # 将 f2 的权限设置成 f1 一模一样的\ncurl -L cheat.sh                   # 速查表大全\n\n\n##############################################################################\n# 常用技巧\n##############################################################################\n\n# 列出最常使用的命令\nhistory | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head\n\n# 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 \nnetstat -n | awk '/^tcp/ {++tt[$NF]} END {for (a in tt) print a, tt[a]}'\n\n# 通过 SSH 来 mount 文件系统\nsshfs name@server:/path/to/folder /path/to/mount/point\n\n# 显示前十个运行的进程并按内存使用量排序\nps aux | sort -nk +4 | tail\n\n# 在右上角显示时钟\nwhile sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done&\n\n# 从网络上的压缩文件中解出一个文件来，并避免保存中间文件\nwget -qO - \"http://www.tarball.com/tarball.gz\" | tar zxvf -\n\n# 性能测试：测试处理器性能\npython -c \"import test.pystone;print(test.pystone.pystones())\"\n\n# 性能测试：测试内存带宽\ndd if=/dev/zero of=/dev/null bs=1M count=32768\n\n# Linux 下挂载一个 iso 文件\nmount /path/to/file.iso /mnt/cdrom -oloop\n\n# 通过主机 A 直接 ssh 到主机 B\nssh -t hostA ssh hostB\n\n# 下载一个网站的所有图片\nwget -r -l1 --no-parent -nH -nd -P/tmp -A\".gif,.jpg\" http://example.com/images\n\n# 快速创建项目目录\nmkdir -p work/{project1,project2}/{src,bin,bak}\n\n# 按日期范围查找文件\nfind . -type f -newermt \"2010-01-01\" ! -newermt \"2010-06-01\"\n\n# 显示当前正在使用网络的进程\nlsof -P -i -n | cut -f 1 -d \" \"| uniq | tail -n +2\n\n# Vim 中保存一个没有权限的文件\n:w !sudo tee > /dev/null %\n\n# 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）\nsource ~/github/profiles/my_bash_init.sh\n\n# 终端下正确设置 ALT 键和 BackSpace 键\nhttp://www.skywind.me/blog/archives/2021\n\n\n##############################################################################\n# 有用的函数\n##############################################################################\n\n# 自动解压：判断文件后缀名并调用相应解压命令\nfunction q-extract() {\n    if [ -f $1 ] ; then\n        case $1 in\n        *.tar.bz2)   tar -xvjf $1    ;;\n        *.tar.gz)    tar -xvzf $1    ;;\n        *.tar.xz)    tar -xvJf $1    ;;\n        *.bz2)       bunzip2 $1     ;;\n        *.rar)       rar x $1       ;;\n        *.gz)        gunzip $1      ;;\n        *.tar)       tar -xvf $1     ;;\n        *.tbz2)      tar -xvjf $1    ;;\n        *.tgz)       tar -xvzf $1    ;;\n        *.zip)       unzip $1       ;;\n        *.Z)         uncompress $1  ;;\n        *.7z)        7z x $1        ;;\n        *)           echo \"don't know how to extract '$1'...\" ;;\n        esac\n    else\n        echo \"'$1' is not a valid file!\"\n    fi\n}\n\n# 自动压缩：判断后缀名并调用相应压缩程序\nfunction q-compress() {\n    if [ -n \"$1\" ] ; then\n        FILE=$1\n        case $FILE in\n        *.tar) shift && tar -cf $FILE $* ;;\n        *.tar.bz2) shift && tar -cjf $FILE $* ;;\n        *.tar.xz) shift && tar -cJf $FILE $* ;;\n        *.tar.gz) shift && tar -czf $FILE $* ;;\n        *.tgz) shift && tar -czf $FILE $* ;;\n        *.zip) shift && zip $FILE $* ;;\n        *.rar) shift && rar $FILE $* ;;\n        esac\n    else\n        echo \"usage: q-compress <foo.tar.gz> ./foo ./bar\"\n    fi\n}\n\n# 漂亮的带语法高亮的 color cat ，需要先 pip install pygments\nfunction ccat() {\n    local style=\"monokai\"\n    if [ $# -eq 0 ]; then\n        pygmentize -P style=$style -P tabsize=4 -f terminal256 -g\n    else\n        for NAME in $@; do\n            pygmentize -P style=$style -P tabsize=4 -f terminal256 -g \"$NAME\"\n        done\n    fi\n}\n\n\n##############################################################################\n# 好玩的配置\n##############################################################################\n\n# 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮\nexport LESS_TERMCAP_mb=$'\\E[1m\\E[32m'\nexport LESS_TERMCAP_mh=$'\\E[2m'\nexport LESS_TERMCAP_mr=$'\\E[7m'\nexport LESS_TERMCAP_md=$'\\E[1m\\E[36m'\nexport LESS_TERMCAP_ZW=\"\"\nexport LESS_TERMCAP_us=$'\\E[4m\\E[1m\\E[37m'\nexport LESS_TERMCAP_me=$'\\E(B\\E[m'\nexport LESS_TERMCAP_ue=$'\\E[24m\\E(B\\E[m'\nexport LESS_TERMCAP_ZO=\"\"\nexport LESS_TERMCAP_ZN=\"\"\nexport LESS_TERMCAP_se=$'\\E[27m\\E(B\\E[m'\nexport LESS_TERMCAP_ZV=\"\"\nexport LESS_TERMCAP_so=$'\\E[1m\\E[33m\\E[44m'\n\n# ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，\n# 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman\n\"\\eh\": backward-char\n\"\\el\": forward-char\n\"\\ej\": next-history\n\"\\ek\": previous-history\n\"\\eH\": backward-word\n\"\\eL\": forward-word\n\"\\eJ\": beginning-of-line\n\"\\eK\": end-of-line\n\n\n##############################################################################\n# References\n##############################################################################\n\nhttps://github.com/Idnan/bash-guide\nhttp://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/\nhttps://ss64.com/bash/syntax-keyboard.html\nhttp://wiki.bash-hackers.org/commands/classictest\nhttps://www.ibm.com/developerworks/library/l-bash-test/index.html\nhttps://www.cyberciti.biz/faq/bash-loop-over-file/\nhttps://linuxconfig.org/bash-scripting-tutorial\nhttps://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh\nhttps://devhints.io/bash\nhttps://github.com/jlevy/the-art-of-command-line\nhttps://yq.aliyun.com/articles/68541\n\n# vim: set ts=4 sw=4 tw=0 et :\n\n\n```",
			"date_modified": 1543767306.447
		},
		{
			"post_id": 31,
			"title": "tmux",
			"date_published": 1543766285.469,
			"body": "```bash\n##############################################################################\n# TMUX CHEATSHEET (中文速查表)  -  by ziyenano (created on 2018/03/15)\n# Version: 1, Last Modified: 2018/03/15 00:30\n# https://github.com/skywind3000/awesome-cheatsheets\n##############################################################################\n\n\n##############################################################################\n# session\n##############################################################################\n\ntmux                      # 创建新的 session\ntmux new -S name          # 创建新的 session 并指定一个name\ntmux ls                   # 查看多少个后台工作的 session\ntmux a/at/attach          # 重新连接 session \ntmux a/at/attach -t num   # 如果有多个 session, 指定 session num 连接\ntmux kill-ses -t myses    # kill 某个 session\ntmux kill-ses -a          # kill 所有 session, 除了当前的 session\ntmux kill-ses -a -t myses # kill 所有 session, 除了 myses\n\n\n##############################################################################\n# 操作方式 \n##############################################################################\n\n<prefix> + key            # <prefix> 默认为 ctrl + b\n<prefix> + c              # 表示先按 ctrl + b 再按 c 键\n\n\n##############################################################################\n# 帮助信息\n##############################################################################\n\n<prefix> + ?              # 查看所有的 key map\n\n\n##############################################################################\n# window 操作 \n##############################################################################\n\n<prefix> + c              # 新建一个 window\n<prefix> + n              # 下一个 window\n<prefix> + p              # 上一个 window\n<prefix> + w              # 列出 window\n<prefix> + &              # 关闭当前 window\n<prefix> + num[1-9]       # 选定特定 num 的 window\n<prefix> + f              # 查找 window \n<prefix> + ,              # 重命名 window \n<prefix> + .              # 移动 window \n\n\n\n##############################################################################\n# pane 操作 \n##############################################################################\n\n<prefix> + %              # 纵向分裂 \n<prefix> + '\"'              # 横向分裂 \n<prefix> + 方向键         # 在一个 window 中切换 pane \n<prefix> + ctrl-方向键    # 调整 pane 大小\n<prefix> + z              # 全屏化当前 pane, 再次执行退出全屏 \n<prefix> + x              # 关闭当前 pane\n<prefix> + q              # 显示 pane 编号\n<prefix> + o              # 跳到下一个 pane \n<prefix> + {              # 跟前一个编号的 pane 交换\n<prefix> + }              # 跟后一个编号的 pane 交换\n<prefix> + ;              # 跳转到上一个活跃的 pane \n<prefix> + !              # 将 pane 转化为 window \n<prefix> + <Space>        # 改变 pane 的布局 \n\n\n##############################################################################\n# session \n##############################################################################\n\n<prefix> + d              # detach 整个session, 后续可以重新连接\n<prefix> + s              # 列出 session\n<prefix> + $              # 重命名 session\n<prefix> + (              # 跳到上一个 seesion \n<prefix> + )              # 跳到下一个 seesion \n\n\n##############################################################################\n# Misc \n##############################################################################\n<prefix> + t              # 显示时钟 \n<prefix> + :              # 命令行 \n\n##############################################################################\n# pane 同步\n##############################################################################\n\n:setw synchronize-panes  # 打开(关闭) pane 同步模式, 发送命令到所有的 pane 中\n                         # 只影响当前 window 的 pane\n\n##############################################################################\n# 复制模式 (copy-mode) \n##############################################################################\n\n添加下面一行到 $HOME/.tmux.conf, 通过 vim 的快捷键实现浏览, 复制等操作;\n\nsetw -g mode-keys vi \n\n更多 vim 快捷键可参考 ../editors/vim.txt, 以下列出一些常用快捷键. \n\n<prefix> + [              # 进入 copy mode \n\nvi             emacs      功能\n^              M-m        # 跳转到一行开头\nEscape         C-g        # 放弃选择\nk              Up         # 上移\nj              Down       # 下移 \nh              Left       # 左移\nl              Right      # 右移\nL                         # 最后一行\nM              M-r        # 中间一行\nH              M-R        # 第一行    \n$              C-e        # 跳转到行尾\n:              g          # 跳转至某一行\nC-d            M-Down     # 下翻半页\nC-u            M-Up       # 上翻半页\nC-f            Page down  # 下翻一页\nC-b            Page up    # 上翻一页\nw              M-f        # 下一个字符     \nb              M-b        # 前一个字符\nq              Escape     # 退出        \n?              C-r        # 往上查找\n/              C-s        # 往下查找\nn              n          # 查找下一个\n\nSpace          C-Space    # 进入选择模式\nEnter          M-w        # 确认选择内容, 并退出 \n\n<prefix> + ]              # 粘贴选择内容(粘贴 buffer_0 的内容) \n\n:show-buffer              # 显示 buffer_0 的内容\n:capture-buffer           # 复制整个能见的内容到当前的 buffer\n:list-buffers             # 列出所有的 buffer \n:choose-buffer            # 列出所有的 buffer, 并选择用于粘贴的 buffer\n:save-buffer buf.txt      # 将 buffer 的内容复制到 buf.txt\n:delete-buffer -b 1       # 删除 buffer_1\n\n\n##############################################################################\n# mouse-mode \n##############################################################################\n\n:setw -g mode-mouse on           # 打开鼠标模式\n:set -g mouse-select-pane on     # 通过鼠标选择 pane\n:set -g mouse-resize-pane on     # 通过鼠标更改 pane 大小\n:set -g mouse-select-window on   # 通过鼠标选择 window\n\n\n##############################################################################\n# References\n##############################################################################\n\nhttps://gist.github.com/MohamedAlaa/2961058\nhttps://tmuxcheatsheet.com/\n\n所有的快捷键都有对应的 command, 参考:\nhttp://man.openbsd.org/OpenBSD-current/man1/tmux.1\n\n可以通过 $HOME/.tmux.conf 更改配置, 参考一些比较好的 tmux 配置:\nhttps://github.com/gpakosz/.tmux\n\n```",
			"date_modified": 1543767264.585
		},
		{
			"post_id": 30,
			"title": "function def",
			"date_published": 1543720341.548,
			"body": "\n\n```bash\n#!/bin/bash\n#------------------------------------\n# FileName:     test.sh\n# Revision:     0.1\n# Language:     bash\n# Author:       \n# Date:         2018-11-23\n# Description:\n#------------------------------------\n\n#------------------------------------\n# def return value\n# ----------------\n# 0 error\n# 1 success\n#------------------------------------\n\nfunction test_function(){\n  echo \"hello function\"\n  return 0\n}\ntest_function\n\ntest_function3(){\n  echo \"hello function\"\n  return 0\n}\ntest_function3\n\n```\n",
			"date_modified": 1543739103.137
		},
		{
			"post_id": 29,
			"title": "New blog post",
			"date_published": 1543554134.697,
			"body": "```bash\n# 文件太多出现，参数列表过长怎么办\n\nfor i in `ls`;do\n    chmod 777 $i\ndone\n\nls | xargs chmod 777\n\nls > file.db\nwhile read file_name;do\n    chmod 777 $file_name\ndone < file.db\n\nls | while read file_name;do\n    chmod 777 $file_name\ndone \n\nrm -f * ; touch {a..z};ls > file.db && cat file.db | awk '{system(\"chmod 777 \"$0)}'\n\nls | awk '{system(\"chmod 777 \"$0)}'\n```",
			"date_modified": 1543720032.585
		},
		{
			"post_id": 26,
			"title": "Grep",
			"date_published": 1466094886.146,
			"body": "Grep 匹配纯数字字母\n``` bash\ngrep -v [0-9]\ngrep -v [a-z]\n```\n1、或操作\n  grep -E '123|abc' filename  \n  egrep '123|abc' filename\n  awk '/123|abc/' filename\n2、与操作\n  grep pattern1 files | grep pattern2 \n \n3、其他操作\ngrep -i pattern files ：不区分大小写地搜索。默认情况区分大小写，\ngrep -l pattern files ：只列出匹配的文件名，\ngrep -L pattern files ：列出不匹配的文件名，\ngrep -w pattern files ：只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），\ngrep -C number pattern files ：匹配的上下文分别显示[number]行，\n",
			"date_modified": 1466135982.684
		},
		{
			"post_id": 25,
			"title": "在源里加上cdrom",
			"date_published": 1465978118.522,
			"body": "在源里加上cdrom\nsudo apt-cdrom -m -d /cdrom add\n这样生成的source.list还是优先去ubuntu.org.cn（这一点没有验证），手动删掉他们，只留cdrom，开始升级吧：\nsudo apt-get update\nsudo apt-get dist-upgrade\n2、添加光盘源\n如果ISO刻到光盘上了,再想把它来做源\n就插上光盘 先挂载光驱,再添加那个挂载点做源\nsudo mount /dev/cdrom /cdrom",
			"date_modified": 1465978149.734
		},
		{
			"post_id": 24,
			"title": "except",
			"date_published": 1465796953.333,
			"body": "``` python\nimport traceback\ntry:\nexcept:\n    tracebak.print_exc()\n```",
			"date_modified": 1465796989.985
		},
		{
			"post_id": 23,
			"title": "search phone num from txt file",
			"date_published": 1465529109.133,
			"body": "```\n#!/opt/python3/bin/python3\n\n#-------------------------------------------------------------------------------\n# Name:        search phone num\n# Purpose:     search phone num by pinyin\n#\n# Author:      tom\n#\n# Created:     19/01/2014\n# Copyright:   (c) tom 2014\n# Licence:     <GPL3>\n#-------------------------------------------------------------------------------\n\nimport read_write as rw\nimport os\nimport sys\n\npinyin_db=r'convert-utf-8.txt'\nphone_db=r'PHONE.txt'\n\ndef is_chinese(uchar):\n    if uchar >= u'\\u4e00' and uchar<=u'\\u9fa5':\n        return True\n    else:\n        return False\ndef has_chinese(ustring):\n    for c in ustring:\n        if(is_chinese(c)):\n            return True\n        else:\n            return False\n        \ndef load_db():\n    pinyin_list=rw.read2memory(pinyin_db).split('\\n')\n    pinyin_dic={}\n    for pinyin in pinyin_list:\n        pinyin_dic[pinyin[0]]=pinyin[1:-1]\n    phone_list=rw.read2memory(phone_db).split('\\n')\n    p2=list()\n    index=0\n    for p in phone_list:\n        for ps in p.split('\\t'):\n            for s in ps:\n                if(is_chinese(s)):\n                    try:\n                        p2[index] += pinyin_dic[s]\n                    except:\n                        p2.append(pinyin_dic[s])\n            try:\n                p2[index] += \" \"\n            except:\n                pass\n\n        index += 1\n    #print(len(p2),len(phone_list))\n    return phone_list,p2\n\ndef search(phone_list,pinyin_list,key):\n    index=0\n    if not has_chinese(key):\n        for pinyin in pinyin_list:\n            if (pinyin.__contains__(key)):\n                print(phone_list[index])\n            index += 1\n    else:\n        for phone in phone_list:\n            if (phone.__contains__(key)):\n                print(phone)\n    pass\n\ndef get_key():\n    if len(sys.argv)>1:\n        try:\n            key_word=sys.argv[1]+\" \"+sys.argv[2]\n        except:\n            key_word=sys.argv[1]\n        sys.argv=sys.argv[0]\n    else:\n        key_word=input(\">> \")\n        tmp=os.system('clear')\n    if (key_word=='exit'):\n        os._exit(0)\n    return key_word\n\ndef main():\n    db=load_db()\n    while(1>0):\n        key=get_key()\n        search(db[0],db[1],key)\n    pass\n\nif __name__ == '__main__':\n    main()\n```",
			"date_modified": 1465529191.992
		},
		{
			"post_id": 22,
			"title": "file operation",
			"date_published": 1465528859.976,
			"body": "```\ndef write1line2file(line,file_path):\n    f=open(file_path,'a',encoding='utf-8')\n    f.write(line+'\\n')\n    f.close()\n\t\ndef writeNchar2file(char,n,file_path):\n    f=open(file_path,'a',encoding='utf-8')\n    for i in range(1,n):\n        f.write(char)\n    f.write('\\n')\n    f.close()\n\ndef write2file(a_list,file_path):\n    f=open(file_path,'a',encoding='utf-8')\n    for line in a_list:\n        f.write(line+'\\n')\n    f.close()\n\ndef write_part2file(a_list,index_list,file_path):\n    f=open(file_path,'w',encoding='utf8')\n    for i in index_list:\n        f.write(a_list[i]+'\\n')\n    f.close()\n\ndef append2file(a_list,file_path):\n    f=open(file_path,'a',encoding='utf8')\n    for i in a_list:\n        f.write(i+'\\n')\n    f.close()\n\ndef read2memory(file_path):\n    with open(file_path,'r',encoding='utf8') as f:\n        return f.read().split('\\n')\n```",
			"date_modified": 1465528942.775
		},
		{
			"post_id": 21,
			"title": "文本处理",
			"date_published": 1465524899.071,
			"body": "'\\n'.join(cleared)\n\n```\ndef clear_line(ln):\n    if not ln.startsWith('W:'): return None\n    if ln=='W:': return None\n    ln = ln.replace('\"', '')\n    return ln\n  \nfilename = 'xxx.txt'\nlines = open(filename).readlines()\ncleared = []\nfor line in lines:\n    nl = clear_line(line)\n    if nl is not None: cleared.append(nl)\nopen('cleared-'+filename, 'w').write('\\n'.join(cleared))\n```",
			"date_modified": 1465524967.104
		},
		{
			"post_id": 20,
			"title": "Python-zlib库使用",
			"date_published": 1465524766.866,
			"body": "```python\n#1.1 使用zlib解压缩字符串：\nimport zlib\nmessage = 'aaaabbbbccccdddd'\ncompressed = zlib.compress(message)\ndecompressed = zlib.decompress(compressed)\nprint 'original:', repr(message)\nprint 'compressed:', repr(compressed)\nprint 'decompressed:', repr(decompressed)\n\n#1.2 使用zlib解压缩文件\ndef compress(infile, dst, level=9):\n    infile = open(infile, 'rb')\n    dst = open(dst, 'wb')\n    compress = zlib.compressobj(level)\n    data = infile.read(1024)\n    while data:\n        dst.write(compress.compress(data))\n        data = infile.read(1024)\n    dst.write(compress.flush())\ndef decompress(infile, dst):\n    infile = open(infile, 'rb')\n    dst = open(dst, 'wb')\n    decompress = zlib.decompressobj()\n    data = infile.read(1024)\n    while data:\n        dst.write(decompress.decompress(data))\n        data = infile.read(1024)\n    dst.write(decompress.flush())\n```",
			"date_modified": 1465524839.073
		},
		{
			"post_id": 19,
			"title": "Search domain info from namecoin db",
			"date_published": 1465219185.233,
			"body": "```python\nimport os\nimport json\nimport sqlite3\nimport time\n\n\n\nna=[chr(i) for i in range(48,58)]+[chr(i) for i in range(97,123)]\n#na=['e']\nall_start=time.clock()\n\ntoday=time.strftime('%Y-%m-%d',time.localtime(time.time()))\n\nfor d in na:\n    get_start=time.clock()\n    command = 'namecoind name_filter \"^d/\"'+d\n    output=os.popen(command).readlines()\n    domains=json.loads(\"\".join(output))\n    get_end=time.clock()\n    sql_start=time.clock()\n    conn = sqlite3.connect(\"domain.db\")\n    c = conn.cursor()\n    for domain in domains:\n        info=[domain[\"name\"].split('/')[1],domain[\"value\"],domain.get(\"expired\",'0')]\n        #print(info)\n        try:\n            c.execute('''insert into tmp (name, value, expired)values(?,?,?)''',info[0:3])\n        except:\n            print(info)\n    conn.commit()\n        # close the connection with the domainsbase\n    conn.close()\n    sql_end=time.clock()\n    print( d, get_end - get_start, sql_end - sql_start)\n\nconn = sqlite3.connect(\"domain.db\")\nc = conn.cursor()\n\nc1_insert=\"insert into domains (name,value,expired) select name,value,expired from tmp where name not in (select name from domains)\"\nc2_update_new=\"update domains set date_='\"+today+\"' where date_=''\"\nc3_update_expired=\"update domains set expired='\"+today+\"' where name not in (select name from tmp) and expired = '0' \"\nc4_update_reacrive=\"update domains set expired ='0' where name in (select name from tmp) and expired != '0' \"\nc5_delete_tmp=\"delete from tmp\"\n\nc.execute(c1_insert)\nc.execute(c2_update_new)\nc.execute(c3_update_expired)\nc.execute(c4_update_reacrive)\nc.execute(c5_delete_tmp)\n\nconn.commit()\nconn.close()\n\t\nall_over=time.clock()\nprint(\"ALL Time: \",(all_over - all_start)/60, \" Min\")\n```",
			"date_modified": 1465219383.265
		},
		{
			"post_id": 18,
			"title": "比较两个文件夹",
			"date_published": 1465217051.919,
			"body": "```python\nimport os;\nimport io;\nimport hashlib\nimport time\n\ndef get_file_list(folder):\n    file_list = [];\n    for root, dirs, files in os.walk(folder):\n        for f in files:\n            path=root+os.path.sep+f\n            file_list.append(path)\n    return file_list\n\ndef get_md5sum(file_path):\n    #print(file_path)\n    size=os.path.getsize(file_path)\n    if(size<30*1024*1024):\n        with open(file_path.strip(),'rb') as f:\n            data=f.read()\n            md5sum=hashlib.md5(data).hexdigest()\n    else:\n        try:\n            m = hashlib.md5()\n            file = io.FileIO(file_path,'r')\n            bytes = file.read(8192)\n            while(bytes != b''):\n                m.update(bytes)\n                bytes = file.read(8192)\n            file.close()\n        except:\n            print(\"error in file: \",file_path)\n        md5sum=m.hexdigest()\n    return md5sum\n\ndef get_md5sum_list(file_list):\n    md5list = []\n    len_file_list=len(file_list)\n    index=0\n    for i in file_list:\n        md5sum=get_md5sum(i)\n        md5list.append( md5sum )\n        index+=1\n    return md5list\n\n\ndef main():\n    start_time=time.clock()\n\n    folderA = r\"tools\"\n    folderB = r\"tools-master\"\n\n    folderAList = get_file_list(folderA)\n    folderBList = get_file_list(folderB)\n\n    folderAlistMd5sum = get_md5sum_list(folderAList)\n    folderBlistMd5sum = get_md5sum_list(folderBList)\n\n    if len(folderAList)==len(folderBList) and len(folderAlistMd5sum)==(folderAlistMd5sum):\n        for i in range(0,len(folderAlistMd5sum)):\n            try:\n                if folderAlistMd5sum[i]==folderBlistMd5sum[i]:\n                    pass\n                else:\n                    print(\"Not same: \",folderAList[i],folderBList[i])\n            except:\n                print(\"get md5sum error: \",folderAList[i],folderBList[i])\n    end_time=time.clock()\n\n    print((\"ALL time:%.5f(S)\")%(end_time-start_time))\n    #time.sleep(20)\n    input(\"Press any key to continu ......\")\n    pass\n\nif __name__ == '__main__':\n    main()\n\n```",
			"date_modified": 1465217960.71
		},
		{
			"post_id": 17,
			"title": "在Ubuntu终端彻底删除软件",
			"date_published": 1465001421.995,
			"body": ">在Ubuntu终端彻底删除软件：\n\n1、删除软件\n\n方法一、如果你知道要删除软件的具体名称，可以使用               \n\nsudo apt-get remove --purge 软件名称  \nsudo apt-get autoremove --purge 软件名称 \n\n方法二、如果不知道要删除软件的具体名称，可以使用\n\ndpkg --get-selections | grep ‘软件相关名称’\n\nsudo apt-get purge 一个带core的package，如果没有带core的package，则是情况而定。\n\n2、清理残留数据\n\ndpkg -l |grep ^rc|awk '{print $2}' |sudo xargs dpkg -P ",
			"date_modified": 1465001453.172
		},
		{
			"post_id": 16,
			"title": "dpkg",
			"date_published": 1465001143.614,
			"body": ">linux的包管理有多种，除了rpm，apt等还有优秀的dpkg，下面是dpkg命令>的详细使用教程，希望对你有用。\ndeb包的管理是比较优秀的包管理工具，用的linux系统有 debian ubuntu;\ndpkg命令的使用：\ndpkg -l 查看当前系统中已经安装的软件包的信息\ndpkg -L （软件包名称）查看系统中已经安装的软件文件的详细列表\ndpkg -s 查看已经安装的指定软件包的详细信息\ndpkg -S 查看系统中的某个文件属于那个软件包;\ndpkg -i  *.deb文件的安装\ndpkg -r *.deb文件的卸载;\ndpkg -P 彻底的卸载 包括软件的配置文件等等\n查看没有安装的deb包命令\ndpkg -c 查询deb包文件中所包含的文件  rpm -qlp\ndpkg -I 查询deb包的详细信息\n添加说明：\n最常用的就是-i，-r。简单，安装／卸载。不用说。\n>dpkg -l 命令返回数值，解释； \n\ndpkg -l 每条记录对应一个软件包，每条记录的第一，二，三个字符是软件包的状态标识，后边依此时软件包名称，版本号，和简述：\n\n第一个字符为，期望值；包括如下状态：\nu 状态未知；意味软件包未安装，并且用户也未发出安装请求；\ni 用户请求安装软件包；\nr 用户请求卸载软件包；\np 用户请求清楚软件包；\nh 用户请求保持软件包版本锁定；\n\n第二个字符，当前状态；包括：\nn 软件包未安装；\ni 软件包安装并完成配置；\nc 软件包以前安装过，现在删除了，但是配置文件再留在系统中；\nu 软件包被解包，但未配置；\nf 试图配置软件包，单失败；\nh 软件包安装，单没有成功；\n\n第三个字符，错误状态；包括：\nh 软件包被强制保持，因为有其他软件包依赖需求，无法升级；\nr 软件包被破坏，可以需要重新安装才能正常使用（包括删除）；\nx 软件包被破坏，并且被强制保持；",
			"date_modified": 1465001240.543
		},
		{
			"post_id": 15,
			"title": "交叉编译",
			"date_published": 1464569758.273,
			"body": "0.前言\n【1】为什么要使用交叉编译\n    交叉编译工具较快开发的速度。树莓派中已经安装了gcc工具链，可在树莓派中直接编译源代码生成可执行文件。于此同时，PC机上也可使用gcc工具链生成可执行代码，但是和树莓派上的gcc工具不同，PC机上的gcc工具生成intel或amd芯片上可执行的代码，但树莓派却是arm系列的芯片，显然存在不小的差异。那么使用交叉工具链便可在PC机上开发树莓派中可执行程序。\n    虽然树莓派的主频可达700MHz远高于一般的嵌入式系统，但相比于PC机其性能还是差些，使用交叉工具链可节约开发时间。在编译链接同等规模的代码时，PC机所用的时间应少于树莓派所用时间，通过交叉编译的方法提高效率。\n\n【2】PC机环境 ubuntu 14.04 amd64\n    请注意32位系统和64位系统存在差异，请注意博文中相关章节的描述。本文的程序在ubunut 14.04 amd64系统，lubuntu 14.04 i386系统中测试通过（硬盘安装，非虚拟机环境）。\n\n1.设置交叉工具链\n【1】下载必要的软件和工具\n    sudo apt-get install build-essential git\n\n【2】clone交叉工具链\n    在home路径下建立一个文件夹取名为rpi\n    mkdir rpi\n    进入该目录并执行clone操作(更正一处错误)\n    cd rpi\n    git clone git://github.com/raspberrypi/tools.git\n\n    请注意clone的时间较长请耐心等待。clone完成之后可进入以下目录查看工具链的具体内容。\n    cd ~/rpi/tools/arm-bcm2708/\n\n    【特别提醒】\n    克隆完成之后可以通过pull更新tools\n    cd ~/rpi/tools\n    git pull origin\n\n    该目录中存在4个文件夹，本例使用gcc-linaro-arm-linux-gnueabihf-raspbian 或 gcc-linaro-arm-linux-gnueabihf-raspbian-x64。前者对应32位系统后者对应64位系统。\n    arm-bcm2708hardfp-linux-gnueabi  \n    gcc-linaro-arm-linux-gnueabihf-raspbian\n    arm-bcm2708-linux-gnueabi        \n    gcc-linaro-arm-linux-gnueabihf-raspbian-x64\n\n【3】加入环境环境变量\n    在/.bashrc文件中加入gcc交叉工具链目录。\n    sudo gedit ~/.bashrc\n    在该文件最后加入交叉工具链所在目录。请注意~符号表示HOME路径，.bashrc为隐藏文件。\n    【32位系统】\n    export PATH=$PATH:$HOME/rpi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin\n    【64位系统】\n    export PATH=$PATH:$HOME/rpi/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin\n    请注意PATH代表环境变量，:冒号代表追加。\n    保存并退出文件，接着执行以下指令以便立即更新当前控制台所包含的环境变量。\n    source .bashrc\n\n【4】简单测试\n    为了测试交叉工具链是否安装成功，可在控制台中输入\n    arm-linux-gnueabihf-gcc -v\n    控制台中输出内容如下，次步骤可证明交叉工具链安装完成且环境变量设置无误。\n \n图1 arm-linux-gnueabihf-gcc版本信息\n\n2.简单的例子\n    编写一个测试文件，在PC机上完成编译然后通过FTP上传到树莓派中并执行。\n    【测试代码】\n    文件名为hello-world.c，该例子仅测试交叉编译是否成功并简单测试了浮点数功能。\n[cpp] view plain copy 在CODE上查看代码片派生到我的代码片\n#include <stdio.h>  \nint main(void)  \n{  \n    float pi = 3.14;      \n    printf(\"Hello World\\n\");  \n    printf(\"%.2f\\n\",2*pi);  \n}  \n\n    【交叉编译——简单指令】\n    cd进入hello-world.c所在目录，输入以下指令以生成可执行文件。请注意该可执行文件不能在PC机上运行。\n    arm-linux-gnueabihf-gcc hello-world.c -o hello-world\n    最终可在hello-world.c的同目录中生成hello-world可执行文件。\n\n    【交叉编译——makefile】\n    当然也可在该目录下建立makefile文件，简单的makefile文件如下\n[plain] view plain copy 在CODE上查看代码片派生到我的代码片\nCC=arm-linux-gnueabihf-gcc  \nhello-world:hello-world.o  \nclean:  \n    rm -rf hello-world.o hello-world  \n\n    在makefile文件中使用了至少两条隐含规则，CC为默认工具链；*.o文件由同名的*.c文件生成。\n    那么在控制台中输入make即可生成可执行文件。\n\n    【FTP上传】\n    可在ubuntu中安装filezilla软件，该软件具有ubuntu版本可通过ubuntu软件中心直接安装。ubuntu版本和windows使用方法相同。\n\n\n\n    【SSH登陆执行】\n    假设raspberry的IP地址为192.168.1.107，可使用以下指令登陆raspberry\n    ssh pi@192.168.1.107\n    登陆之后进入可执行文件所在目录，修改该文件的执行权限。\n    sudo chmod 755 hello-world\n    该文件的所有者为pi，所有者pi对于该可执行文件具有可写可读可执行权限（7），755中的后两个55为可读与可执行，本例中对于hello-world用处不大。\n    输入以下指令便可运行该文件\n    ./hello-world\n    控制台输出结果，至此可完全证明交叉工具链工作正常。\n\n\n3.总结\n    最近也时工作需要重新学习了交叉工具链的安装和使用。网上阅读了很多关于树莓派交叉工具链的资料，反复尝试总是出现问题，可能为树莓派版本和交叉工具链版本差异产生的问题。希望这篇博文可以帮助各位，如果存在问题请留言。\n\n4.参考资料\n【1】Development Environment for the Raspberry Pi using a Cross Compiling Toolchain and Eclipse",
			"date_modified": 1465001319.294
		},
		{
			"post_id": 14,
			"title": "New blog post",
			"date_published": 1464278618.362,
			"body": "```\n grep \"to go\" * | awk '{print substr($3,2)\"::\" $1}' | sort -n | head -n 100 \n```\n```python\n[chr(i) for i in range(48,58)]+[chr(i) for i in range(97,123)]\n```",
			"date_modified": 1464446640.912
		},
		{
			"post_id": 13,
			"title": "New blog post",
			"date_published": 1464196231.302,
			"body": "```c#\nusing System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Mime;\nnamespace Fish\n{\n    /**/\n    /// <summary>  \n    /// 发送邮件[you jian]的类  \n    /// </summary>  \n    public class SendMail\n    {\n        private MailMessage mailMessage;\n        private SmtpClient smtpClient;\n        private string password;//发件人密码[mi ma]  \n        /**/\n        /// <summary>  \n        /// 处审核后类的实例  \n        /// </summary>  \n        /// <param name=\"To\">收件人地址[di zhi]</param>  \n        /// <param name=\"From\">发件人地址[di zhi]</param>  \n        /// <param name=\"Body\">邮件[you jian]正文[zheng wen]</param>  \n        /// <param name=\"Title\">邮件[you jian]的主题</param>  \n        /// <param name=\"Password\">发件人密码[mi ma]</param>  \n        public SendMail(string To, string From, string Body, string Title, string Password)\n        {\n            mailMessage = new MailMessage();\n            mailMessage.To.Add(To);\n            mailMessage.From = new System.Net.Mail.MailAddress(From);\n            mailMessage.Subject = Title;\n            mailMessage.Body = Body;\n            mailMessage.IsBodyHtml = true;\n            mailMessage.BodyEncoding = System.Text.Encoding.UTF8;\n            mailMessage.Priority = System.Net.Mail.MailPriority.Normal;\n            this.password = Password;\n            Console.WriteLine(\"send mail sucssesful\");\n        }\n        /**/\n        /// <summary>  \n        /// 添加附件  \n        /// </summary>  \n        public void Attachments(string Path)  \n        {  \n            string[] path = Path.Split(',');  \n            Attachment data;  \n            ContentDisposition disposition;  \n            for (int i = 0; i < path.Length; i++)  \n            {  \n                data = new Attachment(path[i], MediaTypeNames.Application.Octet);//实例化[shi li hua]附件  \n                disposition = data.ContentDisposition;  \n                disposition.CreationDate = System.IO.File.GetCreationTime(path[i]);//获取附件的创建日期[chuang jian ri qi]  \n                disposition.ModificationDate = System.IO.File.GetLastWriteTime(path[i]);//获取附件的修改[xiu gai]日期  \n                disposition.ReadDate = System.IO.File.GetLastAccessTime(path[i]);//获取附件的读取[du qu]日期  \n                mailMessage.Attachments.Add(data);//添加到附件中  \n            }  \n        }\n        /**/\n        /// <summary>  \n        /// 异步[yi bu]发送邮件[you jian]  \n        /// </summary>  \n        /// <param name=\"CompletedMethod\"></param>  \n        public void SendAsync(SendCompletedEventHandler CompletedMethod)\n        {\n            if (mailMessage != null)\n            {\n                smtpClient = new SmtpClient();\n                smtpClient.Credentials = new System.Net.NetworkCredential(mailMessage.From.Address, password);//设置[she zhi]发件人身份[shen fen]的票据  \n                smtpClient.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;\n                smtpClient.Host = \"smtp.\" + mailMessage.From.Host;\n                smtpClient.SendCompleted += new SendCompletedEventHandler(CompletedMethod);//注册[zhu ce]异步[yi bu]发送邮件[you jian]完成时的事件[shi jian]  \n                smtpClient.SendAsync(mailMessage, mailMessage.Body);\n            }\n        }\n        /**/\n        /// <summary>  \n        /// 发送邮件[you jian]  \n        /// </summary>  \n        public void Send()\n        {\n            if (mailMessage != null)\n            {\n                smtpClient = new SmtpClient();\n                smtpClient.Credentials = new System.Net.NetworkCredential(mailMessage.From.Address, password);//设置[she zhi]发件人身份[shen fen]的票据  \n                smtpClient.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;\n                smtpClient.Host = \"smtp.\" + mailMessage.From.Host;\n                smtpClient.Send(mailMessage);\n            }\n        }\n    }\n} \n```",
			"date_modified": 1464196248.447
		},
		{
			"post_id": 12,
			"title": "New blog post",
			"date_published": 1464156823.952,
			"body": "Windows系统环境变量大全表——\n环境变量\n详细信息\n%ALLUSERSPROFILE%\n所有用户 Profile 文件位置\nWindows系统环境变量大全表——\n环境变量\n详细信息\n%ALLUSERSPROFILE%\n所有用户 Profile 文件位置\n%APPDATA%\n应用程序数据的默认存放位置\n%CD%\n当前目录\n%CLIENTNAME%\n联接到终端服务会话时客户端的 NETBIOS 名\n%CMDCMDLINE%\n启动当前 cmd.exe 所使用的命令行\n%CMDEXTVERSION%\n当前命令处理程序扩展版本号\n%CommonProgramFiles%\n常用文件的文件夹路径\n%COMPUTERNAME%\n计算机名\n%COMSPEC%\n可执行命令外壳（命令处理程序）的路径\n%DATE%\n当前日期\n%ERRORLEVEL%\n最近使用的命令的错误代码\n%HOMEDRIVE%\n用户主目录所在的驱动器盘符\n%HOMEPATH%\n用户主目录的完整路径\n%HOMESHARE%\n用户共享主目录的网络路径\n%LOGONSEVER%\n有效的当前登录会话的域名控制器名\n%NUMBER_OF_PROCESSORS%\n计算机安装的处理器数\n%OS%\n操作系统的名字（ Windows XP 和 Windows 2000 列为 Windows_NT ）\n%Path%\n可执行文件的搜索路径\n%PATHEXT%\n操作系统认为可被执行的文件扩展名\n%PROCESSOR_ARCHITECTURE%\n处理器的芯片架构\n%PROCESSOR_IDENTFIER%\n处理器的描述\n%PROCESSOR_LEVEL%\n计算机的处理器的型号\n%PROCESSOR_REVISION%\n处理器的修订号\n%ProgramFiles%\nProgram Files 文件夹的路径\n%PROMPT%\n当前命令解释器的命令提示设置\n%RANDOM%\n界于 0 和 32767 之间的随机十进制数\n%SESSIONNAME%\n连接到终端服务会话时的连接和会话名\n%SYSTEMDRIVE%\nWindows 启动目录所在驱动器\n%SYSTEMROOT%\nWindows 启动目录的位置\n%TEMP% and %TMP%\n当前登录的用户可用应用程序的默认临时目录\n%TIME%\n当前时间\n%USERDOMAIN%\n包含用户帐号的域的名字\n%USERNAME%\n当前登录的用户的名字\n%USERPROFILE%\n当前用户 Profile 文件位置\n%WINDIR%\n操作系统目录的位置",
			"date_modified": 1464398386.249
		},
		{
			"post_id": 11,
			"title": "BAT",
			"date_published": 1464142835.759,
			"body": "```\n@echo off\nfor /f \"delims=\" %%a in (test.txt)  do ( %%a )\npause\n```",
			"date_modified": 1464142881.881
		},
		{
			"post_id": 10,
			"title": "RPI rebuild",
			"date_published": 1463991552.672,
			"body": "```\nsudo apt install lrzsz\nsudo apt-get install isc-dhcp-server\nsudo apt-get install tree vim htop nmap\nsudo apt-get install samba\nsudo apt-get install ipython3 python3\nsudo adduser btsync\nsudo mkdir /mnt/sda{1,2}\n--------------------------------------------------------\nsudo adduser github\nsudo adduser btsync\nscp /home/btsync btsync@pi01:/home/btsync\nscp /home/github github@pi01:/home/github\nsudo adduser btsync\nsudo smbpasswd -a btsync\nsudo su - btsync\n\n ln -s /mnt/sda1/TDDOWNLOAD/ tddown\n ln -s /mnt/sda3 sda3\n ln -s \"/mnt/sda1/pci/$username/[   DOC   ]/MyBase\" base \n ln -s /mnt/sda2 sda2 \n ln -s /mnt/sda1/guest guest \n ln -s /mnt/sda1/raspi/btsync/xunlei xunLei \n ln -s /mnt/sda1/raspi/btsync/sync-data/ sync-data \n ln -s /mnt/sda1/raspi/btsync/sync-bin/ sync-bin \n ln -s /mnt/sda1/raspi/btsync/bter_coin-bin/ bter_coin-bin \n--------------------------------------------------------\n\nbackup:\n/etc/dhcp/dhcpd.conf\n/etc/samba/smb.conf\n/etc/hosts\n/etc/fstab\n---\n/etc/hostname\n/etc/group\n/etc/gshadow\n/etc/passwd\n```\n/etc/init.d/btsync\n```\n#!/bin/bash\n#chkconfig:2345 90 10\n#description:btsync service\n/home/btsync/sync-bin/btsync --config /home/btsync/sync-bin/btsync.cfg\n```\ndhcpd.conf\n```\nsubnet 192.168.1.0 netmask 255.255.255.0 {\n        option domain-name-servers 218.4.4.4;\n        option routers 192.168.1.1;\n        filename \"boot\\x64\\pxeboot.n12\";\n        next-server 192.168.1.201;\n        pool {\n                range dynamic-bootp 192.168.1.101 192.168.1.130;\n                }\n        # John\n        group {\n                host John-Server {\n                        hardware ethernet 00:30:18:A1:88:1A;\n                        fixed-address 192.168.1.201;\n                        }\n                host John-Win10 {\n                        hardware ethernet 10:BF:48:BC:B5:D5;\n                        fixed-address 192.168.1.202;\n                        }\n                host John-XP {\n                        hardware ethernet 00:1C:26:4E:C6:D1;\n                        fixed-address 192.168.1.203;\n                        }\n                host John-PI1 {\n                        hardware ethernet b8:27:eb:69:29:8c;\n                        fixed-address 192.168.1.212;\n                        }\n                host John-PI2 {\n                        hardware ethernet b8:27:EB:E9:F4:13;\n                        fixed-address 192.168.1.211;\n                        }\n                host John-Android {\n                        hardware ethernet 8c:34:fd:4b:80:9b;\n                        fixed-address 192.168.1.221;\n                        }\n                }\n        }\n```\nsmb.conf\n```\n[global]\n   workgroup = WORKGROUP\n   server string = %h server\n   dns proxy = no\n   log file = /var/log/samba/log.%m\n   max log size = 1000\n   syslog = 0\n   panic action = /usr/share/samba/panic-action %d\n   encrypt passwords = true\n   passdb backend = tdbsam\n   obey pam restrictions = yes\n   unix password sync = yes\n   passwd program = /usr/bin/passwd %u\n   passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* .\n   pam password change = yes\n   map to guest = bad user\n   usershare allow guests = yes\nfollow symlinks=yes\nwide links=yes\nunix extensions=no\n[homes]\n   comment = Home Directories\n   browseable = yes\n   read only = no\n   create mask = 0700\n   directory mask = 0700\n[printers]\n   comment = All Printers\n   browseable = no\n   path = /var/spool/samba\n   printable = yes\n   guest ok = no\n   read only = yes\n   create mask = 0700\n[print$]\n   comment = Printer Drivers\n   path = /var/lib/samba/printers\n   browseable = yes\n   read only = yes\n   guest ok = no\n```\nfstab\n```\nproc            /proc           proc    defaults          0       0\n/dev/mmcblk0p1  /boot           vfat    defaults          0       2\n/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1\n/dev/sda1       /mnt/sda1       ext4    defaults\t  0\t  0\n/dev/sdb1 \t/mnt/sda2       ext4\tdefaults\t  0       0\n```\n/etc/network/interface\n```\niface eth0 inet static\n\taddress 192.168.1.212\n\tnetmask 255.255.255.0\n\tbroadcast 255.255.255.255\n\tnetwork 192.168.1.0\n```\nhosts\n```\n192.168.1.212   pi01\n192.168.1.202\tw10\n```\ncrontab -l\n```\n[btsync]\n*/15 * * * * /usr/bin/python3 /home/btsync/bter_coin-bin/bter.py\n[twister]\n./twisterd -rpcuser=user -rpcpassword=pwd -rpcallowip=192.168.0.199 -rpcallowip=127.0.0.1\n[root]\n30 6 * * * /root/open 4\n0 18 * * * /root/close 4\n4 18 * * * /etc/webmin/package-updates/update.pl\n```\n/etc/init.d/xware_dog\n```\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides:       John Wei\n# Required-Start: \n# Required-Stop:  \n# Default-Start:  2 3 4 5\n# Default-Stop:   0 1 6\n# Description:    Xunlei Xware Watch Dog\n### END INIT INFO\n\npath=/home/btsync/xunLei/xware\n#path=`pwd`  #设置为当前目录为迅雷固件的路径\ncheck_path=\"ls $path|grep etm_xware\"\n#check_path=`ls|grep etm_xware`\nif [ \"$check_path\" == \"\" ]\nthen\necho \"亲！请放在迅雷固件目录！！！要不我怎么知道你迅雷固件在哪？\"\nelse\nrestart_etm(){\n  `kill -9 \"$pid_vod\"`\n  `kill -9 \"$pid_old\"`\n  echo `date`\" 完成重启\">>$path/wd.log\n  sleep 5s\n}\n\nhandle_etm(){\n  echo `date`\"- \"$st\" 迅雷远程看门狗检测到异常！！！\">>$path/wd.log\n  pid_old=`pidof etm_xware`\n  pid_vod=`pidof vod_httpserver`\n  echo `date`\" 检测到异常，开始重启...\">>$path/wd.log\n  restart_etm \n  pid_new=`pidof etm_xware`\n  if [ \"$pid_new\" != \"$pid_old\" ]\n  then\n    echo `date`\" 重启成功...等待下一次检测...\">>$path/wd.log\n    echo `date`\" - watchdog_reboot\">>$path/etm.log\n  fi\n\n}\n\nmain_loop(){\n  while :\n  do\n  st=`tail $path/etm.log -n 1 |awk '/^.ERROR/''{print $1}'`\n  st1=`tail $path/etm.log -n 1 |awk '/failed/''{print $1}'`\n  st_debug=`tail $path/monitor.log -n 1|awk '/err:sockfd=/''{print $1}'|awk -F= '{print $1}'`\n#echo \"st=\"$st\n# echo \"st_debug=\"$st_debug\n  if [ \"$st_debug\" == \"\" ] && [ \"$st\" == \"\" ] && [ \"$st1\" == \"\" ] \n  then\n  echo `date`\"- \"$st\" 迅雷远程看门狗检测结果为：正常\">>$path/wd.log\n  else \n    if [ \"$st_debug\" == \"err:sockfd\" ] || [ \"$st\" == \"[ERROR]\" ] || [ \"$st1\" !=\"\" ]\n    then  \n  #st=500\n      handle_etm \n    fi\n  fi\n  sleep 20s\n  \n  done\n}\n\n\n############################分割线####################################\npid_old=`pidof etm_xware`\npid_vod=`pidof vod_httpserver`\nbash=`ps -aux|grep xware_bash.sh|awk '{if(NR==2)print $2}'`\nif [ \"$pid_old\" != \"\" ]\nthen\n  echo \"检测到原来的迅雷远程进程，开始重置以激活看门狗...\"\n  echo `date`\" - 检测到原来的迅雷远程进程，开始重置以激活看门狗...\">>$path/wd.log\n  if [ \"$bash\" != \"\" ]\n  then\n    \n    a=`ps -aux|grep xware_bash.sh|awk 'BEGIN{t=0;} { t++; } END{print t; }'`\n    b=`ps -aux|grep wd.sh|awk 'BEGIN{t=0;} { t++; } END{print t; }'`\n    if [ \"$a\" -gt 1 ] \n    then\n#      echo \"a>1\"\n      for((i=1;i<a;i++))\n      do\n        bash=`ps -aux|grep xware_bash.sh|awk '{if(NR==1)print $2}'`\n#        echo $bash\n        `kill -9 \"$bash\"`\n      done\n    fi\n    if [ \"$b\" -gt 2 ] \n    then\n#     echo \"b>2\"\n      for((i=1;i<b-2;i++))\n      do\n        wd=`ps -aux|grep wd.sh|awk '{if(NR==1)print $2}'`\n#        echo $wd\n        `kill -9 \"$wd\"`\n      done\n    fi\n    sleep 5s\n    pid_old=`pidof etm_xware`\n    pid_vod=`pidof vod_httpserver`\n    \n    `kill -9 \"$pid_vod\"`\n    `kill -9 \"$pid_old\"`\n    echo \"正在重启...\"\n    echo `ps -aux|grep xware_bash.sh|awk '{if(NR==2)print $2}'`\n    `$path/xware_bash.sh>>$path/monitor.log &` \n    sleep 5s\n    echo \"重置成功！\"\n    echo `date`\" - 重置成功！\">>$path/wd.log\n    main_loop\n  fi\nelse\n\n  echo \"正在启动看门狗...\"\n  `$path/xware_bash.sh>>$path/monitor.log &`  \n\n  sleep 5s\n  pid_new=`pidof etm_xware`\n  if [ \"$pid_new\" != \"\" ]\n  then\n    echo \"启动成功！\"\n    echo `date`\" 启动成功！\">>$path/wd.log\n  fi\n  main_loop\n\nfi\nfi\n\n```",
			"date_modified": 1465491109.791
		},
		{
			"post_id": 9,
			"title": "Shell Sample",
			"date_published": 1463656719.31,
			"body": "boot script sample\n```\n!/bin/sh\n### BEGIN INIT INFO\n# Provides: test_ls\n# Required-Start: $network\n# Required-Stop: $network\n# Default-Start: 2 3 5\n# Description: this is description\n### END INIT INFO\n\ncase \"$1\" in\n'start')\n\tls /\n\t;;\n'stop')\n\tcd /root\n\t;;\n```\n\n添加一个服务 \n`# sudo update-rc.d 服务名 defaults `\n删除一个服务 \n`# sudo update-rc.d -f 服务名 remove `\n临时服务启动停止等 \n`# /etc/init.d/服务名 start|restart|stop `",
			"date_modified": 1464192118.12
		},
		{
			"post_id": 8,
			"title": "暗黑各职业毕业装",
			"date_published": 1463570549.644,
			"body": "豆角基本装\n李头，暴风盾，天鹰，对戒，护盾手\n",
			"date_modified": 1463570657.989
		},
		{
			"post_id": 7,
			"title": "RPi 操作继电器",
			"date_published": 1463397415.071,
			"body": "`open.sh 4`\n```sh\n#!/bin/bash\n#echo export pin $1\n#echo $1 > /sys/class/gpio/export\n#echo out > /sys/class/gpio/gpio$1/direction\n#echo 0 > /sys/class/gpio/gpio$1/value\nsleep 1\necho $1 > /sys/class/gpio/unexport\n```\n`close.sh 4`\n```\n#!/bin/bash\necho export pin $1\necho $1 > /sys/class/gpio/export\necho out > /sys/class/gpio/gpio$1/direction\necho 1 > /sys/class/gpio/gpio$1/value\nsleep 1\n#echo $1 > /sys/class/gpio/unexport\n```",
			"date_modified": 1463531840.6
		},
		{
			"post_id": 6,
			"title": "SQL",
			"date_published": 1463387375.122,
			"body": "```python\nimport sqlite3\nconn = sqlite3.connect('temple.db')\ncurs = conn.cursor()\ncurs.execute('create table if not exists movie (url varchar(256),time varchar(40))')\na = \"http\"\nb = \"1992-11\"\nc = \"insert into movie values ('\"+ a +\"', '\"+ b +\"')\"\nd = 'insert into movie values (\"%s\", \"%s\")'%(a,b)\ncurs.execute(c)\n \nconn.commit()\ncurs.close()\nconn.close()\n```\n\n\n```sql\nalter table <table name> rename to <table name>\nselect substr(姓名,1,1)as xing ,count(*) as n from hr group by xing order by n;\nselect name,expires_in from name order by expires_in limit 1,10;\nsqlite> select count(*) from (select name from a4 where name not in (select name from n20160530));\n```\n```\n.output ab.txt\nselect .....\n.output stdout\n```\nmysql import dumpfile.\n```mysql\nmysql -u root < D:/ab.sql\n```\n\n```\nUPDATE domains SET expired = 1 WHERE   name IN ( \n      SELECT name FROM domains  WHERE  name NOT IN  ( \n            SELECT name FROM n20160530 )) ;\n\nINSERT INTO domains \n\tSELECT name ,value ,expired FROM n20160529 \n\tWHERE name NOT IN ( \n      \t\tSELECT name FROM domains ) ;\n```\n```\nsqlite> CREATE TABLE IF NOT EXISTS testtable (first_col integer);\nsqlite> drop table if exists\nsqlite> create table if not exists\n```",
			"date_modified": 1466473585.215
		},
		{
			"post_id": 5,
			"title": "SQLite 导入文本",
			"date_published": 1463387210.946,
			"body": "create database:\n```\nsqlite3 test.db\n```\ncreate table:\n```\ncreate table table_name(\n\t...\n\t)\n```\nimport\n```\nsqlite3 info.db\n.separator :\n.import file_name table_name\n```\n",
			"date_modified": 1463387663.28
		},
		{
			"post_id": 4,
			"title": "VCC VDD VSS VEE VDDH",
			"date_published": 1463362199.841,
			"body": "Vcc和Vdd是器件的电源端。Vcc是双极器件的正，Vdd多半是单极器件的正。下标可以理解为NPN晶体管的集电极C，和PMOS or NMOS场效应管的漏极D。同样你可在电路图中看见Vee和Vss，含义一样。因为主流芯片结构是硅NPN所以Vcc通常是正。如果用PNP结构Vcc就为负了。建议选用芯片时一定要看清电气参数。\n目录\n1 解释\n2 说明\n▪ 另外一种解释：\n▪ 电路中的解释：\n解释编辑\nVCC：C=circuit 表示电路的意思, 即接入电路的电压；\nVDD：D=device 表示器件的意思, 即器件内部的工作电压（接电源）；\nVSS：S=series 表示公共连接的意思，通常指电路公共接地端电压(接地）；\nVEE：E=electron 表示构成物质的基本粒子之一，因带负电，也写作e，通常指负电压供电；\nVDDH：H=high 表示高压，即高压供电端。\n说明编辑\n1、对于数字电路来说，VCC是电路的供电电压,VDD是芯片的工作电压（通常Vcc>Vdd），VSS是接地点。\n2、有些IC既有VDD引脚又有VCC引脚，说明这种器件自身带有电压转换功能，这个时候Vdd仅仅是给器件内部的数字或模拟系统供电，而Vcc是给包括外设和内部系统供电，所以Vcc的电压必须比Vdd高。\n3、在场效应管（或CMOS器件）中，VDD为漏极，VSS为源极，VDD和VSS指的是元件引脚，而不表示供电电压。\n4、一般来说VCC=模拟电源,VDD=数字电源,VSS=数字地,VEE=负电源\n另外一种解释：\nVcc 来源于集电极电源电压, Collector Voltage, 一般用于双极型晶体管, PNP 管时为负电源电压, 有时也标成 -Vcc, NPN 管时为正电压.\nVdd 来源于漏极电源电压, Drain Voltage, 用于 MOS 晶体管电路, 一般指正电源. 因为很少单独用 PMOS 晶体管, 所以在 CMOS 电路中 Vdd 经常接在 PMOS 管的源极上.\nVss 源极电源电压, 在 CMOS 电路中指负电源, 在单电源时指零伏或接地.\nVee 发射极电源电压, Emitter Voltage, 一般用于 ECL 电路的负电源电压.\nVbb 基极电源电压, 用于双极晶体管的共基电路.\n电路中的解释：\n单解：\nVDD：电源电压（单极器件）；电源电压（4000系列数字电 路）；漏极电压（场效应管）\nVCC：电源电压（双极器件）；电源电压（74系列数字电路）；声控载波（Voice Controlled Carrier)\nVSS:：地或电源负极\nVEE：负电压供电；场效应管的源极（S）\nVPP：编程/擦除电压。\n详解：\n在电子电路中，VCC是电路的供电电压, VDD是芯片的工作电压：\nVCC：C=circuit 表示电路的意思, 即接入电路的电压， D=device 表示器件的意思, 即器件内部的工作电压，在普通的电子电路中，一般Vcc>Vdd !\nVSS：S=series 表示公共连接的意思，也就是负极。\n有些IC 同时有VCC和VDD， 这种器件带有电压转换功能。\n在“场效应”即COMS元件中，VDD乃CMOS的漏极引脚，VSS乃CMOS的源极引脚， 这是元件引脚符号，它没有“VCC”的名称。\n词条标签： 科技产品 ， 科技",
			"date_modified": 1463362595.111
		}
	],
	"tag": [
		{
			"value": "SQLite",
			"post_id": 5
		},
		{
			"value": "SQLite",
			"post_id": 6
		},
		{
			"value": "D3",
			"post_id": 8
		},
		{
			"value": "Linux",
			"post_id": 9
		},
		{
			"value": "RPI",
			"post_id": 10
		},
		{
			"value": "RPI",
			"post_id": 7
		},
		{
			"value": "RPI",
			"post_id": 4
		},
		{
			"value": "SCRIPT",
			"post_id": 11
		},
		{
			"value": "Linux",
			"post_id": 16
		},
		{
			"value": "RPI",
			"post_id": 15
		},
		{
			"value": "Linux",
			"post_id": 17
		},
		{
			"value": "Python",
			"post_id": 18
		},
		{
			"value": "Python",
			"post_id": 19
		},
		{
			"value": "Python",
			"post_id": 20
		},
		{
			"value": "Python",
			"post_id": 21
		},
		{
			"value": "Python",
			"post_id": 22
		},
		{
			"value": "Python",
			"post_id": 23
		},
		{
			"value": "Python",
			"post_id": 24
		},
		{
			"value": "Ubuntu",
			"post_id": 25
		},
		{
			"value": "Linux",
			"post_id": 26
		},
		{
			"value": "转载",
			"post_id": 31
		},
		{
			"value": "转载",
			"post_id": 32
		}
	]
}