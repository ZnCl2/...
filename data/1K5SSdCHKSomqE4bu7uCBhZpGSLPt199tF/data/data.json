{
	"title": "匿名无名",
	"description": "学会用搜索引擎就不会感觉乱了<br /><p hidden=\"hidden\">请自重</p>~~胡编乱造~~",
	"links": "<p hidden=\"hidden\">举头三尺有神明！！！</p>\n\n*   快捷通道区：\n\n*   *   [Tor专用](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:14:Tor%E4%B8%93%E7%94%A8%E4%BB%A3%E7%90%86IP-%E9%A2%84%E9%98%B2-%E5%B0%BD%E9%87%8F%E4%BF%9D%E6%8C%81%E6%AF%8F%E5%A4%A9%E4%B8%80%E6%9B%B4%E6%96%B0%F0%9F%97%BD+)[Socks代理](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:14:Tor%E4%B8%93%E7%94%A8%E4%BB%A3%E7%90%86IP-%E9%A2%84%E9%98%B2-%E5%B0%BD%E9%87%8F%E4%BF%9D%E6%8C%81%E6%AF%8F%E5%A4%A9%E4%B8%80%E6%9B%B4%E6%96%B0%F0%9F%97%BD+)\n*   *   [Zeronet网站管理权限](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:20:%E4%BF%AE%E6%94%B9%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86%F0%9F%90%A3+)\n*   *   [Tor与Zeronet结合](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:15:%E5%B0%8F0%E5%B8%A6%E7%9D%80%E6%B4%8B%E8%91%B1%E5%A4%B4%E8%B7%91%E5%BE%97%E6%85%A2%E5%A6%82%E9%BE%9F%EF%BC%9F+%E5%92%B8%E9%B1%BC%E7%9A%84%E7%9B%90%E7%84%97%E6%B4%8B%E8%91%B1%E7%BB%8F%E9%AA%8C%EF%BC%8C%E6%95%99%E4%BA%BA%E7%BD%91%E4%B8%8A%E5%81%9Among%E7%94%B7%F0%9F%8C%8F+)\n    *   [翻墙](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:5:%E7%BF%BB%E5%A2%99%E6%8E%A8%E8%8D%90+%F0%9F%8F%A7+)",
	"next_post_id": 31,
	"demo": false,
	"modified": 1514655583,
	"post": [
		{
			"post_id": 30,
			"title": "缩小博客帖子节约版面",
			"date_published": 1514654763.4,
			"body": "克隆的博客：\n\n如何在主板面缩小博客帖子长度。\n\n在空行上用三个减号（星号也可）实现缩小帖子，在哪缩小，就在哪放三个以上减号就可以了。\n\n* * *\n\n从2684行开始js源码：\n\n`if (post.body.match(/^---/m)) {`\n`date_published += \" &middot; \" + (Time.readtime(post.body));`\n`$(\".more\", elem).css(\"display\", \"inline-block\").attr(\"href\", \"?Post:\" + post.post_id + \":\" + title_hash);`\n`}`"
		},
		{
			"post_id": 29,
			"title": "Bitcoin: A Peer-to-Peer Electronic Cash System",
			"date_published": 1511719162.2,
			"body": "Satoshi Nakamoto\n\nsatoshin@gmx.com\n\n[www.bitcoin.org](http://www.bitcoin.org)\n\n---\n\nAbstract. A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled by nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone. 1\\. Introduction Commerce on the Internet has come to rely almost exclusively on financial institutions serving as trusted third parties to process electronic payments. While the system works well enough for most transactions, it still suffers from the inherent weaknesses of the trust based model. Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, limiting the minimum practical transaction size and cutting off the possibility for small casual transactions, and there is a broader cost in the loss of ability to make non-reversible payments for nonreversible services. With the possibility of reversal, the need for trust spreads. Merchants must be wary of their customers, hassling them for more information than they would otherwise need. A certain percentage of fraud is accepted as unavoidable. These costs and payment uncertainties can be avoided in person by using physical currency, but no mechanism exists to make payments over a communications channel without a trusted party. What is needed is an electronic payment system based on cryptographic proof instead of trust, allowing any two willing parties to transact directly with each other without the need for a trusted third party. Transactions that are computationally impractical to reverse would protect sellers from fraud, and routine escrow mechanisms could easily be implemented to protect buyers. In this paper, we propose a solution to the double-spending problem using a peer-to-peer distributed timestamp server to generate computational proof of the chronological order of transactions. The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes. 1 2\\. Transactions We define an electronic coin as a chain of digital signatures. Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership.\n\n* * *\n\n![__.png (396x230)](data/img/post_29___.png)\n\nThe problem of course is the payee can't verify that one of the owners did not double-spend the coin. A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank. We need a way for the payee to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest transaction is the one that counts, so we don't care about later attempts to double-spend. The only way to confirm the absence of a transaction is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received. 3\\. Timestamp Server The solution we propose begins with a timestamp server. A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post [2-5]. The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it.\n\n![____1_.png (600x155)](data/img/post_29_____1_.png)\n\n4\\. Proof-of-Work To implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proofof-work system similar to Adam Back's Hashcash [6], rather than newspaper or Usenet posts. The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash. For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block's hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.\n\n![____2_.png (626x157)](data/img/post_29_____2_.png)\n\nThe proof-of-work also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added. To compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they're generated too fast, the difficulty increases. 5\\. Network The steps to run the network are as follows: 1) New transactions are broadcast to all nodes. 2) Each node collects new transactions into a block. 3) Each node works on finding a difficult proof-of-work for its block. 4) When a node finds a proof-of-work, it broadcasts the block to all nodes. 5) Nodes accept the block only if all transactions in it are valid and not already spent. 6) Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash. Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proofof-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one. 3 Block Prev Hash Nonce Tx Tx ... Block Prev Hash Nonce Tx Tx ... New transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one. 6\\. Incentive By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them. The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended. The incentive can also be funded with transaction fees. If the output value of a transaction is less than its input value, the difference is a transaction fee that is added to the incentive value of the block containing the transaction. Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free. The incentive may help encourage nodes to stay honest. If a greedy attacker is able to assemble more CPU power than all the honest nodes, he would have to choose between using it to defraud people by stealing back his payments, or using it to generate new coins. He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own wealth. 7\\. Reclaiming Disk Space Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block's hash, transactions are hashed in a Merkle Tree [7][2][5], with only the root included in the block's hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.\n\n![____3_.png (753x408)](data/img/post_29_____3_.png)\n\nA block header with no transactions would be about 80 bytes. If we suppose blocks are generated every 10 minutes, 80 bytes _6_ 24 * 365 = 4.2MB per year. With computer systems typically selling with 2GB of RAM as of 2008, and Moore's Law predicting current growth of 1.2GB per year, storage should not be a problem even if the block headers must be kept in memory. 4 Block Block Block Header (Block Hash) Prev Hash Nonce Hash01 Hash0 Hash1 Hash2 Hash3 Hash23 Root Hash Hash01 Hash2 Tx3 Hash23 Block Header (Block Hash) Root Hash Transactions Hashed in a Merkle Tree After Pruning Tx0-2 from the Block Prev Hash Nonce Hash3 Tx0 Tx1 Tx2 Tx3 8\\. Simplified Payment Verification It is possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he's convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it's timestamped in. He can't check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.\n\nLongest Proof-of-Work Chain\n\n![____4_.png (908x355)](data/img/post_29_____4_.png)\n\nAs such, the verification is reliable as long as honest nodes control the network, but is more vulnerable if the network is overpowered by an attacker. While network nodes can verify transactions for themselves, the simplified method can be fooled by an attacker's fabricated transactions for as long as the attacker can continue to overpower the network. One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user's software to download the full block and alerted transactions to confirm the inconsistency. Businesses that receive frequent payments will probably still want to run their own nodes for more independent security and quicker verification. 9\\. Combining and Splitting Value Although it would be possible to handle coins individually, it would be unwieldy to make a separate transaction for every cent in a transfer. To allow value to be split and combined, transactions contain multiple inputs and outputs. Normally there will be either a single input from a larger previous transaction or multiple inputs combining smaller amounts, and at most two outputs: one for the payment, and one returning the change, if any, back to the sender.\n\n![____5_.png (322x191)](data/img/post_29_____5_.png)\n\nIt should be noted that fan-out, where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction's history. 5 Transaction In ... In Out ... Hash01 Hash2 Hash3 Hash23 Block Header Merkle Root Prev Hash Nonce Block Header Merkle Root Prev Hash Nonce Block Header Merkle Root Prev Hash Nonce Merkle Branch for Tx3 Longest Proof-of-Work Chain Tx3 10\\. Privacy The traditional banking model achieves a level of privacy by limiting access to information to the parties involved and the trusted third party. The necessity to announce all transactions publicly precludes this method, but privacy can still be maintained by breaking the flow of information in another place: by keeping public keys anonymous. The public can see that someone is sending an amount to someone else, but without information linking the transaction to anyone. This is similar to the level of information released by stock exchanges, where the time and size of individual trades, the \"tape\", is made public, but without telling who the parties were.\n\n![____6_.png (743x234)](data/img/post_29_____6_.png)\n\nAs an additional firewall, a new key pair should be used for each transaction to keep them from being linked to a common owner. Some linking is still unavoidable with multi-input transactions, which necessarily reveal that their inputs were owned by the same owner. The risk is that if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner. 11\\. Calculations We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent. The race between the honest chain and an attacker chain can be characterized as a Binomial Random Walk. The success event is the honest chain being extended by one block, increasing its lead by +1, and the failure event is the attacker's chain being extended by one block, reducing the gap by -1\\. The probability of an attacker catching up from a given deficit is analogous to a Gambler's Ruin problem. Suppose a gambler with unlimited credit starts at a deficit and plays potentially an infinite number of trials to try to reach breakeven. We can calculate the probability he ever reaches breakeven, or that an attacker ever catches up with the honest chain, as follows [8]:\n\n![____7_.png (713x199)](data/img/post_29_____7_.png)\n\nGiven our assumption that p > q, the probability drops exponentially as the number of blocks the attacker has to catch up with increases. With the odds against him, if he doesn't make a lucky lunge forward early on, his chances become vanishingly small as he falls further behind. We now consider how long the recipient of a new transaction needs to wait before being sufficiently certain the sender can't change the transaction. We assume the sender is an attacker who wants to make the recipient believe he paid him for a while, then switch it to pay back to himself after some time has passed. The receiver will be alerted when that happens, but the sender hopes it will be too late. The receiver generates a new key pair and gives the public key to the sender shortly before signing. This prevents the sender from preparing a chain of blocks ahead of time by working on it continuously until he is lucky enough to get far enough ahead, then executing the transaction at that moment. Once the transaction is sent, the dishonest sender starts working in secret on a parallel chain containing an alternate version of his transaction. The recipient waits until the transaction has been added to a block and z blocks have been linked after it. He doesn't know the exact amount of progress the attacker has made, but assuming the honest blocks took the average expected time per block, the attacker's potential progress will be a Poisson distribution with expected value:\n\n![____8_.png (99x62)](data/img/post_29_____8_.png)\n\nTo get the probability the attacker could still catch up now, we multiply the Poisson density for each amount of progress he could have made by the probability he could catch up from that point:\n\n![____9_.png (376x102)](data/img/post_29_____9_.png)\n\nRearranging to avoid summing the infinite tail of the distribution...\n\n![____10_.png (335x105)](data/img/post_29_____10_.png)\n\nConverting to C code...\n\n`#include <math.h>`\n\n`double AttackerSuccessProbalility(double q, int z)`\n\n`{`\n\n`double p=1.0-q;`\n\n`double lambda=z*(q/p);`\n\n`double sum=1.0;`\n\n`int i,k;`\n\n`for (k=0;k<=z;k++)`\n\n`{`\n\n`double poisson=exp(-lambda);`\n\n`for(i=1;i<=k;i++)`\n\n`poisson*=lambda/i;`\n\n`sum-=poisson*(1-pow(q/p,z-k));`\n\n`}`\n\n`return sum;`\n\n`}`\n\nRunning some results, we can see the probability drop off exponentially with z. `q=0.1`\n\n`z=0 P=1.0000000`\n\n`z=1 P=0.2045873`\n\n`z=2 P=0.0509779`\n\n`z=3 P=0.0131722`\n\n`z=4 P=0.0034552`\n\n`z=5 P=0.0009137`\n\n`z=6 P=0.0002428`\n\n`z=7 P=0.0000647`\n\n`z=8 P=0.0000173`\n\n`z=9 P=0.0000046`\n\n`z=10 P=0.0000012`\n\n`q=0.3`\n\n`z=0 P=1.0000000`\n\n`z=5 P=0.1773523`\n\n`z=10 P=0.0416605`\n\n`z=15 P=0.0101008`\n\n`z=20 P=0.0024804`\n\n`z=25 P=0.0006132`\n\n`z=30 P=0.0001522`\n\n`z=35 P=0.0000379`\n\n`z=40 P=0.0000095`\n\n`z=45 P=0.0000024`\n\n`z=50 P=0.0000006`\n\nSolving for P less than 0.1%...\n\n`P < 0.001`\n\n`q=0.10 z=5`\n\n`q=0.15 z=8`\n\n`q=0.20 z=11`\n\n`q=0.25 z=15`\n\n`q=0.30 z=24`\n\n`q=0.35 z=41`\n\n`q=0.40 z=89`\n\n`q=0.45 z=340`\n\n12\\. Conclusion We have proposed a system for electronic transactions without relying on trust. We started with the usual framework of coins made from digital signatures, which provides strong control of ownership, but is incomplete without a way to prevent double-spending. To solve this, we proposed a peer-to-peer network using proof-of-work to record a public history of transactions that quickly becomes computationally impractical for an attacker to change if honest nodes control a majority of CPU power. The network is robust in its unstructured simplicity. Nodes work all at once with little coordination. They do not need to be identified, since messages are not routed to any particular place and only need to be delivered on a best effort basis. Nodes can leave and rejoin the network at will, accepting the proof-of-work chain as proof of what happened while they were gone. They vote with their CPU power, expressing their acceptance of valid blocks by working on extending them and rejecting invalid blocks by refusing to work on them. Any needed rules and incentives can be enforced with this consensus mechanism.\n\nReferences\n\n[1] W. Dai, \"b-money,\" [http://www.weidai.com/bmoney.txt](http://www.weidai.com/bmoney.txt), 1998.\n\n[2] H. Massias, X.S. Avila, and J.-J. Quisquater, \"Design of a secure timestamping service with minimal trust requirements,\" In 20th Symposium on Information Theory in the Benelux, May 1999.\n\n[3] S. Haber, W.S. Stornetta, \"How to time-stamp a digital document,\" In Journal of Cryptology, vol 3, no 2, pages 99-111, 1991.\n\n[4] D. Bayer, S. Haber, W.S. Stornetta, \"Improving the efficiency and reliability of digital time-stamping,\" In Sequences II: Methods in Communication, Security and Computer Science, pages 329-334, 1993.\n\n[5] S. Haber, W.S. Stornetta, \"Secure names for bit-strings,\" In Proceedings of the 4th ACM Conference on Computer and Communications Security, pages 28-35, April 1997.\n\n[6] A. Back, \"Hashcash - a denial of service counter-measure,\" [http://www.hashcash.org/papers/hashcash.pdf](http://www.hashcash.org/papers/hashcash.pdf), 2002.\n\n[7] R.C. Merkle, \"Protocols for public key cryptosystems,\" In Proc. 1980 Symposium on Security and Privacy, IEEE Computer Society, pages 122-133, April 1980.\n\n[8] W. Feller, \"An introduction to probability theory and its applications,\" 1957.\n\n[https://bitcoin.org/zh_CN/how-it-works](https://bitcoin.org/zh_CN/how-it-works)\n\n[https://bitcoin.org/bitcoin.pdf](https://bitcoin.org/bitcoin.pdf)\n\n[https://bitcoin.org/en/developer-documentation](https://bitcoin.org/en/developer-documentation)"
		},
		{
			"post_id": 27,
			"title": "小窍门-搜索我博客里的信息",
			"date_published": 1510640794.702,
			"body": "你可以在ZeroHello页面的`在已连接的站点中搜索`栏里输入关键字就能在下面看到我的博客里的搜索结果了，当然其他已连接网站的内容也有。"
		},
		{
			"post_id": 26,
			"title": "手机也可以编c语言了",
			"date_published": 1510467780.147,
			"body": "你还在等什么？快来一起编程序吧。\n\n[>>>>>>](http://www.compileconline.com/?filename=c_default)"
		},
		{
			"post_id": 25,
			"title": "一些html小巧门",
			"date_published": 1510423709.215,
			"body": "[跳转](https://stackoverflow.com/questions/4855168/what-is-href-and-why-is-it-used)\n\nUnfortunately, the most common use of `<a href=\"#\">` is by lazy programmers who want clickable non-hyperlink javascript-coded elements that behave like anchors, but they can't be arsed to add `cursor: pointer;` or `:hover` styles to a class for their non-hyperlink elements, and are additionally too lazy to set `href` to `javascript:void(0);`.\n\n---\n\nThe problem with this is that one `<a href=\"#\" onclick=\"some_function();\">` or another inevitably ends up with a javascript error, and an anchor with an onclick javascript error always ends up following its `href`. Normally this ends up being an annoying jump to the top of the page, but in the case of sites using `<base>`, `<a href=\"#\">` is handled as `<a href=\"[base href]/#\">`, resulting in an unexpected navigation. _If_ any logable errors are being generated, you won't see them in the latter case unless you enable persistent logs.\n\nIf an anchor element _is_ used as a non-anchor it _should_ have its `href` set to `javascript:void(0);`for the sake of _graceful_ degradation.\n\nI just wasted two days debugging a random unexpected page redirect that should have simply refreshed the page, and finally tracked it down to a function raising the click event of an `<a href=\"#\">`. Replacing the `#` with `javascript:void(0);` fixed it.\n\nThe first thing I'm doing Monday is purging the project of all instances of `<a href=\"#\">`."
		},
		{
			"post_id": 24,
			"title": "How to monetize your site with CoinHive (without draining your viewer's CPU!)",
			"date_published": 1509814768.699,
			"body": "[转](http://127.0.0.1:43110/Talk.ZeroNetwork.bit/?Topic:1509789326_1BgmsWcEitkkf96t5qVkBFPoYwdoc4hSqA)\n\nI figured out how to do this for Bigcat.tk, so I feel a moral obligation to share this with the rest of the open source community.\n\nAt this point I think you've all heard of Coinhive.com - a javascript application that allows you to mine Monero coins every time a user visits your website, using their CPU.. in order to fund your web development endeavors without ads.\n\nThis has sparked a lot of outrage all over the world.. with users eventually blocking the app because it was slowing down their devices, and even Anti-viruses registering it as a Trojan.\n\n---\n\nLuckily, Coinhive came up with a solution to this: You can give users consent to enable the miner.\n\nAnother cool option they have is that you can Throttle the speed of the miner. You get less coins at a slower rate with a high throttle, but users won't notice any significant reduction in CPU performance.\n\nThe code is really simple. You add this wherever you normally add your scripts:\n\n`<script type=\"text/javascript\" src=\"https://authedmine.com/lib/authedmine.min.js\"></script>`\n\n`<script>`\n\n`var miner = new CoinHive.Anonymous('ENTER_YOUR_PUBLIC_KEY_HERE');`\n\n`miner.start();`\n\n`miner.setThrottle(0.9); // Set miner on high throttle (LOW speed)!`\n\n`// Listen on events`\n\n`miner.on('found', function() { /_ Hash found _/ })`\n\n`miner.on('accepted', function() { /_ Hash accepted by the pool _/ })`\n\n`// Update stats once per second`\n\n`setInterval(function() {`\n\n`var hashesPerSecond = miner.getHashesPerSecond();`\n\n`var totalHashes = miner.getTotalHashes();`\n\n`var acceptedHashes = miner.getAcceptedHashes();`\n\n`var throttleValue = miner.getThrottle();`\n\n`var ad_state = 0;`\n\n`// Output to HTML elements... (optional)`\n\n`//document.getElementById(\"hashes_per_second\").innerHTML = parseFloat(hashesPerSecond).toFixed(2);`\n\n`//document.getElementById(\"total_hashes\").innerHTML = totalHashes;`\n\n`//document.getElementById(\"throttle_value\").innerHTML = throttleValue;`\n\n`// OR alternatively, output to console log (recommended)...`\n\n`//console.log(\"Hashes per second: \" + parseFloat(hashesPerSecond).toFixed(2));`\n\n`//console.log(\"Total hashes: \" + totalHashes);`\n\n`//console.log(\"Throttle value: \" + throttleValue);`\n\n`if (ad_state == 1) {`\n\n`console.log(\"Hello world!\"); // Do nothing, meh.`\n\n`} else {`\n\n`if (miner.isRunning()) {`\n\n`document.getElementById(\"please_help\").style.display = \"none\";`\n\n`} else {`\n\n`document.getElementById(\"please_help\").style.display = \"block\";`\n\n`ad_state = 1;`\n\n`}`\n\n`}`\n\n`}, 1000);`\n\n`</script>`\n\n..Where document.getElementById(\"please_help\") are the ads and/or notifications you will display if the miner is blocked, so you can negotiate with the User and give them consent.\n\n..and Where string\"ENTER_YOUR_PUBLIC_KEY_HERE\" is the public key that is provided to you at Coinhive.com\n\nNOTE that only one tab is allowed to be opened for the site. If a second tab is opened, then ads will be displayed on the second tab, and the second tab will not be running the miner. This is obviously a safeguard mechanism that prevents two instances of miners from running at once."
		},
		{
			"post_id": 22,
			"title": "更换ZeroBoard里的小图片头像",
			"date_published": 1509679456.873,
			"body": "目前发现，ZeroBoard里的彩色头像是不变的，如何改变这个彩色头像。\n\n发现这个头像信息是记录在`zero根目录\\data\\sites.json`里的。\n\n先进入ZeroBoard网站里，把右上角的0图标用鼠标左拖，查看`站点地址`，我的是`1Gfey7wVXXg1rxk751TBTxLJwhddDNfcdp`，我想可能都一样吧，总之自己查一下也可以。\n\n---\n\n**新发现，要关掉Zeronet客户端才行，不然删掉后会重建ZeroBoard内容在sites.json文件里。**\n\n用记事本什么的打开sites.json文件，搜索ZeroBoard的地址`1Gfey7wVXXg1rxk751TBTxLJwhddDNfcdp`；删掉 以下一串内容，并保存sites.json(如果不放心，就提前备份一下sites.json文件)：\n\n```\n\"1Gfey7wVXXg1rxk751TBTxLJwhddDNfcdp\": {\n    \"added\": 1509679069, \n    \"ajax_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \n    \"auth_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", \n    \"bytes_recv\": 1351390, \n    \"bytes_sent\": 1194688, \n    \"cache\": {\n      \"bad_files\": {\n        \"messages.json\": 1\n      }, \n      \"hashfield\": \"\"\n    }, \n    \"domain\": \"Board.ZeroNetwork.bit\", \n    \"modified\": 1509679529.241633, \n    \"optional_downloaded\": 0, \n    \"own\": false, \n    \"peers\": 152, \n    \"permissions\": [], \n    \"serving\": true, \n    \"size\": 8481922, \n    \"size_optional\": 0, \n    \"wrapper_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n  },\n```\n\n然后，重启zeronet程序，这时再去ZeroBoard里面发言，你会发现彩色头像已经变成新的了。或者改变下面这个auth_key的值也可以改变彩色头像。\n\n```\n\"auth_key\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n```\n\n至少今天的工作原理是这样的。\n\n对了，还有一小点需要注意，现在ZeroBoard设置每个登陆zeronet的IP，发言有很长时间的间隔，如果想连续发言，请更换IP，~~重启zeronet程序登陆。~~(经测试，不用重启zeronet也可以连续发言)\n\n好了，今天的Zeronet小巧门儿就到这里了，谢谢观看！"
		},
		{
			"post_id": 20,
			"title": "修改网站管理🐣 ",
			"date_published": 1508921532.292,
			"body": "一定先把主目录下的`data\\users.json`文件备份到别的地方，再删掉主目录下的`data\\users.json`文件。\n\n再重新开启Zeronet软件，这时`data\\users.json`会被重新创立，并填内容。\n\n这时打开别的地方的备份的`users.json`和主目录下新创立的`data\\users.json`，在两个文件中搜索你网站的名字（比如这样的：N1PQTPHAm6ENZWc6B92g6vY6zHR1kkNbSB），然后将老文件的\n\n---\n\n```\n,\n        \"privatekey\":\n\"这里是一串私钥码\"\n```\n\n拷到新文件相对位置，保存关闭所有文件。\n\n重启Zeronet程序。\n\n就可以签名发布了。\n\n好了，就到这了。🐡 🐡 🐡 🐡 🐡 🐡\n\n> 发现了一个问题。sites.json里的相对代码也要复制到新的sites.json文件里。这样网站才允许用`私钥`签名发布。"
		},
		{
			"post_id": 15,
			"title": "小0带着洋葱头跑得慢如龟？ 咸鱼的盐焗洋葱经验，教人网上做mong男🌏 ",
			"date_published": 1508655792.8,
			"body": "[转](/TechNoob.bit/?Post:3)（本教程需要用到Tor网桥，故需要各位有爬高高的能力）\n\n==================谬误警告==================\n\n本菜鸡得到的加速效果其实来自纸飞机自己，也就是说纸飞机实实在在地当了一个前置代理。本博文应当改为“洋葱头纸飞机与小0不共存现象的解决方案”。\n\n===========================================\n\n---\n\n~~中国大陆境内有效，至少本咸鱼的网不是那么烂了（虽然还是有点慢）~~\n\n我dark清自有锅情在此.jpg\n\n那么，壕戏开场啦！\n\n首先，小0的Tor Always需要启用，可以在ZeroHello的右上角Tor处选用“为每个链接使用Tor(更慢)”，也可以合并到下一步修改zeronet.conf中去。\n\nZeronet文件夹下有一个zeronet.conf文件，编辑它（Sublime大法好！虽然记事本可能也行），检查一下这三行：\n\n`tor = always`\n\n`tor_controller = 127.0.0.1:9151`\n\n`tor_proxy = 127.0.0.1:9150`\n\n这三行缺啥补啥，然后保存，小0的准备工作就ok了。\n\n接下来是洋葱头的准备。（大部分操作需要爬高高后进行）\n\n首先，你需要Tor Browser（使用linux的各位应该足够聪明，应该知道怎么把这个操作等同到Linux下）：\n\n`https://www.torproject.org/download/download-easy.html.en`\n\n下载并安装好之后，打开之，会出现配置向导。对于身在大清的各位应该知道这里该选第二个----无法直接连接Tor网络。下一步对ISP是否审查回答“是”，再下一步就是网桥配置界面了，虽然据说内置的obfs4比较靠谱，但我实际使用的时候就没怎么舒服，所以要手动配置网桥。\n\n网桥信息可以去这里获取：\n\n`https://bridges.torproject.org/`\n\n网桥设置完毕后，下一步就是是否需要本地代理了。有些时候不需要，可以直接连接试试。要是直连失败了，可以后台开一个Shadowsocks纸飞机~~（不需要打开翻墙重定向，只是开个端口）~~**（严重谬误，事实上流量仍然被重定向到远端，也许是因此才产生了加速！）**，然后设置Tor Browser的本地代理：\n\n协议Socks 5，地址127.0.0.1，端口1080（此为一般配置，可根据自身SS配置的实际情况修改之）\n\n随后可以开始连接Tor网络，若连接成功，则Tor的准备也完成了，接下来再打开Zeronet客户端就可以愉快地网上做mong男了。\n\n围观裙众：我都有Tor Browser了，就不能SAFE点？顺便把ZeroHello上的Browser Not Safe给干掉？\n\n当然可以，你只需要在Tor Browser的代理设置里将127.0.0.1（一说为127.0.0.1:43110）设为不经过Tor网络的地址就可以愉快地使用Tor Browser来浏览127.0.0.1:43110众了。\n\n为可能迷路的小白贴出ZeroHello的地址:\n\n`http://127.0.0.1:43110/1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D/`\n\n===================2017-7-15添加==========================\n\n发现加速是归功于纸飞机后的我：\n\n![4746B5A37EFF4C29210332875F3AFF1A.jpg (79x63)](http://127.0.0.1:43110/TechNoob.bit/data/img/post_3_4746B5A37EFF4C29210332875F3AFF1A.jpg)\n\n看来发生了重大的误会，我是真滴菜啊\n\n既然我dark清的国情在此，那就用纸飞机当加速器吧，反正也有不少人是开了小0就日不过洋葱头，开了洋葱头后小0又掉下来了的（至少本咸鱼是这样），这个博文可以解决这个问题。\n\n在校园网环境下的各位可以试试直接用内置网桥（推荐obfs4、亚马逊和Azure），搏一把强运还是可能连的上的，效能还不错的样子。\n\n=========================================================\n注：如果觉的“为每个连接启用Tor”慢，可以改成“状态OK”，速度就上来了。（不过现在还不清楚，这样会不会就不走Tor代理链了）"
		},
		{
			"post_id": 14,
			"title": "Tor专用代理IP-预防-尽量保持每天一更新🗽 ",
			"date_published": 1509552000,
			"body": "[由于网站不可以复制了，点击进入网站查看socks代理。](https://www.socks-proxy.net/)"
		},
		{
			"post_id": 13,
			"title": "如何在网站增加对多个ID Provider的支持 ⚓ ",
			"date_published": 1508304264.5,
			"body": "我测试了一下，但是不知道为什么本地可以看见第ZeroID.bit用户回复，其它电脑更新后也看不见ZeroID.bit的用户回复。不知道是不是ZeroID.bit的兼容性不太好！？\n\n对于初学者注意，ID只在支持的网站能用。\n\n零网网站默认的ID注册系统是[ZeroID.bit](/zeroid.bit/)，也可以在网站中更改或增加其他ID注册系统。\n\n---\n\n以CryptoID为例，介绍添加方法。首先到[CryptoID](/cryptoid.bit)创建一个账号。CryptoID的账号不具有唯一性，而且可以随时更换名称，匿名性相当强大（所以才以它为例^_^）。\n然后设置你的网站。编辑`网站文件夹\\data\\users\\content.json`，可以看到：\n\n`\"user_contents\": { \"cert_signers\": { \"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"] }, ...`\n\n加入一行CryptoID的信息，改成这样：\n\n`\"user_contents\": { \"cert_signers\": { \"cryptoid.bit\": [\"18143WPue3rQykNaopx5KJKzYmaYhCjqhv\"], \"zeroid.bit\": [\"1iD5ZQJMNXu43w1qLB8sfdHVKppVMduGz\"] }, ...`\n\n签名发布这个content.json，别签错了，然后~~就好了~~，并没有，还有一个文件`网站文件夹\\js\\all.js`，找到（我找到了两处要改，用find功能找`\"certSelect\"`关键字，依次修改）：\n\n`Page.cmd(\"certSelect\", [[\"zeroid.bit\"]]);`\n\n改为：\n\n`Page.cmd(\"certSelect\", [[\"zeroid.bit\",\"cryptoid.bit\"]]);`\n\n对于更新到最新版的all.js，好像是改为以下形式（这样接受所有id提供者，具体参数还需要更多测试）：\n\n`Page.cmd(\"certSelect\", { \"accepted_domains\": [\"zeroid.bit\"], \"accept_any\": true });`\n\n签名并发布`根目录下的content.json`，就完成了。\n可以到以下论坛测试版面测试一下用CryptoID发帖：\n[http://127.0.0.1:43110/ZeroBBS.bit/?Topics:2_1FvnsJWRafUBWfdGpLm9DbtMQwFTaGjQBD/](/ZeroBBS.bit/?Topics:2_1FvnsJWRafUBWfdGpLm9DbtMQwFTaGjQBD/)\n\n[转帖](/LeafOK.bit/?Post:25:%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E7%AB%99%E5%A2%9E%E5%8A%A0%E5%AF%B9%E5%A4%9A%E4%B8%AAID+Provider%E7%9A%84%E6%94%AF%E6%8C%81)原贴网址：\n非常感谢！"
		},
		{
			"post_id": 11,
			"title": "局域网内实现互相发现节点🔌 ",
			"date_published": 1508207224.9,
			"body": "I think it should work this way right now:\n\n*   create a bootstrapper client on the local network by renaming plugins/disabled-Bootstrapper to plugins/Bootstrapper\n*   Add `trackers = zero://ip.of.bootstrapper.client:15441` to zeronet.conf\n*   start zeronet with `zeronet.py --ip_external yourlocalip`\n\n---\n\nRequired improvements:\n\n*   Implement local peer discovery eg.: [https://pypi.python.org/pypi/zeroconf](https://pypi.python.org/pypi/zeroconf) (so it would to require to setup a bootstrapper node in most cases)\n*   Don't send local peers via PEX\n*   Add ipv6 support\n\n（转 [猫叉酱](http://127.0.0.1:43110/Me.ZeroNetwork.bit/?Profile/1GrEenUGRWnzaNZjR3XsQa6dQgdPDTyt7i/1FHN4oukAG7zFUpiC9L2iz7QpQVTuT3xkz/nekocross@zeroid.bit) ）\n\n我看好zeronet有个很重要的原因，那就是他不依赖internet，可以用U盘、wifi局域网来实现节点间的互联。例如一群死党用装有python和zeroent的openwrt设备开个秘密的wifi（不连接internet），打开tracker插件，然后各个客户端吧tracker改成`zero://192.168.1.1:43110`, 这群人之间就可以用这个wifi互相同步。然后利用人员的流动性，android客户端可以在圈子之间传递数据。\n\n（转 [43110](http://127.0.0.1:43110/Me.ZeroNetwork.bit/?Profile/1BLueGvui1GdbtsjcKqCf4F67uKfritG49/16tWPYFLbad3R8iGcMuetyiwC2q5qXp45T/43110@zeroid.bit) ）\n\n把zeronet.conf 里的内容修改成以下这样：\n[global]\nlanguage = zh\noptional_limit = 10%\ntrackers = zero://xxx.xxx.xxx.xxx:15441\n\n然后把这个.../zero/plugins/disabled-Bootstrapper文件夹名“disabled-Bootstrapper”修改成“Bootstrapper”。\n\n以上，还没试过，好像很有趣，Mark一下。"
		},
		{
			"post_id": 10,
			"title": "TorFlow是啥？㊙ ",
			"date_published": 1508103932.5,
			"body": "Tor的用户数量在过去两年中大幅增长。\n\n这些不难理解，为什么。 Tor代表匿名网页浏览 - 这种方法大大增强了每个用户的网络安全和隐私。\n\n这种网络协议使得数据跨越多个无法识别的服务器，形成中继过程。\n\n因此，窥探者将难以尝试去查出用户的IP地址，并将其窃取，然后读取用户的网络邮件、社交网站、浏览器历史等信息。\n\n而最近，出了一个在线工具，允许每个人查看[Tor的全球数据流地图](https://torflow.uncharted.software)。\n\n该工具由Uncharted开发，它是一家数据可视化软件公司。"
		},
		{
			"post_id": 9,
			"title": "一种新的去中心化p2p🈚 ",
			"date_published": 1508066988.06,
			"body": "[https://louis.center/p2p-social-networking/](https://louis.center/p2p-social-networking/)"
		},
		{
			"post_id": 8,
			"title": "已经不敢在网上乱说话了😷",
			"date_published": 1508028495.826,
			"body": "百度贴吧删贴、封吧、屏蔽关键词、封号等，现在QQ、微信封群、抓群主、抓网民、好可怕，真的是不敢乱说话了。\n\n😷 😷 😷"
		},
		{
			"post_id": 7,
			"title": "关于SS被屏蔽事件🈲 ",
			"date_published": 1508012265.909,
			"body": "SS作者被请喝茶，开源软件被删，但百度出来的信息，人民网却说是被DDOS攻击后，著名开源软件SS被删，还能再无耻点吗！还口口声声说DDOS攻击是黑社会行为，原来共党是黑社会啊，终于自己承认了。🐶 🐔 然后就搜索不到任何有关SS的信息了。这么有名的软件，你共党都说了，但是百度竟然就一条新闻，还是你共党造的假新闻，其它信息你全给屏蔽了，你真是有够无耻。\n\n真不知道曾经共产党说了多少谎。做了多少不为人知的好事坏事啊。\n\n看看现在的网站，全都封删说实话的内容，还有一帮二狗子冲你乱叫乱咬。真是可怕。\n\n百度根本都看不到什么实话和真实的东西，看现在还有多少人看电视，还有多少人在看CCTV，各省电视台全是骗人的老中医式的广告，真是害人不浅，要人命，还要人钱。还有人活路吗！！！"
		},
		{
			"post_id": 5,
			"title": "翻墙推荐 🏧 ",
			"date_published": 1508001599.604,
			"body": "[不错的代理网](https://www.socks-proxy.net/)（专供Tor，现已被墙）\n\n[**Tor 浏览器**](https://www.torproject.org/) 别忘了用[代理IP](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:14:Tor%E4%B8%93%E7%94%A8%E4%BB%A3%E7%90%86IP-%E9%A2%84%E9%98%B2-%E5%B0%BD%E9%87%8F%E4%BF%9D%E6%8C%81%E6%AF%8F%E5%A4%A9%E4%B8%80%E6%9B%B4%E6%96%B0)上国外才行，像这样的[IP代理](http://127.0.0.1:43110/1K5SSdCHKSomqE4bu7uCBhZpGSLPt199tF/?Post:14:Tor%E4%B8%93%E7%94%A8%E4%BB%A3%E7%90%86IP-%E9%A2%84%E9%98%B2-%E5%B0%BD%E9%87%8F%E4%BF%9D%E6%8C%81%E6%AF%8F%E5%A4%A9%E4%B8%80%E6%9B%B4%E6%96%B0)\n| 24.245.19.116 | 49438 | US | Socks5 |\n\n[**赛风**](https://psiphon3.com/zh/download.html) 开源免费 翻墙 速度快一些，一般都很稳定。\n\n[**蓝灯**](https://github.com/getlantern/lantern/issues/6117) 目前被墙，不知道19大后会不会能用。![QQ__20171014220311.gif (72x67)](data/img/post_5_QQ__20171014220311.gif)\n\n**[SS](https://softs.fun/?dir=%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/PC/Shadowsocks/Windows/Shadowsocks) [SSR](https://softs.fun/?dir=%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/PC/Shadowsocks/Windows/ShadowsocksR)** 开源软件，原作者已经被请喝茶，删了，但现在还有人完成软体，网上有很多免费服务器可用 _[SS官网](http://shadowsocks.org)_\n\n目前就这些先，有什么再加。\n\n[点我免费ss ssr](https://go.ishadowx.net/)\n\n```\nssr://MjAzLjEwNC4yMDUuMTE1OjgwODA6YXV0aF9zaGExX3Y0OmNoYWNoYTIwOnRsczEuMl90aWNrZXRfYXV0aDplWFZwLz9vYmZzcGFyYW09JnByb3RvcGFyYW09JnJlbWFya3M9NUxpYzVMcXNPUSZncm91cD1XWFZwssr://MjAzLjEwNC4yMTQuMjAyOjgwODA6YXV0aF9zaGExX3Y0OmNoYWNoYTIwOnRsczEuMl90aWNrZXRfYXV0aDplWFZwLz9vYmZzcGFyYW09JnByb3RvcGFyYW09JnJlbWFya3M9NUxpYzVMcXNOdyZncm91cD1XWFZwssr://MjAzLjEwNC4yMDQuMjA3OjExMTExOmF1dGhfc2hhMV92NDpjaGFjaGEyMDp0bHMxLjJfdGlja2V0X2F1dGg6ZVhWcC8_b2Jmc3BhcmFtPSZwcm90b3BhcmFtPSZyZW1hcmtzPTVMaWM1THFzTkEmZ3JvdXA9V1hWcA\n```\n\n`SS 二维码 : http://doub.pw/qr/qr.php?text=ss://Y2hhY2hhMjA6RzhALjc1R3BteDM0OTU2QC41MjBANDUuNjIuMjM4LjE5MDo5NzI1 SSR 链接 : ssr://NDUuNjIuMjM4LjE5MDo5NzI1OmF1dGhfc2hhMV92NDpjaGFjaGEyMDp0bHMxLjJfdGlja2V0X2F1dGg6UnpoQUxqYzFSM0J0ZURNME9UVTJRQzQxTWpB SSR 二维码 : http://doub.pw/qr/qr.php?text=ssr://NDUuNjIuMjM4LjE5MDo5NzI1OmF1dGhfc2hhMV92NDpjaGFjaGEyMDp0bHMxLjJfdGlja2V0X2F1dGg6UnpoQUxqYzFSM0J0ZURNME9UVTJRQzQxTWpB`\n\n```\nssr://MjAzLjEwNC4yMTMuMjI4OjEyMzQ6YXV0aF9jaGFpbl9hOmNoYWNoYTIwLWlldGY6dGxzMS4yX3RpY2tldF9hdXRoOldVRjVSMjlPUkVwNWMxUjIvP29iZnNwYXJhbT0\nssr://MjAzLjEwNC4yMDAuMjI4OjEyMzQ6YXV0aF9jaGFpbl9hOmNoYWNoYTIwLWlldGY6dGxzMS4yX3RpY2tldF9hdXRoOldVRjVSMjlPUkVwNWMxUjIvP29iZnNwYXJhbT0\nssr://MjAzLjEwNC4yMTMuMjAwOjEyMzQ6YXV0aF9jaGFpbl9hOmNoYWNoYTIwLWlldGY6dGxzMS4yX3RpY2tldF9hdXRoOldVRjVSMjlPUkVwNWMxUjIvP29iZnNwYXJhbT0\n```"
		},
		{
			"post_id": 2,
			"title": "wtf♻",
			"date_published": 1507997972.058,
			"body": "![QQ__20171014220311.gif (72x67)](data/img/post_2_QQ__20171014220311.gif)WTF 你好"
		}
	]
}