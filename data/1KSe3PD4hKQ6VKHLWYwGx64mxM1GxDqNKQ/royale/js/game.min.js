class Page extends ZeroFrame
{
  onRequest(cmd, message) {
    if (cmd == "setSiteInfo")
      this.siteinfo = message.params;
    else
      this.log("Unknown incoming message:", cmd)
  }
}
var page = new Page();

var url_string = window.location.href;
var url = new URL(url_string);
var serverstring = url.searchParams.get("s");


var util = {},
    vec2 = {
        'make': function(_0x161b6d, _0xaa6515) {
            return {
                'x': _0x161b6d,
                'y': _0xaa6515
            };
        },
        'random': function() {
            return vec2.normalize({
                'x': 0x2 * Math.random() - 0x1,
                'y': 0x2 * Math.random() - 0x1
            });
        },
        'copy': function(_0x3eff59) {
            return {
                'x': _0x3eff59.x,
                'y': _0x3eff59.y
            };
        },
        'add': function(_0x359113, _0xf8a09c) {
            return {
                'x': _0x359113.x + _0xf8a09c.x,
                'y': _0x359113.y + _0xf8a09c.y
            };
        },
        'subtract': function(_0x389a44, _0x5d80b6) {
            return {
                'x': _0x389a44.x - _0x5d80b6.x,
                'y': _0x389a44.y - _0x5d80b6.y
            };
        },
        'scale': function(_0x11f44f, _0x57fab5) {
            return {
                'x': _0x11f44f.x * _0x57fab5,
                'y': _0x11f44f.y * _0x57fab5
            };
        },
        'multiply': function(_0x42374a, _0x1d7a5b) {
            return {
                'x': _0x42374a.x * _0x1d7a5b.x,
                'y': _0x42374a.y * _0x1d7a5b.y
            };
        },
        'divide': function(_0x325883, _0x358d3a) {
            return {
                'x': _0x325883.x / _0x358d3a.x,
                'y': _0x325883.y / _0x358d3a.y
            };
        },
        'magnitude': function(_0x2826d4) {
            return Math.sqrt(_0x2826d4.x * _0x2826d4.x + _0x2826d4.y * _0x2826d4.y);
        },
        'normalize': function(_0x11dbe3) {
            var _0x495946 = vec2.magnitude(_0x11dbe3);
            return 0x0 !== _0x495946 ? {
                'x': _0x11dbe3.x / _0x495946,
                'y': _0x11dbe3.y / _0x495946
            } : {
                'x': 0x0,
                'y': 0x1
            };
        },
        'distance': function(_0xaaf29e, _0x202b29) {
            return vec2.magnitude(vec2.subtract(_0xaaf29e, _0x202b29));
        },
        'dot': function(_0x33b07e, _0x28e57f) {
            return _0x33b07e.x * _0x28e57f.x + _0x33b07e.y * _0x28e57f.y;
        },
        'inverse': function(_0xcc3dd8) {
            return {
                'x': -0x1 * _0xcc3dd8.x,
                'y': -0x1 * _0xcc3dd8.y
            };
        },
        'lerp': function(_0x2e53c7, _0x439fa1, _0x475126) {
            return vec2.add(vec2.scale(_0x2e53c7, 0x1 - _0x475126), vec2.scale(_0x439fa1, _0x475126));
        },
        'rotate': function(_0xa59816, _0x4d01ef) {
            var _0x1a4120 = Math.cos(_0x4d01ef);
            _0x4d01ef = Math.sin(_0x4d01ef);
            return {
                'x': _0xa59816.x * _0x1a4120 + _0xa59816.y * _0x4d01ef,
                'y': _0xa59816.x * -_0x4d01ef + _0xa59816.y * _0x1a4120
            };
        },
        'angle': function(_0x2c0ea8, _0x55a4fe) {
            var _0x76926d = vec2.dot(_0x2c0ea8, _0x55a4fe);
            return Math.acos(_0x76926d / (Math.sqrt(_0x2c0ea8.x * _0x2c0ea8.x + _0x2c0ea8.y * _0x2c0ea8.y) * Math.sqrt(_0x55a4fe.x * _0x55a4fe.x + _0x55a4fe.y * _0x55a4fe.y)));
        },
        'average': function(_0x58358d) {
            for (var _0x5493e5 = vec2.create(), _0x25dc93 = 0x0; _0x25dc93 < _0x58358d.length; _0x25dc93++) _0x5493e5 = vec2.add(_0x5493e5, _0x58358d[_0x25dc93]);
            return vec2.scale(_0x5493e5, 0x1 / _0x58358d.length);
        },
        'chop': function(_0x5c4576) {
            return vec2.make(parseInt(_0x5c4576.x), parseInt(_0x5c4576.y));
        },
        'equals': function(_0xd9deb2, _0x681f67) {
            return _0xd9deb2.x === _0x681f67.x && _0xd9deb2.y === _0x681f67.y;
        },
        'toArray': function(_0x2d4fc9) {
            return [_0x2d4fc9.x, _0x2d4fc9.y];
        }
    },
    vec4 = {};
vec4.make = function(_0x5c660f, _0x59650d, _0x2dac94, _0x3e2307) {
    return {
        x: _0x5c660f,
        y: _0x59650d,
        z: _0x2dac94,
        w: _0x3e2307
    };
};
vec4.copy = function(_0x4ae233) {
    return {
        x: _0x4ae233.x,
        y: _0x4ae233.y,
        z: _0x4ae233.z,
        w: _0x4ae233.w
    };
};
vec4.add = function(_0x46cc7d, _0x34f67b) {
    return {
        x: _0x46cc7d.x + _0x34f67b.x,
        y: _0x46cc7d.y + _0x34f67b.y,
        z: _0x46cc7d.z + _0x34f67b.z,
        w: _0x46cc7d.w + _0x34f67b.w
    };
};
vec4.subtract = function(_0x526b09, _0x599501) {
    return {
        x: _0x526b09.x - _0x599501.x,
        y: _0x526b09.y - _0x599501.y,
        z: _0x526b09.z - _0x599501.z,
        w: _0x526b09.w - _0x599501.w
    };
};
vec4.scale = function(_0x339e82, _0x22c5dd) {
    return {
        x: _0x339e82.x * _0x22c5dd,
        y: _0x339e82.y * _0x22c5dd,
        z: _0x339e82.z * _0x22c5dd,
        w: _0x339e82.w * _0x22c5dd
    };
};
vec4.multiply = function(_0x2f5dff, _0xde261c) {
    return {
        x: _0x2f5dff.x * _0xde261c.x,
        y: _0x2f5dff.y * _0xde261c.y,
        z: _0x2f5dff.z * _0xde261c.z,
        w: _0x2f5dff.w * _0xde261c.w
    };
};
vec4.lerp = function(_0x33d744, _0x4b2c7c, _0x155b3e) {
    return vec4.add(vec4.scale(_0x33d744, 0x1 - _0x155b3e), vec4.scale(_0x4b2c7c, _0x155b3e));
};
vec4.toArray = function(_0x4063e9) {
    return [_0x4063e9.x, _0x4063e9.y, _0x4063e9.z, _0x4063e9.w];
};
util.line2 = {};
util.intersection = {};
util.time = {};
util.sprite = {};
util.line2.normal = function(_0x1acc6b) {
    return vec2.normalize({
        'x': _0x1acc6b.b.y - _0x1acc6b.a.y,
        'y': -0x1 * (_0x1acc6b.b.x - _0x1acc6b.a.x)
    });
};
util.intersection.pointRectangle = function(_0x1e7b17, _0x4dce27, _0xe0ff80) {
    return _0x4dce27.x <= _0x1e7b17.x && _0x4dce27.x + _0xe0ff80.x > _0x1e7b17.x && _0x4dce27.y <= _0x1e7b17.y && _0x4dce27.y + _0xe0ff80.y > _0x1e7b17.y;
};
util.intersection.pointPoly = function(_0x243dd4, _0x512902) {
    var _0x2f2013, _0x3a2178, _0x42ea30 = !0x1,
        _0x157b14 = _0x512902.length;
    _0x2f2013 = 0x0;
    for (_0x3a2178 = _0x157b14 - 0x1; _0x2f2013 < _0x157b14; _0x3a2178 = _0x2f2013++) _0x512902[_0x2f2013].y > _0x243dd4.y !== _0x512902[_0x3a2178].y > _0x243dd4.y && _0x243dd4.x < (_0x512902[_0x3a2178].x - _0x512902[_0x2f2013].x) * (_0x243dd4.y - _0x512902[_0x2f2013].y) / (_0x512902[_0x3a2178].y - _0x512902[_0x2f2013].y) + _0x512902[_0x2f2013].x && (_0x42ea30 = !_0x42ea30);
    return _0x42ea30;
};
util.intersection.lineLine = function(_0x3577cd, _0x11c7df) {
    var _0x3f32b5, _0x4b70af, _0x5a8216, _0x5ba81c;
    _0x3f32b5 = _0x3577cd.b.x - _0x3577cd.a.x;
    _0x4b70af = _0x3577cd.b.y - _0x3577cd.a.y;
    _0x5a8216 = _0x11c7df.b.x - _0x11c7df.a.x;
    _0x5ba81c = _0x11c7df.b.y - _0x11c7df.a.y;
    var _0x3469a0;
    _0x3469a0 = (-_0x4b70af * (_0x3577cd.a.x - _0x11c7df.a.x) + _0x3f32b5 * (_0x3577cd.a.y - _0x11c7df.a.y)) / (-_0x5a8216 * _0x4b70af + _0x3f32b5 * _0x5ba81c);
    _0x5a8216 = (_0x5a8216 * (_0x3577cd.a.y - _0x11c7df.a.y) - _0x5ba81c * (_0x3577cd.a.x - _0x11c7df.a.x)) / (-_0x5a8216 * _0x4b70af + _0x3f32b5 * _0x5ba81c);
    if (0x0 <= _0x3469a0 && 0x1 >= _0x3469a0 && 0x0 <= _0x5a8216 && 0x1 >= _0x5a8216) return _0x3f32b5 = _0x3577cd.a.x + _0x5a8216 * _0x3f32b5, _0x4b70af = _0x3577cd.a.y + _0x5a8216 * _0x4b70af, _0x4b70af = {}, _0x11c7df = util.line2.normal(_0x11c7df), {
        'intersection': _0x4b70af,
        'normal': _0x11c7df,
        'distance': vec2.distance(_0x4b70af, _0x3577cd.a)
    };
    _0x4b70af.x = _0x3f32b5;
    _0x4b70af.y = _0x4b70af;
};
util.intersection.lineCircle = function(_0x173f2c, _0x295f47, _0x46436b) {
    var _0x2305da = util.intersection.lineNearestPoint(_0x173f2c, _0x295f47);
    if (vec2.equals(_0x2305da, _0x295f47.a)) {
        var _0x5ecf82 = vec2.subtract(_0x173f2c, _0x295f47.a);
        _0x173f2c = vec2.magnitude(_0x5ecf82);
        if (!(_0x173f2c >= _0x46436b)) return _0x46436b = vec2.normalize(_0x5ecf82), {
            'intersection': _0x295f47.a,
            'normal': _0x46436b,
            'dist': _0x173f2c
        };
    } else {
        if (vec2.equals(_0x2305da, _0x295f47.b)) {
            _0x5ecf82 = vec2.subtract(_0x173f2c, _0x295f47.b);
            _0x173f2c = vec2.magnitude(_0x5ecf82);
            if (_0x173f2c >= _0x46436b) return;
            _0x46436b = vec2.normalize(_0x5ecf82);
            return {
                'intersection': _0x295f47.b,
                'normal': _0x46436b,
                'distance': _0x173f2c
            };
        }
        _0x5ecf82 = vec2.subtract(_0x173f2c, _0x2305da);
        _0x173f2c = vec2.magnitude(_0x5ecf82);
        if (!(_0x173f2c >= _0x46436b)) return _0x46436b = vec2.normalize(_0x5ecf82), {
            'intersection': _0x2305da,
            'normal': _0x46436b,
            'distance': _0x173f2c
        };
    }
};
util.intersection.polygonLine = function(_0x2d549c, _0x202642) {
    for (var _0x2d8e19 = [], _0x46494b = 0x0; _0x46494b < _0x202642.v.length; _0x46494b++) {
        var _0x2931a7 = util.intersection.lineLine(_0x2d549c, {
            'a': _0x202642.v[_0x46494b],
            'b': _0x202642.v[_0x46494b + 0x1 < _0x202642.v.length ? _0x46494b + 0x1 : 0x0]
        });
        _0x2931a7 && _0x2d8e19.push(_0x2931a7);
    }
    if (!(0x1 > _0x2d8e19.length)) {
        _0x2d549c = _0x2d8e19[0x0];
        for (_0x46494b = 0x1; _0x46494b < _0x2d8e19.length; _0x46494b++) _0x2d8e19[_0x46494b].distance < _0x2d549c.distance && (_0x2d549c = _0x2d8e19[_0x46494b]);
        return _0x2d549c;
    }
};
util.intersection.polygonCircle = function(_0x91b4be, _0x5623de, _0x3d0ce0) {
    for (var _0xf8b818 = [], _0xce4861 = 0x0; _0xce4861 < _0x5623de.v.length; _0xce4861++) {
        var _0x59ed62 = util.intersection.lineCircle(_0x91b4be, {
            'a': _0x5623de.v[_0xce4861],
            'b': _0x5623de.v[_0xce4861 + 0x1 < _0x5623de.v.length ? _0xce4861 + 0x1 : 0x0]
        }, _0x3d0ce0);
        _0x59ed62 && _0xf8b818.push(_0x59ed62);
    }
    if (!(0x1 > _0xf8b818.length)) {
        _0x91b4be = _0xf8b818[0x0];
        for (_0xce4861 = 0x1; _0xce4861 < _0xf8b818.length; _0xce4861++) _0xf8b818[_0xce4861].distance < _0x91b4be.distance && (_0x91b4be = _0xf8b818[_0xce4861]);
        return _0x91b4be;
    }
};
util.intersection.lineNearestPoint = function(_0x3c1450, _0x1de338) {
    var _0x2f77e7 = vec2.subtract(_0x1de338.b, _0x1de338.a);
    _0x3c1450 = vec2.subtract(_0x3c1450, _0x1de338.a);
    _0x3c1450 = vec2.dot(_0x3c1450, _0x2f77e7);
    if (0x0 >= _0x3c1450) return _0x1de338.a;
    var _0x3f0e86 = vec2.dot(_0x2f77e7, _0x2f77e7);
    return _0x3f0e86 <= _0x3c1450 ? _0x1de338.b : vec2.add(_0x1de338.a, vec2.scale(_0x2f77e7, _0x3c1450 / _0x3f0e86));
};
util.time.now = function() {
    return Date.now();
};
util.sprite.getSprite = function(_0x4b5ee8, _0x40d245) {
    var _0x296098 = _0x4b5ee8.width;
    _0x4b5ee8 = _0x4b5ee8.height;
    _0x40d245 *= Display.TEXRES;
    var _0x22f2c9 = parseInt(Math.floor(_0x40d245 / _0x296098) * Display.TEXRES);
    return _0x22f2c9 > _0x4b5ee8 ? [0x0, 0x0] : [_0x40d245 % _0x296098, _0x22f2c9];
};
var requestAnimFrameFunc = function() {
        var _0x2ad677 = function() {
            var _0x41b5ff = !![];
            return function(_0xff9ae8, _0x3e8ff1) {
                var _0x567b53 = _0x41b5ff ? function() {
                    if (_0x3e8ff1) {
                        var _0x3bd701 = _0x3e8ff1.apply(_0xff9ae8, arguments);
                        _0x3e8ff1 = null;
                        return _0x3bd701;
                    }
                } : function() {};
                _0x41b5ff = ![];
                return _0x567b53;
            };
        }();
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(_0x456867) {
            window.setTimeout(_0x456867, 0x10);
        };
    }(),
    _0x2d0f3c = function() {
        return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;
    }();
"use strict";
var shor2 = {},
    _0x3b5639 = {};
_0x3b5639.encode = function(_0x72648a, _0x2cea13, _0x2d19fb, _0x471bdb, _0x3ed53b) {
    return 0x0 | parseInt(_0x72648a) & 0x7ff | parseInt(_0x2cea13) << 0xb & 0x7800 | (_0x2d19fb ? 0x1 : 0x0) << 0xf & 0x8000 | parseInt(_0x471bdb) << 0x10 & 0xff0000 | parseInt(_0x3ed53b) << 0x18 & 0xff000000;
};
_0x3b5639.decode16 = function(_0x220892) {
    return {
        index: _0x220892 & 0x7ff,
        bump: _0x220892 >> 0xb & 0xf,
        depth: 0x1 === (_0x220892 >> 0xf & 0x1)
    };
};
_0x3b5639.decode = function(_0x1cb047) {
    var _0x19efba = _0x1cb047 >> 0x10 & 0xff;
    return {
        index: _0x1cb047 & 0x7ff,
        bump: _0x1cb047 >> 0xb & 0xf,
        depth: 0x1 === (_0x1cb047 >> 0xf & 0x1),
        definition: _0x3b5639.TILE_PROPERTIES[_0x19efba] ? _0x3b5639.TILE_PROPERTIES[_0x19efba] : _0x3b5639.TILE_PROPERTIES[0x0],
        data: _0x1cb047 >> 0x18 & 0xff
    };
};
_0x3b5639.bump = function(_0x4b32b3, _0x8744de) {
    return _0x4b32b3 & 0xffff87ff | _0x8744de << 0xb & 0x7800;
};
_0x3b5639.data = function(_0x1d9ce8, _0x4db918) {
    return _0x1d9ce8 & 0xffffff | _0x4db918 << 0x18 & 0xff000000;
};
_0x3b5639.asArray = function(_0x4e1bb5) {
    return [_0x4e1bb5 & 0x7ff, _0x4e1bb5 >> 0xb & 0xf, 0x1 === (_0x4e1bb5 >> 0xf & 0x1), _0x4e1bb5 >> 0x10 & 0xff, _0x4e1bb5 >> 0x18 & 0xff];
};
_0x3b5639.TRIGGER = {};
_0x3b5639.GEN_FUNC = {};
_0x3b5639.TRIGGER.TYPE = {};
_0x3b5639.TRIGGER.TYPE.TOUCH = 0x0;
_0x3b5639.TRIGGER.TYPE.DOWN = 0x1;
_0x3b5639.TRIGGER.TYPE.PUSH = 0x2;
_0x3b5639.TRIGGER.TYPE.SMALL_BUMP = 0x10;
_0x3b5639.TRIGGER.TYPE.BIG_BUMP = 0x11;
shor2.encode = function(_0xba234f, _0x5afc0c) {
    return 0x0 | parseInt(_0xba234f) & 0xffff | parseInt(_0x5afc0c) << 0x10 & 0xffff0000;
};
shor2.decode = function(_0x28a10f) {
    return vec2.make(_0x28a10f & 0xffff, _0x28a10f >> 0x10 & 0xffff);
};
shor2.asArray = function(_0x1461e2) {
    return [_0x1461e2 & 0xffff, _0x1461e2 >> 0x10 & 0xffff];
};
_0x3b5639.GEN_FUNC.BUMP = function(_0x6c048e, _0x417f42, _0x4e8f48, _0x495791, _0x41d0a6, _0x4c8e32, _0x2c0777, _0x441659) {
    _0x6c048e.world.getZone(_0x495791, _0x41d0a6).bump(_0x4c8e32, _0x2c0777);
    _0x4e8f48 = vec2.make(0x1, 0.15);
    _0x4c8e32 = vec2.make(_0x4c8e32, _0x2c0777 + 0x1);
    for (_0x2c0777 = 0x0; _0x2c0777 < _0x6c048e.objects.length; _0x2c0777++) _0x441659 = _0x6c048e.objects[_0x2c0777], !_0x441659.dead && _0x441659.level === _0x495791 && _0x441659.zone === _0x41d0a6 && _0x441659.dim && squar.intersection(_0x4c8e32, _0x4e8f48, _0x441659.pos, _0x441659.dim) && (_0x441659 instanceof PlayerObject ? _0x441659.bounce() : _0x441659.bounce ? _0x441659.bounce() : _0x441659.bonk ? _0x441659.bonk() : _0x441659 instanceof CoinObject && (_0x6c048e.pid === _0x417f42 && _0x441659.playerCollide(_0x6c048e.getPlayer()), _0x6c048e.world.getZone(_0x495791, _0x41d0a6).coin(_0x441659.pos.x, _0x441659.pos.y)));
};
_0x3b5639.GEN_FUNC.BREAK = function(_0x1d1ede, _0x3319f0, _0x1ea325, _0x461fdb, _0x330283, _0x257ccd, _0x153da0, _0x2b3710) {
    _0x1d1ede.world.getZone(_0x461fdb, _0x330283).break(_0x257ccd, _0x153da0, 0x1e);
    _0x1ea325 = vec2.make(0x1, 0.15);
    _0x257ccd = vec2.make(_0x257ccd, _0x153da0 + 0x1);
    for (_0x153da0 = 0x0; _0x153da0 < _0x1d1ede.objects.length; _0x153da0++) _0x2b3710 = _0x1d1ede.objects[_0x153da0], !_0x2b3710.dead && _0x2b3710.level === _0x461fdb && _0x2b3710.zone === _0x330283 && _0x2b3710.dim && squar.intersection(_0x257ccd, _0x1ea325, _0x2b3710.pos, _0x2b3710.dim) && (_0x2b3710 instanceof PlayerObject ? _0x2b3710.bounce() : _0x2b3710.bounce ? _0x2b3710.bounce() : _0x2b3710.bonk ? _0x2b3710.bonk() : _0x2b3710 instanceof CoinObject && (_0x1d1ede.pid === _0x3319f0 && _0x2b3710.playerCollide(_0x1d1ede.getPlayer()), _0x1d1ede.world.getZone(_0x461fdb, _0x330283).coin(_0x2b3710.pos.x, _0x2b3710.pos.y)));
};
_0x3b5639.TILE_PROPERTIES = {
    0: {
        'NAME': "AIR",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x3025f6, _0x46abd4, _0x5c4401, _0x1bd489, _0x549eda, _0x1d03e7, _0x4a6bc3, _0x3fdc3b) {}
    },
    1: {
        'NAME': "SOLID STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0xea524a, _0x44bb8b, _0x3f623c, _0x5c07b4, _0x13b998, _0x3b8b18, _0x12eab0, _0x2d38c6) {}
    },
    2: {
        'NAME': "SOLID BUMPABLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x2285c6, _0x3fe97a, _0x3ea5de, _0x60ea3a, _0x4aef5d, _0x2f66aa, _0x327a29, _0x1675b0) {
            switch (_0x1675b0) {
                case 0x10:
                    _0x2285c6.pid === _0x3fe97a && _0x2285c6.out.push(TILE_EVENT_TRIGGER.encode(_0x60ea3a, _0x4aef5d, shor2.encode(_0x2f66aa, _0x327a29), _0x1675b0));
                    _0x3b5639.GEN_FUNC.BUMP(_0x2285c6, _0x3fe97a, _0x3ea5de, _0x60ea3a, _0x4aef5d, _0x2f66aa, _0x327a29, _0x1675b0);
                    break;
                case 0x11:
                    _0x2285c6.pid === _0x3fe97a && _0x2285c6.out.push(TILE_EVENT_TRIGGER.encode(_0x60ea3a, _0x4aef5d, shor2.encode(_0x2f66aa, _0x327a29), _0x1675b0)), _0x3b5639.GEN_FUNC.BUMP(_0x2285c6, _0x3fe97a, _0x3ea5de, _0x60ea3a, _0x4aef5d, _0x2f66aa, _0x327a29, _0x1675b0);
            }
        }
    },
    3: {
        'NAME': "SOLID BREAKABLE NORMAL",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0xa7d866, _0x3f6b64, _0x5d535b, _0x201a64, _0x575156, _0x30c151, _0x3f1773, _0x54563a) {
            switch (_0x54563a) {
                case 0x10:
                    _0xa7d866.pid === _0x3f6b64 && _0xa7d866.out.push(TILE_EVENT_TRIGGER.encode(_0x201a64, _0x575156, shor2.encode(_0x30c151, _0x3f1773), _0x54563a));
                    _0x3b5639.GEN_FUNC.BUMP(_0xa7d866, _0x3f6b64, _0x5d535b, _0x201a64, _0x575156, _0x30c151, _0x3f1773, _0x54563a);
                    break;
                case 0x11:
                    _0xa7d866.pid === _0x3f6b64 && _0xa7d866.out.push(TILE_EVENT_TRIGGER.encode(_0x201a64, _0x575156, shor2.encode(_0x30c151, _0x3f1773), _0x54563a)), _0x3b5639.GEN_FUNC.BREAK(_0xa7d866, _0x3f6b64, _0x5d535b, _0x201a64, _0x575156, _0x30c151, _0x3f1773, _0x54563a);
            }
        }
    },
    17: {
        'NAME': "ITEM BLOCK STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x297380, _0x29fcdf, _0x517591, _0x3df924, _0x4b7787, _0x1d8e9e, _0x57b3c4, _0x3c6081) {
            switch (_0x3c6081) {
                case 0x10:
                    _0x297380.pid === _0x29fcdf && _0x297380.out.push(TILE_EVENT_TRIGGER.encode(_0x3df924, _0x4b7787, shor2.encode(_0x1d8e9e, _0x57b3c4), _0x3c6081));
                    var _0x553cff = 0x18003;
                    _0x297380.world.getZone(_0x3df924, _0x4b7787).replace(_0x1d8e9e, _0x57b3c4, _0x553cff);
                    _0x297380.createObject(_0x517591.data, _0x3df924, _0x4b7787, vec2.make(_0x1d8e9e, _0x57b3c4), [shor2.encode(_0x1d8e9e, _0x57b3c4)]);
                    _0x3b5639.GEN_FUNC.BUMP(_0x297380, _0x29fcdf, _0x517591, _0x3df924, _0x4b7787, _0x1d8e9e, _0x57b3c4, _0x3c6081);
                    _0x297380.world.getZone(_0x3df924, _0x4b7787).play(_0x1d8e9e, _0x57b3c4, "sfx/item.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x297380.pid === _0x29fcdf && _0x297380.out.push(TILE_EVENT_TRIGGER.encode(_0x3df924, _0x4b7787, shor2.encode(_0x1d8e9e, _0x57b3c4), _0x3c6081)), _0x553cff = 0x18003, _0x297380.world.getZone(_0x3df924, _0x4b7787).replace(_0x1d8e9e, _0x57b3c4, _0x553cff), _0x297380.createObject(_0x517591.data, _0x3df924, _0x4b7787, vec2.make(_0x1d8e9e, _0x57b3c4), [shor2.encode(_0x1d8e9e, _0x57b3c4)]), _0x3b5639.GEN_FUNC.BUMP(_0x297380, _0x29fcdf, _0x517591, _0x3df924, _0x4b7787, _0x1d8e9e, _0x57b3c4, _0x3c6081), _0x297380.world.getZone(_0x3df924, _0x4b7787).play(_0x1d8e9e, _0x57b3c4, "sfx/item.wav", 0x1, 0.04);
            }
        }
    },
    18: {
        'NAME': "COIN BLOCK STANDARD",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x3afdce, _0x3c99c8, _0x2202ff, _0xe2bc82, _0x5cddeb, _0x47cf47, _0x4fe05f, _0x28518c) {
            switch (_0x28518c) {
                case 0x10:
                    _0x3afdce.pid === _0x3c99c8 && (_0x3afdce.coinage(), _0x3afdce.out.push(TILE_EVENT_TRIGGER.encode(_0xe2bc82, _0x5cddeb, shor2.encode(_0x47cf47, _0x4fe05f), _0x28518c)));
                    var _0x39721a = 0x18003;
                    _0x3afdce.world.getZone(_0xe2bc82, _0x5cddeb).replace(_0x47cf47, _0x4fe05f, _0x39721a);
                    _0x3afdce.world.getZone(_0xe2bc82, _0x5cddeb).coin(_0x47cf47, _0x4fe05f + 0x1);
                    _0x3b5639.GEN_FUNC.BUMP(_0x3afdce, _0x3c99c8, _0x2202ff, _0xe2bc82, _0x5cddeb, _0x47cf47, _0x4fe05f, _0x28518c);
                    break;
                case 0x11:
                    _0x3afdce.pid === _0x3c99c8 && (_0x3afdce.coinage(), _0x3afdce.out.push(TILE_EVENT_TRIGGER.encode(_0xe2bc82, _0x5cddeb, shor2.encode(_0x47cf47, _0x4fe05f), _0x28518c))), _0x39721a = 0x18003, _0x3afdce.world.getZone(_0xe2bc82, _0x5cddeb).replace(_0x47cf47, _0x4fe05f, _0x39721a), _0x3afdce.world.getZone(_0xe2bc82, _0x5cddeb).coin(_0x47cf47, _0x4fe05f + 0x1), _0x3b5639.GEN_FUNC.BUMP(_0x3afdce, _0x3c99c8, _0x2202ff, _0xe2bc82, _0x5cddeb, _0x47cf47, _0x4fe05f, _0x28518c);
            }
        }
    },
    19: {
        'NAME': "COIN BLOCK MULTI",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x5e22c3, _0x699f77, _0xd2d34b, _0x43d4fe, _0x5218df, _0xa82aaa, _0x23ca7e, _0x266720) {
            switch (_0x266720) {
                case 0x10:
                    _0x5e22c3.pid === _0x699f77 && (_0x5e22c3.coinage(), _0x5e22c3.out.push(TILE_EVENT_TRIGGER.encode(_0x43d4fe, _0x5218df, shor2.encode(_0xa82aaa, _0x23ca7e), _0x266720)));
                    if (0x0 < _0xd2d34b.data) var _0x302681 = _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).tile(_0xa82aaa, _0x23ca7e),
                        _0x302681 = _0x3b5639.data(_0x302681, _0xd2d34b.data - 0x1);
                    else _0x302681 = 0x18003;
                    _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).replace(_0xa82aaa, _0x23ca7e, _0x302681);
                    _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).coin(_0xa82aaa, _0x23ca7e + 0x1);
                    _0x3b5639.GEN_FUNC.BUMP(_0x5e22c3, _0x699f77, _0xd2d34b, _0x43d4fe, _0x5218df, _0xa82aaa, _0x23ca7e, _0x266720);
                    break;
                case 0x11:
                    _0x5e22c3.pid === _0x699f77 && (_0x5e22c3.coinage(), _0x5e22c3.out.push(TILE_EVENT_TRIGGER.encode(_0x43d4fe, _0x5218df, shor2.encode(_0xa82aaa, _0x23ca7e), _0x266720))), 0x0 < _0xd2d34b.data ? (_0x302681 = _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).tile(_0xa82aaa, _0x23ca7e), _0x302681 = _0x3b5639.data(_0x302681, _0xd2d34b.data - 0x1)) : _0x302681 = 0x18003, _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).replace(_0xa82aaa, _0x23ca7e, _0x302681), _0x5e22c3.world.getZone(_0x43d4fe, _0x5218df).coin(_0xa82aaa, _0x23ca7e + 0x1), _0x3b5639.GEN_FUNC.BUMP(_0x5e22c3, _0x699f77, _0xd2d34b, _0x43d4fe, _0x5218df, _0xa82aaa, _0x23ca7e, _0x266720);
            }
        }
    },
    24: {
        'NAME': "VINE BLOCK",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x49d2dd, _0x230f37, _0x4a87dd, _0x236b2b, _0x562d5b, _0x96c1d9, _0x5c6b92, _0x59bc9c) {
            switch (_0x59bc9c) {
                case 0x10:
                    _0x49d2dd.pid === _0x230f37 && _0x49d2dd.out.push(TILE_EVENT_TRIGGER.encode(_0x236b2b, _0x562d5b, shor2.encode(_0x96c1d9, _0x5c6b92), _0x59bc9c));
                    var _0xa9538d = 0x18003,
                        _0x384531 = _0x3b5639.data(0xa50164, _0x4a87dd.data);
                    _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).replace(_0x96c1d9, _0x5c6b92, _0xa9538d);
                    _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).grow(_0x96c1d9, _0x5c6b92 + 0x1, _0x384531);
                    _0x3b5639.GEN_FUNC.BUMP(_0x49d2dd, _0x230f37, _0x4a87dd, _0x236b2b, _0x562d5b, _0x96c1d9, _0x5c6b92, _0x59bc9c);
                    _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).play(_0x96c1d9, _0x5c6b92, "sfx/vine.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x49d2dd.pid === _0x230f37 && (_0x49d2dd.coinage(), _0x49d2dd.out.push(TILE_EVENT_TRIGGER.encode(_0x236b2b, _0x562d5b, shor2.encode(_0x96c1d9, _0x5c6b92), _0x59bc9c))), _0xa9538d = 0x18003, _0x384531 = _0x3b5639.data(0xa50164, _0x4a87dd.data), _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).replace(_0x96c1d9, _0x5c6b92, _0xa9538d), _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).grow(_0x96c1d9, _0x5c6b92 + 0x1, _0x384531), _0x3b5639.GEN_FUNC.BUMP(_0x49d2dd, _0x230f37, _0x4a87dd, _0x236b2b, _0x562d5b, _0x96c1d9, _0x5c6b92, _0x59bc9c), _0x49d2dd.world.getZone(_0x236b2b, _0x562d5b).play(_0x96c1d9, _0x5c6b92, "sfx/vine.wav", 0x1, 0.04);
            }
        }
    },
    21: {
        'NAME': "ITEM BLOCK INVISIBLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x0,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x19c9a8, _0x189b2a, _0x142c2a, _0x106426, _0x758af8, _0x1579c5, _0xac540f, _0x471932) {
            switch (_0x471932) {
                case 0x10:
                    _0x19c9a8.pid === _0x189b2a && _0x19c9a8.out.push(TILE_EVENT_TRIGGER.encode(_0x106426, _0x758af8, shor2.encode(_0x1579c5, _0xac540f), _0x471932));
                    var _0x54d63f = 0x18003;
                    _0x19c9a8.world.getZone(_0x106426, _0x758af8).replace(_0x1579c5, _0xac540f, _0x54d63f);
                    _0x19c9a8.createObject(_0x142c2a.data, _0x106426, _0x758af8, vec2.make(_0x1579c5, _0xac540f), [shor2.encode(_0x1579c5, _0xac540f)]);
                    _0x3b5639.GEN_FUNC.BUMP(_0x19c9a8, _0x189b2a, _0x142c2a, _0x106426, _0x758af8, _0x1579c5, _0xac540f, _0x471932);
                    _0x19c9a8.world.getZone(_0x106426, _0x758af8).play(_0x1579c5, _0xac540f, "sfx/item.wav", 0x1, 0.04);
                    break;
                case 0x11:
                    _0x19c9a8.pid === _0x189b2a && _0x19c9a8.out.push(TILE_EVENT_TRIGGER.encode(_0x106426, _0x758af8, shor2.encode(_0x1579c5, _0xac540f), _0x471932)), _0x54d63f = 0x18003, _0x19c9a8.world.getZone(_0x106426, _0x758af8).replace(_0x1579c5, _0xac540f, _0x54d63f), _0x19c9a8.createObject(_0x142c2a.data, _0x106426, _0x758af8, vec2.make(_0x1579c5, _0xac540f), [shor2.encode(_0x1579c5, _0xac540f)]), _0x3b5639.GEN_FUNC.BUMP(_0x19c9a8, _0x189b2a, _0x142c2a, _0x106426, _0x758af8, _0x1579c5, _0xac540f, _0x471932), _0x19c9a8.world.getZone(_0x106426, _0x758af8).play(_0x1579c5, _0xac540f, "sfx/item.wav", 0x1, 0.04);
            }
        }
    },
    22: {
        'NAME': "COIN BLOCK INVISIBLE",
        'COLLIDE': !0x0,
        'HIDDEN': !0x0,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x56f20c, _0x4edbf7, _0x599f2f, _0x5d541f, _0x4ad9c9, _0x491f7e, _0x89a8fd, _0x368d4f) {
            switch (_0x368d4f) {
                case 0x10:
                    _0x56f20c.pid === _0x4edbf7 && (_0x56f20c.coinage(), _0x56f20c.out.push(TILE_EVENT_TRIGGER.encode(_0x5d541f, _0x4ad9c9, shor2.encode(_0x491f7e, _0x89a8fd), _0x368d4f)));
                    var _0x13efc1 = 0x18003;
                    _0x56f20c.world.getZone(_0x5d541f, _0x4ad9c9).replace(_0x491f7e, _0x89a8fd, _0x13efc1);
                    _0x56f20c.world.getZone(_0x5d541f, _0x4ad9c9).coin(_0x491f7e, _0x89a8fd + 0x1);
                    _0x3b5639.GEN_FUNC.BUMP(_0x56f20c, _0x4edbf7, _0x599f2f, _0x5d541f, _0x4ad9c9, _0x491f7e, _0x89a8fd, _0x368d4f);
                    break;
                case 0x11:
                    _0x56f20c.pid === _0x4edbf7 && (_0x56f20c.coinage(), _0x56f20c.out.push(TILE_EVENT_TRIGGER.encode(_0x5d541f, _0x4ad9c9, shor2.encode(_0x491f7e, _0x89a8fd), _0x368d4f))), _0x13efc1 = 0x18003, _0x56f20c.world.getZone(_0x5d541f, _0x4ad9c9).replace(_0x491f7e, _0x89a8fd, _0x13efc1), _0x56f20c.world.getZone(_0x5d541f, _0x4ad9c9).coin(_0x491f7e, _0x89a8fd + 0x1), _0x3b5639.GEN_FUNC.BUMP(_0x56f20c, _0x4edbf7, _0x599f2f, _0x5d541f, _0x4ad9c9, _0x491f7e, _0x89a8fd, _0x368d4f);
            }
        }
    },
    81: {
        'NAME': "WARP TILE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x4c53f1, _0x39f4fb, _0x3d9d40, _0x514e8f, _0x5edd77, _0x499d07, _0xc2a990, _0x67c87d) {
            switch (_0x67c87d) {
                case 0x0:
                    _0x4c53f1.pid === _0x39f4fb && _0x4c53f1.getPlayer().warp(_0x3d9d40.data);
            }
        }
    },
    82: {
        'NAME': "WARP PIPE SLOW",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x2df590, _0x1b52ba, _0x4e8db4, _0x43c6fc, _0x1ee2ea, _0x277f9c, _0xc88f33, _0x3de2b1) {
            switch (_0x3de2b1) {
                case 0x1:
                    if (_0x2df590.pid === _0x1b52ba) {
                        _0x1b52ba = _0x2df590.getPlayer();
                        _0x3de2b1 = _0x2df590.world.getZone(_0x43c6fc, _0x1ee2ea).getTile(vec2.make(_0x277f9c - 0x1, _0xc88f33));
                        _0x2df590 = _0x2df590.world.getZone(_0x43c6fc, _0x1ee2ea).getTile(vec2.make(_0x277f9c + 0x1, _0xc88f33));
                        if (_0x3de2b1.definition !== this)
                            if (_0x2df590.definition === this) _0x277f9c += 0x1;
                            else break;
                        0.45 >= Math.abs(_0x1b52ba.pos.x + 0.5 * _0x1b52ba.dim.x - _0x277f9c) && _0x1b52ba.pipe(0x2, _0x4e8db4.data, 0x55);
                    }
            }
        }
    },
    83: {
        'NAME': "WARP PIPE RIGHT SLOW",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x4378d9, _0x4adc1d, _0x504d9a, _0x3b03a9, _0x46fb35, _0x4535d4, _0x4777e7, _0x2e124e) {
            switch (_0x2e124e) {
                case 0x2:
                    _0x4378d9.pid === _0x4adc1d && _0x4378d9.getPlayer().pipe(0x4, _0x504d9a.data, 0x55);
            }
        }
    },
    84: {
        'NAME': "WARP PIPE FAST",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x19fd13, _0x4f24aa, _0x109e41, _0x391d2a, _0x465adb, _0x281c3a, _0x4c1a0c, _0x9d2084) {
            switch (_0x9d2084) {
                case 0x1:
                    if (_0x19fd13.pid === _0x4f24aa) {
                        _0x4f24aa = _0x19fd13.getPlayer();
                        _0x9d2084 = _0x19fd13.world.getZone(_0x391d2a, _0x465adb).getTile(vec2.make(_0x281c3a - 0x1, _0x4c1a0c));
                        _0x19fd13 = _0x19fd13.world.getZone(_0x391d2a, _0x465adb).getTile(vec2.make(_0x281c3a + 0x1, _0x4c1a0c));
                        if (_0x9d2084.definition !== this)
                            if (_0x19fd13.definition === this) _0x281c3a += 0x1;
                            else break;
                        0.45 >= Math.abs(_0x4f24aa.pos.x + 0.5 * _0x4f24aa.dim.x - _0x281c3a) && _0x4f24aa.pipe(0x2, _0x109e41.data, 0x0);
                    }
            }
        }
    },
    85: {
        'NAME': "WARP PIPE RIGHT FAST",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x4b20a3, _0x36ba9d, _0x341af0, _0x249dda, _0x604874, _0x17e9c4, _0x3e4d4e, _0x4a7bb5) {
            switch (_0x4a7bb5) {
                case 0x2:
                    _0x4b20a3.pid === _0x36ba9d && _0x4b20a3.getPlayer().pipe(0x4, _0x341af0.data, 0x0);
            }
        }
    },
    86: {
        'NAME': "LEVEL END WARP",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x21814c, _0x1a4128, _0x40a03c, _0x249015, _0x5e0c39, _0x4d8918, _0x70a6e6, _0x3b650d) {
            switch (_0x3b650d) {
                case 0x0:
                    _0x21814c.pid === _0x1a4128 && _0x21814c.levelWarp(_0x40a03c.data);
            }
        }
    },
    160: {
        'NAME': "FLAGPOLE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x16c24a, _0x23e1cb, _0x424d3a, _0x51ec1c, _0x289b9d, _0x3e7c0d, _0x5b082b, _0x5a518a) {
            switch (_0x5a518a) {
                case 0x0:
                    _0x16c24a.pid === _0x23e1cb && (_0x16c24a = _0x16c24a.getPlayer(), _0x16c24a.pos.x >= _0x3e7c0d && _0x16c24a.pole(vec2.make(_0x3e7c0d, _0x5b082b)));
            }
        }
    },
    165: {
        'NAME': "VINE",
        'COLLIDE': !0x1,
        'HIDDEN': !0x1,
        'ASYNC': !0x0,
        'TRIGGER': function(_0x55aeb2, _0x277db7, _0x48f91c, _0x57805c, _0x1224ae, _0x2c0655, _0x5064fb, _0xf5fa50) {
            switch (_0xf5fa50) {
                case 0x0:
                    _0x55aeb2.pid === _0x277db7 && (_0x55aeb2 = _0x55aeb2.getPlayer(), _0x55aeb2.pos.x >= _0x2c0655 && _0x55aeb2.pos.x <= _0x2c0655 + 0x1 && _0x55aeb2.vine(vec2.make(_0x2c0655, _0x5064fb), _0x48f91c.data));
            }
        }
    },
    240: {
        'NAME': "VOTE BLOCK",
        'COLLIDE': !0x0,
        'HIDDEN': !0x1,
        'ASYNC': !0x1,
        'TRIGGER': function(_0x4213f5, _0x52b2e0, _0x12a943, _0x32176b, _0x29f2c8, _0x5369b0, _0x24087f, _0x529914) {
            switch (_0x529914) {
                case 0x10:
                    _0x4213f5.pid === _0x52b2e0 && _0x4213f5.send({
                        'type': "g50"
                    });
                    var _0x159bb6 = 0x18003;
                    _0x4213f5.world.getZone(_0x32176b, _0x29f2c8).replace(_0x5369b0, _0x24087f, _0x159bb6);
                    _0x4213f5.createObject(CheckMarkObject.ID, _0x32176b, _0x29f2c8, vec2.make(_0x5369b0, _0x24087f + 0x1), [shor2.encode(_0x5369b0, _0x24087f)]);
                    _0x3b5639.GEN_FUNC.BUMP(_0x4213f5, _0x52b2e0, _0x12a943, _0x32176b, _0x29f2c8, _0x5369b0, _0x24087f, _0x529914);
                    break;
                case 0x11:
                    _0x4213f5.pid === _0x52b2e0 && _0x4213f5.send({
                        'type': "g50"
                    }), _0x159bb6 = 0x18003, _0x4213f5.world.getZone(_0x32176b, _0x29f2c8).replace(_0x5369b0, _0x24087f, _0x159bb6), _0x4213f5.createObject(CheckMarkObject.ID, _0x32176b, _0x29f2c8, vec2.make(_0x5369b0, _0x24087f + 0x1), [shor2.encode(_0x5369b0, _0x24087f)]), _0x3b5639.GEN_FUNC.BUMP(_0x4213f5, _0x52b2e0, _0x12a943, _0x32176b, _0x29f2c8, _0x5369b0, _0x24087f, _0x529914);
            }
        }
    }
};
var NETX = {},
    ASSIGN_PID = {
        'DESIGNATION': 0x2,
        'BYTES': 0x3,
        'decode': function(_0x305412) {
            return {
                'designation': ASSIGN_PID.DESIGNATION,
                'pid': _0x305412[0x1] & 0xff | _0x305412[0x0] << 0x8 & 0xff00
            };
        }
    },
    CREATE_PLAYER_OBJECT = {
        'DESIGNATION': 0x10,
        'BYTES': 0x9,
        'encode': function(_0x46a31e, _0xf900fe, _0x5566a4) {
            return new Uint8Array([CREATE_PLAYER_OBJECT.DESIGNATION, _0x46a31e, _0xf900fe, _0x5566a4 >> 0x18 & 0xff, _0x5566a4 >> 0x10 & 0xff, _0x5566a4 >> 0x8 & 0xff, _0x5566a4 & 0xff]);
        },
        'decode': function(_0x29ae3a) {
            return {
                'designation': CREATE_PLAYER_OBJECT.DESIGNATION,
                'pid': _0x29ae3a[0x1] & 0xff | _0x29ae3a[0x0] << 0x8 & 0xff00,
                'level': _0x29ae3a[0x2],
                'zone': _0x29ae3a[0x3],
                'pos': _0x29ae3a[0x7] & 0xff | _0x29ae3a[0x6] << 0x8 & 0xff00 | _0x29ae3a[0x5] << 0x10 & 0xff0000 | _0x29ae3a[0x4] << 0x18 & 0xff0000
            };
        }
    },
    KILL_PLAYER_OBJECT = {
        'DESIGNATION': 0x11,
        'BYTES': 0x3,
        'encode': function() {
            return new Uint8Array([KILL_PLAYER_OBJECT.DESIGNATION]);
        },
        'decode': function(_0x568c2f) {
            return {
                'designation': KILL_PLAYER_OBJECT.DESIGNATION,
                'pid': _0x568c2f[0x1] & 0xff | _0x568c2f[0x0] << 0x8 & 0xff00
            };
        }
    },
    UPDATE_PLAYER_OBJECT = {
        'DESIGNATION': 0x12,
        'BYTES': 0xf,
        'encode': function(_0x480942, _0xbd5377, _0x547cf0, _0x363a8c, _0x523fa2) {
            _0x547cf0 = new Float32Array([_0x547cf0.x, _0x547cf0.y]);
            _0x547cf0 = new Uint8Array(_0x547cf0.buffer);
            return new Uint8Array([UPDATE_PLAYER_OBJECT.DESIGNATION, _0x480942, _0xbd5377, _0x547cf0[0x3], _0x547cf0[0x2], _0x547cf0[0x1], _0x547cf0[0x0], _0x547cf0[0x7], _0x547cf0[0x6], _0x547cf0[0x5], _0x547cf0[0x4], _0x363a8c, _0x523fa2]);
        },
        'decode': function(_0x525257) {
            var _0xf538f2 = new Uint8Array([_0x525257[0x4], _0x525257[0x5], _0x525257[0x6], _0x525257[0x7]]),
                _0x14829b = new Uint8Array([_0x525257[0x8], _0x525257[0x9], _0x525257[0xa], _0x525257[0xb]]),
                _0xf538f2 = new DataView(_0xf538f2.buffer),
                _0x14829b = new DataView(_0x14829b.buffer);
            return {
                'designation': UPDATE_PLAYER_OBJECT.DESIGNATION,
                'pid': _0x525257[0x1] & 0xff | _0x525257[0x0] << 0x8 & 0xff00,
                'level': _0x525257[0x2],
                'zone': _0x525257[0x3],
                'pos': vec2.make(_0xf538f2.getFloat32(0x0), _0x14829b.getFloat32(0x0)),
                'sprite': _0x525257[0xc],
                'reverse': 0x0 !== _0x525257[0xd]
            };
        }
    },
    PLAYER_OBJECT_EVENT = {
        'DESIGNATION': 0x13,
        'BYTES': 0x4,
        'encode': function(_0x4a8054) {
            return new Uint8Array([PLAYER_OBJECT_EVENT.DESIGNATION, _0x4a8054]);
        },
        'decode': function(_0x187db2) {
            return {
                'designation': PLAYER_OBJECT_EVENT.DESIGNATION,
                'pid': _0x187db2[0x1] & 0xff | _0x187db2[0x0] << 0x8 & 0xff00,
                'type': _0x187db2[0x2]
            };
        }
    },
    PLAYER_KILLED_EVENT = {
        'DESIGNATION': 0x17,
        'BYTES': 0x5,
        'encode': function(_0x293a98) {
            return new Uint8Array([PLAYER_KILL_EVENT.DESIGNATION, _0x293a98 >> 0x8 & 0xff, _0x293a98 & 0xff]);
        },
        'decode': function(_0x399c76) {
            return {
                'designation': PLAYER_KILL_EVENT.DESIGNATION,
                'pid': _0x399c76[0x1] & 0xff | _0x399c76[0x0] << 0x8 & 0xff00,
                'killer': _0x399c76[0x3] & 0xff | _0x399c76[0x2] << 0x8 & 0xff00
            };
        }
    },
    PLAYER_RESULT_REQUEST = {
        'DESIGNATION': 0x18,
        'BYTES': 0x5,
        'encode': function() {
            return new Uint8Array([PLAYER_RESULT_REQUEST.DESIGNATION]);
        },
        'decode': function(_0x5e61f0) {
            return {
                'designation': PLAYER_RESULT_REQUEST.DESIGNATION,
                'pid': _0x5e61f0[0x1] & 0xff | _0x5e61f0[0x0] << 0x8 & 0xff00,
                'result': _0x5e61f0[0x2],
                'extra': _0x5e61f0[0x3]
            };
        }
    },
    _0x482c1d = {
        'DESIGNATION': 0x19,
        'BYTES': 0x3,
        'encode': function() {
            return new Uint8Array([_0x482c1d.DESIGNATION]);
        }
    },
    OBJECT_EVENT_TRIGGER = {
        'DESIGNATION': 0x20,
        'BYTES': 0xa,
        'encode': function(_0x212298, _0x5ad080, _0xec07d0, _0x52c06d) {
            return new Uint8Array([OBJECT_EVENT_TRIGGER.DESIGNATION, _0x212298, _0x5ad080, _0xec07d0 >> 0x18 & 0xff, _0xec07d0 >> 0x10 & 0xff, _0xec07d0 >> 0x8 & 0xff, _0xec07d0 & 0xff, _0x52c06d]);
        },
        'decode': function(_0x181a0e) {
            return {
                'designation': OBJECT_EVENT_TRIGGER.DESIGNATION,
                'pid': _0x181a0e[0x1] & 0xff | _0x181a0e[0x0] << 0x8 & 0xff00,
                'level': _0x181a0e[0x2],
                'zone': _0x181a0e[0x3],
                'oid': _0x181a0e[0x7] & 0xff | _0x181a0e[0x6] << 0x8 & 0xff00 | _0x181a0e[0x5] << 0x10 & 0xff0000 | _0x181a0e[0x4] << 0x18 & 0xff0000,
                'type': _0x181a0e[0x8]
            };
        }
    },
    TILE_EVENT_TRIGGER = {
        'DESIGNATION': 0x30,
        'BYTES': 0xa,
        'encode': function(_0x5bf975, _0xbd3901, _0x5b4b84, _0x4aa955) {
            return new Uint8Array([TILE_EVENT_TRIGGER.DESIGNATION, _0x5bf975, _0xbd3901, _0x5b4b84 >> 0x18 & 0xff, _0x5b4b84 >> 0x10 & 0xff, _0x5b4b84 >> 0x8 & 0xff, _0x5b4b84 & 0xff, _0x4aa955]);
        },
        'decode': function(_0x4b27ec) {
            return {
                'designation': TILE_EVENT_TRIGGER.DESIGNATION,
                'pid': _0x4b27ec[0x1] & 0xff | _0x4b27ec[0x0] << 0x8 & 0xff00,
                'level': _0x4b27ec[0x2],
                'zone': _0x4b27ec[0x3],
                'pos': shor2.decode(_0x4b27ec[0x7] & 0xff | _0x4b27ec[0x6] << 0x8 & 0xff00 | _0x4b27ec[0x5] << 0x10 & 0xff0000 | _0x4b27ec[0x4] << 0x18 & 0xff0000),
                'type': _0x4b27ec[0x8]
            };
        }
    },
    _0x5b3c43 = function(_0x1ae564) {
        for (var _0x1cd96c = [], _0x1b12e7 = 0x0; _0x1b12e7 < _0x1ae564.length; _0x1b12e7++)
            for (var _0x546e07 = 0x0; _0x546e07 < _0x1ae564[_0x1b12e7].length; _0x546e07++) _0x1cd96c.push(_0x1ae564[_0x1b12e7][_0x546e07]);
        return new Uint8Array(_0x1cd96c);
    };
NETX.decode = function(_0x45cd70) {
    for (var _0x3e943d = [], _0x141cee = 0x0; _0x141cee < _0x45cd70.length;) switch (_0x45cd70.slice(_0x141cee++, _0x141cee)[0x0]) {
        case 0x2:
            _0x3e943d.push(ASSIGN_PID.decode(_0x45cd70.slice(_0x141cee, _0x141cee += ASSIGN_PID.BYTES - 0x1)));
            break;
        case 0x10:
            _0x3e943d.push(CREATE_PLAYER_OBJECT.decode(_0x45cd70.slice(_0x141cee, _0x141cee += CREATE_PLAYER_OBJECT.BYTES - 0x1)));
            break;
        case 0x11:
            _0x3e943d.push(KILL_PLAYER_OBJECT.decode(_0x45cd70.slice(_0x141cee, _0x141cee += KILL_PLAYER_OBJECT.BYTES - 0x1)));
            break;
        case 0x12:
            _0x3e943d.push(UPDATE_PLAYER_OBJECT.decode(_0x45cd70.slice(_0x141cee, _0x141cee += UPDATE_PLAYER_OBJECT.BYTES - 0x1)));
            break;
        case 0x13:
            _0x3e943d.push(PLAYER_OBJECT_EVENT.decode(_0x45cd70.slice(_0x141cee, _0x141cee += PLAYER_OBJECT_EVENT.BYTES - 0x1)));
            break;
        case 0x17:
            _0x3e943d.push(PLAYER_KILL_EVENT.decode(_0x45cd70.slice(_0x141cee, _0x141cee += PLAYER_KILL_EVENT.BYTES - 0x1)));
            break;
        case 0x18:
            _0x3e943d.push(PLAYER_RESULT_REQUEST.decode(_0x45cd70.slice(_0x141cee, _0x141cee += PLAYER_RESULT_REQUEST.BYTES - 0x1)));
            break;
        case 0x20:
            _0x3e943d.push(OBJECT_EVENT_TRIGGER.decode(_0x45cd70.slice(_0x141cee, _0x141cee += OBJECT_EVENT_TRIGGER.BYTES - 0x1)));
            break;
        case 0x30:
            _0x3e943d.push(TILE_EVENT_TRIGGER.decode(_0x45cd70.slice(_0x141cee, _0x141cee += TILE_EVENT_TRIGGER.BYTES - 0x1)));
            break;
        default:
            return app && app.menu.warn.show("Error decoding binary data!"), _0x3e943d;
    }
    return _0x3e943d;
};
"use strict";
var squar = {};
squar.intersection = function(_0x3d1f76, _0xa10d77, _0x566a65, _0xf78482) {
    return _0x566a65.x < _0x3d1f76.x + _0xa10d77.x && _0x566a65.x + _0xf78482.x > _0x3d1f76.x && _0x566a65.y < _0x3d1f76.y + _0xa10d77.y && _0x566a65.y + _0xf78482.y > _0x3d1f76.y;
};
squar.inside = function(_0x281185, _0x3a5b8e, _0x58830d) {
    return _0x3a5b8e.x < _0x281185.x && _0x3a5b8e.x + _0x58830d.x > _0x281185.x && _0x3a5b8e.y < _0x281185.y && _0x3a5b8e.y + _0x58830d.y > _0x281185.y;
};
"use strict";

function Menu() {
    this.body = document.getElementById("body");
    window.history.pushState({
        'html': "index.html",
        'pageTitle': "Infringe Royale"
    }, '', '#');
    var _0x127a01 = [{
        'id': "warn",
        'obj': new _0x3bc03d()
    }, {
        'id': "error",
        'obj': new _0x22b51b()
    }, {
        'id': "load",
        'obj': new _0x19c420()
    }, {
        'id': "disclaim",
        'obj': new _0x324007()
    }, {
        'id': "main",
        'obj': new _0x453b9f()
    }, {
        'id': "name",
        'obj': new _0x27685a()
    }, {
        'id': "game",
        'obj': new _0x5748a6()
    }];
    this.menus = [];
    for (var _0x4193f9 = 0x0; _0x4193f9 < _0x127a01.length; _0x4193f9++) this.menus[_0x4193f9] = _0x127a01[_0x4193f9].obj, this[_0x127a01[_0x4193f9].id] = _0x127a01[_0x4193f9].obj;
    this.lastNav = '';
    var _0x48acbe = this;
    window.onpopstate = function(_0x127a01) {
        if (_0x48acbe[_0x48acbe.lastNav] && _0x48acbe[_0x48acbe.lastNav].onBack) _0x48acbe.onBack();
        else _0x127a01.state && "Infringe Royale" !== _0x127a01.state.pageTitle ? (document.getElementById("content").innerHTML = _0x127a01.state.html, document.title = _0x127a01.state.pageTitle) : _0x127a01.state && "Infringe Royale" === _0x127a01.state.pageTitle && window.history.back();
    };
    this.hideAll();
    this.background('c');
    this.body.style.display = "block";
}
Menu.prototype.hideAll = function() {
    for (var _0xde3f37 = 0x1; _0xde3f37 < this.menus.length; _0xde3f37++) this.menus[_0xde3f37].hide();
};
Menu.prototype.background = function(_0x1c2b65) {
    if (_0x1c2b65 !== this.bid) {
        switch (_0x1c2b65) {
            case 'b':
                _0x1c2b65 = "background-b";
                break;
            case 'c':
                _0x1c2b65 = "background-c";
                break;
            default:
                _0x1c2b65 = "background-a";
        }
        this.body.classList.remove("background-a");
        this.body.classList.remove("background-b");
        this.body.classList.remove("background-c");
        this.body.classList.add(_0x1c2b65);
    }
};
Menu.prototype.navigation = function(_0x3ddd1e, _0x10cd49) {
    this.lastNav = _0x3ddd1e;
    window.history.replaceState({
        'html': "index.html",
        'pageTitle': "Infringe Royale"
    }, _0x10cd49, '#' + _0x10cd49);
};
Menu.prototype.onBack = function() {
    window.history.pushState({
        'html': "index.html",
        'pageTitle': "Infringe Royale"
    }, '', '#');
    this[this.lastNav].onBack();
};
"use strict";

function _0x3bc03d() {
    this.element = document.getElementById("warn");
    this.hide();
    this.timeout = void 0x0;
}
_0x3bc03d.prototype.show = function(_0xf4b076) {
    this.element.innerHTML = "<img src='img/home/warn.png' class='warn-ico'/> " + _0xf4b076;
    console.warn("##WARN## " + _0xf4b076);
    this.timeout && clearTimeout(this.timeout);
    var _0x5c6f93 = this.element;
    this.timeout = setTimeout(function() {
        _0x5c6f93.style.display = "none";
    }, 0x1388);
    this.element.style.display = "block";
};
_0x3bc03d.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x22b51b() {
    this.element = document.getElementById("error");
    this.error = document.getElementById("error-message");
}
_0x22b51b.prototype.show = function(_0x268c96, _0x41574c, _0xa9cdc9) {
    app.net.close();
    app.menu.hideAll();
    app.menu.navigation("error", "error");
    app.menu.background('b');
    this.error.innerHTML = _0x268c96;
    _0x41574c && console.warn("##ERROR## " + _0x41574c);
    _0xa9cdc9 && console.warn("##TRACE## " + _0xa9cdc9);
    this.element.style.display = "block";
};
_0x22b51b.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x19c420() {
    this.element = document.getElementById("load");
}
_0x19c420.prototype.show = function() {
    app.menu.hideAll();
    app.menu.background('a');
    this.element.style.display = "block";
};
_0x19c420.prototype.hide = function() {
    this.element.style.display = "none";
};
"use strict";

function _0x324007() {
    this.element = document.getElementById("disclaim");
    this.linkElement = document.getElementById("link");
}
_0x324007.prototype.show = function(_0x3ca171) {
    app.menu.hideAll();
    app.menu.background('c');
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
_0x324007.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
"use strict";

function _0x453b9f() {
    this.element = document.getElementById("main");
    this.linkElement = document.getElementById("link");
    this.winElement = document.getElementById("win");
    this.launchBtn = document.getElementById("main-launch");
    this.number = document.getElementById("main-number");
    var _0x32f9e3 = this;
    this.launchBtn.onclick = function() {
        _0x32f9e3.launch();
    };
}
_0x453b9f.prototype.launch = function() {
    app.menu.name.show();
};
_0x453b9f.prototype.show = function(_0x220cca) {
    app.menu.hideAll();
    app.menu.navigation("main", "main");
    app.menu.background('a');
    _0x220cca && (this.number.innerHTML = _0x220cca);
    _0x220cca = 0;//Cookies.get("epic_gamer_moments");
    var _0x4a6dc1 = 0;//Cookies.get("heated_gamer_moments");
    this.winElement.style.display = "block";
    this.winElement.innerHTML = "Wins: " + (_0x220cca ? _0x220cca : '0') + " <span class='kill'>Kills: " + (_0x4a6dc1 ? _0x4a6dc1 : '0') + "</span>";
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
_0x453b9f.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
"use strict";

function _0x27685a() {
    this.element = document.getElementById("name");
    this.linkElement = document.getElementById("link");
    this.nameInput = document.getElementById("name-input");
    this.teamInput = document.getElementById("team-input");
    this.launchBtn = document.getElementById("name-launch");
    var _0x25533e = this;
    this.launchBtn.onclick = function() {
        _0x25533e.launch();
    };
}
_0x27685a.prototype.launch = function() {
    // Cookies.set("name", this.nameInput.value, {
    //     'expires': 0x1e
    // });
    // Cookies.set("team", this.teamInput.value, {
    //     'expires': 0x1e
    // });
    app.join(this.nameInput.value, this.teamInput.value);
};
_0x27685a.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("name", "name");
    app.menu.background('a');
    var _0x3c4f13 = "";//Cookies.get("name"),
        _0x5b5426 = "";//Cookies.get("team");
    this.nameInput.value = _0x3c4f13 ? _0x3c4f13 : '';
    this.teamInput.value = _0x5b5426 ? _0x5b5426 : '';
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
};
_0x27685a.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
};
_0x27685a.prototype.onBack = function() {
    app.menu.main.show();
};
"use strict";

function _0x5748a6() {
    this.element = document.getElementById("game");
}
_0x5748a6.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("game", "game");
    app.menu.background('c');
    this.element.style.display = "block";
};
_0x5748a6.prototype.hide = function() {
    this.element.style.display = "none";
};
_0x5748a6.prototype.onBack = function() {
    app.close();
};
"use strict";

function Network() {}
Network.prototype.connected = function() {
    return void 0x0 !== this.webSocket && this.webSocket.readyState !== WebSocket.CLOSED;
};
Network.prototype.connect = function(_0x38ae30, _0x5c2e1b) {
    var _0xe2d302 = "127.0.0.1:9000";//window.location.host;
    if(serverstring != null)
    {
        _0xe2d302 = serverstring;
    }
    this.prefName = _0x38ae30;
    this.prefTeam = _0x5c2e1b;
    var that = this;
    // console.log("Connecting");
    if (this.connected()){
        app.menu.error.show("Connection already open. State error.")
    } else {
        // console.log("Making new websocket");
        this.webSocket = new WebSocket("ws://" + _0xe2d302 + "/royale/ws");
        // console.log("Websocket made! Setting binarytype");
        this.webSocket.binaryType = "arraybuffer";
        // console.log("Binarytype set.");
        this.webSocket.onopen = function(_0x38ae30) {
            // console.log("Open?");
            // console.log(_0x38ae30);
            "open" !== _0x38ae30.type && app.menu.error.show("Error. WS open event has unexpected result.");
        };
        this.webSocket.onmessage = function(_0x38ae30) {
            // console.log("Received Message");
            // console.log(_0x38ae30);
            // console.log(_0x38ae30.data instanceof ArrayBuffer);
            _0x38ae30.data instanceof ArrayBuffer ? that.handleBinary(new Uint8Array(_0x38ae30.data)) : that.handlePacket(JSON.parse(_0x38ae30.data));
        };
        this.webSocket.onclose = function(_0x38ae30) {
            that.webSocket = void 0x0;
            app.menu.error.show("Connection Interrupted");
        };
    }
};
Network.prototype.handlePacket = function(_0x40daaa) {
    // console.log("Received Packet4");
    // console.log(_0x40daaa.type);
    if (void 0x0 === this.state || !this.state.handlePacket(_0x40daaa)) switch (_0x40daaa.type) {
        case "s00":
            this.setState(_0x40daaa.state);
            break;
        case "s01":
            this.handleBlob(_0x40daaa.packets);
            break;
        case "s02":
            break;
        case "x00":
            app.menu.error.show("Server Exception", _0x40daaa.message);
            break;
        case "x01":
            app.menu.error.show("Server Exception", _0x40daaa.message, _0x40daaa.trace);
            break;
        default:
            app.menu.error.show("Recieved invalid packet type: " + _0x40daaa.type, JSON.stringify(_0x40daaa));
    }
};
Network.prototype.handleBinary = function(_0x4ac1dc) {
    // console.log("binary");
    this.state.handleBinary(_0x4ac1dc);
};
Network.prototype.handleBlob = function(_0xb95200) {
    // console.log("blob");
    for (var _0x308544 = 0x0; _0x308544 < _0xb95200.length; _0x308544++) this.handlePacket(_0xb95200[_0x308544]);
};
Network.prototype.setState = function(_0x2c5cd1) {
    void 0x0 !== this.state && this.state.destroy();
    switch (_0x2c5cd1) {
        case 'l':
            this.state = new InputState();
            break;
        case 'g':
            this.state = new IngameState();
            break;
        default:
            app.menu.error.show("Received invalid state ID: " + _0x2c5cd1);
            return;
    }
    this.state.ready();
};
Network.prototype.send = function(_0x386ea2) {
    // console.log("Network sending packet...");
    // console.log(_0x386ea2);
    this.webSocket.send(JSON.stringify(_0x386ea2));
    // console.log("Network sent packet");
};
Network.prototype.sendBinary = function(_0x13f0a6) {
    this.webSocket.send(_0x13f0a6.buffer);
};
Network.prototype.close = function() {
    void 0x0 !== this.webSocket && this.webSocket.close();
    app.ingame() && app.game.destroy();
};
"use strict";

function InputState() {}
InputState.prototype.handlePacket = function(_0x4789de) {
    // console.log("Received Packet3");
    switch (_0x4789de.type) {
        case "l01":
            return this.loggedIn(_0x4789de), !0x0;
        default:
            return !0x1;
    }
};
InputState.prototype.handleBinary = function(_0x4e8adf) {
    // console.log("Received unexpected binary data!");
    app.menu.warn.show("Recieved unexpected binary data!");
};
InputState.prototype.ready = function() {
    this.send({
        'type': "l00",
        'name': app.net.prefName,
        'team': app.net.prefTeam
    });
};
InputState.prototype.loggedIn = function(_0x4992d1) {
    app.net.name = _0x4992d1.name;
    app.net.sid = _0x4992d1.sid;
    // console.log("Logged in: " + _0x4992d1.name + " :: " + _0x4992d1.team + " // " + _0x4992d1.sid);
};
InputState.prototype.send = function(_0x43fbbf) {
    app.net.send(_0x43fbbf);
};
InputState.prototype.type = function() {
    return 'l';
};
InputState.prototype.destroy = function() {};
"use strict";

function IngameState() {
    this.pingOut = !0x1;
    this.pingLast = 0x0;
    this.pingFrame = 0x5a;
}
IngameState.prototype.handlePacket = function(_0x5852f4) {
    // console.log("Received Packet2")
    // console.log("Type: "+_0x5852f4.type);
    switch (_0x5852f4.type) {
        case "g01":
            return this.load(_0x5852f4), !0x0;
        case "g06":
            return this.globalWarn(_0x5852f4), !0x0;
        case "g21":
            return this.recievePing(_0x5852f4), !0x0;
        default:
            return app.ingame() ? app.game.handlePacket(_0x5852f4) : !0x1;
    }
};
IngameState.prototype.handleBinary = function(_0x1ae461) {
    // console.log("Received Binary!")
    app.ingame() && app.game.handleBinary(_0x1ae461);
};
IngameState.prototype.ready = function() {
    this.send({
        'type': "g00"
    });
    // console.log("Sent g00");
};
IngameState.prototype.load = function(_0x6240d9) {
    var _0x2485b5 = this;
    // console.log("Loading..."+_0x6240d9.game);
    page.cmd("fileGet", "royale/game/" + _0x6240d9.game+".json", function(data)
    {
        data = JSON.parse(data);
        // console.log("Check?");
        // console.log(data);
        // console.log(data.type);
        app.load(data);
        // console.log("Loaded, sending packet now.");
        _0x2485b5.send({
            'type': "g03"
        });
        // console.log("Sent g03");
    });
};
IngameState.prototype.globalWarn = function(_0x46a482) {
    app.menu.warn.show(_0x46a482.message);
};
IngameState.prototype.sendPing = function() {
    var _0x4e85e9 = util.time.now();
    this.pingOut && 0x3e7 > this.pingLast - _0x4e85e9 || (this.pingOut && (app.net.ping = 0x3e7), this.send({
        'type': "g21",
        'delta': _0x4e85e9
    }), this.pingOut = !0x0);
};
IngameState.prototype.recievePing = function(_0xaadb97) {
    var _0x134513 = util.time.now();
    app.net.ping = _0x134513 - _0xaadb97.delta;
    this.pingOut = !0x1;
};
IngameState.prototype.send = function(_0x34b41a) {
    app.net.send(_0x34b41a);
};
IngameState.prototype.type = function() {
    return 'g';
};
IngameState.prototype.destroy = function() {};
"use strict";

function _0x2b132(_0x1011dd, _0x2bc95a, _0x123d8d, _0xb0017c) {
    this.game = _0x1011dd;
    this.level = _0x2bc95a;
    this.zone = _0x123d8d;
    this.pos = _0xb0017c;
    this.sprite = this.state = void 0x0;
    this.garbage = this.dead = this.reverse = !0x1;
    this.sounds = [];
}
_0x2b132.ASYNC = !0x0;
_0x2b132.ID = 0x0;
_0x2b132.prototype.update = function(_0x34f8fc) {};
_0x2b132.prototype.step = function() {};
_0x2b132.prototype.sound = function() {
    for (var _0xe404a4 = 0x0; _0xe404a4 < this.sounds.length; _0xe404a4++) {
        var _0x29d0a1 = this.sounds[_0xe404a4];
        _0x29d0a1.done() ? this.sounds.splice(_0xe404a4--, 0x1) : _0x29d0a1.position(this.pos);
    }
};
_0x2b132.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
_0x2b132.prototype.destroy = function() {
    this.garbage = this.dead = !0x0;
};
_0x2b132.prototype.isTangible = function() {
    return !this.dead && !this.disabled && this.dim;
};
_0x2b132.prototype.draw = function() {};
_0x2b132.prototype.play = function(_0x387076, _0x3ce43b, _0x307bee) {
    var _0x5a9966 = this.game.getZone();
    if (this.zone === _0x5a9966.id && this.level === _0x5a9966.level) return _0x387076 = this.game.audio.getSpatialAudio(_0x387076, _0x3ce43b, _0x307bee, "effect"), _0x387076.play(this.pos), this.sounds.push(_0x387076), _0x387076;
};
_0x2b132.OBJECT_LIST = [];
_0x2b132.REGISTER_OBJECT = function(_0xe1c0e5) {
    _0x2b132.OBJECT_LIST.push(_0xe1c0e5);
};
_0x2b132.OBJECT = function(_0x569450) {
    for (var _0xc3432b = 0x0; _0xc3432b < _0x2b132.OBJECT_LIST.length; _0xc3432b++) {
        var _0x2f3e0e = _0x2b132.OBJECT_LIST[_0xc3432b];
        if (_0x2f3e0e.ID === _0x569450) return _0x2f3e0e;
    }
    app.menu.warn.show("Invalid Object Class ID: " + _0x569450);
};
"use strict";

function PlayerObject(_0x4d091b, _0x5602de, _0x93c981, _0x48ae31, _0x3fec2b) {
    _0x2b132.call(this, _0x4d091b, _0x5602de, _0x93c981, _0x48ae31);
    this.pid = _0x3fec2b;
    this.anim = 0x0;
    this.reverse = !0x1;
    this.deadTimer = this.deadFreezeTimer = this.arrowFade = 0x0;
    this.lastPos = this.pos;
    this.dim = vec2.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.jumping = -0x1;
    this.grounded = this.isSpring = this.isBounce = !0x1;
    this.name = void 0x0;
    this.starTimer = this.power = 0x0;
    this.starMusic = void 0x0;
    this.tfmTimer = this.damageTimer = 0x0;
    this.tfmTarget = -0x1;
    this.pipeWarp = void 0x0;
    this.pipeTimer = 0x0;
    this.pipeExt = this.pipeDir = -0x1;
    this.poleTimer = this.pipeDelayLength = this.pipeDelay = 0x0;
    this.poleSound = this.poleWait = !0x1;
    this.vineWarp = void 0x0;
    this.attackCharge = PlayerObject.MAX_CHARGE;
    this.attackTimer = 0x0;
    this.autoTarget = void 0x0;
    this.btnD = [0x0, 0x0];
    this.btnBde = this.btnBg = this.btnB = this.btnA = !0x1;
    this.setState(PlayerObject.SNAME.STAND);
}
PlayerObject.ASYNC = !0x1;
PlayerObject.ID = 0x1;
PlayerObject.NAME = "PLAYER";
PlayerObject.ANIMATION_RATE = 0x3;
PlayerObject.DIM_OFFSET = vec2.make(-0.05, 0x0);
PlayerObject.DEAD_FREEZE_TIME = 0x7;
PlayerObject.DEAD_TIME = 0x46;
PlayerObject.DEAD_UP_FORCE = 0.65;
PlayerObject.RUN_SPEED_MAX = 0.315;
PlayerObject.MOVE_SPEED_MAX = 0.215;
PlayerObject.MOVE_SPEED_ACCEL = 0.0125;
PlayerObject.MOVE_SPEED_DECEL = 0.0225;
PlayerObject.MOVE_SPEED_ACCEL_AIR = 0.0025;
PlayerObject.STUCK_SLIDE_SPEED = 0.08;
PlayerObject.FALL_SPEED_MAX = 0.45;
PlayerObject.FALL_SPEED_ACCEL = 0.085;
PlayerObject.BOUNCE_LENGTH_MIN = 0x1;
PlayerObject.SPRING_LENGTH_MIN = 0x5;
PlayerObject.SPRING_LENGTH_MAX = 0xe;
PlayerObject.JUMP_LENGTH_MIN = 0x3;
PlayerObject.JUMP_LENGTH_MAX = 0x7;
PlayerObject.JUMP_SPEED_INC_THRESHOLD = [0.1, 0.2, 0.25];
PlayerObject.JUMP_DECEL = 0.005;
PlayerObject.BLOCK_BUMP_THRESHOLD = 0.12;
PlayerObject.POWER_INDEX_SIZE = 0x20;
PlayerObject.GENERIC_INDEX = 0x60;
PlayerObject.DAMAGE_TIME = 0x2d;
PlayerObject.TRANSFORM_TIME = 0x12;
PlayerObject.TRANSFORM_ANIMATION_RATE = 0x2;
PlayerObject.STAR_LENGTH = 0x168;
PlayerObject.PROJ_OFFSET = vec2.make(0.75, 1.5);
PlayerObject.MAX_CHARGE = 0x3c;
PlayerObject.ATTACK_DELAY = 0x7;
PlayerObject.ATTACK_CHARGE = 0x19;
PlayerObject.ATTACK_ANIM_LENGTH = 0x3;
PlayerObject.PIPE_TIME = 0x1e;
PlayerObject.PIPE_SPEED = 0.06;
PlayerObject.PIPE_EXT_OFFSET = vec2.make(0.5, 0x0);
PlayerObject.WEED_EAT_RADIUS = 0x3;
PlayerObject.POLE_DELAY = 0xf;
PlayerObject.POLE_SLIDE_SPEED = 0.15;
PlayerObject.LEVEL_END_MOVE_OFF = vec2.make(0xa, 0x0);
PlayerObject.CLIMB_SPEED = 0.125;
PlayerObject.PLATFORM_SNAP_DIST = 0.15;
PlayerObject.ARROW_SPRITE = 0xfd;
PlayerObject.ARROW_TEXT = "YOU";
PlayerObject.ARROW_OFFSET = vec2.make(0x0, 0.1);
PlayerObject.TEXT_OFFSET = vec2.make(0x0, 0.55);
PlayerObject.TEXT_SIZE = 0.65;
PlayerObject.TEXT_COLOR = "#FFFFFF";
PlayerObject.ARROW_RAD_IN = 0x3;
PlayerObject.ARROW_RAD_OUT = 0x7;
PlayerObject.ARROW_THRESHOLD_MIN = 0x4;
PlayerObject.ARROW_THRESHOLD_MAX = 0x6;
PlayerObject.TEAM_OFFSET = vec2.make(0x0, 0x0);
PlayerObject.TEAM_SIZE = 0.3;
PlayerObject.TEAM_COLOR = "rgba(255,255,255,0.75)";
PlayerObject.SPRITE = {};
PlayerObject.SPRITE_LIST = [{
    'NAME': "S_STAND",
    'ID': 0x0,
    'INDEX': 0xd
}, {
    'NAME': "S_RUN0",
    'ID': 0x1,
    'INDEX': 0xa
}, {
    'NAME': "S_RUN1",
    'ID': 0x2,
    'INDEX': 0xb
}, {
    'NAME': "S_RUN2",
    'ID': 0x3,
    'INDEX': 0xc
}, {
    'NAME': "S_SLIDE",
    'ID': 0x4,
    'INDEX': 0x9
}, {
    'NAME': "S_FALL",
    'ID': 0x5,
    'INDEX': 0x8
}, {
    'NAME': "S_CLIMB0",
    'ID': 0x6,
    'INDEX': 0x6
}, {
    'NAME': "S_CLIMB1",
    'ID': 0x7,
    'INDEX': 0x7
}, {
    'NAME': "B_STAND",
    'ID': 0x20,
    'INDEX': [
        [0x2d],
        [0x1d]
    ]
}, {
    'NAME': "B_DOWN",
    'ID': 0x21,
    'INDEX': [
        [0x2c],
        [0x1c]
    ]
}, {
    'NAME': "B_RUN0",
    'ID': 0x22,
    'INDEX': [
        [0x29],
        [0x19]
    ]
}, {
    'NAME': "B_RUN1",
    'ID': 0x23,
    'INDEX': [
        [0x2a],
        [0x1a]
    ]
}, {
    'NAME': "B_RUN2",
    'ID': 0x24,
    'INDEX': [
        [0x2b],
        [0x1b]
    ]
}, {
    'NAME': "B_SLIDE",
    'ID': 0x25,
    'INDEX': [
        [0x28],
        [0x18]
    ]
}, {
    'NAME': "B_FALL",
    'ID': 0x26,
    'INDEX': [
        [0x27],
        [0x17]
    ]
}, {
    'NAME': "B_CLIMB0",
    'ID': 0x27,
    'INDEX': [
        [0x25],
        [0x15]
    ]
}, {
    'NAME': "B_CLIMB1",
    'ID': 0x28,
    'INDEX': [
        [0x26],
        [0x16]
    ]
}, {
    'NAME': "B_TRANSFORM",
    'ID': 0x29,
    'INDEX': [
        [0x2e],
        [0x1e]
    ]
}, {
    'NAME': "F_STAND",
    'ID': 0x40,
    'INDEX': [
        [0x4d],
        [0x3d]
    ]
}, {
    'NAME': "F_DOWN",
    'ID': 0x41,
    'INDEX': [
        [0x4c],
        [0x3c]
    ]
}, {
    'NAME': "F_RUN0",
    'ID': 0x42,
    'INDEX': [
        [0x49],
        [0x39]
    ]
}, {
    'NAME': "F_RUN1",
    'ID': 0x43,
    'INDEX': [
        [0x4a],
        [0x3a]
    ]
}, {
    'NAME': "F_RUN2",
    'ID': 0x44,
    'INDEX': [
        [0x4b],
        [0x3b]
    ]
}, {
    'NAME': "F_SLIDE",
    'ID': 0x45,
    'INDEX': [
        [0x48],
        [0x38]
    ]
}, {
    'NAME': "F_FALL",
    'ID': 0x46,
    'INDEX': [
        [0x47],
        [0x37]
    ]
}, {
    'NAME': "F_CLIMB0",
    'ID': 0x47,
    'INDEX': [
        [0x45],
        [0x35]
    ]
}, {
    'NAME': "F_CLIMB1",
    'ID': 0x48,
    'INDEX': [
        [0x46],
        [0x36]
    ]
}, {
    'NAME': "F_ATTACK",
    'ID': 0x49,
    'INDEX': [
        [0x4f],
        [0x3f]
    ]
}, {
    'NAME': "F_TRANSFORM",
    'ID': 0x50,
    'INDEX': [
        [0x4e],
        [0x3e]
    ]
}, {
    'NAME': "G_DEAD",
    'ID': 0x60,
    'INDEX': 0x0
}, {
    'NAME': "G_HIDE",
    'ID': 0x70,
    'INDEX': 0xe
}];
for (var _0x4f3eec = 0x0; _0x4f3eec < PlayerObject.SPRITE_LIST.length; _0x4f3eec++) PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x4f3eec].NAME] = PlayerObject.SPRITE_LIST[_0x4f3eec], PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x4f3eec].ID] = PlayerObject.SPRITE_LIST[_0x4f3eec];
PlayerObject.SNAME = {};
PlayerObject.SNAME.STAND = "STAND";
PlayerObject.SNAME.DOWN = "DOWN";
PlayerObject.SNAME.RUN = "RUN";
PlayerObject.SNAME.SLIDE = "SLIDE";
PlayerObject.SNAME.FALL = "FALL";
PlayerObject.SNAME.POLE = "POLE";
PlayerObject.SNAME.CLIMB = "CLIMB";
PlayerObject.SNAME.ATTACK = "ATTACK";
PlayerObject.SNAME.TRANSFORM = "TRANSFORM";
PlayerObject.SNAME.DEAD = "DEAD";
PlayerObject.SNAME.HIDE = "HIDE";
PlayerObject.SNAME.GHOST = "GHOST";
PlayerObject.SNAME.DEADGHOST = "DEADGHOST";
var _0x1854f6 = vec2.make(0.9, 0.95),
    _0x5f13bd = vec2.make(0.9, 1.9);
PlayerObject.STATE = [{
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x0,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x1,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x2,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_RUN2, PlayerObject.SPRITE.S_RUN1, PlayerObject.SPRITE.S_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x3,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x4,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_FALL]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x5,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_STAND]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x6,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x7,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.S_CLIMB0, PlayerObject.SPRITE.S_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x20,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x21,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.B_DOWN]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x22,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_RUN2, PlayerObject.SPRITE.B_RUN1, PlayerObject.SPRITE.B_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x23,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x24,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_FALL]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x25,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.B_TRANSFORM]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x26,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_CLIMB0]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x27,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.B_CLIMB0, PlayerObject.SPRITE.B_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.STAND,
    'ID': 0x40,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_STAND]
}, {
    'NAME': PlayerObject.SNAME.DOWN,
    'ID': 0x41,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.F_DOWN]
}, {
    'NAME': PlayerObject.SNAME.RUN,
    'ID': 0x42,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_RUN2, PlayerObject.SPRITE.F_RUN1, PlayerObject.SPRITE.F_RUN0]
}, {
    'NAME': PlayerObject.SNAME.SLIDE,
    'ID': 0x43,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_SLIDE]
}, {
    'NAME': PlayerObject.SNAME.FALL,
    'ID': 0x44,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_FALL]
}, {
    'NAME': PlayerObject.SNAME.ATTACK,
    'ID': 0x45,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_ATTACK]
}, {
    'NAME': PlayerObject.SNAME.TRANSFORM,
    'ID': 0x46,
    'DIM': _0x1854f6,
    'SPRITE': [PlayerObject.SPRITE.F_TRANSFORM]
}, {
    'NAME': PlayerObject.SNAME.POLE,
    'ID': 0x47,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_CLIMB0]
}, {
    'NAME': PlayerObject.SNAME.CLIMB,
    'ID': 0x48,
    'DIM': _0x5f13bd,
    'SPRITE': [PlayerObject.SPRITE.F_CLIMB0, PlayerObject.SPRITE.F_CLIMB1]
}, {
    'NAME': PlayerObject.SNAME.DEAD,
    'DIM': _0x1854f6,
    'ID': 0x60,
    'SPRITE': [PlayerObject.SPRITE.G_DEAD]
}, {
    'NAME': PlayerObject.SNAME.HIDE,
    'DIM': _0x1854f6,
    'ID': 0x70,
    'SPRITE': [PlayerObject.SPRITE.G_HIDE]
}, {
    'NAME': PlayerObject.SNAME.GHOST,
    'DIM': _0x1854f6,
    'ID': 0xff,
    'SPRITE': []
}, {
    'NAME': PlayerObject.SNAME.DEADGHOST,
    'DIM': _0x1854f6,
    'ID': 0xfe,
    'SPRITE': [PlayerObject.SPRITE.G_DEAD]
}];
PlayerObject.prototype.update = function(_0x438e58) {
    this.dead || this.garbage || (this.setState(PlayerObject.SNAME.GHOST), this.level = _0x438e58.level, this.zone = _0x438e58.zone, this.pos = _0x438e58.pos, this.sprite = PlayerObject.SPRITE[_0x438e58.sprite], this.reverse = _0x438e58.reverse);
};
PlayerObject.prototype.trigger = function(_0xc69ab0) {
    switch (_0xc69ab0) {
        case 0x1:
            this.attack();
            break;
        case 0x2:
            this.star();
    }
};
PlayerObject.prototype.step = function() {
    0x0 < this.starTimer ? this.starTimer-- : this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0);
    if (this.isState(PlayerObject.SNAME.GHOST)) this.sound();
    else if (!this.isState(PlayerObject.SNAME.HIDE))
        if (this.isState(PlayerObject.SNAME.POLE))
            if (0x0 < this.poleTimer && !this.poleWait) this.poleTimer--;
            else {
                this.poleSound || (this.poleSound = !0x0, this.play("sfx/flagpole.wav", 0x1, 0x0));
                if (!this.poleWait)
                    if (0x0 >= this.poleTimer && this.autoTarget) this.setState(PlayerObject.SNAME.STAND);
                    else {
                        for (var _0x204729 = vec2.add(this.pos, vec2.make(0x0, -0.15)), _0x4374b4 = vec2.make(this.pos.x, this.pos.y - 0.15), _0x2571a4 = vec2.make(this.dim.x, this.dim.y + 0.15), _0x4374b4 = this.game.world.getZone(this.level, this.zone).getTiles(_0x4374b4, _0x2571a4), _0x2571a4 = vec2.make(0x1, 0x1), _0x5b4e14 = !0x1, _0x5443e9 = 0x0; _0x5443e9 < _0x4374b4.length; _0x5443e9++) {
                            var _0x2274e6 = _0x4374b4[_0x5443e9];
                            if (squar.intersection(_0x2274e6.pos, _0x2571a4, _0x204729, this.dim) && _0x2274e6.definition.COLLIDE) {
                                _0x5b4e14 = !0x0;
                                break;
                            }
                        }
                        _0x5b4e14 ? (this.poleTimer = 0xf, this.autoTarget = vec2.add(_0x204729, PlayerObject.LEVEL_END_MOVE_OFF), this.poleWait = !0x0) : this.pos = _0x204729;
                    }
                _0x204729 = this.game.getFlag(this.level, this.zone);
                _0x204729.pos.y - 0.15 >= this.pos.y ? _0x204729.pos.y -= 0.15 : (_0x204729.pos.y = this.pos.y, this.poleWait = !0x1);
            }
    else if (this.isState(PlayerObject.SNAME.RUN) ? this.anim += Math.max(0.5, Math.abs(0x5 * this.moveSpeed)) : this.anim++, this.sprite = this.state.SPRITE[parseInt(parseInt(this.anim) / PlayerObject.ANIMATION_RATE) % this.state.SPRITE.length], this.isState(PlayerObject.SNAME.CLIMB)) this.pos.y += PlayerObject.CLIMB_SPEED, this.pos.y >= this.game.world.getZone(this.level, this.zone).dimensions().y && (this.warp(this.vineWarp), this.setState(PlayerObject.SNAME.FALL));
    else if (this.isState(PlayerObject.SNAME.DEAD) || this.isState(PlayerObject.SNAME.DEADGHOST)) 0x0 < this.deadFreezeTimer ? this.deadFreezeTimer-- : 0x0 < this.deadTimer ? (this.deadTimer--, this.pos.y += this.fallSpeed, this.fallSpeed = Math.max(this.fallSpeed - 0.085, -0.45)) : this.destroy();
    else if (this.isState(PlayerObject.SNAME.TRANSFORM))
        if (0x0 < --this.tfmTimer) switch (_0x204729 = parseInt(this.anim / PlayerObject.TRANSFORM_ANIMATION_RATE) % 0x3, _0x4374b4 = this.power > this.tfmTarget ? this.power : this.tfmTarget, _0x204729) {
            case 0x0:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).SPRITE[0x0];
                break;
            case 0x1:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.TRANSFORM, _0x4374b4).SPRITE[0x0];
                break;
            case 0x2:
                this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.tfmTarget).SPRITE[0x0];
        } else this.power = this.tfmTarget, this.tfmTarget = -0x1, this.setState(PlayerObject.SNAME.STAND), this.collisionTest(this.pos, this.dim) && this.setState(PlayerObject.SNAME.DOWN), this.damageTimer = PlayerObject.DAMAGE_TIME;
        else if (0x0 < this.pipeDelay) this.pipeDelay--;
    else if (0x0 < this.pipeTimer && 0x0 >= this.pipeDelay) {
        0x1e <= this.pipeTimer && this.play("sfx/pipe.wav", 0x1, 0.04);
        switch (this.pipeDir) {
            case 0x1:
                this.pos.y += 0.06;
                break;
            case 0x2:
                this.pos.y -= 0.06;
                break;
            case 0x3:
                this.pos.x -= 0.06;
                break;
            case 0x4:
                this.pos.x += 0.06;
        }
        0x1 === --this.pipeTimer && this.pipeWarp && (this.pipeDelay = this.pipeDelayLength);
        if (0x0 >= this.pipeTimer && this.pipeWarp) {
            this.warp(this.pipeWarp);
            this.weedeat();
            this.pipeWarp = void 0x0;
            switch (this.pipeExt) {
                case 0x1:
                    this.pos.y -= 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = vec2.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 0x2:
                    this.pos.y += 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = vec2.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 0x3:
                    this.pos.x -= 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                case 0x4:
                    this.pos.x += 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                default:
                    return;
            }
            this.pipeTimer = 0x1e;
            this.pipeDir = this.pipeExt;
            this.pipeDelay = this.pipeDelayLength;
        }
    } else this.lastPos = this.pos, 0x0 < this.damageTimer && this.damageTimer--, this.attackCharge < PlayerObject.MAX_CHARGE && this.attackCharge++, 0x0 < this.attackTimer && this.attackTimer--, this.autoTarget && this.autoMove(), this.control(), this.physics(), this.interaction(), this.arrow(), this.sound(), 0x0 > this.pos.y && this.kill();
};
PlayerObject.prototype.input = function(_0x3265cb, _0x2ea9a1, _0xff23c0) {
    this.btnD = _0x3265cb;
    this.btnA = _0x2ea9a1;
    this.btnB = _0xff23c0;
};
PlayerObject.prototype.autoMove = function() {
    this.btnD = [0x0, 0x0];
    this.btnB = this.btnA = !0x1;
    0.1 <= Math.abs(this.pos.x - this.autoTarget.x) ? this.btnD = [0x0 >= this.pos.x - this.autoTarget.x ? 0x1 : -0x1, 0x0] : 0.01 > Math.abs(this.moveSpeed) && (this.btnA = -0.5 > this.pos.y - this.autoTarget.y);
};
PlayerObject.prototype.control = function() {
    this.grounded && (this.btnBg = this.btnB);
    if (this.isState(PlayerObject.SNAME.DOWN) && this.collisionTest(this.pos, this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).DIM)) - 0x1 !== this.btnD[0x1] && (this.moveSpeed = 0.5 * (this.moveSpeed + PlayerObject.STUCK_SLIDE_SPEED)), this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0x0);
    else {
        0x0 !== this.btnD[0x0] ? (0.01 < Math.abs(this.moveSpeed) && !(0x0 <= this.btnD[0x0] ^ 0x0 > this.moveSpeed) ? (this.moveSpeed += PlayerObject.MOVE_SPEED_DECEL * this.btnD[0x0], this.setState(PlayerObject.SNAME.SLIDE)) : (this.moveSpeed = this.btnD[0x0] * Math.min(Math.abs(this.moveSpeed) + 0.0125, this.btnBg ? 0.315 : 0.215), this.setState(PlayerObject.SNAME.RUN)), this.grounded && (this.reverse = 0x0 <= this.btnD[0x0])) : (0.01 < Math.abs(this.moveSpeed) ? (this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0x0), this.setState(PlayerObject.SNAME.RUN)) : (this.moveSpeed = 0x0, this.setState(PlayerObject.SNAME.STAND)), -0x1 === this.btnD[0x1] && this.setState(PlayerObject.SNAME.DOWN));
        for (var _0x348a95 = this.isSpring ? 0xe : 0x7, _0x32b03a = this.isSpring ? PlayerObject.SPRING_LENGTH_MIN : this.isBounce ? PlayerObject.BOUNCE_LENGTH_MIN : PlayerObject.JUMP_LENGTH_MIN, _0x1f372a = 0x0; _0x1f372a < PlayerObject.JUMP_SPEED_INC_THRESHOLD.length && Math.abs(this.moveSpeed) >= PlayerObject.JUMP_SPEED_INC_THRESHOLD[_0x1f372a]; _0x1f372a++) _0x348a95++;
        this.btnA ? (this.grounded && (this.jumping = 0x0, this.play(0x0 < this.power ? "sfx/jump1.wav" : "sfx/jump0.wav", 0.7, 0.04)), this.jumping > _0x348a95 && (this.jumping = -0x1)) : this.jumping > _0x32b03a && (this.jumping = -0x1);
        this.grounded || this.setState(PlayerObject.SNAME.FALL);
        this.btnB && !this.btnBde && 0x2 === this.power && !this.isState(PlayerObject.SNAME.DOWN) && !this.isState(PlayerObject.SNAME.SLIDE) && 0x1 > this.attackTimer && this.attackCharge >= PlayerObject.ATTACK_CHARGE && (this.attack(), this.game.out.push(PLAYER_OBJECT_EVENT.encode(0x1)));
        this.btnBde = this.btnB;
        0x0 < this.attackTimer && 0x2 === this.power && (this.isState(PlayerObject.SNAME.STAND) || this.isState(PlayerObject.SNAME.RUN)) && this.setState(PlayerObject.SNAME.ATTACK);
    }
};
PlayerObject.prototype.physics = function() {
    -0x1 !== this.jumping ? (this.fallSpeed = 0.45 - 0.005 * this.jumping, this.jumping++, this.grounded = !0x1) : (this.isSpring = this.isBounce = !0x1, this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - 0.085, -0.45));
    for (var _0x3557f3 = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), _0x1eb98f = vec2.make(this.pos.x + Math.min(0x0, this.moveSpeed), this.pos.y + Math.min(0x0, this.fallSpeed)), _0x4a868a = vec2.make(this.dim.x + Math.max(0x0, this.moveSpeed), this.dim.y + Math.max(0x0, this.fallSpeed)), _0x1eb98f = this.game.world.getZone(this.level, this.zone).getTiles(_0x1eb98f, _0x4a868a), _0x3ed246 = this.game.getPlatforms(), _0x4a868a = vec2.make(0x1, 0x1), _0x323cac = !0x1, _0x38bdf2 = [], _0x1c8b0f = [], _0x2ab9e0 = [], _0x320504 = [], _0x55b3d7 = [], _0x1544bb, _0x5593b0 = 0x0; _0x5593b0 < _0x1eb98f.length; _0x5593b0++) {
        var _0x1a0728 = _0x1eb98f[_0x5593b0];
        if (_0x1a0728.definition.COLLIDE)
            if (_0x1a0728.definition.HIDDEN) _0x38bdf2.push(_0x1a0728);
            else if (squar.intersection(_0x1a0728.pos, _0x4a868a, _0x3557f3, this.dim) || squar.intersection(_0x1a0728.pos, _0x4a868a, this.pos, this.dim)) 0.01 < Math.abs(this.moveSpeed) && this.grounded && this.pos.y <= _0x1a0728.pos.y && _0x2ab9e0.push(_0x1a0728), _0x38bdf2.push(_0x1a0728);
    }
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x3ed246.length; _0x5593b0++) _0x1a0728 = _0x3ed246[_0x5593b0], squar.intersection(_0x1a0728.pos, _0x1a0728.dim, _0x3557f3, this.dim) && _0x55b3d7.push(_0x1a0728);
    _0x3ed246 = vec2.make(_0x3557f3.x, this.pos.y);
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x38bdf2.length; _0x5593b0++) _0x1a0728 = _0x38bdf2[_0x5593b0], !_0x1a0728.definition.HIDDEN && squar.intersection(_0x1a0728.pos, _0x4a868a, _0x3ed246, this.dim) && (_0x3ed246.x = _0x3ed246.x + 0.5 * this.dim.x < _0x1a0728.pos.x + 0.5 * _0x4a868a.x ? _0x1a0728.pos.x - this.dim.x : _0x1a0728.pos.x + _0x4a868a.x, this.moveSpeed *= 0.33);
    _0x3557f3.x = _0x3ed246.x;
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x38bdf2.length; _0x5593b0++) _0x1a0728 = _0x38bdf2[_0x5593b0], squar.intersection(_0x1a0728.pos, _0x4a868a, _0x3557f3, this.dim) && (this.fallSpeed > PlayerObject.BLOCK_BUMP_THRESHOLD && _0x320504.push(_0x1a0728), 0x0 > this.fallSpeed && this.pos.y >= _0x1a0728.pos.y && _0x1c8b0f.push(_0x1a0728));
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x38bdf2.length; _0x5593b0++) _0x1a0728 = _0x38bdf2[_0x5593b0], squar.intersection(_0x1a0728.pos, _0x4a868a, _0x3557f3, this.dim) && (this.pos.y >= _0x3557f3.y ? _0x1a0728.definition.HIDDEN || (_0x3557f3.y = _0x1a0728.pos.y + _0x4a868a.y, this.fallSpeed = 0x0, _0x323cac = !0x0) : (_0x3557f3.y = _0x1a0728.pos.y - this.dim.y, this.fallSpeed = 0x0));
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x55b3d7.length; _0x5593b0++)
        if (_0x1a0728 = _0x55b3d7[_0x5593b0], this.pos.y >= _0x3557f3.y && _0x1a0728.pos.y + _0x1a0728.dim.y - this.pos.y < PlayerObject.PLATFORM_SNAP_DIST) {
            _0x3557f3.y = _0x1a0728.pos.y + _0x1a0728.dim.y;
            _0x323cac = !0x0;
            _0x1544bb = _0x1a0728;
            break;
        }
    this.grounded = _0x323cac;
    this.pos = _0x3557f3;
    _0x1544bb && _0x1544bb.riding(this);
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x1eb98f.length; _0x5593b0++) _0x1a0728 = _0x1eb98f[_0x5593b0], squar.intersection(_0x1a0728.pos, _0x4a868a, _0x3557f3, this.dim) && _0x1a0728.definition.TRIGGER(this.game, this.pid, _0x1a0728, this.level, this.zone, _0x1a0728.pos.x, _0x1a0728.pos.y, _0x3b5639.TRIGGER.TYPE.TOUCH);
    if (this.isState(PlayerObject.SNAME.DOWN) && 0.05 > this.moveSpeed)
        for (_0x5593b0 = 0x0; _0x5593b0 < _0x1c8b0f.length; _0x5593b0++) _0x1a0728 = _0x1c8b0f[_0x5593b0], _0x1a0728.definition.TRIGGER(this.game, this.pid, _0x1a0728, this.level, this.zone, _0x1a0728.pos.x, _0x1a0728.pos.y, _0x3b5639.TRIGGER.TYPE.DOWN);
    if (this.isState(PlayerObject.SNAME.RUN))
        for (_0x5593b0 = 0x0; _0x5593b0 < _0x2ab9e0.length; _0x5593b0++) _0x1a0728 = _0x2ab9e0[_0x5593b0], _0x1a0728.definition.TRIGGER(this.game, this.pid, _0x1a0728, this.level, this.zone, _0x1a0728.pos.x, _0x1a0728.pos.y, _0x3b5639.TRIGGER.TYPE.PUSH);
    for (_0x5593b0 = 0x0; _0x5593b0 < _0x320504.length; _0x5593b0++) _0x1a0728 = _0x320504[_0x5593b0], _0x1a0728.definition.TRIGGER(this.game, this.pid, _0x1a0728, this.level, this.zone, _0x1a0728.pos.x, _0x1a0728.pos.y, 0x0 < this.power ? _0x3b5639.TRIGGER.TYPE.BIG_BUMP : _0x3b5639.TRIGGER.TYPE.SMALL_BUMP), this.jumping = -0x1, this.fallSpeed = -PlayerObject.BLOCK_BUMP_THRESHOLD;
};
PlayerObject.prototype.collisionTest = function(_0x2b94c4, _0x365a52) {
    for (var _0x348bab = vec2.make(0x1, 0x1), _0x5bcbfb = this.game.world.getZone(this.level, this.zone).getTiles(_0x2b94c4, _0x365a52), _0x647699 = 0x0; _0x647699 < _0x5bcbfb.length; _0x647699++) {
        var _0x227263 = _0x5bcbfb[_0x647699];
        if (_0x227263.definition.COLLIDE && squar.intersection(_0x227263.pos, _0x348bab, _0x2b94c4, _0x365a52)) return !0x0;
    }
    return !0x1;
};
PlayerObject.prototype.interaction = function() {
    for (var _0x22f6c7 = 0x0; _0x22f6c7 < this.game.objects.length; _0x22f6c7++) {
        var _0x477778 = this.game.objects[_0x22f6c7];
        _0x477778 !== this && !this.dead && _0x477778.level === this.level && _0x477778.zone === this.zone && _0x477778.isTangible() && squar.intersection(_0x477778.pos, _0x477778.dim, this.pos, this.dim) && (0x0 < this.starTimer && _0x477778.bonk && (_0x477778.bonk(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(_0x477778.level, _0x477778.zone, _0x477778.oid, 0x1))), _0x477778 instanceof PlayerObject && 0x0 < _0x477778.starTimer && !this.autoTarget && (this.damage(_0x477778), this.dead && this.game.out.push(PLAYER_KILL_EVENT.encode(_0x477778.pid))), this.lastPos.y > _0x477778.pos.y + 0.66 * _0x477778.dim.y - Math.max(0x0, _0x477778.fallSpeed) ? _0x477778.playerStomp && _0x477778.playerStomp(this) : this.lastPos.y < _0x477778.pos.y ? _0x477778.playerBump && _0x477778.playerBump(this) : _0x477778.playerCollide && _0x477778.playerCollide(this));
    }
};
PlayerObject.prototype.arrow = function() {
    for (var _0x8e07c9 = 0x0, _0x515633 = 0x0; _0x515633 < this.game.objects.length; _0x515633++) {
        var _0x4e02ea = this.game.objects[_0x515633];
        _0x4e02ea !== this && _0x4e02ea instanceof PlayerObject && _0x4e02ea.level === this.level && _0x4e02ea.zone === this.zone && (_0x8e07c9 += 0x1 - Math.min(PlayerObject.ARROW_RAD_OUT, Math.max(0x0, vec2.distance(this.pos, _0x4e02ea.pos) - PlayerObject.ARROW_RAD_IN)) / PlayerObject.ARROW_RAD_OUT);
    }
    this.arrowFade = Math.min(PlayerObject.ARROW_THRESHOLD_MAX, Math.max(0x0, _0x8e07c9 - PlayerObject.ARROW_THRESHOLD_MIN)) / PlayerObject.ARROW_THRESHOLD_MAX;
};
PlayerObject.prototype.sound = _0x2b132.prototype.sound;
PlayerObject.prototype.attack = function() {
    this.attackTimer = PlayerObject.ATTACK_DELAY;
    this.attackCharge -= PlayerObject.ATTACK_CHARGE;
    var _0x56c306 = this.reverse ? vec2.add(this.pos, PlayerObject.PROJ_OFFSET) : vec2.add(this.pos, vec2.multiply(PlayerObject.PROJ_OFFSET, vec2.make(-0x1, 0x1)));
    this.game.createObject(_0xae11c9.ID, this.level, this.zone, _0x56c306, [this.reverse, this.pid]);
    this.play("sfx/fireball.wav", 0x1, 0.04);
};
PlayerObject.prototype.bounce = function() {
    this.jumping = 0x0;
    this.isBounce = !0x0;
};
PlayerObject.prototype.damage = function(_0x31ed98) {
    0x0 < this.damageTimer || 0x0 < this.starTimer || this.isState(PlayerObject.SNAME.TRANSFORM) || this.isState(PlayerObject.SNAME.CLIMB) || this.isState(PlayerObject.SNAME.POLE) || this.pipeWarp || 0x0 < this.pipeTimer || 0x0 < this.pipeDelay || this.autoTarget || (0x0 < this.power ? (this.tfm(0x0), this.damageTimer = PlayerObject.DAMAGE_TIME) : this.kill());
};
PlayerObject.prototype.invuln = function() {
    this.damageTimer = PlayerObject.DAMAGE_TIME;
};
PlayerObject.prototype.powerup = function(_0xa352e0) {
    _0xa352e0 instanceof MushroomObject && 0x1 > this.power ? (this.tfm(0x1), this.rate = 0x73) : _0xa352e0 instanceof FlowerObject && 0x2 > this.power ? (this.tfm(0x2), this.rate = 0x71) : _0xa352e0 instanceof StarObject ? (this.starTimer !== 0 || (this.star(), this.game.out.push(PLAYER_OBJECT_EVENT.encode(0x2)), this.rate = 0x43)) : _0xa352e0 instanceof LifeObject ? this.game.lifeage() : _0xa352e0 instanceof CoinObject ? this.game.coinage() : _0xa352e0 instanceof AxeObject ? this.game.out.push(PLAYER_RESULT_REQUEST.encode()) : _0xa352e0 instanceof _0x2aa8a6 && this.damage(_0xa352e0);
};
PlayerObject.prototype.axe = function(_0x47b17d) {
    (_0x47b17d = this.game.getText(this.level, this.zone, _0x47b17d.toString())) || (_0x47b17d = this.game.getText(this.level, this.zone, "too bad"));
    _0x47b17d && (this.autoTarget = vec2.add(_0x47b17d.pos, vec2.make(0x0, -1.6)));
};
PlayerObject.prototype.star = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0);
    this.starTimer = PlayerObject.STAR_LENGTH;
    (this.starMusic = this.play("music/star.mp3", 0x1, 0.04)) && this.starMusic.loop(!0x0);
};
PlayerObject.prototype.tfm = function(_0x39d852) {
    this.power < _0x39d852 ? this.play("sfx/powerup.wav", 0x1, 0.04) : this.play("sfx/pipe.wav", 0x1, 0.04);
    this.tfmTarget = _0x39d852;
    this.tfmTimer = PlayerObject.TRANSFORM_TIME;
    this.setState(PlayerObject.SNAME.TRANSFORM);
};
PlayerObject.prototype.warp = function(_0x881c58) {
    if (_0x881c58 = this.game.world.getLevel(this.level).getWarp(_0x881c58)) this.level = _0x881c58.level, this.zone = _0x881c58.zone, this.pos = _0x881c58.pos, this.autoTarget = void 0x0, this.grounded = !0x1;
};
PlayerObject.prototype.pipe = function(_0x28385c, _0x3a307a, _0x545f04) {
    0x1 !== _0x28385c && 0x2 !== _0x28385c || this.setState(PlayerObject.SNAME.STAND);
    var _0x25667b = this.game.world.getLevel(this.level).getWarp(_0x3a307a);
    this.pipeWarp = _0x3a307a;
    this.pipeTimer = 0x1e;
    this.pipeDir = _0x28385c;
    this.pipeExt = _0x25667b.data;
    this.pipeDelayLength = _0x545f04;
};
PlayerObject.prototype.weedeat = function() {
    for (var _0x18acbf = 0x0; _0x18acbf < this.game.objects.length; _0x18acbf++) {
        var _0x1e852c = this.game.objects[_0x18acbf];
        _0x1e852c instanceof _0x70c5e6 && !_0x1e852c.dead && vec2.distance(this.pos, _0x1e852c.pos) < PlayerObject.WEED_EAT_RADIUS && _0x1e852c.destroy();
    }
};
PlayerObject.prototype.pole = function(_0x4b8c41) {
    this.autoTarget || (this.setState(PlayerObject.SNAME.POLE), this.fallSpeed = this.moveSpeed = 0x0, this.pos.x = _0x4b8c41.x, this.poleTimer = 0xf, this.poleSound = !0x1);
};
PlayerObject.prototype.vine = function(_0x5cacf9, _0x960433) {
    this.setState(PlayerObject.SNAME.CLIMB);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.pos.x = _0x5cacf9.x;
    this.vineWarp = _0x960433;
};
PlayerObject.prototype.hide = function() {
    this.setState(PlayerObject.SNAME.HIDE);
};
PlayerObject.prototype.show = function() {
    this.setState(PlayerObject.SNAME.STAND);
};
PlayerObject.prototype.kill = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0, this.starTimer = 0x0);
    this.isState(PlayerObject.SNAME.GHOST) ? this.setState(PlayerObject.SNAME.DEADGHOST) : this.setState(PlayerObject.SNAME.DEAD);
    this.dead = !0x0;
    this.deadTimer = PlayerObject.DEAD_TIME;
    this.deadFreezeTimer = PlayerObject.DEAD_FREEZE_TIME;
    this.fallSpeed = PlayerObject.DEAD_UP_FORCE;
    this.game.getPlayer() === this && this.game.out.push(KILL_PLAYER_OBJECT.encode());
};
PlayerObject.prototype.destroy = function() {
    this.starMusic && (this.starMusic.stop(), this.starMusic = void 0x0, this.starTimer = 0x0);
    _0x2b132.prototype.destroy.call(this);
};
PlayerObject.prototype.isTangible = function() {
    return _0x2b132.prototype.isTangible.call(this) && !this.isState(PlayerObject.SNAME.HIDE) && 0x0 >= this.pipeDelay;
};
PlayerObject.prototype.setState = function(_0x4a1a86) {
    _0x4a1a86 = this.getStateByPowerIndex(_0x4a1a86, this.power);
    _0x4a1a86 !== this.state && (this.state = _0x4a1a86, 0x0 < _0x4a1a86.SPRITE.length && (this.sprite = _0x4a1a86.SPRITE[0x0]), this.dim = _0x4a1a86.DIM, this.anim = 0x0);
};
PlayerObject.prototype.getStateByPowerIndex = function(_0x5e208d, _0x21eb9d) {
    for (var _0x42ee49 = 0x0; _0x42ee49 < PlayerObject.STATE.length; _0x42ee49++) {
        var _0x312ab9 = PlayerObject.STATE[_0x42ee49];
        if (_0x312ab9.NAME === _0x5e208d && (_0x312ab9.ID >= PlayerObject.GENERIC_INDEX || _0x312ab9.ID >= PlayerObject.POWER_INDEX_SIZE * _0x21eb9d && _0x312ab9.ID < PlayerObject.POWER_INDEX_SIZE * (_0x21eb9d + 0x1))) return _0x312ab9;
    }
};
PlayerObject.prototype.isState = function(_0xbe936c) {
    return _0xbe936c === this.state.NAME;
};
PlayerObject.prototype.draw = function(_0x10466d) {
    if (!(this.isState(PlayerObject.SNAME.HIDE) || 0x0 < this.pipeDelay || 0x0 < this.damageTimer && 0x1 < this.damageTimer % 0x3)) {
        var _0x4d6ed1;
        _0x4d6ed1 = 0x0 < this.starTimer ? 0x2 : this.isState(PlayerObject.SNAME.GHOST) || this.isState(PlayerObject.SNAME.DEADGHOST) ? 0x1 : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x463b21 = this.sprite.INDEX, _0x4e64a5 = 0x0; _0x4e64a5 < _0x463b21.length; _0x4e64a5++)
                for (var _0x876c5d = 0x0; _0x876c5d < _0x463b21[_0x4e64a5].length; _0x876c5d++) 0x2 === _0x4d6ed1 && _0x10466d.push({
                    'pos': vec2.add(vec2.add(this.pos, PlayerObject.DIM_OFFSET), vec2.make(_0x876c5d, _0x4e64a5)),
                    'reverse': this.reverse,
                    'index': _0x463b21[_0x4e64a5][_0x876c5d],
                    'mode': 0x0
                }), _0x10466d.push({
                    'pos': vec2.add(vec2.add(this.pos, PlayerObject.DIM_OFFSET), vec2.make(_0x876c5d, _0x4e64a5)),
                    'reverse': this.reverse,
                    'index': _0x463b21[_0x4e64a5][_0x876c5d],
                    'mode': _0x4d6ed1
                });
        else 0x2 === _0x4d6ed1 && _0x10466d.push({
            'pos': vec2.add(this.pos, PlayerObject.DIM_OFFSET),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        }), _0x10466d.push({
            'pos': vec2.add(this.pos, PlayerObject.DIM_OFFSET),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': _0x4d6ed1
        });
        0x0 < this.arrowFade && (_0x4d6ed1 = 0xa0 + parseInt(0x20 * this.arrowFade), _0x10466d.push({
            'pos': vec2.add(vec2.add(this.pos, vec2.make(0x0, this.dim.y)), PlayerObject.ARROW_OFFSET),
            'reverse': !0x1,
            'index': PlayerObject.ARROW_SPRITE,
            'mode': _0x4d6ed1
        }));
    }
};
PlayerObject.prototype.write = function(_0x20d883) {
    0x0 < this.arrowFade ? _0x20d883.push({
        'pos': vec2.add(vec2.add(this.pos, vec2.make(0x0, this.dim.y)), PlayerObject.TEXT_OFFSET),
        'size': PlayerObject.TEXT_SIZE,
        'color': "rgba(255,255,255," + this.arrowFade + ')',
        'text': PlayerObject.ARROW_TEXT
    }) : this.name && _0x20d883.push({
        'pos': vec2.add(vec2.add(this.pos, vec2.make(0x0, this.sprite.INDEX instanceof Array ? 0x2 : 0x1)), PlayerObject.TEAM_OFFSET),
        'size': PlayerObject.TEAM_SIZE,
        'color': PlayerObject.TEAM_COLOR,
        'text': this.name
    });
};
PlayerObject.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(PlayerObject);
"use strict";

function GoombaObject(_0x4f9a2f, _0x3d8684, _0x2ebb91, _0x1aced7, _0x32a76c, _0x2c5d13) {
    _0x2b132.call(this, _0x4f9a2f, _0x3d8684, _0x2ebb91, _0x1aced7);
    this.oid = _0x32a76c;
    this.variant = isNaN(parseInt(_0x2c5d13)) ? 0x0 : parseInt(_0x2c5d13);
    this.setState(GoombaObject.STATE.RUN);
    this.bonkTimer = this.deadTimer = this.anim = 0x0;
    this.dim = vec2.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.dir = !0x0;
    this.disable();
}
GoombaObject.ASYNC = !0x1;
GoombaObject.ID = 0x11;
GoombaObject.NAME = "GOOMBA";
GoombaObject.ANIMATION_RATE = 0x3;
GoombaObject.VARIANT_OFFSET = 0x50;
GoombaObject.ENABLE_FADE_TIME = 0xf;
GoombaObject.ENABLE_DIST = 0x1a;
GoombaObject.DEAD_TIME = 0x3c;
GoombaObject.BONK_TIME = 0x5a;
GoombaObject.BONK_IMP = vec2.make(0.25, 0.4);
GoombaObject.BONK_DECEL = 0.925;
GoombaObject.BONK_FALL_SPEED = 0.5;
GoombaObject.MOVE_SPEED_MAX = 0.075;
GoombaObject.FALL_SPEED_MAX = 0.35;
GoombaObject.FALL_SPEED_ACCEL = 0.085;
GoombaObject.SPRITE = {};
GoombaObject.SPRITE_LIST = [{
    'NAME': "RUN0",
    'ID': 0x0,
    'INDEX': 0xf
}, {
    'NAME': "RUN1",
    'ID': 0x1,
    'INDEX': 0x1f
}, {
    'NAME': "DEAD",
    'ID': 0x2,
    'INDEX': 0x2f
}];
for (_0x4f3eec = 0x0; _0x4f3eec < GoombaObject.SPRITE_LIST.length; _0x4f3eec++) GoombaObject.SPRITE[GoombaObject.SPRITE_LIST[_0x4f3eec].NAME] = GoombaObject.SPRITE_LIST[_0x4f3eec], GoombaObject.SPRITE[GoombaObject.SPRITE_LIST[_0x4f3eec].ID] = GoombaObject.SPRITE_LIST[_0x4f3eec];
GoombaObject.STATE = {};
GoombaObject.STATE_LIST = [{
    'NAME': "RUN",
    'ID': 0x0,
    'SPRITE': [GoombaObject.SPRITE.RUN0, GoombaObject.SPRITE.RUN1]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [GoombaObject.SPRITE.DEAD]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < GoombaObject.STATE_LIST.length; _0x4f3eec++) GoombaObject.STATE[GoombaObject.STATE_LIST[_0x4f3eec].NAME] = GoombaObject.STATE_LIST[_0x4f3eec], GoombaObject.STATE[GoombaObject.STATE_LIST[_0x4f3eec].ID] = GoombaObject.STATE_LIST[_0x4f3eec];
GoombaObject.prototype.update = function(_0x253d8f) {
    switch (_0x253d8f) {
        case 0x0:
            this.kill();
            break;
        case 0x1:
            this.bonk();
            break;
        case 0xa0:
            this.enable();
    }
};
GoombaObject.prototype.step = function() {
    this.disabled ? this.proximity() : (0x0 < this.disabledTimer && this.disabledTimer--, this.state === GoombaObject.STATE.BONK ? this.bonkTimer++ > GoombaObject.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= GoombaObject.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - GoombaObject.FALL_SPEED_ACCEL, -GoombaObject.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / GoombaObject.ANIMATION_RATE) % this.state.SPRITE.length], this.state === GoombaObject.STATE.DEAD ? this.deadTimer++ < GoombaObject.DEAD_TIME || this.destroy() : (this.control(), this.physics(), this.sound(), 0x0 > this.pos.y && this.destroy())));
};
GoombaObject.prototype.control = function() {
    this.moveSpeed = this.dir ? -GoombaObject.MOVE_SPEED_MAX : GoombaObject.MOVE_SPEED_MAX;
};
GoombaObject.prototype.physics = function() {
    this.grounded && (this.fallSpeed = 0x0);
    this.fallSpeed = Math.max(this.fallSpeed - GoombaObject.FALL_SPEED_ACCEL, -GoombaObject.FALL_SPEED_MAX);
    var _0x40186e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
        _0x23f853 = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        _0x49dfe2 = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x5b5fe7 = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x49dfe2 = this.game.world.getZone(this.level, this.zone).getTiles(_0x49dfe2, _0x5b5fe7),
        _0x5b5fe7 = vec2.make(0x1, 0x1),
        _0x1d4e2e = !0x1;
    this.grounded = !0x1;
    for (var _0x270e91 = 0x0; _0x270e91 < _0x49dfe2.length; _0x270e91++) {
        var _0x2fdd07 = _0x49dfe2[_0x270e91];
        _0x2fdd07.definition.COLLIDE && squar.intersection(_0x2fdd07.pos, _0x5b5fe7, _0x40186e, this.dim) && (this.pos.x <= _0x40186e.x && _0x40186e.x + this.dim.x > _0x2fdd07.pos.x ? (_0x40186e.x = _0x2fdd07.pos.x - this.dim.x, _0x23f853.x = _0x40186e.x, this.moveSpeed = 0x0, _0x1d4e2e = !0x0) : this.pos.x >= _0x40186e.x && _0x40186e.x < _0x2fdd07.pos.x + _0x5b5fe7.x && (_0x40186e.x = _0x2fdd07.pos.x + _0x5b5fe7.x, _0x23f853.x = _0x40186e.x, this.moveSpeed = 0x0, _0x1d4e2e = !0x0));
    }
    for (_0x270e91 = 0x0; _0x270e91 < _0x49dfe2.length; _0x270e91++) _0x2fdd07 = _0x49dfe2[_0x270e91], _0x2fdd07.definition.COLLIDE && squar.intersection(_0x2fdd07.pos, _0x5b5fe7, _0x23f853, this.dim) && (this.pos.y >= _0x23f853.y && _0x23f853.y < _0x2fdd07.pos.y + _0x5b5fe7.y ? (_0x23f853.y = _0x2fdd07.pos.y + _0x5b5fe7.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y <= _0x23f853.y && _0x23f853.y + this.dim.y > _0x2fdd07.pos.y && (_0x23f853.y = _0x2fdd07.pos.y - this.dim.y, this.fallSpeed = 0x0));
    this.pos = vec2.make(_0x40186e.x, _0x23f853.y);
    _0x1d4e2e && (this.dir = !this.dir);
};
GoombaObject.prototype.sound = _0x2b132.prototype.sound;
GoombaObject.prototype.proximity = function() {
    var _0x47fc6c = this.game.getPlayer();
    _0x47fc6c && !_0x47fc6c.dead && _0x47fc6c.level === this.level && _0x47fc6c.zone === this.zone && !this.proxHit && vec2.distance(_0x47fc6c.pos, this.pos) < GoombaObject.ENABLE_DIST && (this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
GoombaObject.prototype.enable = function() {
    this.disabled = !0x1;
    this.disabledTimer = GoombaObject.ENABLE_FADE_TIME;
};
GoombaObject.prototype.disable = function() {
    this.disabled = !0x0;
};
GoombaObject.prototype.damage = function(_0x2a150a) {
    this.dead || (this.bonk(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
GoombaObject.prototype.bonk = function() {
    this.dead || (this.setState(GoombaObject.STATE.BONK), this.moveSpeed = GoombaObject.BONK_IMP.x, this.fallSpeed = GoombaObject.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
GoombaObject.prototype.playerCollide = function(_0x4ebe42) {
    this.dead || this.garbage || _0x4ebe42.damage(this);
};
GoombaObject.prototype.playerStomp = function(_0x555954) {
    this.dead || this.garbage || (this.kill(), _0x555954.bounce(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x0)));
};
GoombaObject.prototype.playerBump = function(_0x4e1cbf) {
    this.dead || this.garbage || _0x4e1cbf.damage(this);
};
GoombaObject.prototype.kill = function() {
    this.dead = !0x0;
    this.setState(GoombaObject.STATE.DEAD);
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
GoombaObject.prototype.destroy = _0x2b132.prototype.destroy;
GoombaObject.prototype.isTangible = _0x2b132.prototype.isTangible;
GoombaObject.prototype.setState = function(_0x3a8691) {
    _0x3a8691 !== this.state && (this.state = _0x3a8691, 0x0 < _0x3a8691.SPRITE.length && (this.sprite = _0x3a8691.SPRITE[0x0]), this.anim = 0x0);
};
GoombaObject.prototype.draw = function(_0x3ed529) {
    if (!this.disabled) {
        var _0x36cdfb;
        _0x36cdfb = this.state === GoombaObject.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / GoombaObject.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x50473d = this.sprite.INDEX, _0x24d1cc = 0x0; _0x24d1cc < _0x50473d.length; _0x24d1cc++)
                for (var _0xe71d1c = 0x0; _0xe71d1c < _0x50473d[_0x24d1cc].length; _0xe71d1c++) {
                    var _0x2d7f7b = _0x50473d[_0x36cdfb ? _0x50473d.length - 0x1 - _0x24d1cc : _0x24d1cc][_0xe71d1c];
                    switch (this.variant) {
                        case 0x1:
                            _0x2d7f7b += GoombaObject.VARIANT_OFFSET;
                    }
                    _0x3ed529.push({
                        'pos': vec2.add(this.pos, vec2.make(_0xe71d1c, _0x24d1cc)),
                        'reverse': !this.dir,
                        'index': _0x2d7f7b,
                        'mode': _0x36cdfb
                    });
                } else {
                    _0x2d7f7b = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0x2d7f7b += GoombaObject.VARIANT_OFFSET;
                    }
                    _0x3ed529.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0x2d7f7b,
                        'mode': _0x36cdfb
                    });
                }
    }
};
GoombaObject.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(GoombaObject);
"use strict";

function _0x2b64bd(_0x3b9475, _0x412263, _0x32b9be, _0x5b6119, _0xe61fc0, _0x2646e7, _0x5a0bbf) {
    _0x2b132.call(this, _0x3b9475, _0x412263, _0x32b9be, _0x5b6119);
    this.oid = _0xe61fc0;
    this.variant = isNaN(parseInt(_0x5a0bbf)) ? 0x0 : parseInt(_0x5a0bbf);
    this.setState(parseInt(_0x2646e7) ? _0x2b64bd.STATE.FLY : _0x2b64bd.STATE.RUN);
    this.bonkTimer = this.anim = 0x0;
    this.dim = vec2.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.grounded = !0x1;
    this.jump = -0x1;
    this.disabled = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.immuneTimer = 0x0;
    this.dir = !0x0;
    this.disable();
}
_0x2b64bd.ASYNC = !0x1;
_0x2b64bd.ID = 0x12;
_0x2b64bd.NAME = "KOOPA";
_0x2b64bd.ANIMATION_RATE = 0x3;
_0x2b64bd.VARIANT_OFFSET = 0x20;
_0x2b64bd.ENABLE_FADE_TIME = 0xf;
_0x2b64bd.ENABLE_DIST = 0x1a;
_0x2b64bd.BONK_TIME = 0x5a;
_0x2b64bd.BONK_IMP = vec2.make(0.25, 0.4);
_0x2b64bd.BONK_DECEL = 0.925;
_0x2b64bd.BONK_FALL_SPEED = 0.5;
_0x2b64bd.PLAYER_IMMUNE_TIME = 0x6;
_0x2b64bd.MOVE_SPEED_MAX = 0.075;
_0x2b64bd.SHELL_MOVE_SPEED_MAX = 0.35;
_0x2b64bd.FALL_SPEED_MAX = 0.35;
_0x2b64bd.FALL_SPEED_ACCEL = 0.085;
_0x2b64bd.JUMP_LENGTH_MAX = 0x14;
_0x2b64bd.JUMP_DECEL = 0.025;
_0x2b64bd.TRANSFORM_TIME = 0xaf;
_0x2b64bd.TRANSFORM_THRESHOLD = 0x4b;
_0x2b64bd.SPRITE = {};
_0x2b64bd.SPRITE_LIST = [{
    'NAME': "FLY0",
    'ID': 0x0,
    'INDEX': [
        [0x68],
        [0x58]
    ]
}, {
    'NAME': "FLY1",
    'ID': 0x1,
    'INDEX': [
        [0x69],
        [0x59]
    ]
}, {
    'NAME': "RUN0",
    'ID': 0x2,
    'INDEX': [
        [0x66],
        [0x56]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x3,
    'INDEX': [
        [0x67],
        [0x57]
    ]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x4,
    'INDEX': 0x51
}, {
    'NAME': "SHELL",
    'ID': 0x5,
    'INDEX': 0x50
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2b64bd.SPRITE_LIST.length; _0x4f3eec++) _0x2b64bd.SPRITE[_0x2b64bd.SPRITE_LIST[_0x4f3eec].NAME] = _0x2b64bd.SPRITE_LIST[_0x4f3eec], _0x2b64bd.SPRITE[_0x2b64bd.SPRITE_LIST[_0x4f3eec].ID] = _0x2b64bd.SPRITE_LIST[_0x4f3eec];
_0x2b64bd.STATE = {};
_0x2b64bd.STATE_LIST = [{
    'NAME': "FLY",
    'ID': 0x0,
    'SPRITE': [_0x2b64bd.SPRITE.FLY0, _0x2b64bd.SPRITE.FLY1]
}, {
    'NAME': "RUN",
    'ID': 0x1,
    'SPRITE': [_0x2b64bd.SPRITE.RUN0, _0x2b64bd.SPRITE.RUN1]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x2,
    'SPRITE': [_0x2b64bd.SPRITE.SHELL, _0x2b64bd.SPRITE.TRANSFORM]
}, {
    'NAME': "SHELL",
    'ID': 0x3,
    'SPRITE': [_0x2b64bd.SPRITE.SHELL]
}, {
    'NAME': "SPIN",
    'ID': 0x4,
    'SPRITE': [_0x2b64bd.SPRITE.SHELL]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2b64bd.STATE_LIST.length; _0x4f3eec++) _0x2b64bd.STATE[_0x2b64bd.STATE_LIST[_0x4f3eec].NAME] = _0x2b64bd.STATE_LIST[_0x4f3eec], _0x2b64bd.STATE[_0x2b64bd.STATE_LIST[_0x4f3eec].ID] = _0x2b64bd.STATE_LIST[_0x4f3eec];
_0x2b64bd.prototype.update = function(_0x1c9055) {
    switch (_0x1c9055) {
        case 0x1:
            this.bonk();
            break;
        case 0x10:
            this.stomped(!0x0);
            break;
        case 0x11:
            this.stomped(!0x1);
            break;
        case 0xa0:
            this.enable();
    }
};
_0x2b64bd.prototype.step = function() {
    if (this.disabled) this.proximity();
    else if (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x2b64bd.STATE.BONK) this.bonkTimer++ > _0x2b64bd.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x2b64bd.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x2b64bd.FALL_SPEED_ACCEL, -_0x2b64bd.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / _0x2b64bd.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === _0x2b64bd.STATE.SHELL || this.state === _0x2b64bd.STATE.TRANSFORM) --this.transformTimer < _0x2b64bd.TRANSFORM_THRESHOLD && this.setState(_0x2b64bd.STATE.TRANSFORM), 0x0 >= this.transformTimer && this.setState(_0x2b64bd.STATE.RUN);
        0x0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0x0 > this.pos.y && this.destroy();
    }
};
_0x2b64bd.prototype.control = function() {
    if (this.state === _0x2b64bd.STATE.FLY) this.moveSpeed = this.dir ? -_0x2b64bd.MOVE_SPEED_MAX : _0x2b64bd.MOVE_SPEED_MAX, this.grounded && (this.jump = 0x0);
    else if (this.state === _0x2b64bd.STATE.RUN) this.moveSpeed = this.dir ? -_0x2b64bd.MOVE_SPEED_MAX : _0x2b64bd.MOVE_SPEED_MAX;
    else if (this.state === _0x2b64bd.STATE.SPIN) this.moveSpeed = this.dir ? -_0x2b64bd.SHELL_MOVE_SPEED_MAX : _0x2b64bd.SHELL_MOVE_SPEED_MAX;
    else if (this.state === _0x2b64bd.STATE.SHELL || this.state === _0x2b64bd.STATE.TRANSFORM) this.moveSpeed = 0x0;
    this.jump > _0x2b64bd.JUMP_LENGTH_MAX && (this.jump = -0x1);
};
_0x2b64bd.prototype.physics = function() {
    -0x1 !== this.jump ? (this.fallSpeed = _0x2b64bd.FALL_SPEED_MAX - this.jump * _0x2b64bd.JUMP_DECEL, this.jump++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x2b64bd.FALL_SPEED_ACCEL, -_0x2b64bd.FALL_SPEED_MAX));
    this.grounded && (this.fallSpeed = 0x0);
    this.fallSpeed = Math.max(this.fallSpeed - _0x2b64bd.FALL_SPEED_ACCEL, -_0x2b64bd.FALL_SPEED_MAX);
    var _0x22c299 = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
        _0x222dd9 = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        _0x5c7066 = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x5427e3 = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x5c7066 = this.game.world.getZone(this.level, this.zone).getTiles(_0x5c7066, _0x5427e3),
        _0x5427e3 = vec2.make(0x1, 0x1),
        _0x47ff0b = !0x1;
    this.grounded = !0x1;
    for (var _0x3a0c40 = 0x0; _0x3a0c40 < _0x5c7066.length; _0x3a0c40++) {
        var _0x32fd39 = _0x5c7066[_0x3a0c40];
        _0x32fd39.definition.COLLIDE && squar.intersection(_0x32fd39.pos, _0x5427e3, _0x22c299, this.dim) && (this.pos.x + this.dim.x <= _0x32fd39.pos.x && _0x22c299.x + this.dim.x > _0x32fd39.pos.x ? (_0x22c299.x = _0x32fd39.pos.x - this.dim.x, _0x222dd9.x = _0x22c299.x, this.moveSpeed = 0x0, _0x47ff0b = !0x0) : this.pos.x >= _0x32fd39.pos.x + _0x5427e3.x && _0x22c299.x < _0x32fd39.pos.x + _0x5427e3.x && (_0x22c299.x = _0x32fd39.pos.x + _0x5427e3.x, _0x222dd9.x = _0x22c299.x, this.moveSpeed = 0x0, _0x47ff0b = !0x0));
    }
    for (_0x3a0c40 = 0x0; _0x3a0c40 < _0x5c7066.length; _0x3a0c40++) _0x32fd39 = _0x5c7066[_0x3a0c40], _0x32fd39.definition.COLLIDE && squar.intersection(_0x32fd39.pos, _0x5427e3, _0x222dd9, this.dim) && (this.pos.y >= _0x32fd39.pos.y + _0x5427e3.y && _0x222dd9.y < _0x32fd39.pos.y + _0x5427e3.y ? (_0x222dd9.y = _0x32fd39.pos.y + _0x5427e3.y, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x32fd39.pos.y && _0x222dd9.y + this.dim.y > _0x32fd39.pos.y && (_0x222dd9.y = _0x32fd39.pos.y - this.dim.y, this.jump = -0x1, this.fallSpeed = 0x0));
    this.pos = vec2.make(_0x22c299.x, _0x222dd9.y);
    _0x47ff0b && (this.dir = !this.dir);
};
_0x2b64bd.prototype.interaction = function() {
    if (this.state === _0x2b64bd.STATE.SPIN)
        for (var _0x3f35ab = 0x0; _0x3f35ab < this.game.objects.length; _0x3f35ab++) {
            var _0x5dedc4 = this.game.objects[_0x3f35ab];
            _0x5dedc4 === this || _0x5dedc4 instanceof PlayerObject || !_0x5dedc4.isTangible() || !_0x5dedc4.damage || _0x5dedc4.level === this.level && _0x5dedc4.zone === this.zone && squar.intersection(_0x5dedc4.pos, _0x5dedc4.dim, this.pos, this.dim) && _0x5dedc4.damage(this);
        }
};
_0x2b64bd.prototype.proximity = function() {
    var _0x55e5fb = this.game.getPlayer();
    _0x55e5fb && !_0x55e5fb.dead && _0x55e5fb.level === this.level && _0x55e5fb.zone === this.zone && !this.proxHit && vec2.distance(_0x55e5fb.pos, this.pos) < _0x2b64bd.ENABLE_DIST && (this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
_0x2b64bd.prototype.sound = _0x2b132.prototype.sound;
_0x2b64bd.prototype.enable = function() {
    this.disabled = !0x1;
    this.disabledTimer = _0x2b64bd.ENABLE_FADE_TIME;
};
_0x2b64bd.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x2b64bd.prototype.damage = function(_0x54e061) {
    this.dead || (this.bonk(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x2b64bd.prototype.bonk = function() {
    this.dead || (this.setState(_0x2b64bd.STATE.BONK), this.moveSpeed = _0x2b64bd.BONK_IMP.x, this.fallSpeed = _0x2b64bd.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x2b64bd.prototype.stomped = function(_0x2128e6) {
    if (this.state === _0x2b64bd.STATE.FLY) this.setState(_0x2b64bd.STATE.RUN), this.jump = -0x1;
    else if (this.state === _0x2b64bd.STATE.RUN) this.setState(_0x2b64bd.STATE.SHELL), this.transformTimer = _0x2b64bd.TRANSFORM_TIME;
    else if (this.state === _0x2b64bd.STATE.SPIN) this.setState(_0x2b64bd.STATE.SHELL), this.transformTimer = _0x2b64bd.TRANSFORM_TIME;
    else if (this.state === _0x2b64bd.STATE.SHELL || this.state === _0x2b64bd.STATE.TRANSFORM) this.setState(_0x2b64bd.STATE.SPIN), this.dir = _0x2128e6;
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
_0x2b64bd.prototype.playerCollide = function(_0x2839c3) {
    this.dead || this.garbage || (this.state === _0x2b64bd.STATE.SHELL || this.state === _0x2b64bd.STATE.TRANSFORM ? (_0x2839c3 = 0x0 < _0x2839c3.pos.x - this.pos.x, this.stomped(_0x2839c3), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, _0x2839c3 ? 0x10 : 0x11)), this.immuneTimer = _0x2b64bd.PLAYER_IMMUNE_TIME) : 0x0 >= this.immuneTimer && _0x2839c3.damage(this));
};
_0x2b64bd.prototype.playerStomp = function(_0x5ae7ce) {
    if (!this.dead && !this.garbage) {
        var _0x1c148e = 0x0 < _0x5ae7ce.pos.x - this.pos.x;
        _0x5ae7ce.bounce();
        this.stomped(_0x1c148e);
        this.immuneTimer = _0x2b64bd.PLAYER_IMMUNE_TIME;
        this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, _0x1c148e ? 0x10 : 0x11));
    }
};
_0x2b64bd.prototype.playerBump = function(_0x2de6c8) {
    this.dead || this.garbage || _0x2de6c8.damage(this);
};
_0x2b64bd.prototype.kill = function() {};
_0x2b64bd.prototype.destroy = _0x2b132.prototype.destroy;
_0x2b64bd.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x2b64bd.prototype.setState = function(_0x4cf648) {
    _0x4cf648 !== this.state && (this.state = _0x4cf648, 0x0 < _0x4cf648.SPRITE.length && (this.sprite = _0x4cf648.SPRITE[0x0]), this.anim = 0x0);
};
_0x2b64bd.prototype.draw = function(_0xd5e9e2) {
    if (!this.disabled) {
        var _0x599afe;
        _0x599afe = this.state === _0x2b64bd.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0x2b64bd.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x584f40 = this.sprite.INDEX, _0x2d5951 = 0x0; _0x2d5951 < _0x584f40.length; _0x2d5951++)
                for (var _0x592f4b = 0x0; _0x592f4b < _0x584f40[_0x2d5951].length; _0x592f4b++) {
                    var _0xeeb68a = _0x584f40[0x3 !== _0x599afe ? _0x2d5951 : _0x584f40.length - 0x1 - _0x2d5951][_0x592f4b];
                    switch (this.variant) {
                        case 0x1:
                            _0xeeb68a += _0x2b64bd.VARIANT_OFFSET;
                    }
                    _0xd5e9e2.push({
                        'pos': vec2.add(this.pos, vec2.make(_0x592f4b, _0x2d5951)),
                        'reverse': !this.dir,
                        'index': _0xeeb68a,
                        'mode': _0x599afe
                    });
                } else {
                    _0xeeb68a = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0xeeb68a += _0x2b64bd.VARIANT_OFFSET;
                    }
                    _0xd5e9e2.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0xeeb68a,
                        'mode': _0x599afe
                    });
                }
    }
};
_0x2b64bd.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x2b64bd);
"use strict";

function _0x4ec5a0(_0xed7344, _0xea8d70, _0x5dd120, _0x358135, _0xd2deec, _0x23c2b4, _0x34e7bd) {
    _0x2b132.call(this, _0xed7344, _0xea8d70, _0x5dd120, _0x358135);
    this.oid = _0xd2deec;
    this.variant = isNaN(parseInt(_0x34e7bd)) ? 0x0 : parseInt(_0x34e7bd);
    this.setState(parseInt(_0x23c2b4) ? _0x4ec5a0.STATE.FLY : _0x4ec5a0.STATE.RUN);
    this.bonkTimer = this.anim = 0x0;
    this.loc = [this.pos.y + 0.5 * _0x4ec5a0.FLY_DISTANCE, this.pos.y - 0.5 * _0x4ec5a0.FLY_DISTANCE];
    this.dim = vec2.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.immuneTimer = 0x0;
    this.rev = !0x1;
    this.dir = !0x0;
    this.disable();
}
_0x4ec5a0.ASYNC = !0x1;
_0x4ec5a0.ID = 0x13;
_0x4ec5a0.NAME = "KOOPA TROOPA";
_0x4ec5a0.FLY_DISTANCE = 0x3;
_0x4ec5a0.FLY_ACCEL = 0.0025;
_0x4ec5a0.FLY_SPEED_MAX = 0.075;
_0x4ec5a0.CHECK_DIST = 0.1;
_0x4ec5a0.SPRITE = {};
_0x4ec5a0.SPRITE_LIST = [{
    'NAME': "FLY0",
    'ID': 0x0,
    'INDEX': [
        [0x64],
        [0x54]
    ]
}, {
    'NAME': "FLY1",
    'ID': 0x1,
    'INDEX': [
        [0x65],
        [0x55]
    ]
}, {
    'NAME': "RUN0",
    'ID': 0x2,
    'INDEX': [
        [0x62],
        [0x52]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x3,
    'INDEX': [
        [0x63],
        [0x53]
    ]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x4,
    'INDEX': 0x61
}, {
    'NAME': "SHELL",
    'ID': 0x5,
    'INDEX': 0x60
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x4ec5a0.SPRITE_LIST.length; _0x4f3eec++) _0x4ec5a0.SPRITE[_0x4ec5a0.SPRITE_LIST[_0x4f3eec].NAME] = _0x4ec5a0.SPRITE_LIST[_0x4f3eec], _0x4ec5a0.SPRITE[_0x4ec5a0.SPRITE_LIST[_0x4f3eec].ID] = _0x4ec5a0.SPRITE_LIST[_0x4f3eec];
_0x4ec5a0.STATE = {};
_0x4ec5a0.STATE_LIST = [{
    'NAME': "FLY",
    'ID': 0x0,
    'SPRITE': [_0x4ec5a0.SPRITE.FLY0, _0x4ec5a0.SPRITE.FLY1]
}, {
    'NAME': "RUN",
    'ID': 0x1,
    'SPRITE': [_0x4ec5a0.SPRITE.RUN0, _0x4ec5a0.SPRITE.RUN1]
}, {
    'NAME': "TRANSFORM",
    'ID': 0x2,
    'SPRITE': [_0x4ec5a0.SPRITE.SHELL, _0x4ec5a0.SPRITE.TRANSFORM]
}, {
    'NAME': "SHELL",
    'ID': 0x3,
    'SPRITE': [_0x4ec5a0.SPRITE.SHELL]
}, {
    'NAME': "SPIN",
    'ID': 0x4,
    'SPRITE': [_0x4ec5a0.SPRITE.SHELL]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x4ec5a0.STATE_LIST.length; _0x4f3eec++) _0x4ec5a0.STATE[_0x4ec5a0.STATE_LIST[_0x4f3eec].NAME] = _0x4ec5a0.STATE_LIST[_0x4f3eec], _0x4ec5a0.STATE[_0x4ec5a0.STATE_LIST[_0x4f3eec].ID] = _0x4ec5a0.STATE_LIST[_0x4f3eec];
_0x4ec5a0.prototype.update = _0x2b64bd.prototype.update;
_0x4ec5a0.prototype.step = function() {
    if (this.disabled) this.proximity();
    else if (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x4ec5a0.STATE.BONK) this.bonkTimer++ > _0x2b64bd.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x2b64bd.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x2b64bd.FALL_SPEED_ACCEL, -_0x2b64bd.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / _0x2b64bd.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === _0x4ec5a0.STATE.SHELL || this.state === _0x4ec5a0.STATE.TRANSFORM) --this.transformTimer < _0x2b64bd.TRANSFORM_THRESHOLD && this.setState(_0x4ec5a0.STATE.TRANSFORM), 0x0 >= this.transformTimer && this.setState(_0x4ec5a0.STATE.RUN);
        0x0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0x0 > this.pos.y && this.destroy();
    }
};
_0x4ec5a0.prototype.control = function() {
    this.state === _0x4ec5a0.STATE.FLY && (this.moveSpeed = this.dir ? -_0x2b64bd.MOVE_SPEED_MAX : _0x2b64bd.MOVE_SPEED_MAX);
    this.state === _0x4ec5a0.STATE.RUN && (this.grounded && !this.checkGround() && (this.dir = !this.dir), this.moveSpeed = this.dir ? -_0x2b64bd.MOVE_SPEED_MAX : _0x2b64bd.MOVE_SPEED_MAX);
    this.state === _0x4ec5a0.STATE.SPIN && (this.moveSpeed = this.dir ? -_0x2b64bd.SHELL_MOVE_SPEED_MAX : _0x2b64bd.SHELL_MOVE_SPEED_MAX);
    if (this.state === _0x4ec5a0.STATE.SHELL || this.state === _0x4ec5a0.STATE.TRANSFORM) this.moveSpeed = 0x0;
};
_0x4ec5a0.prototype.physics = function() {
    if (this.state === _0x4ec5a0.STATE.FLY) this.rev ? (this.fallSpeed = Math.min(_0x4ec5a0.FLY_SPEED_MAX, this.fallSpeed + _0x4ec5a0.FLY_ACCEL), this.pos.y += this.fallSpeed, this.pos.y >= this.loc[0x0] && (this.rev = !0x1)) : (this.fallSpeed = Math.max(-_0x4ec5a0.FLY_SPEED_MAX, this.fallSpeed - _0x4ec5a0.FLY_ACCEL), this.pos.y += this.fallSpeed, this.pos.y <= this.loc[0x1] && (this.rev = !0x0));
    else {
        this.grounded && (this.fallSpeed = 0x0);
        this.fallSpeed = Math.max(this.fallSpeed - _0x2b64bd.FALL_SPEED_ACCEL, -_0x2b64bd.FALL_SPEED_MAX);
        var _0x412131 = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
            _0x42d3f6 = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
            _0x49ef6d = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
            _0x3cd9fa = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
            _0x49ef6d = this.game.world.getZone(this.level, this.zone).getTiles(_0x49ef6d, _0x3cd9fa),
            _0x3cd9fa = vec2.make(0x1, 0x1),
            _0x1d8e19 = !0x1;
        this.grounded = !0x1;
        for (var _0x2a37f3 = 0x0; _0x2a37f3 < _0x49ef6d.length; _0x2a37f3++) {
            var _0x294a63 = _0x49ef6d[_0x2a37f3];
            _0x294a63.definition.COLLIDE && squar.intersection(_0x294a63.pos, _0x3cd9fa, _0x412131, this.dim) && (this.pos.x + this.dim.x <= _0x294a63.pos.x && _0x412131.x + this.dim.x > _0x294a63.pos.x ? (_0x412131.x = _0x294a63.pos.x - this.dim.x, _0x42d3f6.x = _0x412131.x, this.moveSpeed = 0x0, _0x1d8e19 = !0x0) : this.pos.x >= _0x294a63.pos.x + _0x3cd9fa.x && _0x412131.x < _0x294a63.pos.x + _0x3cd9fa.x && (_0x412131.x = _0x294a63.pos.x + _0x3cd9fa.x, _0x42d3f6.x = _0x412131.x, this.moveSpeed = 0x0, _0x1d8e19 = !0x0));
        }
        for (_0x2a37f3 = 0x0; _0x2a37f3 < _0x49ef6d.length; _0x2a37f3++) _0x294a63 = _0x49ef6d[_0x2a37f3], _0x294a63.definition.COLLIDE && squar.intersection(_0x294a63.pos, _0x3cd9fa, _0x42d3f6, this.dim) && (this.pos.y >= _0x294a63.pos.y + _0x3cd9fa.y && _0x42d3f6.y < _0x294a63.pos.y + _0x3cd9fa.y ? (_0x42d3f6.y = _0x294a63.pos.y + _0x3cd9fa.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x294a63.pos.y && _0x42d3f6.y + this.dim.y > _0x294a63.pos.y && (_0x42d3f6.y = _0x294a63.pos.y - this.dim.y, this.fallSpeed = 0x0));
        this.pos = vec2.make(_0x412131.x, _0x42d3f6.y);
        _0x1d8e19 && (this.dir = !this.dir);
    }
};
_0x4ec5a0.prototype.interaction = function() {
    if (this.state === _0x4ec5a0.STATE.SPIN)
        for (var _0x35cc9e = 0x0; _0x35cc9e < this.game.objects.length; _0x35cc9e++) {
            var _0x19c92e = this.game.objects[_0x35cc9e];
            _0x19c92e === this || _0x19c92e instanceof PlayerObject || !_0x19c92e.isTangible() || !_0x19c92e.damage || _0x19c92e.level === this.level && _0x19c92e.zone === this.zone && squar.intersection(_0x19c92e.pos, _0x19c92e.dim, this.pos, this.dim) && _0x19c92e.damage();
        }
};
_0x4ec5a0.prototype.sound = _0x2b132.prototype.sound;
_0x4ec5a0.prototype.checkGround = function() {
    var _0x47d908 = this.dir ? vec2.add(this.pos, vec2.make(-_0x4ec5a0.CHECK_DIST, 0x0)) : vec2.add(this.pos, vec2.make(_0x4ec5a0.CHECK_DIST + this.dim.x, 0x0));
    _0x47d908.y -= 1.5;
    return this.game.world.getZone(this.level, this.zone).getTile(_0x47d908).definition.COLLIDE;
};
_0x4ec5a0.prototype.proximity = _0x2b64bd.prototype.proximity;
_0x4ec5a0.prototype.enable = _0x2b64bd.prototype.enable;
_0x4ec5a0.prototype.disable = _0x2b64bd.prototype.disable;
_0x4ec5a0.prototype.damage = _0x2b64bd.prototype.damage;
_0x4ec5a0.prototype.bonk = function() {
    this.dead || (this.setState(_0x4ec5a0.STATE.BONK), this.moveSpeed = _0x2b64bd.BONK_IMP.x, this.fallSpeed = _0x2b64bd.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x4ec5a0.prototype.stomped = function(_0x427a5b) {
    if (this.state === _0x4ec5a0.STATE.FLY) this.setState(_0x4ec5a0.STATE.RUN);
    else if (this.state === _0x4ec5a0.STATE.RUN) this.setState(_0x4ec5a0.STATE.SHELL), this.transformTimer = _0x2b64bd.TRANSFORM_TIME;
    else if (this.state === _0x4ec5a0.STATE.SPIN) this.setState(_0x4ec5a0.STATE.SHELL), this.transformTimer = _0x2b64bd.TRANSFORM_TIME;
    else if (this.state === _0x4ec5a0.STATE.SHELL || this.state === _0x4ec5a0.STATE.TRANSFORM) this.setState(_0x4ec5a0.STATE.SPIN), this.dir = _0x427a5b;
    this.play("sfx/stomp.wav", 0x1, 0.04);
};
_0x4ec5a0.prototype.playerCollide = function(_0x3a4278) {
    this.dead || this.garbage || (this.state === _0x4ec5a0.STATE.SHELL || this.state === _0x4ec5a0.STATE.TRANSFORM ? (_0x3a4278 = 0x0 < _0x3a4278.pos.x - this.pos.x, this.stomped(_0x3a4278), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, _0x3a4278 ? 0x10 : 0x11)), this.immuneTimer = _0x2b64bd.PLAYER_IMMUNE_TIME) : 0x0 >= this.immuneTimer && _0x3a4278.damage(this));
};
_0x4ec5a0.prototype.playerStomp = _0x2b64bd.prototype.playerStomp;
_0x4ec5a0.prototype.playerBump = _0x2b64bd.prototype.playerBump;
_0x4ec5a0.prototype.kill = _0x2b64bd.prototype.kill;
_0x4ec5a0.prototype.destroy = _0x2b64bd.prototype.destroy;
_0x4ec5a0.prototype.isTangible = _0x2b64bd.prototype.isTangible;
_0x4ec5a0.prototype.setState = _0x2b64bd.prototype.setState;
_0x4ec5a0.prototype.draw = function(_0x10020f) {
    if (!this.disabled) {
        var _0x256715;
        _0x256715 = this.state === _0x4ec5a0.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0x2b64bd.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x4a672a = this.sprite.INDEX, _0x46bc6f = 0x0; _0x46bc6f < _0x4a672a.length; _0x46bc6f++)
                for (var _0xdbcbf = 0x0; _0xdbcbf < _0x4a672a[_0x46bc6f].length; _0xdbcbf++) {
                    var _0x12d039 = _0x4a672a[0x3 !== _0x256715 ? _0x46bc6f : _0x4a672a.length - 0x1 - _0x46bc6f][_0xdbcbf];
                    switch (this.variant) {
                        case 0x1:
                            _0x12d039 += _0x2b64bd.VARIANT_OFFSET;
                    }
                    _0x10020f.push({
                        'pos': vec2.add(this.pos, vec2.make(_0xdbcbf, _0x46bc6f)),
                        'reverse': !this.dir,
                        'index': _0x12d039,
                        'mode': _0x256715
                    });
                } else {
                    _0x12d039 = this.sprite.INDEX;
                    switch (this.variant) {
                        case 0x1:
                            _0x12d039 += _0x2b64bd.VARIANT_OFFSET;
                    }
                    _0x10020f.push({
                        'pos': this.pos,
                        'reverse': !this.dir,
                        'index': _0x12d039,
                        'mode': _0x256715
                    });
                }
    }
};
_0x4ec5a0.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x4ec5a0);
"use strict";

function _0x70c5e6(_0x10e398, _0x488778, _0x5c3eec, _0x3b14b3, _0x59252f, _0x578a7d) {
    _0x2b132.call(this, _0x10e398, _0x488778, _0x5c3eec, vec2.add(_0x3b14b3, vec2.make(0.6, 0x0)));
    this.oid = _0x59252f;
    this.variant = isNaN(parseInt(_0x578a7d)) ? 0x0 : parseInt(_0x578a7d);
    this.setState(_0x70c5e6.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.loc = [vec2.copy(this.pos), vec2.add(this.pos, vec2.make(0x0, -1.5))];
    this.dim = vec2.make(0.8, 0x1);
    this.dir = this.fallSpeed = this.moveSpeed = 0x0;
}
_0x70c5e6.ASYNC = !0x1;
_0x70c5e6.ID = 0x16;
_0x70c5e6.NAME = "UNSPELLABLE PLANT";
_0x70c5e6.ANIMATION_RATE = 0x3;
_0x70c5e6.VARIANT_OFFSET = 0x20;
_0x70c5e6.SOFFSET = vec2.make(-0.1, 0x0);
_0x70c5e6.BONK_TIME = 0x5a;
_0x70c5e6.BONK_IMP = vec2.make(0.25, 0.4);
_0x70c5e6.BONK_DECEL = 0.925;
_0x70c5e6.BONK_FALL_SPEED = 0.5;
_0x70c5e6.FALL_SPEED_ACCEL = 0.085;
_0x70c5e6.WAIT_TIME = 0x19;
_0x70c5e6.TRAVEL_SPEED = 0.05;
_0x70c5e6.SPRITE = {};
_0x70c5e6.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0x6a],
        [0x5a]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0x6b],
        [0x5b]
    ]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x70c5e6.SPRITE_LIST.length; _0x4f3eec++) _0x70c5e6.SPRITE[_0x70c5e6.SPRITE_LIST[_0x4f3eec].NAME] = _0x70c5e6.SPRITE_LIST[_0x4f3eec], _0x70c5e6.SPRITE[_0x70c5e6.SPRITE_LIST[_0x4f3eec].ID] = _0x70c5e6.SPRITE_LIST[_0x4f3eec];
_0x70c5e6.STATE = {};
_0x70c5e6.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x70c5e6.SPRITE.IDLE0, _0x70c5e6.SPRITE.IDLE1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x70c5e6.STATE_LIST.length; _0x4f3eec++) _0x70c5e6.STATE[_0x70c5e6.STATE_LIST[_0x4f3eec].NAME] = _0x70c5e6.STATE_LIST[_0x4f3eec], _0x70c5e6.STATE[_0x70c5e6.STATE_LIST[_0x4f3eec].ID] = _0x70c5e6.STATE_LIST[_0x4f3eec];
_0x70c5e6.prototype.update = function(_0xc40cf) {
    switch (_0xc40cf) {
        case 0x1:
            this.bonk();
    }
};
_0x70c5e6.prototype.step = function() {
    this.state === _0x70c5e6.STATE.BONK ? this.bonkTimer++ > _0x70c5e6.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x70c5e6.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x70c5e6.FALL_SPEED_ACCEL, -_0x70c5e6.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x70c5e6.ANIMATION_RATE) % this.state.SPRITE.length], 0x0 < --this.waitTimer || (this.control(), this.physics(), this.sound()));
};
_0x70c5e6.prototype.control = function() {};
_0x70c5e6.prototype.physics = function() {
    var _0x295dec = this.loc[this.dir ? 0x0 : 0x1];
    vec2.distance(this.pos, _0x295dec) <= _0x70c5e6.TRAVEL_SPEED ? (this.pos = _0x295dec, this.dir = !this.dir, this.waitTimer = _0x70c5e6.WAIT_TIME) : this.pos = vec2.add(this.pos, vec2.scale(vec2.normalize(vec2.subtract(_0x295dec, this.pos)), _0x70c5e6.TRAVEL_SPEED));
};
_0x70c5e6.prototype.sound = _0x2b132.prototype.sound;
_0x70c5e6.prototype.damage = function(_0x17ca7d) {
    this.dead || (this.bonk(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x70c5e6.prototype.bonk = function() {
    this.dead || (this.setState(_0x70c5e6.STATE.BONK), this.moveSpeed = _0x70c5e6.BONK_IMP.x, this.fallSpeed = _0x70c5e6.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x70c5e6.prototype.playerCollide = function(_0x1d79bc) {
    this.dead || this.garbage || _0x1d79bc.damage(this);
};
_0x70c5e6.prototype.playerStomp = function(_0x5c2317) {
    this.dead || this.garbage || _0x5c2317.damage(this);
};
_0x70c5e6.prototype.playerBump = function(_0x14daa1) {
    this.dead || this.garbage || _0x14daa1.damage(this);
};
_0x70c5e6.prototype.kill = function() {};
_0x70c5e6.prototype.destroy = _0x2b132.prototype.destroy;
_0x70c5e6.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x70c5e6.prototype.setState = function(_0x1762e0) {
    _0x1762e0 !== this.state && (this.state = _0x1762e0, 0x0 < _0x1762e0.SPRITE.length && (this.sprite = _0x1762e0.SPRITE[0x0]), this.anim = 0x0);
};
_0x70c5e6.prototype.draw = function(_0x5d3d02) {
    var _0x3a6e0e;
    _0x3a6e0e = this.state === _0x70c5e6.STATE.BONK ? 0x3 : 0x0;
    if (this.sprite.INDEX instanceof Array)
        for (var _0x370a41 = this.sprite.INDEX, _0x552245 = 0x0; _0x552245 < _0x370a41.length; _0x552245++)
            for (var _0x281e5e = 0x0; _0x281e5e < _0x370a41[_0x552245].length; _0x281e5e++) {
                var _0x2bd14d = _0x370a41[_0x3a6e0e ? _0x370a41.length - 0x1 - _0x552245 : _0x552245][_0x281e5e];
                switch (this.variant) {
                    case 0x1:
                        _0x2bd14d += _0x70c5e6.VARIANT_OFFSET;
                }
                _0x5d3d02.push({
                    'pos': vec2.add(vec2.add(this.pos, vec2.make(_0x281e5e, _0x552245)), _0x70c5e6.SOFFSET),
                    'reverse': !this.dir,
                    'index': _0x2bd14d,
                    'mode': _0x3a6e0e
                });
            } else {
                _0x2bd14d = this.sprite.INDEX;
                switch (this.variant) {
                    case 0x1:
                        _0x2bd14d += _0x70c5e6.VARIANT_OFFSET;
                }
                _0x5d3d02.push({
                    'pos': vec2.add(this.pos, _0x70c5e6.SOFFSET),
                    'reverse': !this.dir,
                    'index': _0x2bd14d,
                    'mode': _0x3a6e0e
                });
            }
};
_0x70c5e6.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x70c5e6);
"use strict";

function _0x2e2bc2(_0x2256fa, _0x3b8e43, _0x95fca2, _0x2f7128, _0x604645, _0x599d04, _0x2ce4c7) {
    _0x2b132.call(this, _0x2256fa, _0x3b8e43, _0x95fca2, _0x2f7128);
    this.oid = _0x604645;
    this.setState(_0x2e2bc2.STATE.IDLE);
    this.delay = isNaN(parseInt(_0x599d04)) ? _0x2e2bc2.DELAY_DEFAULT : parseInt(_0x599d04);
    this.impulse = isNaN(parseFloat(_0x2ce4c7)) ? 0x1 : parseFloat(_0x2ce4c7);
    this.anim = 0x0;
    this.disabled = !0x1;
    this.delayTimer = this.delay;
    this.bonkTimer = 0x0;
    this.pos.x += _0x2e2bc2.SOFFSET.x;
    this.loc = vec2.copy(this.pos);
    this.moveSpeed = this.fallSpeed = 0x0;
    this.dim = vec2.make(0.7, 0.7);
    this.dir = !0x0;
}
_0x2e2bc2.ASYNC = !0x1;
_0x2e2bc2.ID = 0x15;
_0x2e2bc2.NAME = "FLYING FISH";
_0x2e2bc2.ANIMATION_RATE = 0x3;
_0x2e2bc2.BONK_TIME = 0x5a;
_0x2e2bc2.BONK_IMP = vec2.make(0.25, 0.4);
_0x2e2bc2.BONK_DECEL = 0.925;
_0x2e2bc2.BONK_FALL_SPEED = 0.5;
_0x2e2bc2.BONK_FALL_ACCEL = 0.085;
_0x2e2bc2.DELAY_DEFAULT = 0x96;
_0x2e2bc2.IMPULSE = vec2.make(0.225, 0.335);
_0x2e2bc2.DRAG = 0.996;
_0x2e2bc2.FALL_SPEED_ACCEL = 0.0055;
_0x2e2bc2.SOFFSET = vec2.make(0.15, 0.15);
_0x2e2bc2.SPRITE = {};
_0x2e2bc2.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xce
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xcf
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2e2bc2.SPRITE_LIST.length; _0x4f3eec++) _0x2e2bc2.SPRITE[_0x2e2bc2.SPRITE_LIST[_0x4f3eec].NAME] = _0x2e2bc2.SPRITE_LIST[_0x4f3eec], _0x2e2bc2.SPRITE[_0x2e2bc2.SPRITE_LIST[_0x4f3eec].ID] = _0x2e2bc2.SPRITE_LIST[_0x4f3eec];
_0x2e2bc2.STATE = {};
_0x2e2bc2.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x2e2bc2.SPRITE.IDLE0, _0x2e2bc2.SPRITE.IDLE1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2e2bc2.STATE_LIST.length; _0x4f3eec++) _0x2e2bc2.STATE[_0x2e2bc2.STATE_LIST[_0x4f3eec].NAME] = _0x2e2bc2.STATE_LIST[_0x4f3eec], _0x2e2bc2.STATE[_0x2e2bc2.STATE_LIST[_0x4f3eec].ID] = _0x2e2bc2.STATE_LIST[_0x4f3eec];
_0x2e2bc2.prototype.update = function(_0x48235a) {
    switch (_0x48235a) {
        case 0x1:
            this.bonk();
    }
};
_0x2e2bc2.prototype.step = function() {
    this.state === _0x2e2bc2.STATE.BONK ? this.bonkTimer++ > _0x2e2bc2.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x2e2bc2.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x2e2bc2.BONK_FALL_ACCEL, -_0x2e2bc2.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x2e2bc2.ANIMATION_RATE) % this.state.SPRITE.length], 0x0 < this.delayTimer ? this.delayTimer-- : this.jump(), this.physics(), this.sound());
};
_0x2e2bc2.prototype.physics = function() {
    this.pos.y > this.loc.y || 0x0 < this.fallSpeed ? (this.fallSpeed = (this.fallSpeed - _0x2e2bc2.FALL_SPEED_ACCEL) * _0x2e2bc2.DRAG, this.pos.x += this.moveSpeed * _0x2e2bc2.DRAG, this.pos.y += this.fallSpeed) : this.disable();
};
_0x2e2bc2.prototype.sound = _0x2b132.prototype.sound;
_0x2e2bc2.prototype.jump = function() {
    this.enable();
    this.pos = vec2.copy(this.loc);
    this.fallSpeed = _0x2e2bc2.IMPULSE.y * this.impulse;
    this.moveSpeed = _0x2e2bc2.IMPULSE.x * this.impulse;
    this.delayTimer = this.delay;
};
_0x2e2bc2.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x2e2bc2.prototype.enable = function() {
    this.disabled = !0x1;
};
_0x2e2bc2.prototype.damage = function(_0x23b9a3) {
    this.dead || (this.bonk(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x2e2bc2.prototype.bonk = function() {
    this.dead || (this.setState(_0x2e2bc2.STATE.BONK), this.moveSpeed = _0x2e2bc2.BONK_IMP.x, this.fallSpeed = _0x2e2bc2.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x2e2bc2.prototype.playerCollide = function(_0x342a0c) {
    this.dead || this.garbage || _0x342a0c.damage(this);
};
_0x2e2bc2.prototype.playerStomp = function(_0x452180) {
    this.dead || this.garbage || (this.bonk(), _0x452180.bounce(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x2e2bc2.prototype.playerBump = function(_0x24e94a) {
    this.playerCollide(_0x24e94a);
};
_0x2e2bc2.prototype.kill = function() {};
_0x2e2bc2.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x2e2bc2.prototype.destroy = _0x2b132.prototype.destroy;
_0x2e2bc2.prototype.setState = function(_0x454f61) {
    _0x454f61 !== this.state && (this.state = _0x454f61, 0x0 < _0x454f61.SPRITE.length && (this.sprite = _0x454f61.SPRITE[0x0]), this.anim = 0x0);
};
_0x2e2bc2.prototype.draw = function(_0x4d3c89) {
    if (!this.disabled) {
        var _0x2cd89f;
        _0x2cd89f = this.state === _0x2e2bc2.STATE.BONK ? 0x3 : 0x0;
        _0x4d3c89.push({
            'pos': vec2.subtract(this.pos, _0x2e2bc2.SOFFSET),
            'reverse': this.dir,
            'index': this.sprite.INDEX,
            'mode': _0x2cd89f
        });
    }
};
_0x2e2bc2.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x2e2bc2);
"use strict";

function _0x3bb61f(_0x318daf, _0x5afdd5, _0x5be344, _0xb1c457, _0x11dd4d, _0x547cdb) {
    _0x2b132.call(this, _0x318daf, _0x5afdd5, _0x5be344, _0xb1c457);
    this.oid = _0x11dd4d;
    this.setState(_0x3bb61f.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.dim = vec2.make(0x1, 1.5);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.disabled = this.grounded = !0x1;
    this.disabledTimer = 0x0;
    this.proxHit = !0x1;
    this.hammer = void 0x0;
    this.loc = 0x1 === parseInt(_0x547cdb) ? [this.pos.x + _0x3bb61f.MOVE_AREA, this.pos.x] : [this.pos.x, this.pos.x - _0x3bb61f.MOVE_AREA];
    this.groundTimer = this.double = this.attackAnimTimer = this.attackTimer = 0x0;
    this.jumpTimer = -0x1;
    this.reverse = !0x1;
    this.dir = !0x0;
    this.disable();
}
_0x3bb61f.ASYNC = !0x1;
_0x3bb61f.ID = 0x31;
_0x3bb61f.NAME = "HAMMER BRO";
_0x3bb61f.ANIMATION_RATE = 0x5;
_0x3bb61f.ENABLE_FADE_TIME = 0xf;
_0x3bb61f.ENABLE_DIST = 0x21;
_0x3bb61f.BONK_TIME = 0x5a;
_0x3bb61f.BONK_IMP = vec2.make(0.25, 0.4);
_0x3bb61f.BONK_DECEL = 0.925;
_0x3bb61f.BONK_FALL_SPEED = 0.5;
_0x3bb61f.MOVE_SPEED_MAX = 0.095;
_0x3bb61f.JUMP_DELAY = 0x37;
_0x3bb61f.MOVE_AREA = 0x4;
_0x3bb61f.JUMP_LENGTH = 0x8;
_0x3bb61f.JUMP_DECEL = 0.009;
_0x3bb61f.ATTACK_DELAY = 0x4b;
_0x3bb61f.DOUBLE_RATE = 0x5;
_0x3bb61f.ATTACK_ANIM_LENGTH = 0xd;
_0x3bb61f.PROJ_OFFSET = vec2.make(0.5, 1.25);
_0x3bb61f.FALL_SPEED_MAX = 0.3;
_0x3bb61f.FALL_SPEED_ACCEL = 0.085;
_0x3bb61f.SPRITE = {};
_0x3bb61f.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0x6e],
        [0x5e]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0x6d],
        [0x5d]
    ]
}, {
    'NAME': "ATTACK",
    'ID': 0x2,
    'INDEX': [
        [0x6c],
        [0x5c]
    ]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x3bb61f.SPRITE_LIST.length; _0x4f3eec++) _0x3bb61f.SPRITE[_0x3bb61f.SPRITE_LIST[_0x4f3eec].NAME] = _0x3bb61f.SPRITE_LIST[_0x4f3eec], _0x3bb61f.SPRITE[_0x3bb61f.SPRITE_LIST[_0x4f3eec].ID] = _0x3bb61f.SPRITE_LIST[_0x4f3eec];
_0x3bb61f.STATE = {};
_0x3bb61f.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x3bb61f.SPRITE.IDLE0, _0x3bb61f.SPRITE.IDLE1]
}, {
    'NAME': "FALL",
    'ID': 0x1,
    'SPRITE': [_0x3bb61f.SPRITE.IDLE1]
}, {
    'NAME': "ATTACK",
    'ID': 0x2,
    'SPRITE': [_0x3bb61f.SPRITE.ATTACK]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x3bb61f.STATE_LIST.length; _0x4f3eec++) _0x3bb61f.STATE[_0x3bb61f.STATE_LIST[_0x4f3eec].NAME] = _0x3bb61f.STATE_LIST[_0x4f3eec], _0x3bb61f.STATE[_0x3bb61f.STATE_LIST[_0x4f3eec].ID] = _0x3bb61f.STATE_LIST[_0x4f3eec];
_0x3bb61f.prototype.update = function(_0x48fea4) {
    switch (_0x48fea4) {
        case 0x1:
            this.bonk();
            break;
        case 0xa0:
            this.enable();
    }
};
_0x3bb61f.prototype.step = function() {
    this.disabled ? this.proximity() : (0x0 < this.disabledTimer && this.disabledTimer--, this.state === _0x3bb61f.STATE.BONK ? this.bonkTimer++ > _0x3bb61f.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x3bb61f.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x3bb61f.FALL_SPEED_ACCEL, -_0x3bb61f.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x3bb61f.ANIMATION_RATE) % this.state.SPRITE.length], this.face(), this.control(), this.physics(), this.sound(), 0x0 < this.attackAnimTimer ? (this.setState(_0x3bb61f.STATE.ATTACK), this.attach(), this.attackAnimTimer--) : this.attackTimer++ > _0x3bb61f.ATTACK_DELAY ? this.attack() : this.hammer = void 0x0, 0x0 > this.pos.y && this.destroy()));
};
_0x3bb61f.prototype.control = function() {
    this.grounded ? (_0x3bb61f.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0x0), this.pos.x > this.loc[0x0] ? this.reverse = !0x0 : this.pos.x < this.loc[0x1] && (this.reverse = !0x1)) : this.jumpTimer > _0x3bb61f.JUMP_LENGTH && (this.jumpTimer = -0x1);
    this.grounded ? this.setState(_0x3bb61f.STATE.IDLE) : this.setState(_0x3bb61f.STATE.FALL);
    this.moveSpeed = 0.75 * this.moveSpeed + 0.25 * (this.reverse ? -_0x3bb61f.MOVE_SPEED_MAX : _0x3bb61f.MOVE_SPEED_MAX);
};
_0x3bb61f.prototype.physics = function() {
    -0x1 !== this.jumpTimer ? (this.fallSpeed = _0x3bb61f.FALL_SPEED_MAX - this.jumpTimer * _0x3bb61f.JUMP_DECEL, this.jumpTimer++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x3bb61f.FALL_SPEED_ACCEL, -_0x3bb61f.FALL_SPEED_MAX));
    var _0x4a9aa3 = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
        _0x5d9757 = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        _0x5159c = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x3ca1c6 = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x5159c = this.game.world.getZone(this.level, this.zone).getTiles(_0x5159c, _0x3ca1c6),
        _0x3ca1c6 = vec2.make(0x1, 0x1);
    this.grounded = !0x1;
    for (var _0x12f7cd = 0x0; _0x12f7cd < _0x5159c.length; _0x12f7cd++) {
        var _0x360fce = _0x5159c[_0x12f7cd];
        _0x360fce.definition.COLLIDE && squar.intersection(_0x360fce.pos, _0x3ca1c6, _0x4a9aa3, this.dim) && (this.pos.x + this.dim.x <= _0x360fce.pos.x && _0x4a9aa3.x + this.dim.x > _0x360fce.pos.x ? (_0x4a9aa3.x = _0x360fce.pos.x - this.dim.x, _0x5d9757.x = _0x4a9aa3.x, this.moveSpeed = 0x0) : this.pos.x >= _0x360fce.pos.x + _0x3ca1c6.x && _0x4a9aa3.x < _0x360fce.pos.x + _0x3ca1c6.x && (_0x4a9aa3.x = _0x360fce.pos.x + _0x3ca1c6.x, _0x5d9757.x = _0x4a9aa3.x, this.moveSpeed = 0x0));
    }
    for (_0x12f7cd = 0x0; _0x12f7cd < _0x5159c.length; _0x12f7cd++) _0x360fce = _0x5159c[_0x12f7cd], _0x360fce.definition.COLLIDE && squar.intersection(_0x360fce.pos, _0x3ca1c6, _0x5d9757, this.dim) && (this.pos.y >= _0x360fce.pos.y + _0x3ca1c6.y && _0x5d9757.y < _0x360fce.pos.y + _0x3ca1c6.y ? (_0x5d9757.y = _0x360fce.pos.y + _0x3ca1c6.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x360fce.pos.y && _0x5d9757.y + this.dim.y > _0x360fce.pos.y && (_0x5d9757.y = _0x360fce.pos.y - this.dim.y, this.jumpTimer = -0x1, this.fallSpeed = 0x0));
    this.pos = vec2.make(_0x4a9aa3.x, _0x5d9757.y);
};
_0x3bb61f.prototype.proximity = function() {
    var _0x170ea4 = this.game.getPlayer();
    _0x170ea4 && !_0x170ea4.dead && _0x170ea4.level === this.level && _0x170ea4.zone === this.zone && !this.proxHit && vec2.distance(_0x170ea4.pos, this.pos) < _0x3bb61f.ENABLE_DIST && (this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0xa0)), this.proxHit = !0x0);
};
_0x3bb61f.prototype.face = function() {
    for (var _0xa274d0, _0x18aa06 = 0x0; _0x18aa06 < this.game.objects.length; _0x18aa06++) {
        var _0x1aefad = this.game.objects[_0x18aa06];
        _0x1aefad instanceof PlayerObject && _0x1aefad.level === this.level && _0x1aefad.zone === this.zone && _0x1aefad.isTangible() && (!_0xa274d0 || Math.abs(_0xa274d0) > vec2.distance(_0x1aefad.pos, this.pos)) && (_0xa274d0 = _0x1aefad.pos.x - this.pos.x);
    }
    this.dir = _0xa274d0 ? 0x0 > _0xa274d0 : !0x0;
};
_0x3bb61f.prototype.sound = _0x2b132.prototype.sound;
_0x3bb61f.prototype.enable = function() {
    this.disabled = !0x1;
    this.disabledTimer = _0x3bb61f.ENABLE_FADE_TIME;
};
_0x3bb61f.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x3bb61f.prototype.attack = function() {
    this.attackAnimTimer = _0x3bb61f.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0x0;
    this.hammer = this.game.createObject(_0xde7ae5.ID, this.level, this.zone, vec2.add(this.pos, _0x3bb61f.PROJ_OFFSET), [this]);
    ++this.double > _0x3bb61f.DOUBLE_RATE && (this.double = 0x0, this.attackTimer = _0x3bb61f.ATTACK_DELAY);
};
_0x3bb61f.prototype.attach = function() {
    this.hammer && (this.hammer.pos = vec2.add(this.pos, _0x3bb61f.PROJ_OFFSET), this.hammer.dir = !this.dir);
};
_0x3bb61f.prototype.playerCollide = function(_0x4b22d6) {
    this.dead || this.garbage || _0x4b22d6.damage(this);
};
_0x3bb61f.prototype.playerStomp = function(_0x529b7f) {
    this.dead || this.garbage || (this.bonk(), _0x529b7f.bounce(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x3bb61f.prototype.playerBump = _0x3bb61f.prototype.playerCollide;
_0x3bb61f.prototype.damage = function(_0x33a936) {
    this.dead || (this.bonk(), OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1));
};
_0x3bb61f.prototype.bonk = function() {
    this.dead || (this.setState(_0x3bb61f.STATE.BONK), this.moveSpeed = _0x3bb61f.BONK_IMP.x, this.fallSpeed = _0x3bb61f.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x3bb61f.prototype.kill = function() {};
_0x3bb61f.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x3bb61f.prototype.destroy = _0x2b132.prototype.destroy;
_0x3bb61f.prototype.setState = function(_0x189deb) {
    _0x189deb !== this.state && (this.state = _0x189deb, 0x0 < _0x189deb.SPRITE.length && (this.sprite = _0x189deb.SPRITE[0x0]), this.anim = 0x0);
};
_0x3bb61f.prototype.draw = function(_0x19b1e0) {
    if (!this.disabled) {
        var _0x3500e3;
        _0x3500e3 = this.state === _0x3bb61f.STATE.BONK ? 0x3 : 0x0 < this.disabledTimer ? 0xa0 + parseInt(0x20 * (0x1 - this.disabledTimer / _0x3bb61f.ENABLE_FADE_TIME)) : 0x0;
        if (this.sprite.INDEX instanceof Array)
            for (var _0x5c4c4c = this.sprite.INDEX, _0x435b7f = 0x0; _0x435b7f < _0x5c4c4c.length; _0x435b7f++)
                for (var _0x217037 = 0x0; _0x217037 < _0x5c4c4c[_0x435b7f].length; _0x217037++) _0x19b1e0.push({
                    'pos': vec2.add(this.pos, vec2.make(_0x217037, _0x435b7f)),
                    'reverse': !this.dir,
                    'index': _0x5c4c4c[0x3 !== _0x3500e3 ? _0x435b7f : _0x5c4c4c.length - 0x1 - _0x435b7f][_0x217037],
                    'mode': _0x3500e3
                });
        else _0x19b1e0.push({
            'pos': this.pos,
            'reverse': !this.dir,
            'index': this.sprite.INDEX,
            'mode': _0x3500e3
        });
    }
};
_0x3bb61f.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x3bb61f);
"use strict";

function _0x47b80a(_0x3a5600, _0x548881, _0x396c7c, _0x42a8cb, _0x16ba14) {
    _0x2b132.call(this, _0x3a5600, _0x548881, _0x396c7c, _0x42a8cb);
    this.oid = _0x16ba14;
    this.state = _0x47b80a.STATE.RUN;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.health = _0x47b80a.HEALTH;
    this.bonkTimer = 0x0;
    this.dim = vec2.make(0x2, 0x2);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.grounded = !0x1;
    this.loc = [this.pos.x, this.pos.x - _0x47b80a.MOVE_AREA];
    this.groundTimer = this.attackAnimTimer = this.attackTimer = 0x0;
    this.jumpTimer = -0x1;
    this.reverse = !0x1;
    this.dir = !0x0;
}
_0x47b80a.ASYNC = !0x0;
_0x47b80a.ID = 0x19;
_0x47b80a.NAME = "BOWSER";
_0x47b80a.ANIMATION_RATE = 0x5;
_0x47b80a.HEALTH = 0x5;
_0x47b80a.BONK_TIME = 0x5a;
_0x47b80a.BONK_IMP = vec2.make(0.25, 0.4);
_0x47b80a.BONK_DECEL = 0.925;
_0x47b80a.BONK_FALL_SPEED = 0.5;
_0x47b80a.MOVE_SPEED_MAX = 0.095;
_0x47b80a.JUMP_DELAY = 0x2d;
_0x47b80a.MOVE_AREA = 0x5;
_0x47b80a.JUMP_LENGTH = 0x6;
_0x47b80a.JUMP_DECEL = 0.009;
_0x47b80a.ATTACK_DELAY = 0x4b;
_0x47b80a.ATTACK_ANIM_LENGTH = 0xf;
_0x47b80a.PROJ_OFFSET = vec2.make(-0.25, 1.1);
_0x47b80a.FALL_SPEED_MAX = 0.3;
_0x47b80a.FALL_SPEED_ACCEL = 0.085;
_0x47b80a.SPRITE = {};
_0x47b80a.SPRITE_LIST = [{
    'NAME': "RUN0",
    'ID': 0x0,
    'INDEX': [
        [0xc4, 0xc5],
        [0xb4, 0xb5]
    ]
}, {
    'NAME': "RUN1",
    'ID': 0x1,
    'INDEX': [
        [0xc6, 0xc7],
        [0xb6, 0xb7]
    ]
}, {
    'NAME': "ATTACK0",
    'ID': 0x2,
    'INDEX': [
        [0xc0, 0xc1],
        [0xb0, 0xb1]
    ]
}, {
    'NAME': "ATTACK1",
    'ID': 0x3,
    'INDEX': [
        [0xc2, 0xc3],
        [0xb2, 0xb3]
    ]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x47b80a.SPRITE_LIST.length; _0x4f3eec++) _0x47b80a.SPRITE[_0x47b80a.SPRITE_LIST[_0x4f3eec].NAME] = _0x47b80a.SPRITE_LIST[_0x4f3eec], _0x47b80a.SPRITE[_0x47b80a.SPRITE_LIST[_0x4f3eec].ID] = _0x47b80a.SPRITE_LIST[_0x4f3eec];
_0x47b80a.STATE = {};
_0x47b80a.STATE_LIST = [{
    'NAME': "RUN",
    'ID': 0x0,
    'SPRITE': [_0x47b80a.SPRITE.RUN0, _0x47b80a.SPRITE.RUN1]
}, {
    'NAME': "ATTACK",
    'ID': 0x1,
    'SPRITE': [_0x47b80a.SPRITE.ATTACK0, _0x47b80a.SPRITE.ATTACK1]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x47b80a.STATE_LIST.length; _0x4f3eec++) _0x47b80a.STATE[_0x47b80a.STATE_LIST[_0x4f3eec].NAME] = _0x47b80a.STATE_LIST[_0x4f3eec], _0x47b80a.STATE[_0x47b80a.STATE_LIST[_0x4f3eec].ID] = _0x47b80a.STATE_LIST[_0x4f3eec];
_0x47b80a.prototype.update = function(_0x210b64) {};
_0x47b80a.prototype.step = function() {
    this.state === _0x47b80a.STATE.BONK ? this.bonkTimer++ > _0x47b80a.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x47b80a.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x47b80a.FALL_SPEED_ACCEL, -_0x47b80a.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x47b80a.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.sound(), this.attackTimer++ > _0x47b80a.ATTACK_DELAY && this.attack(), 0x0 < this.attackAnimTimer ? (this.setState(_0x47b80a.STATE.ATTACK), this.attackAnimTimer--) : this.setState(_0x47b80a.STATE.RUN), 0x0 > this.pos.y && this.destroy());
};
_0x47b80a.prototype.control = function() {
    this.grounded ? (_0x47b80a.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0x0), this.pos.x > this.loc[0x0] ? this.reverse = !0x0 : this.pos.x < this.loc[0x1] && (this.reverse = !0x1)) : this.jumpTimer > _0x47b80a.JUMP_LENGTH && (this.jumpTimer = -0x1);
    this.moveSpeed = 0.75 * this.moveSpeed + 0.25 * (this.reverse ? -_0x47b80a.MOVE_SPEED_MAX : _0x47b80a.MOVE_SPEED_MAX);
};
_0x47b80a.prototype.physics = function() {
    -0x1 !== this.jumpTimer ? (this.fallSpeed = _0x47b80a.FALL_SPEED_MAX - this.jumpTimer * _0x47b80a.JUMP_DECEL, this.jumpTimer++, this.grounded = !0x1) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x47b80a.FALL_SPEED_ACCEL, -_0x47b80a.FALL_SPEED_MAX));
    var _0x17ff5e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
        _0x6e760e = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        _0x426509 = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
        _0x569085 = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
        _0x426509 = this.game.world.getZone(this.level, this.zone).getTiles(_0x426509, _0x569085),
        _0x569085 = vec2.make(0x1, 0x1);
    this.grounded = !0x1;
    for (var _0x3182d5 = 0x0; _0x3182d5 < _0x426509.length; _0x3182d5++) {
        var _0x2d8950 = _0x426509[_0x3182d5];
        _0x2d8950.definition.COLLIDE && squar.intersection(_0x2d8950.pos, _0x569085, _0x17ff5e, this.dim) && (this.pos.x + this.dim.x <= _0x2d8950.pos.x && _0x17ff5e.x + this.dim.x > _0x2d8950.pos.x ? (_0x17ff5e.x = _0x2d8950.pos.x - this.dim.x, _0x6e760e.x = _0x17ff5e.x, this.moveSpeed = 0x0) : this.pos.x >= _0x2d8950.pos.x + _0x569085.x && _0x17ff5e.x < _0x2d8950.pos.x + _0x569085.x && (_0x17ff5e.x = _0x2d8950.pos.x + _0x569085.x, _0x6e760e.x = _0x17ff5e.x, this.moveSpeed = 0x0));
    }
    for (_0x3182d5 = 0x0; _0x3182d5 < _0x426509.length; _0x3182d5++) _0x2d8950 = _0x426509[_0x3182d5], _0x2d8950.definition.COLLIDE && squar.intersection(_0x2d8950.pos, _0x569085, _0x6e760e, this.dim) && (this.pos.y >= _0x2d8950.pos.y + _0x569085.y && _0x6e760e.y < _0x2d8950.pos.y + _0x569085.y ? (_0x6e760e.y = _0x2d8950.pos.y + _0x569085.y, this.fallSpeed = 0x0, this.grounded = !0x0) : this.pos.y + this.dim.y <= _0x2d8950.pos.y && _0x6e760e.y + this.dim.y > _0x2d8950.pos.y && (_0x6e760e.y = _0x2d8950.pos.y - this.dim.y, this.jumpTimer = -0x1, this.fallSpeed = 0x0));
    this.pos = vec2.make(_0x17ff5e.x, _0x6e760e.y);
};
_0x47b80a.prototype.sound = _0x2b132.prototype.sound;
_0x47b80a.prototype.attack = function() {
    this.attackAnimTimer = _0x47b80a.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0x0;
    this.game.createObject(_0x494911.ID, this.level, this.zone, vec2.add(this.pos, _0x47b80a.PROJ_OFFSET), []);
    this.play("sfx/breath.wav", 1.5, 0.04);
};
_0x47b80a.prototype.playerCollide = function(_0x301ce0) {
    this.dead || this.garbage || _0x301ce0.damage(this);
};
_0x47b80a.prototype.playerStomp = _0x47b80a.prototype.playerCollide;
_0x47b80a.prototype.playerBump = _0x47b80a.prototype.playerCollide;
_0x47b80a.prototype.damage = function(_0x1c821f) {
    this.dead || 0x0 >= --this.health && this.bonk();
};
_0x47b80a.prototype.bonk = function() {
    this.dead || (this.setState(_0x47b80a.STATE.BONK), this.moveSpeed = _0x47b80a.BONK_IMP.x, this.fallSpeed = _0x47b80a.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x47b80a.prototype.kill = function() {};
_0x47b80a.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x47b80a.prototype.destroy = _0x2b132.prototype.destroy;
_0x47b80a.prototype.setState = function(_0x3c9ce0) {
    _0x3c9ce0 !== this.state && (this.state = _0x3c9ce0, 0x0 < _0x3c9ce0.SPRITE.length && (this.sprite = _0x3c9ce0.SPRITE[0x0]), this.anim = 0x0);
};
_0x47b80a.prototype.draw = function(_0x344414) {
    var _0x1d42d7;
    _0x1d42d7 = this.state === _0x47b80a.STATE.BONK ? 0x3 : 0x0;
    if (this.sprite.INDEX instanceof Array)
        for (var _0xe1f0ab = this.sprite.INDEX, _0x417a90 = 0x0; _0x417a90 < _0xe1f0ab.length; _0x417a90++)
            for (var _0x353e33 = 0x0; _0x353e33 < _0xe1f0ab[_0x417a90].length; _0x353e33++) _0x344414.push({
                'pos': vec2.add(this.pos, vec2.make(_0x353e33, _0x417a90)),
                'reverse': !this.dir,
                'index': _0xe1f0ab[_0x1d42d7 ? _0xe1f0ab.length - 0x1 - _0x417a90 : _0x417a90][_0x353e33],
                'mode': _0x1d42d7
            });
    else _0x344414.push({
        'pos': this.pos,
        'reverse': !this.dir,
        'index': this.sprite.INDEX,
        'mode': _0x1d42d7
    });
};
_0x47b80a.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x47b80a);
"use strict";

function _0x23afdb(_0x385f59, _0x310cfa, _0x31960e, _0x10537d, _0x57fe89, _0x3d4d35, _0x25fa69, _0x518de2, _0x15d767, _0x5f6838, _0x2a4bd0, _0x2dffee) {
    _0x2b132.call(this, _0x385f59, _0x310cfa, _0x31960e, _0x10537d);
    this.oid = _0x57fe89;
    this.setState(_0x23afdb.STATE.IDLE);
    this.loc = 0x0 === parseInt(_0x2dffee) ? [_0x10537d, vec2.add(_0x10537d, vec2.make(parseInt(_0x25fa69), parseInt(_0x518de2)))] : [vec2.add(_0x10537d, vec2.make(parseInt(_0x25fa69), parseInt(_0x518de2))), _0x10537d];
    this.anim = 0x0;
    this.dim = vec2.make(parseInt(_0x3d4d35), 0.5);
    this.speed = parseFloat(_0x15d767);
    this.riders = [];
    this.dir = !0x1;
    this.loop = 0x0 === parseInt(_0x5f6838) ? !0x1 : !0x0;
    this.delay = parseInt(_0x2a4bd0);
}
_0x23afdb.ASYNC = !0x0;
_0x23afdb.ID = 0x91;
_0x23afdb.NAME = "PLATFORM";
_0x23afdb.ANIMATION_RATE = 0x3;
_0x23afdb.SPRITE = {};
_0x23afdb.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xa0
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x23afdb.SPRITE_LIST.length; _0x4f3eec++) _0x23afdb.SPRITE[_0x23afdb.SPRITE_LIST[_0x4f3eec].NAME] = _0x23afdb.SPRITE_LIST[_0x4f3eec], _0x23afdb.SPRITE[_0x23afdb.SPRITE_LIST[_0x4f3eec].ID] = _0x23afdb.SPRITE_LIST[_0x4f3eec];
_0x23afdb.STATE = {};
_0x23afdb.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x23afdb.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x23afdb.STATE_LIST.length; _0x4f3eec++) _0x23afdb.STATE[_0x23afdb.STATE_LIST[_0x4f3eec].NAME] = _0x23afdb.STATE_LIST[_0x4f3eec], _0x23afdb.STATE[_0x23afdb.STATE_LIST[_0x4f3eec].ID] = _0x23afdb.STATE_LIST[_0x4f3eec];
_0x23afdb.prototype.update = function(_0x4899ac) {};
_0x23afdb.prototype.step = function() {
    0x0 < this.delay-- || (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x23afdb.ANIMATION_RATE) % this.state.SPRITE.length], this.physics());
};
_0x23afdb.prototype.physics = function() {
    var _0x1c3490 = vec2.normalize(vec2.subtract(this.loc[this.dir ? 0x0 : 0x1], this.pos)),
        _0xea623 = vec2.distance(this.pos, this.loc[this.dir ? 0x0 : 0x1]);
    if (_0xea623 < this.speed)
        if (this.loop) this.dir = !this.dir;
        else {
            this.pos = this.loc[0x0];
            this.riders = [];
            return;
        }
    _0x1c3490 = vec2.scale(_0x1c3490, Math.min(this.speed, _0xea623));
    this.pos = vec2.add(this.pos, _0x1c3490);
    for (_0xea623 = 0x0; _0xea623 < this.riders.length; _0xea623++) {
        var _0x45f051 = this.riders[0x0];
        _0x45f051.pos = vec2.add(_0x45f051.pos, _0x1c3490);
    }
    this.riders = [];
};
_0x23afdb.prototype.riding = function(_0x31e465) {
    this.riders.push(_0x31e465);
};
_0x23afdb.prototype.kill = function() {};
_0x23afdb.prototype.destroy = _0x2b132.prototype.destroy;
_0x23afdb.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x23afdb.prototype.setState = function(_0xad35b3) {
    _0xad35b3 !== this.state && (this.state = _0xad35b3, this.sprite = _0xad35b3.SPRITE[0x0], this.anim = 0x0);
};
_0x23afdb.prototype.draw = function(_0x4280b5) {
    if (!(0x0 < this.delay))
        for (var _0x18e3a8 = 0x0; _0x18e3a8 < this.dim.x; _0x18e3a8++) _0x4280b5.push({
            'pos': vec2.add(this.pos, vec2.make(_0x18e3a8, 0x0)),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        });
};
_0x2b132.REGISTER_OBJECT(_0x23afdb);
"use strict";

function _0x4cfe85(_0x3f686b, _0x1fb908, _0x3242ca, _0x235044, _0x431eaa, _0x577e71, _0x259052, _0x19be4f, _0x4c4b7c) {
    _0x2b132.call(this, _0x3f686b, _0x1fb908, _0x3242ca, _0x235044);
    this.oid = _0x431eaa;
    this.setState(_0x4cfe85.STATE.IDLE);
    this.loc = [_0x235044, vec2.add(_0x235044, vec2.make(parseInt(_0x259052), parseInt(_0x19be4f)))];
    this.anim = 0x0;
    this.dim = vec2.make(parseInt(_0x577e71), 0.5);
    this.speed = parseFloat(_0x4c4b7c);
    this.riders = [];
    this.dir = this.go = !0x1;
}
_0x4cfe85.ASYNC = !0x1;
_0x4cfe85.ID = 0x92;
_0x4cfe85.NAME = "BUS PLATFORM";
_0x4cfe85.ANIMATION_RATE = 0x3;
_0x4cfe85.SPRITE = {};
_0x4cfe85.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xa0
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x4cfe85.SPRITE_LIST.length; _0x4f3eec++) _0x4cfe85.SPRITE[_0x4cfe85.SPRITE_LIST[_0x4f3eec].NAME] = _0x4cfe85.SPRITE_LIST[_0x4f3eec], _0x4cfe85.SPRITE[_0x4cfe85.SPRITE_LIST[_0x4f3eec].ID] = _0x4cfe85.SPRITE_LIST[_0x4f3eec];
_0x4cfe85.STATE = {};
_0x4cfe85.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x4cfe85.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x4cfe85.STATE_LIST.length; _0x4f3eec++) _0x4cfe85.STATE[_0x4cfe85.STATE_LIST[_0x4f3eec].NAME] = _0x4cfe85.STATE_LIST[_0x4f3eec], _0x4cfe85.STATE[_0x4cfe85.STATE_LIST[_0x4f3eec].ID] = _0x4cfe85.STATE_LIST[_0x4f3eec];
_0x4cfe85.prototype.update = function(_0x560f8a) {
    switch (_0x560f8a) {
        case 0xa1:
            this.start();
    }
};
_0x4cfe85.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x4cfe85.ANIMATION_RATE) % this.state.SPRITE.length];
    this.physics();
};
_0x4cfe85.prototype.physics = function() {
    if (this.go) {
        var _0x2dda0e = vec2.normalize(vec2.subtract(this.loc[this.dir ? 0x0 : 0x1], this.pos)),
            _0xdc59b = vec2.distance(this.pos, this.loc[this.dir ? 0x0 : 0x1]),
            _0x2dda0e = vec2.scale(_0x2dda0e, Math.min(this.speed, _0xdc59b));
        this.pos = vec2.add(this.pos, _0x2dda0e);
        for (_0xdc59b = 0x0; _0xdc59b < this.riders.length; _0xdc59b++) {
            var _0x2d9a71 = this.riders[0x0];
            _0x2d9a71.pos = vec2.add(_0x2d9a71.pos, _0x2dda0e);
        }
    }
    this.riders = [];
};
_0x4cfe85.prototype.start = function() {
    this.go = !0x0;
};
_0x4cfe85.prototype.riding = function(_0x401e16) {
    _0x401e16.pid !== this.game.pid || this.go || this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0xa1));
    this.riders.push(_0x401e16);
};
_0x4cfe85.prototype.kill = function() {};
_0x4cfe85.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x4cfe85.prototype.destroy = _0x2b132.prototype.destroy;
_0x4cfe85.prototype.setState = function(_0x55d970) {
    _0x55d970 !== this.state && (this.state = _0x55d970, this.sprite = _0x55d970.SPRITE[0x0], this.anim = 0x0);
};
_0x4cfe85.prototype.draw = function(_0x11da07) {
    if (!(0x0 < this.delay))
        for (var _0x1a4034 = 0x0; _0x1a4034 < this.dim.x; _0x1a4034++) _0x11da07.push({
            'pos': vec2.add(this.pos, vec2.make(_0x1a4034, 0x0)),
            'reverse': this.reverse,
            'index': this.sprite.INDEX,
            'mode': 0x0
        });
};
_0x2b132.REGISTER_OBJECT(_0x4cfe85);
"use strict";

function _0x46ee61(_0x43cafb, _0x1b4d7d, _0x5303ae, _0x4a0edf, _0x5a783c) {
    _0x2b132.call(this, _0x43cafb, _0x1b4d7d, _0x5303ae, _0x4a0edf);
    this.oid = _0x5a783c;
    this.setState(_0x46ee61.STATE.EXTEND);
    this.anim = 0x0;
    this.pos = vec2.add(this.pos, _0x46ee61.SOFFSET);
    this.dim = vec2.make(0.8, 0x2);
}
_0x46ee61.ASYNC = !0x0;
_0x46ee61.ID = 0x95;
_0x46ee61.NAME = "SPRING";
_0x46ee61.ANIMATION_RATE = 0x3;
_0x46ee61.SOFFSET = vec2.make(0.1, 0x0);
_0x46ee61.THRESHOLD = [0x1, 0.5];
_0x46ee61.POWER = 0.45;
_0x46ee61.SPRITE = {};
_0x46ee61.SPRITE_LIST = [{
    'NAME': "STAGE0",
    'ID': 0x0,
    'INDEX': [
        [0xa1],
        [0x91]
    ]
}, {
    'NAME': "STAGE1",
    'ID': 0x1,
    'INDEX': 0xa2
}, {
    'NAME': "STAGE2",
    'ID': 0x2,
    'INDEX': 0xa3
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x46ee61.SPRITE_LIST.length; _0x4f3eec++) _0x46ee61.SPRITE[_0x46ee61.SPRITE_LIST[_0x4f3eec].NAME] = _0x46ee61.SPRITE_LIST[_0x4f3eec], _0x46ee61.SPRITE[_0x46ee61.SPRITE_LIST[_0x4f3eec].ID] = _0x46ee61.SPRITE_LIST[_0x4f3eec];
_0x46ee61.STATE = {};
_0x46ee61.STATE_LIST = [{
    'NAME': "EXTEND",
    'ID': 0x0,
    'SPRITE': [_0x46ee61.SPRITE.STAGE0]
}, {
    'NAME': "HALF",
    'ID': 0x1,
    'SPRITE': [_0x46ee61.SPRITE.STAGE1]
}, {
    'NAME': "COMPRESS",
    'ID': 0x2,
    'SPRITE': [_0x46ee61.SPRITE.STAGE2]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x46ee61.STATE_LIST.length; _0x4f3eec++) _0x46ee61.STATE[_0x46ee61.STATE_LIST[_0x4f3eec].NAME] = _0x46ee61.STATE_LIST[_0x4f3eec], _0x46ee61.STATE[_0x46ee61.STATE_LIST[_0x4f3eec].ID] = _0x46ee61.STATE_LIST[_0x4f3eec];
_0x46ee61.prototype.update = function(_0x2026a4) {};
_0x46ee61.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x46ee61.ANIMATION_RATE) % this.state.SPRITE.length];
    this.interaction();
};
_0x46ee61.prototype.interaction = function() {
    var _0xa24419 = this.game.getPlayer();
    if (_0xa24419 && _0xa24419.level === this.level && _0xa24419.zone === this.zone && _0xa24419.isTangible() && squar.intersection(this.pos, this.dim, _0xa24419.pos, _0xa24419.dim)) {
        var _0x353727 = Math.pow(0x1 - 0.5 * Math.min(Math.max(0x0, _0xa24419.pos.y - this.pos.y), 0x2), 0x2);
        _0xa24419.fallSpeed >= 0.75 * PlayerObject.FALL_SPEED_MAX && _0xa24419.btnA && (_0xa24419.jumping = 0x0, _0xa24419.isSpring = !0x0);
        _0xa24419.fallSpeed += _0x353727 * _0x46ee61.POWER;
        _0xa24419.grounded = !0x1;
    }
    _0xa24419 = 0x2;
    for (_0x353727 = 0x0; _0x353727 < this.game.objects.length; _0x353727++) {
        var _0x47477a = this.game.objects[_0x353727];
        _0x47477a instanceof PlayerObject && _0x47477a.level === this.level && _0x47477a.zone === this.zone && _0x47477a.isTangible() && squar.intersection(this.pos, this.dim, _0x47477a.pos, _0x47477a.dim) && (_0x47477a = Math.min(Math.max(0x0, _0x47477a.pos.y - this.pos.y), 0x2), _0x47477a < _0xa24419 && (_0xa24419 = _0x47477a));
    }
    _0xa24419 < _0x46ee61.THRESHOLD[0x1] ? this.setState(_0x46ee61.STATE.COMPRESS) : _0xa24419 < _0x46ee61.THRESHOLD[0x0] ? this.setState(_0x46ee61.STATE.HALF) : this.setState(_0x46ee61.STATE.EXTEND);
};
_0x46ee61.prototype.kill = function() {};
_0x46ee61.prototype.destroy = _0x2b132.prototype.destroy;
_0x46ee61.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x46ee61.prototype.setState = function(_0x2251bb) {
    _0x2251bb !== this.state && (this.state = _0x2251bb, this.sprite = _0x2251bb.SPRITE[0x0], this.anim = 0x0);
};
_0x46ee61.prototype.draw = function(_0x5eb5a4) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x27f27e = this.sprite.INDEX, _0xbdb523 = 0x0; _0xbdb523 < _0x27f27e.length; _0xbdb523++)
            for (var _0x1edf09 = 0x0; _0x1edf09 < _0x27f27e[_0xbdb523].length; _0x1edf09++) _0x5eb5a4.push({
                'pos': vec2.subtract(vec2.add(this.pos, vec2.make(_0x1edf09, _0xbdb523)), _0x46ee61.SOFFSET),
                'reverse': !0x1,
                'index': _0x27f27e[_0xbdb523][_0x1edf09]
            });
    else _0x5eb5a4.push({
        'pos': vec2.subtract(this.pos, _0x46ee61.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0x46ee61);
"use strict";

function _0x42a575(_0x276916, _0xcbf248, _0x24ad25, _0x224748, _0x35727a) {
    _0x2b132.call(this, _0x276916, _0xcbf248, _0x24ad25, _0x224748);
    this.oid = _0x35727a;
    this.setState(_0x42a575.STATE.IDLE);
    this.anim = 0x0;
}
_0x42a575.ASYNC = !0x0;
_0x42a575.ID = 0xb1;
_0x42a575.NAME = "FLAG";
_0x42a575.ANIMATION_RATE = 0x3;
_0x42a575.OFFSET = vec2.make(-0.5, 0x0);
_0x42a575.SPRITE = {};
_0x42a575.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0x90
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x42a575.SPRITE_LIST.length; _0x4f3eec++) _0x42a575.SPRITE[_0x42a575.SPRITE_LIST[_0x4f3eec].NAME] = _0x42a575.SPRITE_LIST[_0x4f3eec], _0x42a575.SPRITE[_0x42a575.SPRITE_LIST[_0x4f3eec].ID] = _0x42a575.SPRITE_LIST[_0x4f3eec];
_0x42a575.STATE = {};
_0x42a575.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x42a575.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x42a575.STATE_LIST.length; _0x4f3eec++) _0x42a575.STATE[_0x42a575.STATE_LIST[_0x4f3eec].NAME] = _0x42a575.STATE_LIST[_0x4f3eec], _0x42a575.STATE[_0x42a575.STATE_LIST[_0x4f3eec].ID] = _0x42a575.STATE_LIST[_0x4f3eec];
_0x42a575.prototype.update = function(_0x10c700) {};
_0x42a575.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x42a575.ANIMATION_RATE) % this.state.SPRITE.length];
};
_0x42a575.prototype.kill = function() {};
_0x42a575.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x42a575.prototype.destroy = _0x2b132.prototype.destroy;
_0x42a575.prototype.setState = function(_0x34112a) {
    _0x34112a !== this.state && (this.state = _0x34112a, this.sprite = _0x34112a.SPRITE[0x0], this.anim = 0x0);
};
_0x42a575.prototype.draw = function(_0x262304) {
    _0x262304.push({
        'pos': vec2.add(this.pos, _0x42a575.OFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0x42a575);
"use strict";

function _0x322232(_0x460130, _0x4ad7fb, _0x34adff, _0x274267, _0x58f6c1, _0x1cc747, _0x52430d) {
    _0x2b132.call(this, _0x460130, _0x4ad7fb, _0x34adff, _0x274267);
    this.oid = _0x58f6c1;
    this.state = _0x322232.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x1 === parseInt(_0x1cc747) ? 0x2 * _0x322232.SPIN_RATE : 0x0;
    this.dim = vec2.make(0.5, 0.5);
    this.size = isNaN(parseInt(_0x52430d)) ? _0x322232.PARTS : parseInt(_0x52430d);
}
_0x322232.ASYNC = !0x0;
_0x322232.ID = 0x21;
_0x322232.NAME = "FIRE TRAP";
_0x322232.ANIMATION_RATE = 0x2;
_0x322232.OFFSET = vec2.make(0.25, 0.25);
_0x322232.PARTS = 0x6;
_0x322232.SPACING = 0.5;
_0x322232.SPIN_RATE = 0x17;
_0x322232.SPRITE = {};
_0x322232.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xd0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xd1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xd2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xd3
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x322232.SPRITE_LIST.length; _0x4f3eec++) _0x322232.SPRITE[_0x322232.SPRITE_LIST[_0x4f3eec].NAME] = _0x322232.SPRITE_LIST[_0x4f3eec], _0x322232.SPRITE[_0x322232.SPRITE_LIST[_0x4f3eec].ID] = _0x322232.SPRITE_LIST[_0x4f3eec];
_0x322232.STATE = {};
_0x322232.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x322232.SPRITE.IDLE0, _0x322232.SPRITE.IDLE1, _0x322232.SPRITE.IDLE2, _0x322232.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x322232.STATE_LIST.length; _0x4f3eec++) _0x322232.STATE[_0x322232.STATE_LIST[_0x4f3eec].NAME] = _0x322232.STATE_LIST[_0x4f3eec], _0x322232.STATE[_0x322232.STATE_LIST[_0x4f3eec].ID] = _0x322232.STATE_LIST[_0x4f3eec];
_0x322232.prototype.update = function() {};
_0x322232.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x322232.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.interaction();
};
_0x322232.prototype.control = function() {
    this.rot += _0x322232.SPIN_RATE;
};
_0x322232.prototype.interaction = function() {
    var _0xf47674 = vec2.normalize(vec2.make(Math.sin(-this.anim / _0x322232.SPIN_RATE), Math.cos(-this.anim / _0x322232.SPIN_RATE))),
        _0x332592 = this.game.getPlayer();
    if (_0x332592 && _0x332592.isTangible() && _0x332592.level === this.level && _0x332592.zone === this.zone)
        for (var _0x2d6075 = 0x0; _0x2d6075 < this.size; _0x2d6075++) {
            var _0x22c2fb = vec2.add(vec2.add(this.pos, _0x322232.OFFSET), vec2.scale(_0xf47674, _0x322232.SPACING * _0x2d6075));
            squar.intersection(_0x332592.pos, _0x332592.dim, _0x22c2fb, this.dim) && _0x332592.damage(this);
        }
};
_0x322232.prototype.playerCollide = function(_0x22255a) {};
_0x322232.prototype.playerStomp = function(_0x265fcb) {};
_0x322232.prototype.playerBump = function(_0x5d49e1) {};
_0x322232.prototype.kill = function() {};
_0x322232.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x322232.prototype.destroy = _0x2b132.prototype.destroy;
_0x322232.prototype.setState = function(_0x133892) {
    _0x133892 !== this.state && (this.state = _0x133892, this.sprite = _0x133892.SPRITE[0x0], this.anim = 0x0);
};
_0x322232.prototype.draw = function(_0x2273f4) {
    for (var _0x3dc5bf = vec2.normalize(vec2.make(Math.sin(-this.anim / _0x322232.SPIN_RATE), Math.cos(-this.anim / _0x322232.SPIN_RATE))), _0x5d8ad2 = 0x0; _0x5d8ad2 < this.size; _0x5d8ad2++) _0x2273f4.push({
        'pos': vec2.add(this.pos, vec2.scale(_0x3dc5bf, _0x322232.SPACING * _0x5d8ad2)),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0x322232);
"use strict";

function _0x5df470(_0x38be3f, _0x23eece, _0x5eeb36, _0x4fd4e2, _0x3c448a, _0x350935, _0x561aa2) {
    _0x2b132.call(this, _0x38be3f, _0x23eece, _0x5eeb36, _0x4fd4e2);
    this.oid = _0x3c448a;
    this.setState(_0x5df470.STATE.IDLE);
    this.delay = isNaN(parseInt(_0x350935)) ? _0x5df470.DELAY_DEFAULT : parseInt(_0x350935);
    this.impulse = isNaN(parseFloat(_0x561aa2)) ? 0x1 : parseFloat(_0x561aa2);
    this.anim = 0x0;
    this.delayTimer = this.delay;
    this.pos.x += _0x5df470.SOFFSET.x;
    this.loc = vec2.copy(this.pos);
    this.fallSpeed = 0x0;
    this.dim = vec2.make(0.7, 0.7);
}
_0x5df470.ASYNC = !0x0;
_0x5df470.ID = 0x22;
_0x5df470.NAME = "FIRE BLAST";
_0x5df470.ANIMATION_RATE = 0x3;
_0x5df470.DELAY_DEFAULT = 0x5a;
_0x5df470.IMPULSE = 1.35;
_0x5df470.DRAG = 0.95;
_0x5df470.FALL_SPEED_ACCEL = 0.055;
_0x5df470.SOFFSET = vec2.make(0.15, 0.15);
_0x5df470.SPRITE = {};
_0x5df470.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xdb
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x5df470.SPRITE_LIST.length; _0x4f3eec++) _0x5df470.SPRITE[_0x5df470.SPRITE_LIST[_0x4f3eec].NAME] = _0x5df470.SPRITE_LIST[_0x4f3eec], _0x5df470.SPRITE[_0x5df470.SPRITE_LIST[_0x4f3eec].ID] = _0x5df470.SPRITE_LIST[_0x4f3eec];
_0x5df470.STATE = {};
_0x5df470.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x5df470.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x5df470.STATE_LIST.length; _0x4f3eec++) _0x5df470.STATE[_0x5df470.STATE_LIST[_0x4f3eec].NAME] = _0x5df470.STATE_LIST[_0x4f3eec], _0x5df470.STATE[_0x5df470.STATE_LIST[_0x4f3eec].ID] = _0x5df470.STATE_LIST[_0x4f3eec];
_0x5df470.prototype.update = function(_0x19fa90) {};
_0x5df470.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x5df470.ANIMATION_RATE) % this.state.SPRITE.length];
    0x0 < this.delayTimer ? this.delayTimer-- : this.blast();
    this.physics();
};
_0x5df470.prototype.physics = function() {
    if (this.pos.y > this.loc.y || 0x0 < this.fallSpeed) this.fallSpeed = (this.fallSpeed - _0x5df470.FALL_SPEED_ACCEL) * _0x5df470.DRAG, this.pos.y += this.fallSpeed;
};
_0x5df470.prototype.blast = function() {
    this.pos = vec2.copy(this.loc);
    this.fallSpeed = _0x5df470.IMPULSE * this.impulse;
    this.delayTimer = this.delay;
};
_0x5df470.prototype.playerCollide = function(_0xa4b7ce) {
    this.dead || this.garbage || _0xa4b7ce.damage(this);
};
_0x5df470.prototype.playerStomp = function(_0x1dfd08) {
    this.playerCollide(_0x1dfd08);
};
_0x5df470.prototype.playerBump = function(_0x5ce1d9) {
    this.playerCollide(_0x5ce1d9);
};
_0x5df470.prototype.kill = function() {};
_0x5df470.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x5df470.prototype.destroy = _0x2b132.prototype.destroy;
_0x5df470.prototype.setState = function(_0x565fa9) {
    _0x565fa9 !== this.state && (this.state = _0x565fa9, this.sprite = _0x565fa9.SPRITE[0x0], this.anim = 0x0);
};
_0x5df470.prototype.draw = function(_0x2cfcb6) {
    var _0x1e8001 = 0x0 <= this.fallSpeed ? 0x0 : 0x3;
    _0x2cfcb6.push({
        'pos': vec2.subtract(this.pos, _0x5df470.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': _0x1e8001
    });
};
_0x2b132.REGISTER_OBJECT(_0x5df470);
"use strict";

function _0x42040c(_0x50d499, _0x35d6ca, _0x559c3e, _0x146778, _0x116a1d, _0x50587c) {
    _0x2b132.call(this, _0x50d499, _0x35d6ca, _0x559c3e, _0x146778);
    this.oid = _0x116a1d;
    this.setState(_0x42040c.STATE.IDLE);
    this.fireTimer = 0x0;
    this.delay = isNaN(parseInt(_0x50587c)) ? _0x42040c.FIRE_DELAY_DEFAULT : parseInt(_0x50587c);
}
_0x42040c.ASYNC = !0x0;
_0x42040c.ID = 0x23;
_0x42040c.NAME = "LAUNCHER";
_0x42040c.ANIMATION_RATE = 0x3;
_0x42040c.FIRE_DELAY_DEFAULT = 0x96;
_0x42040c.SPRITE = {};
_0x42040c.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xff
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x42040c.SPRITE_LIST.length; _0x4f3eec++) _0x42040c.SPRITE[_0x42040c.SPRITE_LIST[_0x4f3eec].NAME] = _0x42040c.SPRITE_LIST[_0x4f3eec], _0x42040c.SPRITE[_0x42040c.SPRITE_LIST[_0x4f3eec].ID] = _0x42040c.SPRITE_LIST[_0x4f3eec];
_0x42040c.STATE = {};
_0x42040c.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x42040c.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x42040c.STATE_LIST.length; _0x4f3eec++) _0x42040c.STATE[_0x42040c.STATE_LIST[_0x4f3eec].NAME] = _0x42040c.STATE_LIST[_0x4f3eec], _0x42040c.STATE[_0x42040c.STATE_LIST[_0x4f3eec].ID] = _0x42040c.STATE_LIST[_0x4f3eec];
_0x42040c.prototype.update = function(_0x552576) {};
_0x42040c.prototype.step = function() {
    ++this.fireTimer > this.delay && this.fire();
    this.sound();
};
_0x42040c.prototype.sound = _0x2b132.prototype.sound;
_0x42040c.prototype.fire = function() {
    this.fireTimer = 0x0;
    this.game.createObject(_0x34d645.ID, this.level, this.zone, vec2.copy(this.pos), []);
    this.play("sfx/firework.wav", 0x1, 0.04);
};
_0x42040c.prototype.kill = function() {};
_0x42040c.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x42040c.prototype.destroy = _0x2b132.prototype.destroy;
_0x42040c.prototype.setState = function(_0x17f68f) {
    _0x17f68f !== this.state && (this.state = _0x17f68f, this.sprite = _0x17f68f.SPRITE[0x0], this.anim = 0x0);
};
_0x42040c.prototype.draw = function(_0x1bacc4) {};
_0x42040c.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x42040c);
"use strict";

function _0x34d645(_0x5f4be1, _0x473f3c, _0x24514b, _0x18c3c6, _0x2a1ed7) {
    _0x2b132.call(this, _0x5f4be1, _0x473f3c, _0x24514b, _0x18c3c6);
    this.oid = _0x2a1ed7;
    this.setState(_0x34d645.STATE.IDLE);
    this.bonkTimer = this.anim = 0x0;
    this.dim = vec2.make(0.8, 0.8);
    this.fallSpeed = this.moveSpeed = 0x0;
}
_0x34d645.ASYNC = !0x0;
_0x34d645.ID = 0x24;
_0x34d645.NAME = "BULLET";
_0x34d645.ANIMATION_RATE = 0x3;
_0x34d645.SPEED = 0.215;
_0x34d645.BONK_TIME = 0x5a;
_0x34d645.BONK_IMP = vec2.make(0.25, 0.4);
_0x34d645.BONK_DECEL = 0.925;
_0x34d645.BONK_FALL_SPEED = 0.5;
_0x34d645.BONK_FALL_ACCEL = 0.085;
_0x34d645.DELAY_DEFAULT = 0x113;
_0x34d645.IMPULSE = vec2.make(0.225, 0.335);
_0x34d645.DRAG = 0.996;
_0x34d645.FALL_SPEED_ACCEL = 0.0055;
_0x34d645.SOFFSET = vec2.make(0.15, 0.15);
_0x34d645.SPRITE = {};
_0x34d645.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xcd
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x34d645.SPRITE_LIST.length; _0x4f3eec++) _0x34d645.SPRITE[_0x34d645.SPRITE_LIST[_0x4f3eec].NAME] = _0x34d645.SPRITE_LIST[_0x4f3eec], _0x34d645.SPRITE[_0x34d645.SPRITE_LIST[_0x4f3eec].ID] = _0x34d645.SPRITE_LIST[_0x4f3eec];
_0x34d645.STATE = {};
_0x34d645.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x34d645.SPRITE.IDLE]
}, {
    'NAME': "BONK",
    'ID': 0x51,
    'SPRITE': []
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x34d645.STATE_LIST.length; _0x4f3eec++) _0x34d645.STATE[_0x34d645.STATE_LIST[_0x4f3eec].NAME] = _0x34d645.STATE_LIST[_0x4f3eec], _0x34d645.STATE[_0x34d645.STATE_LIST[_0x4f3eec].ID] = _0x34d645.STATE_LIST[_0x4f3eec];
_0x34d645.prototype.update = function(_0x51e68b) {};
_0x34d645.prototype.step = function() {
    this.state === _0x34d645.STATE.BONK ? this.bonkTimer++ > _0x34d645.BONK_TIME || 0x0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)), this.moveSpeed *= _0x34d645.BONK_DECEL, this.fallSpeed = Math.max(this.fallSpeed - _0x34d645.BONK_FALL_ACCEL, -_0x34d645.BONK_FALL_SPEED)) : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x34d645.ANIMATION_RATE) % this.state.SPRITE.length], this.physics(), this.sound());
};
_0x34d645.prototype.physics = function() {
    0x0 < this.pos.x ? this.pos.x -= _0x34d645.SPEED : this.destroy();
};
_0x34d645.prototype.sound = _0x2b132.prototype.sound;
_0x34d645.prototype.disable = function() {
    this.disabled = !0x0;
};
_0x34d645.prototype.enable = function() {
    this.disabled = !0x1;
};
_0x34d645.prototype.damage = function(_0x1e0e84) {};
_0x34d645.prototype.bonk = function() {
    this.dead || (this.setState(_0x34d645.STATE.BONK), this.moveSpeed = _0x34d645.BONK_IMP.x, this.fallSpeed = _0x34d645.BONK_IMP.y, this.dead = !0x0, this.play("sfx/kick.wav", 0x1, 0.04));
};
_0x34d645.prototype.playerCollide = function(_0x253aea) {
    this.dead || this.garbage || _0x253aea.damage(this);
};
_0x34d645.prototype.playerStomp = function(_0x15fee9) {
    this.dead || this.garbage || (_0x15fee9.bounce(), this.play("sfx/stomp.wav", 0x1, 0.04), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x1)));
};
_0x34d645.prototype.playerBump = function(_0x58e4a2) {
    this.playerCollide(_0x58e4a2);
};
_0x34d645.prototype.kill = function() {};
_0x34d645.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x34d645.prototype.destroy = _0x2b132.prototype.destroy;
_0x34d645.prototype.setState = function(_0x570365) {
    _0x570365 !== this.state && (this.state = _0x570365, 0x0 < _0x570365.SPRITE.length && (this.sprite = _0x570365.SPRITE[0x0]), this.anim = 0x0);
};
_0x34d645.prototype.draw = function(_0x4ce88a) {
    var _0x12adae;
    _0x12adae = this.state === _0x34d645.STATE.BONK ? 0x3 : 0x0;
    _0x4ce88a.push({
        'pos': vec2.subtract(this.pos, _0x34d645.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': _0x12adae
    });
};
_0x34d645.prototype.play = _0x2b132.prototype.play;
_0x2b132.REGISTER_OBJECT(_0x34d645);
"use strict";

function _0xae11c9(_0x4acaa0, _0x3243e4, _0x19fca4, _0x38c3ed, _0x2558fa, _0xdb54) {
    _0x2b132.call(this, _0x4acaa0, _0x3243e4, _0x19fca4, _0x38c3ed);
    this.owner = _0xdb54;
    this.state = _0xae11c9.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.deadTimer = this.anim = 0x0;
    this.dim = vec2.make(0.5, 0.5);
    this.fallSpeed = -_0xae11c9.FALL_SPEED_MAX;
    this.dir = _0x2558fa;
}
_0xae11c9.ASYNC = !0x0;
_0xae11c9.ID = 0xa1;
_0xae11c9.NAME = "FIREBALL PROJECTILE";
_0xae11c9.ANIMATION_RATE = 0x2;
_0xae11c9.SOFFSET = vec2.make(-0.25, -0.25);
_0xae11c9.DEAD_ANIM_LENGTH = 0x3;
_0xae11c9.SPEED = 0.475;
_0xae11c9.BOUNCE_SPEED = 0.425;
_0xae11c9.FALL_SPEED_MAX = 0.525;
_0xae11c9.FALL_SPEED_ACCEL = 0.075;
_0xae11c9.SPRITE = {};
_0xae11c9.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xd0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xd1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xd2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xd3
}, {
    'NAME': "DEAD0",
    'ID': 0x4,
    'INDEX': 0xd4
}, {
    'NAME': "DEAD1",
    'ID': 0x5,
    'INDEX': 0xd5
}, {
    'NAME': "DEAD2",
    'ID': 0x6,
    'INDEX': 0xd6
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0xae11c9.SPRITE_LIST.length; _0x4f3eec++) _0xae11c9.SPRITE[_0xae11c9.SPRITE_LIST[_0x4f3eec].NAME] = _0xae11c9.SPRITE_LIST[_0x4f3eec], _0xae11c9.SPRITE[_0xae11c9.SPRITE_LIST[_0x4f3eec].ID] = _0xae11c9.SPRITE_LIST[_0x4f3eec];
_0xae11c9.STATE = {};
_0xae11c9.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0xae11c9.SPRITE.IDLE0, _0xae11c9.SPRITE.IDLE1, _0xae11c9.SPRITE.IDLE2, _0xae11c9.SPRITE.IDLE3]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [_0xae11c9.SPRITE.DEAD0, _0xae11c9.SPRITE.DEAD1, _0xae11c9.SPRITE.DEAD2]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0xae11c9.STATE_LIST.length; _0x4f3eec++) _0xae11c9.STATE[_0xae11c9.STATE_LIST[_0x4f3eec].NAME] = _0xae11c9.STATE_LIST[_0x4f3eec], _0xae11c9.STATE[_0xae11c9.STATE_LIST[_0x4f3eec].ID] = _0xae11c9.STATE_LIST[_0x4f3eec];
_0xae11c9.prototype.update = function(_0x584933) {};
_0xae11c9.prototype.step = function() {
    this.state === _0xae11c9.STATE.DEAD ? this.deadTimer < _0xae11c9.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0xae11c9.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.interaction(), 0x0 > this.pos.y && this.kill());
};
_0xae11c9.prototype.control = function() {};
_0xae11c9.prototype.physics = function() {
    var _0x2a0bfe = this.dir ? _0xae11c9.SPEED : -_0xae11c9.SPEED;
    this.fallSpeed = Math.max(this.fallSpeed - _0xae11c9.FALL_SPEED_ACCEL, -_0xae11c9.FALL_SPEED_MAX);
    for (var _0x5b9a3f = vec2.add(this.pos, vec2.make(_0x2a0bfe, this.fallSpeed)), _0x5186fe = vec2.make(this.pos.x + Math.min(0x0, _0x2a0bfe), this.pos.y + Math.min(0x0, this.fallSpeed)), _0x2a0bfe = vec2.make(this.dim.x + Math.max(0x0, _0x2a0bfe), this.dim.y + Math.max(0x0, this.fallSpeed)), _0x540315 = this.game.world.getZone(this.level, this.zone).getTiles(_0x5186fe, _0x2a0bfe), _0x5186fe = vec2.make(0x1, 0x1), _0x2a0bfe = [], _0x3056db = 0x0; _0x3056db < _0x540315.length; _0x3056db++) {
        var _0x531f4b = _0x540315[_0x3056db];
        _0x531f4b.definition.COLLIDE && (squar.intersection(_0x531f4b.pos, _0x5186fe, _0x5b9a3f, this.dim) || squar.intersection(_0x531f4b.pos, _0x5186fe, this.pos, this.dim)) && _0x2a0bfe.push(_0x531f4b);
    }
    _0x540315 = vec2.make(_0x5b9a3f.x, this.pos.y);
    for (_0x3056db = 0x0; _0x3056db < _0x2a0bfe.length; _0x3056db++) _0x531f4b = _0x2a0bfe[_0x3056db], squar.intersection(_0x531f4b.pos, _0x5186fe, _0x540315, this.dim) && (_0x540315.x = _0x540315.x + 0.5 * this.dim.x < _0x531f4b.pos.x + 0.5 * _0x5186fe.x ? _0x531f4b.pos.x - this.dim.x : _0x531f4b.pos.x + _0x5186fe.x, this.kill());
    _0x5b9a3f.x = _0x540315.x;
    for (_0x3056db = 0x0; _0x3056db < _0x2a0bfe.length; _0x3056db++) _0x531f4b = _0x2a0bfe[_0x3056db], squar.intersection(_0x531f4b.pos, _0x5186fe, _0x5b9a3f, this.dim) && (this.pos.y >= _0x5b9a3f.y ? (_0x5b9a3f.y = _0x531f4b.pos.y + _0x5186fe.y, this.fallSpeed = _0xae11c9.BOUNCE_SPEED) : (_0x5b9a3f.y = _0x531f4b.pos.y - this.dim.y, this.fallSpeed = -_0xae11c9.BOUNCE_SPEED));
    this.pos = _0x5b9a3f;
};
_0xae11c9.prototype.interaction = function() {
    for (var _0x16557a = 0x0; _0x16557a < this.game.objects.length; _0x16557a++) {
        var _0x2aac1a = this.game.objects[_0x16557a];
        if (_0x2aac1a !== this && _0x2aac1a.pid !== this.owner && _0x2aac1a.isTangible() && !(_0x2aac1a instanceof PlayerObject) && _0x2aac1a.damage && _0x2aac1a.level === this.level && _0x2aac1a.zone === this.zone && squar.intersection(_0x2aac1a.pos, _0x2aac1a.dim, this.pos, this.dim)) {
            this.owner === this.game.pid && _0x2aac1a.damage(this);
            this.kill();
            break;
        }
    }
};
_0xae11c9.prototype.playerCollide = function(_0x54be8a) {};
_0xae11c9.prototype.playerStomp = function(_0x8bb56b) {};
_0xae11c9.prototype.playerBump = function(_0x596cc1) {};
_0xae11c9.prototype.kill = function() {
    this.setState(_0xae11c9.STATE.DEAD);
    this.dead = !0x0;
};
_0xae11c9.prototype.isTangible = _0x2b132.prototype.isTangible;
_0xae11c9.prototype.destroy = _0x2b132.prototype.destroy;
_0xae11c9.prototype.setState = function(_0x39a75f) {
    _0x39a75f !== this.state && (this.state = _0x39a75f, this.sprite = _0x39a75f.SPRITE[0x0], this.anim = 0x0);
};
_0xae11c9.prototype.draw = function(_0x3a6b81) {
    _0x3a6b81.push({
        'pos': vec2.add(this.pos, _0xae11c9.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0xae11c9);
"use strict";

function _0x494911(_0x12d9d5, _0x504bcb, _0x139e4e, _0x39acd0) {
    _0x2b132.call(this, _0x12d9d5, _0x504bcb, _0x139e4e, _0x39acd0);
    this.state = _0x494911.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.life = _0x494911.LIFE_MAX;
    this.deadTimer = 0x0;
    this.dim = vec2.make(0x1, 0.5);
}
_0x494911.ASYNC = !0x0;
_0x494911.ID = 0xa2;
_0x494911.NAME = "FIRE BREATH PROJECTILE";
_0x494911.ANIMATION_RATE = 0x2;
_0x494911.SOFFSET = vec2.make(-0.5, -0.25);
_0x494911.LIFE_MAX = 0xaf;
_0x494911.DEAD_ANIM_LENGTH = 0x3;
_0x494911.SPEED = 0.175;
_0x494911.SPRITE = {};
_0x494911.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': [
        [0xd7, 0xd8]
    ]
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': [
        [0xd9, 0xda]
    ]
}, {
    'NAME': "DEAD0",
    'ID': 0x4,
    'INDEX': 0xd4
}, {
    'NAME': "DEAD1",
    'ID': 0x5,
    'INDEX': 0xd5
}, {
    'NAME': "DEAD2",
    'ID': 0x6,
    'INDEX': 0xd6
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x494911.SPRITE_LIST.length; _0x4f3eec++) _0x494911.SPRITE[_0x494911.SPRITE_LIST[_0x4f3eec].NAME] = _0x494911.SPRITE_LIST[_0x4f3eec], _0x494911.SPRITE[_0x494911.SPRITE_LIST[_0x4f3eec].ID] = _0x494911.SPRITE_LIST[_0x4f3eec];
_0x494911.STATE = {};
_0x494911.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x494911.SPRITE.IDLE0, _0x494911.SPRITE.IDLE1]
}, {
    'NAME': "DEAD",
    'ID': 0x50,
    'SPRITE': [_0x494911.SPRITE.DEAD0, _0x494911.SPRITE.DEAD1, _0x494911.SPRITE.DEAD2]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x494911.STATE_LIST.length; _0x4f3eec++) _0x494911.STATE[_0x494911.STATE_LIST[_0x4f3eec].NAME] = _0x494911.STATE_LIST[_0x4f3eec], _0x494911.STATE[_0x494911.STATE_LIST[_0x4f3eec].ID] = _0x494911.STATE_LIST[_0x4f3eec];
_0x494911.prototype.update = function(_0x1fd983) {};
_0x494911.prototype.step = function() {
    this.state === _0x494911.STATE.DEAD ? this.deadTimer < _0x494911.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++, this.sprite = this.state.SPRITE[parseInt(this.anim / _0x494911.ANIMATION_RATE) % this.state.SPRITE.length], this.control(), this.physics(), this.interaction(), 0x1 > this.life-- && this.kill());
};
_0x494911.prototype.control = function() {};
_0x494911.prototype.physics = function() {
    this.pos = vec2.add(this.pos, vec2.make(-_0x494911.SPEED, 0x0));
};
_0x494911.prototype.interaction = function() {
    for (var _0x148792 = 0x0; _0x148792 < this.game.objects.length; _0x148792++) {
        var _0x4b7725 = this.game.objects[_0x148792];
        if (_0x4b7725 instanceof PlayerObject && _0x4b7725.isTangible() && _0x4b7725.level === this.level && _0x4b7725.zone === this.zone && squar.intersection(_0x4b7725.pos, _0x4b7725.dim, this.pos, this.dim)) {
            _0x4b7725.pid === this.game.pid && _0x4b7725.damage(this);
            this.kill();
            break;
        }
    }
};
_0x494911.prototype.playerCollide = function(_0x406824) {};
_0x494911.prototype.playerStomp = function(_0x436ce9) {};
_0x494911.prototype.playerBump = function(_0x4e8b6b) {};
_0x494911.prototype.kill = function() {
    this.dead = !0x0;
    this.setState(_0x494911.STATE.DEAD);
};
_0x494911.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x494911.prototype.destroy = _0x2b132.prototype.destroy;
_0x494911.prototype.setState = function(_0x12c8c3) {
    _0x12c8c3 !== this.state && (this.state = _0x12c8c3, this.sprite = _0x12c8c3.SPRITE[0x0], this.anim = 0x0);
};
_0x494911.prototype.draw = function(_0x46dfc3) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x23a0c8 = this.sprite.INDEX, _0x405d13 = 0x0; _0x405d13 < _0x23a0c8.length; _0x405d13++)
            for (var _0xaf48ab = 0x0; _0xaf48ab < _0x23a0c8[_0x405d13].length; _0xaf48ab++) _0x46dfc3.push({
                'pos': vec2.add(vec2.add(this.pos, _0x494911.SOFFSET), vec2.make(_0xaf48ab, _0x405d13)),
                'reverse': !0x1,
                'index': _0x23a0c8[_0x405d13][_0xaf48ab]
            });
    else _0x46dfc3.push({
        'pos': vec2.add(this.pos, _0x494911.SOFFSET),
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0x494911);
"use strict";

function _0xde7ae5(_0x1127d4, _0xab1245, _0x9c54a9, _0x6aed4f, _0x1efdf6) {
    _0x2b132.call(this, _0x1127d4, _0xab1245, _0x9c54a9, _0x6aed4f);
    this.owner = _0x1efdf6;
    this.setState(_0xde7ae5.STATE.IDLE);
    this.anim = 0x0;
    this.throwTimer = _0xde7ae5.THROW_DELAY;
    this.dir = !0x1;
    this.dim = vec2.make(0.5, 0.5);
}
_0xde7ae5.ASYNC = !0x0;
_0xde7ae5.ID = 0xa3;
_0xde7ae5.NAME = "HAMMER PROJECTILE";
_0xde7ae5.ANIMATION_RATE = 0x2;
_0xde7ae5.SOFFSET = vec2.make(-0.25, -0.25);
_0xde7ae5.THROW_DELAY = 0xd;
_0xde7ae5.IMPULSE = vec2.make(0.48, 0.915);
_0xde7ae5.DRAG = 0.965;
_0xde7ae5.FALL_SPEED_MAX = 0.65;
_0xde7ae5.FALL_SPEED_ACCEL = 0.095;
_0xde7ae5.SPRITE = {};
_0xde7ae5.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xdd
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xdc
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xdf
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xde
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0xde7ae5.SPRITE_LIST.length; _0x4f3eec++) _0xde7ae5.SPRITE[_0xde7ae5.SPRITE_LIST[_0x4f3eec].NAME] = _0xde7ae5.SPRITE_LIST[_0x4f3eec], _0xde7ae5.SPRITE[_0xde7ae5.SPRITE_LIST[_0x4f3eec].ID] = _0xde7ae5.SPRITE_LIST[_0x4f3eec];
_0xde7ae5.STATE = {};
_0xde7ae5.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0xde7ae5.SPRITE.IDLE0]
}, {
    'NAME': "THROW",
    'ID': 0x1,
    'SPRITE': [_0xde7ae5.SPRITE.IDLE0, _0xde7ae5.SPRITE.IDLE1, _0xde7ae5.SPRITE.IDLE2, _0xde7ae5.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0xde7ae5.STATE_LIST.length; _0x4f3eec++) _0xde7ae5.STATE[_0xde7ae5.STATE_LIST[_0x4f3eec].NAME] = _0xde7ae5.STATE_LIST[_0x4f3eec], _0xde7ae5.STATE[_0xde7ae5.STATE_LIST[_0x4f3eec].ID] = _0xde7ae5.STATE_LIST[_0x4f3eec];
_0xde7ae5.prototype.update = function(_0x5745df) {};
_0xde7ae5.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0xde7ae5.ANIMATION_RATE) % this.state.SPRITE.length];
    0x0 < this.throwTimer ? this.throwTimer-- : (this.state === _0xde7ae5.STATE.IDLE && this.throw(), this.physics(), this.interaction(), 0x0 > this.pos.y && this.destroy());
};
_0xde7ae5.prototype.physics = function() {
    this.moveSpeed *= _0xde7ae5.DRAG;
    this.fallSpeed = Math.max(this.fallSpeed - _0xde7ae5.FALL_SPEED_ACCEL, -_0xde7ae5.FALL_SPEED_MAX);
    this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed));
};
_0xde7ae5.prototype.interaction = function() {
    if (this.state === _0xde7ae5.STATE.THROW) {
        var _0x8a4216 = this.game.getPlayer();
        _0x8a4216 && _0x8a4216.isTangible() && _0x8a4216.level === this.level && _0x8a4216.zone === this.zone && squar.intersection(_0x8a4216.pos, _0x8a4216.dim, this.pos, this.dim) && _0x8a4216.damage(this);
    }
};
_0xde7ae5.prototype.throw = function() {
    this.moveSpeed = this.dir ? _0xde7ae5.IMPULSE.x : -_0xde7ae5.IMPULSE.x;
    this.fallSpeed = _0xde7ae5.IMPULSE.y;
    this.setState(_0xde7ae5.STATE.THROW);
};
_0xde7ae5.prototype.playerCollide = function(_0x5ce6ce) {};
_0xde7ae5.prototype.playerStomp = function(_0x181336) {};
_0xde7ae5.prototype.playerBump = function(_0x23c51a) {};
_0xde7ae5.prototype.kill = function() {};
_0xde7ae5.prototype.destroy = _0x2b132.prototype.destroy;
_0xde7ae5.prototype.isTangible = _0x2b132.prototype.isTangible;
_0xde7ae5.prototype.setState = function(_0x1289d8) {
    _0x1289d8 !== this.state && (this.state = _0x1289d8, this.sprite = _0x1289d8.SPRITE[0x0], this.anim = 0x0);
};
_0xde7ae5.prototype.draw = function(_0x42ff8f) {
    if (this.sprite.INDEX instanceof Array)
        for (var _0x352199 = this.sprite.INDEX, _0x2c5891 = 0x0; _0x2c5891 < _0x352199.length; _0x2c5891++)
            for (var _0x3cbbc7 = 0x0; _0x3cbbc7 < _0x352199[_0x2c5891].length; _0x3cbbc7++) _0x42ff8f.push({
                'pos': vec2.add(vec2.add(this.pos, _0xde7ae5.SOFFSET), vec2.make(_0x3cbbc7, _0x2c5891)),
                'reverse': !0x1,
                'index': _0x352199[_0x2c5891][_0x3cbbc7]
            });
    else _0x42ff8f.push({
        'pos': vec2.add(this.pos, _0xde7ae5.SOFFSET),
        'reverse': this.dir,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(_0xde7ae5);
"use strict";

function _0x32e92f(_0x24c556, _0x47bde3, _0x102424, _0x4c6de6, _0x598b87) {
    _0x2b132.call(this, _0x24c556, _0x47bde3, _0x102424, _0x4c6de6);
    this.oid = _0x598b87;
    this.anim = 0x0;
    this.dim = vec2.make(0x1, 0x1);
    this.fallSpeed = this.moveSpeed = 0x0;
    this.rise = this.grounded = !0x1;
    _0x24c556 = vec2.make(0x1, 0x1);
    _0x47bde3 = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim);
    for (_0x102424 = 0x0; _0x102424 < _0x47bde3.length; _0x102424++)
        if (squar.intersection(_0x47bde3[_0x102424].pos, _0x24c556, this.pos, this.dim)) {
            this.rise = !0x0;
            break;
        }
    this.dir = !0x1;
    this.jump = -0x1;
}
_0x32e92f.ASYNC = !0x0;
_0x32e92f.ID = 0x50;
_0x32e92f.ANIMATION_RATE = 0x3;
_0x32e92f.MOVE_SPEED_MAX = 0.075;
_0x32e92f.FALL_SPEED_MAX = 0.45;
_0x32e92f.FALL_SPEED_ACCEL = 0.075;
_0x32e92f.JUMP_DECEL = 0.015;
_0x32e92f.JUMP_LENGTH = 0x3;
_0x32e92f.RISE_RATE = 0.15;
_0x32e92f.prototype.update = function(_0x53c0cb) {
    switch (_0x53c0cb) {
        case 0x0:
            this.kill();
    }
};
_0x32e92f.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / _0x32e92f.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.physics();
    0x0 > this.pos.y && this.kill();
};
_0x32e92f.prototype.control = function() {
    this.jump >= _0x32e92f.JUMP_LENGTH && (this.jump = -0x1);
};
_0x32e92f.prototype.physics = function() {
    if (this.rise) {
        this.rise = !0x1;
        for (var _0x451d23 = vec2.make(0x1, 0x1), _0x5a4bfe = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim), _0x165e89 = 0x0; _0x165e89 < _0x5a4bfe.length; _0x165e89++) {
            var _0x33ba28 = _0x5a4bfe[_0x165e89];
            if (_0x33ba28.definition.COLLIDE && squar.intersection(_0x33ba28.pos, _0x451d23, this.pos, this.dim)) {
                this.rise = !0x0;
                break;
            }
        }
        this.rise && (this.pos.y += _0x32e92f.RISE_RATE);
    } else {
        -0x1 !== this.jump ? (this.fallSpeed = _0x32e92f.FALL_SPEED_MAX - this.jump * _0x32e92f.JUMP_DECEL, this.jump++) : (this.grounded && (this.fallSpeed = 0x0), this.fallSpeed = Math.max(this.fallSpeed - _0x32e92f.FALL_SPEED_ACCEL, -_0x32e92f.FALL_SPEED_MAX));
        var _0x4a7264 = vec2.add(this.pos, vec2.make(this.moveSpeed, 0x0)),
            _0x3f6d1f = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
            _0x451d23 = vec2.make(0x0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0x0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed),
            _0x5a4bfe = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed)),
            _0x5a4bfe = this.game.world.getZone(this.level, this.zone).getTiles(_0x451d23, _0x5a4bfe),
            _0x451d23 = vec2.make(0x1, 0x1),
            _0x4d27fb = !0x1;
        this.grounded = !0x1;
        for (_0x165e89 = 0x0; _0x165e89 < _0x5a4bfe.length; _0x165e89++) _0x33ba28 = _0x5a4bfe[_0x165e89], _0x33ba28.definition.COLLIDE && squar.intersection(_0x33ba28.pos, _0x451d23, _0x4a7264, this.dim) && (this.pos.x <= _0x4a7264.x && _0x4a7264.x + this.dim.x > _0x33ba28.pos.x ? (_0x4a7264.x = _0x33ba28.pos.x - this.dim.x, _0x3f6d1f.x = _0x4a7264.x, this.moveSpeed = 0x0, _0x4d27fb = !0x0) : this.pos.x >= _0x4a7264.x && _0x4a7264.x < _0x33ba28.pos.x + _0x451d23.x && (_0x4a7264.x = _0x33ba28.pos.x + _0x451d23.x, _0x3f6d1f.x = _0x4a7264.x, this.moveSpeed = 0x0, _0x4d27fb = !0x0));
        for (_0x165e89 = 0x0; _0x165e89 < _0x5a4bfe.length; _0x165e89++) _0x33ba28 = _0x5a4bfe[_0x165e89], _0x33ba28.definition.COLLIDE && squar.intersection(_0x33ba28.pos, _0x451d23, _0x3f6d1f, this.dim) && (this.pos.y >= _0x3f6d1f.y && _0x3f6d1f.y < _0x33ba28.pos.y + _0x451d23.y ? (_0x3f6d1f.y = _0x33ba28.pos.y + _0x451d23.y, this.grounded = !0x0) : this.pos.y <= _0x3f6d1f.y && _0x3f6d1f.y + this.dim.y > _0x33ba28.pos.y && (_0x3f6d1f.y = _0x33ba28.pos.y - this.dim.y, this.jumping = -0x1, this.fallSpeed = 0x0));
        this.pos = vec2.make(_0x4a7264.x, _0x3f6d1f.y);
        _0x4d27fb && (this.dir = !this.dir);
    }
};
_0x32e92f.prototype.bounce = function() {
    this.grounded && (this.dir = !this.dir);
    this.jump = 0x0;
};
_0x32e92f.prototype.playerCollide = function(_0x3e222e) {
    this.dead || this.garbage || (_0x3e222e.powerup(this), this.kill(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x0)));
};
_0x32e92f.prototype.playerStomp = function(_0x46a170) {
    this.playerCollide(_0x46a170);
};
_0x32e92f.prototype.playerBump = function(_0x390045) {
    this.playerCollide(_0x390045);
};
_0x32e92f.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
_0x32e92f.prototype.destroy = _0x2b132.prototype.destroy;
_0x32e92f.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x32e92f.prototype.setState = function(_0x21221c) {
    _0x21221c !== this.state && (this.state = _0x21221c, this.sprite = _0x21221c.SPRITE[0x0], this.anim = 0x0);
};
_0x32e92f.prototype.draw = function(_0x169745) {
    _0x169745.push({
        'pos': this.pos,
        'reverse': this.reverse,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
"use strict";

function MushroomObject(_0x498f07, _0x8f312, _0x3662c8, _0x2b2eea, _0x506039) {
    _0x32e92f.call(this, _0x498f07, _0x8f312, _0x3662c8, _0x2b2eea, _0x506039);
    this.state = MushroomObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
MushroomObject.ASYNC = !0x1;
MushroomObject.ID = 0x51;
MushroomObject.NAME = "MUSHROOM";
MushroomObject.SPRITE = {};
MushroomObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xe9
}];
for (_0x4f3eec = 0x0; _0x4f3eec < MushroomObject.SPRITE_LIST.length; _0x4f3eec++) MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x4f3eec].NAME] = MushroomObject.SPRITE_LIST[_0x4f3eec], MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x4f3eec].ID] = MushroomObject.SPRITE_LIST[_0x4f3eec];
MushroomObject.STATE = {};
MushroomObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [MushroomObject.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < MushroomObject.STATE_LIST.length; _0x4f3eec++) MushroomObject.STATE[MushroomObject.STATE_LIST[_0x4f3eec].NAME] = MushroomObject.STATE_LIST[_0x4f3eec], MushroomObject.STATE[MushroomObject.STATE_LIST[_0x4f3eec].ID] = MushroomObject.STATE_LIST[_0x4f3eec];
MushroomObject.prototype.update = _0x32e92f.prototype.update;
MushroomObject.prototype.step = _0x32e92f.prototype.step;
MushroomObject.prototype.control = function() {
    _0x32e92f.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x32e92f.MOVE_SPEED_MAX : _0x32e92f.MOVE_SPEED_MAX;
};
MushroomObject.prototype.physics = _0x32e92f.prototype.physics;
MushroomObject.prototype.bounce = _0x32e92f.prototype.bounce;
MushroomObject.prototype.playerCollide = _0x32e92f.prototype.playerCollide;
MushroomObject.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
MushroomObject.prototype.playerBump = _0x32e92f.prototype.playerBump;
MushroomObject.prototype.kill = _0x32e92f.prototype.kill;
MushroomObject.prototype.destroy = _0x2b132.prototype.destroy;
MushroomObject.prototype.isTangible = _0x2b132.prototype.isTangible;
MushroomObject.prototype.setState = _0x32e92f.prototype.setState;
MushroomObject.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(MushroomObject);
"use strict";

function FlowerObject(_0x1c4b69, _0x3b1b6b, _0x344167, _0xd55f34, _0x5a3dab) {
    _0x32e92f.call(this, _0x1c4b69, _0x3b1b6b, _0x344167, _0xd55f34, _0x5a3dab);
    this.state = FlowerObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
FlowerObject.ASYNC = !0x1;
FlowerObject.ID = 0x52;
FlowerObject.NAME = "FIRE FLOWER";
FlowerObject.SPRITE = {};
FlowerObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xe4
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xe5
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xe6
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xe7
}];
for (_0x4f3eec = 0x0; _0x4f3eec < FlowerObject.SPRITE_LIST.length; _0x4f3eec++) FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x4f3eec].NAME] = FlowerObject.SPRITE_LIST[_0x4f3eec], FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x4f3eec].ID] = FlowerObject.SPRITE_LIST[_0x4f3eec];
FlowerObject.STATE = {};
FlowerObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [FlowerObject.SPRITE.IDLE0, FlowerObject.SPRITE.IDLE1, FlowerObject.SPRITE.IDLE2, FlowerObject.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < FlowerObject.STATE_LIST.length; _0x4f3eec++) FlowerObject.STATE[FlowerObject.STATE_LIST[_0x4f3eec].NAME] = FlowerObject.STATE_LIST[_0x4f3eec], FlowerObject.STATE[FlowerObject.STATE_LIST[_0x4f3eec].ID] = FlowerObject.STATE_LIST[_0x4f3eec];
FlowerObject.prototype.update = _0x32e92f.prototype.update;
FlowerObject.prototype.step = _0x32e92f.prototype.step;
FlowerObject.prototype.control = function() {};
FlowerObject.prototype.physics = _0x32e92f.prototype.physics;
FlowerObject.prototype.playerCollide = _0x32e92f.prototype.playerCollide;
FlowerObject.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
FlowerObject.prototype.playerBump = _0x32e92f.prototype.playerBump;
FlowerObject.prototype.kill = _0x32e92f.prototype.kill;
FlowerObject.prototype.destroy = _0x2b132.prototype.destroy;
FlowerObject.prototype.isTangible = _0x2b132.prototype.isTangible;
FlowerObject.prototype.setState = _0x32e92f.prototype.setState;
FlowerObject.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(FlowerObject);
"use strict";

function StarObject(_0x203b8b, _0x183a74, _0x18935a, _0x130a95, _0x226095) {
    _0x32e92f.call(this, _0x203b8b, _0x183a74, _0x18935a, _0x130a95, _0x226095);
    this.state = StarObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.groundTimer = 0x0;
}
StarObject.ASYNC = !0x1;
StarObject.ID = 0x54;
StarObject.NAME = "STAR";
StarObject.JUMP_LENGTH = 0x6;
StarObject.MOVE_SPEED_MAX = 0.125;
StarObject.JUMP_DELAY = 0x2;
StarObject.SPRITE = {};
StarObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xe0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xe1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xe2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xe3
}];
for (_0x4f3eec = 0x0; _0x4f3eec < StarObject.SPRITE_LIST.length; _0x4f3eec++) StarObject.SPRITE[StarObject.SPRITE_LIST[_0x4f3eec].NAME] = StarObject.SPRITE_LIST[_0x4f3eec], StarObject.SPRITE[StarObject.SPRITE_LIST[_0x4f3eec].ID] = StarObject.SPRITE_LIST[_0x4f3eec];
StarObject.STATE = {};
StarObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [StarObject.SPRITE.IDLE0, StarObject.SPRITE.IDLE1, StarObject.SPRITE.IDLE2, StarObject.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < StarObject.STATE_LIST.length; _0x4f3eec++) StarObject.STATE[StarObject.STATE_LIST[_0x4f3eec].NAME] = StarObject.STATE_LIST[_0x4f3eec], StarObject.STATE[StarObject.STATE_LIST[_0x4f3eec].ID] = StarObject.STATE_LIST[_0x4f3eec];
StarObject.prototype.update = _0x32e92f.prototype.update;
StarObject.prototype.step = _0x32e92f.prototype.step;
StarObject.prototype.control = function() {
    this.moveSpeed = this.dir ? -StarObject.MOVE_SPEED_MAX : StarObject.MOVE_SPEED_MAX;
    this.grounded && ++this.groundTimer >= StarObject.JUMP_DELAY ? this.jump = 0x0 : this.jump > StarObject.JUMP_LENGTH && (this.jump = -0x1, this.groundTimer = 0x0);
};
StarObject.prototype.physics = _0x32e92f.prototype.physics;
StarObject.prototype.bounce = _0x32e92f.prototype.bounce;
StarObject.prototype.playerCollide = _0x32e92f.prototype.playerCollide;
StarObject.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
StarObject.prototype.playerBump = _0x32e92f.prototype.playerBump;
StarObject.prototype.kill = _0x32e92f.prototype.kill;
StarObject.prototype.destroy = _0x2b132.prototype.destroy;
StarObject.prototype.isTangible = _0x2b132.prototype.isTangible;
StarObject.prototype.setState = _0x32e92f.prototype.setState;
StarObject.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(StarObject);
"use strict";

function LifeObject(_0x2f53f0, _0x5bf0ed, _0x406c8d, _0xfe8e35, _0x5db64b) {
    _0x32e92f.call(this, _0x2f53f0, _0x5bf0ed, _0x406c8d, _0xfe8e35, _0x5db64b);
    this.state = LifeObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
LifeObject.ASYNC = !0x1;
LifeObject.ID = 0x53;
LifeObject.NAME = "ONEUP";
LifeObject.SPRITE = {};
LifeObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xe8
}];
for (_0x4f3eec = 0x0; _0x4f3eec < LifeObject.SPRITE_LIST.length; _0x4f3eec++) LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x4f3eec].NAME] = LifeObject.SPRITE_LIST[_0x4f3eec], LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x4f3eec].ID] = LifeObject.SPRITE_LIST[_0x4f3eec];
LifeObject.STATE = {};
LifeObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [LifeObject.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < LifeObject.STATE_LIST.length; _0x4f3eec++) LifeObject.STATE[LifeObject.STATE_LIST[_0x4f3eec].NAME] = LifeObject.STATE_LIST[_0x4f3eec], LifeObject.STATE[LifeObject.STATE_LIST[_0x4f3eec].ID] = LifeObject.STATE_LIST[_0x4f3eec];
LifeObject.prototype.update = _0x32e92f.prototype.update;
LifeObject.prototype.step = _0x32e92f.prototype.step;
LifeObject.prototype.control = function() {
    _0x32e92f.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x32e92f.MOVE_SPEED_MAX : _0x32e92f.MOVE_SPEED_MAX;
};
LifeObject.prototype.physics = _0x32e92f.prototype.physics;
LifeObject.prototype.bounce = _0x32e92f.prototype.bounce;
LifeObject.prototype.playerCollide = _0x32e92f.prototype.playerCollide;
LifeObject.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
LifeObject.prototype.playerBump = _0x32e92f.prototype.playerBump;
LifeObject.prototype.kill = _0x32e92f.prototype.kill;
LifeObject.prototype.destroy = _0x2b132.prototype.destroy;
LifeObject.prototype.isTangible = _0x2b132.prototype.isTangible;
LifeObject.prototype.setState = _0x32e92f.prototype.setState;
LifeObject.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(LifeObject);
"use strict";

function AxeObject(_0x58699c, _0x15e055, _0x562a1b, _0x15c08c, _0x4fab92) {
    _0x32e92f.call(this, _0x58699c, _0x15e055, _0x562a1b, _0x15c08c, _0x4fab92);
    this.state = AxeObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.used = !0x1;
    this.dim = vec2.make(0x1, 0x3);
}
AxeObject.ASYNC = !0x0;
AxeObject.ID = 0x55;
AxeObject.NAME = "AXE";
AxeObject.SPRITE = {};
AxeObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xec
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xed
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xee
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xef
}];
for (_0x4f3eec = 0x0; _0x4f3eec < AxeObject.SPRITE_LIST.length; _0x4f3eec++) AxeObject.SPRITE[AxeObject.SPRITE_LIST[_0x4f3eec].NAME] = AxeObject.SPRITE_LIST[_0x4f3eec], AxeObject.SPRITE[AxeObject.SPRITE_LIST[_0x4f3eec].ID] = AxeObject.SPRITE_LIST[_0x4f3eec];
AxeObject.STATE = {};
AxeObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [AxeObject.SPRITE.IDLE0, AxeObject.SPRITE.IDLE1, AxeObject.SPRITE.IDLE2, AxeObject.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < AxeObject.STATE_LIST.length; _0x4f3eec++) AxeObject.STATE[AxeObject.STATE_LIST[_0x4f3eec].NAME] = AxeObject.STATE_LIST[_0x4f3eec], AxeObject.STATE[AxeObject.STATE_LIST[_0x4f3eec].ID] = AxeObject.STATE_LIST[_0x4f3eec];
AxeObject.prototype.update = function(_0x102756) {};
AxeObject.prototype.step = _0x32e92f.prototype.step;
AxeObject.prototype.control = function() {};
AxeObject.prototype.physics = _0x32e92f.prototype.physics;
AxeObject.prototype.playerCollide = function(_0x43b1f1) {
    if (!(this.dead || this.garbage || this.used))
        for (_0x43b1f1.powerup(this), this.used = !0x0, _0x43b1f1 = 0x0; _0x43b1f1 < this.game.objects.length; _0x43b1f1++) {
            var _0x1296be = this.game.objects[_0x43b1f1];
            if (_0x1296be instanceof _0x47b80a && _0x1296be.level === this.level && _0x1296be.zone === _0x1296be.zone && !_0x1296be.dead) {
                _0x1296be.bonk();
                break;
            }
        }
};
AxeObject.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
AxeObject.prototype.playerBump = _0x32e92f.prototype.playerBump;
AxeObject.prototype.kill = _0x32e92f.prototype.kill;
AxeObject.prototype.isTangible = _0x2b132.prototype.isTangible;
AxeObject.prototype.destroy = _0x2b132.prototype.destroy;
AxeObject.prototype.setState = _0x32e92f.prototype.setState;
AxeObject.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(AxeObject);
"use strict";

function _0x2aa8a6(_0x5ea5de, _0x3cdc3d, _0x300945, _0x416a27, _0x5db90f) {
    _0x32e92f.call(this, _0x5ea5de, _0x3cdc3d, _0x300945, _0x416a27, _0x5db90f);
    this.state = _0x2aa8a6.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
}
_0x2aa8a6.ASYNC = !0x1;
_0x2aa8a6.ID = 0x56;
_0x2aa8a6.NAME = "POISON MUSHROOM";
_0x2aa8a6.SPRITE = {};
_0x2aa8a6.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xea
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2aa8a6.SPRITE_LIST.length; _0x4f3eec++) _0x2aa8a6.SPRITE[_0x2aa8a6.SPRITE_LIST[_0x4f3eec].NAME] = _0x2aa8a6.SPRITE_LIST[_0x4f3eec], _0x2aa8a6.SPRITE[_0x2aa8a6.SPRITE_LIST[_0x4f3eec].ID] = _0x2aa8a6.SPRITE_LIST[_0x4f3eec];
_0x2aa8a6.STATE = {};
_0x2aa8a6.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [_0x2aa8a6.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < _0x2aa8a6.STATE_LIST.length; _0x4f3eec++) _0x2aa8a6.STATE[_0x2aa8a6.STATE_LIST[_0x4f3eec].NAME] = _0x2aa8a6.STATE_LIST[_0x4f3eec], _0x2aa8a6.STATE[_0x2aa8a6.STATE_LIST[_0x4f3eec].ID] = _0x2aa8a6.STATE_LIST[_0x4f3eec];
_0x2aa8a6.prototype.update = _0x32e92f.prototype.update;
_0x2aa8a6.prototype.step = _0x32e92f.prototype.step;
_0x2aa8a6.prototype.control = function() {
    _0x32e92f.prototype.control.call(this);
    this.moveSpeed = this.dir ? -_0x32e92f.MOVE_SPEED_MAX : _0x32e92f.MOVE_SPEED_MAX;
};
_0x2aa8a6.prototype.physics = _0x32e92f.prototype.physics;
_0x2aa8a6.prototype.bounce = _0x32e92f.prototype.bounce;
_0x2aa8a6.prototype.playerCollide = _0x32e92f.prototype.playerCollide;
_0x2aa8a6.prototype.playerStomp = _0x32e92f.prototype.playerStomp;
_0x2aa8a6.prototype.playerBump = _0x32e92f.prototype.playerBump;
_0x2aa8a6.prototype.kill = _0x32e92f.prototype.kill;
_0x2aa8a6.prototype.destroy = _0x2b132.prototype.destroy;
_0x2aa8a6.prototype.isTangible = _0x2b132.prototype.isTangible;
_0x2aa8a6.prototype.setState = _0x32e92f.prototype.setState;
_0x2aa8a6.prototype.draw = _0x32e92f.prototype.draw;
_0x2b132.REGISTER_OBJECT(_0x2aa8a6);
"use strict";

function CoinObject(_0x45f8ec, _0x474ef3, _0x4323b8, _0x1f325e, _0x2e7a84) {
    _0x2b132.call(this, _0x45f8ec, _0x474ef3, _0x4323b8, _0x1f325e);
    this.oid = _0x2e7a84;
    this.state = CoinObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0x0];
    this.anim = 0x0;
    this.dim = vec2.make(0x1, 0x1);
}
CoinObject.ASYNC = !0x1;
CoinObject.ID = 0x61;
CoinObject.NAME = "COIN";
CoinObject.ANIMATION_RATE = 0x5;
CoinObject.SPRITE = {};
CoinObject.SPRITE_LIST = [{
    'NAME': "IDLE0",
    'ID': 0x0,
    'INDEX': 0xf0
}, {
    'NAME': "IDLE1",
    'ID': 0x1,
    'INDEX': 0xf1
}, {
    'NAME': "IDLE2",
    'ID': 0x2,
    'INDEX': 0xf2
}, {
    'NAME': "IDLE3",
    'ID': 0x3,
    'INDEX': 0xf1
}];
for (_0x4f3eec = 0x0; _0x4f3eec < CoinObject.SPRITE_LIST.length; _0x4f3eec++) CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x4f3eec].NAME] = CoinObject.SPRITE_LIST[_0x4f3eec], CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x4f3eec].ID] = CoinObject.SPRITE_LIST[_0x4f3eec];
CoinObject.STATE = {};
CoinObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [CoinObject.SPRITE.IDLE0, CoinObject.SPRITE.IDLE1, CoinObject.SPRITE.IDLE2, CoinObject.SPRITE.IDLE3]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < CoinObject.STATE_LIST.length; _0x4f3eec++) CoinObject.STATE[CoinObject.STATE_LIST[_0x4f3eec].NAME] = CoinObject.STATE_LIST[_0x4f3eec], CoinObject.STATE[CoinObject.STATE_LIST[_0x4f3eec].ID] = CoinObject.STATE_LIST[_0x4f3eec];
CoinObject.prototype.update = function(_0xf474c5) {
    switch (_0xf474c5) {
        case 0x0:
            this.kill();
    }
};
CoinObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / CoinObject.ANIMATION_RATE) % this.state.SPRITE.length];
};
CoinObject.prototype.playerCollide = function(_0xd7d4c9) {
    this.dead || this.garbage || (_0xd7d4c9.powerup(this), this.kill(), this.game.out.push(OBJECT_EVENT_TRIGGER.encode(this.level, this.zone, this.oid, 0x0)));
};
CoinObject.prototype.playerStomp = function(_0x27e3e5) {
    this.playerCollide(_0x27e3e5);
};
CoinObject.prototype.playerBump = function(_0x352b9a) {
    this.playerCollide(_0x352b9a);
};
CoinObject.prototype.kill = function() {
    this.dead = !0x0;
    this.destroy();
};
CoinObject.prototype.isTangible = _0x2b132.prototype.isTangible;
CoinObject.prototype.destroy = _0x2b132.prototype.destroy;
CoinObject.prototype.setState = function(_0x781f05) {
    _0x781f05 !== this.state && (this.state = _0x781f05, this.sprite = _0x781f05.SPRITE[0x0], this.anim = 0x0);
};
CoinObject.prototype.draw = function(_0x483caa) {
    _0x483caa.push({
        'pos': this.pos,
        'reverse': this.reverse,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(CoinObject);
"use strict";

function CheckMarkObject(_0x1b686c, _0x5efa39, _0x3d98b2, _0x144ddb, _0x2c2db4) {
    _0x2b132.call(this, _0x1b686c, _0x5efa39, _0x3d98b2, _0x144ddb);
    this.oid = _0x2c2db4;
    this.setState(CheckMarkObject.STATE.IDLE);
    this.anim = 0x0;
}
CheckMarkObject.ASYNC = !0x0;
CheckMarkObject.ID = 0xfe;
CheckMarkObject.NAME = "CHECKMARK";
CheckMarkObject.ANIMATION_RATE = 0x3;
CheckMarkObject.SPRITE = {};
CheckMarkObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xfe
}];
for (_0x4f3eec = 0x0; _0x4f3eec < CheckMarkObject.SPRITE_LIST.length; _0x4f3eec++) CheckMarkObject.SPRITE[CheckMarkObject.SPRITE_LIST[_0x4f3eec].NAME] = CheckMarkObject.SPRITE_LIST[_0x4f3eec], CheckMarkObject.SPRITE[CheckMarkObject.SPRITE_LIST[_0x4f3eec].ID] = CheckMarkObject.SPRITE_LIST[_0x4f3eec];
CheckMarkObject.STATE = {};
CheckMarkObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [CheckMarkObject.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < CheckMarkObject.STATE_LIST.length; _0x4f3eec++) CheckMarkObject.STATE[CheckMarkObject.STATE_LIST[_0x4f3eec].NAME] = CheckMarkObject.STATE_LIST[_0x4f3eec], CheckMarkObject.STATE[CheckMarkObject.STATE_LIST[_0x4f3eec].ID] = CheckMarkObject.STATE_LIST[_0x4f3eec];
CheckMarkObject.prototype.update = function(_0xaee113) {};
CheckMarkObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / CheckMarkObject.ANIMATION_RATE) % this.state.SPRITE.length];
};
CheckMarkObject.prototype.kill = function() {};
CheckMarkObject.prototype.isTangible = _0x2b132.prototype.isTangible;
CheckMarkObject.prototype.destroy = _0x2b132.prototype.destroy;
CheckMarkObject.prototype.setState = function(_0x5bf861) {
    _0x5bf861 !== this.state && (this.state = _0x5bf861, this.sprite = _0x5bf861.SPRITE[0x0], this.anim = 0x0);
};
CheckMarkObject.prototype.draw = function(_0xe84d34) {
    _0xe84d34.push({
        'pos': this.pos,
        'reverse': !0x1,
        'index': this.sprite.INDEX,
        'mode': 0x0
    });
};
_0x2b132.REGISTER_OBJECT(CheckMarkObject);
"use strict";

function TextObject(_0x1fc2dc, _0x24c00d, _0x3cb14e, _0x560623, _0x57660e, _0x2ad111, _0x20c23b, _0x34dba7, _0x364f29) {
    _0x2b132.call(this, _0x1fc2dc, _0x24c00d, _0x3cb14e, _0x560623);
    this.oid = _0x57660e;
    this.setState(TextObject.STATE.IDLE);
    this.offset = vec2.make(0x0, parseFloat(_0x2ad111));
    this.size = parseFloat(_0x20c23b);
    this.color = _0x34dba7;
    this.text = _0x364f29;
}
TextObject.ASYNC = !0x0;
TextObject.ID = 0xfd;
TextObject.NAME = "TEXT";
TextObject.ANIMATION_RATE = 0x3;
TextObject.SPRITE = {};
TextObject.SPRITE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'INDEX': 0xe
}];
for (_0x4f3eec = 0x0; _0x4f3eec < TextObject.SPRITE_LIST.length; _0x4f3eec++) TextObject.SPRITE[TextObject.SPRITE_LIST[_0x4f3eec].NAME] = TextObject.SPRITE_LIST[_0x4f3eec], TextObject.SPRITE[TextObject.SPRITE_LIST[_0x4f3eec].ID] = TextObject.SPRITE_LIST[_0x4f3eec];
TextObject.STATE = {};
TextObject.STATE_LIST = [{
    'NAME': "IDLE",
    'ID': 0x0,
    'SPRITE': [TextObject.SPRITE.IDLE]
}];
for (_0x4f3eec = 0x0; _0x4f3eec < TextObject.STATE_LIST.length; _0x4f3eec++) TextObject.STATE[TextObject.STATE_LIST[_0x4f3eec].NAME] = TextObject.STATE_LIST[_0x4f3eec], TextObject.STATE[TextObject.STATE_LIST[_0x4f3eec].ID] = TextObject.STATE_LIST[_0x4f3eec];
TextObject.prototype.update = function(_0x495bee) {};
TextObject.prototype.step = function() {};
TextObject.prototype.kill = function() {};
TextObject.prototype.destroy = _0x2b132.prototype.destroy;
TextObject.prototype.isTangible = _0x2b132.prototype.isTangible;
TextObject.prototype.setState = function(_0x47da50) {
    _0x47da50 !== this.state && (this.state = _0x47da50, this.sprite = _0x47da50.SPRITE[0x0], this.anim = 0x0);
};
TextObject.prototype.write = function(_0x524c2f) {
    _0x524c2f.push({
        'pos': vec2.add(this.pos, this.offset),
        'size': this.size,
        'color': this.color,
        'text': this.text
    });
};
_0x2b132.REGISTER_OBJECT(TextObject);
"use strict";

function _0xb99268(_0x56eb06) {
    this.pos = _0x56eb06;
    this.garbage = !0x1;
}
_0xb99268.prototype.step = function() {
    0x1 > this.life-- && this.destroy();
};
_0xb99268.prototype.destroy = function() {
    this.garbage = !0x0;
};
_0xb99268.prototype.draw = function(_0x27ef32) {};
"use strict";

function _0x79b656(_0x30f180, _0x2c1914) {
    _0xb99268.call(this, _0x30f180);
    this.sprite = _0x2c1914;
    this.life = 0x19;
    this.bits = [{
        'pos': vec2.add(this.pos, vec2.make(0x0, 0x0)),
        'vel': vec2.make(-0.24, 0.9),
        'rot': 0x0,
        'ang': -0.3,
        'sp': vec2.make(0x0, 0x0),
        'ss': vec2.make(0.5, 0.5),
        'so': vec2.make(0.25, 0.25)
    }, {
        'pos': vec2.add(this.pos, vec2.make(0.5, 0x0)),
        'vel': vec2.make(0.24, 0.9),
        'rot': 0x0,
        'ang': 0.3,
        'sp': vec2.make(0.5, 0x0),
        'ss': vec2.make(0.5, 0.5),
        'so': vec2.make(0.25, 0.25)
    }, {
        'pos': vec2.add(this.pos, vec2.make(0x0, -0.5)),
        'vel': vec2.make(-0.3, 0.5),
        'rot': 0x0,
        'ang': -0.33,
        'sp': vec2.make(0x0, 0.5),
        'ss': vec2.make(0.5, 0.5),
        'so': vec2.make(0.25, 0.25)
    }, {
        'pos': vec2.add(this.pos, vec2.make(0.5, -0.5)),
        'vel': vec2.make(0.3, 0.5),
        'rot': 0x0,
        'ang': 0.33,
        'sp': vec2.make(0.5, 0.5),
        'ss': vec2.make(0.5, 0.5),
        'so': vec2.make(0.25, 0.25)
    }];
}
_0x79b656.FALL_SPEED = 0.0775;
_0x79b656.DRAG = 0.975;
_0x79b656.prototype.step = function() {
    for (var _0x11582d = 0x0; _0x11582d < this.bits.length; _0x11582d++) {
        var _0xd452c3 = this.bits[_0x11582d];
        _0xd452c3.vel.y -= _0x79b656.FALL_SPEED;
        _0xd452c3.vel = vec2.scale(_0xd452c3.vel, _0x79b656.DRAG);
        _0xd452c3.pos = vec2.add(_0xd452c3.pos, _0xd452c3.vel);
        _0xd452c3.ang *= _0x79b656.DRAG;
        _0xd452c3.rot += _0xd452c3.ang;
    }
    _0xb99268.prototype.step.call(this);
};
_0x79b656.prototype.destroy = _0xb99268.prototype.destroy;
_0x79b656.prototype.draw = function(_0x280706) {
    for (var _0x221e5e = 0x0; _0x221e5e < this.bits.length; _0x221e5e++) {
        var _0x4c04a2 = this.bits[_0x221e5e];
        _0x280706.push({
            'tex': "map",
            'ind': this.sprite,
            'pos': _0x4c04a2.pos,
            'off': _0x4c04a2.so,
            'rot': _0x4c04a2.rot,
            'sp': _0x4c04a2.sp,
            'ss': _0x4c04a2.ss
        });
    }
};
"use strict";

function _0x38c270(_0xdc1c) {
    _0xb99268.call(this, _0xdc1c);
    this.life = _0x38c270.UP_TIME + _0x38c270.DOWN_TIME;
    this.anim = this.sprite = 0x0;
    this.bits = [{
        'pos': vec2.add(this.pos, vec2.make(0x0, 0x0)),
        'sp': vec2.make(0x0, 0x0),
        'ss': vec2.make(0x1, 0x1),
        'so': vec2.make(0x0, 0x0)
    }];
}
_0x38c270.SPRITE = [0xf4, 0xf5, 0xf6, 0xf7];
_0x38c270.ANIMATION_RATE = 0x2;
_0x38c270.MOVE_SPEED = 0.375;
_0x38c270.UP_TIME = 0x8;
_0x38c270.DOWN_TIME = 0x6;
_0x38c270.prototype.step = function() {
    _0xb99268.prototype.step.call(this);
    this.sprite = _0x38c270.SPRITE[parseInt(this.anim++/_0x38c270.ANIMATION_RATE)%_0x38c270.SPRITE.length];this.bits[0x0].pos.y=this.life>=_0x38c270.DOWN_TIME?this.bits[0x0].pos.y+_0x38c270.MOVE_SPEED:this.bits[0x0].pos.y-_0x38c270.MOVE_SPEED;};_0x38c270.prototype.destroy=_0xb99268.prototype.destroy;_0x38c270.prototype.draw=function(_0x57c831){for(var _0x2de6a7=0x0;_0x2de6a7<this.bits.length;_0x2de6a7++){var _0x4bce27=this.bits[_0x2de6a7];_0x57c831.push({'tex':"obj",'ind':this.sprite,'pos':_0x4bce27.pos,'off':_0x4bce27.so,'rot':0x0,'sp':_0x4bce27.sp,'ss':_0x4bce27.ss});}};"use strict";function Input(_0x1238fa,_0x5b9abb){this.game=_0x1238fa;this.container=_0x5b9abb;var _0x1d132b=this;this.container.onmousemove=function(_0x1238fa){_0x1d132b.mouse.event(_0x1238fa);};this.container.onmousedown=function(_0x1238fa){_0x1d132b.mouse.event(_0x1238fa,!0x0);};this.container.onmouseup=function(_0x1238fa){_0x1d132b.mouse.event(_0x1238fa,!0x1);};this.container.addEventListener("mousewheel",function(_0x1238fa){_0x1d132b.mouse.wheel(_0x1238fa);},!0x1);this.container.addEventListener("DOMMouseScroll",function(_0x1238fa){_0x1d132b.mouse.wheel(_0x1238fa);},!0x1);document.onkeyup=function(_0x1238fa){_0x1d132b.keyboard.event(_0x1238fa,!0x1);};document.onkeydown=function(_0x1238fa){_0x1d132b.keyboard.event(_0x1238fa,!0x0);};this.touchEvt=function(_0x1238fa){app.game.input.touch.event(_0x1238fa);};document.addEventListener("touchstart",this.touchEvt,!0x0);document.addEventListener("touchmove",this.touchEvt,!0x0);document.addEventListener("touchend",this.touchEvt,!0x0);this.mouse.input=this;this.keyboard.input=this;this.touch.input=this;this.load();}Input.INPUTS="up down left right a b".split('\x20');Input.K_DEFAULT=[0x57,0x53,0x41,0x44,0x20,0x10];Input.G_DEFAULT=[0x0,0x1,0x2,0x3,0x4,0x5];Input.prototype.load=function(){this.assignK={};for(var _0x3e83ed=0x0;_0x3e83ed<Input.INPUTS.length;_0x3e83ed++){var _0x39d074=null;this.assignK[Input.INPUTS[_0x3e83ed]]=_0x39d074?parseInt(_0x39d074):Input.K_DEFAULT[_0x3e83ed];}this.assignG={};for(_0x3e83ed=0x0;_0x3e83ed<Input.INPUTS.length;_0x3e83ed++)_0x39d074=null,this.assignG[Input.INPUTS[_0x3e83ed]]=_0x39d074?parseInt(_0x39d074):Input.G_DEFAULT[_0x3e83ed];};Input.prototype.pad={};Input.prototype.pad.pad=void 0x0;Input.prototype.pad.ax=vec2.make(0x0,0x0);Input.prototype.pad.update=function(){this.pad=navigator?navigator.getGamepads()[0x0]:void 0x0;this.analog();};Input.prototype.pad.analog=function(){if(this.pad)for(var _0x196f3d=0x0;_0x196f3d<this.pad.axes.length-0x1;_0x196f3d++){var _0x1a270c=this.pad.axes[_0x196f3d],_0x5084c7=this.pad.axes[_0x196f3d+0x1];if(!(0.25>Math.abs(_0x1a270c)&&0.25>Math.abs(_0x5084c7))){this.ax=vec2.make(_0x1a270c,_0x5084c7);return;}}this.ax=vec2.make(0x0,0x0);};Input.prototype.pad.button=function(_0x588acc){return this.pad?this.pad.buttons[_0x588acc].pressed:!0x1;};Input.prototype.pad.connected=function(){return!!this.pad;};Input.prototype.mouse={};Input.prototype.mouse.inputs=[];Input.prototype.mouse.pos={};Input.prototype.mouse.mov={};Input.prototype.mouse.spin=0x0;Input.prototype.mouse.nxtMov={};Input.prototype.mouse.nxtSpin=0x0;Input.prototype.mouse.lmb=!0x1;Input.prototype.mouse.rmb=!0x1;Input.prototype.mouse.mmb=!0x1;Input.prototype.mouse.nxtMov.x=0x0;Input.prototype.mouse.nxtMov.y=0x0;Input.prototype.mouse.mov.x=0x0;Input.prototype.mouse.mov.y=0x0;Input.prototype.mouse.pos.x=0x0;Input.prototype.mouse.pos.y=0x0;Input.prototype.mouse.event=function(_0x1fe9a5,_0x454535){this.nxtMov={};this.nxtMov.x=this.nxtMov.x+(this.pos.x-_0x1fe9a5.offsetX);this.nxtMov.y=this.nxtMov.y+-0x1*(this.pos.y-_0x1fe9a5.offsetY);this.pos={};this.pos.x=_0x1fe9a5.offsetX;this.pos.y=_0x1fe9a5.offsetY;if(void 0x0!==_0x454535){switch(_0x1fe9a5.button){case 0x0:this.lmb=_0x454535;break;case 0x2:this.rmb=_0x454535;break;case 0x1:this.mmb=_0x454535;}_0x454535&&this.inputs.push({'btn':_0x1fe9a5.button,'pos':this.pos});}};Input.prototype.mouse.wheel=function(_0x4bdfad){_0x4bdfad=window.event||_0x4bdfad;this.nxtSpin+=Math.max(-0x1,Math.min(0x1,_0x4bdfad.wheelDelta||-_0x4bdfad.detail));return!0x1;};Input.prototype.keyboard={};Input.prototype.keyboard.inputs=[];Input.prototype.keyboard.keys=[];Input.prototype.keyboard.event=function(_0x15940d,_0x43d38b){(this.keys[_0x15940d.keyCode]=_0x43d38b)&&this.inputs.push({'key':_0x15940d.keyCode,'char':0x1!==_0x15940d.key.length?'':_0x15940d.key});};Input.prototype.touch={};Input.prototype.touch.inputs=[];Input.prototype.touch.pos=[];Input.prototype.touch.event=function(_0x16267c){var _0x55f642=this.pos;this.pos=[];for(var _0x1734db=0x0;_0x1734db<_0x16267c.touches.length;_0x1734db++){for(var _0x1d4dad=_0x16267c.touches[_0x1734db],_0x1592b9=!0x1,_0x1de7bd=0x0;_0x1de7bd<_0x55f642.length;_0x1de7bd++)if(_0x55f642[_0x1de7bd].id===_0x1d4dad.identifier){_0x1592b9=!0x0;break;}_0x1592b9||this.inputs.push({'id':_0x1d4dad.identifier,'x':_0x1d4dad.clientX,'y':_0x1d4dad.clientY});this.pos.push({'id':_0x1d4dad.identifier,'x':_0x1d4dad.clientX,'y':_0x1d4dad.clientY});}};Input.prototype.pop=function(){this.mouse.mov=this.mouse.nxtMov;this.mouse.spin=this.mouse.nxtSpin;this.mouse.nxtMov={};this.mouse.nxtMov.x=0x0;this.mouse.nxtMov.y=0x0;this.mouse.nxtSpin=0x0;var _0x331427={};_0x331427.mouse=this.mouse.inputs;_0x331427.keyboard=this.keyboard.inputs;_0x331427.touch=this.touch.inputs;this.keyboard.inputs=[];this.mouse.inputs=[];this.touch.inputs=[];return _0x331427;};Input.prototype.destroy=function(){this.container.onmousemove=function(){};this.container.onmousedown=function(){};this.container.onmouseup=function(){};this.container.removeEventListener("mousewheel",this.mouse.wheel,!0x1);this.container.removeEventListener("DOMMouseScroll",this.mouse.wheel,!0x1);document.onkeyup=function(){};document.onkeydown=function(){};};"use strict";function Resource(_0x3cc63c){this.texture={};this.texture.cache={};this.texture.load=0x0;this.load(_0x3cc63c);}Resource.prototype.load=function(_0x696098){for(var _0x41d49e=0x0;_0x41d49e<_0x696098.length;_0x41d49e++){var _0x31b2fa=_0x696098[_0x41d49e],_0x3e99e1=_0x31b2fa.src.split('.').pop().toLowerCase();switch(_0x3e99e1){case "png":this.loadTexture(_0x31b2fa);break;case "gif":this.loadTexture(_0x31b2fa);break;default:app.menu.warn.show("Failed to load resource with unknown extension: "+_0x3e99e1);}}};Resource.prototype.loadTexture=function(_0xcc2626){var _0x444b52=this.texture;if(!_0x444b52.cache[_0xcc2626.id]){var _0x377118=new Image();_0x377118.onload=function(){_0x444b52.cache[_0xcc2626.id]=_0x377118;_0x444b52.load--;};_0x377118.src=_0xcc2626.src;_0x444b52.load++;}};Resource.prototype.getTexture=function(_0x58e0b7){return this.texture.cache[_0x58e0b7];};Resource.prototype.ready=function(){return 0x0===this.texture.load;};"use strict";function Camera(_0x38654a){this.display=_0x38654a;this.pos=vec2.make(0x0,0x0);this.scale=0x3;}Camera.MOVE_MULT=0.075;Camera.ZOOM_MULT=0.075;Camera.ZOOM_MAX=0x1;Camera.ZOOM_MIN=0x8;Camera.prototype.move=function(_0x13f6ab){this.pos=vec2.add(this.pos,vec2.scale(_0x13f6ab,0x1/this .scale * Camera.MOVE_MULT));
};
Camera.prototype.zoom = function(_0x51c6fb) {
    this.scale = Math.max(Camera.ZOOM_MAX, Math.min(Camera.ZOOM_MIN, this.scale + Camera.ZOOM_MULT * _0x51c6fb));
};
Camera.prototype.position = function(_0x97e4dd) {
    this.pos = _0x97e4dd;
};
Camera.prototype.unproject = function(_0x30129a) {
    _0x30129a = vec2.add(_0x30129a, vec2.make(0.5 * -this.display.canvas.width, 0.5 * -this.display.canvas.height));
    _0x30129a = vec2.scale(_0x30129a, 0x1 / this.scale);
    _0x30129a = vec2.add(_0x30129a, vec2.make(this.pos.x * Display.TEXRES, this.pos.y * Display.TEXRES));
    return vec2.scale(_0x30129a, 0.0625);
};
"use strict";

function AudioData(context, path) {
    this.path = path;
    var _0x2ae77b = this;
    // console.log(path);
    // console.log("royale/audio/"+path)
    page.cmd("fileGet",
    {
        "inner_path": "royale/audio/" + path,
        "format": 'base64'
        }, function(data) {
        var uInt8Array = new Uint8Array(Base64Binary.decodeArrayBuffer(data));
        // console.log(uInt8Array.buffer);
        _0x2ae77b.onload(uInt8Array.buffer, context);
    });
}
AudioData.prototype.onload = function(arraybuff, context) {
    var that = this;
    context.decodeAudioData(arraybuff, function(_0x159653) {
        that.buffer = _0x159653;
    }, that.onError);
};
AudioData.prototype.onError = function() {};
AudioData.prototype.ready = function() {
    return void 0x0 !== this.buffer;
};
AudioData.prototype.destroy = function() {};
"use strict";

function _0x3bd257(_0x4c183f, path, _0x4dc2bc, _0x58f077, _0x4b9364, _0x3995a8) {
    this.context = _0x4c183f;
    this.path = path;
    this.data = _0x4dc2bc;
    this.playing = this.played = this.ready = !0x1;
    this.data.ready() ? this.create(_0x58f077, _0x4b9364, _0x3995a8) : app.menu.warn.show("Attempted to instance partially loaded sound data: '" + path + '\x27');
}
_0x3bd257.prototype.create = function(_0x5a9c62, _0x55cb09, _0x1f3cf7) {
    var _0x5c4d7c = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        _0x5c4d7c.playing = !0x1;
    };
    this.source.playbackRate.value = 0x1 + (_0x55cb09 * Math.random() - 0.5 * _0x55cb09);
    this.gain = this.context.createGain();
    this.gain.gain.value = _0x5a9c62;
    this.source.connect(this.gain);
    this.gain.connect(_0x1f3cf7);
    this.ready = !0x0;
};
_0x3bd257.prototype.position = function() {};
_0x3bd257.prototype.volume = function(_0xf88324) {
    this.ready && (this.gain.gain.value = _0xf88324);
};
_0x3bd257.prototype.play = function() {
    this.ready && !this.played ? (this.source.start(0x0), this.playing = !0x0) : this.played && app.menu.warn.show("Attempted to replay sound instance: '" + this.path + '\x27');
    this.played = !0x0;
};
_0x3bd257.prototype.stop = function() {
    this.ready && this.played && this.source.stop();
};
_0x3bd257.prototype.loop = function(_0x52b262) {
    this.ready && (this.source.loop = _0x52b262);
};
_0x3bd257.prototype.done = function() {
    return this.played && !this.playing;
};

function _0x5b4223(_0x22fe70, _0x57e010, _0x1bb17e, _0x42785d, _0x5ed634, _0x121151) {
    _0x3bd257.call(this, _0x22fe70, _0x57e010, _0x1bb17e, _0x42785d, _0x5ed634, _0x121151);
}
_0x5b4223.prototype.create = function(_0x127c28, _0x48ad53, _0x4962f9) {
    var _0x14f34d = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        _0x14f34d.playing = !0x1;
    };
    this.source.playbackRate.value = 0x1 + (_0x48ad53 * Math.random() - 0.5 * _0x48ad53);
    this.gain = this.context.createGain();
    this.gain.gain.value = _0x127c28;
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.distanceModel = "linear";
    this.panner.refDistance = Audio.FALLOFF_MIN;
    this.panner.maxDistance = Audio.FALLOFF_MAX;
    this.panner.rolloffFactor = 0x1;
    this.panner.coneInnerAngle = 0x168;
    this.panner.coneOuterAngle = 0x0;
    this.panner.coneOuterGain = 0x0;
    this.source.connect(this.gain);
    this.gain.connect(this.panner);
    this.panner.connect(_0x4962f9);
    this.panner.setPosition(0x0, 0x0, 0x0);
    this.panner.setOrientation(0x1, 0x0, 0x0);
    this.ready = !0x0;
};
_0x5b4223.prototype.position = function(_0x3f125f) {
    this.data.ready() && this.ready && (this.panner.setPosition ? this.panner.setPosition(_0x3f125f.x, _0x3f125f.y, 0x0) : (this.panner.positionX.value = _0x3f125f.x, this.panner.positionY.value = _0x3f125f.y, this.panner.positionZ.value = 0x0));
};
_0x5b4223.prototype.volume = _0x3bd257.prototype.volume;
_0x5b4223.prototype.play = function(_0x34a421) {
    this.position(_0x34a421);
    this.ready && !this.played ? (this.source.start(0x0), this.playing = !0x0) : this.played && app.menu.warn.show("Attempted to replay sound instance: '" + this.path + '\x27');
    this.played = !0x0;
};
_0x5b4223.prototype.stop = _0x3bd257.prototype.stop;
_0x5b4223.prototype.loop = _0x3bd257.prototype.loop;
_0x5b4223.prototype.done = _0x3bd257.prototype.done;
"use strict";

function Audio(_0x88430e) {
    this.game = _0x88430e;
    this.initWebAudio() || this.initFallback();
    // this.muteMusic = 0x1 === parseInt(Cookies.get("music"));
    // this.muteSound = 0x1 === parseInt(Cookies.get("sound"));
}
Audio.FALLOFF_MIN = 0x1;
Audio.FALLOFF_MAX = 0x18;
Audio.prototype.initWebAudio = function() {
    try {
        this.context = new(window[("AudioContext")] || window[("webkitAudioContext")])();
    } catch (_0x1809f2) {
        return app.menu.warn.show("WebAudio not supported. Intializing fallback mode..."), !0x1;
    }
    var _0x3f83da = "sfx/alert.wav sfx/break.wav sfx/breath.wav sfx/bump.wav sfx/coin.wav sfx/fireball.wav sfx/firework.wav sfx/flagpole.wav sfx/item.wav sfx/jump0.wav sfx/jump1.wav sfx/kick.wav sfx/life.wav sfx/pipe.wav sfx/powerup.wav sfx/stomp.wav sfx/vine.wav music/main0.mp3 music/main1.mp3 music/main2.mp3 music/main3.mp3 music/level.mp3 music/castle.mp3 music/victory.mp3 music/star.mp3 music/dead.mp3 music/gameover.mp3".split('\x20');
    this.sounds = [];
    for (var _0x4e4fee = 0x0; _0x4e4fee < _0x3f83da.length; _0x4e4fee++)
        if (!this.createAudio(_0x3f83da[_0x4e4fee])) return !0x1;
    this.masterVolume = this.context.createGain();
    this.masterVolume.gain.value = 0x1;
    this.masterVolume.connect(this.context.destination);
    this.effectVolume = this.context.createGain();
    this.effectVolume.gain.value = 0x1;
    this.effectVolume.connect(this.masterVolume);
    this.musicVolume = this.context.createGain();
    this.musicVolume.gain.value = 0x1;
    this.musicVolume.connect(this.masterVolume);
    this.masterVolume.gain.value = 0.5;
    this.effectVolume.gain.value = this.muteSound ? 0x0 : 0.75;
    this.musicVolume.gain.value = this.muteMusic ? 0x0 : 0.5;
    this.context.listener.setPosition(0x0, 0x0, 0x0);
    this.context.listener.setOrientation(0x1, 0x0, 0x0, 0x0, 0x1, 0x0);
    return !0x0;
};
Audio.prototype.initFallback = function() {
    this.context = void 0x0;
    this.sounds = [];
};
Audio.prototype.update = function() {
    this.updateVolume();
    var _0x3eb602 = this.game.getPlayer() ? this.game.getPlayer().pos : this.game.display.camera.pos;
    this.context.listener.setPosition ? (this.context.listener.setPosition(_0x3eb602.x, _0x3eb602.y, 0x0), this.context.listener.setOrientation(0x1, 0x0, 0x0, 0x0, 0x1, 0x0)) : (this.context.listener.positionX.value = _0x3eb602.x, this.context.listener.positionY.value = _0x3eb602.y, this.context.listener.positionZ.value = 0x0, this.context.listener.forwardX.value = 0x1, this.context.listener.forwardY.value = 0x0, this.context.listener.forwardZ.value = 0x0, this.context.listener.upX.value = 0x0, this.context.listener.upY.value = 0x1, this.context.listener.upZ.value = 0x0);
    window["yourname"] && this.game.out.push(_0x482c1d.encode());
};
Audio.prototype.updateVolume = function() {
    this.masterVolume.gain.value = 0.5;
    this.effectVolume.gain.value = this.muteSound ? 0x0 : 0.75;
    this.musicVolume.gain.value = this.muteMusic ? 0x0 : 0.5;
    if (!this.muteSound && !this.muteMusic) {
        for (var _0x5d2e91 = this.game.getZone(), _0x1aec1b = this.game.getPlayer() ? this.game.getPlayer().pos : this.game.display.camera.pos, _0x1c7883 = 0x3e7, _0x2c63d0 = 0x0; _0x2c63d0 < this.game.objects.length; _0x2c63d0++) {
            var _0x14d448 = this.game.objects[_0x2c63d0];
            if (_0x14d448 instanceof PlayerObject && _0x14d448.level === _0x5d2e91.level && _0x14d448.zone === _0x5d2e91.id && 0x0 < _0x14d448.starTimer) {
                var _0x1912ef = vec2.distance(_0x1aec1b, _0x14d448.pos);
                _0x1912ef < _0x1c7883 && (_0x1c7883 = _0x1912ef);
            }
        }
        _0x1c7883 < Audio.FALLOFF_MAX && (this.musicVolume.gain.value = 0.5 * Math.max(0x0, Math.min(0x1, Math.pow(_0x1912ef / Audio.FALLOFF_MAX, 0x2))));
    }
};
Audio.prototype.saveSettings = function() {
    Cookies.set("music", this.muteMusic ? 0x1 : 0x0, {
        'expires': 0x1e
    });
    Cookies.set("sound", this.muteSound ? 0x1 : 0x0, {
        'expires': 0x1e
    });
};
Audio.prototype.setMusic = function(_0x4c2f6d, _0x307129) {
    if (this.music) {
        if (this.music.path === _0x4c2f6d) return;
        this.music.stop();
    }
    this.music = this.getAudio(_0x4c2f6d, 0x1, 0x0, "music");
    this.music.loop(_0x307129);
    this.music.play();
};
Audio.prototype.stopMusic = function() {
    this.music && (this.music.stop(), this.music = void 0x0);
};
Audio.prototype.createAudio = function(_0x510768) {
    _0x510768 = new AudioData(this.context, _0x510768);
    this.sounds.push(_0x510768);
    return !0x0;
};
Audio.prototype.createCustomAudio = function(_0x2221ad) {
    _0x2221ad = new CustomAudioData(this.context, _0x2221ad);
    this.sounds.push(_0x2221ad);
    return !0x0;
};
Audio.prototype.getAudio = function(_0x36bd98, _0xcb00cf, _0x42674a, _0x5f2357) {
    switch (_0x5f2357) {
        case "effect":
            _0x5f2357 = this.effectVolume;
            break;
        case "music":
            _0x5f2357 = this.musicVolume;
            break;
        default:
            _0x5f2357 = this.effectVolume;
    }
    for (var _0x149096 = 0x0; _0x149096 < this.sounds.length; _0x149096++)
        if (this.sounds[_0x149096].path === _0x36bd98) return new _0x3bd257(this.context, _0x36bd98, this.sounds[_0x149096], _0xcb00cf, _0x42674a, _0x5f2357);
    if (this.createAudio(_0x36bd98)) return this.getAudio(_0x36bd98);
    app.menu.warn.show("Failed to load sound: '" + _0x36bd98 + '\x27');
    return this.getAudio("default.wav");
};
Audio.prototype.getSpatialAudio = function(_0x16a6e5, _0x1c13d7, _0x1ad4d6, _0x39d04d) {
    switch (_0x39d04d) {
        case "effect":
            _0x39d04d = this.effectVolume;
            break;
        case "music":
            _0x39d04d = this.musicVolume;
            break;
        default:
            _0x39d04d = this.effectVolume;
    }
    for (var _0x22fa5b = 0x0; _0x22fa5b < this.sounds.length; _0x22fa5b++)
        if (this.sounds[_0x22fa5b].path === _0x16a6e5) return new _0x5b4223(this.context, _0x16a6e5, this.sounds[_0x22fa5b], _0x1c13d7, _0x1ad4d6, _0x39d04d);
    if (this.createAudio(_0x16a6e5)) return this.getSpatialAudio(_0x16a6e5);
    app.menu.warn.show("Failed to load sound: '" + _0x16a6e5 + '\x27');
    return this.getSpatialAudio("multi/default.wav");
};
Audio.prototype.destroy = function() {
    for (var _0x37de59 = 0x0; _0x37de59 < this.sounds.length; _0x37de59++) this.sounds[_0x37de59].destroy();
    this.stopMusic();
    this.sounds = [];
    this.context.close().catch(function(_0x37de59) {
        // console.log("Error closing audio context.");
    });
};
"use strict";
_0x3b5639.collideTest = function(_0x3e6039) {
    return _0x3e6039.split('').reverse().join('');
};
_0x3b5639.state = function(_0x37c87f) {
    return _0x37c87f[_0x3b5639.collideTest("reyalPteg")]() ? 0.39 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("deepSevom")] || 0x14 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("gnipmuj")] || 0xf < _0x37c87f[_0x3b5639.collideTest("sevil")] || 0x64 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("remiTegamad")] || 0x172 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("remiTrats")] || 0x0 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("rewop")] && !_0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("etar")] || 0x0 < _0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("remiTrats")] && !_0x37c87f[_0x3b5639.collideTest("reyalPteg")]()[_0x3b5639.collideTest("etar")] || _0x3b5639.onHit !== StarObject.prototype[_0x3b5639.collideTest("scisyhp")] || _0x3b5639.onCollide !== PlayerObject.prototype[_0x3b5639.collideTest("scisyhp")] : !0x1;
};
_0x3b5639.update = function(_0x3fea8e) {
    _0x3b5639.state(_0x3fea8e) && _0x3fea8e.out.push(_0x482c1d.encode());
};
_0x3b5639.onHit = StarObject.prototype[_0x3b5639.collideTest("scisyhp")];
_0x3b5639.onCollide = PlayerObject.prototype[_0x3b5639.collideTest("scisyhp")];
"use strict";

function Display(_0xbced31, _0x16a677, _0x29eae1, _0x47b93b) {
    this.game = _0xbced31;
    this.container = _0x16a677;
    this.canvas = _0x29eae1;
    this.context = this.canvas.getContext('2d');
    this.resource = new Resource(_0x47b93b);
    this.camera = new Camera(this);
}
Display.TEXRES = 0x10;
Display.prototype.clear = function() {
    var _0x309d49 = this.context;
    if (this.container.clientWidth !== this.canvas.width || this.container.clientHeight !== this.canvas.height) this.canvas.width = this.container.clientWidth, this.canvas.height = this.container.clientHeight;
    _0x309d49.clearRect(0x0, 0x0, this.canvas.width, this.canvas.height);
    _0x309d49.mozImageSmoothingEnabled = !0x1;
    _0x309d49.webkitImageSmoothingEnabled = !0x1;
    _0x309d49.msImageSmoothingEnabled = !0x1;
    _0x309d49.imageSmoothingEnabled = !0x1;
};
Display.prototype.draw = function() {
    var _0x65c839 = this.context;
    this.clear();
    _0x65c839.fillStyle = this.game.getZone().color;
    _0x65c839.fillRect(0x0, 0x0, this.canvas.width, this.canvas.height);
    this.resource.ready() ? (this.game.getZone().dimensions(), _0x65c839.save(), _0x65c839.translate(parseInt(0.5 * this.canvas.width), parseInt(0.5 * this.canvas.height)), _0x65c839.scale(this.camera.scale, this.camera.scale), _0x65c839.translate(parseInt(-this.camera.pos.x * Display.TEXRES), parseInt(-this.camera.pos.y * Display.TEXRES)), this.drawMap(!0x1), this.drawObject(), this.drawMap(!0x0), this.drawEffect(), _0x65c839.restore(), this.drawTouch(), this.drawUI()) : this.drawLoad();
};
Display.prototype.drawMap = function(_0x366c37) {
    for (var _0x18d429 = this.context, _0x134749 = this.resource.getTexture("map"), _0x5e2ea7 = this.game.getZone(), _0x4682a9 = _0x5e2ea7.dimensions(), _0x5d6906 = this.canvas.width / Display.TEXRES * 0.55 / this.camera.scale, _0x52a731 = Math.max(0x0, Math.min(_0x4682a9.x, parseInt(this.camera.pos.x - _0x5d6906))), _0x4682a9 = Math.max(0x0, Math.min(_0x4682a9.x, parseInt(this.camera.pos.x + _0x5d6906))), _0x5d6906 = 0x0; _0x5d6906 < _0x5e2ea7.data.length; _0x5d6906++)
        for (var _0x418daf = _0x5e2ea7.data[_0x5d6906], _0x31e9fd = _0x52a731; _0x31e9fd < _0x4682a9; _0x31e9fd++) {
            var _0x13ccf6 = _0x3b5639.decode16(_0x418daf[_0x31e9fd]);
            if (_0x13ccf6.depth === _0x366c37) {
                var _0xed9b3b = util.sprite.getSprite(_0x134749, _0x13ccf6.index),
                    _0x50d06d = 0x0,
                    _0x13ccf6 = Math.max(0x0, _0x13ccf6.bump - 0x7);
                0x0 < _0x13ccf6 && (_0x50d06d = 0.22 * Math.sin((0x1 - (_0x13ccf6 - 0x2) / 0x8) * Math.PI));
                _0x18d429.drawImage(_0x134749, _0xed9b3b[0x0], _0xed9b3b[0x1], Display.TEXRES, Display.TEXRES, Display.TEXRES * _0x31e9fd, Display.TEXRES * (_0x5d6906 - _0x50d06d), Display.TEXRES, Display.TEXRES);
            }
        }
};
Display.prototype.drawObject = function() {
    for (var _0x386793 = this.context, _0x203bdc = this.game.getZone(), _0x1d3fc3 = _0x203bdc.dimensions(), _0x23df77 = this.canvas.width / Display.TEXRES * 0.75 / this.camera.scale, _0x359726 = Math.max(0x0, Math.min(_0x1d3fc3.x, parseInt(this.camera.pos.x - _0x23df77))), _0x559d56 = Math.max(0x0, Math.min(_0x1d3fc3.x, parseInt(this.camera.pos.x + _0x23df77))), _0x58fcce = [], _0x23df77 = [], _0x648937 = 0x0; _0x648937 < this.game.objects.length; _0x648937++) {
        var _0x19d4a9 = this.game.objects[_0x648937];
        _0x19d4a9.level === _0x203bdc.level && _0x19d4a9.zone === _0x203bdc.id && _0x19d4a9.pid !== this.game.pid && _0x19d4a9.pos.x >= _0x359726 && _0x19d4a9.pos.x <= _0x559d56 && (_0x19d4a9.write && _0x19d4a9.write(_0x23df77), _0x19d4a9.draw && _0x19d4a9.draw(_0x58fcce));
    }(_0x648937 = this.game.getPlayer()) && _0x648937.level === _0x203bdc.level && _0x648937.zone === _0x203bdc.id && (_0x648937.draw(_0x58fcce), _0x648937.write(_0x23df77));
    _0x359726 = this.resource.getTexture("obj");
    for (_0x648937 = 0x0; _0x648937 < _0x58fcce.length; _0x648937++) {
        var _0x152c4d = _0x58fcce[_0x648937],
            _0x559d56 = util.sprite.getSprite(_0x359726, _0x152c4d.index),
            _0x19d4a9 = !!_0x152c4d.reverse,
            _0x4e2360 = !0x1,
            _0x15191d = !0x1;
        switch (_0x152c4d.mode) {
            case 0x0:
                break;
            case 0x1:
                _0x386793.save();
                _0x15191d = !0x0;
                _0x386793.globalAlpha = 0.5;
                break;
            case 0x2:
                0x0 === parseInt(0.5 * this.game.frame) % 0x2 && (_0x386793.save(), _0x15191d = !0x0, _0x386793.globalCompositeOperation = "lighter");
                break;
            case 0x3:
                _0x4e2360 = !0x0;
                break;
            default:
                0xa0 <= _0x152c4d.mode && 0xc0 > _0x152c4d.mode && (_0x386793.save(), _0x15191d = !0x0, _0x386793.globalAlpha = parseFloat(_0x152c4d.mode - 0xa0) / 0x20);
        }
        if (_0x19d4a9 || _0x4e2360) _0x386793.save(), _0x386793.scale(_0x19d4a9 ? -0x1 : 0x1, _0x4e2360 ? -0x1 : 0x1);
        _0x203bdc = _0x19d4a9 ? -0x1 * Display.TEXRES * _0x152c4d.pos.x - Display.TEXRES : Display.TEXRES * _0x152c4d.pos.x;
        _0x152c4d = _0x4e2360 ? -0x1 * Display.TEXRES * (_0x1d3fc3.y - _0x152c4d.pos.y - 0x1) - Display.TEXRES : Display.TEXRES * (_0x1d3fc3.y - _0x152c4d.pos.y - 0x1);
        _0x386793.drawImage(_0x359726, _0x559d56[0x0], _0x559d56[0x1], Display.TEXRES, Display.TEXRES, _0x203bdc, _0x152c4d, Display.TEXRES, Display.TEXRES);
        (_0x19d4a9 || _0x4e2360) && _0x386793.restore();
        _0x15191d && _0x386793.restore();
    }
    for (_0x648937 = 0x0; _0x648937 < _0x23df77.length; _0x648937++) _0x58fcce = _0x23df77[_0x648937], _0x203bdc = Display.TEXRES * _0x58fcce.pos.x + 0.5 * Display.TEXRES, _0x152c4d = Display.TEXRES * (_0x1d3fc3.y - _0x58fcce.pos.y - 0x1) + 0.5 * Display.TEXRES, _0x386793.fillStyle = _0x58fcce.color, _0x386793.font = _0x58fcce.size * Display.TEXRES + "px SmbWeb", _0x386793.textAlign = "center", _0x386793.fillText(_0x58fcce.text, _0x203bdc, _0x152c4d);
};
Display.prototype.drawEffect = function() {
    var _0x1267b4 = this.context,
        _0x1b68dd = this.game.getZone(),
        _0x1f6817 = _0x1b68dd.dimensions(),
        _0x4cd6a4 = this.resource.getTexture("map"),
        _0x4fca3e = this.resource.getTexture("obj"),
        _0x744077 = [];
    _0x1b68dd.getEffects(_0x744077);
    for (_0x1b68dd = 0x0; _0x1b68dd < _0x744077.length; _0x1b68dd++) {
        var _0x4faa89 = _0x744077[_0x1b68dd],
            _0x5b80be;
        switch (_0x4faa89.tex) {
            case "map":
                _0x5b80be = _0x4cd6a4;
                break;
            case "obj":
                _0x5b80be = _0x4fca3e;
        }
        var _0xd61b93 = util.sprite.getSprite(_0x5b80be, _0x4faa89.ind);
        _0xd61b93[0x0] = parseInt(_0xd61b93[0x0] + _0x4faa89.sp.x * Display.TEXRES);
        _0xd61b93[0x1] = parseInt(_0xd61b93[0x1] + _0x4faa89.sp.y * Display.TEXRES);
        _0x1267b4.save();
        _0x1267b4.translate(parseInt(Display.TEXRES * _0x4faa89.ss.x * 0.5), parseInt(Display.TEXRES * _0x4faa89.ss.y * 0.5));
        _0x1267b4.translate(Display.TEXRES * _0x4faa89.pos.x, Display.TEXRES * (_0x1f6817.y - _0x4faa89.pos.y - 0x1));
        _0x1267b4.rotate(_0x4faa89.rot);
        _0x1267b4.translate(-parseInt(Display.TEXRES * _0x4faa89.ss.x * 0.5), -parseInt(Display.TEXRES * _0x4faa89.ss.y * 0.5));
        _0x1267b4.drawImage(_0x5b80be, _0xd61b93[0x0], _0xd61b93[0x1], parseInt(Display.TEXRES * _0x4faa89.ss.x), parseInt(Display.TEXRES * _0x4faa89.ss.y), 0x0, 0x0, parseInt(Display.TEXRES * _0x4faa89.ss.x), parseInt(Display.TEXRES * _0x4faa89.ss.y));
        _0x1267b4.restore();
    }
};
Display.prototype.drawUI = function() {
    var _0xa91ce1 = this.context,
        _0x508165 = this.canvas.width,
        _0x33cc09 = this.canvas.height,
        _0x4e8291 = [0xf0, 0xf1, 0xf2, 0xf1],
        _0x5e50e0 = [0xfc, 0xfa],
        _0x5d46ea = [0xfb, 0xf9],
        _0x388e98 = _0x4e8291[parseInt(this.game.frame / 0x3) % _0x4e8291.length],
        _0x4e8291 = this.resource.getTexture("obj"),
        _0x3a4a7c = this.game.getPlayerInfo(this.game.pid),
        _0x299860;
    void 0x0 !== this.game.levelWarpId ? _0x299860 = this.game.world.getLevel(this.game.levelWarpId) : void 0x0 === this.game.startDelta && (_0x299860 = this.game.world.getInitialLevel());
    this.game.gameOver ? (_0xa91ce1.fillStyle = "black", _0xa91ce1.fillRect(0x0, 0x0, _0x508165, _0x33cc09), _0xa91ce1.fillStyle = "white", _0xa91ce1.font = "32px SmbWeb", _0xa91ce1.textAlign = "center", _0xa91ce1.fillText("GAME OVER", 0.5 * _0x508165, 0.5 * _0x33cc09)) : _0x299860 && (_0xa91ce1.fillStyle = "black", _0xa91ce1.fillRect(0x0, 0x0, _0x508165, _0x33cc09), _0xa91ce1.fillStyle = "white", _0xa91ce1.font = "32px SmbWeb", _0xa91ce1.textAlign = "center", _0xa91ce1.fillText(_0x299860.name, 0.5 * _0x508165, 0.5 * _0x33cc09), 0x0 <= this.game.startTimer && (_0xa91ce1.font = "24px SmbWeb", _0xa91ce1.textAlign = "center", _0xa91ce1.fillText("GAME STARTS IN: " + parseInt(this.game.startTimer / 0x1e), 0.5 * _0x508165, 0.5 * _0x33cc09 + 0x28)));
    0x0 < this.game.victory ? (_0xa91ce1.fillStyle = "white", _0xa91ce1.font = "32px SmbWeb", _0xa91ce1.textAlign = "center", _0xa91ce1.fillText((0x3 >= this.game.victory ? "VICTORY ROYALE #" : "TOO BAD #") + this.game.victory, 0.5 * _0x508165, 0x28)) : (_0xa91ce1.fillStyle = "white", _0xa91ce1.font = "24px SmbWeb", _0xa91ce1.textAlign = "left", _0xa91ce1.fillText(_0x3a4a7c ? _0x3a4a7c.name : "INFRINGIO", 0x8, 0x20), _0x33cc09 = util.sprite.getSprite(_0x4e8291, _0x388e98), _0x299860 = 'x' + (0x9 >= this.game.coins ? '0' + this.game.coins : this.game.coins), _0xa91ce1.drawImage(_0x4e8291, _0x33cc09[0x0], _0x33cc09[0x1], Display.TEXRES, Display.TEXRES, 0x4, 0x28, 0x18, 0x18), _0xa91ce1.fillText(_0x299860, 0x1e, 0x40), _0x33cc09 = util.sprite.getSprite(_0x4e8291, 0xd), _0x299860 = _0xa91ce1.measureText(_0x299860).width + 0x1e, _0xa91ce1.drawImage(_0x4e8291, _0x33cc09[0x0], _0x33cc09[0x1], Display.TEXRES, Display.TEXRES, 0x4 + _0x299860 + 0x10, 0x28, 0x18, 0x18), _0xa91ce1.fillText('x' + (0x9 >= this.game.lives ? '0' + this.game.lives : this.game.lives), 0x4 + _0x299860 + 0x10 + 0x1a, 0x40), this.game instanceof Game ? (_0x299860 = this.game.remain + " PLAYERS REMAIN", _0x33cc09 = _0xa91ce1.measureText(_0x299860).width, _0xa91ce1.fillText(_0x299860, _0x508165 - _0x33cc09 - 0x8, 0x20)) : this.game instanceof Lobby && (_0x299860 = this.game.players.length + (this.game.touchMode ? '' : " / 75 PLAYERS"), _0x33cc09 = _0xa91ce1.measureText(_0x299860).width, _0xa91ce1.fillText(_0x299860, _0x508165 - _0x33cc09 - 0x8, 0x20)), _0x33cc09 = util.sprite.getSprite(_0x4e8291, _0x5d46ea[this.game.audio.muteMusic ? 0x1 : 0x0]), _0xa91ce1.drawImage(_0x4e8291, _0x33cc09[0x0], _0x33cc09[0x1], Display.TEXRES, Display.TEXRES, _0x508165 - 0x18 - 0x8, 0x28, 0x18, 0x18), _0x33cc09 = util.sprite.getSprite(_0x4e8291, _0x5e50e0[this.game.audio.muteSound ? 0x1 : 0x0]), _0xa91ce1.drawImage(_0x4e8291, _0x33cc09[0x0], _0x33cc09[0x1], Display.TEXRES, Display.TEXRES, _0x508165 - 0x18 - 0x8 - 0x18 - 0x8, 0x28, 0x18, 0x18), this.game.input.pad.connected() && (_0x33cc09 = util.sprite.getSprite(_0x4e8291, 0xf8), _0xa91ce1.drawImage(_0x4e8291, _0x33cc09[0x0], _0x33cc09[0x1], Display.TEXRES, Display.TEXRES, _0x508165 - 0x18 - 0x8 - 0x18 - 0x8 - 0x18 - 0x8, 0x28, 0x18, 0x18)));
};
Display.prototype.drawTouch = function() {
    if (this.game.touchMode) {
        var _0x1c3455 = this.context,
            _0x14746d = this.canvas.width,
            _0x5923fc = this.canvas.height;
        this.game.thumbOrigin && (_0x1c3455.fillStyle = "rgba(0,0,0,0.5)", _0x1c3455.fillRect(this.game.thumbOrigin.x - 42.5, this.game.thumbOrigin.y - 42.5, 0x55, 0x55), _0x1c3455.fillStyle = "rgba(255,255,255,1.0)", _0x1c3455.fillRect(this.game.thumbPos.x - 32.5, this.game.thumbPos.y - 32.5, 0x41, 0x41));
        _0x1c3455.fillStyle = "rgba(0,0,0,0.5)";
        _0x1c3455.fillRect(_0x14746d - 0x55, _0x5923fc - 0x55, 0x55, 0x55);
        _0x1c3455.fillRect(_0x14746d - 0x55, _0x5923fc - 0xaa, 0x55, 0x55);
        _0x1c3455.fillStyle = this.game.touchRun ? "rgba(255,255,255,0.75)" : "rgba(0,0,0,0.5)";
        _0x1c3455.fillRect(_0x14746d - 0x55, _0x5923fc - 0xff, 0x55, 0x55);
        _0x1c3455.fillStyle = "white";
        _0x1c3455.font = "65px SmbWeb";
        _0x1c3455.textAlign = "left";
        var _0x4b69c7 = 'A',
            _0x21b0f2 = _0x1c3455.measureText(_0x4b69c7).width;
        _0x1c3455.fillText(_0x4b69c7, _0x14746d - _0x21b0f2 - 0xa, _0x5923fc - 0xa);
        _0x4b69c7 = 'B';
        _0x21b0f2 = _0x1c3455.measureText(_0x4b69c7).width;
        _0x1c3455.fillText(_0x4b69c7, _0x14746d - _0x21b0f2 - 7.5, _0x5923fc - 0x55 - 0xa);
        _0x1c3455.fillStyle = this.game.touchRun ? "black" : "white";
        _0x4b69c7 = 'R';
        _0x21b0f2 = _0x1c3455.measureText(_0x4b69c7).width;
        _0x1c3455.fillText(_0x4b69c7, _0x14746d - _0x21b0f2 - 7.5, _0x5923fc - 0xaa - 0xa);
    }
};
Display.prototype.drawLoad = function() {
    var _0x308e27 = this.context,
        _0xa7c8c5 = this.canvas.width,
        _0x2075a6 = this.canvas.height;
    _0x308e27.fillStyle = "black";
    _0x308e27.fillRect(0x0, 0x0, _0xa7c8c5, _0x2075a6);
    _0x308e27.font = "32px SmbWeb";
    _0x308e27.fillStyle = "white";
    _0x308e27.textAlign = "center";
    _0x308e27.fillText("Loading Resources...", 0.5 * _0xa7c8c5, 0.5 * _0x2075a6);
};
Display.prototype.destroy = function() {};
"use strict";

function World(_0x402568, _0xd5ddd8) {
    this.game = _0x402568;
    this.initial = _0xd5ddd8.initial;
    this.levels = [];
    for (var _0x90b5a9 = 0x0; _0x90b5a9 < _0xd5ddd8.world.length; _0x90b5a9++) this.levels.push(new _0x23d722(_0x402568, _0xd5ddd8.world[_0x90b5a9]));
}
World.prototype.step = function() {
    for (var _0x3ad95e = 0x0; _0x3ad95e < this.levels.length; _0x3ad95e++) this.levels[_0x3ad95e].step();
};
World.prototype.getInitialLevel = function() {
    return this.getLevel(this.initial);
};
World.prototype.getInitialZone = function() {
    var _0xd6f8d6 = this.getLevel(this.initial);
    return this.getZone(_0xd6f8d6.id, _0xd6f8d6.initial);
};
World.prototype.getLevel = function(_0x41b51c) {
    for (var _0x4f2b76 = 0x0; _0x4f2b76 < this.levels.length; _0x4f2b76++) {
        var _0x57c1f5 = this.levels[_0x4f2b76];
        if (_0x57c1f5.id === _0x41b51c) return _0x57c1f5;
    }
};
World.prototype.getZone = function(_0x32b9b6, _0x3f6a5e) {
    for (var _0x370fb7 = 0x0; _0x370fb7 < this.levels.length; _0x370fb7++) {
        var _0x4d6f39 = this.levels[_0x370fb7];
        if (_0x4d6f39.id === _0x32b9b6)
            for (var _0x20c3f2 = 0x0; _0x20c3f2 < _0x4d6f39.zones.length; _0x20c3f2++) {
                var _0x294728 = _0x4d6f39.zones[_0x20c3f2];
                if (_0x294728.id === _0x3f6a5e) return _0x294728;
            }
    }
};

function _0x23d722(_0x2d1dc8, _0x405225) {
    this.game = _0x2d1dc8;
    this.id = _0x405225.id;
    this.name = _0x405225.name;
    this.initial = _0x405225.initial;
    this.zones = [];
    for (var _0x527566 = 0x0; _0x527566 < _0x405225.zone.length; _0x527566++) this.zones.push(new _0x56c417(_0x2d1dc8, this.id, _0x405225.zone[_0x527566]));
}
_0x23d722.prototype.step = function() {
    for (var _0x1ab54d = 0x0; _0x1ab54d < this.zones.length; _0x1ab54d++) this.zones[_0x1ab54d].step();
};
_0x23d722.prototype.getInitial = function() {
    for (var _0x273410 = 0x0; _0x273410 < this.zones.length; _0x273410++) {
        var _0x5d3fb6 = this.zones[_0x273410];
        if (_0x5d3fb6.id === this.initial) return _0x5d3fb6;
    }
};
_0x23d722.prototype.getWarp = function(_0x25716e) {
    for (var _0x14c91b = 0x0; _0x14c91b < this.zones.length; _0x14c91b++)
        for (var _0x270be2 = this.zones[_0x14c91b], _0x5627b5 = 0x0; _0x5627b5 < _0x270be2.warp.length; _0x5627b5++) {
            var _0x2d6c58 = _0x270be2.warp[_0x5627b5];
            if (_0x2d6c58.id === _0x25716e) return {
                'level': this.id,
                'zone': _0x270be2.id,
                'pos': shor2.decode(_0x2d6c58.pos),
                'data': _0x2d6c58.data
            };
        }
};

function _0x56c417(_0x5c9088, _0x38cf11, _0x2619df) {
    this.game = _0x5c9088;
    this.id = _0x2619df.id;
    this.level = _0x38cf11;
    this.initial = _0x2619df.initial;
    this.color = _0x2619df.color;
    this.music = _0x2619df.music ? _0x2619df.music : '';
    this.data = _0x2619df.data;
    this.obj = _0x2619df.obj;
    this.warp = _0x2619df.warp;
    this.bumped = [];
    this.effects = [];
    this.vines = [];
    this.sounds = [];
}
_0x56c417.prototype.update = function(_0x30e590, _0x1e47f0, _0x4944b3, _0x483b60, _0x1cc05b, _0x5b2ad7, _0x2fac6c) {
    var _0x2bbe97 = this.dimensions().y - 0x1 - _0x5b2ad7,
        _0x2bbe97 = _0x3b5639.decode(this.data[_0x2bbe97][_0x1cc05b]);
    _0x2bbe97.definition.TRIGGER(_0x30e590, _0x1e47f0, _0x2bbe97, _0x4944b3, _0x483b60, _0x1cc05b, _0x5b2ad7, _0x2fac6c);
};
_0x56c417.prototype.step = function() {
    for (var _0x7c6c9b = 0x0; _0x7c6c9b < this.bumped.length; _0x7c6c9b++) {
        var _0x23a35d = this.bumped[_0x7c6c9b],
            _0x5ead1d = _0x3b5639.decode(this.data[_0x23a35d.y][_0x23a35d.x]);
        0x0 < _0x5ead1d.bump ? this.data[_0x23a35d.y][_0x23a35d.x] = _0x3b5639.bump(this.data[_0x23a35d.y][_0x23a35d.x], _0x5ead1d.bump - 0x1) : this.bumped.splice(_0x7c6c9b--, 0x1);
    }
    for (_0x7c6c9b = 0x0; _0x7c6c9b < this.effects.length; _0x7c6c9b++) _0x23a35d = this.effects[_0x7c6c9b], _0x23a35d.garbage ? this.effects.splice(_0x7c6c9b--, 0x1) : _0x23a35d.step();
    for (_0x7c6c9b = 0x0; _0x7c6c9b < this.vines.length; _0x7c6c9b++) _0x23a35d = this.vines[_0x7c6c9b], 0x0 > _0x23a35d.y ? this.vines.splice(_0x7c6c9b--, 0x1) : this.data[_0x23a35d.y--][_0x23a35d.x] = _0x23a35d.td;
    for (_0x7c6c9b = 0x0; _0x7c6c9b < this.sounds.length; _0x7c6c9b++) this.sounds[_0x7c6c9b].done() && this.sounds.splice(_0x7c6c9b--, 0x1);
    _0x3b5639.update(this.game);
};
_0x56c417.prototype.tile = function(_0x389bfa, _0x5b0300) {
    _0x5b0300 = this.dimensions().y - 0x1 - _0x5b0300;
    return this.data[_0x5b0300][_0x389bfa];
};
_0x56c417.prototype.bump = function(_0x54831d, _0x13da6a) {
    var _0xf63141 = this.dimensions().y - 0x1 - _0x13da6a;
    this.data[_0xf63141][_0x54831d] = _0x3b5639.bump(this.data[_0xf63141][_0x54831d], 0xf);
    this.bumped.push({
        'x': _0x54831d,
        'y': _0xf63141
    });
    this.play(_0x54831d, _0x13da6a, "sfx/bump.wav", 0.5, 0.04);
};
_0x56c417.prototype.replace = function(_0x228bda, _0x147d52, _0x1db982) {
    _0x147d52 = this.dimensions().y - 0x1 - _0x147d52;
    this.data[_0x147d52][_0x228bda] = _0x1db982;
};
_0x56c417.prototype.grow = function(_0x366e7a, _0x478f53, _0x2ad199) {
    _0x478f53 = this.dimensions().y - 0x1 - _0x478f53;
    this.vines.push({
        'x': _0x366e7a,
        'y': _0x478f53,
        'td': _0x2ad199
    });
};
_0x56c417.prototype.break = function(_0x35af58, _0x47b93f, _0xa0e61a) {
    var _0x301255 = this.dimensions().y - 0x1 - _0x47b93f,
        _0x11c3fb = _0x3b5639.decode16(this.data[_0x301255][_0x35af58]);
    this.data[_0x301255][_0x35af58] = _0xa0e61a;
    this.effects.push(new _0x79b656(vec2.make(_0x35af58, _0x47b93f), _0x11c3fb.index));
    this.play(_0x35af58, _0x47b93f, "sfx/break.wav", 1.5, 0.04);
};
_0x56c417.prototype.coin = function(_0x115fad, _0xb027db) {
    this.dimensions();
    this.effects.push(new _0x38c270(vec2.make(_0x115fad, _0xb027db)));
};
_0x56c417.prototype.play = function(_0x199683, _0xae3d04, _0x1c1756, _0x127992, _0x32d3de) {
    this.game.getZone() === this && (_0x1c1756 = this.game.audio.getSpatialAudio(_0x1c1756, _0x127992, _0x32d3de, "effect"), _0x1c1756.play(vec2.make(_0x199683, _0xae3d04)), this.sounds.push(_0x1c1756));
};
_0x56c417.prototype.dimensions = function() {
    return vec2.make(this.data[0x0].length, this.data.length);
};
_0x56c417.prototype.getTile = function(_0x5658e3) {
    var _0x5148f1 = this.dimensions();
    _0x5658e3 = vec2.copy(_0x5658e3);
    _0x5658e3.y = _0x5148f1.y - _0x5658e3.y - 0x1;
    return _0x3b5639.decode(this.data[Math.max(0x0, Math.min(_0x5148f1.y, Math.floor(_0x5658e3.y)))][Math.max(0x0, Math.min(_0x5148f1.x, Math.floor(_0x5658e3.x)))]);
};
_0x56c417.prototype.getTiles = function(_0x147d82, _0x75c9d8) {
    var _0x1657de = this.dimensions(),
        _0x339571 = vec2.copy(_0x147d82);
    _0x339571.y = _0x1657de.y - _0x339571.y;
    _0x147d82 = parseInt(Math.max(Math.min(Math.floor(_0x339571.x) - 0x1, _0x1657de.x), 0x0));
    var _0x54b386 = parseInt(Math.max(Math.min(Math.ceil(_0x339571.x + _0x75c9d8.x) + 0x1, _0x1657de.x), 0x0)),
        _0x231a12 = parseInt(Math.max(Math.min(Math.floor(_0x339571.y - _0x75c9d8.y) - 0x1, _0x1657de.y), 0x0));
    _0x75c9d8 = parseInt(Math.max(Math.min(Math.ceil(_0x339571.y) + 0x1, _0x1657de.y), 0x0));
    for (_0x339571 = []; _0x231a12 < _0x75c9d8; _0x231a12++)
        for (var _0x645bb2 = _0x147d82; _0x645bb2 < _0x54b386; _0x645bb2++) {
            var _0x4d81eb = _0x3b5639.decode(this.data[_0x231a12][_0x645bb2]);
            _0x4d81eb.pos = vec2.make(_0x645bb2, _0x1657de.y - 0x1 - _0x231a12);
            _0x4d81eb.ind = [_0x231a12, _0x645bb2];
            _0x339571.push(_0x4d81eb);
        }
    return _0x339571;
};
_0x56c417.prototype.getEffects = function(_0xc0030e) {
    for (var _0x49825c = 0x0; _0x49825c < this.effects.length; _0x49825c++) this.effects[_0x49825c].draw(_0xc0030e);
};
"use strict";

function Game(_0x3958b6) {
    this.container = document.getElementById("game");
    this.canvas = document.getElementById("game-canvas");
    this.input = new Input(this, this.canvas);
    this.display = new Display(this, this.container, this.canvas, _0x3958b6.resource);
    this.audio = new Audio(this);
    this.objects = [];
    this.team = this.pid = void 0x0;
    this.players = [];
    this.sounds = [];
    this.load(_0x3958b6);
    this.lastDraw = this.frame = 0x0;
    this.delta = util.time.now();
    this.buffer = [
        [],
        []
    ];
    this.out = [];
    this.ready = !0x1;
    this.startTimer = -0x1;
    this.touchFull = this.touchMode = !0x1;
    this.thumbPos = this.thumbOrigin = this.thumbId = void 0x0;
    this.touchRun = !0x1;
    this.victory = this.coins = this.lives = this.remain = 0x0;
    this.victoryMusic = !0x1;
    this.gameOverTimer = this.rate = 0x0;
    this.gameOver = !0x1;
    _0x3958b6 = this.getZone().dimensions();
    this.display.camera.position(vec2.scale(_0x3958b6, 0.5));
    this.levelWarpTimer = 0x0;
    this.levelWarpId = void 0x0;
    var that = this;
    this.frameReq = requestAnimFrameFunc.call(window, function() {
        that.draw();
    });
    this.loopReq = setTimeout(function() {
        that.loop();
    }, 0x2);
}
Game.TICK_RATE = 0x21;
Game.FDLC_TARGET = 0x3;
Game.FDLC_MAX = Game.FDLC_TARGET + 0x2;
Game.LEVEL_WARP_TIME = 0x64;
Game.GAME_OVER_TIME = 0xc8;
Game.COINS_TO_LIFE = 0x1e;
Game.prototype.load = function(data) {
    app.menu.load.show();
    this.world = new World(this, data);
    for (data = 0x0; data < this.world.levels.length; data++)
        for (var lvl = this.world.levels[data], j = 0x0; j < lvl.zones.length; j++)
            for (var zn = lvl.zones[j], k = 0x0; k < zn.obj.length; k++) {
                for (var obj = zn.obj[k], pgen = [obj.pos], _0x5c83f4 = 0x0; _0x5c83f4 < obj.param.length; _0x5c83f4++) pgen.push(obj.param[_0x5c83f4]);
                this.createObject(obj.type, lvl.id, zn.id, shor2.decode(obj.pos), pgen);
            }
};
Game.prototype.send = function(packet) {
    // console.log("Sending Packet");
    app.net.send(packet);
};
Game.prototype.handlePacket = function(packet) {
    // console.log("Received Packet!");
    switch (packet.type) {
        // Ingame Type Packets gxx
        case "g12":
            return this.updatePlayerList(packet), !0x0;
        case "g13":
            return this.gameStartTimer(packet), !0x0;
        // Input type packets ixx
        default:
            return !0x1;
    }
};
Game.prototype.updatePlayerList = function(packet) {
    this.players = packet.players;
    void 0x0 !== this.pid && this.updateTeam();
};
Game.prototype.gameStartTimer = function(packet) {
    0x0 > this.startTimer && this.play("sfx/alert.wav", 0x1, 0x0);
    0x0 < packet.time ? (this.startTimer = packet.time, this.remain = this.players.length) : this.doStart();
};
Game.prototype.updateTeam = function() {
    if (this.team = this.getPlayerInfo(this.pid).team)
        for (var _0x24f69f = 0x0; _0x24f69f < this.players.length; _0x24f69f++) {
            var _0xb508a1 = this.players[_0x24f69f];
            if (_0xb508a1.id !== this.pid) { // && _0xb508a1.team === this.team) { // Igoor> Show all player names
                var _0xf52a2a = this.getGhost(_0xb508a1.id);
                _0xf52a2a && (_0xf52a2a.name = _0xb508a1.name);
            }
        }
};
Game.prototype.handleBinary = function(_0x1114ac) {
    // console.log("binary?");
    _0x1114ac = NETX.decode(_0x1114ac);
    this.ready ? this.updatePacket(_0x1114ac) : this.doUpdate(_0x1114ac);
};
Game.prototype.updatePacket = function(data) {
    for (this.buffer.push(data); this.buffer.length > Game.FDLC_MAX;) data = this.buffer.shift(), this.doUpdate(data);
};
Game.prototype.doUpdate = function(data) {
    for (var i = 0x0; i < data.length; i++) {
        var n = data[i];
        switch (n.designation) {
            case 0x2:
                this.doNET001(n);
                break;
            case 0x10:
                this.doNET010(n);
                break;
            case 0x11:
                this.doNET011(n);
                break;
            case 0x12:
                this.doNET012(n);
                break;
            case 0x13:
                this.doNET013(n);
                break;
            case 0x17:
                this.doNET017(n);
                break;
            case 0x18:
                this.doNET018(n);
                break;
            case 0x20:
                this.doNET020(n);
                break;
            case 0x30:
                this.doNET030(n);
        }
    }
};
// ASSIGN_PID
Game.prototype.doNET001 = function(n) {
    this.pid = n.pid;
    this.ready = !0x0;
    app.menu.game.show();
};
// CREATE_PLAYER_OBJECT
Game.prototype.doNET010 = function(n) {
    if (n.pid !== this.pid) {
        var obj = this.createObject(PlayerObject.ID, n.level, n.zone, shor2.decode(n.pos), [n.pid]);
        obj.setState(PlayerObject.SNAME.GHOST);
        this.team && (n = this.getPlayerInfo(n.pid)) && n.id !== this.pid && n.team === this.team && (obj = this.getGhost(n.id)) && (obj.name = n.name);
    }
};
// KILL_PLAYER_OBJECT
Game.prototype.doNET011 = function(n) {
    n.pid !== this.pid && ((n = this.getGhost(n.pid)) && n.kill(), this.remain = this.getRemain());
};
// UPDATE_PLAYER_OBJECT
Game.prototype.doNET012 = function(n) {
    if (n.pid !== this.pid) {
        var obj = this.getGhost(n.pid);
        obj && obj.update(n);
    }
};
// PLAYER_OBJECT_EVENT
Game.prototype.doNET013 = function(n) {
    n.pid !== this.pid && this.getGhost(n.pid).trigger(n.type);
};
Game.prototype.doNET017 = function(n) {
    n = 0;//Cookies.get("heated_gamer_moments");
    // Cookies.set("heated_gamer_moments", n ? parseInt(n) + 0x1 : 0x1, {
    //     'expires': 0x16d
    // });
};
// PLAYER_RESULT_REQUEST
Game.prototype.doNET018 = function(n) {
    if (!(0x0 >= n.result)) {
        n.pid === this.pid ? this.rate = n.extra : 0x0 !== this.rate && n.result++;
        var obj = this.getGhost(n.pid);
        if (obj && (obj = this.getText(obj.level, obj.zone, n.result.toString()))) {
            var nam = this.getPlayerInfo(n.pid).name;
            this.createObject(TextObject.ID, obj.level, obj.zone, vec2.add(obj.pos, vec2.make(0x0, -0x3)), [void 0x0, -0.1, 0.25, "#FFFFFF", nam]);
        }
        n.pid === this.pid && ((obj = this.getPlayer()) && obj.axe(n.result), this.victory = n.result, 0x1 === n.result && (n = 0/*Cookies.get("epic_gamer_moments")*/, Cookies.set("epic_gamer_moments", n ? parseInt(n) + 0x1 : 0x1, {
            'expires': 0x16d
        })));
    }
};
// OBJECT_EVENT_TRIGGER
Game.prototype.doNET020 = function(n) {
    if (!(n.pid === this.pid && 0xa0 > n.type)) { // Don't repeat events that we reported, unless they fall into the 'explicit sync' category.
        var obj = this.getObject(n.level, n.zone, n.oid);
        obj && obj.update(n.type);
    }
};
// TILE_EVENT_TRIGGER
Game.prototype.doNET030 = function(n) {
    if (n.pid === this.pid) return; // Toss out event if we were the ones who created it originally
    this.world.getZone(n.level, n.zone).update(this, n.pid, n.level, n.zone, n.pos.x, n.pos.y, n.type);
};
Game.prototype.doStart = function() {
    this.startTimer = -0x1;
    this.startDelta = util.time.now();
    this.doSpawn();
};
Game.prototype.doDetermine = function() {
    var _0x3bc016 = this.input.pop();
    0x0 < _0x3bc016.touch.length ? this.touchMode = !0x0 : 0x0 < _0x3bc016.keyboard.length && (this.touchMode = !0x1);
    this.touchMode ? this.doTouch(_0x3bc016) : this.doInput(_0x3bc016);
};
Game.prototype.doTouch = function(_0x16ab60) {
    var _0xf827ff = this.input,
        _0x4d1269 = this.getPlayer();
    this.display.camera.scale = 0x2;
    if (!this.touchFull) {
        var _0x32b9fa = document.documentElement;
        _0x32b9fa.requestFullscreen ? this.container.requestFullscreen() : _0x32b9fa.mozRequestFullScreen ? _0x32b9fa.mozRequestFullScreen() : _0x32b9fa.webkitRequestFullscreen ? _0x32b9fa.webkitRequestFullscreen() : _0x32b9fa.msRequestFullscreen && _0x32b9fa.msRequestFullscreen();
        this.touchFull = !0x0;
    }
    for (var _0x19b888 = this, _0x32b9fa = this.display.canvas.width, _0x43b0a9 = this.display.canvas.height, _0x4cea84 = !0x1, _0x56e5b0 = !0x1, _0x32b9fa = [{
            'pos': vec2.make(_0x32b9fa - 0x55, _0x43b0a9 - 0x55),
            'dim': vec2.make(0x55, 0x55),
            'press': function() {
                _0x4cea84 = !0x0;
            }
        }, {
            'pos': vec2.make(_0x32b9fa - 0x55, _0x43b0a9 - 0xaa),
            'dim': vec2.make(0x55, 0x55),
            'press': function() {
                _0x56e5b0 = !0x0;
            }
        }, {
            'pos': vec2.make(_0x32b9fa - 0x55, _0x43b0a9 - 0xff),
            'dim': vec2.make(0x55, 0x55),
            'click': function() {
                _0x19b888.touchRun = !_0x19b888.touchRun;
            }
        }, {
            'pos': vec2.make(_0x32b9fa - 0x18 - 0x8, 0x28),
            'dim': vec2.make(0x18, 0x18),
            'click': function() {
                _0x19b888.audio.muteMusic = !_0x19b888.audio.muteMusic;
                _0x19b888.audio.saveSettings();
            }
        }, {
            'pos': vec2.make(_0x32b9fa - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
            'dim': vec2.make(0x18, 0x18),
            'click': function() {
                _0x19b888.audio.muteSound = !_0x19b888.audio.muteSound;
                _0x19b888.audio.saveSettings();
            }
        }], _0x2548fc, _0x43b0a9 = 0x0; _0x43b0a9 < _0xf827ff.touch.pos.length; _0x43b0a9++) {
        var _0xb6453b = _0xf827ff.touch.pos[_0x43b0a9];
        if (this.thumbId === _0xb6453b.id) _0x2548fc = _0xb6453b, this.thumbId = _0xb6453b.id, this.thumbPos = _0xb6453b;
        else
            for (_0x43b0a9 = 0x0; _0x43b0a9 < _0x32b9fa.length; _0x43b0a9++) {
                var _0x5b2133 = _0x32b9fa[_0x43b0a9];
                squar.inside(_0xb6453b, _0x5b2133.pos, _0x5b2133.dim) && _0x5b2133.press && _0x5b2133.press();
            }
    }
    for (_0x43b0a9 = 0x0; _0x43b0a9 < _0x16ab60.touch.length; _0x43b0a9++) {
        _0xb6453b = _0x16ab60.touch[_0x43b0a9];
        _0xf827ff = !0x1;
        for (_0x43b0a9 = 0x0; _0x43b0a9 < _0x32b9fa.length; _0x43b0a9++)
            if (_0x5b2133 = _0x32b9fa[_0x43b0a9], squar.inside(_0xb6453b, _0x5b2133.pos, _0x5b2133.dim)) {
                _0xf827ff = !0x0;
                _0x5b2133.click && _0x5b2133.click();
                break;
            }
        _0x2548fc || _0xf827ff || (_0x2548fc = _0xb6453b, this.thumbId = _0xb6453b.id, this.thumbPos = this.thumbOrigin = _0xb6453b);
    }
    var _0x204529;
    if (_0x2548fc) {
        _0x16ab60 = Math.min(0x40, vec2.distance(this.thumbPos, this.thumbOrigin));
        var _0x90e934 = vec2.normalize(vec2.subtract(this.thumbPos, this.thumbOrigin));
        _0x204529 = vec2.scale(_0x90e934, _0x16ab60 / 0x40);
        this.thumbPos = vec2.add(this.thumbOrigin, vec2.scale(_0x90e934, _0x16ab60));
    } else this.thumbPos = this.thumbOrigin = this.thumbId = void 0x0;
    _0x4d1269 && _0x90e934 ? (_0x90e934 = [0x0, 0x0], 0.33 < _0x204529.x && _0x90e934[0x0]++, -0.33 > _0x204529.x && _0x90e934[0x0]--, 0.33 < _0x204529.y && _0x90e934[0x1]--, -0.33 > _0x204529.y && _0x90e934[0x1]++, _0x4d1269.input(_0x90e934, _0x4cea84, this.touchRun ? !_0x56e5b0 : _0x56e5b0)) : _0x4d1269 && _0x4d1269.input([0x0, 0x0], _0x4cea84, this.touchRun ? !_0x56e5b0 : _0x56e5b0);
};
Game.prototype.doInput = function(imp) {
    this.input.pad.update();
    var b = this.input,
        mous = this.input.mouse,
        keys = this.input.keyboard.keys,
        pad = this.input.pad;
    this.inx27 = keys[0x1b];
    var obj = this.getPlayer();
    if (obj) {
        var dir = [0x0, 0x0];
        (keys[b.assignK.up] || pad.button(b.assignG.up) || -0.1 > pad.ax.y) && dir[0x1]++;
        (keys[b.assignK.down] || pad.button(b.assignG.down) || 0.1 < pad.ax.y) && dir[0x1]--;
        (keys[b.assignK.left] || pad.button(b.assignG.left) || -0.1 > pad.ax.x) && dir[0x0]--;
        (keys[b.assignK.right] || pad.button(b.assignG.right) || 0.1 < pad.ax.x) && dir[0x0]++;
        var a = keys[b.assignK.a] || pad.button(b.assignG.a), // SPACE
            b = keys[b.assignK.b] || pad.button(b.assignG.b); // Shift or Num0
        mous.spin && this.display.camera.zoom(mous.spin); // Mouse wheel -> Camera zoom
        obj.input(dir, a, b);
        for (var that = this, b = this.display.canvas.width, mous = [{
                'pos': vec2.make(b - 0x18 - 0x8, 0x28),
                'dim': vec2.make(0x18, 0x18),
                'click': function() {
                    that.audio.muteMusic = !that.audio.muteMusic;
                    that.audio.saveSettings();
                }
            }, {
                'pos': vec2.make(b - 0x18 - 0x8 - 0x18 - 0x8, 0x28),
                'dim': vec2.make(0x18, 0x18),
                'click': function() {
                    that.audio.muteSound = !that.audio.muteSound;
                    that.audio.saveSettings();
                }
            }], obj = 0x0; obj < imp.mouse.length; obj++)
            for (dir = imp.mouse[obj], a = 0x0; a < mous.length; a++) b = mous[a], 0x0 === dir.btn && squar.inside(dir.pos, b.pos, b.dim) && b.click();
    }
};
Game.prototype.doStep = function() {
    var ply = this.getPlayer();
    if (ply && void 0x0 !== this.levelWarpId && 0x0 < this.levelWarpTimer && 0x1 > --this.levelWarpTimer) {
        var z = this.world.getLevel(this.levelWarpId).getInitial();
        ply.level = z.level;
        ply.zone = z.id;
        ply.pos = shor2.decode(z.initial);
        ply.autoTarget = void 0x0;
        ply.grounded = !0x1;
        ply.show();
        ply.invuln();
        this.levelWarpId = void 0x0;
    }
    for (z = 0x0; z < this.objects.length; z++) {
        var obj = this.objects[z];
        obj.step();
        obj.garbage && this.objects.splice(z--, 0x1);
    }
    z = this.getZone();
    ply && !ply.dead && this.display.camera.position(vec2.make(ply.pos.x, 0.5 * z.dimensions().y));
    this.world.step();
    for (z = 0x0; z < this.sounds.length; z++) this.sounds[z].done() && this.sounds.splice(z--, 0x1);
    this.doMusic();
    this.audio.update();
    void 0x0 === this.startDelta || this.gameOver || ply ? this.gameOver ? ++this.gameOverTimer > Game.GAME_OVER_TIME && app.close() : this.gameOverTimer = 0x0 : 0x0 < this.lives && 0x0 >= this.victory ? (ply = this.getZone().level, this.doSpawn(), this.levelWarp(ply), this.lives--) : 0x2d < ++this.gameOverTimer && (this.gameOver = !0x0, this.gameOverTimer = 0x0);
    this.lastDraw = this.frame;
    this.frame++;
};
Game.prototype.doSpawn = function() {
    if (!this.getPlayer()) {
        var _0x55031d = this.getZone(),
            _0x1f92b4 = _0x55031d.initial;
        this.createObject(PlayerObject.ID, _0x55031d.level, _0x55031d.id, shor2.decode(_0x1f92b4), [this.pid]);
        this.out.push(CREATE_PLAYER_OBJECT.encode(_0x55031d.level, _0x55031d, _0x1f92b4));
    }
    this.updateTeam();
};
Game.prototype.doMusic = function() {
    var _0x59c784 = this.getPlayer(),
        _0x48cc46 = this.getZone();
    this.gameOver ? this.audio.setMusic("music/gameover.mp3", !0x1) : _0x59c784 && _0x59c784.dead ? this.audio.setMusic("music/dead.mp3", !0x1) : _0x59c784 && _0x59c784.autoTarget && 0x0 >= this.victory ? this.audio.setMusic("music/level.mp3", !0x1) : 0x0 < this.victory && !this.victoryMusic ? (this.audio.setMusic("music/castle.mp3", !0x1), this.victoryMusic = !0x0) : 0x0 < this.victory && 0x4 > this.victory && this.victoryMusic && !this.audio.music.playing ? this.audio.setMusic("music/victory.mp3", !0x1) : _0x59c784 && 0x0 >= this.levelWarpTimer && void 0x0 !== this.startDelta && !this.victoryMusic && ('' !== _0x48cc46.music ? this.audio.setMusic(_0x48cc46.music, !0x0) : this.audio.stopMusic());
};
Game.prototype.doPush = function() {
    var _0x3a34ba = this.getPlayer();
    _0x3a34ba && !_0x3a34ba.dead && this.out.push(UPDATE_PLAYER_OBJECT.encode(_0x3a34ba.level, _0x3a34ba.zone, _0x3a34ba.pos, _0x3a34ba.sprite.ID, _0x3a34ba.reverse));
    _0x3a34ba = _0x5b3c43(this.out);
    this.out = [];
    app.net.sendBinary(_0x3a34ba);
};
Game.prototype.createObject = function(_0x2cfee2, _0x42c475, _0x3d76c7, _0x5b9308, _0x269b88) {
    _0x42c475 = [void 0x0, this, _0x42c475, _0x3d76c7, _0x5b9308];
    for (_0x3d76c7 = 0x0; _0x3d76c7 < _0x269b88.length; _0x3d76c7++) _0x42c475.push(_0x269b88[_0x3d76c7]);
    _0x2b132.OBJECT(_0x2cfee2);
    _0x2cfee2 = new(Function.prototype.bind.apply(_0x2b132.OBJECT(_0x2cfee2), _0x42c475))();
    this.objects.push(_0x2cfee2);
    return _0x2cfee2;
};
Game.prototype.getObject = function(_0x46bc38, _0x39a7d2, _0x571f38) {
    for (var _0x46a10e = 0x0; _0x46a10e < this.objects.length; _0x46a10e++) {
        var _0x31691a = this.objects[_0x46a10e];
        if (void 0x0 !== _0x31691a.oid && _0x31691a.level === _0x46bc38 && _0x31691a.zone === _0x39a7d2 && _0x31691a.oid === _0x571f38) return _0x31691a;
    }
};
Game.prototype.getFlag = function(_0x3ff6f8, _0x23ac07) {
    for (var _0x1712ec = 0x0; _0x1712ec < this.objects.length; _0x1712ec++) {
        var _0x3aad16 = this.objects[_0x1712ec];
        if (_0x3aad16.level === _0x3ff6f8 && _0x3aad16.zone === _0x23ac07 && _0x3aad16 instanceof _0x42a575) return _0x3aad16;
    }
};
Game.prototype.getText = function(_0x55b1f3, _0xa7c596, _0x26077c) {
    for (var _0x4a1af5 = 0x0; _0x4a1af5 < this.objects.length; _0x4a1af5++) {
        var _0x5dfc3b = this.objects[_0x4a1af5];
        if (_0x5dfc3b && _0x5dfc3b.level === _0x55b1f3 && _0x5dfc3b.zone === _0xa7c596 && _0x5dfc3b instanceof TextObject && _0x5dfc3b.text === _0x26077c.toString()) return _0x5dfc3b;
    }
};
Game.prototype.getPlatforms = function() {
    for (var _0x162323 = this.getZone(), _0x5a8ebc = [], _0x23d166 = 0x0; _0x23d166 < this.objects.length; _0x23d166++) {
        var _0x412059 = this.objects[_0x23d166];
        (_0x412059 instanceof _0x23afdb || _0x412059 instanceof _0x4cfe85) && _0x412059.level === _0x162323.level && _0x412059.zone === _0x162323.id && _0x5a8ebc.push(_0x412059);
    }
    return _0x5a8ebc;
};
Game.prototype.getGhost = function(_0x45d2df) {
    for (var _0x2e7390 = 0x0; _0x2e7390 < this.objects.length; _0x2e7390++) {
        var _0x441994 = this.objects[_0x2e7390];
        if (void 0x0 !== _0x441994.pid && _0x441994.pid === _0x45d2df) return _0x441994;
    }
};
Game.prototype.getPlayer = function() {
    for (var _0x53f94f = 0x0; _0x53f94f < this.objects.length; _0x53f94f++) {
        var _0x26cc25 = this.objects[_0x53f94f];
        if (void 0x0 !== _0x26cc25.pid && _0x26cc25.pid === this.pid) return _0x26cc25;
    }
};
Game.prototype.getZone = function() {
    var _0x3094c6 = this.getPlayer();
    return _0x3094c6 ? this.lastZone = this.world.getZone(_0x3094c6.level, _0x3094c6.zone) : this.lastZone ? this.lastZone : this.world.getInitialZone();
};
Game.prototype.getPlayerInfo = function(_0x4af6ab) {
    for (var _0x1dbfac = 0x0; _0x1dbfac < this.players.length; _0x1dbfac++) {
        var _0x566f7a = this.players[_0x1dbfac];
        if (_0x566f7a.id === _0x4af6ab) return _0x566f7a;
    }
};
Game.prototype.getRemain = function() {
    for (var _0x3b690b = 0x0, _0x5c3d42 = 0x0; _0x5c3d42 < this.players.length; _0x5c3d42++) {
        var _0x140df1 = this.getGhost(this.players[_0x5c3d42].id);
        _0x140df1 && !_0x140df1.dead && _0x3b690b++;
    }
    return _0x3b690b;
};
Game.prototype.play = function(_0x15cf7c, _0x4e52e8, _0x2ec40e) {
    _0x15cf7c = this.audio.getAudio(_0x15cf7c, _0x4e52e8, _0x2ec40e, "effect");
    _0x15cf7c.play();
    this.sounds.push(_0x15cf7c);
};
Game.prototype.levelWarp = function(_0x42aa45) {
    this.levelWarpId = _0x42aa45;
    this.levelWarpTimer = Game.LEVEL_WARP_TIME;
    this.getPlayer().hide();
};
Game.prototype.coinage = function() {
    this.coins = Math.min(0x63, this.coins + 0x1);
    this.coins >= Game.COINS_TO_LIFE && (this.lifeage(), this.coins = 0x0);
    this.play("sfx/coin.wav", 0.4, 0x0);
};
Game.prototype.lifeage = function() {
    this.lives = Math.min(0x63, this.lives + 0x1);
    this.play("sfx/life.wav", 0x1, 0x0);
};
Game.prototype.loop = function() {
    try {
        if (this.ready && void 0x0 !== this.startDelta) {
            var _0x141b78 = util.time.now(),
                _0xfc800d = parseInt((_0x141b78 - this.startDelta) / Game.TICK_RATE);
            if (_0xfc800d > this.frame) {
                for (var _0x46e24e = !0x0; this.buffer.length > Game.FDLC_TARGET || _0x46e24e && 0x0 < this.buffer.length;) {
                    var _0x286104 = this.buffer.shift();
                    this.doUpdate(_0x286104);
                    _0x46e24e = !0x1;
                }
                for (this.doDetermine(); _0xfc800d > this.frame;) this.doStep();
                this.doPush();
                this.delta = _0x141b78;
            }
        }
    } catch (_0x210b90) {}
    var _0x5b7ec0 = this;
    this.loopReq = setTimeout(function() {
        _0x5b7ec0.loop();
    }, 0x2);
};
Game.prototype.draw = function() {
    this.lastDraw === this.frame && void 0x0 !== this.startDelta || this.display.draw();
    var _0x9123e0 = this;
    this.frameReq = requestAnimFrameFunc.call(window, function() {
        _0x9123e0.draw();
    });
};
Game.prototype.destroy = function() {
    _0x2d0f3c.call(window, this.frameReq);
    clearTimeout(this.loopReq);
    this.input.destroy();
    this.display.destroy();
    this.audio.destroy();
};
"use strict";

function Lobby(_0x41a8dd) {
    Game.call(this, _0x41a8dd);
    this.lobbyTimer = 0x5a;
}
Lobby.prototype.load = Game.prototype.load;
Lobby.prototype.send = Game.prototype.send;
Lobby.prototype.handlePacket = Game.prototype.handlePacket;
Lobby.prototype.updatePlayerList = Game.prototype.updatePlayerList;
Lobby.prototype.gameStartTimer = function() {};
Lobby.prototype.updateTeam = Game.prototype.updateTeam;
Lobby.prototype.handleBinary = Game.prototype.handleBinary;
Lobby.prototype.updatePacket = Game.prototype.updatePacket;
Lobby.prototype.doUpdate = Game.prototype.doUpdate;
Lobby.prototype.doNET001 = Game.prototype.doNET001;
Lobby.prototype.doNET010 = Game.prototype.doNET010;
Lobby.prototype.doNET011 = Game.prototype.doNET011;
Lobby.prototype.doNET012 = Game.prototype.doNET012;
Lobby.prototype.doNET013 = Game.prototype.doNET013;
Lobby.prototype.doNET020 = Game.prototype.doNET020;
Lobby.prototype.doNET030 = Game.prototype.doNET030;
Lobby.prototype.doStart = Game.prototype.doStart;
Lobby.prototype.doDetermine = Game.prototype.doDetermine;
Lobby.prototype.doInput = Game.prototype.doInput;
Lobby.prototype.doTouch = Game.prototype.doTouch;
Lobby.prototype.doStep = function() {
    this.doSpawn();
    Game.prototype.doStep.call(this);
};
Lobby.prototype.doSpawn = Game.prototype.doSpawn;
Lobby.prototype.doMusic = Game.prototype.doMusic;
Lobby.prototype.doPush = Game.prototype.doPush;
Lobby.prototype.createObject = Game.prototype.createObject;
Lobby.prototype.getObject = Game.prototype.getObject;
Lobby.prototype.getFlag = Game.prototype.getFlag;
Lobby.prototype.getPlatforms = Game.prototype.getPlatforms;
Lobby.prototype.getGhost = Game.prototype.getGhost;
Lobby.prototype.getPlayer = Game.prototype.getPlayer;
Lobby.prototype.getZone = Game.prototype.getZone;
Lobby.prototype.getPlayerInfo = Game.prototype.getPlayerInfo;
Lobby.prototype.getRemain = Game.prototype.getRemain;
Lobby.prototype.play = Game.prototype.play;
Lobby.prototype.levelWarp = Game.prototype.levelWarp;
Lobby.prototype.coinage = Game.prototype.coinage;
Lobby.prototype.lifeage = Game.prototype.lifeage;
Lobby.prototype.loop = function() {
    0x0 < this.lobbyTimer ? this.lobbyTimer-- : void 0x0 === this.startDelta && this.doStart();
    Game.prototype.loop.call(this);
};
Lobby.prototype.draw = Game.prototype.draw;
Lobby.prototype.destroy = Game.prototype.destroy;
"use strict";

function Jail(_0x338d27) {
    Game.call(this, _0x338d27);
    this.lobbyTimer = 0x5a;
}
Jail.prototype.load = Game.prototype.load;
Jail.prototype.send = Game.prototype.send;
Jail.prototype.handlePacket = Game.prototype.handlePacket;
Jail.prototype.updatePlayerList = Game.prototype.updatePlayerList;
Jail.prototype.gameStartTimer = function() {};
Jail.prototype.updateTeam = Game.prototype.updateTeam;
Jail.prototype.handleBinary = Game.prototype.handleBinary;
Jail.prototype.updatePacket = Game.prototype.updatePacket;
Jail.prototype.doUpdate = Game.prototype.doUpdate;
Jail.prototype.doNET001 = Game.prototype.doNET001;
Jail.prototype.doNET010 = Game.prototype.doNET010;
Jail.prototype.doNET011 = Game.prototype.doNET011;
Jail.prototype.doNET012 = Game.prototype.doNET012;
Jail.prototype.doNET013 = Game.prototype.doNET013;
Jail.prototype.doNET020 = Game.prototype.doNET020;
Jail.prototype.doNET030 = Game.prototype.doNET030;
Jail.prototype.doStart = Game.prototype.doStart;
Jail.prototype.doDetermine = Game.prototype.doDetermine;
Jail.prototype.doInput = Game.prototype.doInput;
Jail.prototype.doTouch = Game.prototype.doTouch;
Jail.prototype.doStep = function() {
    Game.prototype.doStep.call(this);
};
Jail.prototype.doSpawn = function() {};
Jail.prototype.doMusic = Game.prototype.doMusic;
Jail.prototype.doPush = Game.prototype.doPush;
Jail.prototype.createObject = Game.prototype.createObject;
Jail.prototype.getObject = Game.prototype.getObject;
Jail.prototype.getFlag = Game.prototype.getFlag;
Jail.prototype.getPlatforms = Game.prototype.getPlatforms;
Jail.prototype.getGhost = Game.prototype.getGhost;
Jail.prototype.getPlayer = Game.prototype.getPlayer;
Jail.prototype.getZone = Game.prototype.getZone;
Jail.prototype.getPlayerInfo = Game.prototype.getPlayerInfo;
Jail.prototype.getRemain = Game.prototype.getRemain;
Jail.prototype.play = Game.prototype.play;
Jail.prototype.levelWarp = Game.prototype.levelWarp;
Jail.prototype.coinage = Game.prototype.coinage;
Jail.prototype.lifeage = Game.prototype.lifeage;
Jail.prototype.loop = function() {
    0x0 < this.lobbyTimer ? this.lobbyTimer-- : void 0x0 === this.startDelta && this.doStart();
    Game.prototype.loop.call(this);
};
Jail.prototype.draw = Game.prototype.draw;
Jail.prototype.destroy = Game.prototype.destroy;
"use strict";

function App() {
    this.menu = new Menu();
    this.net = new Network();
}
App.prototype.init = function() {
    var that = this;
    this.menu.disclaim.show();
    setTimeout(function() {
        that.menu.load.show();
        page.cmd("fileGet", 'status.json', function(data)
        {
            data.result ? that.menu.error.show(data.result) : that.menu.main.show(data.active);
        });
        // $.ajax({
        //     'url': "/royale/status.json",
        //     'type': "GET",
        //     'timeout': 0xbb8,
        //     'success': function(_0x4120a1) {
        //         _0x4120a1.result ? that.menu.error.show(_0x4120a1.result) : that.menu.main.show(_0x4120a1.active);
        //     },
        //     'error': function() {
        //         that.menu.error.show("An unknown error occured while connecting to the game server...");
        //     }
        // });
        //that.menu.main.show(1);
    }, 0x7d0);
};
App.prototype.load = function(_0x3f8d80) {
    // console.log("Gametype: "+_0x3f8d80.type)
    if (this.game instanceof Game) this.menu.error.show("State error. Game already loaded.");
    else switch (this.game instanceof Lobby && this.game.destroy(), _0x3f8d80.type) {
        case "game":
            // console.log("Loading new game...");
            this.game = new Game(_0x3f8d80);
            break;
        case "lobby":
            // console.log("Loadng lobby...");
            this.game = new Lobby(_0x3f8d80);
            break;
        case "jail":
            // console.log("Loading jail?...")
            this.game = new Jail(_0x3f8d80);
            break;
        default:
            // console.log("wtf??")
            this.menu.error.show("Critical error! Game file missing type!");
    }
};
App.prototype.ingame = function() {
    return !!this.game;
};
App.prototype.join = function(_0x327f2f, _0x3dc984) {
    this.ingame() ? this.menu.error.show("An error occured while starting game...") : (this.menu.load.show(), this.net.connect(_0x327f2f, _0x3dc984));
};
App.prototype.close = function() {
    this.menu.load.show();
    this.ingame() && this.net.close();
    location.reload();
};
var app = new App();
app.init();