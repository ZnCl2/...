<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Hubzilla in der Dose (HiD)</title>
    <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/feed.xml" rel="self" />
    <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos" />
    <updated>2019-02-16T14:51:14+01:00</updated>
    <author>
        <name>PepeCyB</name>
    </author>
    <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos</id>

    <entry>
        <title>10 – Administration</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/10-administration.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/10-administration.html</id>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>
            <category term="Administration"/>

        <updated>2019-02-09T23:51:50+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/" alt="" />
                     Der frisch gebackene Hub läuft… es gibt aber noch einige Dinge, die man einstellen sollte. Dazu ruft man in seinem Admin-Kanal den Menüpunkt „Administration“ auf. Nun werden die Wichtigsten Daten des Hub angezeigt: Wir rufen das Untermenü „Seite“ (Seitenleiste links) auf, um dort einige&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/nachbearbeiten.png" alt="nachbearbeiten" width="1280" height="794"></p>
<p>Der frisch gebackene Hub läuft… es gibt aber noch einige Dinge, die man einstellen sollte. Dazu ruft man in seinem Admin-Kanal den Menüpunkt „Administration“ auf.</p>
<p>Nun werden die Wichtigsten Daten des Hub angezeigt:</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/adm00.png" alt="adm00" width="1062" height="524"></p>
<p>Wir rufen das Untermenü „Seite“ (Seitenleiste links) auf, um dort einige Änderungen vorzunehmen.</p>
<p>Wenn wir einen öffentlich sichtbaren und ggf. nutzbaren Hub betreiben, sollten wir ihm einen „sprechenden“ Namen geben (bei „Seitenname“ eintragen), vielleicht noch ein „Logo“ mitgeben (als Text bei „Banner/Logo“ eintragen) und auch das Feld „Administrator-Informationen“ sinnvoll befüllen. Da ich für meinen Hub verantwortlich bin, habe ich dort, fast wie bei einem vereinfachten Impressum, meine Kontaktdaten inkl. eMail-Adresse eingetragen. Diese Informationen erscheinen bei Aufruf der Seite „siteinfo“.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/adm01.png" alt="adm01" width="1085" height="411"></p>
<p>Nun muss man sich überlegen, ob man die Registrierung auf dem eigenen Hub erlaubt. Man sollte bedenken, dass mit der Zahl registrierter Konten auch die Last für den kleinen Raspi steigt und der Speicherplatzbedarf zunimmt. Eine völlig freizügige Möglichkeit zur Registrierung ist also nicht sinnvoll. Wenn man es trotzdem bestimmten Nutzern möglich machen möchte, ein Konto anzulegen, empfiehlt es sich, Registrierungen zu erlauben, aber den Eintrag „Nur mit Einladung“ auf „Ja“ zu stellen. Damit kann man den gewünschten Nutzern einen Einladungscode geben, mit dem diese in der Lage sind, sich zu registrieren. Dabei aber immer im Hinterkopf behalten… unser Hub läuft „nur“ auf einem Raspi. Ich habe, weil mein Hub frei im Internet verfügbar sein soll, die Einstellung „Meine Seite hat nur freien Zugriff“ eingestellt. Je nach beabsichtigten Verwendungszweck kann man hier andere Einstellungen machen.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/adm02.png" alt="adm02" width="769" height="483"></p>
<p>Der Unterpunkt „Richtlinien“ ist auch noch interessant… „E-Mail-Adressen überprüfen“ sollte man einschalten… na und hier seht Ihr, was ich bei meinem Hub dort für Einstellungen getroffen habe:</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/11/adm03.png" alt="adm03" width="768" height="583"></p>
<p>Bei „Funktionen“ und „Addons“ trifft man eine Auswahl nach eigenem Geschmack. 😉</p>
<p>Um rechtlich „sauber“ mit seinem Hub daherzukommen, sollte man sich auch noch um die Nutzungsbedingungen und die Datenschutzerklärung kümmern.</p>
<p>Diese werden über die Datei „doc/TermsOfService.md eingebunden, die zunächst folgenden Inhalt hat:</p>
<pre class="wp-block-code"><code>Privacy Policy
==============

#include doc/gdpr1.md;


Terms of Service
================

#include doc/SiteTOS.md;</code></pre>
<p>Die Datenschutzerklärung liegt in englischer Sprache als Datei „gdpr1.md“ vor. Ich habe diese Erklärung übersetzt und wer mag, kann sich die Markdown-Datei mit dieser inoffiziellen Übersetzung herunterladen: <a href="https://pepecyb.hu/files/gdpr1.md" >gdpr1.md</a><br>Die Datei „doc/gdpr1.md“ ersetzt man einfach mit der gleichnamigen Übersetzung… schon ist die Datenschutzerklärung in deutscher Sprache da.</p>
<p>Die Datei „SiteTOS.md“ existiert nach der Hubzilla-Installation nicht… die muss man sich selbst erstellen oder zusammenbauen. Hier die von mir verwendeten Nutzungsbedingungen ebenfalls zur freien Verfügung: <a href="https://pepecyb.hu/files/SiteTOS.md" >SiteTOS.md</a></p>
<p>In dieser Datei die „Platzhalter“</p>
<pre class="wp-block-code"><code>&lt;Name&gt;
&lt;Ort&gt;
&lt;eMail&gt;
&lt;Name der Seite&gt;
&lt;Anschrift&gt;</code></pre>
<p>mit den eigenen Angaben ersetzen, dann die Datei ins Verzeichnis „doc“ auf dem Raspi kopieren… und das war‘s dann jetzt erstmal.</p>
<p>Nun steht an, dass ich mich in die Thematik der Speicherplatzvergrößerung einarbeite, und experimentiere. Wenn ich da eine gute Lösung gefunden habe, folgen hier weitere Teile… aber jetzt bin ich erstmal feddich… mit dem Hubzilla in der Dose.</p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>9 – Hubzilla installieren</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/9-hubzilla-installieren.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/9-hubzilla-installieren.html</id>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T23:48:09+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/10/" alt="" />
                     Nach der ganzen Vorrede nun kurz und knapp die Installation von Hubzilla auf dem Raspi. Das ist keine große Aktion, wenn der Server ordentlich konfiguriert ist. Als erstes erstellen wir uns die benötigte Datenbank mit phpMyAdmin und merken uns den Namen. Als Encoding wählen&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/10/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/10/insthubzilla.png" alt="Install" width="1280" height="794"></p>
<p>Nach der ganzen Vorrede nun kurz und knapp die Installation von Hubzilla auf dem Raspi. Das ist keine große Aktion, wenn der Server ordentlich konfiguriert ist.</p>
<p>Als erstes erstellen wir uns die benötigte Datenbank mit phpMyAdmin und merken uns den Namen. Als Encoding wählen wir „utf8mb4_unicode_ci“.</p>
<p>Wir wechseln in das Verzeichnis „/var/www“</p>
<pre class="wp-block-code"><code>cd /var/www</code></pre>
<p>Nun stellen wir sicher, dass das dort eventuell vorhandene Verzeichnis „html“ leer ist und clonen uns mit git das Hubzilla-Repository:</p>
<pre class="wp-block-code"><code>git clone https://framagit.org/hubzilla/core.git html</code></pre>
<p>Das müssen wir anschließend noch für die Addons erledigen:</p>
<pre class="wp-block-code"><code>cd html
git clone https://framagit.org/hubzilla/addons.git addon</code></pre>
<p>Anschließend geht es im Webbrowser weiter. Wir rufen unsere, durch dDNS erreichbare Domain auf und die Installation beginnt. Zunächst werden die Voraussetzungen für die Installation überprüft. Wenn wir den Raspi so vorbereitet haben, wie in den bisherigen Abschnitten beschrieben und wir auch an die Vermeidung der „Fallstricke“ aus dem vorigen Abschnitt gedacht haben, sollte die Prüfung erfolgreich verlaufen. Der nächste Schritt ist die Anbindung und Initialisierung der Datenbank.</p>
<p>Im Dialog der erscheint, lassen wir die Einträge für „Datenbank-Servername“ und „Datenbank-Port“ unverändert. Bei Datenbank-Benutzername geben wir „root“ ein und bei „Datenbank-Kennwort“ das Passwort für MySQL. Schließlich noch den Namen der gerade erzeugten leeren Datenbank bei „Datenbank-Name“ eingeben und kontrollieren, dass bei „Datenbanktyp“ auch „MySQL“ ausgewählt ist. Nun auf Bestätigen klicken.</p>
<p>Jetzt erscheint ein Formular zum Anlegen des Hub-Administrators.</p>
<p>Bei „E-Mail-Adresse des Seiten-Administrators“ geben wir eine gültige Mailadresse ein… Diese Adresse muss auch später die Mail-Adresse des Zugangs/Kanals des Administrators sein, damit man Zugang zu den Admin-Funktionen hat.</p>
<p>Bei „Server-URL“ wird die dDNS-URL des Raspi eingetragen, „Erweiterte Funktionen für Hubzilla aktivieren“ sollte man auf „Ja“ setzen. Schließlich noch die Auswahl der „Sandart-Zeitzone für Deinen Server“ und anschließend auf „Bestätigen“ klicken.</p>
<p>Bevor wir uns nun bei unserem Hub registrieren (zuerst für den Admin-Account), müssen wir nochmals zum Terminal greifen, um einen Cronjob anzulegen:</p>
<pre class="wp-block-code"><code>crontab -e</code></pre>
<p>Im Editor geben wir dann die Zeile</p>
<pre class="wp-block-code"><code>*/10 * * * * cd /var/www/html; /usr/bin/php Zotlabs/Daemon/Master.php Cron</code></pre>
<p>ein, speichern mit Ctrl-O und beenden den Editor mit Ctrl-X.</p>
<p>Ist das erledigt, geht es im noch offenen Browserfenster weiter. Hier klicken wir auf „Go to your new hub registration page…“ und wir landen bei der Registrierung.</p>
<p>Hier wählen wir als „Ihre E-Mail Adresse“ die Mailadresse, die wir gerade eben für die Hub-Installation eingegeben haben, denken uns ein gutes(!) Passwort aus, bestätigen unser Alter (über 13), akzeptieren unsere Nutzungsbedingungen und klicken schließlich auf „Fortfahren und Deinen ersten Kanal anlegen“.</p>
<p>Nun wird uns mitgeteilt, dass wir auf die angegebene Mail-Adresse eine eMail erhalten haben, wo uns ein Sicherheitscode mitgeteilt wird, den wir eingeben müssen, bevor wir fortfahren können. Das erledigen wir… und dann legen wir uns einen Kanal an. Hier halte ich es für sinnvoll, einen separaten neuen Kanal (mit passendem Namen) nur für Administrationszwecke anzulegen.</p>
<p>Jetzt haben wir im Hauptmenü oben links den Eintrag „Administration“ von wo aus wir unseren Hub konfigurieren und administrieren können.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/10/admin.png" alt="admin" width="282" height="250"></p>
<p>Im nächsten Teil erläutere ich einige – in meinen Augen sinnvolle – Einstellungen, Konfigurationen und erläutere, wie man die Terms of Service Seite und die Datenschutzerklärung einbaut bzw. ändert.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>8 – Installation von Hubzilla – Fallstricke und Probleme</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/8-installation-von-hubzilla-fallstricke-und-probleme.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/8-installation-von-hubzilla-fallstricke-und-probleme.html</id>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T23:46:38+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/9/" alt="" />
                     Wie „angedroht“ hier zunächst die Probleme, über die ich bei der Installation gestolpert bin… Das sind drei Komplexe: url_rewrite, das Verzeichnis „store/[data]/smarty3“ und Rechte, Rechte, Rechte (nicht die politische Gesinnung, sondern Schreib- und Leserechte für die verschiedenen Verzeichnisse 😉 😀 ) Na… dann mal&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/9/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/9/fallen.png" alt="Fallen" width="1280" height="794"></p>
<p>Wie „angedroht“ hier zunächst die Probleme, über die ich bei der Installation gestolpert bin…</p>
<p>Das sind drei Komplexe: url_rewrite, das Verzeichnis „store/[data]/smarty3“ und Rechte, Rechte, Rechte (nicht die politische Gesinnung, sondern Schreib- und Leserechte für die verschiedenen Verzeichnisse 😉 😀 )</p>
<p>Na… dann mal ran, flott ins Verzeichnis „/var/www“ gewechselt und mit git Hubzilla gezogen…</p>
<p>Nöööö… als Benutzer „pi“ geht das nicht… also zum „root“ gemacht… nochmal…</p>
<p>Nächstes Gemecker: Das Verzeichnis html ist nicht leer!<br>Logisch, Apache hat ja seine Standard-Seite da hineingeschrieben.</p>
<p>Also das Verzeichnis html geleert… Hubzilla gezogen, in html gewechselt und mit git noch die Addons nachgeholt.</p>
<p>Die leere Datenbank hatte ich schon angelegt… dann am Rechner meinen Raspi aufgerufen (bei mir ja https://pepecyb.ddns.net) und gleich wieder ausgeschimpft worden.</p>
<p>Das Verzeichnis „store/[data]/smarty3“ existiere nicht und/oder sei nicht beschreibbar. Komisch… das war mir bei meinen diversen Probe-Installationen bei Uberspace nicht passiert… das Verzeichnis befindet sich nicht im Git-Repository, war nach der Installationsroutine aber dann immer vorhanden und beschreibbar.</p>
<p>Ok… kann man ja anlegen:</p>
<pre class="wp-block-code"><code>mkdir -p "store/[data]/smarty3"
chmod -R 777 store</code></pre>
<p>Nun blieb die Fehlermeldung aus. Was mir auffiel: es rödelte und rödelte… dann irgendwann erschien die Seite mit den Systemchecks. Und zeigte den nächsten Fehler an.</p>
<p>Url rewrite funktioniert nicht! Hmmm… ob das Modul nicht aktiviert ist?</p>
<pre class="wp-block-code"><code>sudo a2enmod rewrite</code></pre>
<p>und zur Sicherheit gleich noch</p>
<pre class="wp-block-code"><code>sudo a2enmod actions</code></pre>
<p>nachgeschoben, falls das auch nicht aktiviert sein sollte.</p>
<p>Nächster Versuch… Waaaartezeit… und wieder:</p>
<p>Url rewrite funktioniert nicht!</p>
<p>Seltsam! Ein Aufruf von phpinfo.php behauptete das Gegenteil… url_rewrite ist geladen.</p>
<p>Und warum funktioniert das jetzt nicht? Ich habe mich wie ein Ochse durch verschiedenste Anleitungen aus dem Internet gewühlt und stolperte immer wieder über „AllowOverride All“. Und tatsächlich… in der Datei „/etc/apache2/apache2.conf“ war das nicht gesetzt. Das ist aber erforderlich dass die lokale .htaccess genutzt werden kann.</p>
<p>Danach war das Problem Vergangenheit.</p>
<p>Ich hatte zwischendurch das Verzeichnis „html“ noch einmal geleert und neu gezogen. Dabei habe ich vergessen, das Verzeichnis „store/[data]/smarty3“ anzulegen, aber die Rechte für /var/www/html neu gesetzt:</p>
<pre class="wp-block-code"><code>sudo chmod -R 770 /var/www/html/</code></pre>
<p>Obwohl ich also „store“ nicht angelegt hatte, lief die Installation aber trotzdem durch und das Verzeichnis wurde automatisch für mich angelegt. Lag also wohl an den Verzeichnisrechten.</p>
<p>Noch ein Tipp zu Rechten… Das Verzeichnis war nach der Installation von Apache dem Benutzer „root“ und auch der Gruppe „root“ zugeordnet. Ich habe das geändert und die Gruppe „www-data“ zugewiesen:</p>
<pre class="wp-block-code"><code>sudo chown -R root:www-data /var/www/html/</code></pre>
<p>Der Benutzer „pi“ war außerdem nicht in der Gruppe „www-data“, was ich aus Gründen der Bequemlichkeit auch noch erledigt habe:</p>
<pre class="wp-block-code"><code>sudo usermod -aG www-data pi</code></pre>
<p>Das klingt jetzt so, als wäre das kein großes Ding, aber die Suche nach den Fehlerquellen und das Finden der (eigentlich simplen) Lösungen hat zwei volle Tage gefressen.</p>
<p class="has-text-color">Hier die Zusammenfassung:</p>
<ol>
<li>Vor dem git-clone von Hubzilla, die Standard-Dateien, die von Apache angelegt wurden, aus dem Verzeichnis „/var/www/html“ entfernen.</li>
<li>Die Rechte für das Verzeichnis setzen: sudo chmod -R 770 /var/www/html/</li>
<li>Sicherheitshalber: sudo a2enmod rewrite; sudo a2enmod actions ausführen.</li>
<li>In der Datei „/etc/apache2/apache2.conf“ überall AllowOverride All setzen.</li>
<li>sudo chown -R root:www-data /var/www/html/</li>
<li>sudo usermod -aG www-data pi</li>
</ol>
<p>Und nun folgt im nächsten Teil die Beschreibung der Installation.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>7 – SSL-Zertifikat mit Let‘s Encrypt</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/7-ssl-zertifikat-mit-lets-encrypt.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/7-ssl-zertifikat-mit-lets-encrypt.html</id>
            <category term="Raspberry Pi"/>
            <category term="Let‘s Encrypt"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T23:45:32+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/8/" alt="" />
                     Nun fehlt nur noch ein Zertifikat, damit unser Hubzilla in der Dose per https erreicht werden kann. Gerade bei Diensten, wo teilweise sensible Daten übertragen werden, ist eine Verschlüsselung dieser wichtig und absolut notwendig. Dank Let‘s Encrypt ist es ja nun möglich, kostenlose Zertifikate&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/8/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/8/letsencrypt.png" alt="letsencrypt" width="1280" height="794"></p>
<p>Nun fehlt nur noch ein Zertifikat, damit unser Hubzilla in der Dose per https erreicht werden kann. Gerade bei Diensten, wo teilweise sensible Daten übertragen werden, ist eine Verschlüsselung dieser wichtig und absolut notwendig.</p>
<p>Dank Let‘s Encrypt ist es ja nun möglich, kostenlose Zertifikate zu erstellen und zu verwenden, die von fast allen Webbrowsern anerkannt werden.</p>
<h3 id="mcetoc_1d3a6v9cg0"><span id="Lets_Encrypt">Let‘s Encrypt</span></h3>
<p><a rel="external noopener noreferrer" aria-label="Let‘s Encrypt (öffnet in neuem Tab)" href="https://letsencrypt.org/" target="_blank" >Let‘s Encrypt</a> installieren wir uns am besten via git. Sollte git beim verwendeten Raspbian noch nicht installiert sein (unwahrscheinlich), muss das rasch nachgeholt werden:</p>
<pre class="wp-block-code"><code>sudo apt-get install git</code></pre>
<p>Da wir in der Konfiguration von Apache „herumpfuschen“, sollten wir Apache erst einmal stoppen:</p>
<pre class="wp-block-code"><code>sudo systemctl stop apache2</code></pre>
<p>Nun wechseln wir in unser Home-Verzeichnis und ziehen uns Let‘s Encrypt:</p>
<pre class="wp-block-code"><code>git clone https://github.com/letsencrypt/letsencrypt</code></pre>
<p>Jetzt wechseln wir in das Verzeichnis „letsencrypt“:</p>
<pre class="wp-block-code"><code>cd letsencrypt</code></pre>
<p>Für die Erzeugung und Installation des Zertifikats brauchen wir einmal die Domain (&lt;domain&gt;), für welche das Zertifikat erstellt werden soll, sowie eine funktionierende Mail-Adresse (&lt;email-adesse&gt;). Das Erstellen des Zertifikats erfolgt nun mit:</p>
<pre class="wp-block-code"><code>./letsencrypt-auto -d &lt;domain&gt; --redirect -m &lt;email-adresse&gt; --apache</code></pre>
<p>Der Parameter „–redirect“ sorgt dafür, dass http-Zugriffe auf https umgeleitet werden, „–apache“ sorgt dafür, dass das Zertifikat gleich korrekt für die Nutzung mit dem Apache-Webserver konfiguriert wird.</p>
<p>Nun die Nutzungsbedingungen lesen und akzeptieren. Fertig!</p>
<p>Da Let‘s Encrypt Zertifikate eine Gültigkeitsdauer von drei Monaten haben, müssen wir darauf achten, das Zertifikat rechtzeitig zu erneuern. Das Erneuern funktioniert mit:</p>
<pre class="wp-block-code"><code>./letsencrypt-auto -d &lt;domain&gt; --redirect -m &lt;email-adresse&gt; --agree-tos --renew-by-default</code></pre>
<p>Damit wir nicht ständig daran denken müssen, das Zertifikat rechtzeitig zu erneuern, lassen wir das von einem Cronjob erledigen…</p>
<pre class="wp-block-code"><code>sudo crontab -e</code></pre>
<p>.</p>
<pre class="wp-block-code"><code>0 2 1 * * /home/pi/letsencrypt/letsencrypt-auto -d &lt;domain&gt; --redirect -m &lt;email-adresse&gt; --agree-tos --renew-by-default</code></pre>
<p>Damit wird das Zertifikat an jedem Monatsersten um 2 Uhr in der Nacht automatisch erneuert.</p>
<p>Jetzt schnell noch Apache neu starten:</p>
<pre class="wp-block-code"><code>sudo systemctl start apache2</code></pre>
<p>Rufen wir nun vom Rechner aus https://&lt;domain&gt; auf, sollte wieder die Apache-Standardseite angezeigt werden… und der Browser zeigt Euch (hoffentlich), dass es sich um eine „sichere Verbindung“ handelt.</p>
<p>Der nächste Schritt ist nun schon die Installation von Hubzilla… wobei ich das in zwei Teile unterteile. Zuerst schildere ich die Probleme und Fallstricke, die mir begegnet sind… und wie man die Probleme lösen kann… und im zweiten Teil beschreibe ich die einzelnen Schritte, um Hubzilla zu installieren und in Betrieb zu nehmen.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>6 – dynamisches DNS</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/6-dynamisches-dns.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/6-dynamisches-dns.html</id>
            <category term="dDNS"/>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T23:44:32+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/7/" alt="" />
                     Damit der Raspi im Internet erreichbar ist, benötigt man eine Domain. Damit man über eine Domain einen Webserver erreicht, muss die Domain in einem DNS-Server eingetragen sein, wo der Domain die entsprechende IP-Adresse des Servers zugewiesen wird. Nun soll der Hubzilla-Raspi ja zu Hause&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/7/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/7/ddns.png" alt="dDNS" width="1280" height="794"></p>
<p>Damit der Raspi im Internet erreichbar ist, benötigt man eine Domain. Damit man über eine Domain einen Webserver erreicht, muss die Domain in einem DNS-Server eingetragen sein, wo der Domain die entsprechende IP-Adresse des Servers zugewiesen wird.</p>
<p>Nun soll der Hubzilla-Raspi ja zu Hause stehen… er hängt also am Router und ist über den Zugang des Internet-Providers mit dem Internet verbunden. Er hat also eine eindeutige IP… nur… die ändert sich öfter. Internet-Provider teilen ihren Kunden wechselnde IP zu (einige Provider bieten eine feste IP… das kostet aber ordentlich). Wird der Internet-Zugang getrennt (z.B. bei einem Router-Reset, nach einem Stromausfall oder einer sonstigen Trennung vom Netz) und verbindet sich wieder, dann erhält man eine zufällige IP aus dem Fundus des Providers. Außerdem gibt es bei den meisten Providern eine tägliche routinemäßige Trennung vom Netz, die auch für eine neue IP sorgt. Ein Eintrag der IP bei einem DNS-Server hätte also eine ausgesprochen kurze „Haltbarkeit“ und Aufrufe der Domain würden regelmäßig ins Leere laufen.</p>
<p>Ein Eintrag bei einem DNS-Service ist also nicht sinnvoll.</p>
<h3 id="mcetoc_1d3a6tild0"><span id="dDNS">dDNS</span></h3>
<p>Für diesen Anwendungsfall gibt es aber dynamisch DNS-Dienste, die genau dieses Problem lösen. Hier wird die Domain automatisch auf die neue IP „umgebogen“, wenn sie sich ändert. Bekannte Dienste dieser Art sind z.B. <a rel="external noopener noreferrer" aria-label="DynDNS Service (öffnet in neuem Tab)" href="http://www.dyndnss.net/updater.php" target="_blank" >DynDNS Service</a>, <a rel="external noopener noreferrer" aria-label="DNSdynamic (öffnet in neuem Tab)" href="https://www.dnsdynamic.org/" target="_blank" >DNSdynamic</a>, <a rel="external noopener noreferrer" aria-label="No-IP (öffnet in neuem Tab)" href="https://www.noip.com/remote-access" target="_blank" >No-IP</a>, <a rel="external noopener noreferrer" aria-label="Securepoint DynDNS (öffnet in neuem Tab)" href="http://www.securepoint.de/produkte/utm-firewalls/securepoint-dyndns.html" target="_blank" >Securepoint DynDNS</a>, <a href="http://clickip.de/" target="_blank" rel="external noopener noreferrer" aria-label="clickIP (öffnet in neuem Tab)" >clickIP</a>…</p>
<p>Ich nutze No-IP. Hier gibt es einen kostenlosen Dienst, der auf drei Hostnamen bei eingeschränkter Domainauswahl beschränkt ist und alle 30 Tage eine „Auffrischung“ des Accounts erforderlich macht (man erhält eine eMail-Benachrichtigung). Für gut 21 € im Jahr (also keine zwei Euro im Monat) bekommt man da aber auch den Enhanced Dynamic DNS Dienst, der über 25 Hostnamen bei über 80 Domains bietet und keine „Auffrischung“ erforderlich macht. Ich habe mich für den kostenpflichtigen Dienst entschieden, aber auch der kostenlose Service ist eigentlich völlig ausreichend, solange man sich nicht an der regelmäßigen Reaktivierung stört und man mit drei Hostnamen auskommt.</p>
<p>Hat man sich also z.B. bei No-IP angemeldet und einen DNS-Host (A) registriert, muss man seinen Router noch für diesen dDNS-Dienst konfigurieren. Wie das geht, hängt vom Router ab. Viele Router verfügen über vorkonfigurierte Einstellungen der gängigsten dDNS-Dienste… No-IP ist in der Regel dabei.</p>
<p>Meine Domain für den Hub ist pepecyb.ddns.net. Im Router musste ich nun die Provider-URL (in meinem Fall also http://www.no-ip.com), meinen Benutzernamen (bei No-IP), das Passwort und meinen Hostnamen eingeben (also pepecyb.ddns.net).</p>
<p>Damit der Apache Webserver auch von Außen erreichbar ist, müssen im Router auch noch Portweiterleitungen für die interne IP des Raspberry mit den Ports 80 und 443 (wir richten ja ein SSL-Zertifikat mit Let‘s Encrypt ein) eingerichtet werden. Auch das ist von Router zu Router unterschiedlich… man findet aber für nahezu jedes Modell Anleitungen im Internet. Außerdem muss man ggf., wenn der Router eine Firewall betreibt, auch noch eine DMZ für die interne IP der Raspberry aktivieren… auch das hängt vom Router ab.</p>
<p>Ist das erledigt, sollte bei Aufruf der URL der dDNS-Domain (bei mir http://pepecyb.ddns.net) nun die Standard-Seite des ja bereits laufenden Apache-Webservers erscheinen. Glückwunsch… der Raspi ist im Internet. 😉</p>
<p>Als nächstes erzeugen wir uns mit Let‘s Encrypt ein SSl-Zertifikat und richten es ein.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>5 – eMail-Funktionalität</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/5-email-funktionalitat.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/5-email-funktionalitat.html</id>
            <category term="postfix"/>
            <category term="eMail"/>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T23:43:40+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/6/" alt="" />
                     Damit der Hub später in der Lage ist (ist zwingend notwendig), eMails zu versenden, müssen wir dem Raspi zu dieser Fähigkeit verhelfen. Man könnte nun einen vollwertigen Mailserver aufsetzen… aber das wäre mit Kanonen auf Spatzen geschossen, denn es muss letztlich nur möglich sein,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/6/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/6/postfix.png" alt="eMail" width="1280" height="794"></p>
<p>Damit der Hub später in der Lage ist (ist zwingend notwendig), eMails zu versenden, müssen wir dem Raspi zu dieser Fähigkeit verhelfen. Man könnte nun einen vollwertigen Mailserver aufsetzen… aber das wäre mit Kanonen auf Spatzen geschossen, denn es muss letztlich nur möglich sein, eMails per PHP zu versenden… ein Mail-Empfang ist nicht erforderlich. Wenn man über einen Mail-Account verfügt (ob selbst gehostet oder bei einem Mail-Provider), dann kann man den Raspi so einrichten, dass er eMails über diesen Mailserver sendet. Für diese Funktionalität gibt es mehrere Möglichkeiten… z.B. <a href="https://packages.qa.debian.org/s/ssmtp.html" target="_blank" rel="external noopener noreferrer" aria-label="ssmtp (öffnet in neuem Tab)" >ssmtp</a> oder <a rel="external noopener noreferrer" aria-label="postfix (öffnet in neuem Tab)" href="http://www.postfix.org/" target="_blank" >postfix</a>.</p>
<p>ssmtp klang für mich zunächst „einfacher“ oder „leichtgewichtiger“ (postfix klingt dann doch eher wieder nach echtem, fetten Mailserver), weshalb ich es damit versucht habe. Ich erläutere hier jetzt aber nicht die Installation und die Konfiguration, weil ich daran nach etlichen Stunden endgültig gescheitert bin. Es wollte mir partout nicht gelingen, ssmtp so zu konfigurieren, dass es mit dem Mail-Account meines Hosting-Providers zusammenarbeiten wollte. Sucht man im Netz nach Lösungen, so findet man meist Beispiele für das Zusammenspiel mir einer gmail- oder GMX-Mailadressen. Da ich aus meinem Internet-Mittelalter noch brachliegende und ungenutzte Mail-Accounts sowohl beim Gockel, als auch bei GMX hatte, habe ich es auch – nur zum Ausprobieren – mit beiden getestet… ebenfalls vergeblich. Die Dokumentation von ssmtp ist… vorsichtig und nett ausgedrückt… suboptimal… Versuche mit verschiedenen Konfigurationen führten entweder dazu, dass der Mailserver gar nicht erreicht wurde oder dass das Login an vermeintlich „falschen Logindaten“ scheiterte. Und das für alle Accounts, die ich probiert habe. Ich habe etliche Stunden mit den Konfigurationsdateien herumexperimentiert und im Netz recherchiert… und dann irgendwann aufgegeben.</p>
<p>Da postfix eine vergleichbare Funktionalität bietet habe ich ssmtp dann vom Raspi geschmissen und es mit postfix probiert. Hätte ich gleich machen sollen, denn die Dokumentation ist vorbildlich, die Einrichtung einfach… nach wenigen Minuten gelang es mir, Mail über den Mailaccount meines Hosting-Providers zu versenden.</p>
<p>Hier also die „Anleitung“ für die Postfix-Lösung…</p>
<p>Die Postfix-Installation erfolgt mit</p>
<pre class="wp-block-code"><code>apt-get install postfix</code></pre>
<p>Das Konfigurationsskript fragt nun nach dem Anwendungszweck… hier wählt man „Sattelitensystem“ („Satellite System“), womit keine Mails empfangen werden, aber Mails über einen Smart-Host versendet werden können.</p>
<p>Nun muss die Datei „/etc/postfix/main.cf“ angepasst werden…</p>
<pre class="wp-block-code"><code>nano /etc/postfix/main.cf</code></pre>
<p>Hier sind folgende Einträge wichtig:</p>
<pre class="wp-block-code"><code>relayhost = &lt;entfernter_mailserver&gt;:&lt;port&gt;
mail_owner = postfix
setgid_group = postdrop
mtp_sasl_auth_enable=yes
smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
smtp_sasl_security_options=</code></pre>
<p>Bei „relayhost“ müsst Ihr den Mailhost Eures Mail-Providers und den Port für SMTP-Mailversand eingeben.</p>
<p>Nun muss noch die Passwort-Datei angelegt werden:</p>
<pre class="wp-block-code"><code>nano /etc/postfix/sasl_passwd</code></pre>
<p>Hier werden die Zugangsdaten eingetragen…</p>
<pre class="wp-block-code"><code>entfernter_mailrerver&gt;:&lt;port&gt; &lt;loginname&gt;:&lt;passwort&gt;</code></pre>
<p>Nun die Passwortdatei gegen unberechtigten Zugriff sichern:</p>
<pre class="wp-block-code"><code>chmod 600 /etc/postfix/sasl_passwd</code></pre>
<p>Und schließlich die Benutzen-Datenbank mit</p>
<pre class="wp-block-code"><code>postmap hash:/etc/postfix/sasl_passwd</code></pre>
<p>erzeugen. Jetzt nur noch postfix neu starten…</p>
<pre class="wp-block-code"><code>systemctl restart postfix</code></pre>
<p>Damit sollte der Mailversand auch schon klappen. Ausprobieren kann man es mit</p>
<pre class="wp-block-code"><code>echo „Testmail“ | mail -s „Test Mail“ &lt;mailadresse&gt;</code></pre>
<p>Falls etwas nicht klappt, sollte man in den Dateien „/var/log/mail.err“ und „/var/log/mail.log“ nachschauen.</p>
<p>Als nächstes sollte der Raspi jetzt „im Internet bekannt gemacht werden“… soll heißen, wir brauchen eine Domain, damit der Raspi von überall erreicht werden kann, ohne die IP zu kennen… das geschieht zuhause, wo man von seinem Internet-Provider regelmäßig andere IP zugewiesen bekommt, mit dynamischem DNS (dDNS). Wie das funktioniert… folgt im nächsten Abschnitt.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>4 – Datenbank: MySQL und phpMyAdmin</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/4-datenbank-mysql-und-phpmyadmin.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/4-datenbank-mysql-und-phpmyadmin.html</id>
            <category term="phpMyAdmin"/>
            <category term="Raspberry Pi"/>
            <category term="MySQL"/>
            <category term="Hubzilla"/>

        <updated>2019-02-16T14:50:34+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/5/" alt="" />
                     Für den Betrieb von Hubzilla benötigt man eine Datenbank. Es können MySQL, MariaDB oder postgres zum Einsatz kommen. Ich habe mich für MySQL entschieden… das ist quasi wieder der „Standard“ bei Hubzilla. MySQL ist schnell installiert sudo apt-get install mysql-server mysql-client…muss dann aber noch&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/5/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/5/mysql.png" alt="mySQL" width="1280" height="794"></p>
<p>Für den Betrieb von Hubzilla benötigt man eine Datenbank. Es können MySQL, MariaDB oder postgres zum Einsatz kommen. Ich habe mich für <a href="https://www.mysql.com/" target="_blank" rel="external noopener noreferrer" aria-label="MySQL (öffnet in neuem Tab)" >MySQL</a> entschieden… das ist quasi wieder der „Standard“ bei Hubzilla.</p>
<h3 id="mcetoc_1d3a6n97p0"><span id="MySQL">MySQL</span></h3>
<p>MySQL ist schnell installiert</p>
<pre class="wp-block-code"><code>sudo apt-get install mysql-server mysql-client</code></pre>
<p>…muss dann aber noch konfiguriert werden:</p>
<pre class="wp-block-code"><code>sudo mysql_secure_installation</code></pre>
<p>Nach Eingabe dieses Kommandos folgen einige Fragen:</p>
<ol>
<li>Abfrage des aktuellen Passworts für den DB-Benutzer „root“. Da wir noch keines vergeben haben, einfach „enter“ drücken.</li>
<li>Set root password? [Y/n] Antwort: „Y“ Hier sollte nun ein gutes(!) Passwort gewählt werden, um den Datenbankzugriff abzusichern.</li>
<li>Remove anonymous users? [Y/n] Antwort: „Y“ Wir wollen keinen anonymen Benutzer.</li>
<li>Disallow root login remotely? [Y/n] Antwort: „N“ Ein Remote-login in die Datenbank muss möglich sein.</li>
<li>Remove test database and access to it? [Y/n] Antwort: „N“ Die Testdatenbank sollte erhalten bleiben.</li>
<li>Reload privilege tables now? [Y/n] Antwort: „Y“ Damit werden die getroffenen Einstellungen sofort aktiviert.</li>
</ol>
<p>Die Installation von MySQL ist damit abgeschlossen.</p>
<h3 id="mcetoc_1d3a6n97p1"><span id="phpMyAdmin">phpMyAdmin</span></h3>
<p>Um auch vom Rechner aus komfortabel mit der Datenbank umgehen zu können, empfiehlt sich die Installation von <a href="https://www.phpmyadmin.net/" target="_blank" rel="external noopener noreferrer" aria-label="phpMyAdmin (öffnet in neuem Tab)" >phpMyAdmin</a>, einer Weboberfläche für die Datenbankverwaltung. Die Installation erfolgt mit</p>
<pre class="wp-block-code"><code>sudo apt-get install php-mysql libapache2-mod-auth-mysql phpmyadmin</code></pre>
<p>In der folgenden Konfiguration wählen wir als Webserver „apache2“.</p>
<p>Nun folgt die Frage, ob benötigte Datenbanken erzeugt werden sollen. Das bestätigen wir.</p>
<p>Das Konfigurations-Skript fragt nun nach dem root-Passwort, das wir bei Installation von MySQL vergeben haben.</p>
<p>Schließlich wird noch ein Passwort gewählt, das zum einloggen bei phpMyAdmin verwendet werden soll. Nach Eingabe und Bestätigung ist die Installation erledigt.</p>
<p>Apache2 muss nun noch mit phpMyAdmin „verknüpft“ werden. Dazu editiert man die Datei „/etc/apache2/apache2.conf“:</p>
<pre class="wp-block-code"><code>sudo nano /etc/apache2/apache2.conf</code></pre>
<p>und fügt ganz am Ende der Datei</p>
<pre class="wp-block-code"><code>Include /etc/phpmyadmin/apache.conf</code></pre>
<p>an.</p>
<p>Anschließend Apache2 neu starten:</p>
<pre class="wp-block-code"><code>/etc/init.d/apache2 restart</code></pre>
<p>Gibt man nun wieder die IP des Raspi, gefolgt von „phpmyadmin“ ein, also z.B.</p>
<pre class="wp-block-code"><code>http://192.168.1.6/phpmyadmin/</code></pre>
<p>erscheint die Loginseite, wo man sich als Benutzer „root“ und dem soeben vergebenen Passwort einloggen kann und in der DB-Verwaltung landet.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/5/phpmyadmin.png" alt="phpMyAdmin" width="397" height="526"></p>
<p>Die Datenbank ist also auch vorbereitet… als nächstes folgt die Einrichtung der Mail-Funktionalität.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>3 – Apache Webserver und PHP</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/3-apache-webserver-und-php.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/3-apache-webserver-und-php.html</id>
            <category term="Raspberry Pi"/>
            <category term="PHP"/>
            <category term="Hubzilla"/>
            <category term="Apache"/>

        <updated>2019-02-16T14:50:01+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/4/" alt="" />
                     Für Hubzilla braucht es einen Webserver. Hubzilla läuft mit Apache, Nginx und soll auch schon mit lighttpd zum Laufen gebracht worden sein. Die Nutzung von Apache ist allerdings am besten dokumentiert, weshalb sich dieser Webserver anbietet. Für die Installation muss man lediglich sudo apt-get&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/4/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/4/apachephp.png" alt="Apache" width="1280" height="794"></p>
<p>Für Hubzilla braucht es einen Webserver. Hubzilla läuft mit <a rel="external noopener noreferrer" aria-label="Apache (öffnet in neuem Tab)" href="https://www.apache.org/" target="_blank" >Apache</a>, <a rel="external noopener noreferrer" aria-label="Nginx (öffnet in neuem Tab)" href="https://nginx.org/" target="_blank" >Nginx</a> und soll auch schon mit <a href="https://www.lighttpd.net/" target="_blank" rel="external noopener noreferrer" aria-label="lighttpd (öffnet in neuem Tab)" >lighttpd</a> zum Laufen gebracht worden sein. Die Nutzung von Apache ist allerdings am besten dokumentiert, weshalb sich dieser Webserver anbietet.</p>
<h3 id="mcetoc_1d3a6j4jf0"><span id="Apache">Apache</span></h3>
<p>Für die Installation muss man lediglich</p>
<pre class="wp-block-code"><code>sudo apt-get install apache2</code></pre>
<p>eingeben.</p>
<p>Ist die Installation erfolgt, kann man im Webbrowser am Rechner einmal die IP des Raspi eingeben… also beispielsweise http://192.168.1.6</p>
<p>Es sollte dann die Standardseite von Apache angezeigt werden:</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/4/apache2.png" alt="Apache2" width="795" height="632"></p>
<p>Das Verzeichnis für Webinhalte, die Apache „serviert“ ist „/var/www/html“.</p>
<h3 id="mcetoc_1d3a6kbde1"><span id="PHP">PHP</span></h3>
<p>Hubzilla benötigt außerdem <a href="https://php.net/" target="_blank" rel="external noopener noreferrer" aria-label="PHP (öffnet in neuem Tab)" >PHP</a> (und MySQL). Die Installation ist wiederum sehr einfach:</p>
<pre class="wp-block-code"><code>sudo apt-get install php php-mysql</code></pre>
<p>Ob PHP richtig läuft, kann man sich anzeigen lassen, indem man eine Datei „phpinfo.php“ im Verzeichnis „/var/www/html“ erzeugt:</p>
<pre class="wp-block-code"><code>sudo nano /var/www/html/phpinfo.php</code></pre>
<p>Die Datei muss folgenden Inhalt haben:</p>
<pre class="wp-block-code"><code>&lt;?php
 phpinfo();
?&gt;</code></pre>
<p>Ruft man nun wieder die IP des Raspi auf und hängt „phpinfo.php“ an, sollte die Informationsseite von PHP angezeigt werden. Benötigt wird auch das Modul „php-db“, das noch installiert werden muss:</p>
<pre class="wp-block-code"><code>sudo apt-get install php-db</code></pre>
<p>In der Standard-Konfiguration erlaubt PHP den Upload von Dateien mit einer Maximalgröße von 2 MB. Das ist definitiv zu wenig. Schon der Import eines Channels liegt oftmals darüber. Um dieses Limit zu erhöhen, editiert man die Datei „/etc/php/php.ini“:</p>
<pre class="wp-block-code"><code>sudo nano /etc/php/</code><code>php/7.0/apache2/</code><code>php.ini</code></pre>
<p>In der Datei sucht man den Bereich „File Uploads“ (ungefähr in der Mitte der Datei) und ändert die Zeile</p>
<pre class="wp-block-code"><code>upload_max_filesize = 2M</code></pre>
<p>in</p>
<pre class="wp-block-code"><code>upload_max_filesize = 8M</code></pre>
<p>(…oder, wenn man meint, es reicht, auch 4 oder 6M)</p>
<p>Im nächsten Abschnitt dann die Installation der Datenbank MySQL und dem DB-Tool phpMyAdmin.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>2 – SSH und FTP einrichten</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/2-ssh-und-ftp-einrichten.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/2-ssh-und-ftp-einrichten.html</id>
            <category term="SSH"/>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>
            <category term="FTP"/>

        <updated>2019-02-16T14:49:15+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/" alt="" />
                     Der Raspi soll irgendwann ja ganz unauffällig und geräuschlos neben dem Router im Regal liegen… Monitor, Tastatur und Maus würden da stören und sind auch nicht nötig, solange man ohnehin einen „richtigen“ Computer (wobei… der Raspi ist durchaus ein richtiger Computer… echt leistungsfähig, die&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/" alt="" />
                <p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/sshftp.png" alt="HFTP" width="1280" height="794"></p>
<p>Der Raspi soll irgendwann ja ganz unauffällig und geräuschlos neben dem Router im Regal liegen… Monitor, Tastatur und Maus würden da stören und sind auch nicht nötig, solange man ohnehin einen „richtigen“ Computer (wobei… der Raspi ist durchaus ein richtiger Computer… echt leistungsfähig, die kleine Schachtel) am Router zu hängen hat… oder woanders mit Internetzugang.</p>
<h3 id="mcetoc_1d3a4buoa0"><span id="SSH">SSH</span></h3>
<p>Was es am Raspi als Server/Hub zu tun gibt, erfolgt ohnehin auf der Textkonsole und kann mit SSH-Zugriff bequem vor anderen Rechner aus erfolgen.</p>
<p>SSH sollte bereits bei Raspbian installiert sein, es muss nur aktiviert werden. Das erledigt man am besten mit dem Tool „raspi-config“:</p>
<pre class="wp-block-code"><code>sudo raspi-config</code></pre>
<p>Nun kommt es auf die Version an, wo man die Aktivierung von SSH findet… bei meiner Version ist die Aktivierung unter „5 Interfacing Options -&gt; P2 SSH“ zu finden. Hier kann SSH aktiviert werden.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/raspi-config_ssh01.png" alt="SSH01" width="1096" height="331"></p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/raspi-config_ssh02.png" alt="SSH02" width="1096" height="332"></p>
<p>Bei mir hängt der Raspi am heimischen Router… diese und alle weiteren Beschreibungen beziehen sich damit auch auf solch einen Anwendungsfall.</p>
<p>Um nun vom „normalen“ Rechner (nenne ich ab jetzt nur noch Rechner), der ebenfalls am Router hängt, auf den Raspi zugreifen zu können, muss man die interne IP kennen, die vom Router für den Raspi vergeben wurde.</p>
<p>Um die IP herauszufinden gibt man beim Raspi</p>
<pre class="wp-block-code"><code>ifconfig</code></pre>
<p>ein. In der Ausgabe erfährt man dann die interne IP… z.B.</p>
<pre class="wp-block-code"><code>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.1.6  netmask 255.255.255.0  broadcast 192.168.1.255</code></pre>
<p>Alternativ kann man am Rechner das Webinterface des Routers aufrufen und sich dort die angeschlossenen Geräte anzeigen lassen.</p>
<p>Nun kann man vom Rechner aus in einer Konsole</p>
<pre class="wp-block-code"><code>ssh pi@192.168.1.6</code></pre>
<p>eingeben (ich nutze hier und künftig die IP aus dem Beispiel oben 192.168.1.6… das muss man natürlich an seine eigenen Verhältnisse anpassen, also die IP des eigenen Raspi verwenden).</p>
<p>Es wird nach dem Passwort des Benutzers „pi“ gefragt, das man blind eingeben muss… und schon ist man auf dem Raspi eingeloggt und man arbeitet, als säße man direkt an einer Konsole des Raspi.</p>
<h3 id="mcetoc_1d3a4e1c11"><span id="FTP">FTP</span></h3>
<p>Hat man nun Daten auf dem Rechner und möchte man sie auf den Raspi kopieren, ist es sinnvoll, dies mittels FTP-Zugang zu machen. Dafür muss auf dem Raspi ein FTP-Server laufen.</p>
<p>Zur Installation von <a href="http://proftpd.org/" target="_blank" rel="external noopener noreferrer" aria-label="proftpd (öffnet in neuem Tab)" >proftpd</a> (in meinen Augen am sinnvollsten) gibt man</p>
<pre class="wp-block-code"><code>sudo apt-get install proftpd</code></pre>
<p>ein.</p>
<p>Die Konfiguration startet dann automatisch und man wird nach der Variante gefragt. Hier wählt man „standalone“.</p>
<p><img class="post__image" src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/3/raspi-config_ftp.png" alt="FTP01" width="510" height="285"></p>
<table border="2">
<tbody>
<tr>
<td><strong>Hinweis:</strong></td>
</tr>
<tr>
<td>
<div class="ab-notice-text">
<p>Es kann sein, dass bei der verwendeten Version von Raspbian der Konfigurationsdialog (from inetd / standalone) nicht erscheint.</p>
<p>Das ist dann kein Problem und kann ignoriert werden.</p>
</div>
</td>
</tr>
</tbody>
</table>
<p>Nun ist es zunächst nur möglich, sich als „pi“ mit dem bekannten Passwort einzuloggen… man hat aber nur Zugriff auf sein Home-Verzeichnis, um dort Dateien hochzuladen oder von dort herunterzuladen. Später, wenn wir den Webserver Apache installieren, müssen die Daten aber ins Verzeichnis (in der Standard-Konfiguration) „/var/www“ hochgeladen werden. Um eine entsprechende Einrichtung kümmern wir uns, wenn Apache installiert wurde.</p>
<p>Im nächsten Teil kümmern wir uns um die Installation und Einrichtung des Webservers Apache und der Skriptsprache PHP.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>1 – Erste Schritte</title>
        <author>
            <name>PepeCyB</name>
        </author>
        <link href="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/1-erste-schritte.html"/>
        <id>http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/1-erste-schritte.html</id>
            <category term="Raspberry Pi"/>
            <category term="Hubzilla"/>

        <updated>2019-02-09T22:57:45+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/2/" alt="" />
                    Um einen Hubzilla-Hub auf einem Raspberry Pi zu installieren, braucht man zunächst einmal einen… … … genau, einen Raspberry Pi (Raspi). Es gibt inzwischen einige Modelle mit unterschiedlichen Spezifikationen und Features. Aktuell sind die Modelle 3 A+, 3 B, 3 B+ und Zero. Die 3er-Modelle&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="http://127.0.0.1:43110/181mC4f8uoYyQsaM6XeFhC27mksLyp8Tos/media/posts/2/" alt="" />
                <p>Um einen Hubzilla-Hub auf einem <a href="https://www.raspberrypi.org/" target="_blank" rel="external noopener noreferrer" aria-label="Raspberry Pi (öffnet in neuem Tab)" >Raspberry Pi</a> zu installieren, braucht man zunächst einmal einen… … … genau, einen Raspberry Pi (Raspi). Es gibt inzwischen einige Modelle mit unterschiedlichen Spezifikationen und Features. Aktuell sind die Modelle 3 A+, 3 B, 3 B+ und Zero.</p>
<h3 id="mcetoc_1d3a47mfg0"><span id="Modellwahl">Modellwahl</span></h3>
<p>Die 3er-Modelle unterscheiden sich zunächst durch Prozessortakt und Hauptspeicher. 3 A+ und 3 B+ sind mit 1.400 MHz getaktet, 3 B mit 1.200 MHz. Sie laufen mit einem ARM Cortex-A53 64-Bit-Prozessor mit 4 Prozessorkernen. Das A-Modell verfügt über 512 MB Hauptspeicher, die B-Modelle über 1 GB. Der Zero wird mit einem ARM11Prozessor, 1.000 MHz und nur einem Prozessorkern betrieben. Der Hauptspeicher liegt bei 512 MB.</p>
<p>Das Zero-Modell funktioniert sicherlich, denn das war ja der Typ, mit dem <a href="https://despora.de/posts/093d77806e550136eb59543d7eeced27" target="_blank" rel="external noopener noreferrer" aria-label="Marlon (öffnet in neuem Tab)" >Marlon</a> seine erfolgreichen Versuche durchgeführt hat. Allerdings sind Hauptspeicher und Prozessorleistung wichtige Faktoren für die Leistungsfähigkeit, weshalb ich die Modelle 3 A und 3 B für geeigneter halte.</p>
<p>Die Taktfrequenz von 1.200 MHz des Modells B sollte ausreichend sein. Gegen das Modell A+ spricht für mich der Hauptspeicher, der mit 1/2 GB ein wenig knapp bemessen ist… und die Tatsache, dass es über keine Ethernet-Schnittstelle verfügt. Klar… WLAN haben sie alle und man kann das auch für einen Hub nutzen… ich persönlich bevorzuge aber ein Kabel (WLAN nutze ich nur, wenn es auf Ortsunabhängigkeit ankommt… ist meine persönliche Macke). Modell A bietet außerdem nur eine USB 2.0 Schnittstelle, wogegen die B-Modelle mit vier daherkommen (das ist praktisch für die Installation Tastatur und Maus brauchen schon zwei USB… so kann man sich einen externen HUB sparen).</p>
<p>Für mich fiel der 3 A+ damit raus… Ich habe mich deshalb für das Modell 3 B entschieden, weil es für mich sofort verfügbar war und mich die „fehlenden“ 200 MHz nicht gejuckt haben. Grundsätzlich sollte es aber mit allen angesprochenen Systemen klappen, einen Hub aufzusetzen. Meine Beschreibungen sollten auch unabhängig vom Modell funktionieren (bei Modellen ohne Ethernet-Schnittstelle muss man aber noch das WLAN konfigurieren).</p>
<h3 id="mcetoc_1d3a47mfh1"><span id="Verpackung_und_Zubehoer_die_Dooose">„Verpackung“ und Zubehör (die Dooose)</span></h3>
<p>Wenn man den Raspi nicht irgendwo speziell einbauen möchte, dann sollte auch ein Gehäuse her. Ich habe das Standard-Gehäuse 3B+ in schwarz gewählt. Ein passendes Netzteil muss auch sein… und eine SD-Speicherkarte… 8 GB sollten es schon sein… 16 GB sind besser. Für die Installation benötigt man dann noch ein HDMI-Kabel für den Anschluss eines Monitors, eine Tastatur und eine Maus. Für den Ethernet-Anschluss muss man natürlich auch noch ein passendes Kabel haben.</p>
<p>Ich habe mir ein komplettes Set bestellt, bei dem außerdem noch Kühlkörper für die Chips das Raspi dabei waren. Über die Notwendigkeit von Kühlkörpern scheiden sich die Geister… eigentlich sollen sie gar nicht nötig sein… aber ehrlich… die kosten auch einzeln nicht viel und Kühlung schadet echt nicht.</p>
<p>Der mechanische Zusammenbau ist keine Kunst. Die Kühlkörper sind schnell aufgeklebt und die Platine findet selbsterklärend Platz im Gehäuse… zu schrauben braucht man nichts.</p>
<h3 id="mcetoc_1d3a47mfh2"><span id="Ein_Betriebssystem_installieren">Ein Betriebssystem installieren</span></h3>
<h4 id="mcetoc_1d3a47mfh3"><span id="Raspbian">Raspbian</span></h4>
<p>Auf einem Raspi kann man etliche Betriebssysteme installieren. Für einen Hub und weil es der Standard ist, habe ich mich für Raspbian entschieden, eine Debian Linux Version für den Raspi. Man kann Raspbian z.B. hier herunterladen: <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external noopener noreferrer" aria-label="Raspbian (öffnet in neuem Tab)" >Raspbian</a>.<br>Wer Windows nutzt kann nun das entpackte Image z.B. mit Win32DiskImager auf die SD-Karte bringen, MacOS- und Linux-Benutzer erledigen das mit dd.<br>Das beschreibe ich hier jetzt aber auch nicht ausführlich. Das sollte man schon hinbekommen (ggf. im Netz danach suchen).</p>
<p>Man verkabelt nun den Raspi (Monitor an HDMI, Maus und Tastatur an USB), setzt die SD-Karte in den Slot und stöpselt schließlich das Netzteil an (damit startet der Raspi, der keinen extra Netzschalter hat).</p>
<p>Bootet man den Raspi, landet man nach einiger Zeit bei dem Programm raspi-config, wo man die erforderlichen ersten Einstellungen vornehmen kann. Sinnvoll ist es, den Menüpunkt „Expand Filesystem“ zu wählen, damit die Partition auf die gesamte SD-Karte ausgedehnt wird (wirksam erst nach Reboot). Das Konfigurationsprogramm ermöglicht es auch, Tastatur und Systemsprache (locale) auf die eigene Sprache (vermutlich Deutsch) umzustellen. Dann folgt ein Reboot. Man kann dann auch noch die Auslagerungsdatei (swap) auf 1024 MB erweitern und sollte anschließend die Software aktualisieren. Dazu gibt man im Terminal</p>
<pre class="wp-block-code"><code>sudo apt-get update
sudo apt-get dist-upgrade
sudo rpi-update</code></pre>
<p>ein.</p>
<p>Ggf. ist ein weiterer Reboot erforderlich.</p>
<h4 id="mcetoc_1d3a47mfh4"><span id="Raspbian_mit_Noobs_installieren_kinderleicht">Raspbian mit Noobs installieren – kinderleicht</span></h4>
<p>Noch einfacher ist die Installation mit Noobs (New out of box software). Noobs kann man sich hier herunterladen: <a href="https://www.raspberrypi.org/downloads/noobs/" target="_blank" rel="external noopener noreferrer" aria-label="Noobs (öffnet in neuem Tab)" >Noobs</a> (am besten NOOBS LITE Network install only wählen).</p>
<p>Die SD-Karte wird FAT/FAT32 formatiert und die Daten des Noobs-Zipfiles werden auf die SD-Karte entpackt. Bootet man mit der solchermaßen vorbereiteten SD-Karte landet man bei einem grafischen Installationsprogramm, mit dem man z.B. Raspbian ganz einfach auf die Karte bringt (Netzwerkverbindung erforderlich, weil das Betriebssystem aus dem Netz heruntergeladen wird). Einfacher geht nicht.</p>
<p>Auch hier wieder nach der Installation aktualisieren:</p>
<pre class="wp-block-code"><code>sudo apt-get update
sudo apt-get dist-upgrade
sudo rpi-update</code></pre>
<h3 id="mcetoc_1d3a47mfh5"><span id="Grundlegende_Absicherung">Grundlegende Absicherung</span></h3>
<p>Nach der Installation ist der Standard-Benutzer „pi“ und das Standard-Passwort „raspberry“. Weil der Rechner ja irgendwann im Internet hängt und auch von außerhalb erreichbar sein wird, MUSS das Passwort geändert werden. Hier sollte man auch nicht kleckern, sondern klotzen und ein Passwort wählen, das komplex und lang genug ist (Tipps dafür gibt es ausreichend im Netz… Diceware wäre eine gute Idee, damit man es sich merken kann). Der Benutzer „pi“ kann nämlich per „sudo“ ohne weitere Passwortabfrage Root-Rechte bekommen… ein Angreifer hat damit das System faktisch übernommen.</p>
<p>Es wird verschiedentlich auch empfohlen, einen neuen Benutzer (mit anderem Benutzernamen) und den gleichen Rechten wie „pi“ anzulegen und den Benutzer „pi“ anschließend zu löschen. Halte ich bei einer wirklich guten Passwortwahl für überflüssig.</p>
<p>Wichtig für die Sicherheit ist außerdem, das System regelmäßig mit Updates zu versorgen. Das kann man automatisieren. Ich nutze aus Bequemlichkeit „unattended-upgrades“.</p>
<p>Dazu gibt man im Terminal</p>
<pre class="wp-block-code"><code>sudo apt-get install unattended-upgrades update-notifier-common</code></pre>
<p>ein, um die notwendige Software zu installieren. Die Konfiguration startet man mit</p>
<pre class="wp-block-code"><code>sudo dpkg-reconfigure -plow unattended-upgrades</code></pre>
<p>und bestätigt mit „YES“.</p>
<p>Für die automatischen Updates editiert man nun die Datei „/etc/apt/apt.conf.d/10periodic“ mit</p>
<pre class="wp-block-code"><code>sudo nano /etc/apt/apt.conf.d/10periodic</code></pre>
<p>Ich möchte eine tägliche Überprüfung auf Updates. Damit man sich die SD-Karte nicht mit veralteten Paketen zumüllt, sollen alte Pakete einmal wöchentlich gelöscht werden. Dazu ändert man die Datei wie folgt:</p>
<pre class="wp-block-code"><code>APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";</code></pre>
<p>(Speichern und beenden bei Nano immer mit Strg-O und Strg-X)</p>
<p>Um Bruteforce-Angriffe zu verhindern, empfiehlt sich außerdem <a href="https://www.fail2ban.org/wiki/index.php/Main_Page" target="_blank" rel="external noopener noreferrer" aria-label="fail2ban (öffnet in neuem Tab)" >fail2ban</a> zu installieren:</p>
<pre class="wp-block-code"><code>sudo apt-get install fail2ban</code></pre>
<p>In der Standard-Konfiguration werden IP-Adressen nach sechs fehlerhaften Anmeldungen für 10 Minuten gesperrt. Ändern könnt Ihr das in der Datei „/etc/fail2ban/jail.conf “.</p>
<p>Schließlich kann man auch noch eine Firewall mit <a href="https://netfilter.org/projects/iptables/index.html" target="_blank" rel="external noopener noreferrer" aria-label="Iptables (öffnet in neuem Tab)" >Iptables</a> einrichten. Das spare ich mir hier aber für später auf, weil man damit auch viel „verzerkonfigurieren“ kann und sich evtl. Fehler aufhalst, die man als unerfahrener Benutzer nur schwer findet.</p>
<p>Das System ist soweit auch erst einmal ausreichend abgesichert.</p>
<p>Im nächsten Teil geht es weiter mit der Einrichtung von SSH, damit man Monitor, Tastatur und Maus abklemmen kann und den Rechner von seinem „normalen“ Rechner aus bedienen kann. Außerdem wird ein FTP-Server eingerichtet, damit man Daten auf den Raspi schaufeln kann.</p>
            ]]>
        </content>
    </entry>
</feed>
